void Espresso::load_network_no_dispatch(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, uint64_t *a4@<X8>)
{
  std::__shared_weak_count *v5;
  int v6;
  std::string::size_type v7;
  const std::string::value_type *v8;
  uint64_t v9;
  const std::string::value_type *v10;
  char *v11;
  uint64_t v12;
  BOOL v13;
  const std::string::value_type *v14;
  uint64_t v15;
  std::string::value_type *v16;
  const std::string::value_type *v17;
  uint64_t v18;
  uint64_t v19;
  std::string::value_type *v20;
  const std::string::value_type *v22;
  const std::string::value_type *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v29;
  std::string *v30;
  std::__shared_weak_count *size;
  char *v32;
  std::string::size_type v33;
  void **p_data;
  uint64_t v35;
  std::__shared_weak_count *v36;
  std::string::size_type v37;
  std::string *v38;
  std::string *v39;
  std::string *v40;
  std::string *v41;
  uint64_t v42;
  int v43;
  int v44;
  char *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  char *v48;
  void *v49;
  std::string::size_type v50;
  std::string::size_type v51;
  std::string::size_type v52;
  std::__shared_weak_count *data;
  std::runtime_error *exception;
  std::runtime_error *v55;
  uint64_t v57;
  std::string::size_type __sz;
  std::__shared_weak_count *__sza;
  std::__shared_weak_count *v60;
  uint64_t v61[2];
  uint64_t v62[2];
  std::string *v63;
  std::__shared_weak_count *v64;
  void *v65[2];
  char v66;
  std::string v67;
  uint64_t v68[2];
  void v69[2];
  std::string v70;
  char **v71;
  char *v72;
  uint64_t v73;
  unsigned int v74;
  std::string v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  std::string __p;
  char **v82;
  uint64_t v83;
  uint64_t v84;
  void v85[23];

  v85[20] = *MEMORY[0x1E4F143B8];
  v74 = a3;
  v5 = (std::__shared_weak_count *)a2[1];
  v57 = *a2;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v60 = v5;
  v6 = *(char *)(a1 + 23);
  v8 = *(const std::string::value_type **)a1;
  v7 = *(void *)(a1 + 8);
  if (v6 >= 0) {
    v9 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    v9 = *(void *)(a1 + 8);
  }
  if (v6 >= 0) {
    v10 = (const std::string::value_type *)a1;
  }
  else {
    v10 = *(const std::string::value_type **)a1;
  }
  v11 = (char *)&v10[v9];
  v12 = v9 - 4;
  if (v9 >= 4)
  {
    __sz = *(void *)(a1 + 8);
    v15 = v9;
    v16 = (std::string::value_type *)v10;
    do
    {
      v17 = (const std::string::value_type *)memchr(v16, 46, v15 - 3);
      if (!v17) {
        break;
      }
      if (*(_DWORD *)v17 == 1852400174) {
        goto LABEL_16;
      }
      v16 = (std::string::value_type *)(v17 + 1);
      v15 = v11 - v16;
    }
    while (v11 - v16 > 3);
    v17 = &v10[v9];
LABEL_16:
    v18 = v17 - v10;
    if (v17 == v11) {
      v18 = -1;
    }
    v13 = v18 != v12;
    if (v9 >= 5)
    {
      v19 = v9;
      v20 = (std::string::value_type *)v10;
      do
      {
        v14 = (const std::string::value_type *)memchr(v20, 46, v19 - 4);
        if (!v14) {
          break;
        }
        if (*(_DWORD *)v14 == 1852400174 && v14[4] == 58) {
          goto LABEL_27;
        }
        v20 = (std::string::value_type *)(v14 + 1);
        v19 = v11 - v20;
      }
      while (v11 - v20 > 4);
    }
    v14 = &v10[v9];
LABEL_27:
    v7 = __sz;
  }
  else
  {
    v13 = v12 != -1;
    v14 = &v10[v9];
  }
  if (v9)
  {
    v22 = v10;
    v23 = &v10[v9];
    do
    {
      if (*v22 == 46)
      {
        v24 = 1u;
        while (v24 != 4)
        {
          if (&v22[v24] == v11) {
            goto LABEL_40;
          }
          v25 = v22[v24];
          v26 = aMil[v24++];
          if (v25 != v26) {
            goto LABEL_31;
          }
        }
        v23 = v22;
      }
LABEL_31:
      ++v22;
    }
    while (v22 != v11);
  }
  else
  {
    v23 = v10;
  }
LABEL_40:
  v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70.__r_.__value_.__l.__size_;
  *(_OWORD *)&v70.__r_.__value_.__r.__words[1] = 0uLL;
  v72 = 0;
  v73 = 0;
  v71 = &v72;
  if (v14 != v11 && v14 - v10 != -1 || !v13)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "load_network_layers_and_exit does not support binserializer.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v23 == v11) {
    v29 = -1;
  }
  else {
    v29 = v23 - v10;
  }
  if (v29 == v12)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "main");
    Espresso::MILTranslator::TranslateProgram((uint64_t *)&v75, a1, (uint64_t)&__p);
    size = (std::__shared_weak_count *)v75.__r_.__value_.__l.__size_;
    v30 = (std::string *)v75.__r_.__value_.__r.__words[0];
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string::operator=((std::string *)((char *)v30 + 592), (const std::string *)a1);
    v32 = (char *)operator new(0xA8uLL);
    *((void *)v32 + 1) = 0;
    *((void *)v32 + 2) = 0;
    *(void *)v32 = &unk_1EE388FF0;
    *(_OWORD *)(v32 + 24) = 0u;
    *(_OWORD *)(v32 + 40) = 0u;
    *(_OWORD *)(v32 + 56) = 0u;
    *(_OWORD *)(v32 + 72) = 0u;
    *(_OWORD *)(v32 + 88) = 0u;
    *(_OWORD *)(v32 + 104) = 0u;
    *(_OWORD *)(v32 + 120) = 0u;
    *(_OWORD *)(v32 + 136) = 0u;
    *(_OWORD *)(v32 + 152) = 0u;
    v69[0] = v30;
    v69[1] = size;
    if (size) {
      atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "model.espresso.weights");
    Espresso::serialize_network(v69, (uint64_t)&__p, (void **)v32 + 3, 0, &v75);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (size) {
      nitro::nitro_function::nitro_function(size);
    }
    v33 = v75.__r_.__value_.__l.__size_;
    p_data = (void **)v75.__r_.__value_.__r.__words[0];
    if (v75.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v75.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    v35 = v75.__r_.__value_.__r.__words[2];
    v36 = v76;
    __sza = (std::__shared_weak_count *)v33;
    if (v76)
    {
      atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v68[0] = v35;
    v68[1] = (uint64_t)v36;
    Espresso::load_network_shape(v68, (uint64_t)&__p);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v70, (char *)v70.__r_.__value_.__l.__size_);
    v70 = __p;
    if (__p.__r_.__value_.__r.__words[2])
    {
      *(void *)(__p.__r_.__value_.__l.__size_ + 16) = &v70.__r_.__value_.__l.__size_;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    }
    else
    {
      v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70.__r_.__value_.__l.__size_;
    }
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v71, v72);
    v45 = (char *)v83;
    v71 = v82;
    v72 = (char *)v83;
    v73 = v84;
    if (v84)
    {
      *(void *)(v83 + 16) = &v72;
      v82 = (char **)&v83;
      v83 = 0;
      v84 = 0;
      v45 = 0;
    }
    else
    {
      v71 = &v72;
    }
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v82, v45);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&__p, (char *)__p.__r_.__value_.__l.__size_);
    if (v36)
    {
      nitro::nitro_function::nitro_function(v36);
      nitro::nitro_function::nitro_function(v36);
    }
    v46 = v60;
    v47 = v57;
    if (v76) {
      nitro::nitro_function::nitro_function(v76);
    }
    if (v75.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v75.__r_.__value_.__l.__size_);
    }
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v32);
  }
  else
  {
    if (v6 < 0) {
      std::string::__init_copy_ctor_external(&v67, v8, v7);
    }
    else {
      v67 = *(std::string *)a1;
    }
    v37 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
    v38 = &v67;
    if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v37 = v67.__r_.__value_.__l.__size_;
      v38 = (std::string *)v67.__r_.__value_.__r.__words[0];
    }
    if (!v37) {
      goto LABEL_135;
    }
    v39 = (std::string *)((char *)v38 + v37);
    v40 = v38;
    v41 = v39;
    do
    {
      if (v40->__r_.__value_.__s.__data_[0] == 46)
      {
        v42 = 1u;
        while (v42 != 13)
        {
          if ((std::string *)((char *)v40 + v42) == v39) {
            goto LABEL_81;
          }
          v43 = v40->__r_.__value_.__s.__data_[v42];
          v44 = aEspressoNet[v42++];
          if (v43 != v44) {
            goto LABEL_73;
          }
        }
        v41 = v40;
      }
LABEL_73:
      v40 = (std::string *)((char *)v40 + 1);
    }
    while (v40 != v39);
LABEL_81:
    if (v41 == v39 || (char *)v41 - (char *)v38 == -1) {
LABEL_135:
    }
      Espresso::throw_exception_selector<Espresso::io_error>("espresso network does not end in .espresso.net");
    std::string::replace(&v67, (char *)v41 - (char *)v38, 0xFFFFFFFFFFFFFFFFLL, ".espresso.shape");
    std::string::basic_string[abi:ne180100]<0>(v65, "json");
    std::ifstream::basic_ifstream((uint64_t *)&__p);
    if (!*(_DWORD *)((char *)&v83 + *(void *)(__p.__r_.__value_.__r.__words[0] - 24)))
    {
      Espresso::load_network_shape((uint64_t)&__p, v65, (uint64_t)&v75);
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v70, (char *)v70.__r_.__value_.__l.__size_);
      v70 = v75;
      if (v75.__r_.__value_.__r.__words[2])
      {
        *(void *)(v75.__r_.__value_.__l.__size_ + 16) = &v70.__r_.__value_.__l.__size_;
        v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75.__r_.__value_.__l.__size_;
        *(_OWORD *)&v75.__r_.__value_.__r.__words[1] = 0uLL;
      }
      else
      {
        v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70.__r_.__value_.__l.__size_;
      }
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v71, v72);
      v48 = (char *)v77;
      v71 = (char **)v76;
      v72 = (char *)v77;
      v73 = v78;
      if (v78)
      {
        *(void *)(v77 + 16) = &v72;
        v76 = (std::__shared_weak_count *)&v77;
        v77 = 0;
        v78 = 0;
        v48 = 0;
      }
      else
      {
        v71 = &v72;
      }
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v76, v48);
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v75, (char *)v75.__r_.__value_.__l.__size_);
    }
    std::ifstream::basic_ifstream((uint64_t *)&v75);
    if (!v79)
    {
      v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v55, "Could not create filestream from json.");
      __cxa_throw(v55, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    v49 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
    Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v63, (uint64_t)v49, v65);
    p_data = (void **)&v63->__r_.__value_.__l.__data_;
    __sza = v64;
    (*(void (**)(std::string *, std::string *))(v63->__r_.__value_.__r.__words[0] + 280))(v63, &v75);
    _ZNSt3__115allocate_sharedB8ne180100IN8Espresso3netENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v63);
    v30 = v63;
    size = v64;
    v75.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA3F8];
    v50 = v75.__r_.__value_.__r.__words[0];
    v51 = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
    *(std::string::size_type *)((char *)v75.__r_.__value_.__r.__words
                              + *(void *)(v75.__r_.__value_.__r.__words[0] - 24)) = v51;
    MEMORY[0x192FF1040](&v75.__r_.__value_.__r.__words[2]);
    std::istream::~istream();
    MEMORY[0x192FF15B0](&v80);
    __p.__r_.__value_.__r.__words[0] = v50;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(void *)(v50 - 24)) = v51;
    MEMORY[0x192FF1040](&__p.__r_.__value_.__r.__words[2]);
    std::istream::~istream();
    MEMORY[0x192FF15B0](v85);
    if (v66 < 0) {
      operator delete(v65[0]);
    }
    v46 = v60;
    v47 = v57;
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v67.__r_.__value_.__l.__data_);
    }
  }
  memset(&__p, 0, sizeof(__p));
  v52 = std::string::rfind((const std::string *)a1, 47, 0xFFFFFFFFFFFFFFFFLL);
  if (v52 != -1)
  {
    std::string::basic_string(&v75, (const std::string *)a1, 0, v52, (std::allocator<char> *)&v67);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    __p = v75;
  }
  if (v46) {
    atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  data = (std::__shared_weak_count *)v30[1].__r_.__value_.__l.__data_;
  v30->__r_.__value_.__r.__words[2] = v47;
  v30[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
  if (data) {
    nitro::nitro_function::nitro_function(data);
  }
  std::string::operator=((std::string *)((char *)v30 + 1024), &__p);
  memset(&v75, 0, sizeof(v75));
  std::string::basic_string[abi:ne180100]<0>(v65, "layers");
  (*((void (**)(std::string *__return_ptr, void **, void **))*p_data + 16))(&v67, p_data, v65);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vdeallocate((uint64_t *)&v75);
  v75 = v67;
  memset(&v67, 0, sizeof(v67));
  v63 = &v67;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  if (v66 < 0) {
    operator delete(v65[0]);
  }
  v62[0] = v47;
  v62[1] = (uint64_t)v46;
  if (v46) {
    atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v61[0] = (uint64_t)v30;
  v61[1] = (uint64_t)size;
  if (size) {
    atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::load_network_no_dispatch_internal(a4, v62, v61, (uint64_t **)&v75, (uint64_t)&v70, &v74);
  if (size) {
    nitro::nitro_function::nitro_function(size);
  }
  if (v46) {
    nitro::nitro_function::nitro_function(v46);
  }
  v67.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v71, v72);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v70, (char *)v70.__r_.__value_.__l.__size_);
  if (__sza) {
    nitro::nitro_function::nitro_function(__sza);
  }
  if (size) {
    nitro::nitro_function::nitro_function(size);
  }
  if (v46) {
    nitro::nitro_function::nitro_function(v46);
  }
}

void sub_19288F250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char *a36)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  Espresso::network_shape::~network_shape(&a36);
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::dump_network_layers_blobs_state>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388FF0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::dump_network_layers_blobs_state>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388FF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::load_network_from_net_no_dispatch(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, uint64_t *a4@<X8>)
{
  unsigned int v30 = a3;
  v7 = (char *)operator new(0xA8uLL);
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)v7 = &unk_1EE388FF0;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_OWORD *)(v7 + 72) = 0u;
  *(_OWORD *)(v7 + 88) = 0u;
  *(_OWORD *)(v7 + 104) = 0u;
  *(_OWORD *)(v7 + 120) = 0u;
  *(_OWORD *)(v7 + 136) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v25, *(void *)a1, *(std::__shared_weak_count **)(a1 + 8));
  std::string::basic_string[abi:ne180100]<0>(__p, "model.espresso.weights");
  Espresso::serialize_network(&v25, (uint64_t)__p, (void **)v7 + 3, 0, &v27);
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  long long v8 = v27;
  if (*((void *)&v27 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = v28;
  v10 = v29;
  if (v29)
  {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v21[0] = v9;
  v21[1] = (uint64_t)v10;
  Espresso::load_network_shape(v21, (uint64_t)__p);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  long long v19 = 0uLL;
  uint64_t v20 = 0;
  std::string::basic_string[abi:ne180100]<0>(v15, "layers");
  (*(void (**)(long long *__return_ptr, void, void **))(*(void *)v8 + 128))(&v17, v8, v15);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vdeallocate((uint64_t *)&v19);
  long long v19 = v17;
  uint64_t v20 = v18;
  uint64_t v18 = 0;
  long long v17 = 0uLL;
  v31 = (void **)&v17;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v31);
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  _ZNSt3__115allocate_sharedB8ne180100IN8Espresso3netENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v17);
  v11 = (std::__shared_weak_count *)a2[1];
  v14[0] = *a2;
  v14[1] = (uint64_t)v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v12 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  long long v13 = v17;
  if (*((void *)&v17 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  Espresso::load_network_no_dispatch_internal(a4, v14, (uint64_t *)&v13, (uint64_t **)&v19, (uint64_t)__p, &v30);
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  *(void *)&long long v17 = &v19;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v24, v24[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)__p, (char *)__p[1]);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (*((void *)&v8 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v8 + 1));
  }
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  if (*((void *)&v27 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v27 + 1));
  }
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v7);
}

void sub_19288F748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char *a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char *a30)
{
  if (v33)
  {
    nitro::nitro_function::nitro_function(v33);
    if (!v34)
    {
LABEL_3:
      if (!v33)
      {
LABEL_8:
        a20 = &a24;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
        Espresso::network_shape::~network_shape(&a30);
        if (v32) {
          nitro::nitro_function::nitro_function(v32);
        }
        if (v31) {
          nitro::nitro_function::nitro_function(v31);
        }
        Espresso::dropout_augment_lowmem::ret_t::~ret_t((Espresso::dropout_augment_lowmem::ret_t *)(v35 - 112));
        nitro::nitro_function::nitro_function(v30);
        _Unwind_Resume(a1);
      }
LABEL_7:
      nitro::nitro_function::nitro_function(v33);
      goto LABEL_8;
    }
  }
  else if (!v34)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v34);
  if (!v33) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_19288F7FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  v33 = *(std::__shared_weak_count **)(v32 - 120);
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
  JUMPOUT(0x19288F7ECLL);
}

void sub_19288F828()
{
}

void Espresso::get_last_layer_blob(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)a1 + 40);
  uint64_t v4 = *(void *)(v2 - 16);
  v3 = *(std::__shared_weak_count **)(v2 - 8);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v5 = *(uint64_t **)(v4 + 104);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  *a2 = v7;
  a2[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
}

void Espresso::load_network_layers(std::string *a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  v5 = v6;
  v6[0] = 0;
  v8[0] = 0;
  v8[1] = 0;
  v6[1] = 0;
  uint64_t v7 = v8;
  Espresso::load_network_layers(a1, a2, (uint64_t)&v5, a3, a4, a5);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v7, v8[0]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v5, v6[0]);
}

void sub_19288F8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9)
{
}

void Espresso::load_network_layers(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, unsigned int a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t v6 = v7;
  v7[0] = 0;
  v9[0] = 0;
  v9[1] = 0;
  v7[1] = 0;
  long long v8 = v9;
  Espresso::load_network_layers(a1, a2, a3, a4, (uint64_t)&v6, a5, a6);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v8, v9[0]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v6, v7[0]);
}

void sub_19288F94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9)
{
}

void Espresso::load_network_layers(uint64_t a1@<X0>, std::string *a2@<X1>, void *a3@<X2>, unsigned int a4@<W3>, void *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v6 = v7;
  v7[0] = 0;
  v9[0] = 0;
  v9[1] = 0;
  v7[1] = 0;
  long long v8 = v9;
  Espresso::load_network_layers(a1, a2, a3, (uint64_t)&v6, a4, a5, a6);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v8, v9[0]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v6, v7[0]);
}

void sub_19288F9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9)
{
}

void Espresso::load_network_layers_binserializer(uint64_t a1@<X0>, const void **a2@<X1>, void *a3@<X2>, unsigned int a4@<W3>, char a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t v6 = v7;
  v7[0] = 0;
  v9[0] = 0;
  v9[1] = 0;
  v7[1] = 0;
  long long v8 = v9;
  Espresso::load_network_layers_binserializer(a1, a2, a3, (uint64_t)&v6, a4, a5, a6);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v8, v9[0]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v6, v7[0]);
}

void sub_19288FA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9)
{
}

uint64_t Espresso::V9Engine::v9_wg_transform_in_kernel::wisdom_tunables@<X0>(void *a1@<X8>)
{
  unint64_t v2 = 0;
  int v3 = 0;
  a1[2] = 0;
  uint64_t v4 = a1 + 2;
  *a1 = 0;
  a1[1] = 0;
  char v5 = 1;
  do
  {
    char v6 = v5;
    uint64_t v7 = operator new(0x10uLL);
    long long v8 = (char *)(v7 + 4);
    *(void *)uint64_t v7 = 0x400000004;
    v7[2] = 4;
    v7[3] = v3;
    *(void *)&long long v9 = v7;
    *((void *)&v9 + 1) = v7 + 4;
    if (v2 >= *v4)
    {
      long long v76 = v9;
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - *a1) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3) > v12) {
        unint64_t v12 = 0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v4 - *a1) >> 3) >= 0x555555555555555) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v12;
      }
      v87 = v4;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v13);
      v15 = &v14[24 * v11];
      v83 = v14;
      v84 = v15;
      v86 = &v14[24 * v16];
      *(_OWORD *)v15 = v76;
      *((void *)v15 + 2) = v8;
      v85 = v15 + 24;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, &v83);
      unint64_t v10 = a1[1];
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v83);
    }
    else
    {
      *(_OWORD *)unint64_t v2 = v9;
      *(void *)(v2 + 16) = v8;
      unint64_t v10 = v2 + 24;
      a1[1] = v10;
    }
    a1[1] = v10;
    long long v17 = operator new(0x10uLL);
    uint64_t v18 = (char *)(v17 + 4);
    *(void *)long long v17 = 0x400000004;
    v17[2] = 1;
    v17[3] = v3;
    *(void *)&long long v19 = v17;
    *((void *)&v19 + 1) = v17 + 4;
    if (v10 >= *v4)
    {
      long long v77 = v19;
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *a1) >> 3);
      unint64_t v22 = v21 + 1;
      if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3) > v22) {
        unint64_t v22 = 0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v4 - *a1) >> 3) >= 0x555555555555555) {
        unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v23 = v22;
      }
      v87 = v4;
      v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v23);
      uint64_t v25 = &v24[24 * v21];
      v83 = v24;
      v84 = v25;
      v86 = &v24[24 * v26];
      *(_OWORD *)uint64_t v25 = v77;
      *((void *)v25 + 2) = v18;
      v85 = v25 + 24;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, &v83);
      unint64_t v20 = a1[1];
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v83);
    }
    else
    {
      *(_OWORD *)unint64_t v10 = v19;
      *(void *)(v10 + 16) = v18;
      unint64_t v20 = v10 + 24;
      a1[1] = v20;
    }
    a1[1] = v20;
    long long v27 = operator new(0x10uLL);
    uint64_t v28 = (char *)(v27 + 4);
    *(void *)long long v27 = 0x200000002;
    v27[2] = 4;
    v27[3] = v3;
    *(void *)&long long v29 = v27;
    *((void *)&v29 + 1) = v27 + 4;
    if (v20 >= *v4)
    {
      long long v78 = v29;
      unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *a1) >> 3);
      unint64_t v32 = v31 + 1;
      if (v31 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3) > v32) {
        unint64_t v32 = 0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v4 - *a1) >> 3) >= 0x555555555555555) {
        unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v33 = v32;
      }
      v87 = v4;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v33);
      uint64_t v35 = &v34[24 * v31];
      v83 = v34;
      v84 = v35;
      v86 = &v34[24 * v36];
      *(_OWORD *)uint64_t v35 = v78;
      *((void *)v35 + 2) = v28;
      v85 = v35 + 24;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, &v83);
      unint64_t v30 = a1[1];
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v83);
    }
    else
    {
      *(_OWORD *)unint64_t v20 = v29;
      *(void *)(v20 + 16) = v28;
      unint64_t v30 = v20 + 24;
      a1[1] = v30;
    }
    a1[1] = v30;
    v37 = operator new(0x10uLL);
    v38 = (char *)(v37 + 4);
    *(void *)v37 = 0x200000002;
    v37[2] = 6;
    v37[3] = v3;
    *(void *)&long long v39 = v37;
    *((void *)&v39 + 1) = v37 + 4;
    if (v30 >= *v4)
    {
      long long v79 = v39;
      unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - *a1) >> 3);
      unint64_t v42 = v41 + 1;
      if (v41 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3) > v42) {
        unint64_t v42 = 0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v4 - *a1) >> 3) >= 0x555555555555555) {
        unint64_t v43 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v43 = v42;
      }
      v87 = v4;
      v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v43);
      v45 = &v44[24 * v41];
      v83 = v44;
      v84 = v45;
      v86 = &v44[24 * v46];
      *(_OWORD *)v45 = v79;
      *((void *)v45 + 2) = v38;
      v85 = v45 + 24;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, &v83);
      unint64_t v40 = a1[1];
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v83);
    }
    else
    {
      *(_OWORD *)unint64_t v30 = v39;
      *(void *)(v30 + 16) = v38;
      unint64_t v40 = v30 + 24;
      a1[1] = v40;
    }
    a1[1] = v40;
    v47 = operator new(0x10uLL);
    v48 = (char *)(v47 + 4);
    *(void *)v47 = 0x200000002;
    v47[2] = 8;
    v47[3] = v3;
    *(void *)&long long v49 = v47;
    *((void *)&v49 + 1) = v47 + 4;
    if (v40 >= *v4)
    {
      long long v80 = v49;
      unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - *a1) >> 3);
      unint64_t v52 = v51 + 1;
      if (v51 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3) > v52) {
        unint64_t v52 = 0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v4 - *a1) >> 3) >= 0x555555555555555) {
        unint64_t v53 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v53 = v52;
      }
      v87 = v4;
      v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v53);
      v55 = &v54[24 * v51];
      v83 = v54;
      v84 = v55;
      v86 = &v54[24 * v56];
      *(_OWORD *)v55 = v80;
      *((void *)v55 + 2) = v48;
      v85 = v55 + 24;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, &v83);
      unint64_t v50 = a1[1];
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v83);
    }
    else
    {
      *(_OWORD *)unint64_t v40 = v49;
      *(void *)(v40 + 16) = v48;
      unint64_t v50 = v40 + 24;
      a1[1] = v50;
    }
    a1[1] = v50;
    v57 = operator new(0x10uLL);
    v58 = (char *)(v57 + 4);
    *(void *)v57 = 0x200000002;
    v57[2] = 16;
    v57[3] = v3;
    *(void *)&long long v59 = v57;
    *((void *)&v59 + 1) = v57 + 4;
    if (v50 >= *v4)
    {
      long long v81 = v59;
      unint64_t v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - *a1) >> 3);
      unint64_t v62 = v61 + 1;
      if (v61 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3) > v62) {
        unint64_t v62 = 0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v4 - *a1) >> 3) >= 0x555555555555555) {
        unint64_t v63 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v63 = v62;
      }
      v87 = v4;
      v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v63);
      v65 = &v64[24 * v61];
      v83 = v64;
      v84 = v65;
      v86 = &v64[24 * v66];
      *(_OWORD *)v65 = v81;
      *((void *)v65 + 2) = v58;
      v85 = v65 + 24;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, &v83);
      unint64_t v60 = a1[1];
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v83);
    }
    else
    {
      *(_OWORD *)unint64_t v50 = v59;
      *(void *)(v50 + 16) = v58;
      unint64_t v60 = v50 + 24;
      a1[1] = v60;
    }
    a1[1] = v60;
    uint64_t result = (uint64_t)operator new(0x10uLL);
    uint64_t v68 = result + 16;
    *(void *)uint64_t result = 0x800000008;
    *(_DWORD *)(result + 8) = 4;
    *(_DWORD *)(result + 12) = v3;
    *(void *)&long long v69 = result;
    *((void *)&v69 + 1) = result + 16;
    if (v60 >= *v4)
    {
      long long v82 = v69;
      unint64_t v70 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - *a1) >> 3);
      unint64_t v71 = v70 + 1;
      if (v70 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3) > v71) {
        unint64_t v71 = 0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v4 - *a1) >> 3) >= 0x555555555555555) {
        unint64_t v72 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v72 = v71;
      }
      v87 = v4;
      v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v72);
      v74 = &v73[24 * v70];
      v83 = v73;
      v84 = v74;
      v86 = &v73[24 * v75];
      *(_OWORD *)v74 = v82;
      *((void *)v74 + 2) = v68;
      v85 = v74 + 24;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, &v83);
      unint64_t v2 = a1[1];
      uint64_t result = std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v83);
    }
    else
    {
      *(_OWORD *)unint64_t v60 = v69;
      *(void *)(v60 + 16) = v68;
      unint64_t v2 = v60 + 24;
      a1[1] = v2;
    }
    char v5 = 0;
    a1[1] = v2;
    int v3 = 1;
  }
  while ((v6 & 1) != 0);
  return result;
}

void sub_1928900F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  operator delete(v11);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

uint64_t Espresso::V9Engine::v9_wg_transform_in_kernel::wisdom_key()
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"WG_TX_IN,", 9);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"WS,", 3);
  v0 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"KS,", 3);
  v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"W,", 2);
  unint64_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"H,", 2);
  int v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"K,", 2);
  uint64_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)",", 1);
  std::stringbuf::str();
  v7[0] = *MEMORY[0x1E4FBA408];
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v7 + *(void *)(v7[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v8[0] = v5;
  v8[1] = MEMORY[0x1E4FBA470] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x192FF15B0](&v10);
}

void sub_1928903E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_wg_transform_in_kernel::top_shapes_for_bottom_shapes(int32x2_t *a1@<X0>, long long **a2@<X1>, void *a3@<X8>)
{
  if (a1[67].i32[0] < 1 || a1[67].i32[1] < 1)
  {
    Espresso::MetalLowmemEngine::generic_wg_transform_4_in_kernel::top_shapes_for_bottom_shapes((uint64_t)a1, a2, a3);
  }
  else
  {
    memset(v5, 0, sizeof(v5));
    std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(v5, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 6);
    *(int32x2_t *)v5[0] = vmul_s32(*(int32x2_t *)v5[0], a1[67]);
    Espresso::MetalLowmemEngine::generic_wg_transform_4_in_kernel::top_shapes_for_bottom_shapes((uint64_t)a1, v5, a3);
    char v6 = (void **)v5;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
}

void sub_1928904C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_wg_transform_in_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  uint64_t v7 = *(void *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v54, *a2);
  id v8 = v54[0];
  if (*(unsigned char *)(v7 + 64))
  {
    char v9 = (void *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0) {
      char v9 = (void *)*v9;
    }
    uint64_t v10 = [NSString stringWithUTF8String:v9];
    [v8 setLabel:v10];
  }
  unint64_t v11 = **a3;
  if (v11) {
  else
  }
    unint64_t v12 = 0;
  unint64_t v13 = **a4;
  if (v13) {
  else
  }
    v14 = 0;
  v15 = (int **)(a1 + 512);
  if (*(void *)(a1 + 520) == *(void *)(a1 + 512))
  {
    std::vector<int>::resize((std::vector<int> *)(a1 + 512), 4uLL);
    *(_OWORD *)char *v15 = xmmword_192DCA5D0;
  }
  if (Espresso::update_tune(a1 + 512, a1, (uint64_t)a3, (uint64_t)a4))
  {
    uint64_t v16 = *(void **)(a1 + 328);
    *(void *)(a1 + 328) = 0;
  }
  __int16 v52 = 0;
  int v51 = 0;
  long long v53 = xmmword_192DCA4E0;
  int v17 = v14[2].i32[0];
  int v45 = v17;
  int v46 = 0;
  int v18 = v12[2];
  int v44 = v12[3];
  v43[0] = v18;
  v43[1] = v44 * v18;
  int32x2_t v49 = vmul_s32(vmax_s32(*(int32x2_t *)(a1 + 536), (int32x2_t)0x100000001), v14[1]);
  int v19 = *(__int16 *)(a1 + 314);
  int v47 = *(__int16 *)(a1 + 310);
  int v48 = v19;
  uint64_t v50 = 0;
  if (*(void *)(a1 + 328)) {
    goto LABEL_30;
  }
  unint64_t v20 = (MTLFunctionConstantValues *)objc_opt_new();
  unint64_t v21 = objc_opt_new();
  unint64_t v22 = v21;
  if (v17 >= 1) {
    int v23 = v17 - 1;
  }
  else {
    int v23 = v17 + 2;
  }
  unsigned __int16 v42 = v17;
  objc_msgSend(v21, "appendFormat:", @"%d:%d_", 0, (unsigned __int16)v17);
  [(MTLFunctionConstantValues *)v20 setConstantValue:&v42 type:41 atIndex:0];
  unsigned __int16 v42 = (v23 >> 2) + 1;
  objc_msgSend(v22, "appendFormat:", @"%d:%d_", 1, v42);
  [(MTLFunctionConstantValues *)v20 setConstantValue:&v42 type:41 atIndex:1];
  unsigned __int16 v42 = 0;
  objc_msgSend(v22, "appendFormat:", @"%d:%d_", 2, 0);
  [(MTLFunctionConstantValues *)v20 setConstantValue:&v42 type:41 atIndex:2];
  unsigned __int16 v42 = *(_WORD *)(a1 + 318);
  objc_msgSend(v22, "appendFormat:", @"%d:%d_", 4, v42);
  [(MTLFunctionConstantValues *)v20 setConstantValue:&v42 type:41 atIndex:4];
  uint64_t v24 = *(unsigned int *)(a1 + 536);
  unsigned __int16 v42 = *(_DWORD *)(a1 + 536);
  objc_msgSend(v22, "appendFormat:", @"%d:%d_", 5, v24);
  [(MTLFunctionConstantValues *)v20 setConstantValue:&v42 type:41 atIndex:5];
  uint64_t v25 = *(unsigned int *)(a1 + 540);
  unsigned __int16 v42 = *(_DWORD *)(a1 + 540);
  objc_msgSend(v22, "appendFormat:", @"%d:%d_", 6, v25);
  [(MTLFunctionConstantValues *)v20 setConstantValue:&v42 type:41 atIndex:6];
  unsigned __int16 v42 = 0;
  objc_msgSend(v22, "appendFormat:", @"%d:%d_", 7, 0);
  [(MTLFunctionConstantValues *)v20 setConstantValue:&v42 type:41 atIndex:7];
  unsigned __int16 v42 = 0;
  objc_msgSend(v22, "appendFormat:", @"%d:%d_", 8, 0);
  [(MTLFunctionConstantValues *)v20 setConstantValue:&v42 type:41 atIndex:8];
  if (*(void *)(a1 + 544))
  {
    unsigned __int16 v42 = 1;
    objc_msgSend(v22, "appendFormat:", @"%d:%d_", 7, 1);
    [(MTLFunctionConstantValues *)v20 setConstantValue:&v42 type:41 atIndex:7];
    unsigned __int16 v42 = 0;
    unsigned __int16 v42 = *(_DWORD *)((*(uint64_t (**)(void))(**(void **)(a1 + 544) + 384))(*(void *)(a1 + 544)) + 28);
    objc_msgSend(v22, "appendFormat:", @"%d:%d_", 8, *(unsigned int *)((*(uint64_t (**)(void))(**(void **)(a1 + 544) + 384))(*(void *)(a1 + 544)) + 28));
    [(MTLFunctionConstantValues *)v20 setConstantValue:&v42 type:41 atIndex:8];
    DWORD2(v53) = *(_DWORD *)((*(uint64_t (**)(void))(**(void **)(a1 + 544) + 384))(*(void *)(a1 + 544))
                            + 36);
  }
  long long v39 = v12;
  uint64_t v26 = objc_msgSend(NSString, "stringWithFormat:", @"sample%d", (*v15)[3]);
  long long v27 = objc_msgSend(NSString, "stringWithFormat:", @"k%dx%d_w%dx%d", *(unsigned int *)(a1 + 280), *(unsigned int *)(a1 + 280), *(unsigned int *)(a1 + 284), *(unsigned int *)(a1 + 284));
  uint64_t v28 = *(const void **)(a1 + 8);
  if (!v28)
  {
    long long v29 = 0;
    goto LABEL_26;
  }
  if (!v29)
  {
LABEL_26:
    unint64_t v30 = 0;
    goto LABEL_27;
  }
  unint64_t v30 = *(std::__shared_weak_count **)(a1 + 16);
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_27:
  unint64_t v31 = [NSString stringWithFormat:@"v9_wg_transform4_in_%@_%@", v26, v27];
  uint64_t v32 = Espresso::context_metal::kernel_for_function(v29, v31, (NSString *)v22, v20);
  unint64_t v33 = *(void **)(a1 + 328);
  *(void *)(a1 + 328) = v32;

  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }

  v15 = (int **)(a1 + 512);
  unint64_t v12 = v39;
  if (!*(void *)(a1 + 328))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel not found");
LABEL_35:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_30:
  objc_msgSend(v8, "setComputePipelineState:");
  [v8 setTexture:*(void *)&v14[21] atIndex:0];
  [v8 setTexture:*((void *)v12 + 21) atIndex:1];
  [v8 setBytes:v43 length:68 atIndex:0];
  [v8 setBuffer:*(void *)&v14[20] offset:0 atIndex:1];
  uint64_t v34 = *(void *)(a1 + 544);
  if (v34)
  {
    [v8 setBuffer:*(void *)(v34 + 488) offset:0 atIndex:1];
    if (!*(void *)(*(void *)(a1 + 544) + 488))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Missing batch_meanvar_buffer");
      goto LABEL_35;
    }
  }
  uint64_t v35 = **v15;
  uint64_t v36 = (*v15)[1];
  uint64_t v37 = (*v15)[2];
  v41[0] = (v43[0] - 1) / (int)v35 + 1;
  v41[1] = (v44 - 1) / (int)v36 + 1;
  v41[2] = (v45 - 1) / (4 * (int)v37) + 1;
  v40[0] = v35;
  v40[1] = v36;
  v40[2] = v37;
  [v8 dispatchThreadgroups:v41 threadsPerThreadgroup:v40];

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v54);
}

void sub_192890C2C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v3 - 104));
  _Unwind_Resume(a1);
}

uint64_t Espresso::update_tune(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(v5 + 24);
  if (!v7 || !*(unsigned char *)(v7 + 12))
  {
    uint64_t v11 = 0;
    goto LABEL_14;
  }
  Espresso::wisdom_trainer2::get_tune(v7, a2, a3, a4, &__p);
  char v9 = (char *)__p;
  id v8 = v14;
  uint64_t v10 = (unsigned char *)v14 - (unsigned char *)__p;
  if (v14 == __p)
  {
    uint64_t v11 = 0;
    if (!v14) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v10 == *(void *)(a1 + 8) - *(void *)a1 && !memcmp(__p, *(const void **)a1, (unsigned char *)v14 - (unsigned char *)__p))
  {
    uint64_t v11 = 0;
  }
  else
  {
    if (&__p != (void **)a1)
    {
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)a1, v9, (uint64_t)v8, v10 >> 2);
      uint64_t v11 = 1;
      id v8 = __p;
      if (!__p) {
        goto LABEL_14;
      }
LABEL_13:
      v14 = v8;
      operator delete(v8);
      goto LABEL_14;
    }
    uint64_t v11 = 1;
  }
  id v8 = v9;
  if (v9) {
    goto LABEL_13;
  }
LABEL_14:
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  return v11;
}

void sub_192890DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::V9Engine::v9_wg_transform_in_kernel::~v9_wg_transform_in_kernel(Espresso::V9Engine::v9_wg_transform_in_kernel *this)
{
  *(void *)this = &unk_1EE371438;
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 69);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 64);
  if (v3)
  {
    *((void *)this + 65) = v3;
    operator delete(v3);
  }

  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE371438;
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 69);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 64);
  if (v3)
  {
    *((void *)this + 65) = v3;
    operator delete(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t Espresso::V9Engine::v9_wg_transform_out_kernel::wisdom_tunables@<X0>(void *a1@<X8>)
{
  unint64_t v2 = 0;
  int v3 = 0;
  a1[2] = 0;
  uint64_t v4 = a1 + 2;
  *a1 = 0;
  a1[1] = 0;
  char v5 = 1;
  do
  {
    char v6 = v5;
    uint64_t v7 = operator new(0x10uLL);
    id v8 = (char *)(v7 + 4);
    *(void *)uint64_t v7 = 0x400000004;
    void v7[2] = 4;
    v7[3] = v3;
    *(void *)&long long v9 = v7;
    *((void *)&v9 + 1) = v7 + 4;
    if (v2 >= *v4)
    {
      long long v76 = v9;
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - *a1) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3) > v12) {
        unint64_t v12 = 0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v4 - *a1) >> 3) >= 0x555555555555555) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v12;
      }
      v87 = v4;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v13);
      v15 = &v14[24 * v11];
      v83 = v14;
      v84 = v15;
      v86 = &v14[24 * v16];
      *(_OWORD *)v15 = v76;
      *((void *)v15 + 2) = v8;
      v85 = v15 + 24;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, &v83);
      unint64_t v10 = a1[1];
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v83);
    }
    else
    {
      *(_OWORD *)unint64_t v2 = v9;
      *(void *)(v2 + 16) = v8;
      unint64_t v10 = v2 + 24;
      a1[1] = v10;
    }
    a1[1] = v10;
    int v17 = operator new(0x10uLL);
    int v18 = (char *)(v17 + 4);
    *(void *)int v17 = 0x400000004;
    v17[2] = 1;
    v17[3] = v3;
    *(void *)&long long v19 = v17;
    *((void *)&v19 + 1) = v17 + 4;
    if (v10 >= *v4)
    {
      long long v77 = v19;
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *a1) >> 3);
      unint64_t v22 = v21 + 1;
      if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3) > v22) {
        unint64_t v22 = 0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v4 - *a1) >> 3) >= 0x555555555555555) {
        unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v23 = v22;
      }
      v87 = v4;
      uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v23);
      uint64_t v25 = &v24[24 * v21];
      v83 = v24;
      v84 = v25;
      v86 = &v24[24 * v26];
      *(_OWORD *)uint64_t v25 = v77;
      *((void *)v25 + 2) = v18;
      v85 = v25 + 24;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, &v83);
      unint64_t v20 = a1[1];
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v83);
    }
    else
    {
      *(_OWORD *)unint64_t v10 = v19;
      *(void *)(v10 + 16) = v18;
      unint64_t v20 = v10 + 24;
      a1[1] = v20;
    }
    a1[1] = v20;
    long long v27 = operator new(0x10uLL);
    uint64_t v28 = (char *)(v27 + 4);
    *(void *)long long v27 = 0x200000002;
    v27[2] = 4;
    v27[3] = v3;
    *(void *)&long long v29 = v27;
    *((void *)&v29 + 1) = v27 + 4;
    if (v20 >= *v4)
    {
      long long v78 = v29;
      unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *a1) >> 3);
      unint64_t v32 = v31 + 1;
      if (v31 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3) > v32) {
        unint64_t v32 = 0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v4 - *a1) >> 3) >= 0x555555555555555) {
        unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v33 = v32;
      }
      v87 = v4;
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v33);
      uint64_t v35 = &v34[24 * v31];
      v83 = v34;
      v84 = v35;
      v86 = &v34[24 * v36];
      *(_OWORD *)uint64_t v35 = v78;
      *((void *)v35 + 2) = v28;
      v85 = v35 + 24;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, &v83);
      unint64_t v30 = a1[1];
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v83);
    }
    else
    {
      *(_OWORD *)unint64_t v20 = v29;
      *(void *)(v20 + 16) = v28;
      unint64_t v30 = v20 + 24;
      a1[1] = v30;
    }
    a1[1] = v30;
    uint64_t v37 = operator new(0x10uLL);
    v38 = (char *)(v37 + 4);
    *(void *)uint64_t v37 = 0x200000002;
    v37[2] = 6;
    v37[3] = v3;
    *(void *)&long long v39 = v37;
    *((void *)&v39 + 1) = v37 + 4;
    if (v30 >= *v4)
    {
      long long v79 = v39;
      unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - *a1) >> 3);
      unint64_t v42 = v41 + 1;
      if (v41 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3) > v42) {
        unint64_t v42 = 0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v4 - *a1) >> 3) >= 0x555555555555555) {
        unint64_t v43 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v43 = v42;
      }
      v87 = v4;
      int v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v43);
      int v45 = &v44[24 * v41];
      v83 = v44;
      v84 = v45;
      v86 = &v44[24 * v46];
      *(_OWORD *)int v45 = v79;
      *((void *)v45 + 2) = v38;
      v85 = v45 + 24;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, &v83);
      unint64_t v40 = a1[1];
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v83);
    }
    else
    {
      *(_OWORD *)unint64_t v30 = v39;
      *(void *)(v30 + 16) = v38;
      unint64_t v40 = v30 + 24;
      a1[1] = v40;
    }
    a1[1] = v40;
    int v47 = operator new(0x10uLL);
    int v48 = (char *)(v47 + 4);
    *(void *)int v47 = 0x200000002;
    v47[2] = 8;
    v47[3] = v3;
    *(void *)&long long v49 = v47;
    *((void *)&v49 + 1) = v47 + 4;
    if (v40 >= *v4)
    {
      long long v80 = v49;
      unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - *a1) >> 3);
      unint64_t v52 = v51 + 1;
      if (v51 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3) > v52) {
        unint64_t v52 = 0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v4 - *a1) >> 3) >= 0x555555555555555) {
        unint64_t v53 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v53 = v52;
      }
      v87 = v4;
      v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v53);
      v55 = &v54[24 * v51];
      v83 = v54;
      v84 = v55;
      v86 = &v54[24 * v56];
      *(_OWORD *)v55 = v80;
      *((void *)v55 + 2) = v48;
      v85 = v55 + 24;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, &v83);
      unint64_t v50 = a1[1];
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v83);
    }
    else
    {
      *(_OWORD *)unint64_t v40 = v49;
      *(void *)(v40 + 16) = v48;
      unint64_t v50 = v40 + 24;
      a1[1] = v50;
    }
    a1[1] = v50;
    v57 = operator new(0x10uLL);
    v58 = (char *)(v57 + 4);
    *(void *)v57 = 0x200000002;
    v57[2] = 16;
    v57[3] = v3;
    *(void *)&long long v59 = v57;
    *((void *)&v59 + 1) = v57 + 4;
    if (v50 >= *v4)
    {
      long long v81 = v59;
      unint64_t v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - *a1) >> 3);
      unint64_t v62 = v61 + 1;
      if (v61 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3) > v62) {
        unint64_t v62 = 0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v4 - *a1) >> 3) >= 0x555555555555555) {
        unint64_t v63 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v63 = v62;
      }
      v87 = v4;
      v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v63);
      v65 = &v64[24 * v61];
      v83 = v64;
      v84 = v65;
      v86 = &v64[24 * v66];
      *(_OWORD *)v65 = v81;
      *((void *)v65 + 2) = v58;
      v85 = v65 + 24;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, &v83);
      unint64_t v60 = a1[1];
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v83);
    }
    else
    {
      *(_OWORD *)unint64_t v50 = v59;
      *(void *)(v50 + 16) = v58;
      unint64_t v60 = v50 + 24;
      a1[1] = v60;
    }
    a1[1] = v60;
    uint64_t result = (uint64_t)operator new(0x10uLL);
    uint64_t v68 = result + 16;
    *(void *)uint64_t result = 0x800000008;
    *(_DWORD *)(result + 8) = 4;
    *(_DWORD *)(result + 12) = v3;
    *(void *)&long long v69 = result;
    *((void *)&v69 + 1) = result + 16;
    if (v60 >= *v4)
    {
      long long v82 = v69;
      unint64_t v70 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - *a1) >> 3);
      unint64_t v71 = v70 + 1;
      if (v70 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3) > v71) {
        unint64_t v71 = 0x5555555555555556 * ((uint64_t)(*v4 - *a1) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v4 - *a1) >> 3) >= 0x555555555555555) {
        unint64_t v72 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v72 = v71;
      }
      v87 = v4;
      v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v72);
      v74 = &v73[24 * v70];
      v83 = v73;
      v84 = v74;
      v86 = &v73[24 * v75];
      *(_OWORD *)v74 = v82;
      *((void *)v74 + 2) = v68;
      v85 = v74 + 24;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, &v83);
      unint64_t v2 = a1[1];
      uint64_t result = std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v83);
    }
    else
    {
      *(_OWORD *)unint64_t v60 = v69;
      *(void *)(v60 + 16) = v68;
      unint64_t v2 = v60 + 24;
      a1[1] = v2;
    }
    char v5 = 0;
    a1[1] = v2;
    int v3 = 1;
  }
  while ((v6 & 1) != 0);
  return result;
}

void sub_1928915CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  operator delete(v11);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

uint64_t Espresso::V9Engine::v9_wg_transform_out_kernel::wisdom_key()
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"WG_TX_OUT,", 10);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"WS,", 3);
  v0 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"KS,", 3);
  v1 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"W,", 2);
  unint64_t v2 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"H,", 2);
  int v3 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)",", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"K,", 2);
  uint64_t v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)",", 1);
  std::stringbuf::str();
  v7[0] = *MEMORY[0x1E4FBA408];
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v7 + *(void *)(v7[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v8[0] = v5;
  v8[1] = MEMORY[0x1E4FBA470] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x192FF15B0](&v10);
}

void sub_1928918BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_wg_transform_out_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  uint64_t v7 = *(Espresso::context_metal **)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v70, *a2);
  id v8 = v70[0];
  if (*((unsigned char *)v7 + 64))
  {
    char v9 = (void *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0) {
      char v9 = (void *)*v9;
    }
    uint64_t v10 = [NSString stringWithUTF8String:v9];
    [v8 setLabel:v10];
  }
  unint64_t v11 = **a3;
  if (v11) {
  else
  }
    unint64_t v12 = 0;
  unint64_t v13 = **a4;
  if (v13) {
  else
  }
    v14 = 0;
  v15 = (int **)(a1 + 416);
  if (*(void *)(a1 + 424) == *(void *)(a1 + 416))
  {
    std::vector<int>::resize((std::vector<int> *)(a1 + 416), 4uLL);
    *(_OWORD *)char *v15 = xmmword_192DCA5D0;
  }
  if (Espresso::update_tune(a1 + 416, a1, (uint64_t)a3, (uint64_t)a4))
  {
    uint64_t v16 = *(void **)(a1 + 368);
    *(void *)(a1 + 368) = 0;
  }
  uint64_t v64 = 0;
  uint64_t v63 = 0;
  uint64_t v62 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v67 = _D0;
  int v65 = 0;
  int v68 = 0;
  uint64_t v22 = v12[4];
  int v60 = 0;
  int v61 = v22;
  __int16 v66 = *(_WORD *)(a1 + 332);
  int v69 = *(_DWORD *)(a1 + 328);
  int v23 = v14[2];
  int v59 = v14[3];
  v58[0] = v23;
  v58[1] = v59 * v23;
  uint64_t v64 = *((void *)v12 + 1);
  if (!*(void *)(a1 + 368))
  {
    uint64_t v24 = (MTLFunctionConstantValues *)objc_opt_new();
    unint64_t v50 = v24;
    uint64_t v25 = objc_opt_new();
    uint64_t v26 = v25;
    if ((int)v22 >= 1) {
      int v27 = v22 - 1;
    }
    else {
      int v27 = v22 + 2;
    }
    LOWORD(v57.__r_.__value_.__l.__data_) = v22;
    objc_msgSend(v25, "appendFormat:", @"%d:%d_", 0, (unsigned __int16)v22);
    [(MTLFunctionConstantValues *)v24 setConstantValue:&v57 type:41 atIndex:0];
    LOWORD(v57.__r_.__value_.__l.__data_) = (v27 >> 2) + 1;
    objc_msgSend(v26, "appendFormat:", @"%d:%d_", 1, LOWORD(v57.__r_.__value_.__l.__data_));
    [(MTLFunctionConstantValues *)v24 setConstantValue:&v57 type:41 atIndex:1];
    LOWORD(v57.__r_.__value_.__l.__data_) = 0;
    objc_msgSend(v26, "appendFormat:", @"%d:%d_", 2, 0);
    [(MTLFunctionConstantValues *)v24 setConstantValue:&v57 type:41 atIndex:2];
    long long v49 = v7;
    BOOL v28 = *(void *)(a1 + 384) != 0;
    LOWORD(v57.__r_.__value_.__l.__data_) = *(void *)(a1 + 384) != 0;
    objc_msgSend(v26, "appendFormat:", @"%d:%d_", 9, v28);
    [(MTLFunctionConstantValues *)v24 setConstantValue:&v57 type:41 atIndex:9];
    long long v29 = objc_msgSend(NSString, "stringWithFormat:", @"sample%d", *(unsigned int *)(*(void *)(a1 + 416) + 12));
    unint64_t v30 = objc_msgSend(NSString, "stringWithFormat:", @"k%dx%d_w%dx%d", *(unsigned int *)(a1 + 304), *(unsigned int *)(a1 + 304), *(unsigned int *)(a1 + 308), *(unsigned int *)(a1 + 308));
    unint64_t v31 = [NSString stringWithFormat:@"v9_wg_transform4_out_%@_%@", v29, v30];
    uint64_t v32 = Espresso::context_metal::kernel_for_function(v49, v31, (NSString *)v26, v50);
    unint64_t v33 = *(void **)(a1 + 368);
    *(void *)(a1 + 368) = v32;

    v15 = (int **)(a1 + 416);
  }
  uint64_t v34 = *(void **)(a1 + 376);
  if (!v34)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "bias buffer not set");
    goto LABEL_35;
  }
  if ([v34 length] < (unint64_t)(4 * v22))
  {
    unint64_t v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v54, [*(id *)(a1 + 376) length]);
    unint64_t v41 = std::string::insert(&v54, 0, "bias buffer too small: ");
    long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    unint64_t v43 = std::string::append(&v55, "/");
    long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v53, v22);
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v45 = &v53;
    }
    else {
      int v45 = (std::string *)v53.__r_.__value_.__r.__words[0];
    }
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v53.__r_.__value_.__l.__size_;
    }
    int v47 = std::string::append(&v56, (const std::string::value_type *)v45, size);
    long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v40, &v57);
    __cxa_throw(v40, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (!*(void *)(a1 + 368))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel not found");
LABEL_35:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  objc_msgSend(v8, "setComputePipelineState:");
  [v8 setTexture:*((void *)v14 + 21) atIndex:0];
  [v8 setTexture:*((void *)v12 + 21) atIndex:1];
  [v8 setBytes:v58 length:68 atIndex:0];
  [v8 setBuffer:*(void *)(a1 + 376) offset:0 atIndex:1];
  [v8 setBuffer:*(void *)(a1 + 376) offset:0 atIndex:2];
  uint64_t v35 = *(void *)(a1 + 384);
  if (v35) {
    [v8 setBuffer:v35 offset:0 atIndex:2];
  }
  uint64_t v36 = **v15;
  uint64_t v37 = (*v15)[1];
  uint64_t v38 = (*v15)[2];
  v52[0] = (v58[0] - 1) / (int)v36 + 1;
  v52[1] = (v59 - 1) / (int)v37 + 1;
  v52[2] = (v61 - 1) / (4 * (int)v38) + 1;
  v51[0] = v36;
  v51[1] = v37;
  v51[2] = v38;
  [v8 dispatchThreadgroups:v52 threadsPerThreadgroup:v51];

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v70);
}

void sub_192891EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (*(char *)(v50 - 185) < 0) {
    operator delete(*(void **)(v50 - 208));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a34 < 0)
  {
    operator delete(a29);
    if ((v49 & 1) == 0)
    {
LABEL_14:

      Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v50 - 112));
      _Unwind_Resume(a1);
    }
  }
  else if (!v49)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v48);
  goto LABEL_14;
}

void Espresso::V9Engine::v9_wg_transform_out_kernel::~v9_wg_transform_out_kernel(Espresso::V9Engine::v9_wg_transform_out_kernel *this)
{
  Espresso::V9Engine::v9_wg_transform_out_kernel::~v9_wg_transform_out_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  void *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE371590;
  unint64_t v2 = (void *)*((void *)this + 52);
  if (v2)
  {
    *((void *)this + 53) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1EE34B980;
  int v3 = (std::__shared_weak_count *)*((void *)this + 51);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::generic_wg_transform_4_out_kernel_::~generic_wg_transform_4_out_kernel_(this);
}

void Espresso::V9Engine::v9_elementwise_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  uint64_t v7 = *(void *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v55, *a2);
  id v8 = v55[0];
  if (*(unsigned char *)(v7 + 64))
  {
    char v9 = (void *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0) {
      char v9 = (void *)*v9;
    }
    uint64_t v10 = [NSString stringWithUTF8String:v9];
    [v8 setLabel:v10];
  }
  unint64_t v11 = **a3;
  if (v11) {
  else
  }
    unint64_t v12 = 0;
  unint64_t v13 = (_DWORD *)(a1 + 344);
  *(void *)(a1 + 352) = *(void *)(a1 + 288);
  *(_DWORD *)(a1 + 348) = *(_DWORD *)(a1 + 284);
  int v14 = *(_DWORD *)(a1 + 280);
  if ((v14 - 2) >= 2)
  {
    if (v14) {
      goto LABEL_41;
    }
    long long v19 = *a4;
    if ((char *)a4[1] - (char *)*a4 != 32)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Not implemented");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (*v19)
    {
      if (v20)
      {
        int v18 = (std::__shared_weak_count *)v19[1];
        if (v18)
        {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
          long long v19 = *a4;
        }
LABEL_29:
        unint64_t v33 = v19[2];
        if (v33)
        {
          if (v34)
          {
            uint64_t v35 = (std::__shared_weak_count *)v19[3];
            if (v35) {
              atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            goto LABEL_35;
          }
        }
        else
        {
          uint64_t v34 = 0;
        }
        uint64_t v35 = 0;
LABEL_35:
        id v46 = v20[20];
        id v36 = v34[20];
        id v37 = v12[20];
        uint64_t v38 = *(void *)(a1 + 336);
        if (!v38)
        {
          long long v44 = objc_opt_new();
          id v39 = objc_opt_new();
          uint64_t v40 = objc_msgSend(*(id *)(v7 + 160), "kernelForFunction:cacheString:withConstants:", "v9_elementwise_add", objc_msgSend(v39, "UTF8String"), v44);
          unint64_t v41 = *(void **)(a1 + 336);
          *(void *)(a1 + 336) = v40;

          uint64_t v38 = *(void *)(a1 + 336);
        }
        [v8 setComputePipelineState:v38];
        *(_DWORD *)(a1 + 344) = *((_DWORD *)v20 + 65) / 4 * *((_DWORD *)v20 + 5) * *((_DWORD *)v20 + 6);
        [v8 setBuffer:v46 offset:0 atIndex:0];
        [v8 setBuffer:v36 offset:0 atIndex:1];
        [v8 setBuffer:v37 offset:0 atIndex:2];
        [v8 setBytes:v13 length:16 atIndex:3];
        uint64_t v42 = ((*v13 - 1) >> 6) + 1;
        uint64_t v52 = 1;
        uint64_t v53 = v42;
        int64x2_t v54 = vdupq_n_s64(1uLL);
        long long v51 = xmmword_192DCA430;
        [v8 dispatchThreadgroups:&v53 threadsPerThreadgroup:&v51];

        if (v35) {
          nitro::nitro_function::nitro_function(v35);
        }
        goto LABEL_39;
      }
    }
    else
    {
      unint64_t v20 = 0;
    }
    int v18 = 0;
    goto LABEL_29;
  }
  v15 = *a4;
  uint64_t v16 = **a4;
  if (v16)
  {
    if (v17)
    {
      int v18 = (std::__shared_weak_count *)v15[1];
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_21;
    }
  }
  else
  {
    int v17 = 0;
  }
  int v18 = 0;
LABEL_21:
  id v21 = v17[20];
  id v22 = v12[20];
  uint64_t v23 = *(void *)(a1 + 336);
  if (!v23)
  {
    int v45 = v18;
    uint64_t v24 = objc_opt_new();
    uint64_t v25 = objc_opt_new();
    int v26 = *(_DWORD *)(a1 + 280);
    id v27 = v25;
    uint64_t v28 = [v27 UTF8String];
    if (v26 == 2) {
      long long v29 = "v9_elementwise_addc";
    }
    else {
      long long v29 = "v9_elementwise_mulc";
    }
    uint64_t v30 = [*(id *)(v7 + 160) kernelForFunction:v29 cacheString:v28 withConstants:v24];
    unint64_t v31 = *(void **)(a1 + 336);
    *(void *)(a1 + 336) = v30;

    uint64_t v23 = *(void *)(a1 + 336);
    int v18 = v45;
  }
  [v8 setComputePipelineState:v23];
  *(_DWORD *)(a1 + 344) = *((_DWORD *)v17 + 65) / 4 * *((_DWORD *)v17 + 5) * *((_DWORD *)v17 + 6);
  [v8 setBuffer:v21 offset:0 atIndex:0];
  [v8 setBuffer:v22 offset:0 atIndex:1];
  [v8 setBytes:a1 + 344 length:16 atIndex:2];
  uint64_t v32 = ((*v13 - 1) >> 6) + 1;
  uint64_t v48 = 1;
  uint64_t v49 = v32;
  int64x2_t v50 = vdupq_n_s64(1uLL);
  long long v47 = xmmword_192DCA430;
  [v8 dispatchThreadgroups:&v49 threadsPerThreadgroup:&v47];

LABEL_39:
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
LABEL_41:

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v55);
}

void sub_1928926AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, std::__shared_weak_count *a11, void *a12)
{
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v16 - 96));
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_elementwise_kernel::~v9_elementwise_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::V9Engine::v9_concat_kernel::__launch(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  if (a4[1] != *a4 || *(void *)(a3 + 8) != *(void *)a3)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v106, *a2);
    id v7 = v106[0];
    uint64_t v88 = v6;
    if (*(unsigned char *)(v6 + 64))
    {
      id v8 = (void *)(a1 + 176);
      if (*(char *)(a1 + 199) < 0) {
        id v8 = (void *)*v8;
      }
      char v9 = [NSString stringWithUTF8String:v8];
      [v7 setLabel:v9];
    }
    uint64_t v10 = **(const void ***)a3;
    if (v10) {
    else
    }
      unint64_t v11 = 0;
    uint64_t v13 = *a4;
    uint64_t v12 = a4[1];
    if (v12 == *a4)
    {
      LOBYTE(v16) = 0;
      unint64_t v22 = (v12 - *a4) >> 4;
      int v17 = 1;
      uint64_t v13 = a4[1];
    }
    else
    {
      uint64_t v14 = 0;
      unint64_t v15 = 0;
      int v16 = 0;
      LOBYTE(v17) = 1;
      do
      {
        long long v19 = *(std::__shared_weak_count **)(v13 + v14 + 8);
        if (v19)
        {
          atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          int v20 = v18[4];
          v16 |= (v20 & 3) != 0;
          int v17 = (v20 == 3) & v17;
          nitro::nitro_function::nitro_function(v19);
          uint64_t v13 = *a4;
          uint64_t v12 = a4[1];
        }
        else
        {
          int v21 = v18[4];
          v16 |= (v21 & 3) != 0;
          int v17 = (v21 == 3) & v17;
        }
        ++v15;
        unint64_t v22 = (v12 - v13) >> 4;
        v14 += 16;
      }
      while (v22 > v15);
    }
    v103 = 0;
    v104 = 0;
    v105 = 0;
    *(void *)&long long v101 = &v103;
    BYTE8(v101) = 0;
    if (v22)
    {
      if (v22 >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v23 = (int32x2_t **)operator new(16 * v22);
      v103 = v23;
      v105 = &v23[2 * v22];
      bzero(v23, 16 * v22);
      v104 = &v23[2 * v22];
    }
    else
    {
      uint64_t v23 = 0;
    }
    if (v13 != v12)
    {
      uint64_t v24 = 0;
      do
      {
        uint64_t v25 = *(int32x2_t **)(v13 + v24 * 8);
        if (v25
        {
          uint64_t v26 = *(void *)(v13 + v24 * 8 + 8);
          if (v26) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          uint64_t v26 = 0;
        }
        id v27 = &v103[v24];
        uint64_t v28 = (std::__shared_weak_count *)v103[v24 + 1];
        *id v27 = v25;
        v27[1] = (int32x2_t *)v26;
        if (v28) {
          nitro::nitro_function::nitro_function(v28);
        }
        v24 += 2;
      }
      while (v13 + v24 * 8 != v12);
      uint64_t v23 = v103;
    }
    uint64_t v29 = a1 + 344;
    *(_DWORD *)(a1 + 376) = *(_DWORD *)(a1 + 280);
    uint64_t v30 = *v23;
    *(int32x2_t *)(a1 + 380) = (*v23)[1];
    *(_DWORD *)(a1 + 388) = v30[31].i32[1] / 4;
    *(_DWORD *)(a1 + 404) = *((_DWORD *)v11 + 62) / 4;
    *(_DWORD *)(a1 + 408) = *((_DWORD *)v11 + 63) / 4;
    if (v16)
    {
      if (!v17 || a4[1] - *a4 != 32)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Not implemented");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      id v31 = *((id *)v11 + 20);
      uint64_t v32 = [*(id *)(v88 + 160) kernelForFunction:"v9_concat_2in_3ch" cacheString:0 withConstants:0];
      [v7 setComputePipelineState:v32];
      *(_DWORD *)(a1 + 344) = *((_DWORD *)v11 + 3) * *((_DWORD *)v11 + 2) * *((_DWORD *)v11 + 5) * *((_DWORD *)v11 + 6);
      int v33 = *((_DWORD *)v11 + 4);
      int v35 = v33 - 1;
      BOOL v34 = v33 < 1;
      int v36 = v33 + 2;
      if (!v34) {
        int v36 = v35;
      }
      *(_DWORD *)(a1 + 348) = (v36 >> 2) + 1;
      id v37 = v103;
      uint64_t v38 = *v103;
      int v39 = (*v103)[2].i32[0];
      int v40 = v39 - 1;
      BOOL v34 = v39 < 1;
      int v41 = v39 + 2;
      if (!v34) {
        int v41 = v40;
      }
      *(_DWORD *)(a1 + 356) = (v41 >> 2) + 1;
      int v42 = v37[2][2].i32[0];
      int v43 = v42 - 1;
      BOOL v34 = v42 < 1;
      int v44 = v42 + 2;
      if (!v34) {
        int v44 = v43;
      }
      *(_DWORD *)(a1 + 360) = (v44 >> 2) + 1;
      [v7 setBuffer:*(void *)&v38[20] offset:0 atIndex:1];
      [v7 setBuffer:*(void *)&v103[2][20] offset:0 atIndex:2];
      [v7 setBuffer:v31 offset:0 atIndex:0];
      [v7 setBytes:a1 + 344 length:68 atIndex:3];
      int32x2_t v45 = vadd_s32((*v103)[1], (int32x2_t)-1);
      int32x2_t v46 = vsra_n_s32((int32x2_t)0x100000001, (int32x2_t)vsra_n_u32((uint32x2_t)v45, (uint32x2_t)vcltz_s32(v45), 0x1EuLL), 2uLL);
      *(void *)&long long v47 = v46.i32[0];
      *((void *)&v47 + 1) = v46.i32[1];
      long long v93 = v47;
      uint64_t v94 = 1;
      int64x2_t v91 = vdupq_n_s64(4uLL);
      uint64_t v92 = 1;
      [v7 dispatchThreadgroups:&v93 threadsPerThreadgroup:&v91];
    }
    else
    {
      id v31 = *((id *)v11 + 20);
      unint64_t v48 = (unint64_t)((char *)v104 - (char *)v23) >> 4;
      if ((int)v48 >= 1)
      {
        int v49 = 0;
        int v50 = 0;
        long long v87 = xmmword_192DCA5E0;
        do
        {
          if (v48 >= 4) {
            int v51 = 4;
          }
          else {
            int v51 = v48;
          }
          std::to_string(&v99, v51);
          uint64_t v52 = std::string::insert(&v99, 0, "v9_concat_");
          long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
          v100.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v53;
          v52->__r_.__value_.__l.__size_ = 0;
          v52->__r_.__value_.__r.__words[2] = 0;
          v52->__r_.__value_.__r.__words[0] = 0;
          int64x2_t v54 = std::string::append(&v100, "in");
          long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
          int64_t v102 = v54->__r_.__value_.__r.__words[2];
          long long v101 = v55;
          v54->__r_.__value_.__l.__size_ = 0;
          v54->__r_.__value_.__r.__words[2] = 0;
          v54->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v100.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v99.__r_.__value_.__l.__data_);
          }
          if (v102 >= 0) {
            std::string v56 = &v101;
          }
          else {
            std::string v56 = (long long *)v101;
          }
          std::string v57 = objc_msgSend(*(id *)(v88 + 160), "kernelForFunction:cacheString:withConstants:", v56, 0, 0, v87);
          [v7 setComputePipelineState:v57];
          *(_DWORD *)(a1 + 344) = *((_DWORD *)v11 + 3)
                                * *((_DWORD *)v11 + 2)
                                * *((_DWORD *)v11 + 5)
                                * *((_DWORD *)v11 + 6);
          int v58 = *((_DWORD *)v11 + 4);
          int v59 = v58 - 1;
          BOOL v34 = v58 < 1;
          int v60 = v58 + 2;
          if (!v34) {
            int v60 = v59;
          }
          *(_DWORD *)(a1 + 348) = (v60 >> 2) + 1;
          *(_DWORD *)(a1 + 372) = v50;
          uint64_t v61 = v49;
          uint64_t v62 = v103;
          if (v49 >= (unint64_t)(((char *)v104 - (char *)v103) >> 4))
          {
            int v64 = 0;
          }
          else
          {
            id v90 = v31;
            unint64_t v63 = 0;
            int v64 = 0;
            uint64_t v65 = 2 * v49;
            do
            {
              __int16 v66 = v62[v65];
              int v67 = v66[2].i32[0];
              int v68 = v67 - 1;
              BOOL v34 = v67 < 1;
              int v69 = v67 + 2;
              if (v34) {
                int v70 = v69;
              }
              else {
                int v70 = v68;
              }
              [v7 setBuffer:*(void *)&v66[20] offset:0 atIndex:v63 + 2];
              int v71 = (v70 >> 2) + 1;
              switch((int)v63)
              {
                case 0:
                  *(_DWORD *)(a1 + 356) = v71;
                  uint64_t v62 = v103;
                  unint64_t v72 = v103[v65];
                  *(_DWORD *)(a1 + 388) = v72[31].i32[1] / 4;
                  break;
                case 1:
                  *(_DWORD *)(a1 + 360) = v71;
                  uint64_t v62 = v103;
                  unint64_t v72 = v103[v65];
                  *(_DWORD *)(a1 + 392) = v72[31].i32[1] / 4;
                  break;
                case 2:
                  *(_DWORD *)(a1 + 364) = v71;
                  uint64_t v62 = v103;
                  unint64_t v72 = v103[v65];
                  *(_DWORD *)(a1 + 396) = v72[31].i32[1] / 4;
                  break;
                case 3:
                  *(_DWORD *)(a1 + 368) = v71;
                  uint64_t v62 = v103;
                  unint64_t v72 = v103[v65];
                  *(_DWORD *)(a1 + 400) = v72[31].i32[1] / 4;
                  break;
                default:
                  uint64_t v62 = v103;
                  unint64_t v72 = v103[v65];
                  break;
              }
              if (*((_DWORD *)v11 + 2) != v72[1].i32[0] || *((_DWORD *)v11 + 3) != v72[1].i32[1])
              {
                v85 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v85, "Concat: inconsistent shape");
                __cxa_throw(v85, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              v64 += v71;
              v50 += v71;
              unint64_t v73 = v61 + v63 + 1;
              if (v73 >= ((char *)v104 - (char *)v62) >> 4) {
                break;
              }
              v65 += 2;
            }
            while (v63++ < 3);
            int v49 = v73;
            id v31 = v90;
            uint64_t v29 = a1 + 344;
          }
          *(_DWORD *)(a1 + 352) = v64;
          [v7 setBuffer:v31 offset:0 atIndex:0];
          [v7 setBytes:v29 length:68 atIndex:1];
          int v75 = v64 - 1;
          int v76 = *(_DWORD *)(a1 + 380) - 1;
          int v77 = *(_DWORD *)(a1 + 384);
          int v78 = v77 - 1;
          BOOL v34 = v77 < 1;
          int v79 = v77 + 2;
          if (!v34) {
            int v79 = v78;
          }
          uint64_t v80 = (v79 >> 2) + 1;
          if (v64 < 4)
          {
            uint64_t v84 = v75 / 2 + 1;
            if (v76 < 0) {
              int v76 = *(_DWORD *)(a1 + 380) + 6;
            }
            v96[0] = v84;
            v96[1] = (v76 >> 3) + 1;
            v96[2] = v80;
            long long v95 = v87;
            long long v82 = (int64x2_t *)&v95;
            v83 = v96;
          }
          else
          {
            uint64_t v81 = (v75 >> 2) + 1;
            if (v76 < 0) {
              int v76 = *(_DWORD *)(a1 + 380) + 2;
            }
            v98[0] = v81;
            v98[1] = (v76 >> 2) + 1;
            v98[2] = v80;
            int64x2_t v97 = vdupq_n_s64(4uLL);
            long long v82 = &v97;
            v83 = v98;
          }
          v82[1].i64[0] = 4;
          objc_msgSend(v7, "dispatchThreadgroups:threadsPerThreadgroup:", v83);
          if (SHIBYTE(v102) < 0) {
            operator delete((void *)v101);
          }

          id v31 = *((id *)v11 + 20);
          LODWORD(v48) = ((unint64_t)((char *)v104 - (char *)v103) >> 4) - v49;
        }
        while ((int)v48 >= 1);
      }
    }

    *(void *)&long long v101 = &v103;
    std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);

    Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v106);
  }
}

void sub_1928931AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  *(void *)(v42 - 160) = v42 - 128;
  std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 160));

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v42 - 104));
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_concat_kernel::~v9_concat_kernel(Espresso::V9Engine::v9_concat_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::V9Engine::v9_upsample_kernel::__launch(int32x2_t *a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  int32x2_t v7 = a1[1];
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v55, *a2);
  id v8 = v55[0];
  if (*(unsigned char *)(*(void *)&v7 + 64))
  {
    char v9 = a1 + 22;
    if (a1[24].i8[7] < 0) {
      char v9 = (int32x2_t *)*v9;
    }
    uint64_t v10 = [NSString stringWithUTF8String:v9];
    [v8 setLabel:v10];
  }
  unint64_t v11 = **a3;
  if (v11) {
  else
  }
    uint64_t v12 = 0;
  uint64_t v13 = **a4;
  if (v13) {
  else
  }
    uint64_t v14 = 0;
  if (a1[36].i32[1])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Not implemented");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  id v15 = v14[20];
  id v16 = *(id *)&v12[20];
  if (v14[21]) {
    BOOL v17 = *(void *)&v12[21] != 0;
  }
  else {
    BOOL v17 = 0;
  }
  int32x2_t v18 = a1[44];
  if (!*(void *)&v18)
  {
    id v47 = v15;
    long long v19 = objc_opt_new();
    int v20 = objc_opt_new();
    uint64_t v21 = a1[35].u32[1];
    __int16 v54 = a1[35].i32[1];
    objc_msgSend(v20, "appendFormat:", @"%d:%d_", 0, v21);
    [v19 setConstantValue:&v54 type:41 atIndex:0];
    uint64_t v22 = a1[36].u32[0];
    __int16 v54 = a1[36].i32[0];
    objc_msgSend(v20, "appendFormat:", @"%d:%d_", 1, v22);
    [v19 setConstantValue:&v54 type:41 atIndex:1];
    id v23 = v20;
    uint64_t v24 = [v23 UTF8String];
    if (v17) {
      uint64_t v25 = "v9_upsample_tex_nearest";
    }
    else {
      uint64_t v25 = "v9_upsample_nearest";
    }
    uint64_t v26 = [*(id *)(*(void *)&v7 + 160) kernelForFunction:v25 cacheString:v24 withConstants:v19];
    id v27 = (void *)a1[44];
    a1[44] = (int32x2_t)v26;

    int32x2_t v18 = a1[44];
    id v15 = v47;
  }
  [v8 setComputePipelineState:*(void *)&v18];
  int v28 = v12[2].i32[0];
  int v30 = v28 - 1;
  BOOL v29 = v28 < 1;
  int v31 = v28 + 2;
  if (!v29) {
    int v31 = v30;
  }
  int v32 = (v31 >> 2) + 1;
  a1[45] = v12[1];
  a1[46].i32[0] = v32;
  a1[46].i32[1] = v12[2].i32[1];
  a1[47].i32[0] = *((_DWORD *)v14 + 62) / 4;
  a1[47].i32[1] = *((_DWORD *)v14 + 63) / 4;
  a1[48].i32[0] = *((_DWORD *)v14 + 65) / 4;
  a1[48].i32[1] = v12[31].i32[0] / 4;
  a1[49].i32[0] = v12[31].i32[1] / 4;
  a1[49].i32[1] = v12[32].i32[1] / 4;
  if (v17)
  {
    [v8 setTexture:v14[21] atIndex:0];
    [v8 setTexture:*(void *)&v12[21] atIndex:1];
    [v8 setBytes:&a1[45] length:52 atIndex:0];
    int v33 = v12[2].i32[1] * v32 * v12[3].i32[0];
    int v34 = v33 - 1;
    BOOL v29 = v33 < 1;
    int v35 = v33 + 2;
    if (!v29) {
      int v35 = v34;
    }
    uint64_t v52 = (v35 >> 2) + 1;
    int32x2_t v36 = vadd_s32(v12[1], (int32x2_t)-1);
    int32x2_t v37 = vsra_n_s32((int32x2_t)0x100000001, (int32x2_t)vsra_n_u32((uint32x2_t)v36, (uint32x2_t)vcltz_s32(v36), 0x1EuLL), 2uLL);
    *(void *)&long long v38 = v37.i32[0];
    *((void *)&v38 + 1) = v37.i32[1];
    long long v53 = v38;
    uint64_t v39 = 4;
    uint64_t v51 = 4;
    int v40 = &v52;
    int v41 = &v51;
  }
  else
  {
    [v8 setBuffer:v15 offset:0 atIndex:0];
    [v8 setBuffer:v16 offset:0 atIndex:1];
    [v8 setBytes:&a1[45] length:52 atIndex:2];
    int v42 = v12[2].i32[1] * v32 * v12[3].i32[0];
    if (v42 >= 1) {
      --v42;
    }
    int32x2_t v43 = vadd_s32(v12[1], (int32x2_t)-1);
    int32x2_t v44 = vsra_n_s32((int32x2_t)0x100000001, (int32x2_t)vsra_n_u32((uint32x2_t)v43, (uint32x2_t)vcltz_s32(v43), 0x1EuLL), 2uLL);
    *(void *)&long long v45 = v44.i32[0];
    *((void *)&v45 + 1) = v44.i32[1];
    long long v49 = v45;
    uint64_t v50 = (v42 >> 1) + 1;
    uint64_t v48 = 4;
    int v40 = (uint64_t *)&v49;
    int v41 = &v48;
    uint64_t v39 = 2;
  }
  v41[1] = 4;
  v41[2] = v39;
  objc_msgSend(v8, "dispatchThreadgroups:threadsPerThreadgroup:", v40);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v55);
}

void sub_1928937C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v14 - 96));
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_upsample_kernel::~v9_upsample_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

uint64_t Espresso::V9Engine::v9_batchnorm_kernel::get_batchnorm_params@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 512);
  *a2 = *(void *)(this + 504);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void Espresso::V9Engine::v9_batchnorm_kernel::set_batchnorm_params(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void **)(a1 + 472);
  *(void *)(a1 + 472) = 0;

  uint64_t v6 = *a2;
  if (*a2)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,1>,std::allocator<Espresso::blob<unsigned short,1>>,int &,int &,int &,int &,void>(&v36, *(_DWORD *)(v6 + 8), 1, 1, 1);
    uint64_t v7 = v36;
    uint64_t v8 = *(void *)(v36 + 16);
    uint64_t v9 = *(int *)(*a2 + 8);
    if (v9)
    {
      uint64_t v10 = *(int **)(*a2 + 16);
      unint64_t v11 = *(_WORD **)(v36 + 16);
      do
      {
        int v12 = *v10++;
        _S0 = v12;
        __asm { FCVT            H0, S0 }
        *v11++ = _S0;
        --v9;
      }
      while (v9);
    }
    uint64_t v18 = [*(id *)(v4 + 144) newBufferWithBytes:v8 length:2 * *(int *)(v7 + 8) options:0];
    long long v19 = *(void **)(a1 + 472);
    *(void *)(a1 + 472) = v18;

    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,1>,std::allocator<Espresso::blob<unsigned short,1>>,int &,int &,int &,int &,void>(&v34, *(_DWORD *)(*a2 + 8) / 2, 1, 1, 1);
    int v20 = *(_DWORD *)(*a2 + 8);
    uint64_t v21 = v34;
    if (v20 <= 3)
    {
      uint64_t v24 = *(void *)(v34 + 16);
    }
    else
    {
      uint64_t v22 = 0;
      uint64_t v23 = *(void *)(v7 + 16);
      uint64_t v24 = *(void *)(v34 + 16);
      uint64_t v25 = v20 & 0xFFFFFFFC;
      do
      {
        uint64_t v26 = (_WORD *)(v23 + 2 * v22);
        id v27 = (_WORD *)(v24 + v22);
        *id v27 = *v26;
        v27[1] = v26[1];
        v22 += 4;
      }
      while (v25 != v22);
    }
    uint64_t v28 = [*(id *)(v4 + 144) newBufferWithBytes:v24 length:2 * *(int *)(v21 + 8) options:0];
    BOOL v29 = *(void **)(a1 + 480);
    *(void *)(a1 + 480) = v28;

    uint64_t v30 = [*(id *)(v4 + 144) newBufferWithLength:4 * *(int *)(a1 + 304) options:0];
    int v31 = *(void **)(a1 + 488);
    *(void *)(a1 + 488) = v30;

    if (v35) {
      nitro::nitro_function::nitro_function(v35);
    }
    if (v37) {
      nitro::nitro_function::nitro_function(v37);
    }
    uint64_t v6 = *a2;
  }
  uint64_t v32 = a2[1];
  if (v32) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
  }
  int v33 = *(std::__shared_weak_count **)(a1 + 512);
  *(void *)(a1 + 504) = v6;
  *(void *)(a1 + 512) = v32;
  if (v33)
  {
    nitro::nitro_function::nitro_function(v33);
  }
}

void sub_192893AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::V9Engine::v9_batchnorm_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  uint64_t v7 = *a2;
  uint64_t v8 = *(void *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)&v97, *a2);
  id v9 = v97;
  if (*(unsigned char *)(v8 + 64))
  {
    uint64_t v10 = (void *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0) {
      uint64_t v10 = (void *)*v10;
    }
    unint64_t v11 = [NSString stringWithUTF8String:v10];
    [v9 setLabel:v11];
  }
  int v12 = **a3;
  if (v12) {
  else
  }
    uint64_t v13 = 0;
  uint64_t v14 = **a4;
  if (v14) {
  else
  }
    id v15 = 0;
  int v16 = v13[4];
  if (v16 >= 1) {
    int v17 = v16 - 1;
  }
  else {
    int v17 = v16 + 2;
  }
  if (*(_DWORD *)(a1 + 308) && *(_DWORD *)(a1 + 312))
  {
    if (v15[33] && (v15[2] & 7) == 0)
    {
      int v18 = 1;
      if (*((void *)v13 + 33)) {
        BOOL v20 = (v13[4] & 7) == 0;
      }
      else {
        BOOL v20 = 0;
      }
      BOOL v89 = v20;
    }
    else
    {
      int v18 = 0;
      BOOL v89 = 0;
    }
    long long v19 = (uint64_t *)(a1 + 472);
    if (!*(void *)(a1 + 472))
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&__p, 4 * v16, 1, 1, 1);
      uint64_t v21 = v13[4];
      uint64_t v22 = (int *)__p;
      uint64_t v23 = *((void *)__p + 2);
      if ((int)v21 >= 1)
      {
        uint64_t v24 = (_OWORD *)*((void *)__p + 2);
        do
        {
          *v24++ = xmmword_192DCA1E0;
          --v21;
        }
        while (v21);
      }
      uint64_t v25 = [*(id *)(v8 + 144) newBufferWithBytes:v23 length:4 * v22[2] options:0];
      uint64_t v26 = (void *)*v19;
      *long long v19 = v25;

      if (v92) {
        nitro::nitro_function::nitro_function(v92);
      }
      int v16 = v13[4];
    }
  }
  else
  {
    if (!*(void *)(a1 + 472))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unexpected null pointer: bn_params");
LABEL_129:
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    BOOL v89 = 0;
    int v18 = 0;
    long long v19 = (uint64_t *)(a1 + 472);
  }
  if (v16 != *((_DWORD *)v15 + 4))
  {
LABEL_124:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid shape (k)");
    goto LABEL_129;
  }
  unsigned int v27 = v13[5];
  if (v27 != *((_DWORD *)v15 + 5))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid shape (n)");
    goto LABEL_129;
  }
  unsigned int v28 = v13[2];
  if (v28 != *((_DWORD *)v15 + 2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid shape (w)");
    goto LABEL_129;
  }
  unsigned int v29 = v13[3];
  if (v29 != *((_DWORD *)v15 + 3))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid shape (h)");
    goto LABEL_129;
  }
  int v30 = *(_DWORD *)(a1 + 308);
  int v31 = *(_DWORD *)(a1 + 312);
  if (!v30)
  {
    if (v31) {
      goto LABEL_43;
    }
    if (*(_DWORD *)(a1 + 304) == v16)
    {
      int v31 = 0;
      goto LABEL_43;
    }
    goto LABEL_124;
  }
  if (v27 != 1 && !v31)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Not implemented: only instance norm was implemented");
    goto LABEL_129;
  }
LABEL_43:
  unsigned int v33 = (v17 >> 2) + 1;
  if (*(_DWORD *)(a1 + 344) != v28
    || *(_DWORD *)(a1 + 348) != v29
    || *(_DWORD *)(a1 + 304) != v16
    || *(_DWORD *)(a1 + 352) != v33
    || *(_DWORD *)(a1 + 356) != v27)
  {
    *(_DWORD *)(a1 + 360) = *(_DWORD *)(a1 + 496);
    *(_DWORD *)(a1 + 344) = v28;
    *(_DWORD *)(a1 + 348) = v29;
    *(_DWORD *)(a1 + 304) = v16;
    *(_DWORD *)(a1 + 352) = v33;
    *(_DWORD *)(a1 + 356) = v27;
  }
  uint64_t v90 = a1 + 400;
  *(_DWORD *)(a1 + 400) = v28;
  *(_DWORD *)(a1 + 404) = v29;
  if (v18) {
    int v34 = 8;
  }
  else {
    int v34 = 4;
  }
  *(_DWORD *)(a1 + 408) = (v16 - 1) / v34 + 1;
  *(_DWORD *)(a1 + 420) = *((_DWORD *)v15 + 62) / v34;
  *(_DWORD *)(a1 + 424) = *((_DWORD *)v15 + 63) / v34;
  *(_DWORD *)(a1 + 428) = *((_DWORD *)v15 + 65) / v34;
  int v35 = *((_DWORD *)v15 + 6) * v27;
  *(_DWORD *)(a1 + 412) = v35;
  *(_DWORD *)(a1 + 416) = v29 * v28 * v35;
  *(_DWORD *)(a1 + 432) = v31;
  *(_DWORD *)(a1 + 436) = *(_DWORD *)(a1 + 316);
  *(_DWORD *)(a1 + 440) = *(_DWORD *)(a1 + 332);
  *(_DWORD *)(a1 + 444) = *(_DWORD *)(a1 + 328);
  *(_DWORD *)(a1 + 448) = *(_DWORD *)(a1 + 340);
  int v36 = *(_DWORD *)(v8 + 232);
  if ((v36 & 0x80000000) == 0 && *(_DWORD *)(a1 + 364) != v36)
  {
    *(_DWORD *)(a1 + 364) = v36;
    int32x2_t v37 = *(void **)(a1 + 456);
    *(void *)(a1 + 456) = 0;

    int v30 = *(_DWORD *)(a1 + 308);
  }
  long long v38 = *(void **)(a1 + 456);
  if (!v30)
  {
    if (!v38)
    {
      uint64_t v45 = [*(id *)(v8 + 160) kernelForFunction:"v9_batchnorm_inference_kernel" cacheString:0 withConstants:0];
      int32x2_t v46 = *(void **)(a1 + 456);
      *(void *)(a1 + 456) = v45;

      long long v38 = *(void **)(a1 + 456);
    }
    [v9 setComputePipelineState:v38];
    [v9 setBuffer:v15[20] offset:0 atIndex:0];
    [v9 setBuffer:*((void *)v13 + 20) offset:0 atIndex:1];
    [v9 setBytes:v90 length:52 atIndex:2];
    [v9 setBuffer:*v19 offset:0 atIndex:3];
    dispatch_auto_threadgroupsize(v9, v13[2], v13[3], v33, v13[6] * v13[5]);
    goto LABEL_91;
  }
  if (!v38)
  {
    uint64_t v39 = objc_opt_new();
    int v40 = objc_opt_new();
    unsigned int v41 = [*(id *)(v8 + 144) supportsFeatureSet:11];
    LOWORD(__p) = v41;
    objc_msgSend(v40, "appendFormat:", @"%d:%d_", 0, v41);
    [v39 setConstantValue:&__p type:37 atIndex:0];
    LOWORD(__p) = *(_DWORD *)(a1 + 364);
    objc_msgSend(v40, "appendFormat:", @"%d:%d_", 1, (unsigned __int16)__p);
    [v39 setConstantValue:&__p type:41 atIndex:1];
    id v42 = v40;
    uint64_t v43 = [v42 UTF8String];
    if (v18) {
      int32x2_t v44 = "v9_batchnorm_training_kernel_tex8";
    }
    else {
      int32x2_t v44 = "v9_batchnorm_training_kernel";
    }
    uint64_t v47 = [*(id *)(v8 + 160) kernelForFunction:v44 cacheString:v43 withConstants:v39];
    uint64_t v48 = *(void **)(a1 + 456);
    *(void *)(a1 + 456) = v47;

    long long v38 = *(void **)(a1 + 456);
  }
  int v49 = [v38 maxTotalThreadsPerThreadgroup];
  int v50 = *(_DWORD *)(a1 + 408);
  int v51 = [*(id *)(v8 + 144) supportsFeatureSet:11];
  int v52 = v51;
  if (v51)
  {
    int v53 = *(_DWORD *)(a1 + 408) - 1;
    unsigned int v54 = 512;
  }
  else
  {
    int v53 = v50 - 2;
    unsigned int v54 = 256;
  }
  unsigned int v55 = v54 >> (v89 & ~(_BYTE)v51);
  if (v53 <= 1) {
    int v53 = 1;
  }
  int v56 = v55 / v53;
  if (v56 >= v49) {
    int v57 = v49;
  }
  else {
    int v57 = v56;
  }
  int v58 = [*(id *)(a1 + 456) threadExecutionWidth];
  int v59 = v57 / (int)[*(id *)(a1 + 456) threadExecutionWidth] * v58;
  LODWORD(v60) = v59 >> 2;
  while ((int)v60 > *(_DWORD *)(a1 + 344))
    LODWORD(v60) = v60 - [*(id *)(a1 + 456) threadExecutionWidth];
  if (v52) {
    int v61 = 4;
  }
  else {
    int v61 = 1;
  }
  if (v61 <= (int)v60) {
    uint64_t v60 = v60;
  }
  else {
    uint64_t v60 = v61;
  }
  int v62 = v59 / (int)v60;
  if ((v59 / (int)v60) >= *(_DWORD *)(a1 + 348)) {
    int v62 = *(_DWORD *)(a1 + 348);
  }
  if (v62 <= 1) {
    uint64_t v63 = 1;
  }
  else {
    uint64_t v63 = v62;
  }
  [v9 setComputePipelineState:*(void *)(a1 + 456)];
  uint64_t v64 = 21;
  if (v18) {
    uint64_t v64 = 33;
  }
  [v9 setTexture:v15[v64] atIndex:0];
  [v9 setBytes:v90 length:52 atIndex:0];
  [v9 setBuffer:*(void *)(a1 + 488) offset:0 atIndex:1];
  [v9 setBuffer:*(void *)(a1 + 480) offset:0 atIndex:2];
  uint64_t v65 = (v63 * v60);
  char v66 = 4;
  if (v18) {
    char v66 = 5;
  }
  uint64_t v67 = v65 << v66;
  [v9 setThreadgroupMemoryLength:v65 << v66 atIndex:0];
  [v9 setThreadgroupMemoryLength:v67 atIndex:1];
  uint64_t v68 = (int)v13[6] * (uint64_t)(int)v13[5];
  v96[0] = *(int *)(a1 + 408);
  v96[1] = v68;
  v96[2] = 1;
  v95[0] = v60;
  v95[1] = v63;
  v95[2] = 1;
  [v9 dispatchThreadgroups:v96 threadsPerThreadgroup:v95];
  if (*(unsigned char *)(a1 + 520))
  {
LABEL_91:
    id v69 = v9;
    goto LABEL_123;
  }
  char v98 = 0;
  [v97 endEncoding];
  int v70 = *(void **)(v7 + 152);
  *(void *)(v7 + 152) = 0;

  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v94, v7);
  id v69 = v94[0];

  if (*(unsigned char *)(v8 + 64))
  {
    int v71 = NSString;
    if (*(char *)(a1 + 199) >= 0) {
      size_t v72 = *(unsigned __int8 *)(a1 + 199);
    }
    else {
      size_t v72 = *(void *)(a1 + 184);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v72 + 10);
    if (v93 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if (v72)
    {
      if (*(char *)(a1 + 199) >= 0) {
        v74 = (const void *)(a1 + 176);
      }
      else {
        v74 = *(const void **)(a1 + 176);
      }
      memmove(p_p, v74, v72);
    }
    strcpy((char *)p_p + v72, "_inference");
    if (v93 >= 0) {
      int v75 = &__p;
    }
    else {
      int v75 = __p;
    }
    int v76 = [v71 stringWithUTF8String:v75];
    [v69 setLabel:v76];

    if (v93 < 0) {
      operator delete(__p);
    }
  }
  int v77 = *((_DWORD *)v15 + 4) - 1;
  if (v89)
  {
    if (v77 < 0) {
      int v77 = *((_DWORD *)v15 + 4) + 6;
    }
    *(_DWORD *)(a1 + 408) = (v77 >> 3) + 1;
    uint64_t v78 = *(void *)(a1 + 464);
    if (!v78)
    {
      uint64_t v79 = [*(id *)(v8 + 160) kernelForFunction:"v9_instancenorm_inference_kernel_tex8" cacheString:0 withConstants:0];
      uint64_t v80 = *(void **)(a1 + 464);
      *(void *)(a1 + 464) = v79;

      uint64_t v78 = *(void *)(a1 + 464);
    }
    [v69 setComputePipelineState:v78];
    [v69 setBytes:v90 length:52 atIndex:0];
    [v69 setBuffer:*(void *)(a1 + 488) offset:0 atIndex:1];
    [v69 setTexture:v15[33] atIndex:0];
    uint64_t v81 = v13 + 66;
  }
  else
  {
    if (v77 < 0) {
      int v77 = *((_DWORD *)v15 + 4) + 2;
    }
    *(_DWORD *)(a1 + 408) = (v77 >> 2) + 1;
    uint64_t v82 = *(void *)(a1 + 464);
    if (!v82)
    {
      uint64_t v83 = [*(id *)(v8 + 160) kernelForFunction:"v9_instancenorm_inference_kernel" cacheString:0 withConstants:0];
      uint64_t v84 = *(void **)(a1 + 464);
      *(void *)(a1 + 464) = v83;

      uint64_t v82 = *(void *)(a1 + 464);
    }
    [v69 setComputePipelineState:v82];
    [v69 setBytes:v90 length:52 atIndex:0];
    [v69 setBuffer:*(void *)(a1 + 488) offset:0 atIndex:1];
    [v69 setTexture:v15[21] atIndex:0];
    uint64_t v81 = v13 + 42;
  }
  [v69 setTexture:*v81 atIndex:1];
  int v85 = v13[5] * v13[3] * v13[6];
  int v87 = v85 - 1;
  BOOL v86 = v85 < 1;
  int v88 = v85 + 2;
  if (!v86) {
    int v88 = v87;
  }
  dispatch_auto_threadgroupsize(v69, *(_DWORD *)(a1 + 408) * v13[2], (v88 >> 2) + 1, 1u, 1);
  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v94);
LABEL_123:

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&v97);
}

void sub_192894574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  __cxa_free_exception(v21);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v22 - 96));
  _Unwind_Resume(a1);
}

void sub_1928947D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_batchnorm_kernel::~v9_batchnorm_kernel(Espresso::V9Engine::v9_batchnorm_kernel *this)
{
  *(void *)this = &unk_1EE370998;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 64);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE370998;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 64);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel(this);
}

uint64_t Espresso::V9Engine::v9_pool_kernel::supports_weight_key()
{
  return 0;
}

void Espresso::V9Engine::v9_pool_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  uint64_t v7 = *(void *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v65, *a2);
  id v8 = v65[0];
  if (*(unsigned char *)(v7 + 64))
  {
    id v9 = (void *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0) {
      id v9 = (void *)*v9;
    }
    uint64_t v10 = [NSString stringWithUTF8String:v9];
    [v8 setLabel:v10];
  }
  unint64_t v11 = **a3;
  if (v11) {
  else
  }
    int v12 = 0;
  uint64_t v13 = **a4;
  if (v13) {
  else
  }
    uint64_t v14 = 0;
  BOOL v15 = *(void *)&v12[21] && *(void *)&v14[21] && v14[3].i32[0] * v14[2].i32[1] == 1;
  uint64_t v16 = *(void *)(a1 + 432);
  if (!v16)
  {
    int v17 = objc_opt_new();
    int v18 = objc_opt_new();
    uint64_t v19 = *(unsigned int *)(a1 + 308);
    __int16 v64 = *(_DWORD *)(a1 + 308);
    objc_msgSend(v18, "appendFormat:", @"%d:%d_", 0, v19);
    [v17 setConstantValue:&v64 type:41 atIndex:0];
    uint64_t v20 = *(unsigned int *)(a1 + 312);
    __int16 v64 = *(_DWORD *)(a1 + 312);
    objc_msgSend(v18, "appendFormat:", @"%d:%d_", 1, v20);
    [v17 setConstantValue:&v64 type:41 atIndex:1];
    uint64_t v21 = *(unsigned int *)(a1 + 304);
    __int16 v64 = *(_DWORD *)(a1 + 304);
    objc_msgSend(v18, "appendFormat:", @"%d:%d_", 2, v21);
    [v17 setConstantValue:&v64 type:41 atIndex:2];
    uint64_t v22 = *(unsigned int *)(a1 + 332);
    __int16 v64 = *(_DWORD *)(a1 + 332);
    objc_msgSend(v18, "appendFormat:", @"%d:%d_", 3, v22);
    [v17 setConstantValue:&v64 type:41 atIndex:3];
    id v23 = v18;
    uint64_t v24 = [v23 UTF8String];
    if (v15) {
      uint64_t v25 = "v9_pool";
    }
    else {
      uint64_t v25 = "v9_pool_buff";
    }
    uint64_t v26 = [*(id *)(v7 + 160) kernelForFunction:v25 cacheString:v24 withConstants:v17];
    unsigned int v27 = *(void **)(a1 + 432);
    *(void *)(a1 + 432) = v26;

    uint64_t v16 = *(void *)(a1 + 432);
  }
  [v8 setComputePipelineState:v16];
  int v28 = v12[2].i32[0];
  int v30 = v28 - 1;
  BOOL v29 = v28 < 1;
  int v31 = v28 + 2;
  if (!v29) {
    int v31 = v30;
  }
  int v32 = (v31 >> 2) + 1;
  int32x2_t v33 = v14[1];
  int32x2_t v34 = v12[1];
  *(int32x2_t *)&long long v35 = v33;
  *((int32x2_t *)&v35 + 1) = v34;
  *(_OWORD *)(a1 + 440) = v35;
  uint64_t v36 = a1 + 440;
  *(_DWORD *)(a1 + 456) = v32;
  *(_DWORD *)(a1 + 460) = v12[2].i32[1];
  int32x2_t v37 = *(int32x2_t *)(a1 + 320);
  *(int32x2_t *)(a1 + 464) = v37;
  int v38 = *(__int16 *)(a1 + 340);
  switch(v38)
  {
    case 4:
      goto LABEL_25;
    case 2:
      int32x2_t v41 = 0;
      break;
    case 1:
LABEL_25:
      int32x2_t v39 = vmax_s32(vadd_s32(vmla_s32(vneg_s32(v33), v37, vadd_s32(v34, (int32x2_t)-1)), *(int32x2_t *)(a1 + 308)), 0);
      int32x2_t v40 = (int32x2_t)vshr_n_u32((uint32x2_t)v39, 1uLL);
      int32x2_t v41 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(*(unsigned __int16 *)(a1 + 340) == 1), 0x1FuLL)), (int8x8_t)v40, (int8x8_t)vsub_s32(v39, v40));
      break;
    default:
      v33.i16[0] = *(_WORD *)(a1 + 348);
      v33.i16[2] = *(_WORD *)(a1 + 352);
      int32x2_t v41 = vshr_n_s32(vshl_n_s32(v33, 0x10uLL), 0x10uLL);
      break;
  }
  *(int32x2_t *)(a1 + 472) = v41;
  *(_DWORD *)(a1 + 480) = v14[31].i32[0] / 4;
  *(_DWORD *)(a1 + 484) = v14[31].i32[1] / 4;
  *(_DWORD *)(a1 + 488) = v14[32].i32[1] / 4;
  *(_DWORD *)(a1 + 492) = v12[31].i32[0] / 4;
  *(_DWORD *)(a1 + 496) = v12[31].i32[1] / 4;
  *(_DWORD *)(a1 + 500) = v12[32].i32[1] / 4;
  if (v15)
  {
    [v8 setTexture:*(void *)&v14[21] atIndex:0];
    [v8 setTexture:*(void *)&v12[21] atIndex:1];
    [v8 setBytes:v36 length:64 atIndex:0];
    __int32 v42 = v12[1].i32[0];
    __int32 v43 = v12[1].i32[1];
    __int32 v45 = v12[2].i32[1];
    uint64_t v44 = v12[3].i32[0];
    int v46 = [*(id *)(a1 + 432) threadExecutionWidth];
    v63[0] = (v42 * v32 - 1) / v46 + 1;
    v63[1] = v45 * (uint64_t)v43 * v44;
    v63[2] = 1;
    uint64_t v61 = v46;
    int64x2_t v62 = vdupq_n_s64(1uLL);
    [v8 dispatchThreadgroups:v63 threadsPerThreadgroup:&v61];
  }
  else
  {
    id v47 = *(id *)&v14[20];
    id v48 = *(id *)&v12[20];
    [v8 setBuffer:v47 offset:0 atIndex:0];
    [v8 setBuffer:v48 offset:0 atIndex:1];
    [v8 setBytes:v36 length:64 atIndex:2];
    int v49 = v14[1].i32[0];
    int v50 = v49 - 1;
    BOOL v29 = v49 < 1;
    int v51 = v49 + 2;
    if (!v29) {
      int v51 = v50;
    }
    uint64_t v52 = (v51 >> 2) + 1;
    int v53 = v12[1].i32[1];
    int v54 = v53 - 1;
    BOOL v29 = v53 < 1;
    int v55 = v53 + 2;
    if (!v29) {
      int v55 = v54;
    }
    uint64_t v56 = (v55 >> 2) + 1;
    int v57 = v12[2].i32[1] * v32 * v12[3].i32[0];
    if (v57 >= 1) {
      --v57;
    }
    v60[0] = v52;
    v60[1] = v56;
    v60[2] = (v57 >> 1) + 1;
    int64x2_t v58 = vdupq_n_s64(4uLL);
    uint64_t v59 = 2;
    [v8 dispatchThreadgroups:v60 threadsPerThreadgroup:&v58];
  }
  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v65);
}

void sub_192894EEC(_Unwind_Exception *a1)
{
  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v3 - 96));
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_pool_kernel::~v9_pool_kernel(id *this)
{
  Espresso::generic_pool_kernel::~generic_pool_kernel((Espresso::generic_pool_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::generic_pool_kernel::~generic_pool_kernel((Espresso::generic_pool_kernel *)this);
}

uint64_t Espresso::V9Engine::v9_inner_product_kernel::get_weights@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 552);
  *a2 = *(void *)(this + 544);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

double Espresso::V9Engine::v9_inner_product_kernel::get_biases@<D0>(id *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = [this[72] contents];
  uint64_t v5 = (char *)operator new(0x58uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)uint64_t v5 = &unk_1EE389920;
  id v6 = this[71];
  *((void *)v5 + 3) = &unk_1EE36BEB0;
  double result = 0.0;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *((_DWORD *)v5 + 8) = v6;
  *((void *)v5 + 5) = v4;
  v5[48] = 0;
  *a2 = v5 + 24;
  a2[1] = v5;
  return result;
}

void Espresso::V9Engine::v9_inner_product_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int const*&,void>(&v6, (int *)(*a2 + 8));
  memcpy(*(void **)(v6 + 16), *(const void **)(v3 + 16), 4 * *(int *)(v3 + 8) * (uint64_t)*(int *)(v3 + 12));
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 552);
  *(_OWORD *)(a1 + 544) = v6;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(void **)(a1 + 560);
  *(void *)(a1 + 560) = 0;
}

void Espresso::V9Engine::v9_inner_product_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(_DWORD *)(a1 + 312) = *a2 != 0;
  if (v3)
  {
    uint64_t v4 = *(const void **)(a1 + 8);
    if (!v4 {
      || (uint64_t v6 = *(int *)(v3 + 8),
    }
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
    }
    id v8 = *(std::__shared_weak_count **)(a1 + 16);
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      id v14 = v7[18];
      nitro::nitro_function::nitro_function(v8);
      id v9 = v14;
    }
    else
    {
      id v9 = v7[18];
    }
    *(void *)(a1 + 568) = v6;
    id v15 = v9;
    uint64_t v11 = [v9 newBufferWithLength:(4 * v6 + 12) & 0xFFFFFFFFFFFFFFF0 options:0];
    int v12 = *(void **)(a1 + 576);
    *(void *)(a1 + 576) = v11;

    memcpy((void *)[*(id *)(a1 + 576) contents], *(const void **)(*a2 + 16), 4 * v6);
    uint64_t v10 = v15;
  }
  else
  {
    *(void *)(a1 + 568) = -1;
    uint64_t v10 = *(void **)(a1 + 576);
    *(void *)(a1 + 576) = 0;
  }
}

void sub_1928952AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_inner_product_kernel::on_resized(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 616);
  *(void *)(a1 + 616) = 0;

  uint64_t v3 = *(void **)(a1 + 688);
  *(void *)(a1 + 688) = 0;
}

void Espresso::V9Engine::v9_inner_product_kernel::clear_weights(Espresso::V9Engine::v9_inner_product_kernel *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 69);
  *((_OWORD *)this + 34) = 0u;
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 70);
  *((void *)this + 70) = 0;
}

void Espresso::V9Engine::v9_inner_product_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  uint64_t v7 = *(void *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v65, *a2);
  id v8 = v65[0];
  if (*(unsigned char *)(v7 + 64))
  {
    id v9 = (void *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0) {
      id v9 = (void *)*v9;
    }
    uint64_t v10 = [NSString stringWithUTF8String:v9];
    [v8 setLabel:v10];
  }
  uint64_t v11 = **a3;
  if (v11) {
  else
  }
    int v12 = 0;
  uint64_t v13 = **a4;
  if (v13) {
  else
  }
    id v14 = 0;
  if (!*(void *)(a1 + 560))
  {
    uint64_t v15 = *(void *)(a1 + 544);
    uint64_t v16 = *(int *)(v15 + 8);
    uint64_t v17 = *(int *)(v15 + 12);
    id v18 = *(id *)(v7 + 144);
    uint64_t v19 = [v18 newBufferWithLength:2 * v17 * (((v16 - 1) & 0x7FFFFFFFFFFFFFF8) + 8) options:0];
    uint64_t v20 = *(void **)(a1 + 560);
    *(void *)(a1 + 560) = v19;

    uint64_t v21 = [*(id *)(a1 + 560) contents];
    if (v17)
    {
      uint64_t v22 = 0;
      id v23 = *(int **)(*(void *)(a1 + 544) + 16);
      do
      {
        if (v16)
        {
          uint64_t v24 = v23;
          uint64_t v25 = (_WORD *)v21;
          uint64_t v26 = v16;
          do
          {
            int v27 = *v24++;
            _S0 = v27;
            __asm { FCVT            H0, S0 }
            *v25++ = _S0;
            --v26;
          }
          while (v26);
        }
        ++v22;
        v21 += ((2 * (v16 - 1)) & 0xFFFFFFFFFFFFFFF0) + 16;
        v23 += v16;
      }
      while (v22 != v17);
    }
  }
  uint64_t v33 = *(void *)(a1 + 688);
  int v34 = v14[61];
  if (!v33)
  {
    *(_DWORD *)(a1 + 672) = v34;
    int v36 = v12[61];
    *(_DWORD *)(a1 + 676) = v36;
    *(_DWORD *)(a1 + 584) = v14[5];
    *(_DWORD *)(a1 + 588) = v12[4];
    int v37 = v14[4];
    if (v37 >= 0) {
      int v38 = v14[4];
    }
    else {
      int v38 = v37 + 7;
    }
    int v39 = v38 >> 3;
    *(_DWORD *)(a1 + 604) = v38 >> 3;
    __int16 v40 = v37 - (v38 & 0xFFF8);
    *(_WORD *)(a1 + 608) = v40;
    int v41 = *(_DWORD *)(*(void *)(a1 + 544) + 8);
    int v43 = v41 - 1;
    BOOL v42 = v41 < 1;
    int v44 = v41 + 6;
    if (!v42) {
      int v44 = v43;
    }
    *(_DWORD *)(a1 + 592) = (v44 >> 3) + 1;
    if (v40 == 4)
    {
      if (((v34 | v36) & 7) == 0)
      {
        *(_DWORD *)(a1 + 596) = v34 / 8;
        *(_DWORD *)(a1 + 600) = v36 / 2;
        __int32 v45 = *(void **)(a1 + 680);
        int v46 = @"v9_inner_product_kernel_width_aligned_8";
        goto LABEL_37;
      }
    }
    else if (v40)
    {
      if (((v34 | v36) & 7) == 0)
      {
        *(_DWORD *)(a1 + 604) = v39 - 1;
        *(_DWORD *)(a1 + 596) = v34 / 8;
        *(_DWORD *)(a1 + 600) = v36 / 2;
        __int32 v45 = *(void **)(a1 + 680);
        int v46 = @"v9_inner_product_kernel_generic";
        goto LABEL_37;
      }
    }
    else if (!(v34 & 0xF | v36 & 7))
    {
      *(_DWORD *)(a1 + 596) = v34 / 16;
      *(_DWORD *)(a1 + 600) = v36 / 2;
      __int32 v45 = *(void **)(a1 + 680);
      int v46 = @"v9_inner_product_kernel_width_aligned_16";
LABEL_37:
      *(void *)(a1 + 680) = v46;

      if (*(_DWORD *)(a1 + 316))
      {
        unsigned __int16 v47 = 0;
      }
      else if (*(_DWORD *)(a1 + 320))
      {
        unsigned __int16 v47 = 1;
      }
      else
      {
        unsigned __int16 v47 = -1;
      }
      id v48 = objc_opt_new();
      [v48 appendString:*(void *)(a1 + 680)];
      int v49 = (MTLFunctionConstantValues *)objc_opt_new();
      unsigned __int16 v66 = v47;
      objc_msgSend(v48, "appendFormat:", @"%d:%d_", 0, v47);
      [(MTLFunctionConstantValues *)v49 setConstantValue:&v66 type:41 atIndex:0];
      uint64_t v50 = *(unsigned int *)(a1 + 312);
      unsigned __int16 v66 = *(_DWORD *)(a1 + 312);
      objc_msgSend(v48, "appendFormat:", @"%d:%d_", 1, v50);
      [(MTLFunctionConstantValues *)v49 setConstantValue:&v66 type:41 atIndex:1];
      uint64_t v51 = *(unsigned int *)(a1 + 348);
      unsigned __int16 v66 = *(_DWORD *)(a1 + 348);
      objc_msgSend(v48, "appendFormat:", @"%d:%d_", 2, v51);
      [(MTLFunctionConstantValues *)v49 setConstantValue:&v66 type:41 atIndex:2];
      id v52 = *(id *)(v7 + 144);
      uint64_t v53 = [v52 newBufferWithBytes:a1 + 584 length:28 options:0];
      int v54 = *(void **)(a1 + 616);
      *(void *)(a1 + 616) = v53;

      uint64_t v55 = Espresso::context_metal::kernel_for_function((Espresso::context_metal *)v7, *(NSString **)(a1 + 680), (NSString *)v48, v49);
      uint64_t v56 = *(void **)(a1 + 688);
      *(void *)(a1 + 688) = v55;

      LODWORD(v57) = *(_DWORD *)(a1 + 584);
      if (v57 >= 8) {
        uint64_t v57 = 8;
      }
      else {
        uint64_t v57 = v57;
      }
      *(void *)(a1 + 632) = v57;
      uint64_t v58 = [*(id *)(a1 + 688) threadExecutionWidth];
      unint64_t v59 = *(void *)(a1 + 632);
      unint64_t v60 = (v58 - 1) / v59 + 1;
      *(void *)(a1 + 624) = v60;
      *(void *)(a1 + 648) = ((unint64_t)*(unsigned int *)(a1 + 588) - 1) / v60 + 1;
      *(void *)(a1 + 656) = ((unint64_t)*(unsigned int *)(a1 + 584) - 1) / v59 + 1;

      uint64_t v33 = *(void *)(a1 + 688);
      goto LABEL_46;
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid alignment in inner product.");
LABEL_23:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v34 != *(_DWORD *)(a1 + 672) || v12[61] != *(_DWORD *)(a1 + 676))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Stride changed between invokations of inner product.");
    goto LABEL_23;
  }
LABEL_46:
  [v8 setComputePipelineState:v33];
  [v8 setBuffer:*(void *)(a1 + 560) offset:0 atIndex:0];
  [v8 setBuffer:*((void *)v14 + 20) offset:0 atIndex:1];
  [v8 setBuffer:*(void *)(a1 + 576) offset:0 atIndex:2];
  [v8 setBuffer:*((void *)v12 + 20) offset:0 atIndex:3];
  [v8 setBuffer:*(void *)(a1 + 616) offset:0 atIndex:4];
  uint64_t v64 = *(void *)(a1 + 664);
  long long v63 = *(_OWORD *)(a1 + 648);
  long long v61 = *(_OWORD *)(a1 + 624);
  uint64_t v62 = *(void *)(a1 + 640);
  [v8 dispatchThreadgroups:&v63 threadsPerThreadgroup:&v61];

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v65);
}

void sub_19289599C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  __cxa_free_exception(v19);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(&a18);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_inner_product_kernel::~v9_inner_product_kernel(id *this)
{
  uint64_t v2 = (std::__shared_weak_count *)this[69];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel((Espresso::generic_inner_product_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  uint64_t v2 = (std::__shared_weak_count *)this[69];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel((Espresso::generic_inner_product_kernel *)this);
}

uint64_t Espresso::V9Engine::v9_softmax_kernel::force_high_precision_output_f32(Espresso::V9Engine::v9_softmax_kernel *this)
{
  return 0;
}

void Espresso::V9Engine::v9_softmax_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  uint64_t v7 = *(void *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v36, *a2);
  id v8 = v36[0];
  if (*(unsigned char *)(v7 + 64))
  {
    id v9 = (void *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0) {
      id v9 = (void *)*v9;
    }
    uint64_t v10 = [NSString stringWithUTF8String:v9];
    [v8 setLabel:v10];
  }
  uint64_t v11 = **a3;
  if (v11) {
  else
  }
    int v12 = 0;
  uint64_t v13 = **a4;
  if (v13) {
  else
  }
    id v14 = 0;
  uint64_t v15 = [*(id *)(v7 + 160) kernelForFunction:"v9_softmax_4" cacheString:0 withConstants:0];
  [v8 setComputePipelineState:v15];
  int v16 = v12[4];
  int v17 = v16 - 1;
  if (v16 < 1) {
    int v17 = v16 + 2;
  }
  uint64_t v35 = 1065353216;
  uint64_t v18 = *((void *)v12 + 1);
  int v19 = v12[5];
  unsigned int v26 = (v17 >> 2) + 1;
  int v27 = v19;
  int v34 = v16;
  int v20 = v14[63];
  int v28 = v14[62] / 4;
  int v29 = v20 / 4;
  int v21 = v14[65];
  int v22 = v12[62];
  int v23 = v12[63];
  uint64_t v25 = v18;
  int v30 = v21 / 4;
  int v31 = v22 / 4;
  int v24 = v12[65];
  int v32 = v23 / 4;
  int v33 = v24 / 4;
  [v8 setBuffer:*((void *)v14 + 20) offset:0 atIndex:0];
  [v8 setBuffer:*((void *)v12 + 20) offset:0 atIndex:1];
  [v8 setBytes:&v25 length:52 atIndex:2];
  dispatch_auto_threadgroupsize(v8, v12[2], v12[3], v26, v12[6] * v12[5]);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v36);
}

void sub_192895D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)va);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_softmax_kernel::~v9_softmax_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::V9Engine::v9_flatten_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  uint64_t v7 = *(void *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v54, *a2);
  id v8 = v54[0];
  if (*(unsigned char *)(v7 + 64))
  {
    id v9 = (void *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0) {
      id v9 = (void *)*v9;
    }
    uint64_t v10 = [NSString stringWithUTF8String:v9];
    [v8 setLabel:v10];
  }
  uint64_t v11 = **a3;
  if (v11) {
  else
  }
    int v12 = 0;
  uint64_t v13 = **a4;
  if (v13) {
  else
  }
    id v14 = 0;
  if (*(_DWORD *)(a1 + 280)) {
    uint64_t v15 = "v9_flatten_nhwc";
  }
  else {
    uint64_t v15 = "v9_flatten_nchw";
  }
  int v16 = [*(id *)(v7 + 160) kernelForFunction:v15 cacheString:0 withConstants:0];
  [v8 setComputePipelineState:v16];
  int v17 = v14[2];
  int v18 = v14[3];
  v42[0] = v17;
  v42[1] = v18;
  uint64_t v43 = *((void *)v14 + 2);
  int v19 = v43 + 2;
  if ((int)v43 >= 1) {
    int v19 = v43 - 1;
  }
  int v44 = (v19 >> 2) + 1;
  int v45 = v18 * v17;
  int v20 = v12[4];
  int v21 = v20 - 1;
  if (v20 < 1) {
    int v21 = v20 + 2;
  }
  int v52 = (v21 >> 2) + 1;
  int v53 = v12[6] * v20 * v12[5] * v12[2] * v12[3];
  int v22 = v14[63];
  int v46 = v14[62] / 4;
  int v47 = v22 / 4;
  int v23 = v12[62];
  int v24 = v12[63];
  int v48 = v14[65] / 4;
  int v49 = v23 / 4;
  int v25 = v12[65];
  int v50 = v24 / 4;
  int v51 = v25 / 4;
  [v8 setBuffer:*((void *)v14 + 20) offset:0 atIndex:0];
  [v8 setBuffer:*((void *)v12 + 20) offset:0 atIndex:1];
  [v8 setBytes:v42 length:56 atIndex:2];
  if (*(_DWORD *)(a1 + 280))
  {
    int v26 = v53 + 62;
    if (v53 >= 1) {
      int v26 = v53 - 1;
    }
    uint64_t v27 = (v26 >> 6) + 1;
    uint64_t v28 = 1;
    uint64_t v35 = v27;
    int64x2_t v36 = vdupq_n_s64(1uLL);
    uint64_t v34 = 64;
    int v29 = &v35;
    int v30 = &v34;
LABEL_30:
    v30[1] = v28;
    v30[2] = 1;
    objc_msgSend(v8, "dispatchThreadgroups:threadsPerThreadgroup:", v29);
    goto LABEL_31;
  }
  if (HIDWORD(v43) == 1)
  {
    int v31 = v52 + 62;
    if (v52 >= 1) {
      int v31 = v52 - 1;
    }
    uint64_t v32 = (v31 >> 6) + 1;
    uint64_t v28 = 1;
    uint64_t v40 = v32;
    int64x2_t v41 = vdupq_n_s64(1uLL);
    uint64_t v39 = 64;
    int v29 = &v40;
    int v30 = &v39;
    goto LABEL_30;
  }
  if (SHIDWORD(v43) >= 2)
  {
    int v33 = v52 + 30;
    if (v52 >= 1) {
      int v33 = v52 - 1;
    }
    v38[0] = (v33 >> 5) + 1;
    v38[1] = ((HIDWORD(v43) - 1) >> 1) + 1;
    v38[2] = 1;
    uint64_t v37 = 32;
    int v29 = v38;
    int v30 = &v37;
    uint64_t v28 = 2;
    goto LABEL_30;
  }
LABEL_31:

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v54);
}

void sub_192896204(_Unwind_Exception *a1)
{
  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v3 - 80));
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_flatten_kernel::~v9_flatten_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::V9Engine::v9_activation_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  uint64_t v7 = *(void *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v48, *a2);
  id v8 = v48[0];
  if (*(unsigned char *)(v7 + 64))
  {
    id v9 = (void *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0) {
      id v9 = (void *)*v9;
    }
    uint64_t v10 = [NSString stringWithUTF8String:v9];
    [v8 setLabel:v10];
  }
  uint64_t v11 = **a3;
  if (v11) {
  else
  }
    int v12 = 0;
  uint64_t v13 = **a4;
  if (v13) {
  else
  }
    id v14 = 0;
  id v15 = v14[20];
  id v16 = *(id *)&v12[20];
  uint64_t v17 = *(void *)(a1 + 392);
  if (!v17)
  {
    unsigned int v18 = *(_DWORD *)(a1 + 304) + 1;
    if (v18 >= 4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "not implemented");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v19 = [*(id *)(v7 + 160) kernelForFunction:off_1E5747410[v18] cacheString:0 withConstants:0];
    int v20 = *(void **)(a1 + 392);
    *(void *)(a1 + 392) = v19;

    uint64_t v17 = *(void *)(a1 + 392);
  }
  [v8 setComputePipelineState:v17];
  uint64_t v46 = 0;
  uint64_t v45 = 0;
  int v21 = v12[2].i32[0];
  int v23 = v21 - 1;
  BOOL v22 = v21 < 1;
  int v24 = v21 + 2;
  if (!v22) {
    int v24 = v23;
  }
  int v25 = (v24 >> 2) + 1;
  int32x2_t v26 = v12[1];
  int v27 = v12[3].i32[0] * v12[2].i32[1];
  int v40 = v25;
  int v41 = v27;
  int v28 = *((_DWORD *)v14 + 62);
  int v29 = *((_DWORD *)v14 + 63);
  int32x2_t v39 = v26;
  int v42 = v28 / 4;
  int v43 = v29 / 4;
  int v44 = *((_DWORD *)v14 + 65) / 4;
  uint64_t v47 = *(void *)(a1 + 308);
  [v8 setBuffer:v15 offset:0 atIndex:0];
  [v8 setBuffer:v16 offset:0 atIndex:1];
  [v8 setBytes:&v39 length:52 atIndex:2];
  int v30 = v12[2].i32[1] * v25 * v12[3].i32[0];
  if (v30 >= 1) {
    --v30;
  }
  int32x2_t v31 = vadd_s32(v12[1], (int32x2_t)-1);
  int32x2_t v32 = vsra_n_s32((int32x2_t)0x100000001, (int32x2_t)vsra_n_u32((uint32x2_t)v31, (uint32x2_t)vcltz_s32(v31), 0x1EuLL), 2uLL);
  *(void *)&long long v33 = v32.i32[0];
  *((void *)&v33 + 1) = v32.i32[1];
  long long v37 = v33;
  uint64_t v38 = (v30 >> 1) + 1;
  int64x2_t v35 = vdupq_n_s64(4uLL);
  uint64_t v36 = 2;
  [v8 dispatchThreadgroups:&v37 threadsPerThreadgroup:&v35];

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v48);
}

void sub_1928965FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v4);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v5 - 80));
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_activation_kernel::~v9_activation_kernel(id *this)
{
  Espresso::generic_activation_kernel::~generic_activation_kernel((Espresso::generic_activation_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::generic_activation_kernel::~generic_activation_kernel((Espresso::generic_activation_kernel *)this);
}

void Espresso::V9Engine::v9_general_padding_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  uint64_t v7 = *(void *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v55, *a2);
  id v8 = v55[0];
  if (*(unsigned char *)(v7 + 64))
  {
    id v9 = (void *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0) {
      id v9 = (void *)*v9;
    }
    uint64_t v10 = [NSString stringWithUTF8String:v9];
    [v8 setLabel:v10];
  }
  uint64_t v11 = **a3;
  if (v11) {
  else
  }
    int v12 = 0;
  uint64_t v13 = **a4;
  if (v13) {
  else
  }
    id v14 = 0;
  id v15 = v14[20];
  id v16 = *(id *)&v12[20];
  uint64_t v17 = v16;
  int v18 = v12[2].i32[0] & 7;
  if (v18) {
    int v19 = 4;
  }
  else {
    int v19 = 8;
  }
  uint64_t v20 = *(void *)(a1 + 360);
  if (!v20)
  {
    id v38 = v16;
    id v39 = v15;
    int v21 = objc_opt_new();
    BOOL v22 = objc_opt_new();
    v44.i16[0] = *(_WORD *)(a1 + 282);
    objc_msgSend(v22, "appendFormat:", @"%d:%d_", 0, v44.i16[0]);
    [v21 setConstantValue:&v44 type:37 atIndex:0];
    v44.i16[0] = *(_WORD *)(a1 + 288);
    objc_msgSend(v22, "appendFormat:", @"%d:%d_", 1, v44.i16[0]);
    [v21 setConstantValue:&v44 type:37 atIndex:1];
    v44.i16[0] = *(_WORD *)(a1 + 292);
    objc_msgSend(v22, "appendFormat:", @"%d:%d_", 2, v44.i16[0]);
    [v21 setConstantValue:&v44 type:37 atIndex:2];
    id v23 = v22;
    uint64_t v24 = [v23 UTF8String];
    if (v18) {
      int v25 = "v9_general_padding_4";
    }
    else {
      int v25 = "v9_general_padding_8";
    }
    uint64_t v26 = [*(id *)(v7 + 160) kernelForFunction:v25 cacheString:v24 withConstants:v21];
    int v27 = *(void **)(a1 + 360);
    *(void *)(a1 + 360) = v26;

    uint64_t v20 = *(void *)(a1 + 360);
    uint64_t v17 = v38;
    id v15 = v39;
  }
  [v8 setComputePipelineState:v20];
  __int32 v28 = v12[2].i32[1];
  int v29 = (v12[2].i32[0] - 1) / v19 + 1;
  int32x2_t v44 = v12[1];
  int v45 = v29;
  __int32 v46 = v28;
  id v47 = v14[1];
  int v30 = *((_DWORD *)v14 + 63) / v19;
  int v48 = *((_DWORD *)v14 + 62) / v19;
  int v49 = v30;
  __int32 v31 = v12[31].i32[1];
  int v32 = v12[31].i32[0] / v19;
  int v50 = *((_DWORD *)v14 + 65) / v19;
  int v51 = v32;
  int v33 = v12[32].i32[1] / v19;
  int v52 = v31 / v19;
  int v53 = v33;
  int v54 = *(_DWORD *)(a1 + 284);
  [v8 setBuffer:v15 offset:0 atIndex:0];
  [v8 setBuffer:v17 offset:0 atIndex:1];
  [v8 setBytes:&v44 length:52 atIndex:2];
  int v34 = v12[2].i32[1] * v29 * v12[3].i32[0];
  if (v34 >= 1) {
    --v34;
  }
  int32x2_t v35 = vadd_s32(v12[1], (int32x2_t)-1);
  int32x2_t v36 = vsra_n_s32((int32x2_t)0x100000001, (int32x2_t)vsra_n_u32((uint32x2_t)v35, (uint32x2_t)vcltz_s32(v35), 0x1EuLL), 2uLL);
  *(void *)&long long v37 = v36.i32[0];
  *((void *)&v37 + 1) = v36.i32[1];
  long long v42 = v37;
  uint64_t v43 = (v34 >> 1) + 1;
  int64x2_t v40 = vdupq_n_s64(4uLL);
  uint64_t v41 = 2;
  [v8 dispatchThreadgroups:&v42 threadsPerThreadgroup:&v40];

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v55);
}

void sub_192896AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v14 - 104));
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_general_padding_kernel::~v9_general_padding_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::V9Engine::v9_lrn_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  unsigned int v4 = *(_DWORD *)(a1 + 288);
  BOOL v5 = v4 > 7;
  int v6 = (1 << v4) & 0xA8;
  if (v5 || v6 == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "LRN with size!=(3,5,7) not implemented");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v11 = *(void *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v47, *a2);
  id v12 = v47[0];
  if (*(unsigned char *)(v11 + 64))
  {
    uint64_t v13 = (void *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0) {
      uint64_t v13 = (void *)*v13;
    }
    uint64_t v14 = [NSString stringWithUTF8String:v13];
    [v12 setLabel:v14];
  }
  id v15 = **a3;
  if (v15) {
  else
  }
    id v16 = 0;
  uint64_t v17 = **a4;
  if (v17) {
  else
  }
    int v18 = 0;
  uint64_t v19 = *(void *)(a1 + 312);
  if (!v19)
  {
    uint64_t v20 = objc_opt_new();
    int v21 = objc_opt_new();
    uint64_t v22 = *(unsigned int *)(a1 + 288);
    LOWORD(v35) = *(_DWORD *)(a1 + 288);
    objc_msgSend(v21, "appendFormat:", @"%d:%d_", 0, v22);
    [v20 setConstantValue:&v35 type:37 atIndex:0];
    id v23 = v21;
    uint64_t v24 = objc_msgSend(*(id *)(v11 + 160), "kernelForFunction:cacheString:withConstants:", "v9_lrn_anysize_4", objc_msgSend(v23, "UTF8String"), v20);
    int v25 = *(void **)(a1 + 312);
    *(void *)(a1 + 312) = v24;

    uint64_t v19 = *(void *)(a1 + 312);
  }
  [v12 setComputePipelineState:v19];
  int v26 = v16[4];
  int v27 = v26 - 1;
  if (v26 < 1) {
    int v27 = v26 + 2;
  }
  uint64_t v45 = *(void *)(a1 + 280);
  uint64_t v35 = *((void *)v16 + 1);
  int v28 = v16[5];
  int v36 = (v27 >> 2) + 1;
  int v37 = v28;
  int v29 = *(_DWORD *)(a1 + 288);
  int v44 = v26;
  int v46 = v29;
  int v30 = v18[63];
  int v38 = v18[62] / 4;
  int v39 = v30 / 4;
  int v31 = v16[62];
  int v32 = v16[63];
  int v40 = v18[65] / 4;
  int v41 = v31 / 4;
  int v33 = v16[65];
  int v42 = v32 / 4;
  int v43 = v33 / 4;
  [v12 setTexture:*((void *)v18 + 21) atIndex:0];
  [v12 setTexture:*((void *)v16 + 21) atIndex:1];
  [v12 setBytes:&v35 length:56 atIndex:0];
  dispatch_auto_threadgroupsize(v12, v36 * v16[2], v16[5] * v16[3] * v16[6], 1u, 1);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v47);
}

void sub_192896F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_lrn_kernel::~v9_lrn_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::V9Engine::v9_split_kernel::~v9_split_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::V9Engine::v9_crop_kernel::~v9_crop_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::V9Engine::v9_noise_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v33, *a2);
  id v6 = v33[0];
  if (*(unsigned char *)(v5 + 64))
  {
    uint64_t v7 = (void *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0) {
      uint64_t v7 = (void *)*v7;
    }
    id v8 = [NSString stringWithUTF8String:v7];
    [v6 setLabel:v8];
  }
  id v9 = **a3;
  if (v9) {
  else
  }
    uint64_t v10 = 0;
  id v11 = v10[21];
  uint64_t v12 = *(void *)(a1 + 384);
  if (!v12)
  {
    uint64_t v13 = [*(id *)(v5 + 160) kernelForFunction:"image2image_noise_f" cacheString:0 withConstants:0];
    uint64_t v14 = *(void **)(a1 + 384);
    *(void *)(a1 + 384) = v13;

    uint64_t v12 = *(void *)(a1 + 384);
  }
  [v6 setComputePipelineState:v12];
  long long v32 = *(_OWORD *)(a1 + 392);
  int v15 = *((_DWORD *)v10 + 4);
  int v17 = v15 - 1;
  BOOL v16 = v15 < 1;
  int v18 = v15 + 2;
  if (v16) {
    int v19 = v18;
  }
  else {
    int v19 = v17;
  }
  *(void *)&long long v32 = v10[1];
  [v6 setTexture:v11 atIndex:0];
  [v6 setBytes:&v32 length:16 atIndex:0];
  int v20 = *((_DWORD *)v10 + 2);
  int v21 = *((_DWORD *)v10 + 3);
  int v22 = v20 - 1;
  BOOL v16 = v20 < 1;
  int v23 = v20 + 6;
  if (!v16) {
    int v23 = v22;
  }
  uint64_t v24 = (v23 >> 3) + 1;
  int v25 = v21 - 1;
  BOOL v16 = v21 < 1;
  int v26 = v21 + 2;
  if (!v16) {
    int v26 = v25;
  }
  int v27 = *((_DWORD *)v10 + 5);
  uint64_t v28 = *((int *)v10 + 6);
  v31[0] = v24;
  v31[1] = (v26 >> 2) + 1;
  v31[2] = v27 * (uint64_t)((v19 >> 2) + 1) * v28;
  long long v29 = xmmword_192DCA4D0;
  uint64_t v30 = 1;
  [v6 dispatchThreadgroups:v31 threadsPerThreadgroup:&v29];

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v33);
}

void sub_192897300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)va);
  _Unwind_Resume(a1);
}

void Espresso::V9Engine::v9_noise_kernel::~v9_noise_kernel(id *this)
{
  Espresso::generic_load_constant_kernel::~generic_load_constant_kernel((Espresso::generic_load_constant_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::generic_load_constant_kernel::~generic_load_constant_kernel((Espresso::generic_load_constant_kernel *)this);
}

void sub_1928977B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192897938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_192897EEC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192897FA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_convolution_kernel>::conv_transposed_weights()
{
  return 0;
}

void Espresso::MPSEngine::mps_convolution_kernel::recreate_kernel(Espresso::MPSEngine::mps_convolution_kernel *this)
{
  uint64_t v2 = (const void *)*((void *)this + 1);
  if (!v2
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  unsigned int v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    id v27 = v3[18];
    nitro::nitro_function::nitro_function(v4);
  }
  else
  {
    id v27 = v3[18];
  }
  if (!*((_DWORD *)this + 84) && !*((_DWORD *)this + 104) && !*(void *)(*((void *)this + 73) + 224))
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v30, *((_DWORD *)this + 86), 1, 1, 1);
    uint64_t v5 = *((void *)this + 73);
    id v6 = *(std::__shared_weak_count **)(v5 + 232);
    *(_OWORD *)(v5 + 224) = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
    if (v6) {
      nitro::nitro_function::nitro_function(v6);
    }
  }
  if (objc_msgSend(*((id *)this + 73), "ready", v27))
  {
    uint64_t v7 = *((void *)this + 73);
    long long v8 = *((_OWORD *)this + 19);
    long long v9 = *((_OWORD *)this + 20);
    *(_OWORD *)(v7 + 40) = *((_OWORD *)this + 21);
    *(_OWORD *)(v7 + 24) = v9;
    *(_OWORD *)(v7 + 8) = v8;
    long long v10 = *((_OWORD *)this + 22);
    long long v11 = *((_OWORD *)this + 23);
    long long v12 = *((_OWORD *)this + 24);
    *(_OWORD *)(v7 + 104) = *((_OWORD *)this + 25);
    *(_OWORD *)(v7 + 88) = v12;
    *(_OWORD *)(v7 + 72) = v11;
    *(_OWORD *)(v7 + 56) = v10;
    long long v13 = *((_OWORD *)this + 26);
    long long v14 = *((_OWORD *)this + 27);
    long long v15 = *((_OWORD *)this + 28);
    *(void *)(v7 + 165) = *(void *)((char *)this + 461);
    *(_OWORD *)(v7 + 152) = v15;
    *(_OWORD *)(v7 + 136) = v14;
    *(_OWORD *)(v7 + 120) = v13;
    uint64_t v16 = [objc_alloc(MEMORY[0x1E4F353E8]) initWithDevice:v28 weights:*((void *)this + 73)];
    int v17 = (void *)*((void *)this + 74);
    *((void *)this + 74) = v16;

    if (objc_opt_respondsToSelector())
    {
      if (*(_DWORD *)(*((void *)this + 1) + 68)) {
        BOOL v18 = 1;
      }
      else {
        BOOL v18 = *((_DWORD *)this + 112) != 0;
      }
      [*((id *)this + 74) setAccumulatorPrecisionOption:!v18];
    }
    int v19 = (void *)*((void *)this + 74);
    if (!v19)
    {
      int v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v29, *(void *)(*((void *)this + 73) + 176) != 0);
      uint64_t v24 = std::string::insert(&v29, 0, "Error creating mps kernel: q=");
      long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v30.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v23, &v30);
      __cxa_throw(v23, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (*(unsigned char *)(*((void *)this + 1) + 64))
    {
      int v20 = (void *)((char *)this + 176);
      if (*((char *)this + 199) < 0) {
        int v20 = (void *)*v20;
      }
      int v21 = [NSString stringWithUTF8String:v20];
      [*((id *)this + 74) setLabel:v21];

      int v19 = (void *)*((void *)this + 74);
    }
    [v19 setEdgeMode:0];
    switch(*((_WORD *)this + 189))
    {
      case 0:
        [*((id *)this + 74) setEdgeMode:0];
        if (fabsf(*((float *)this + 95)) > 0.00001) {
          goto LABEL_31;
        }
        break;
      case 1:
        [*((id *)this + 74) setEdgeMode:1];
        break;
      case 2:
      case 3:
LABEL_31:
        int v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v26, "Not supported by MPS");
        __cxa_throw(v26, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      default:
        break;
    }
  }
  [*((id *)this + 74) setDestinationFeatureChannelOffset:*((unsigned __int16 *)this + 215)];
}

void sub_1928983B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_convolution_kernel>::set_quantization_ranges_blob(uint64_t a1, uint64_t a2)
{
  _ZNSt3__115allocate_sharedB8ne180100IN8Espresso4blobIDv2_fLi1EEENS_9allocatorIS4_EEJRiEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v13, *(_DWORD *)(a1 + 344));
  uint64_t v4 = *(void *)(a1 + 584);
  uint64_t v5 = v13;
  id v6 = *(std::__shared_weak_count **)(v4 + 248);
  *(_OWORD *)(v4 + 240) = v13;
  if (v6)
  {
    nitro::nitro_function::nitro_function(v6);
    uint64_t v7 = *(void *)(*(void *)(a1 + 584) + 240);
    if (v7) {
      goto LABEL_3;
    }
LABEL_10:
    Espresso::throw_exception_selector<Espresso::memory_error>("Error allocating memory");
  }
  uint64_t v7 = v5;
  if (!v5) {
    goto LABEL_10;
  }
LABEL_3:
  if (*(int *)(a1 + 344) >= 1)
  {
    uint64_t v8 = 0;
    long long v9 = *(_DWORD **)(v7 + 16);
    do
    {
      LODWORD(v10) = *(_DWORD *)(*(void *)(*(void *)a2 + 16) + 4 * v8);
      *long long v9 = v10;
      HIDWORD(v10) = *(_DWORD *)(*(void *)(*(void *)a2 + 16) + 4 * (v8 + *(int *)(a1 + 344)));
      *(void *)long long v9 = v10;
      v9 += 2;
      ++v8;
    }
    while (v8 < *(int *)(a1 + 344));
  }
  Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_convolution_kernel>::scale_weights_for_batch_norm(a1);
  long long v11 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 624);

  return v11(a1);
}

void _ZNSt3__115allocate_sharedB8ne180100IN8Espresso4blobIDv2_fLi1EEENS_9allocatorIS4_EEJRiEvEENS_10shared_ptrIT_EERKT0_DpOT1_(void *a1, int a2)
{
  uint64_t v4 = (char *)operator new(0x58uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1EE389798;
  *((void *)v4 + 3) = &unk_1EE36BDD0;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *((_DWORD *)v4 + 8) = a2;
  uint64_t v5 = (Espresso *)(8 * a2);
  id v6 = Espresso::kern_alloc_uninitialized(v5);
  bzero(v6, (size_t)v5);
  *((void *)v4 + 5) = v6;
  v4[48] = 1;
  *a1 = v4 + 24;
  a1[1] = v4;
}

void sub_19289861C(_Unwind_Exception *a1)
{
  shared_owners = (std::__shared_weak_count *)v1[3].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v1[2].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_convolution_kernel>::scale_weights_for_batch_norm(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 584) ready];
  if (result)
  {
    uint64_t v3 = *(void **)(a1 + 584);
    uint64_t v4 = v3[34];
    if (v4)
    {
      if (v3[24])
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 632))(a1);
        uint64_t v5 = *(void *)(a1 + 584);
        uint64_t v6 = *(void *)(v5 + 192);
        if (result)
        {
          int v7 = *(_DWORD *)(v6 + 16) * *(_DWORD *)(v6 + 12);
          int v8 = *(_DWORD *)(v6 + 20);
        }
        else
        {
          int v7 = *(_DWORD *)(v6 + 12) * *(_DWORD *)(v6 + 8);
          int v8 = *(_DWORD *)(v6 + 16);
        }
        int v15 = v7 * v8;
        uint64_t v16 = *(unsigned int *)(a1 + 344);
        if ((int)v16 >= 1)
        {
          uint64_t v17 = 0;
          uint64_t v18 = *(void *)(*(void *)(v5 + 272) + 16);
          int v19 = *(float **)(v6 + 24);
          do
          {
            int v20 = v19;
            uint64_t v21 = v15;
            if (v15 >= 1)
            {
              do
              {
                *int v20 = *(float *)(v18 + 4 * v17) * *v20;
                ++v20;
                --v21;
              }
              while (v21);
            }
            ++v17;
            v19 += v15;
          }
          while (v17 != v16);
        }
      }
      else
      {
        if (v3[26])
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "not implemented, BN should have been baked");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        uint64_t v9 = v3[30];
        if (v9 && *(int *)(a1 + 344) >= 1)
        {
          uint64_t v10 = 0;
          long long v11 = *(float32x2_t **)(v9 + 16);
          uint64_t v12 = *(void *)(v4 + 16);
          do
          {
            float32x2_t v13 = *v11;
            v14.f32[0] = *(float *)(v12 + 4 * v10) * COERCE_FLOAT(*v11);
            v11->i32[0] = v14.i32[0];
            v14.i32[1] = vmuls_lane_f32(*(float *)(v12 + 4 * v10), v13, 1);
            *v11++ = v14;
            ++v10;
          }
          while (v10 < *(int *)(a1 + 344));
        }
      }
    }
  }
  return result;
}

void sub_1928987D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void _ZN8Espresso4blobIDv2_fLi1EED0Ev(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36BDD0;
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t _ZN8Espresso4blobIDv2_fLi1EED1Ev(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36BDD0;
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  return a1;
}

uint64_t _ZNSt3__120__shared_ptr_emplaceIN8Espresso4blobIDv2_fLi1EEENS_9allocatorIS4_EEE16__on_zero_sharedEv(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void _ZNSt3__120__shared_ptr_emplaceIN8Espresso4blobIDv2_fLi1EEENS_9allocatorIS4_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389798;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void _ZNSt3__120__shared_ptr_emplaceIN8Espresso4blobIDv2_fLi1EEENS_9allocatorIS4_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389798;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_convolution_kernel>::set_quantization_lut_blob(void *a1, uint64_t a2)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v13, 256, 1, 1, 1);
  uint64_t v4 = a1[73];
  uint64_t v5 = v13;
  uint64_t v6 = *(std::__shared_weak_count **)(v4 + 264);
  *(_OWORD *)(v4 + 256) = v13;
  if (!v6)
  {
    uint64_t v7 = v5;
    if (v5) {
      goto LABEL_3;
    }
LABEL_9:
    Espresso::throw_exception_selector<Espresso::memory_error>("Error allocating memory");
  }
  nitro::nitro_function::nitro_function(v6);
  uint64_t v7 = *(void *)(a1[73] + 256);
  if (!v7) {
    goto LABEL_9;
  }
LABEL_3:
  uint64_t v8 = 0;
  uint64_t v9 = *(void *)(*(void *)a2 + 16);
  uint64_t v10 = *(void *)(v7 + 16);
  do
  {
    *(_DWORD *)(v10 + v8) = *(_DWORD *)(v9 + v8);
    v8 += 4;
  }
  while (v8 != 1024);
  long long v11 = *(uint64_t (**)(void *))(*a1 + 624);

  return v11(a1);
}

uint64_t Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_convolution_kernel>::set_quantized_weights_blob(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 584);
  uint64_t v5 = *(std::__shared_weak_count **)(v4 + 200);
  *(void *)(v4 + 192) = 0;
  *(void *)(v4 + 200) = 0;
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v6 = *a2;
  uint64_t v7 = (std::__shared_weak_count *)a2[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v64 = v7;
  _X25 = *(char **)(v6 + 24);
  __asm { PRFM            #1, [X25] }
  int v13 = *(_DWORD *)(v6 + 16);
  uint64_t v14 = *(unsigned int *)(v6 + 20);
  uint64_t v16 = *(unsigned int *)(v6 + 8);
  int v15 = *(_DWORD *)(v6 + 12);
  if (v14) {
    _ZF = v13 == 0;
  }
  else {
    _ZF = 1;
  }
  if (_ZF || v15 == 0 || v16 == 0)
  {
    Espresso::blob<unsigned char,4>::copy(&v65, v6);
  }
  else
  {
    uint64_t v20 = v13;
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,4>,std::allocator<Espresso::blob<unsigned char,4>>,int &,int &,int &,int &,Espresso::blob<unsigned char,4>::UnitializedBlobType,void>(&v65, v13, v15, v16, v14);
    uint64_t v21 = *(unsigned char **)(v65 + 24);
    char v22 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 632))(a1);
    if (v22)
    {
      int v23 = *(_DWORD *)(a1 + 420);
      if (v23 <= 1)
      {
        if ((int)v20 >= 1)
        {
          int v49 = 0;
          int v50 = 0;
          int v51 = v14 * (v15 * v16 - 1);
          do
          {
            if (v15 >= 1)
            {
              int v52 = 0;
              int v53 = v49;
              int v54 = v51;
              do
              {
                if ((int)v16 >= 1)
                {
                  uint64_t v55 = 0;
                  int v56 = v54;
                  do
                  {
                    if ((int)v14 >= 1)
                    {
                      uint64_t v57 = &v21[v56];
                      int v58 = v53;
                      uint64_t v59 = v14;
                      do
                      {
                        *v57++ = _X25[v55 + v58];
                        v58 += v15 * v16 * v20;
                        --v59;
                      }
                      while (v59);
                    }
                    ++v55;
                    v56 -= v14;
                  }
                  while (v55 != v16);
                }
                ++v52;
                v54 -= v14 * v16;
                v53 += v16;
              }
              while (v52 != v15);
            }
            ++v50;
            v51 += v15 * v16 * v14;
            v49 += v15 * v16;
          }
          while (v50 != v20);
        }
      }
      else
      {
        int v24 = *(_DWORD *)(a1 + 344);
        if (v24 >= 1)
        {
          int v25 = 0;
          uint64_t v26 = *(unsigned int *)(a1 + 348);
          int v27 = *(_DWORD *)(a1 + 352);
          int v28 = *(_DWORD *)(a1 + 356);
          int v29 = (int)v26 / v23;
          int v30 = v24 / v23;
          int v31 = -((int)v26 / v23);
          int v32 = -1;
          int v33 = v28 * v27 * v24 / v23;
          do
          {
            if (v15 >= 1)
            {
              int v34 = 0;
              int v35 = 0;
              int v36 = v32;
              do
              {
                if ((int)v16 >= 1)
                {
                  int v37 = 0;
                  int v38 = -1;
                  int v39 = v34;
                  do
                  {
                    if ((int)v26 >= 1)
                    {
                      uint64_t v40 = 0;
                      int v41 = v39 + v28 * v27 * (v25 % v30);
                      do
                      {
                        if ((int)v40 / v29 == v25 / v30) {
                          v21[v31 * (v25 / v30)
                        }
                            + (int)v40
                            + v29 * (v38 + *(_DWORD *)(a1 + 352) + v27 * (v36 + *(_DWORD *)(a1 + 356)))] = _X25[v41];
                        ++v40;
                        v41 += v33;
                      }
                      while (v26 != v40);
                    }
                    ++v37;
                    ++v39;
                    --v38;
                  }
                  while (v37 != v16);
                }
                ++v35;
                v34 += v27;
                --v36;
              }
              while (v35 != v15);
            }
            ++v25;
            v32 += v28;
          }
          while (v25 != v24);
        }
      }
    }
    else
    {
      LODWORD(v42) = v16 * v15;
      if ((int)v16 * v15 <= 1) {
        uint64_t v42 = 1;
      }
      else {
        uint64_t v42 = v42;
      }
      if ((int)v20 <= 1) {
        uint64_t v43 = 1;
      }
      else {
        uint64_t v43 = v20;
      }
      do
      {
        uint64_t v44 = 0;
        uint64_t v45 = v21;
        do
        {
          int v46 = v45;
          uint64_t v47 = v42;
          do
          {
            char v48 = *_X25++;
            *int v46 = v48;
            v46 += v20;
            --v47;
          }
          while (v47);
          ++v44;
          ++v45;
        }
        while (v44 != v43);
        v21 += (int)v16 * v15 * (int)v20;
        LODWORD(v14) = v14 - 1;
      }
      while (v14);
    }
  }
  uint64_t v60 = *(void *)(a1 + 584);
  long long v61 = *(std::__shared_weak_count **)(v60 + 184);
  *(_OWORD *)(v60 + 176) = v65;
  if (v61) {
    nitro::nitro_function::nitro_function(v61);
  }
  if (v64) {
    nitro::nitro_function::nitro_function(v64);
  }
  *(_DWORD *)(*(void *)(a1 + 584) + 288) = 8;
  Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_convolution_kernel>::scale_weights_for_batch_norm(a1);
  uint64_t v62 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 624);

  return v62(a1);
}

void sub_192898E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void *Espresso::blob<unsigned char,4>::copy(void *a1, uint64_t a2)
{
  uint64_t v4 = a2 + 8;
  uint64_t v5 = operator new(0x60uLL);
  uint64_t v6 = v5;
  uint64_t v7 = 0;
  v5[1] = 0;
  v5[2] = 0;
  void *v5 = &unk_1EE389B18;
  uint64_t v8 = (char *)(v5 + 3);
  v5[3] = &unk_1EE36BFD0;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  size_t v9 = 1;
  do
  {
    uint64_t v10 = *(int *)(v4 + v7);
    *(_DWORD *)((char *)v5 + v7 + 32) = v10;
    v9 *= v10;
    v7 += 4;
  }
  while (v7 != 16);
  long long v11 = Espresso::kern_alloc_uninitialized((Espresso *)v9);
  bzero(v11, v9);
  uint64_t v12 = 0;
  v6[6] = v11;
  *((unsigned char *)v6 + 56) = 1;
  *a1 = v8;
  a1[1] = v6;
  int v13 = *(const void **)(a2 + 24);
  size_t v14 = *(int *)(a2 + 8);
  do
  {
    v14 *= *(int *)(a2 + 12 + v12);
    v12 += 4;
  }
  while (v12 != 12);

  return memcpy(v11, v13, v14);
}

void sub_192898F40(_Unwind_Exception *a1)
{
  shared_weak_owners = (std::__shared_weak_count *)v1[3].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  uint64_t v4 = (std::__shared_weak_count *)v1[3].__vftable;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,4>,std::allocator<Espresso::blob<unsigned char,4>>,int &,int &,int &,int &,Espresso::blob<unsigned char,4>::UnitializedBlobType,void>(void *a1, int a2, int a3, int a4, int a5)
{
  uint64_t v10 = operator new(0x60uLL);
  v10[1] = 0;
  v10[2] = 0;
  void *v10 = &unk_1EE389B18;
  v10[3] = &unk_1EE36BFD0;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  *((_DWORD *)v10 + 10) = a4;
  *((_DWORD *)v10 + 11) = a5;
  uint64_t result = Espresso::kern_alloc_uninitialized((Espresso *)(a3 * (uint64_t)a2 * a4 * a5));
  v10[6] = result;
  *((unsigned char *)v10 + 56) = 1;
  *a1 = v10 + 3;
  a1[1] = v10;
  return result;
}

void sub_19289903C(_Unwind_Exception *a1)
{
  shared_weak_owners = (std::__shared_weak_count *)v1[3].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  uint64_t v4 = (std::__shared_weak_count *)v1[3].__vftable;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void Espresso::blob<unsigned char,4>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36BFD0;
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v3 = *(void **)(a1 + 24);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 24), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 64);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::blob<unsigned char,4>::~blob(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE36BFD0;
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v3 = *(void **)(a1 + 24);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 24), a2);
      free(v3);
    }
  }
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 64);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<unsigned char,4>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned char,4>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389B18;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned char,4>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389B18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_convolution_kernel>::set_f16_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 584);
  uint64_t v5 = *(std::__shared_weak_count **)(v4 + 184);
  *(void *)(v4 + 176) = 0;
  *(void *)(v4 + 184) = 0;
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v6 = *a2;
  uint64_t v7 = (std::__shared_weak_count *)a2[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  _X25 = *(__int16 **)(v6 + 24);
  __asm { PRFM            #1, [X25] }
  int v13 = *(_DWORD *)(v6 + 16);
  uint64_t v14 = *(unsigned int *)(v6 + 20);
  uint64_t v16 = *(unsigned int *)(v6 + 8);
  int v15 = *(_DWORD *)(v6 + 12);
  if (v14) {
    _ZF = v13 == 0;
  }
  else {
    _ZF = 1;
  }
  if (_ZF || v15 == 0 || v16 == 0)
  {
    Espresso::blob<unsigned short,4>::copy(&v66, v6);
  }
  else
  {
    uint64_t v20 = v13;
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int &,int &,int &,int &,Espresso::blob<unsigned short,4>::UnitializedBlobType,void>(&v66, v13, v15, v16, v14);
    uint64_t v21 = *(_WORD **)(v66 + 24);
    char v22 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 632))(a1);
    if (v22)
    {
      int v23 = *(_DWORD *)(a1 + 420);
      if (v23 <= 1)
      {
        if ((int)v20 >= 1)
        {
          int v51 = 0;
          int v52 = 0;
          int v53 = v14 * (v15 * v16 - 1);
          do
          {
            if (v15 >= 1)
            {
              int v54 = 0;
              int v55 = v51;
              int v56 = v53;
              do
              {
                if ((int)v16 >= 1)
                {
                  uint64_t v57 = 0;
                  int v58 = v56;
                  do
                  {
                    if ((int)v14 >= 1)
                    {
                      uint64_t v59 = &v21[v58];
                      int v60 = v55;
                      uint64_t v61 = v14;
                      do
                      {
                        *v59++ = _X25[v57 + v60];
                        v60 += v15 * v16 * v20;
                        --v61;
                      }
                      while (v61);
                    }
                    ++v57;
                    v58 -= v14;
                  }
                  while (v57 != v16);
                }
                ++v54;
                v56 -= v14 * v16;
                v55 += v16;
              }
              while (v54 != v15);
            }
            ++v52;
            v53 += v15 * v16 * v14;
            v51 += v15 * v16;
          }
          while (v52 != v20);
        }
      }
      else
      {
        int v24 = *(_DWORD *)(a1 + 344);
        if (v24 >= 1)
        {
          int v25 = 0;
          uint64_t v26 = *(unsigned int *)(a1 + 348);
          int v27 = *(_DWORD *)(a1 + 352);
          int v28 = *(_DWORD *)(a1 + 356);
          int v29 = v28 * v27;
          int v30 = (int)v26 / v23;
          int v31 = v24 / v23;
          int v32 = (int)v26 / v23 * (v28 * v27 - 1);
          int v33 = (int)v26 / v23 * v27;
          int v34 = v33 * v28;
          int v35 = v29 * v24 / v23;
          do
          {
            if (v15 >= 1)
            {
              int v36 = 0;
              int v37 = 0;
              int v38 = v32;
              do
              {
                if ((int)v16 >= 1)
                {
                  int v39 = 0;
                  int v40 = v38;
                  int v41 = v36;
                  do
                  {
                    if ((int)v26 >= 1)
                    {
                      uint64_t v42 = 0;
                      int v43 = v41 + v29 * (v25 % v31);
                      do
                      {
                        if ((int)v42 / v30 == v25 / v31) {
                          v21[v40 - v25 / v31 * v30 + (int)v42] = _X25[v43];
                        }
                        ++v42;
                        v43 += v35;
                      }
                      while (v26 != v42);
                    }
                    ++v39;
                    ++v41;
                    v40 -= v30;
                  }
                  while (v39 != v16);
                }
                ++v37;
                v36 += v27;
                v38 -= v33;
              }
              while (v37 != v15);
            }
            ++v25;
            v32 += v34;
          }
          while (v25 != v24);
        }
      }
    }
    else
    {
      LODWORD(v44) = v16 * v15;
      if ((int)v16 * v15 <= 1) {
        uint64_t v44 = 1;
      }
      else {
        uint64_t v44 = v44;
      }
      if ((int)v20 <= 1) {
        uint64_t v45 = 1;
      }
      else {
        uint64_t v45 = v20;
      }
      do
      {
        uint64_t v46 = 0;
        uint64_t v47 = v21;
        do
        {
          char v48 = v47;
          uint64_t v49 = v44;
          do
          {
            __int16 v50 = *_X25++;
            _WORD *v48 = v50;
            v48 += v20;
            --v49;
          }
          while (v49);
          ++v46;
          ++v47;
        }
        while (v46 != v45);
        v21 += (int)v16 * v15 * (int)v20;
        LODWORD(v14) = v14 - 1;
      }
      while (v14);
    }
  }
  uint64_t v62 = *(void *)(a1 + 584);
  long long v63 = *(std::__shared_weak_count **)(v62 + 216);
  *(_OWORD *)(v62 + 208) = v66;
  if (v63) {
    nitro::nitro_function::nitro_function(v63);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  *(_DWORD *)(*(void *)(a1 + 584) + 288) = 268435472;
  Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_convolution_kernel>::scale_weights_for_batch_norm(a1);
  uint64_t v64 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 624);

  return v64(a1);
}

void sub_19289959C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int &,int &,int &,int &,Espresso::blob<unsigned short,4>::UnitializedBlobType,void>(void *a1, int a2, int a3, int a4, int a5)
{
  uint64_t v10 = operator new(0x60uLL);
  v10[1] = 0;
  v10[2] = 0;
  void *v10 = &unk_1EE389D80;
  v10[3] = &unk_1EE36C130;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  *((_DWORD *)v10 + 10) = a4;
  *((_DWORD *)v10 + 11) = a5;
  uint64_t result = Espresso::kern_alloc_uninitialized((Espresso *)(2 * a2 * (uint64_t)a3 * a4 * a5));
  v10[6] = result;
  *((unsigned char *)v10 + 56) = 1;
  *a1 = v10 + 3;
  a1[1] = v10;
  return result;
}

void sub_192899698(_Unwind_Exception *a1)
{
  shared_weak_owners = (std::__shared_weak_count *)v1[3].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  uint64_t v4 = (std::__shared_weak_count *)v1[3].__vftable;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_convolution_kernel>::set_weights()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "use set_weights(blob_f4::ptr blob_in)");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_192899710(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_convolution_kernel>::set_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 584);
  uint64_t v5 = *(std::__shared_weak_count **)(v4 + 184);
  *(void *)(v4 + 176) = 0;
  *(void *)(v4 + 184) = 0;
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v6 = *a2;
  uint64_t v7 = (std::__shared_weak_count *)a2[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  _X25 = *(int **)(v6 + 24);
  __asm { PRFM            #1, [X25] }
  int v13 = *(_DWORD *)(v6 + 16);
  uint64_t v14 = *(unsigned int *)(v6 + 20);
  uint64_t v16 = *(unsigned int *)(v6 + 8);
  int v15 = *(_DWORD *)(v6 + 12);
  if (v14) {
    _ZF = v13 == 0;
  }
  else {
    _ZF = 1;
  }
  if (_ZF || v15 == 0 || v16 == 0)
  {
    Espresso::blob<float,4>::copy(&v66, v6);
  }
  else
  {
    uint64_t v20 = v13;
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,Espresso::blob<float,4>::UnitializedBlobType,void>(&v66, v13, v15, v16, v14);
    uint64_t v21 = *(_DWORD **)(v66 + 24);
    char v22 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 632))(a1);
    if (v22)
    {
      int v23 = *(_DWORD *)(a1 + 420);
      if (v23 <= 1)
      {
        if ((int)v20 >= 1)
        {
          int v51 = 0;
          int v52 = 0;
          int v53 = v14 * (v15 * v16 - 1);
          do
          {
            if (v15 >= 1)
            {
              int v54 = 0;
              int v55 = v51;
              int v56 = v53;
              do
              {
                if ((int)v16 >= 1)
                {
                  uint64_t v57 = 0;
                  int v58 = v56;
                  do
                  {
                    if ((int)v14 >= 1)
                    {
                      uint64_t v59 = &v21[v58];
                      int v60 = v55;
                      uint64_t v61 = v14;
                      do
                      {
                        *v59++ = _X25[v57 + v60];
                        v60 += v15 * v16 * v20;
                        --v61;
                      }
                      while (v61);
                    }
                    ++v57;
                    v58 -= v14;
                  }
                  while (v57 != v16);
                }
                ++v54;
                v56 -= v14 * v16;
                v55 += v16;
              }
              while (v54 != v15);
            }
            ++v52;
            v53 += v15 * v16 * v14;
            v51 += v15 * v16;
          }
          while (v52 != v20);
        }
      }
      else
      {
        int v24 = *(_DWORD *)(a1 + 344);
        if (v24 >= 1)
        {
          int v25 = 0;
          uint64_t v26 = *(unsigned int *)(a1 + 348);
          int v27 = *(_DWORD *)(a1 + 352);
          int v28 = *(_DWORD *)(a1 + 356);
          int v29 = v28 * v27;
          int v30 = (int)v26 / v23;
          int v31 = v24 / v23;
          int v32 = (int)v26 / v23 * (v28 * v27 - 1);
          int v33 = (int)v26 / v23 * v27;
          int v34 = v33 * v28;
          int v35 = v29 * v24 / v23;
          do
          {
            if (v15 >= 1)
            {
              int v36 = 0;
              int v37 = 0;
              int v38 = v32;
              do
              {
                if ((int)v16 >= 1)
                {
                  int v39 = 0;
                  int v40 = v38;
                  int v41 = v36;
                  do
                  {
                    if ((int)v26 >= 1)
                    {
                      uint64_t v42 = 0;
                      int v43 = v41 + v29 * (v25 % v31);
                      do
                      {
                        if ((int)v42 / v30 == v25 / v31) {
                          v21[v40 - v25 / v31 * v30 + (int)v42] = _X25[v43];
                        }
                        ++v42;
                        v43 += v35;
                      }
                      while (v26 != v42);
                    }
                    ++v39;
                    ++v41;
                    v40 -= v30;
                  }
                  while (v39 != v16);
                }
                ++v37;
                v36 += v27;
                v38 -= v33;
              }
              while (v37 != v15);
            }
            ++v25;
            v32 += v34;
          }
          while (v25 != v24);
        }
      }
    }
    else
    {
      LODWORD(v44) = v16 * v15;
      if ((int)v16 * v15 <= 1) {
        uint64_t v44 = 1;
      }
      else {
        uint64_t v44 = v44;
      }
      if ((int)v20 <= 1) {
        uint64_t v45 = 1;
      }
      else {
        uint64_t v45 = v20;
      }
      do
      {
        uint64_t v46 = 0;
        uint64_t v47 = v21;
        do
        {
          char v48 = v47;
          uint64_t v49 = v44;
          do
          {
            int v50 = *_X25++;
            _DWORD *v48 = v50;
            v48 += v20;
            --v49;
          }
          while (v49);
          ++v46;
          ++v47;
        }
        while (v46 != v45);
        v21 += (int)v16 * v15 * (int)v20;
        LODWORD(v14) = v14 - 1;
      }
      while (v14);
    }
  }
  uint64_t v62 = *(void *)(a1 + 584);
  long long v63 = *(std::__shared_weak_count **)(v62 + 200);
  *(_OWORD *)(v62 + 192) = v66;
  if (v63) {
    nitro::nitro_function::nitro_function(v63);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  *(_DWORD *)(*(void *)(a1 + 584) + 288) = 268435488;
  Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_convolution_kernel>::scale_weights_for_batch_norm(a1);
  uint64_t v64 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 624);

  return v64(a1);
}

void sub_192899AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_convolution_kernel>::set_biases(uint64_t a1, void *a2)
{
  if (*(_DWORD *)(a1 + 416))
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v22, *(_DWORD *)(a1 + 344), 1, 1, 1);
    uint64_t v4 = *((void *)&v22 + 1);
    uint64_t v5 = v22;
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,void>(&v22, *(_DWORD *)(a1 + 344));
    uint64_t v6 = *(void *)(a1 + 584);
    uint64_t v7 = v22;
    uint64_t v8 = *(std::__shared_weak_count **)(v6 + 280);
    *(_OWORD *)(v6 + 272) = v22;
    if (v8)
    {
      nitro::nitro_function::nitro_function(v8);
      uint64_t v9 = *(void *)(*(void *)(a1 + 584) + 272);
      if (v9) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v9 = v7;
      if (v7)
      {
LABEL_4:
        uint64_t v10 = *(unsigned int *)(a1 + 344);
        if ((int)v10 >= 1)
        {
          long long v11 = *(float **)(v9 + 16);
          uint64_t v12 = *(float **)(v5 + 16);
          int v13 = (float *)(*(void *)(*a2 + 16) + 8);
          do
          {
            float v14 = *(v13 - 2);
            float v15 = *(v13 - 1);
            float v16 = *v13;
            float v17 = v13[1];
            v13 += 4;
            float v18 = 1.0 / v17;
            *v11++ = v14 * v18;
            *v12++ = v15 + (float)((float)-(float)(v16 * v18) * v14);
            --v10;
          }
          while (v10);
        }
        goto LABEL_10;
      }
    }
    Espresso::throw_exception_selector<Espresso::memory_error>("Error allocating memory");
  }
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
LABEL_10:
  uint64_t v19 = *(void *)(a1 + 584);
  uint64_t v20 = *(std::__shared_weak_count **)(v19 + 232);
  *(void *)(v19 + 224) = v5;
  *(void *)(v19 + 232) = v4;
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_convolution_kernel>::scale_weights_for_batch_norm(a1);
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 624))(a1);
}

void sub_192899C24(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_convolution_kernel>::clear_weights(Espresso::generic_convolution_kernel *a1)
{
  Espresso::generic_convolution_kernel::clear_weights(a1);
  uint64_t v2 = (void *)*((void *)a1 + 73);
  uint64_t v3 = (std::__shared_weak_count *)v2[25];
  v2[24] = 0;
  v2[25] = 0;
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
    uint64_t v2 = (void *)*((void *)a1 + 73);
  }
  uint64_t v4 = (std::__shared_weak_count *)v2[27];
  v2[26] = 0;
  v2[27] = 0;
  if (v4)
  {
    nitro::nitro_function::nitro_function(v4);
    uint64_t v2 = (void *)*((void *)a1 + 73);
  }
  uint64_t v5 = (std::__shared_weak_count *)v2[23];
  v2[22] = 0;
  v2[23] = 0;
  if (v5)
  {
    nitro::nitro_function::nitro_function(v5);
  }
}

void Espresso::MPSEngine::mps_convolution_kernel::share_weights(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2)
  {
    if (v4)
    {
      uint64_t v5 = *(std::__shared_weak_count **)(a2 + 8);
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v6 = (const void *)v4[75];
      if (v6)
      {
        if (v7) {
          objc_storeStrong((id *)(a1 + 592), v7[74]);
        }
      }
      if (v5)
      {
        nitro::nitro_function::nitro_function(v5);
      }
    }
  }
}

void Espresso::MPSEngine::mps_convolution_kernel::__launch(int32x2_t *a1, uint64_t a2, uint64_t **a3, const void ***a4)
{
  if (!*(void *)&a1[74] || *(_DWORD *)(*(void *)&a1[73] + 68) != a1[45].i32[1]) {
    (*(void (**)(int32x2_t *))(*(void *)a1 + 624))(a1);
  }
  if ((unint64_t)((char *)a4[1] - (char *)*a4) >= 0x11)
  {
    uint64_t v110 = a2;
    uint64_t v8 = (*(uint64_t (**)(int32x2_t *))(*(void *)a1 + 384))(a1);
    v117 = a3;
    {
      uint64_t v9 = *a4;
      uint64_t v10 = (*a4)[2];
      if (v10)
      {
        if (v11)
        {
          int v12 = 0;
          int v13 = (std::__shared_weak_count *)v9[3];
          if (v13)
          {
LABEL_9:
            int v111 = v12;
            v112 = 0;
            v114 = v13;
            float v14 = 0;
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
            goto LABEL_34;
          }
          goto LABEL_19;
        }
LABEL_22:
        id v22 = 0;
        goto LABEL_23;
      }
      goto LABEL_21;
    }
    BOOL v16 = v15 == 0;
    if (!v15)
    {
      {
        uint64_t v20 = *a4;
        uint64_t v21 = (*a4)[4];
        if (v21)
        {
          if (v11)
          {
            int v12 = 0;
            int v13 = (std::__shared_weak_count *)v20[5];
            if (v13) {
              goto LABEL_9;
            }
LABEL_19:
            int v111 = 0;
LABEL_20:
            v112 = 0;
            v114 = 0;
            float v14 = 0;
            goto LABEL_34;
          }
          goto LABEL_22;
        }
LABEL_21:
        id v22 = 0;
        long long v11 = 0;
LABEL_23:
        v112 = 0;
        v114 = 0;
        int v111 = 0;
        int v119 = 0;
        goto LABEL_37;
      }
      {
        v106 = *a4;
        v107 = (*a4)[2];
        if (v107)
        {
          if (v11)
          {
            int v13 = (std::__shared_weak_count *)v106[3];
            int v12 = 1;
            if (v13) {
              goto LABEL_9;
            }
            int v111 = 1;
            goto LABEL_20;
          }
          id v22 = 0;
        }
        else
        {
          id v22 = 0;
          long long v11 = 0;
        }
        v112 = 0;
        v114 = 0;
        int v119 = 0;
        id v25 = 0;
        int v111 = 1;
LABEL_38:
        uint64_t v26 = 268435488;
        if (!*(void *)&a1[74] || a1[76].i8[0])
        {
          int v27 = [EspressoTrainingConvolutionWeightsForMPS alloc];
          long long v28 = *(_OWORD *)v8;
          long long v29 = *(_OWORD *)(v8 + 32);
          long long v128 = *(_OWORD *)(v8 + 16);
          long long v129 = v29;
          long long v127 = v28;
          long long v30 = *(_OWORD *)(v8 + 48);
          long long v31 = *(_OWORD *)(v8 + 64);
          long long v32 = *(_OWORD *)(v8 + 96);
          long long v132 = *(_OWORD *)(v8 + 80);
          long long v133 = v32;
          long long v130 = v30;
          long long v131 = v31;
          long long v33 = *(_OWORD *)(v8 + 112);
          long long v34 = *(_OWORD *)(v8 + 128);
          long long v35 = *(_OWORD *)(v8 + 144);
          uint64_t v137 = *(void *)(v8 + 160);
          long long v135 = v34;
          long long v136 = v35;
          long long v134 = v33;
          int v36 = [(EspressoTrainingConvolutionWeightsForMPS *)v27 initWithParams:&v127 forMode:*(unsigned __int8 *)(*(void *)&a1[1] + 114)];
          [(EspressoTrainingConvolutionWeightsForMPS *)v36 setWeightsBuffer:v22];
          [(EspressoTrainingConvolutionWeightsForMPS *)v36 setBiasesBuffer:v25];
          int v37 = 268435488;
          if (v119)
          {
            int v38 = (*(uint64_t (**)(void *))(*(void *)v11 + 32))(v11);
            int v37 = 268435472;
            if (v38 != 1) {
              int v37 = 268435488;
            }
          }
          v36->super.data_type = v37;
          objc_storeStrong((id *)&a1[73], v36);
          (*(void (**)(int32x2_t *))(*(void *)a1 + 624))(a1);
          a1[76].i8[0] = 0;
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Training inner_product has bound weights");
        }
        if (!v25)
        {
          int v39 = (void *)a1[75];
          if (!v39)
          {
            Espresso::abstract_blob_container::shape(v122, **a3);
            BOOL v40 = v124 > 3 || v124 == -1;
            uint64_t v41 = 8;
            if (v40) {
              uint64_t v41 = 16;
            }
            uint64_t v42 = *(int *)(**a3 + v41);
            if (__p)
            {
              v126 = __p;
              operator delete(__p);
            }
            int v43 = [v22 device];
            uint64_t v44 = [v43 newBufferWithLength:4 * v42 options:0];
            uint64_t v45 = (void *)a1[75];
            a1[75] = (int32x2_t)v44;

            int v39 = (void *)a1[75];
          }
          id v25 = v39;
        }
        id v46 = objc_alloc(MEMORY[0x1E4F35418]);
        uint64_t v47 = v46;
        if (v111)
        {
          BOOL v48 = *(unsigned char *)(*((void *)v11 + 9) + 114) == 0;
          id v49 = v46;
          if (v119)
          {
            if ((*(unsigned int (**)(void *))(*(void *)v11 + 32))(v11) == 1) {
              uint64_t v26 = 268435472;
            }
            else {
              uint64_t v26 = 268435488;
            }
          }
          uint64_t v50 = [v49 initWithWeights:v22 biases:v25 weightsDataType:v26 weightsLayout:v48];
        }
        else
        {
          uint64_t v50 = [v46 initWithWeights:v22 biases:v25];
        }
        int v51 = (void *)v50;

        a2 = v110;
        int v53 = *(std::__shared_weak_count **)(v110 + 8);
        if (v53) {
          atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        [*(id *)&a1[74] reloadWeightsAndBiasesWithCommandBuffer:v52[18] state:v51];
        if (v53) {
          nitro::nitro_function::nitro_function(v53);
        }

        if (v112) {
          nitro::nitro_function::nitro_function(v112);
        }
        a3 = v117;
        if (v114) {
          nitro::nitro_function::nitro_function(v114);
        }
        goto LABEL_71;
      }
      std::dynamic_pointer_cast[abi:ne180100]<Espresso::MPSBuffersEngine::blob_container,Espresso::abstract_blob_container>(&v127, (void *)(*a4)[2], (uint64_t)(*a4)[3]);
      v114 = (std::__shared_weak_count *)*((void *)&v127 + 1);
      long long v11 = (void *)v127;
      int v111 = v16;
      if ((unint64_t)((char *)a4[1] - (char *)*a4) < 0x21)
      {
        int v24 = 0;
        float v14 = 0;
      }
      else
      {
        std::dynamic_pointer_cast[abi:ne180100]<Espresso::MPSBuffersEngine::blob_container,Espresso::abstract_blob_container>(&v127, (void *)(*a4)[4], (uint64_t)(*a4)[5]);
        int v24 = (std::__shared_weak_count *)*((void *)&v127 + 1);
        float v14 = (id *)v127;
      }
      goto LABEL_33;
    }
    float v17 = (char *)*a4;
    float v18 = (*a4)[2];
    if (v18)
    {
      if (v11)
      {
        uint64_t v19 = (std::__shared_weak_count *)*((void *)v17 + 3);
        if (v19)
        {
          atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          float v17 = (char *)*a4;
        }
        goto LABEL_26;
      }
    }
    else
    {
      long long v11 = 0;
    }
    uint64_t v19 = 0;
LABEL_26:
    v114 = v19;
    int v111 = v16;
    if ((unint64_t)((char *)a4[1] - v17) >= 0x21 && (int v23 = (const void *)*((void *)v17 + 4)) != 0)
    {
      if (v14)
      {
        int v24 = (std::__shared_weak_count *)*((void *)v17 + 5);
        if (v24) {
          atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_33;
      }
    }
    else
    {
      float v14 = 0;
    }
    int v24 = 0;
LABEL_33:
    v112 = v24;
    if (v11)
    {
LABEL_34:
      id v22 = *((id *)v11 + 21);
      int v119 = 1;
      if (v14)
      {
LABEL_35:
        id v25 = v14[21];
        goto LABEL_38;
      }
      goto LABEL_37;
    }
    int v119 = 0;
    id v22 = 0;
    if (v14) {
      goto LABEL_35;
    }
LABEL_37:
    id v25 = 0;
    goto LABEL_38;
  }
LABEL_71:
  if (!*(void *)&a1[74])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The mps kernel was not created");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v54 = *a3;
  int v55 = (const void *)**a3;
  if (v55)
  {
    if (v56)
    {
      uint64_t v57 = (std::__shared_weak_count *)v54[1];
      if (v57) {
        atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v57 = 0;
    }
  }
  else
  {
    uint64_t v57 = 0;
    int v56 = 0;
  }
  int v58 = *a4;
  uint64_t v59 = **a4;
  if (v59)
  {
    if (v60)
    {
      uint64_t v61 = (std::__shared_weak_count *)v58[1];
      if (v61) {
        atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v61 = 0;
    }
  }
  else
  {
    uint64_t v61 = 0;
    int v60 = 0;
  }
  v62.i32[0] = a1[50].i16[0];
  v62.i32[1] = a1[50].i16[1];
  int32x2_t v63 = vmax_s32(v62, (int32x2_t)0x100000001);
  int32x2_t v64 = vmla_s32((int32x2_t)0x100000001, vadd_s32(a1[44], (int32x2_t)-1), v63);
  int v65 = a1[47].i16[0];
  v118 = v61;
  switch(v65)
  {
    case 4:
      goto LABEL_87;
    case 2:
      int32x2_t v69 = 0;
      break;
    case 1:
LABEL_87:
      v66.i32[0] = a1[49].i16[2];
      v66.i32[1] = a1[49].i16[3];
      int32x2_t v67 = vmax_s32(vmla_s32(vsub_s32(v64, v60[1]), vadd_s32(v56[1], (int32x2_t)-1), v66), 0);
      int32x2_t v68 = (int32x2_t)vshr_n_u32((uint32x2_t)v67, 1uLL);
      int32x2_t v69 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(a1[47].u16[0] == 1), 0x1FuLL)), (int8x8_t)v68, (int8x8_t)vsub_s32(v67, v68));
      break;
    default:
      v63.i16[0] = a1[48].i16[0];
      v63.i16[2] = a1[48].i16[2];
      int32x2_t v69 = vshr_n_s32(vshl_n_s32(v63, 0x10uLL), 0x10uLL);
      break;
  }
  int32x2_t v115 = v69;
  if (v64.i32[0] >= 0) {
    int v70 = v64.i32[0];
  }
  else {
    int v70 = v64.i32[0] + 1;
  }
  if (v64.i32[1] >= 0) {
    int v71 = v64.i32[1];
  }
  else {
    int v71 = v64.i32[1] + 1;
  }
  size_t v72 = (void *)a1[74];
  v120 = v57;
  if (v72)
  {
    [v72 offset];
    uint64_t v73 = v127;
  }
  else
  {
    uint64_t v73 = 0;
    long long v127 = 0uLL;
    *(void *)&long long v128 = 0;
  }
  __int32 v74 = (v70 >> 1) - v115.i32[0];
  int v75 = (v71 >> 1) - v115.i32[1];
  if (v73 != v74
    || ((int v76 = (void *)a1[74]) == 0 ? (v77 = 0) : ([v76 offset], v77 = v123), v77 != v75))
  {
    uint64_t v78 = (void *)a1[74];
    v121[0] = v74;
    v121[1] = v75;
    v121[2] = 0;
    [v78 setOffset:v121];
  }
  if (!*(void *)a2)
  {
    uint64_t v79 = 0;
    goto LABEL_110;
  }
  if (!v79)
  {
LABEL_110:
    uint64_t v80 = 0;
    goto LABEL_111;
  }
  uint64_t v80 = *(std::__shared_weak_count **)(a2 + 8);
  if (v80) {
    atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_111:
  v116 = v80;
  uint64_t v81 = (const void *)a1[1];
  if (!v81
  {
    v108 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v108, "Espresso: wrong_context_type");
    v108->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  uint64_t v83 = (std::__shared_weak_count *)a1[2];
  if (v83) {
    atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v113 = v83;
  if ((unint64_t)((char *)a4[1] - (char *)*a4) >= 0x11)
  {
    unint64_t v84 = [*(id *)&v56[32] count];
    int v85 = (void *)a1[74];
    if (v84 >= 2)
    {
      uint64_t v86 = [*(id *)&a1[74] resultStateBatchForSourceImage:*(void *)&v60[32] sourceStates:0 destinationImage:*(void *)&v56[32]];
      int v87 = (void *)a1[78];
      a1[78] = (int32x2_t)v86;

      [*(id *)&a1[74] encodeBatchToCommandBuffer:v79[18] sourceImages:*(void *)&v60[32] destinationStates:*(void *)&a1[78] destinationImages:*(void *)&v56[32]];
      goto LABEL_129;
    }
    id v97 = *(id *)&v60[30];
    id v98 = *(id *)&v56[30];
    uint64_t v99 = [v85 resultStateForSourceImage:v97 sourceStates:0 destinationImage:v98];
    std::string v100 = (void *)a1[77];
    a1[77] = (int32x2_t)v99;

    long long v101 = (void *)a1[74];
    uint64_t v102 = v79[18];
    id v103 = *(id *)&v60[30];
    int32x2_t v104 = a1[77];
    id v105 = *(id *)&v56[30];
    [v101 encodeToCommandBuffer:v102 sourceImage:v103 destinationState:*(void *)&v104 destinationImage:v105];
LABEL_128:

    goto LABEL_129;
  }
  if (!v82[113] || !v60[29].i8[4])
  {
    unint64_t v94 = [*(id *)&v56[32] count];
    long long v95 = (void *)a1[74];
    uint64_t v96 = v79[18];
    if (v94 >= 2)
    {
      [v95 encodeBatchToCommandBuffer:v79[18] sourceImages:*(void *)&v60[32] destinationImages:*(void *)&v56[32]];
      goto LABEL_129;
    }
    id v103 = *(id *)&v60[30];
    id v105 = *(id *)&v56[30];
    [v95 encodeToCommandBuffer:v96 sourceImage:v103 destinationImage:v105];
    goto LABEL_128;
  }
  uint64_t v88 = [*(id *)&v60[32] count];
  if (v88)
  {
    for (uint64_t i = 0; i != v88; ++i)
    {
      uint64_t v90 = (void *)a1[74];
      uint64_t v91 = v79[18];
      uint64_t v92 = [*(id *)&v60[32] objectAtIndexedSubscript:i];
      char v93 = [*(id *)&v56[32] objectAtIndexedSubscript:i];
      [v90 encodeToCommandBuffer:v91 sourceImage:v92 destinationImage:v93];
    }
  }
LABEL_129:
  ++*((_DWORD *)v79 + 65);
  if (v113) {
    nitro::nitro_function::nitro_function(v113);
  }
  if (v116) {
    nitro::nitro_function::nitro_function(v116);
  }
  if (v118) {
    nitro::nitro_function::nitro_function(v118);
  }
  if (v120) {
    nitro::nitro_function::nitro_function(v120);
  }
}

void sub_19289AB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, std::__shared_weak_count *a13)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::mps_convolution_kernel::~mps_convolution_kernel(id *this)
{
  uint64_t v2 = (std::__shared_weak_count *)this[72];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  uint64_t v2 = (std::__shared_weak_count *)this[72];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::generic_convolution_kernel::~generic_convolution_kernel(this);
}

void Espresso::MPSEngine::convolution_kernel_proxy::update_fused_neuron(Espresso::MPSEngine::convolution_kernel_proxy *this)
{
  uint64_t v2 = (char *)this + 304;
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 75) + 384))(*((void *)this + 75));
  long long v5 = *((_OWORD *)this + 20);
  long long v4 = *((_OWORD *)this + 21);
  *(_OWORD *)uint64_t v3 = *((_OWORD *)this + 19);
  *(_OWORD *)(v3 + 16) = v5;
  *(_OWORD *)(v3 + 32) = v4;
  long long v6 = *((_OWORD *)this + 25);
  long long v8 = *((_OWORD *)this + 22);
  long long v7 = *((_OWORD *)this + 23);
  *(_OWORD *)(v3 + 80) = *((_OWORD *)this + 24);
  *(_OWORD *)(v3 + 96) = v6;
  *(_OWORD *)(v3 + 48) = v8;
  *(_OWORD *)(v3 + 64) = v7;
  long long v10 = *((_OWORD *)this + 27);
  long long v9 = *((_OWORD *)this + 28);
  long long v11 = *((_OWORD *)this + 26);
  *(void *)(v3 + 157) = *(void *)(v2 + 157);
  *(_OWORD *)(v3 + 128) = v10;
  *(_OWORD *)(v3 + 144) = v9;
  *(_OWORD *)(v3 + 112) = v11;
  int v12 = (const void *)*((void *)this + 75);
  if (!v12) {
    return;
  }
  if (v13)
  {
    uint64_t v16 = v13;
    if (!*(void *)(v13 + 592)) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot update fused neuron on nil kernel.");
    }
    int v17 = *(_DWORD *)(v13 + 364);
    if (v17 != -1)
    {
      if (v17 == 2)
      {
        uint64_t v18 = 1;
      }
      else
      {
        if (v17 != 24) {
          goto LABEL_17;
        }
        uint64_t v18 = 11;
      }
      LODWORD(v14) = *(_DWORD *)(v13 + 368);
      LODWORD(v15) = *(_DWORD *)(v13 + 372);
      uint64_t v13 = [MEMORY[0x1E4F35930] cnnNeuronDescriptorWithType:v18 a:v14 b:v15];
      if (v13)
      {
        uint64_t v21 = v13;
        uint64_t v13 = objc_opt_respondsToSelector();
        uint64_t v20 = v21;
        if (v13)
        {
          uint64_t v13 = [*(id *)(v16 + 592) setFusedNeuronDescriptor:v21];
          uint64_t v20 = v21;
        }
        goto LABEL_18;
      }
LABEL_17:
      uint64_t v20 = 0;
LABEL_18:
      MEMORY[0x1F41817F8](v13, v20);
    }
  }
  else
  {
    if (v19)
    {
      Espresso::MetalLowmemEngine::depthwise_convolution_kernel::invalidate(v19);
    }
  }
}

void sub_19289AFA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::convolution_kernel_proxy::set_quantization_ranges_blob(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 304;
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 600) + 384))(*(void *)(a1 + 600));
  long long v9 = *(_OWORD *)(a1 + 320);
  long long v8 = *(_OWORD *)(a1 + 336);
  *(_OWORD *)uint64_t v7 = *(_OWORD *)(a1 + 304);
  *(_OWORD *)(v7 + 16) = v9;
  *(_OWORD *)(v7 + 32) = v8;
  long long v10 = *(_OWORD *)(a1 + 400);
  long long v12 = *(_OWORD *)(a1 + 352);
  long long v11 = *(_OWORD *)(a1 + 368);
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(a1 + 384);
  *(_OWORD *)(v7 + 96) = v10;
  *(_OWORD *)(v7 + 48) = v12;
  *(_OWORD *)(v7 + 64) = v11;
  long long v14 = *(_OWORD *)(a1 + 432);
  long long v13 = *(_OWORD *)(a1 + 448);
  long long v15 = *(_OWORD *)(a1 + 416);
  *(void *)(v7 + 157) = *(void *)(v6 + 157);
  *(_OWORD *)(v7 + 128) = v14;
  *(_OWORD *)(v7 + 144) = v13;
  *(_OWORD *)(v7 + 112) = v15;
  uint64_t v16 = *(void *)(a1 + 600);
  int v17 = (std::__shared_weak_count *)a2[1];
  uint64_t v21 = *a2;
  id v22 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = (std::__shared_weak_count *)a3[1];
  uint64_t v19 = *a3;
  uint64_t v20 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v16 + 592))(v16, &v21, &v19);
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
}

void sub_19289B0DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSEngine::convolution_kernel_proxy::set_quantization_lut_blob(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 600);
  long long v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v8 = *a2;
  long long v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v5 = (std::__shared_weak_count *)a3[1];
  uint64_t v6 = *a3;
  uint64_t v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v3 + 576))(v3, &v8, &v6);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_19289B1A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSEngine::convolution_kernel_proxy::set_quantized_weights_blob(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 304;
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 600) + 384))(*(void *)(a1 + 600));
  long long v9 = *(_OWORD *)(a1 + 320);
  long long v8 = *(_OWORD *)(a1 + 336);
  *(_OWORD *)uint64_t v7 = *(_OWORD *)(a1 + 304);
  *(_OWORD *)(v7 + 16) = v9;
  *(_OWORD *)(v7 + 32) = v8;
  long long v10 = *(_OWORD *)(a1 + 400);
  long long v12 = *(_OWORD *)(a1 + 352);
  long long v11 = *(_OWORD *)(a1 + 368);
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(a1 + 384);
  *(_OWORD *)(v7 + 96) = v10;
  *(_OWORD *)(v7 + 48) = v12;
  *(_OWORD *)(v7 + 64) = v11;
  long long v14 = *(_OWORD *)(a1 + 432);
  long long v13 = *(_OWORD *)(a1 + 448);
  long long v15 = *(_OWORD *)(a1 + 416);
  *(void *)(v7 + 157) = *(void *)(v6 + 157);
  *(_OWORD *)(v7 + 128) = v14;
  *(_OWORD *)(v7 + 144) = v13;
  *(_OWORD *)(v7 + 112) = v15;
  uint64_t v16 = *(void *)(a1 + 600);
  int v17 = (std::__shared_weak_count *)a2[1];
  uint64_t v21 = *a2;
  id v22 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = (std::__shared_weak_count *)a3[1];
  uint64_t v19 = *a3;
  uint64_t v20 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v16 + 560))(v16, &v21, &v19);
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
}

void sub_19289B2EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSEngine::convolution_kernel_proxy::set_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 304;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 600) + 384))(*(void *)(a1 + 600));
  long long v7 = *(_OWORD *)(a1 + 320);
  long long v6 = *(_OWORD *)(a1 + 336);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)(a1 + 304);
  *(_OWORD *)(v5 + 16) = v7;
  *(_OWORD *)(v5 + 32) = v6;
  long long v8 = *(_OWORD *)(a1 + 400);
  long long v10 = *(_OWORD *)(a1 + 352);
  long long v9 = *(_OWORD *)(a1 + 368);
  *(_OWORD *)(v5 + 80) = *(_OWORD *)(a1 + 384);
  *(_OWORD *)(v5 + 96) = v8;
  *(_OWORD *)(v5 + 48) = v10;
  *(_OWORD *)(v5 + 64) = v9;
  long long v12 = *(_OWORD *)(a1 + 432);
  long long v11 = *(_OWORD *)(a1 + 448);
  long long v13 = *(_OWORD *)(a1 + 416);
  *(void *)(v5 + 157) = *(void *)(v4 + 157);
  *(_OWORD *)(v5 + 128) = v12;
  *(_OWORD *)(v5 + 144) = v11;
  *(_OWORD *)(v5 + 112) = v13;
  uint64_t v14 = *(void *)(a1 + 600);
  long long v15 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  int v17 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v14 + 408))(v14, &v16);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  uint64_t v4 = a1 + 304;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 600) + 384))(*(void *)(a1 + 600));
  long long v7 = *(_OWORD *)(a1 + 320);
  long long v6 = *(_OWORD *)(a1 + 336);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)(a1 + 304);
  *(_OWORD *)(v5 + 16) = v7;
  *(_OWORD *)(v5 + 32) = v6;
  long long v8 = *(_OWORD *)(a1 + 400);
  long long v10 = *(_OWORD *)(a1 + 352);
  long long v9 = *(_OWORD *)(a1 + 368);
  *(_OWORD *)(v5 + 80) = *(_OWORD *)(a1 + 384);
  *(_OWORD *)(v5 + 96) = v8;
  *(_OWORD *)(v5 + 48) = v10;
  *(_OWORD *)(v5 + 64) = v9;
  long long v12 = *(_OWORD *)(a1 + 432);
  long long v11 = *(_OWORD *)(a1 + 448);
  long long v13 = *(_OWORD *)(a1 + 416);
  *(void *)(v5 + 157) = *(void *)(v4 + 157);
  *(_OWORD *)(v5 + 128) = v12;
  *(_OWORD *)(v5 + 144) = v11;
  *(_OWORD *)(v5 + 112) = v13;
  uint64_t v14 = *(void *)(a1 + 600);
  long long v15 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  int v17 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v14 + 400))(v14, &v16);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
}

void sub_19289B408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_19289B518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSEngine::convolution_kernel_proxy::set_biases(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 304;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 600) + 384))(*(void *)(a1 + 600));
  long long v7 = *(_OWORD *)(a1 + 320);
  long long v6 = *(_OWORD *)(a1 + 336);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)(a1 + 304);
  *(_OWORD *)(v5 + 16) = v7;
  *(_OWORD *)(v5 + 32) = v6;
  long long v8 = *(_OWORD *)(a1 + 400);
  long long v10 = *(_OWORD *)(a1 + 352);
  long long v9 = *(_OWORD *)(a1 + 368);
  *(_OWORD *)(v5 + 80) = *(_OWORD *)(a1 + 384);
  *(_OWORD *)(v5 + 96) = v8;
  *(_OWORD *)(v5 + 48) = v10;
  *(_OWORD *)(v5 + 64) = v9;
  long long v12 = *(_OWORD *)(a1 + 432);
  long long v11 = *(_OWORD *)(a1 + 448);
  long long v13 = *(_OWORD *)(a1 + 416);
  *(void *)(v5 + 157) = *(void *)(v4 + 157);
  *(_OWORD *)(v5 + 128) = v12;
  *(_OWORD *)(v5 + 144) = v11;
  *(_OWORD *)(v5 + 112) = v13;
  uint64_t v14 = *(void *)(a1 + 600);
  long long v15 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  int v17 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v14 + 392))(v14, &v16);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
}

void sub_19289B628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL Espresso::MPSEngine::convolution_kernel_proxy::is_valid_for_engine(_DWORD *a1, uint64_t a2, void *a3)
{
  int v3 = a1[105];
  if (v3 >= 2 && v3 != a1[87]) {
    return ((a1[86] / v3) & 3) == 0;
  }
  return a3[1] - *a3 != 128 || a1[84] != 1;
}

void Espresso::MPSEngine::convolution_kernel_proxy::__set_weights_finalize(uint64_t a1, uint64_t *a2)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 584);
  if (!v3) {
    return;
  }
  if (!*(void *)v3) {
    return;
  }
  uint64_t v5 = *(void *)(v3 + 32);
  if (!v5 && !*(void *)(v3 + 48) && !*(void *)(v3 + 64) && !*(void *)(v3 + 80)) {
    return;
  }
  int v6 = *(_DWORD *)(a1 + 420);
  BOOL v7 = v6 >= 2 && v6 == *(_DWORD *)(a1 + 348);
  if (!*(_DWORD *)(*(void *)(a1 + 8) + 76) && !v7)
  {
    int v8 = *(_DWORD *)(v3 + 156);
    if (v8 == 8)
    {
      if (*(unsigned char *)(v3 + 164) && !v5)
      {
        if (!*(void *)(v3 + 48) && !*(void *)(v3 + 64) && *(void *)(v3 + 80))
        {
          Espresso::quantized_weights_helper::cast_int8_linear_to_uint8_linear((Espresso::quantized_weights_helper *)v3, (uint64_t)&v69);
          long long v9 = (std::__shared_weak_count *)v72;
          v66[0] = v71;
          v66[1] = v72;
          if (v72) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v72 + 8), 1uLL, memory_order_relaxed);
          }
          long long v10 = (std::__shared_weak_count *)v74;
          v65[0] = v73;
          v65[1] = v74;
          if (v74) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v74 + 8), 1uLL, memory_order_relaxed);
          }
          Espresso::quantized_weights_helper::get_per_ch_ranges_uint8(v66, v65, *(_DWORD *)(v71 + 8), &v67);
          if (v10) {
            nitro::nitro_function::nitro_function(v10);
          }
          if (v9) {
            nitro::nitro_function::nitro_function(v9);
          }
          uint64_t v11 = *(void *)(a1 + 600);
          long long v12 = v68;
          uint64_t v63 = v67;
          int32x2_t v64 = v68;
          if (v68) {
            atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v13 = (std::__shared_weak_count *)a2[1];
          uint64_t v61 = *a2;
          int32x2_t v62 = v13;
          if (v13) {
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v11 + 592))(v11, &v63, &v61);
          if (v62) {
            nitro::nitro_function::nitro_function(v62);
          }
          if (v64) {
            nitro::nitro_function::nitro_function(v64);
          }
          (*(void (**)(__n128 *__return_ptr, uint64_t))(*(void *)a1 + 464))(&v58, a1);
          __n128 v75 = v58;
          uint64_t v14 = v69;
          long long v15 = v70;
          if (v70) {
            atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          __n128 v16 = std::make_shared[abi:ne180100]<Espresso::blob<unsigned char,4>,unsigned char *&,int const(&)[4],void>(&v56, *(void *)(v14 + 16), &v75);
          uint64_t v17 = *(void *)(a1 + 600);
          uint64_t v18 = v57;
          uint64_t v54 = v56;
          int v55 = v57;
          if (v57) {
            atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v19 = (std::__shared_weak_count *)a2[1];
          uint64_t v52 = *a2;
          int v53 = v19;
          if (v19) {
            atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t *, __n128))(*(void *)v17 + 560))(v17, &v54, &v52, v16);
          if (v53) {
            nitro::nitro_function::nitro_function(v53);
          }
          if (v55) {
            nitro::nitro_function::nitro_function(v55);
          }
          if (v18) {
            nitro::nitro_function::nitro_function(v18);
          }
          if (v15) {
            nitro::nitro_function::nitro_function(v15);
          }
          if (__p)
          {
            int v60 = __p;
            operator delete(__p);
          }
          if (v12) {
            nitro::nitro_function::nitro_function(v12);
          }
          Espresso::quantized_weights_helper::linear_quantization_data::~linear_quantization_data((Espresso::quantized_weights_helper::linear_quantization_data *)&v69);
          return;
        }
LABEL_62:
        if (!*(void *)(v3 + 48) && !*(void *)(v3 + 64) && *(void *)(v3 + 80))
        {
          Espresso::quantized_weights_helper::get_per_ch_ranges((Espresso::quantized_weights_helper *)v3, &v58);
          uint64_t v33 = *(void *)(a1 + 600);
          long long v34 = (std::__shared_weak_count *)v58.n128_u64[1];
          __n128 v51 = v58;
          if (v58.n128_u64[1]) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v58.n128_u64[1] + 8), 1uLL, memory_order_relaxed);
          }
          long long v35 = (std::__shared_weak_count *)a2[1];
          uint64_t v49 = *a2;
          uint64_t v50 = v35;
          if (v35) {
            atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint64_t, __n128 *, uint64_t *))(*(void *)v33 + 592))(v33, &v51, &v49);
          if (v50) {
            nitro::nitro_function::nitro_function(v50);
          }
          if (v51.n128_u64[1]) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v51.n128_u64[1]);
          }
          if (v34)
          {
            id v25 = v34;
LABEL_71:
            nitro::nitro_function::nitro_function(v25);
          }
LABEL_72:
          (*(void (**)(__n128 *__return_ptr, uint64_t))(*(void *)a1 + 464))(&v58, a1);
          __n128 v36 = v58;
          uint64_t v26 = *(int **)(a1 + 584);
          if (v26[40] >= 1 && (uint64_t v27 = *((void *)v26 + 2)) != 0)
          {
            long long v28 = (std::__shared_weak_count *)*((void *)v26 + 3);
            if (!v28) {
              goto LABEL_78;
            }
          }
          else
          {
            uint64_t v27 = *(void *)v26;
            long long v28 = (std::__shared_weak_count *)*((void *)v26 + 1);
            if (!v28)
            {
LABEL_78:
              long long v29 = (std::__shared_weak_count *)operator new(0x60uLL);
              v29->__shared_weak_owners_ = 0;
              v29->__shared_owners_ = 0;
              v29->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389B18;
              long long v30 = *(std::__shared_weak_count_vtbl **)(v27 + 16);
              v29[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36BFD0;
              *(_OWORD *)&v29[2].__shared_weak_owners_ = 0u;
              *(_OWORD *)&v29[3].__shared_owners_ = 0u;
              *(__n128 *)&v29[1].__shared_owners_ = v36;
              v29[2].__vftable = v30;
              LOBYTE(v29[2].__shared_owners_) = 0;
              uint64_t v31 = *(void *)(a1 + 600);
              int v43 = v29 + 1;
              uint64_t v44 = v29;
              atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
              long long v32 = (std::__shared_weak_count *)a2[1];
              uint64_t v41 = *a2;
              uint64_t v42 = v32;
              if (v32) {
                atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              (*(void (**)(uint64_t, std::__shared_weak_count **, uint64_t *))(*(void *)v31 + 560))(v31, &v43, &v41);
              if (v42) {
                nitro::nitro_function::nitro_function(v42);
              }
              if (v44) {
                nitro::nitro_function::nitro_function(v44);
              }
              nitro::nitro_function::nitro_function(v29);
              if (v28) {
                nitro::nitro_function::nitro_function(v28);
              }
              if (__p)
              {
                int v60 = __p;
                operator delete(__p);
              }
              return;
            }
          }
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_78;
        }
LABEL_64:
        uint64_t v22 = *(void *)(a1 + 600);
        int v23 = *(std::__shared_weak_count **)(v3 + 40);
        uint64_t v47 = v5;
        BOOL v48 = v23;
        if (v23) {
          atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v24 = (std::__shared_weak_count *)a2[1];
        uint64_t v45 = *a2;
        id v46 = v24;
        if (v24) {
          atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v22 + 576))(v22, &v47, &v45);
        if (v46) {
          nitro::nitro_function::nitro_function(v46);
        }
        id v25 = v48;
        if (v48) {
          goto LABEL_71;
        }
        goto LABEL_72;
      }
    }
    else if (v8 <= 7)
    {
      Espresso::quantized_weights_helper::make_uint8_weight_from_raw((Espresso::quantized_weights_helper *)v3);
      uint64_t v3 = *(void *)(a1 + 584);
      uint64_t v5 = *(void *)(v3 + 32);
    }
    if (v5) {
      goto LABEL_64;
    }
    goto LABEL_62;
  }
  uint64_t v20 = *(void *)(a1 + 600);
  Espresso::quantized_weights_helper::dequantize_to_float32_4d((Espresso::quantized_weights_helper *)v3, &v39);
  uint64_t v21 = (std::__shared_weak_count *)a2[1];
  uint64_t v37 = *a2;
  int v38 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v20 + 424))(v20, &v39, &v37);
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (v40) {
    nitro::nitro_function::nitro_function(v40);
  }
}

void sub_19289BCD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39)
{
  if (a28) {
    nitro::nitro_function::nitro_function(a28);
  }
  if (a30)
  {
    nitro::nitro_function::nitro_function(a30);
    if (!v39)
    {
LABEL_5:
      if (!v41) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if (!v39)
  {
    goto LABEL_5;
  }
  nitro::nitro_function::nitro_function(v39);
  if (!v41)
  {
LABEL_7:
    if (__p) {
      operator delete(__p);
    }
    if (v40) {
      nitro::nitro_function::nitro_function(v40);
    }
    Espresso::quantized_weights_helper::linear_quantization_data::~linear_quantization_data((Espresso::quantized_weights_helper::linear_quantization_data *)(v42 - 128));
    _Unwind_Resume(a1);
  }
LABEL_6:
  nitro::nitro_function::nitro_function(v41);
  goto LABEL_7;
}

__n128 std::make_shared[abi:ne180100]<Espresso::blob<unsigned char,4>,unsigned char *&,int const(&)[4],void>(void *a1, unint64_t a2, __n128 *a3)
{
  int v6 = (__n128 *)operator new(0x60uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&unk_1EE389B18;
  v6[1].n128_u64[1] = (unint64_t)&unk_1EE36BFD0;
  v6[4] = 0u;
  v6[5] = 0u;
  __n128 result = *a3;
  v6[2] = *a3;
  v6[3].n128_u64[0] = a2;
  v6[3].n128_u8[8] = 0;
  *a1 = (char *)v6 + 24;
  a1[1] = v6;
  return result;
}

void Espresso::MPSEngine::convolution_kernel_proxy::__set_weight_raw_blob(uint64_t *a1, uint64_t *a2, unsigned __int8 *a3, void *a4, unint64_t a5, uint64_t *a6)
{
  Espresso::generic_convolution_kernel::__set_weight_raw_blob((uint64_t)a1, a2, a3, a4, a5, a6);
  uint64_t v11 = a1 + 73;
  long long v12 = (*(void *(**)(long long *__return_ptr, uint64_t *))(*a1 + 464))(v19, a1);
  uint64_t v16 = a1[1];
  uint64_t v17 = (std::__shared_weak_count *)a1[2];
  v18[0] = v16;
  v18[1] = (uint64_t)v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::set_conv_quantized_weight_helper(v13, v14, v15, (uint64_t)v12, (unsigned __int8 **)a3, (char *)a4, a5, a6, v11, v19, v18, 0, 0);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  if (__p)
  {
    uint64_t v21 = __p;
    operator delete(__p);
  }
}

void sub_19289BFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::MPSEngine::convolution_kernel_proxy::on_resized(uint64_t a1)
{
  uint64_t v2 = a1 + 304;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 600) + 384))(*(void *)(a1 + 600));
  long long v5 = *(_OWORD *)(a1 + 320);
  long long v4 = *(_OWORD *)(a1 + 336);
  *(_OWORD *)uint64_t v3 = *(_OWORD *)(a1 + 304);
  *(_OWORD *)(v3 + 16) = v5;
  *(_OWORD *)(v3 + 32) = v4;
  long long v6 = *(_OWORD *)(a1 + 400);
  long long v8 = *(_OWORD *)(a1 + 352);
  long long v7 = *(_OWORD *)(a1 + 368);
  *(_OWORD *)(v3 + 80) = *(_OWORD *)(a1 + 384);
  *(_OWORD *)(v3 + 96) = v6;
  *(_OWORD *)(v3 + 48) = v8;
  *(_OWORD *)(v3 + 64) = v7;
  long long v10 = *(_OWORD *)(a1 + 432);
  long long v9 = *(_OWORD *)(a1 + 448);
  long long v11 = *(_OWORD *)(a1 + 416);
  *(void *)(v3 + 157) = *(void *)(v2 + 157);
  *(_OWORD *)(v3 + 128) = v10;
  *(_OWORD *)(v3 + 144) = v9;
  *(_OWORD *)(v3 + 112) = v11;
  long long v12 = *(uint64_t (**)(void))(**(void **)(a1 + 600) + 80);

  return v12();
}

uint64_t Espresso::MPSEngine::convolution_kernel_proxy::clear_weights(Espresso::MPSEngine::convolution_kernel_proxy *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 75) + 56))();
}

uint64_t Espresso::MPSEngine::convolution_kernel_proxy::share_weights(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 600) + 48))();
}

void Espresso::MPSEngine::convolution_kernel_proxy::blob_options(Espresso::MPSEngine::convolution_kernel_proxy *this@<X0>, char a2@<W1>, int a3@<W2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  if (a3 < 1) {
    return;
  }
  if (a2) {
    return;
  }
  long long v5 = (const void *)*((void *)this + 1);
  if (!v5) {
    return;
  }
  if (!v7) {
    return;
  }
  long long v8 = v7;
  long long v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v10 = (char *)operator new(0x70uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)long long v10 = &unk_1EE388F48;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *((_OWORD *)v10 + 2) = 0u;
  *((_OWORD *)v10 + 3) = 0u;
  *((void *)v10 + 3) = &unk_1EE3661F8;
  *((_DWORD *)v10 + 12) = 1065353216;
  *((void *)v10 + 7) = 0x1FFFFFFFFLL;
  *((void *)v10 + 12) = 0;
  *((void *)v10 + 13) = 0;
  *((void *)v10 + 8) = 0;
  *((void *)v10 + 9) = 0;
  *((void *)v10 + 10) = 0;
  v10[88] = 0;
  *a4 = v10 + 24;
  a4[1] = v10;
  uint64_t v12 = v8[28];
  uint64_t v11 = v8[29];
  if (!v11)
  {
    *((void *)v10 + 12) = v12;
    *((void *)v10 + 13) = 0;
    if (!v9) {
      return;
    }
    goto LABEL_11;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  __n128 v13 = (std::__shared_weak_count *)*((void *)v10 + 13);
  *((void *)v10 + 12) = v12;
  *((void *)v10 + 13) = v11;
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v9)
  {
LABEL_11:
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_19289C280(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::MPSEngine::convolution_kernel_proxy::__launch(uint64_t a1)
{
  uint64_t v2 = a1 + 304;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 600) + 384))(*(void *)(a1 + 600));
  long long v5 = *(_OWORD *)(a1 + 320);
  long long v4 = *(_OWORD *)(a1 + 336);
  *(_OWORD *)uint64_t v3 = *(_OWORD *)(a1 + 304);
  *(_OWORD *)(v3 + 16) = v5;
  *(_OWORD *)(v3 + 32) = v4;
  long long v6 = *(_OWORD *)(a1 + 400);
  long long v8 = *(_OWORD *)(a1 + 352);
  long long v7 = *(_OWORD *)(a1 + 368);
  *(_OWORD *)(v3 + 80) = *(_OWORD *)(a1 + 384);
  *(_OWORD *)(v3 + 96) = v6;
  *(_OWORD *)(v3 + 48) = v8;
  *(_OWORD *)(v3 + 64) = v7;
  long long v10 = *(_OWORD *)(a1 + 432);
  long long v9 = *(_OWORD *)(a1 + 448);
  long long v11 = *(_OWORD *)(a1 + 416);
  *(void *)(v3 + 157) = *(void *)(v2 + 157);
  *(_OWORD *)(v3 + 128) = v10;
  *(_OWORD *)(v3 + 144) = v9;
  *(_OWORD *)(v3 + 112) = v11;
  uint64_t v12 = *(uint64_t (**)(void))(**(void **)(a1 + 600) + 16);

  return v12();
}

void Espresso::MPSEngine::convolution_kernel_proxy::~convolution_kernel_proxy(Espresso::MPSEngine::convolution_kernel_proxy *this)
{
  *(void *)this = &unk_1EE376A90;
  uint64_t v2 = *((void *)this + 75);
  *((void *)this + 75) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 74);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  long long v4 = (std::__shared_weak_count *)*((void *)this + 72);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE376A90;
  uint64_t v2 = *((void *)this + 75);
  *((void *)this + 75) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 74);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  long long v4 = (std::__shared_weak_count *)*((void *)this + 72);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }

  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);
}

uint64_t Espresso::MPSEngine::deconvolution_kernel::conv_transposed_weights(Espresso::MPSEngine::deconvolution_kernel *this)
{
  return 1;
}

void Espresso::MPSEngine::deconvolution_kernel::recreate_kernel(Espresso::MPSEngine::deconvolution_kernel *this)
{
  uint64_t v2 = (const void *)*((void *)this + 1);
  if (!v2
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  long long v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    id v15 = v3[18];
    nitro::nitro_function::nitro_function(v4);
  }
  else
  {
    id v15 = v3[18];
  }
  if (!*((_DWORD *)this + 84) && !*((_DWORD *)this + 104) && !*(void *)(*((void *)this + 73) + 224))
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v16, *((_DWORD *)this + 86), 1, 1, 1);
    uint64_t v5 = *((void *)this + 73);
    long long v6 = *(std::__shared_weak_count **)(v5 + 232);
    *(_OWORD *)(v5 + 224) = v16;
    if (v6) {
      nitro::nitro_function::nitro_function(v6);
    }
  }
  if ([*((id *)this + 73) ready])
  {
    uint64_t v7 = [objc_alloc(MEMORY[0x1E4F35408]) initWithDevice:v15 weights:*((void *)this + 73)];
    long long v8 = (void *)*((void *)this + 74);
    *((void *)this + 74) = v7;

    if (objc_opt_respondsToSelector())
    {
      if (*(_DWORD *)(*((void *)this + 1) + 68)) {
        BOOL v9 = 0;
      }
      else {
        BOOL v9 = *((_DWORD *)this + 112) == 0;
      }
      [*((id *)this + 74) setAccumulatorPrecisionOption:v9];
    }
    long long v10 = (void *)*((void *)this + 74);
    if (v10)
    {
      if (*(unsigned char *)(*((void *)this + 1) + 64))
      {
        long long v11 = (void *)((char *)this + 176);
        if (*((char *)this + 199) < 0) {
          long long v11 = (void *)*v11;
        }
        uint64_t v12 = [NSString stringWithUTF8String:v11];
        [*((id *)this + 74) setLabel:v12];

        long long v10 = (void *)*((void *)this + 74);
      }
      [v10 setDestinationFeatureChannelOffset:*((unsigned __int16 *)this + 215)];
      [*((id *)this + 74) setEdgeMode:0];
      switch(*((_WORD *)this + 189))
      {
        case 0:
          [*((id *)this + 74) setEdgeMode:0];
          if (fabsf(*((float *)this + 95)) > 0.00001) {
            goto LABEL_31;
          }
          goto LABEL_26;
        case 1:
          [*((id *)this + 74) setEdgeMode:1];
          goto LABEL_26;
        case 2:
        case 3:
LABEL_31:
          double v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v14, "Not supported by MPS");
          goto LABEL_32;
        default:
          goto LABEL_26;
      }
    }
    double v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Error creating mps kernel");
LABEL_32:
    __cxa_throw(v14, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_26:
}

void sub_19289C7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_deconvolution_kernel>::set_quantization_ranges_blob(uint64_t a1, uint64_t a2)
{
  _ZNSt3__115allocate_sharedB8ne180100IN8Espresso4blobIDv2_fLi1EEENS_9allocatorIS4_EEJRiEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v13, *(_DWORD *)(a1 + 344));
  uint64_t v4 = *(void *)(a1 + 584);
  uint64_t v5 = v13;
  long long v6 = *(std::__shared_weak_count **)(v4 + 248);
  *(_OWORD *)(v4 + 240) = v13;
  if (v6)
  {
    nitro::nitro_function::nitro_function(v6);
    uint64_t v7 = *(void *)(*(void *)(a1 + 584) + 240);
    if (v7) {
      goto LABEL_3;
    }
LABEL_10:
    Espresso::throw_exception_selector<Espresso::memory_error>("Error allocating memory");
  }
  uint64_t v7 = v5;
  if (!v5) {
    goto LABEL_10;
  }
LABEL_3:
  if (*(int *)(a1 + 344) >= 1)
  {
    uint64_t v8 = 0;
    BOOL v9 = *(_DWORD **)(v7 + 16);
    do
    {
      LODWORD(v10) = *(_DWORD *)(*(void *)(*(void *)a2 + 16) + 4 * v8);
      *BOOL v9 = v10;
      HIDWORD(v10) = *(_DWORD *)(*(void *)(*(void *)a2 + 16) + 4 * (v8 + *(int *)(a1 + 344)));
      *(void *)BOOL v9 = v10;
      v9 += 2;
      ++v8;
    }
    while (v8 < *(int *)(a1 + 344));
  }
  Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_deconvolution_kernel>::scale_weights_for_batch_norm(a1);
  long long v11 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 624);

  return v11(a1);
}

uint64_t Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_deconvolution_kernel>::scale_weights_for_batch_norm(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 584) ready];
  if (result)
  {
    uint64_t v3 = *(void **)(a1 + 584);
    uint64_t v4 = v3[34];
    if (v4)
    {
      if (v3[24])
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 632))(a1);
        uint64_t v5 = *(void *)(a1 + 584);
        uint64_t v6 = *(void *)(v5 + 192);
        if (result)
        {
          int v7 = *(_DWORD *)(v6 + 16) * *(_DWORD *)(v6 + 12);
          int v8 = *(_DWORD *)(v6 + 20);
        }
        else
        {
          int v7 = *(_DWORD *)(v6 + 12) * *(_DWORD *)(v6 + 8);
          int v8 = *(_DWORD *)(v6 + 16);
        }
        int v15 = v7 * v8;
        uint64_t v16 = *(unsigned int *)(a1 + 344);
        if ((int)v16 >= 1)
        {
          uint64_t v17 = 0;
          uint64_t v18 = *(void *)(*(void *)(v5 + 272) + 16);
          uint64_t v19 = *(float **)(v6 + 24);
          do
          {
            uint64_t v20 = v19;
            uint64_t v21 = v15;
            if (v15 >= 1)
            {
              do
              {
                *uint64_t v20 = *(float *)(v18 + 4 * v17) * *v20;
                ++v20;
                --v21;
              }
              while (v21);
            }
            ++v17;
            v19 += v15;
          }
          while (v17 != v16);
        }
      }
      else
      {
        if (v3[26])
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "not implemented, BN should have been baked");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        uint64_t v9 = v3[30];
        if (v9 && *(int *)(a1 + 344) >= 1)
        {
          uint64_t v10 = 0;
          long long v11 = *(float32x2_t **)(v9 + 16);
          uint64_t v12 = *(void *)(v4 + 16);
          do
          {
            float32x2_t v13 = *v11;
            v14.f32[0] = *(float *)(v12 + 4 * v10) * COERCE_FLOAT(*v11);
            v11->i32[0] = v14.i32[0];
            v14.i32[1] = vmuls_lane_f32(*(float *)(v12 + 4 * v10), v13, 1);
            *v11++ = v14;
            ++v10;
          }
          while (v10 < *(int *)(a1 + 344));
        }
      }
    }
  }
  return result;
}

void sub_19289CAE0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_deconvolution_kernel>::set_quantization_lut_blob(void *a1, uint64_t a2)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v13, 256, 1, 1, 1);
  uint64_t v4 = a1[73];
  uint64_t v5 = v13;
  uint64_t v6 = *(std::__shared_weak_count **)(v4 + 264);
  *(_OWORD *)(v4 + 256) = v13;
  if (!v6)
  {
    uint64_t v7 = v5;
    if (v5) {
      goto LABEL_3;
    }
LABEL_9:
    Espresso::throw_exception_selector<Espresso::memory_error>("Error allocating memory");
  }
  nitro::nitro_function::nitro_function(v6);
  uint64_t v7 = *(void *)(a1[73] + 256);
  if (!v7) {
    goto LABEL_9;
  }
LABEL_3:
  uint64_t v8 = 0;
  uint64_t v9 = *(void *)(*(void *)a2 + 16);
  uint64_t v10 = *(void *)(v7 + 16);
  do
  {
    *(_DWORD *)(v10 + v8) = *(_DWORD *)(v9 + v8);
    v8 += 4;
  }
  while (v8 != 1024);
  long long v11 = *(uint64_t (**)(void *))(*a1 + 624);

  return v11(a1);
}

uint64_t Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_deconvolution_kernel>::set_quantized_weights_blob(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 584);
  uint64_t v5 = *(std::__shared_weak_count **)(v4 + 200);
  *(void *)(v4 + 192) = 0;
  *(void *)(v4 + 200) = 0;
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v6 = *a2;
  uint64_t v7 = (std::__shared_weak_count *)a2[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int32x2_t v64 = v7;
  _X25 = *(char **)(v6 + 24);
  __asm { PRFM            #1, [X25] }
  int v13 = *(_DWORD *)(v6 + 16);
  uint64_t v14 = *(unsigned int *)(v6 + 20);
  uint64_t v16 = *(unsigned int *)(v6 + 8);
  int v15 = *(_DWORD *)(v6 + 12);
  if (v14) {
    _ZF = v13 == 0;
  }
  else {
    _ZF = 1;
  }
  if (_ZF || v15 == 0 || v16 == 0)
  {
    Espresso::blob<unsigned char,4>::copy(&v65, v6);
  }
  else
  {
    uint64_t v20 = v13;
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,4>,std::allocator<Espresso::blob<unsigned char,4>>,int &,int &,int &,int &,Espresso::blob<unsigned char,4>::UnitializedBlobType,void>(&v65, v13, v15, v16, v14);
    uint64_t v21 = *(unsigned char **)(v65 + 24);
    char v22 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 632))(a1);
    if (v22)
    {
      int v23 = *(_DWORD *)(a1 + 420);
      if (v23 <= 1)
      {
        if ((int)v20 >= 1)
        {
          int v49 = 0;
          int v50 = 0;
          int v51 = v14 * (v15 * v16 - 1);
          do
          {
            if (v15 >= 1)
            {
              int v52 = 0;
              int v53 = v49;
              int v54 = v51;
              do
              {
                if ((int)v16 >= 1)
                {
                  uint64_t v55 = 0;
                  int v56 = v54;
                  do
                  {
                    if ((int)v14 >= 1)
                    {
                      uint64_t v57 = &v21[v56];
                      int v58 = v53;
                      uint64_t v59 = v14;
                      do
                      {
                        *v57++ = _X25[v55 + v58];
                        v58 += v15 * v16 * v20;
                        --v59;
                      }
                      while (v59);
                    }
                    ++v55;
                    v56 -= v14;
                  }
                  while (v55 != v16);
                }
                ++v52;
                v54 -= v14 * v16;
                v53 += v16;
              }
              while (v52 != v15);
            }
            ++v50;
            v51 += v15 * v16 * v14;
            v49 += v15 * v16;
          }
          while (v50 != v20);
        }
      }
      else
      {
        int v24 = *(_DWORD *)(a1 + 344);
        if (v24 >= 1)
        {
          int v25 = 0;
          uint64_t v26 = *(unsigned int *)(a1 + 348);
          int v27 = *(_DWORD *)(a1 + 352);
          int v28 = *(_DWORD *)(a1 + 356);
          int v29 = (int)v26 / v23;
          int v30 = v24 / v23;
          int v31 = -((int)v26 / v23);
          int v32 = -1;
          int v33 = v28 * v27 * v24 / v23;
          do
          {
            if (v15 >= 1)
            {
              int v34 = 0;
              int v35 = 0;
              int v36 = v32;
              do
              {
                if ((int)v16 >= 1)
                {
                  int v37 = 0;
                  int v38 = -1;
                  int v39 = v34;
                  do
                  {
                    if ((int)v26 >= 1)
                    {
                      uint64_t v40 = 0;
                      int v41 = v39 + v28 * v27 * (v25 % v30);
                      do
                      {
                        if ((int)v40 / v29 == v25 / v30) {
                          v21[v31 * (v25 / v30)
                        }
                            + (int)v40
                            + v29 * (v38 + *(_DWORD *)(a1 + 352) + v27 * (v36 + *(_DWORD *)(a1 + 356)))] = _X25[v41];
                        ++v40;
                        v41 += v33;
                      }
                      while (v26 != v40);
                    }
                    ++v37;
                    ++v39;
                    --v38;
                  }
                  while (v37 != v16);
                }
                ++v35;
                v34 += v27;
                --v36;
              }
              while (v35 != v15);
            }
            ++v25;
            v32 += v28;
          }
          while (v25 != v24);
        }
      }
    }
    else
    {
      LODWORD(v42) = v16 * v15;
      if ((int)v16 * v15 <= 1) {
        uint64_t v42 = 1;
      }
      else {
        uint64_t v42 = v42;
      }
      if ((int)v20 <= 1) {
        uint64_t v43 = 1;
      }
      else {
        uint64_t v43 = v20;
      }
      do
      {
        uint64_t v44 = 0;
        uint64_t v45 = v21;
        do
        {
          id v46 = v45;
          uint64_t v47 = v42;
          do
          {
            char v48 = *_X25++;
            *id v46 = v48;
            v46 += v20;
            --v47;
          }
          while (v47);
          ++v44;
          ++v45;
        }
        while (v44 != v43);
        v21 += (int)v16 * v15 * (int)v20;
        LODWORD(v14) = v14 - 1;
      }
      while (v14);
    }
  }
  uint64_t v60 = *(void *)(a1 + 584);
  uint64_t v61 = *(std::__shared_weak_count **)(v60 + 184);
  *(_OWORD *)(v60 + 176) = v65;
  if (v61) {
    nitro::nitro_function::nitro_function(v61);
  }
  if (v64) {
    nitro::nitro_function::nitro_function(v64);
  }
  *(_DWORD *)(*(void *)(a1 + 584) + 288) = 8;
  Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_deconvolution_kernel>::scale_weights_for_batch_norm(a1);
  int32x2_t v62 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 624);

  return v62(a1);
}

void sub_19289CF58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_deconvolution_kernel>::set_f16_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 584);
  uint64_t v5 = *(std::__shared_weak_count **)(v4 + 184);
  *(void *)(v4 + 176) = 0;
  *(void *)(v4 + 184) = 0;
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v6 = *a2;
  uint64_t v7 = (std::__shared_weak_count *)a2[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  _X25 = *(__int16 **)(v6 + 24);
  __asm { PRFM            #1, [X25] }
  int v13 = *(_DWORD *)(v6 + 16);
  uint64_t v14 = *(unsigned int *)(v6 + 20);
  uint64_t v16 = *(unsigned int *)(v6 + 8);
  int v15 = *(_DWORD *)(v6 + 12);
  if (v14) {
    _ZF = v13 == 0;
  }
  else {
    _ZF = 1;
  }
  if (_ZF || v15 == 0 || v16 == 0)
  {
    Espresso::blob<unsigned short,4>::copy(&v66, v6);
  }
  else
  {
    uint64_t v20 = v13;
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int &,int &,int &,int &,Espresso::blob<unsigned short,4>::UnitializedBlobType,void>(&v66, v13, v15, v16, v14);
    uint64_t v21 = *(_WORD **)(v66 + 24);
    char v22 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 632))(a1);
    if (v22)
    {
      int v23 = *(_DWORD *)(a1 + 420);
      if (v23 <= 1)
      {
        if ((int)v20 >= 1)
        {
          int v51 = 0;
          int v52 = 0;
          int v53 = v14 * (v15 * v16 - 1);
          do
          {
            if (v15 >= 1)
            {
              int v54 = 0;
              int v55 = v51;
              int v56 = v53;
              do
              {
                if ((int)v16 >= 1)
                {
                  uint64_t v57 = 0;
                  int v58 = v56;
                  do
                  {
                    if ((int)v14 >= 1)
                    {
                      uint64_t v59 = &v21[v58];
                      int v60 = v55;
                      uint64_t v61 = v14;
                      do
                      {
                        *v59++ = _X25[v57 + v60];
                        v60 += v15 * v16 * v20;
                        --v61;
                      }
                      while (v61);
                    }
                    ++v57;
                    v58 -= v14;
                  }
                  while (v57 != v16);
                }
                ++v54;
                v56 -= v14 * v16;
                v55 += v16;
              }
              while (v54 != v15);
            }
            ++v52;
            v53 += v15 * v16 * v14;
            v51 += v15 * v16;
          }
          while (v52 != v20);
        }
      }
      else
      {
        int v24 = *(_DWORD *)(a1 + 344);
        if (v24 >= 1)
        {
          int v25 = 0;
          uint64_t v26 = *(unsigned int *)(a1 + 348);
          int v27 = *(_DWORD *)(a1 + 352);
          int v28 = *(_DWORD *)(a1 + 356);
          int v29 = v28 * v27;
          int v30 = (int)v26 / v23;
          int v31 = v24 / v23;
          int v32 = (int)v26 / v23 * (v28 * v27 - 1);
          int v33 = (int)v26 / v23 * v27;
          int v34 = v33 * v28;
          int v35 = v29 * v24 / v23;
          do
          {
            if (v15 >= 1)
            {
              int v36 = 0;
              int v37 = 0;
              int v38 = v32;
              do
              {
                if ((int)v16 >= 1)
                {
                  int v39 = 0;
                  int v40 = v38;
                  int v41 = v36;
                  do
                  {
                    if ((int)v26 >= 1)
                    {
                      uint64_t v42 = 0;
                      int v43 = v41 + v29 * (v25 % v31);
                      do
                      {
                        if ((int)v42 / v30 == v25 / v31) {
                          v21[v40 - v25 / v31 * v30 + (int)v42] = _X25[v43];
                        }
                        ++v42;
                        v43 += v35;
                      }
                      while (v26 != v42);
                    }
                    ++v39;
                    ++v41;
                    v40 -= v30;
                  }
                  while (v39 != v16);
                }
                ++v37;
                v36 += v27;
                v38 -= v33;
              }
              while (v37 != v15);
            }
            ++v25;
            v32 += v34;
          }
          while (v25 != v24);
        }
      }
    }
    else
    {
      LODWORD(v44) = v16 * v15;
      if ((int)v16 * v15 <= 1) {
        uint64_t v44 = 1;
      }
      else {
        uint64_t v44 = v44;
      }
      if ((int)v20 <= 1) {
        uint64_t v45 = 1;
      }
      else {
        uint64_t v45 = v20;
      }
      do
      {
        uint64_t v46 = 0;
        uint64_t v47 = v21;
        do
        {
          char v48 = v47;
          uint64_t v49 = v44;
          do
          {
            __int16 v50 = *_X25++;
            _WORD *v48 = v50;
            v48 += v20;
            --v49;
          }
          while (v49);
          ++v46;
          ++v47;
        }
        while (v46 != v45);
        v21 += (int)v16 * v15 * (int)v20;
        LODWORD(v14) = v14 - 1;
      }
      while (v14);
    }
  }
  uint64_t v62 = *(void *)(a1 + 584);
  uint64_t v63 = *(std::__shared_weak_count **)(v62 + 216);
  *(_OWORD *)(v62 + 208) = v66;
  if (v63) {
    nitro::nitro_function::nitro_function(v63);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  *(_DWORD *)(*(void *)(a1 + 584) + 288) = 268435472;
  Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_deconvolution_kernel>::scale_weights_for_batch_norm(a1);
  int32x2_t v64 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 624);

  return v64(a1);
}

void sub_19289D304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_deconvolution_kernel>::set_weights()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "use set_weights(blob_f4::ptr blob_in)");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_19289D378(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_deconvolution_kernel>::set_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 584);
  uint64_t v5 = *(std::__shared_weak_count **)(v4 + 184);
  *(void *)(v4 + 176) = 0;
  *(void *)(v4 + 184) = 0;
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v6 = *a2;
  uint64_t v7 = (std::__shared_weak_count *)a2[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  _X25 = *(int **)(v6 + 24);
  __asm { PRFM            #1, [X25] }
  int v13 = *(_DWORD *)(v6 + 16);
  uint64_t v14 = *(unsigned int *)(v6 + 20);
  uint64_t v16 = *(unsigned int *)(v6 + 8);
  int v15 = *(_DWORD *)(v6 + 12);
  if (v14) {
    _ZF = v13 == 0;
  }
  else {
    _ZF = 1;
  }
  if (_ZF || v15 == 0 || v16 == 0)
  {
    Espresso::blob<float,4>::copy(&v66, v6);
  }
  else
  {
    uint64_t v20 = v13;
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,Espresso::blob<float,4>::UnitializedBlobType,void>(&v66, v13, v15, v16, v14);
    uint64_t v21 = *(_DWORD **)(v66 + 24);
    char v22 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 632))(a1);
    if (v22)
    {
      int v23 = *(_DWORD *)(a1 + 420);
      if (v23 <= 1)
      {
        if ((int)v20 >= 1)
        {
          int v51 = 0;
          int v52 = 0;
          int v53 = v14 * (v15 * v16 - 1);
          do
          {
            if (v15 >= 1)
            {
              int v54 = 0;
              int v55 = v51;
              int v56 = v53;
              do
              {
                if ((int)v16 >= 1)
                {
                  uint64_t v57 = 0;
                  int v58 = v56;
                  do
                  {
                    if ((int)v14 >= 1)
                    {
                      uint64_t v59 = &v21[v58];
                      int v60 = v55;
                      uint64_t v61 = v14;
                      do
                      {
                        *v59++ = _X25[v57 + v60];
                        v60 += v15 * v16 * v20;
                        --v61;
                      }
                      while (v61);
                    }
                    ++v57;
                    v58 -= v14;
                  }
                  while (v57 != v16);
                }
                ++v54;
                v56 -= v14 * v16;
                v55 += v16;
              }
              while (v54 != v15);
            }
            ++v52;
            v53 += v15 * v16 * v14;
            v51 += v15 * v16;
          }
          while (v52 != v20);
        }
      }
      else
      {
        int v24 = *(_DWORD *)(a1 + 344);
        if (v24 >= 1)
        {
          int v25 = 0;
          uint64_t v26 = *(unsigned int *)(a1 + 348);
          int v27 = *(_DWORD *)(a1 + 352);
          int v28 = *(_DWORD *)(a1 + 356);
          int v29 = v28 * v27;
          int v30 = (int)v26 / v23;
          int v31 = v24 / v23;
          int v32 = (int)v26 / v23 * (v28 * v27 - 1);
          int v33 = (int)v26 / v23 * v27;
          int v34 = v33 * v28;
          int v35 = v29 * v24 / v23;
          do
          {
            if (v15 >= 1)
            {
              int v36 = 0;
              int v37 = 0;
              int v38 = v32;
              do
              {
                if ((int)v16 >= 1)
                {
                  int v39 = 0;
                  int v40 = v38;
                  int v41 = v36;
                  do
                  {
                    if ((int)v26 >= 1)
                    {
                      uint64_t v42 = 0;
                      int v43 = v41 + v29 * (v25 % v31);
                      do
                      {
                        if ((int)v42 / v30 == v25 / v31) {
                          v21[v40 - v25 / v31 * v30 + (int)v42] = _X25[v43];
                        }
                        ++v42;
                        v43 += v35;
                      }
                      while (v26 != v42);
                    }
                    ++v39;
                    ++v41;
                    v40 -= v30;
                  }
                  while (v39 != v16);
                }
                ++v37;
                v36 += v27;
                v38 -= v33;
              }
              while (v37 != v15);
            }
            ++v25;
            v32 += v34;
          }
          while (v25 != v24);
        }
      }
    }
    else
    {
      LODWORD(v44) = v16 * v15;
      if ((int)v16 * v15 <= 1) {
        uint64_t v44 = 1;
      }
      else {
        uint64_t v44 = v44;
      }
      if ((int)v20 <= 1) {
        uint64_t v45 = 1;
      }
      else {
        uint64_t v45 = v20;
      }
      do
      {
        uint64_t v46 = 0;
        uint64_t v47 = v21;
        do
        {
          char v48 = v47;
          uint64_t v49 = v44;
          do
          {
            int v50 = *_X25++;
            _DWORD *v48 = v50;
            v48 += v20;
            --v49;
          }
          while (v49);
          ++v46;
          ++v47;
        }
        while (v46 != v45);
        v21 += (int)v16 * v15 * (int)v20;
        LODWORD(v14) = v14 - 1;
      }
      while (v14);
    }
  }
  uint64_t v62 = *(void *)(a1 + 584);
  uint64_t v63 = *(std::__shared_weak_count **)(v62 + 200);
  *(_OWORD *)(v62 + 192) = v66;
  if (v63) {
    nitro::nitro_function::nitro_function(v63);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  *(_DWORD *)(*(void *)(a1 + 584) + 288) = 268435488;
  Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_deconvolution_kernel>::scale_weights_for_batch_norm(a1);
  int32x2_t v64 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 624);

  return v64(a1);
}

void sub_19289D708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_deconvolution_kernel>::set_biases(uint64_t a1, void *a2)
{
  if (*(_DWORD *)(a1 + 416))
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v22, *(_DWORD *)(a1 + 344), 1, 1, 1);
    uint64_t v4 = *((void *)&v22 + 1);
    uint64_t v5 = v22;
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,void>(&v22, *(_DWORD *)(a1 + 344));
    uint64_t v6 = *(void *)(a1 + 584);
    uint64_t v7 = v22;
    uint64_t v8 = *(std::__shared_weak_count **)(v6 + 280);
    *(_OWORD *)(v6 + 272) = v22;
    if (v8)
    {
      nitro::nitro_function::nitro_function(v8);
      uint64_t v9 = *(void *)(*(void *)(a1 + 584) + 272);
      if (v9) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v9 = v7;
      if (v7)
      {
LABEL_4:
        uint64_t v10 = *(unsigned int *)(a1 + 344);
        if ((int)v10 >= 1)
        {
          long long v11 = *(float **)(v9 + 16);
          uint64_t v12 = *(float **)(v5 + 16);
          int v13 = (float *)(*(void *)(*a2 + 16) + 8);
          do
          {
            float v14 = *(v13 - 2);
            float v15 = *(v13 - 1);
            float v16 = *v13;
            float v17 = v13[1];
            v13 += 4;
            float v18 = 1.0 / v17;
            *v11++ = v14 * v18;
            *v12++ = v15 + (float)((float)-(float)(v16 * v18) * v14);
            --v10;
          }
          while (v10);
        }
        goto LABEL_10;
      }
    }
    Espresso::throw_exception_selector<Espresso::memory_error>("Error allocating memory");
  }
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
LABEL_10:
  uint64_t v19 = *(void *)(a1 + 584);
  uint64_t v20 = *(std::__shared_weak_count **)(v19 + 232);
  *(void *)(v19 + 224) = v5;
  *(void *)(v19 + 232) = v4;
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_deconvolution_kernel>::scale_weights_for_batch_norm(a1);
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 624))(a1);
}

void sub_19289D88C(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSEngine::deconvolution_kernel::__set_weights_finalize(void *a1, uint64_t *a2)
{
  uint64_t v3 = a1[75];
  if (!v3) {
    return;
  }
  if (!*(void *)v3) {
    return;
  }
  uint64_t v5 = *(void *)(v3 + 32);
  if (!v5 && !*(void *)(v3 + 48) && !*(void *)(v3 + 64) && !*(void *)(v3 + 80)) {
    return;
  }
  if (*(_DWORD *)(a1[1] + 76))
  {
    Espresso::quantized_weights_helper::dequantize_to_float32_4d((Espresso::quantized_weights_helper *)v3, &v18);
    (*(void (**)(void *, uint64_t *))(*a1 + 400))(a1, &v18);
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
    return;
  }
  if (*(int *)(v3 + 156) <= 7)
  {
    Espresso::quantized_weights_helper::make_uint8_weight_from_raw((Espresso::quantized_weights_helper *)v3);
    uint64_t v3 = a1[75];
    uint64_t v5 = *(void *)(v3 + 32);
  }
  if (v5 || *(void *)(v3 + 48) || *(void *)(v3 + 64) || !*(void *)(v3 + 80))
  {
    uint64_t v6 = *(std::__shared_weak_count **)(v3 + 40);
    uint64_t v29 = v5;
    int v30 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = (std::__shared_weak_count *)a2[1];
    uint64_t v27 = *a2;
    int v28 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *, uint64_t *, uint64_t *))(*a1 + 576))(a1, &v29, &v27);
    if (v28) {
      nitro::nitro_function::nitro_function(v28);
    }
    uint64_t v8 = v30;
    if (v30) {
      goto LABEL_22;
    }
  }
  else
  {
    Espresso::quantized_weights_helper::get_per_ch_ranges((Espresso::quantized_weights_helper *)v3, v24);
    float v15 = (std::__shared_weak_count *)*((void *)&v24[0] + 1);
    long long v33 = v24[0];
    if (*((void *)&v24[0] + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v24[0] + 1) + 8), 1uLL, memory_order_relaxed);
    }
    float v16 = (std::__shared_weak_count *)a2[1];
    uint64_t v31 = *a2;
    int v32 = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *, long long *, uint64_t *))(*a1 + 592))(a1, &v33, &v31);
    if (v32) {
      nitro::nitro_function::nitro_function(v32);
    }
    if (*((void *)&v33 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v33 + 1));
    }
    if (v15)
    {
      uint64_t v8 = v15;
LABEL_22:
      nitro::nitro_function::nitro_function(v8);
    }
  }
  (*(void (**)(_OWORD *__return_ptr, void *))(*a1 + 464))(v24, a1);
  long long v17 = v24[0];
  uint64_t v9 = (int *)a1[75];
  if (v9[40] >= 1)
  {
    uint64_t v10 = *((void *)v9 + 2);
    if (v10)
    {
      long long v11 = (std::__shared_weak_count *)*((void *)v9 + 3);
      if (!v11) {
        goto LABEL_29;
      }
      goto LABEL_28;
    }
  }
  uint64_t v10 = *(void *)v9;
  long long v11 = (std::__shared_weak_count *)*((void *)v9 + 1);
  if (v11) {
LABEL_28:
  }
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_29:
  uint64_t v12 = (std::__shared_weak_count *)operator new(0x60uLL);
  v12->__shared_weak_owners_ = 0;
  v12->__shared_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389B18;
  int v13 = *(std::__shared_weak_count_vtbl **)(v10 + 16);
  v12[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36BFD0;
  *(_OWORD *)&v12[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v12[3].__shared_owners_ = 0u;
  *(_OWORD *)&v12[1].__shared_owners_ = v17;
  v12[2].__vftable = v13;
  LOBYTE(v12[2].__shared_owners_) = 0;
  long long v22 = v12 + 1;
  int v23 = v12;
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  float v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v20 = *a2;
  uint64_t v21 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void *, std::__shared_weak_count **, uint64_t *))(*a1 + 560))(a1, &v22, &v20);
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  nitro::nitro_function::nitro_function(v12);
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (__p)
  {
    uint64_t v26 = __p;
    operator delete(__p);
  }
}

void sub_19289DC38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v29 = *(std::__shared_weak_count **)(v27 - 88);
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  int v30 = *(std::__shared_weak_count **)(v27 - 72);
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSEngine::deconvolution_kernel::__set_weight_raw_blob(uint64_t *a1, uint64_t *a2, unsigned __int8 *a3, void *a4, unint64_t a5, uint64_t *a6)
{
  Espresso::generic_convolution_kernel::__set_weight_raw_blob((uint64_t)a1, a2, a3, a4, a5, a6);
  long long v11 = a1 + 75;
  uint64_t v12 = (*(void *(**)(long long *__return_ptr, uint64_t *))(*a1 + 464))(v19, a1);
  uint64_t v16 = a1[1];
  long long v17 = (std::__shared_weak_count *)a1[2];
  v18[0] = v16;
  v18[1] = (uint64_t)v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::set_conv_quantized_weight_helper(v13, v14, v15, (uint64_t)v12, (unsigned __int8 **)a3, (char *)a4, a5, a6, v11, v19, v18, 1, 0);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  if (__p)
  {
    uint64_t v21 = __p;
    operator delete(__p);
  }
}

void sub_19289DDD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSEngine::deconvolution_kernel::clear_weights(Espresso::MPSEngine::deconvolution_kernel *this)
{
  v1 = (void *)*((void *)this + 75);
  if (v1 && *v1 && (v1[4] || v1[6] || v1[8] || v1[10]))
  {
    uint64_t v3 = (std::__shared_weak_count *)v1[1];
    void *v1 = 0;
    v1[1] = 0;
    if (v3) {
      nitro::nitro_function::nitro_function(v3);
    }
    uint64_t v4 = *((void *)this + 75);
    uint64_t v5 = *(std::__shared_weak_count **)(v4 + 24);
    *(void *)(v4 + 16) = 0;
    *(void *)(v4 + 24) = 0;
    if (v5)
    {
      nitro::nitro_function::nitro_function(v5);
    }
  }
}

void Espresso::MPSEngine::deconvolution_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  if (!*(void *)(a1 + 592))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 624))(a1);
    if (!*(void *)(a1 + 592))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "The mps kernel was not created");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  uint64_t v8 = *a3;
  if (*(void *)v8)
  {
    if (v9)
    {
      uint64_t v10 = *(std::__shared_weak_count **)(v8 + 8);
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
  }
  uint64_t v11 = *a4;
  uint64_t v12 = *(_DWORD **)v11;
  int v43 = v10;
  uint64_t v39 = a2;
  if (*(void *)v11
  {
    uint64_t v42 = *(std::__shared_weak_count **)(v11 + 8);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v42 = 0;
  }
  int v14 = *(_DWORD *)(a1 + 352);
  int v15 = *(__int16 *)(a1 + 400);
  int v16 = *(__int16 *)(a1 + 402);
  if (v16 > 1) {
    int v17 = (*(_DWORD *)(a1 + 356) - 1) * v16 + 1;
  }
  else {
    int v17 = *(_DWORD *)(a1 + 356);
  }
  int v18 = *(__int16 *)(a1 + 398);
  int v20 = v12[2];
  int v19 = v12[3];
  int v41 = *(__int16 *)(a1 + 396);
  int v21 = *((_DWORD *)v9 + 2);
  int v22 = *((_DWORD *)v9 + 3);
  int v40 = v9;
  if (v17 >= 1) {
    int v23 = v17 - 1;
  }
  else {
    int v23 = v17;
  }
  uint64_t v24 = objc_msgSend(*(id *)(a1 + 592), "kernelOffsetX", v12);
  signed int v25 = (((v17 - v22 + (v19 - 1) * v18) & ~((v17 - v22 + (v19 - 1) * v18) >> 31)) >> 1) - (v23 >> 1);
  if (v15 > 1) {
    int v26 = (v14 - 1) * v15 + 1;
  }
  else {
    int v26 = v14;
  }
  unsigned int v27 = ((v26 - v21 + (v20 - 1) * v41) & ~((v26 - v21 + (v20 - 1) * v41) >> 31)) >> 1;
  if (v26 >= 1) {
    --v26;
  }
  signed int v28 = v27 - (v26 >> 1);
  if (v24 != v28 || [*(id *)(a1 + 592) kernelOffsetY] != v25)
  {
    [*(id *)(a1 + 592) setKernelOffsetX:v28];
    [*(id *)(a1 + 592) setKernelOffsetY:v25];
  }
  if (*(void *)v39)
  {
    int v30 = v40;
    if (v29)
    {
      uint64_t v31 = *(std::__shared_weak_count **)(v39 + 8);
      if (v31) {
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v31 = 0;
    }
  }
  else
  {
    uint64_t v29 = 0;
    uint64_t v31 = 0;
    int v30 = v40;
  }
  unint64_t v32 = [v30[32] count];
  long long v33 = *(void **)(a1 + 592);
  uint64_t v34 = v29[18];
  if (v32 >= 2)
  {
    [v33 encodeBatchToCommandBuffer:v34 sourceImages:*(void *)(v38 + 256) convolutionGradientStates:0 destinationImages:v30[32]];
    if (!v31) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  id v35 = *(id *)(v38 + 240);
  id v36 = v30[30];
  [v33 encodeToCommandBuffer:v34 sourceImage:v35 destinationImage:v36];

  if (v31) {
LABEL_36:
  }
    nitro::nitro_function::nitro_function(v31);
LABEL_37:
  if (v42) {
    nitro::nitro_function::nitro_function(v42);
  }
  if (v43)
  {
    nitro::nitro_function::nitro_function(v43);
  }
}

void sub_19289E258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::deconvolution_kernel::~deconvolution_kernel(Espresso::MPSEngine::deconvolution_kernel *this)
{
  *(void *)this = &unk_1EE373A30;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 76);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 72);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE373A30;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 76);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 72);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)this);
}

void Espresso::MPSEngine::pool_kernel::on_resized(Espresso::MPSEngine::pool_kernel *this, uint64_t a2, uint64_t a3)
{
  if (*((_DWORD *)this + 90)) {
    *(void *)((char *)this + 308) = *(void *)(**(void **)a3 + 8);
  }
  Espresso::MPSEngine::pool_kernel::recreate_kernel(this);
}

void Espresso::MPSEngine::pool_kernel::__launch(uint64_t a1, uint64_t a2, const void ***a3, uint64_t *a4, int32x2_t a5, __n128 a6)
{
  uint64_t v9 = *a3;
  uint64_t v10 = **a3;
  if (!v10)
  {
    uint64_t v11 = 0;
    goto LABEL_6;
  }
  if (!v11)
  {
LABEL_6:
    uint64_t v12 = 0;
    goto LABEL_7;
  }
  uint64_t v12 = (std::__shared_weak_count *)v9[1];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  uint64_t v13 = *a4;
  if (!*(void *)v13)
  {
    int v14 = 0;
    goto LABEL_12;
  }
  if (!v14)
  {
LABEL_12:
    int v15 = 0;
    goto LABEL_13;
  }
  int v15 = *(std::__shared_weak_count **)(v13 + 8);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_13:
  if (!*(void *)a2)
  {
    int v16 = 0;
    goto LABEL_18;
  }
  if (!v16)
  {
LABEL_18:
    int v17 = 0;
    goto LABEL_19;
  }
  int v17 = *(std::__shared_weak_count **)(a2 + 8);
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_19:
  int32x2_t v18 = *(int32x2_t *)(a1 + 308);
  int v19 = *(__int16 *)(a1 + 340);
  switch(v19)
  {
    case 4:
LABEL_22:
      int32x2_t v20 = vmax_s32(vmla_s32(vsub_s32(v18, v14[1]), vadd_s32(v11[1], (int32x2_t)-1), *(int32x2_t *)(a1 + 320)), 0);
      int32x2_t v21 = (int32x2_t)vshr_n_u32((uint32x2_t)v20, 1uLL);
      a6.n128_u64[0] = (unint64_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(*(unsigned __int16 *)(a1 + 340) == 1), 0x1FuLL)), (int8x8_t)v21, (int8x8_t)vsub_s32(v20, v21));
      break;
    case 2:
      a6 = 0uLL;
      break;
    case 1:
      goto LABEL_22;
    default:
      a5.i16[0] = *(_WORD *)(a1 + 348);
      a5.i16[2] = *(_WORD *)(a1 + 352);
      a6.n128_u64[0] = (unint64_t)vshr_n_s32(vshl_n_s32(a5, 0x10uLL), 0x10uLL);
      break;
  }
  if (!*(_DWORD *)(a1 + 304))
  {
    __n128 v32 = a6;
    id v22 = *(id *)(a1 + 432);
    int v23 = v22;
    if (!*(_DWORD *)(a1 + 332))
    {
      [v22 setZeroPadSizeX:v32.n128_i32[0]];
      [v23 setZeroPadSizeY:v32.n128_i32[1]];
    }

    a6.n128_u64[0] = v32.n128_u64[0];
  }
  int32x2_t v24 = vsub_s32(vshr_n_s32((int32x2_t)vsra_n_u32((uint32x2_t)v18, (uint32x2_t)v18, 0x1FuLL), 1uLL), (int32x2_t)a6.n128_u64[0]);
  signed int v25 = *(void **)(a1 + 432);
  *(void *)&long long v26 = v24.i32[0];
  *((void *)&v26 + 1) = v24.i32[1];
  long long v33 = v26;
  uint64_t v34 = 0;
  objc_msgSend(v25, "setOffset:", &v33, *(_OWORD *)&v32);
  unint64_t v27 = [*(id *)&v11[32] count];
  signed int v28 = *(void **)(a1 + 432);
  uint64_t v29 = v16[18];
  if (v27 >= 2)
  {
    [v28 encodeBatchToCommandBuffer:v29 sourceImages:*(void *)&v14[32] destinationImages:*(void *)&v11[32]];
    if (!v17) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  id v30 = *(id *)&v14[30];
  id v31 = *(id *)&v11[30];
  [v28 encodeToCommandBuffer:v29 sourceImage:v30 destinationImage:v31];

  if (v17) {
LABEL_31:
  }
    nitro::nitro_function::nitro_function(v17);
LABEL_32:
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_19289E70C(_Unwind_Exception *a1)
{
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
    if (!v2)
    {
LABEL_3:
      if (!v1) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v2);
  if (!v1) {
LABEL_5:
  }
    _Unwind_Resume(a1);
LABEL_4:
  nitro::nitro_function::nitro_function(v1);
  goto LABEL_5;
}

void Espresso::MPSEngine::pool_kernel::~pool_kernel(id *this)
{
  Espresso::generic_pool_kernel::~generic_pool_kernel((Espresso::generic_pool_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::generic_pool_kernel::~generic_pool_kernel((Espresso::generic_pool_kernel *)this);
}

void Espresso::MPSEngine::lrn_kernel::__launch(uint64_t a1, uint64_t a2, const void ***a3, uint64_t *a4)
{
  uint64_t v7 = *a3;
  uint64_t v8 = **a3;
  if (!v8)
  {
    uint64_t v9 = 0;
    goto LABEL_6;
  }
  if (!v9)
  {
LABEL_6:
    uint64_t v10 = 0;
    goto LABEL_7;
  }
  uint64_t v10 = (std::__shared_weak_count *)v7[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  uint64_t v11 = *a4;
  if (!*(void *)v11)
  {
    uint64_t v12 = 0;
    goto LABEL_12;
  }
  if (!v12)
  {
LABEL_12:
    uint64_t v13 = 0;
    goto LABEL_13;
  }
  uint64_t v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_13:
  if (!*(void *)a2)
  {
    int v14 = 0;
    goto LABEL_18;
  }
  if (!v14)
  {
LABEL_18:
    int v15 = 0;
    goto LABEL_19;
  }
  int v15 = *(std::__shared_weak_count **)(a2 + 8);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_19:
  unint64_t v16 = [v9[32] count];
  int v17 = *(void **)(a1 + 312);
  uint64_t v18 = v14[18];
  if (v16 >= 2)
  {
    [v17 encodeBatchToCommandBuffer:v18 sourceImages:*((void *)v12 + 32) destinationImages:v9[32]];
    if (!v15) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  id v19 = *((id *)v12 + 30);
  id v20 = v9[30];
  [v17 encodeToCommandBuffer:v18 sourceImage:v19 destinationImage:v20];

  if (v15) {
LABEL_21:
  }
    nitro::nitro_function::nitro_function(v15);
LABEL_22:
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v10)
  {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_19289EA38(_Unwind_Exception *a1)
{
  if (v4)
  {
    nitro::nitro_function::nitro_function(v4);
    if (!v2)
    {
LABEL_3:
      if (!v1) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v2);
  if (!v1) {
LABEL_5:
  }
    _Unwind_Resume(a1);
LABEL_4:
  nitro::nitro_function::nitro_function(v1);
  goto LABEL_5;
}

void Espresso::MPSEngine::lrn_kernel::~lrn_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

BOOL Espresso::MPSEngine::softmax_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (*a3 == a3[1])
  {
    BOOL v5 = 1;
  }
  else
  {
    int v4 = *(_DWORD *)(v3 + 20);
    if (v4 == -1)
    {
      if (*(_DWORD *)(v3 + 16) == 1) {
        int v4 = 4;
      }
      else {
        int v4 = 5;
      }
    }
    BOOL v5 = v4 > 3;
  }
  return !*(unsigned char *)(a1 + 307) && v5;
}

void Espresso::MPSEngine::softmax_kernel::on_resized(void *a1, void *a2, void *a3)
{
  if (a3[1] - *a3 >= 0x11uLL && a2[1] - *a2 >= 0x11uLL)
  {
    int v4 = (const void *)a1[1];
    if (!v4) {
      goto LABEL_26;
    }
    if (!v5) {
      goto LABEL_26;
    }
    uint64_t v6 = (std::__shared_weak_count *)a1[2];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = [v5[20] kernelForFunction:"softmax_loss_index_single_tex" cacheString:0 withConstants:0];
    uint64_t v8 = (void *)a1[47];
    a1[47] = v7;

    if (v6) {
      nitro::nitro_function::nitro_function(v6);
    }
    uint64_t v9 = (const void *)a1[1];
    if (!v9) {
      goto LABEL_26;
    }
    if (!v10) {
      goto LABEL_26;
    }
    uint64_t v11 = (std::__shared_weak_count *)a1[2];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = [v10[20] kernelForFunction:"softmax_loss_index_batch" cacheString:0 withConstants:0];
    uint64_t v13 = (void *)a1[48];
    a1[48] = v12;

    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    int v14 = (const void *)a1[1];
    if (!v14
    {
LABEL_26:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
    }
    unint64_t v16 = (std::__shared_weak_count *)a1[2];
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v17 = [v15[18] newBufferWithLength:16 options:0];
    uint64_t v18 = (void *)a1[49];
    a1[49] = v17;

    if (v16) {
      nitro::nitro_function::nitro_function(v16);
    }
    id v19 = (std::__shared_weak_count *)a1[51];
    a1[50] = 0;
    a1[51] = 0;
    if (v19)
    {
      nitro::nitro_function::nitro_function(v19);
    }
  }
}

void sub_19289EDFC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::softmax_kernel::__launch(uint64_t a1, uint64_t a2, const void ***a3, const void ***a4)
{
  uint64_t v8 = *a3;
  uint64_t v9 = **a3;
  if (v9)
  {
    if (v10)
    {
      uint64_t v11 = (std::__shared_weak_count *)v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
  }
  uint64_t v12 = *a4;
  uint64_t v13 = **a4;
  if (!v13)
  {
    int v14 = 0;
    goto LABEL_12;
  }
  if (!v14)
  {
LABEL_12:
    int v15 = 0;
    goto LABEL_13;
  }
  int v15 = (std::__shared_weak_count *)v12[1];
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_13:
  uint64_t v67 = a2;
  if (*(void *)a2
  {
    unint64_t v16 = *(std::__shared_weak_count **)(a2 + 8);
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    int32x2_t v68 = 0;
    unint64_t v16 = 0;
  }
  if (*((int *)v10 + 4) > 3)
  {
    int32x2_t v21 = (void *)*((void *)v10 + 32);
    long long v65 = v16;
    if (*(_DWORD *)(a1 + 300))
    {
      unint64_t v22 = [v21 count];
      int v23 = *(void **)(a1 + 344);
      uint64_t v24 = v68[18];
      if (v22 <= 1) {
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v25 = [v21 count];
      int v23 = *(void **)(a1 + 336);
      uint64_t v24 = v68[18];
      if (v25 < 2)
      {
LABEL_28:
        id v27 = v14[30];
        id v28 = *((id *)v10 + 30);
        [v23 encodeToCommandBuffer:v24 sourceImage:v27 destinationImage:v28];
        unint64_t v16 = v65;

        goto LABEL_29;
      }
    }
    uint64_t v26 = v24;
    unint64_t v16 = v65;
    [v23 encodeBatchToCommandBuffer:v26 sourceImages:v14[32] destinationImages:*((void *)v10 + 32)];
    goto LABEL_29;
  }
  uint64_t v17 = *(void *)(a1 + 352);
  if (!v17)
  {
    uint64_t v18 = (char *)operator new(0x1A8uLL);
    *((void *)v18 + 1) = 0;
    *((void *)v18 + 2) = 0;
    *(void *)uint64_t v18 = &unk_1EE38CCF8;
    *(_OWORD *)uint64_t v79 = *(_OWORD *)(a1 + 280);
    *(_OWORD *)&v79[12] = *(_OWORD *)(a1 + 292);
    uint64_t v17 = Espresso::base_kernel::base_kernel((uint64_t)(v18 + 24), (uint64_t *)(a1 + 8));
    *((_DWORD *)v18 + 83) = 0;
    v18[336] = 0;
    *((void *)v18 + 43) = 0;
    *((void *)v18 + 44) = 0;
    *((void *)v18 + 45) = 0;
    *((void *)v18 + 46) = 0;
    *((_OWORD *)v18 + 19) = *(_OWORD *)v79;
    *(_OWORD *)(v18 + 316) = *(_OWORD *)&v79[12];
    *((void *)v18 + 3) = &unk_1EE375328;
    *(_OWORD *)(v18 + 376) = 0u;
    *(_OWORD *)(v18 + 392) = 0u;
    *(_OWORD *)(v18 + 408) = 0u;
    *(void *)&long long v19 = v17;
    *((void *)&v19 + 1) = v18;
    id v20 = *(std::__shared_weak_count **)(a1 + 360);
    *(_OWORD *)(a1 + 352) = v19;
    if (v20)
    {
      nitro::nitro_function::nitro_function(v20);
      uint64_t v17 = *(void *)(a1 + 352);
    }
  }
  (*(void (**)(uint64_t, uint64_t, const void ***, const void ***))(*(void *)v17 + 16))(v17, a2, a3, a4);
LABEL_29:
  uint64_t v29 = *a4;
  if ((unint64_t)((char *)a4[1] - (char *)*a4) < 0x11) {
    goto LABEL_56;
  }
  id v30 = *a3;
  if ((unint64_t)((char *)a3[1] - (char *)*a3) < 0x11) {
    goto LABEL_56;
  }
  id v31 = v29[2];
  if (!v31)
  {
    __n128 v32 = 0;
LABEL_36:
    uint64_t v62 = 0;
    goto LABEL_37;
  }
  if (!v32) {
    goto LABEL_36;
  }
  long long v33 = (atomic_ullong *)v29[3];
  if (!v33) {
    goto LABEL_36;
  }
  uint64_t v62 = (std::__shared_weak_count *)v29[3];
  atomic_fetch_add_explicit(v33 + 1, 1uLL, memory_order_relaxed);
  id v30 = *a3;
LABEL_37:
  uint64_t v34 = v30[2];
  if (!v34
  {
    uint64_t v69 = 0;
    goto LABEL_42;
  }
  id v35 = (atomic_ullong *)v30[3];
  if (!v35)
  {
LABEL_42:
    uint64_t v61 = 0;
    goto LABEL_43;
  }
  uint64_t v61 = (std::__shared_weak_count *)v30[3];
  atomic_fetch_add_explicit(v35 + 1, 1uLL, memory_order_relaxed);
LABEL_43:
  int32x2_t v64 = v11;
  long long v66 = v16;
  uint64_t v63 = v15;
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v80, (uint64_t)v68);
  id v36 = v80[0];
  *(void *)&v79[8] = 0;
  *(void *)&v79[24] = 0;
  *(_DWORD *)&v79[16] = 0;
  *(void *)uint64_t v79 = *((void *)v10 + 1);
  int v37 = *((_DWORD *)v10 + 4);
  int v38 = *((_DWORD *)v10 + 6);
  if (v38 <= 1) {
    int v38 = 1;
  }
  unsigned int v39 = v38 * *((_DWORD *)v10 + 5);
  *(_DWORD *)&v79[8] = *((_DWORD *)v10 + 4);
  *(_DWORD *)&v79[12] = v39;
  int v41 = v37 - 1;
  BOOL v40 = v37 < 1;
  int v42 = v37 + 2;
  if (!v40) {
    int v42 = v41;
  }
  *(_DWORD *)&v79[16] = (v42 >> 2) + 1;
  *(float *)&v79[20] = 1.0 / (float)v39;
  *(_DWORD *)&v79[24] = [*((id *)v10 + 32) count];
  if ([*((id *)v10 + 32) count] == 1)
  {
    [v36 setComputePipelineState:*(void *)(a1 + 376)];
    int v43 = [*((id *)v10 + 32) objectAtIndexedSubscript:0];
    uint64_t v44 = [v43 texture];
    [v36 setTexture:v44 atIndex:0];

    uint64_t v45 = [v32[32] objectAtIndexedSubscript:0];
    uint64_t v46 = [v45 texture];
    [v36 setTexture:v46 atIndex:1];

    uint64_t v47 = [v69[32] objectAtIndexedSubscript:0];
    char v48 = [v47 texture];
    [v36 setTexture:v48 atIndex:2];

    [v36 setBytes:v79 length:32 atIndex:0];
    int64x2_t v49 = vdupq_n_s64(1uLL);
    int64x2_t v77 = v49;
    uint64_t v78 = 1;
    if (*(_DWORD *)&v79[12] >= 0x40u) {
      uint64_t v50 = 64;
    }
    else {
      uint64_t v50 = *(unsigned int *)&v79[12];
    }
    uint64_t v75 = v50;
    int64x2_t v76 = v49;
    [v36 dispatchThreadgroups:&v77 threadsPerThreadgroup:&v75];
  }
  else
  {
    for (unint64_t i = 0; i < (([*((id *)v10 + 32) count] - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4; i += 4)
    {
      [v36 setComputePipelineState:*(void *)(a1 + 384)];
      uint64_t v53 = 0;
      unint64_t v54 = i;
      do
      {
        if (v54 >= [*((id *)v10 + 32) count])
        {
          [v36 setTexture:0 atIndex:v53];
          [v36 setTexture:0 atIndex:v53 + 1];
        }
        else
        {
          int v55 = [*((id *)v10 + 32) objectAtIndexedSubscript:v54];
          int v56 = [v55 texture];
          [v36 setTexture:v56 atIndex:v53];

          uint64_t v57 = [v32[32] objectAtIndexedSubscript:v54];
          int v58 = [v57 texture];
          [v36 setTexture:v58 atIndex:v53 + 1];
        }
        v53 += 2;
        ++v54;
      }
      while (v53 != 8);
      *(_DWORD *)&v79[28] = i;
      uint64_t v59 = [v69[32] objectAtIndexedSubscript:0];
      int v60 = [v59 texture];
      [v36 setTexture:v60 atIndex:8];

      [v36 setBytes:v79 length:32 atIndex:0];
      [v36 setBuffer:*(void *)(a1 + 392) offset:0 atIndex:1];
      int64x2_t v73 = vdupq_n_s64(1uLL);
      uint64_t v74 = 1;
      int64x2_t v71 = v73;
      uint64_t v72 = 1;
      [v36 dispatchThreadgroups:&v73 threadsPerThreadgroup:&v71];
    }
  }

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v80);
  (*((void (**)(id *, uint64_t, uint64_t))*v69 + 5))(v69, v67, a1 + 400);
  int v51 = (void *)v68[18];
  v70[0] = MEMORY[0x1E4F143A8];
  v70[1] = 3221225472;
  v70[2] = ___ZN8Espresso9MPSEngine14softmax_kernel8__launchERKNSt3__110shared_ptrINS_14abstract_batchEEERNS_10layer_dataES9__block_invoke;
  v70[3] = &__block_descriptor_40_e28_v16__0___MTLCommandBuffer__8l;
  id v70[4] = a1;
  [v51 addCompletedHandler:v70];
  int v15 = v63;
  uint64_t v11 = v64;
  unint64_t v16 = v66;
  if (v61) {
    nitro::nitro_function::nitro_function(v61);
  }
  if (v62) {
    nitro::nitro_function::nitro_function(v62);
  }
LABEL_56:
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
}

void sub_19289F6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14)
  {
    nitro::nitro_function::nitro_function(a14);
    if (!v17)
    {
LABEL_3:
      if (!v16) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v17)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v17);
  if (!v16) {
LABEL_5:
  }
    _Unwind_Resume(a1);
LABEL_4:
  nitro::nitro_function::nitro_function(v16);
  goto LABEL_5;
}

float ___ZN8Espresso9MPSEngine14softmax_kernel8__launchERKNSt3__110shared_ptrINS_14abstract_batchEEERNS_10layer_dataES9__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 400);
  if (v2)
  {
    uint64_t v3 = *(float **)(v2 + 24);
    float result = *v3;
    *(float *)(v1 + 308) = *v3;
  }
  return result;
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::softmax_kernel>::on_resized(uint64_t a1, const void ***a2, const void ***a3)
{
  int v4 = *(const void **)(a1 + 8);
  if (!v4
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v7[113])
  {
    if (*(unsigned char *)(a1 + 312) && !*(void *)(a1 + 320))
    {
      uint64_t v9 = *(void ***)(a1 + 352);
      uint64_t v10 = *(void ***)(a1 + 360);
      while (v10 != v9)
      {
        v10 -= 3;
        int v14 = v10;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v14);
      }
      *(void *)(a1 + 360) = v9;
      uint64_t v11 = *(void ***)(a1 + 376);
      uint64_t v12 = *(void ***)(a1 + 384);
      while (v12 != v11)
      {
        v12 -= 3;
        int v14 = v12;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v14);
      }
      *(void *)(a1 + 384) = v11;
      if (!v8) {
        return;
      }
      goto LABEL_10;
    }
    Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a2, (void *)(a1 + 352));
    Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a3, (void *)(a1 + 376));
  }
  if (!v8) {
    return;
  }
LABEL_10:

  nitro::nitro_function::nitro_function(v8);
}

void sub_19289F97C(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSEngine::resize_meta_layer_data(const void *a1, std::__shared_weak_count *a2, const void ***a3, void *a4)
{
  if (!a1
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  if (a2) {
    atomic_fetch_add_explicit(&a2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *a4;
  uint64_t v6 = a4[1];
  if (*a4 != v6)
  {
    while (v6 != v5)
    {
      v6 -= 24;
      *(void *)&long long v82 = v6;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
    }
    a4[1] = v5;
  }
  uint64_t v7 = *a3;
  if (a3[1] != *a3)
  {
    if (*v7)
    {
      if (v76)
      {
        uint64_t v72 = a4;
        uint64_t v8 = (std::__shared_weak_count *)v7[1];
        if (v8)
        {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v9 = [*((id *)v76 + 23) count];
        uint64_t v10 = *a3;
        uint64_t v11 = a3[1];
        if (*a3 != v11)
        {
          do
          {
            uint64_t v13 = (std::__shared_weak_count *)v10[1];
            if (v13) {
              atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int v14 = [v12[23] count];
            if (v9 <= v14) {
              int v9 = v14;
            }
            if (v13) {
              nitro::nitro_function::nitro_function(v13);
            }
            v10 += 2;
          }
          while (v10 != v11);
        }
        int v71 = v9;
        uint64_t v15 = *v72;
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72[2] - *v72) >> 3) < v9)
        {
          if (v9 < 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v16 = v72[1];
          *((void *)&v84 + 1) = v72 + 2;
          *(void *)&long long v82 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v9);
          *((void *)&v82 + 1) = v82 + v16 - v15;
          unint64_t v83 = *((void *)&v82 + 1);
          *(void *)&long long v84 = v82 + 24 * v17;
          std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(v72, &v82);
          std::__split_buffer<Espresso::layer_data>::~__split_buffer((uint64_t)&v82);
        }
        uint64_t v18 = (char *)operator new(0xA0uLL);
        *((void *)v18 + 1) = 0;
        *((void *)v18 + 2) = 0;
        *(void *)uint64_t v18 = &unk_1EE38D078;
        *((_OWORD *)v18 + 4) = 0u;
        *((_OWORD *)v18 + 5) = 0u;
        *((_OWORD *)v18 + 7) = 0u;
        *((_OWORD *)v18 + 8) = 0u;
        *((void *)v18 + 17) = 0;
        *((void *)v18 + 18) = 0;
        *((_OWORD *)v18 + 2) = 0u;
        *((_OWORD *)v18 + 3) = 0u;
        *((_OWORD *)v18 + 6) = 0u;
        *((_DWORD *)v18 + 12) = 1065353216;
        *((void *)v18 + 7) = 0x1FFFFFFFFLL;
        *((void *)v18 + 8) = 0;
        *((void *)v18 + 9) = 0;
        v18[88] = 0;
        *((void *)v18 + 10) = 0;
        *((void *)v18 + 15) = 0;
        *((void *)v18 + 16) = 0;
        v18[144] = 0;
        *((void *)v18 + 12) = 0;
        *((void *)v18 + 13) = 0;
        v18[112] = 0;
        *((void *)v18 + 3) = &unk_1EE375D58;
        v18[145] = 1;
        *((void *)v18 + 19) = 0;
        long long v19 = *a3;
        int32x2_t v21 = (std::__shared_weak_count *)v19[1];
        if (v21)
        {
          atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
          int v75 = v20[50];
          nitro::nitro_function::nitro_function(v21);
          long long v19 = *a3;
        }
        else
        {
          int v75 = v20[50];
        }
        memset(&v90, 0, sizeof(v90));
        std::vector<int>::reserve(&v90, ((char *)a3[1] - (char *)v19) >> 4);
        if (*((unsigned char *)v76 + 236)) {
          int v22 = *((_DWORD *)v76 + 58);
        }
        else {
          int v22 = 1;
        }
        int v74 = v22;
        int v23 = *a3;
        uint64_t v24 = a3[1];
        if (*a3 != v24)
        {
          std::vector<int>::pointer end = v90.__end_;
          do
          {
            int v26 = *((_DWORD *)*v23 + 6);
            if (v26 <= 1) {
              int v26 = 1;
            }
            int v27 = v26 * *((_DWORD *)*v23 + 5);
            if (end >= v90.__end_cap_.__value_)
            {
              std::vector<int>::pointer begin = v90.__begin_;
              uint64_t v30 = end - v90.__begin_;
              unint64_t v31 = v30 + 1;
              if ((unint64_t)(v30 + 1) >> 62) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              int64_t v32 = (char *)v90.__end_cap_.__value_ - (char *)v90.__begin_;
              if (((char *)v90.__end_cap_.__value_ - (char *)v90.__begin_) >> 1 > v31) {
                unint64_t v31 = v32 >> 1;
              }
              if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v33 = v31;
              }
              if (v33)
              {
                unint64_t v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v33);
                std::vector<int>::pointer begin = v90.__begin_;
                std::vector<int>::pointer end = v90.__end_;
              }
              else
              {
                uint64_t v34 = 0;
              }
              id v35 = (int *)(v33 + 4 * v30);
              *id v35 = v27;
              id v28 = v35 + 1;
              while (end != begin)
              {
                int v36 = *--end;
                *--id v35 = v36;
              }
              v90.__begin_ = v35;
              v90.__end_ = v28;
              v90.__end_cap_.__value_ = (int *)(v33 + 4 * v34);
              if (begin) {
                operator delete(begin);
              }
            }
            else
            {
              *std::vector<int>::pointer end = v27;
              id v28 = end + 1;
            }
            v90.__end_ = v28;
            v23 += 2;
            std::vector<int>::pointer end = v28;
          }
          while (v23 != v24);
        }
        if (v9 >= 1)
        {
          int v37 = 0;
          do
          {
            int v87 = 0;
            uint64_t v88 = 0;
            unint64_t v89 = 0;
            if (a3[1] != *a3)
            {
              uint64_t v38 = 0;
              unint64_t v39 = 0;
              do
              {
                BOOL v40 = operator new(0x130uLL);
                int v41 = v40;
                v40[1] = 0;
                v40[2] = 0;
                *BOOL v40 = &unk_1EE38C9E8;
                *(void *)&long long v82 = v77;
                *((void *)&v82 + 1) = a2;
                if (a2) {
                  atomic_fetch_add_explicit(&a2->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                int v42 = v40 + 3;
                Espresso::MetalLowmemEngine::blob_container::blob_container(v40 + 3, &v82, v75);
                void v41[3] = &unk_1EE372E40;
                *((_DWORD *)v41 + 64) = 1;
                *((unsigned char *)v41 + 260) = 0;
                *(_OWORD *)(v41 + 33) = 0u;
                *(_OWORD *)(v41 + 35) = 0u;
                v41[37] = 0;
                if (a2) {
                  nitro::nitro_function::nitro_function(a2);
                }
                *((_DWORD *)v41 + 64) = v74;
                *((unsigned char *)v41 + 260) = *((unsigned char *)v76 + 236);
                int v43 = v90.__begin_[v39];
                unsigned int v44 = v37;
                if (v37 >= v43)
                {
                  if (v43 >= 2) {
                    Espresso::throw_exception_selector<Espresso::generic_error>("must be broadcastable across n*s if there is n*s mismatch.");
                  }
                  unsigned int v44 = 0;
                }
                uint64_t v45 = *a3;
                uint64_t v46 = (char *)(*a3)[v38];
                if (v46
                {
                  uint64_t v47 = (std::__shared_weak_count *)v45[v38 + 1];
                  if (v47) {
                    atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                }
                else
                {
                  uint64_t v47 = 0;
                }
                unsigned int v48 = *((_DWORD *)v46 + 6);
                long long v49 = *(_OWORD *)(v46 + 8);
                uint64_t v86 = 0;
                long long v84 = 0u;
                long long __p = 0u;
                long long v82 = v49;
                unint64_t v83 = v48 | 0xFFFFFFFF00000000;
                *((void *)v18 + 19) = v44;
                if (v47) {
                  atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                uint64_t v50 = (std::__shared_weak_count *)*((void *)v18 + 17);
                *((void *)v18 + 16) = v46;
                *((void *)v18 + 17) = v47;
                if (v50) {
                  nitro::nitro_function::nitro_function(v50);
                }
                uint64_t v80 = v18 + 24;
                uint64_t v81 = (std::__shared_weak_count *)v18;
                atomic_fetch_add_explicit((atomic_ullong *volatile)v18 + 1, 1uLL, memory_order_relaxed);
                (*(void (**)(void *, long long *, char **))(*v42 + 16))(v41 + 3, &v82, &v80);
                if (v81) {
                  nitro::nitro_function::nitro_function(v81);
                }
                *(void *)&long long v51 = v41 + 3;
                *((void *)&v51 + 1) = v41;
                int v52 = v88;
                if ((unint64_t)v88 >= v89)
                {
                  long long v73 = v51;
                  int64_t v54 = (v88 - v87) >> 4;
                  if ((unint64_t)(v54 + 1) >> 60) {
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v55 = (uint64_t)(v89 - (void)v87) >> 3;
                  if (v55 <= v54 + 1) {
                    unint64_t v55 = v54 + 1;
                  }
                  if (v89 - (unint64_t)v87 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v56 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v56 = v55;
                  }
                  v91[4] = &v89;
                  uint64_t v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v56);
                  int v58 = &v57[16 * v54];
                  v91[0] = v57;
                  v91[1] = v58;
                  v91[3] = &v57[16 * v59];
                  *(_OWORD *)int v58 = v73;
                  v91[2] = v58 + 16;
                  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v87, v91);
                  uint64_t v53 = v88;
                  std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v91);
                }
                else
                {
                  *(_OWORD *)uint64_t v88 = v51;
                  uint64_t v53 = v52 + 16;
                }
                uint64_t v88 = v53;
                if ((void)__p)
                {
                  *((void *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
                if (v47) {
                  nitro::nitro_function::nitro_function(v47);
                }
                ++v39;
                v38 += 2;
              }
              while (v39 < ((char *)a3[1] - (char *)*a3) >> 4);
            }
            uint64_t v61 = (void *)v72[1];
            unint64_t v60 = v72[2];
            if ((unint64_t)v61 >= v60)
            {
              unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v61 - *v72) >> 3);
              unint64_t v65 = v64 + 1;
              if (v64 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - *v72) >> 3);
              if (2 * v66 > v65) {
                unint64_t v65 = 2 * v66;
              }
              if (v66 >= 0x555555555555555) {
                unint64_t v67 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v67 = v65;
              }
              *((void *)&v84 + 1) = v72 + 2;
              if (v67) {
                unint64_t v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v67);
              }
              else {
                uint64_t v68 = 0;
              }
              uint64_t v69 = (void *)(v67 + 24 * v64);
              *(void *)&long long v82 = v67;
              *((void *)&v82 + 1) = v69;
              unint64_t v83 = (unint64_t)v69;
              *(void *)&long long v84 = v67 + 24 * v68;
              *uint64_t v69 = 0;
              v69[1] = 0;
              v69[2] = 0;
              std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>(v69, v87, v88, (v88 - v87) >> 4);
              v83 += 24;
              uint64_t v63 = v72;
              std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(v72, &v82);
              uint64_t v62 = (void *)v72[1];
              std::__split_buffer<Espresso::layer_data>::~__split_buffer((uint64_t)&v82);
            }
            else
            {
              *uint64_t v61 = 0;
              v61[1] = 0;
              v61[2] = 0;
              std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>(v61, v87, v88, (v88 - v87) >> 4);
              uint64_t v62 = v61 + 3;
              uint64_t v63 = v72;
              v72[1] = v62;
            }
            v63[1] = v62;
            *(void *)&long long v82 = &v87;
            std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
            ++v37;
          }
          while (v37 != v71);
        }
        if (v90.__begin_)
        {
          v90.__end_ = v90.__begin_;
          operator delete(v90.__begin_);
        }
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v18);
        if (v8)
        {
          nitro::nitro_function::nitro_function(v8);
          nitro::nitro_function::nitro_function(v8);
        }
      }
    }
  }
  if (a2) {
    nitro::nitro_function::nitro_function(a2);
  }
}

void sub_1928A0390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  id v35 = *(void **)(v33 - 160);
  if (v35)
  {
    *(void *)(v33 - 152) = v35;
    operator delete(v35);
  }
  nitro::nitro_function::nitro_function(v31);
  if (v32)
  {
    nitro::nitro_function::nitro_function(v32);
    nitro::nitro_function::nitro_function(v32);
  }
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }
  _Unwind_Resume(a1);
}

void *Espresso::MetalLowmemEngine::blob_container::blob_container(void *a1, void *a2, int a3)
{
  uint64_t v5 = Espresso::abstract_blob_container::abstract_blob_container((uint64_t)a1, a2);
  *(void *)uint64_t v5 = &unk_1EE348BC8;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(void *)(v5 + 192) = 0;
  *(_DWORD *)(v5 + 200) = a3;
  *(_DWORD *)(v5 + 204) = 0;
  *(void *)(v5 + 208) = 0;
  uint64_t v6 = (char *)operator new(0x88uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE3859B0;
  uint64_t v7 = (const void *)a1[9];
  uint64_t v8 = (std::__shared_weak_count *)a1[10];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v6 + 10) = 0;
  *((void *)v6 + 4) = 0;
  *((void *)v6 + 3) = v6 + 32;
  *((void *)v6 + 7) = 0;
  *((void *)v6 + 5) = 0;
  *((void *)v6 + 6) = v6 + 56;
  *((void *)v6 + 11) = 0;
  *((void *)v6 + 8) = 0;
  *((void *)v6 + 9) = v6 + 80;
  *((_OWORD *)v6 + 6) = 0u;
  *((_OWORD *)v6 + 7) = 0u;
  if (!v7
  {
    Espresso::throw_exception_selector<Espresso::invalid_context_error>("Not a metal context.");
  }
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v6 + 15);
    *((void *)v6 + 14) = v9;
    *((void *)v6 + 15) = v8;
    if (v10)
    {
      nitro::nitro_function::nitro_function(v10);
      int v9 = (id *)*((void *)v6 + 14);
    }
  }
  else
  {
    *((void *)v6 + 14) = v9;
    *((void *)v6 + 15) = 0;
  }
  id v11 = v9[18];
  CVMetalTextureCacheCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v11, 0, (CVMetalTextureCacheRef *)v6 + 16);
  if (!*((void *)v6 + 16)) {
    Espresso::throw_exception_selector<Espresso::memory_error>("Failed to create metal texture cache.");
  }

  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
    nitro::nitro_function::nitro_function(v8);
  }
  a1[27] = v6 + 24;
  a1[28] = v6;
  return a1;
}

void sub_1928A06A0(_Unwind_Exception *a1)
{
  Espresso::abstract_blob_container::~abstract_blob_container((Espresso::abstract_blob_container *)v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::blob_container::cvpixelbuf_io_aux_data>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 128);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 120);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  int v4 = *(std::__shared_weak_count **)(a1 + 104);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*(char **)(a1 + 80));
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>>>::destroy(*(void **)(a1 + 56));
  uint64_t v5 = *(void **)(a1 + 32);

  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>>>::destroy(v5);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::blob_container::cvpixelbuf_io_aux_data>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3859B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::blob_container::cvpixelbuf_io_aux_data>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3859B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::blob_container>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C9E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C9E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__split_buffer<Espresso::layer_data>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    int v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v6 = v4;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::blob_container_options>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::blob_container_options>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38D078;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::blob_container_options>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38D078;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::softmax_kernel>::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  uint64_t v5 = *(const void **)(a1 + 8);
  if (!v5
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 16);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v9[113] && (!*(unsigned char *)(a1 + 312) || *(void *)(a1 + 320)))
  {
    uint64_t v11 = *(void *)(a1 + 352);
    uint64_t v12 = *(void *)(a1 + 360);
    if (v12 == v11)
    {
      (*(void (**)(uint64_t, const void ***, const void ***))(*(void *)a1 + 80))(a1, a3, a4);
      uint64_t v11 = *(void *)(a1 + 352);
      uint64_t v12 = *(void *)(a1 + 360);
    }
    if (v12 == v11) {
      Espresso::throw_exception_selector<Espresso::generic_error>("meta_texarray_kernel failed to make array of layer data.");
    }
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    do
    {
      Espresso::MetalLowmemEngine::softmax_kernel::__launch(a1, a2, (const void ***)(v11 + v13), (const void ***)(*(void *)(a1 + 376) + v13));
      ++v14;
      uint64_t v11 = *(void *)(a1 + 352);
      v13 += 24;
    }
    while (v14 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 360) - v11) >> 3));
  }
  else
  {
    Espresso::MetalLowmemEngine::softmax_kernel::__launch(a1, a2, a3, a4);
  }
  if (v10)
  {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_1928A0BB4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::softmax_kernel>::~meta_texarray_kernel(uint64_t a1)
{
  *(void *)a1 = &unk_1EE375328;
  uint64_t v3 = (void **)(a1 + 376);
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a1 + 352);
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v3);

  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 328);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  void **v3;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE375328;
  uint64_t v3 = (void **)(a1 + 376);
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a1 + 352);
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v3);

  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 328);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::softmax_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::softmax_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38CCF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::softmax_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38CCF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::MPSEngine::softmax_kernel::~softmax_kernel(Espresso::MPSEngine::softmax_kernel *this)
{
  Espresso::MPSEngine::softmax_kernel::~softmax_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE372F20;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 51);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  int v4 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }

  Espresso::base_kernel::~base_kernel(this);
}

float Espresso::MPSEngine::inner_product_kernel::set_quantization_lut_blob(uint64_t a1, uint64_t a2)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v12, 256, 1, 1, 1);
  uint64_t v4 = *(void *)(a1 + 552);
  uint64_t v5 = v12;
  uint64_t v6 = *(std::__shared_weak_count **)(v4 + 232);
  *(_OWORD *)(v4 + 224) = v12;
  if (!v6)
  {
    uint64_t v7 = v5;
    if (v5) {
      goto LABEL_3;
    }
LABEL_7:
    Espresso::throw_exception_selector<Espresso::memory_error>("Error allocating memory");
  }
  nitro::nitro_function::nitro_function(v6);
  uint64_t v7 = *(void *)(*(void *)(a1 + 552) + 224);
  if (!v7) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v8 = 0;
  uint64_t v9 = *(void *)(*(void *)a2 + 16);
  uint64_t v10 = *(void *)(v7 + 16);
  do
  {
    float result = *(float *)(v9 + v8);
    *(float *)(v10 + v8) = result;
    v8 += 4;
  }
  while (v8 != 1024);
  return result;
}

double Espresso::MPSEngine::inner_product_kernel::set_quantization_ranges_blob(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (char *)operator new(0x58uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1EE389798;
  uint64_t v5 = v4 + 24;
  uint64_t v6 = *(int *)(a1 + 304);
  *((void *)v4 + 3) = &unk_1EE36BDD0;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *((_DWORD *)v4 + 8) = v6;
  size_t v7 = 8 * v6;
  uint64_t v8 = Espresso::kern_alloc_uninitialized((Espresso *)(8 * v6));
  bzero(v8, v7);
  *((void *)v4 + 5) = v8;
  v4[48] = 1;
  *(void *)&long long v9 = v4 + 24;
  *((void *)&v9 + 1) = v4;
  uint64_t v10 = *(void *)(a1 + 552);
  uint64_t v11 = *(std::__shared_weak_count **)(v10 + 216);
  *(_OWORD *)(v10 + 208) = v9;
  if (v11)
  {
    nitro::nitro_function::nitro_function(v11);
    uint64_t v5 = *(char **)(*(void *)(a1 + 552) + 208);
    if (!v5) {
      Espresso::throw_exception_selector<Espresso::memory_error>("Error allocating memory");
    }
  }
  if (*(_DWORD *)(a1 + 304))
  {
    unint64_t v12 = 0;
    uint64_t v13 = (_DWORD *)*((void *)v5 + 2);
    do
    {
      LODWORD(v9) = *(_DWORD *)(*(void *)(*(void *)a2 + 16) + 4 * v12);
      *uint64_t v13 = v9;
      DWORD1(v9) = *(_DWORD *)(*(void *)(*(void *)a2 + 16) + 4 * (v12 + *(_DWORD *)(a1 + 304)));
      *(void *)uint64_t v13 = v9;
      v13 += 2;
      ++v12;
    }
    while (v12 < *(unsigned int *)(a1 + 304));
  }
  return *(double *)&v9;
}

void sub_1928A1068(_Unwind_Exception *a1)
{
  shared_owners = (std::__shared_weak_count *)v1[3].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v1[2].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::inner_product_kernel::set_quantized_weights_blob(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 552);
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(v3 + 184);
  *(void *)(v3 + 176) = v5;
  *(void *)(v3 + 184) = v4;
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  uint64_t v7 = *(void *)(a1 + 552);
  uint64_t v8 = *(std::__shared_weak_count **)(v7 + 152);
  *(void *)(v7 + 144) = 0;
  *(void *)(v7 + 152) = 0;
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
    uint64_t v7 = *(void *)(a1 + 552);
  }
  *(_DWORD *)(v7 + 240) = 8;
}

void Espresso::MPSEngine::inner_product_kernel::get_weights(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::MPSEngine::inner_product_kernel::get_biases(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void Espresso::MPSEngine::inner_product_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 552);
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(v3 + 152);
  *(void *)(v3 + 144) = v5;
  *(void *)(v3 + 152) = v4;
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  *(_DWORD *)(*(void *)(a1 + 552) + 240) = 268435488;
}

void Espresso::MPSEngine::inner_product_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 552);
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v2 + 200);
  *(void *)(v2 + 192) = v4;
  *(void *)(v2 + 200) = v3;
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

void Espresso::MPSEngine::inner_product_kernel::__set_weights_finalize(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[70];
  if (!v3) {
    return;
  }
  if (!*(void *)v3) {
    return;
  }
  uint64_t v5 = *(void *)(v3 + 32);
  if (!v5 && !*(void *)(v3 + 48) && !*(void *)(v3 + 64) && !*(void *)(v3 + 80)) {
    return;
  }
  if (*(_DWORD *)(a1[1] + 76))
  {
    Espresso::quantized_weights_helper::dequantize_to_float32_2d((Espresso::quantized_weights_helper *)v3, &v16);
    Espresso::MPSEngine::inner_product_kernel::set_weights((uint64_t)a1, &v16);
    uint64_t v6 = v17;
    if (!v17) {
      return;
    }
    goto LABEL_9;
  }
  if (*(int *)(v3 + 156) <= 7)
  {
    Espresso::quantized_weights_helper::make_uint8_weight_from_raw((Espresso::quantized_weights_helper *)v3);
    uint64_t v3 = a1[70];
    uint64_t v5 = *(void *)(v3 + 32);
  }
  if (v5 || *(void *)(v3 + 48) || *(void *)(v3 + 64) || !*(void *)(v3 + 80))
  {
    uint64_t v7 = *(std::__shared_weak_count **)(v3 + 40);
    v19[0] = v5;
    v19[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = *(std::__shared_weak_count **)(a2 + 8);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::MPSEngine::inner_product_kernel::set_quantization_lut_blob((uint64_t)a1, (uint64_t)v19);
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v7) {
      goto LABEL_24;
    }
  }
  else
  {
    Espresso::quantized_weights_helper::get_per_ch_ranges((Espresso::quantized_weights_helper *)v3, &v21);
    uint64_t v7 = v22;
    v20[0] = v21;
    v20[1] = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = *(std::__shared_weak_count **)(a2 + 8);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::MPSEngine::inner_product_kernel::set_quantization_ranges_blob((uint64_t)a1, (uint64_t)v20);
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    if (v7)
    {
      nitro::nitro_function::nitro_function(v7);
LABEL_24:
      nitro::nitro_function::nitro_function(v7);
    }
  }
  int32x2_t v9 = (int32x2_t)a1[38];
  uint64_t v10 = (int *)a1[70];
  if (v10[40] < 1 || (uint64_t v11 = *((void *)v10 + 2)) == 0)
  {
    uint64_t v11 = *(void *)v10;
    uint64_t v6 = (std::__shared_weak_count *)*((void *)v10 + 1);
    if (!v6) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)v10 + 3);
  if (v6) {
LABEL_30:
  }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_31:
  unint64_t v12 = (char *)operator new(0x58uLL);
  *((void *)v12 + 2) = 0;
  *((void *)v12 + 1) = 0;
  *(void *)unint64_t v12 = &unk_1EE389AA8;
  uint64_t v13 = *(void *)(v11 + 16);
  *((void *)v12 + 3) = &unk_1EE36BF90;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *((int32x2_t *)v12 + 4) = vrev64_s32(v9);
  *((void *)v12 + 5) = v13;
  v12[48] = 0;
  v18[0] = (uint64_t)(v12 + 24);
  v18[1] = (uint64_t)v12;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v12 + 1, 1uLL, memory_order_relaxed);
  unint64_t v14 = *(std::__shared_weak_count **)(a2 + 8);
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    Espresso::MPSEngine::inner_product_kernel::set_quantized_weights_blob((uint64_t)a1, v18);
    nitro::nitro_function::nitro_function(v14);
  }
  else
  {
    Espresso::MPSEngine::inner_product_kernel::set_quantized_weights_blob((uint64_t)a1, v18);
  }
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v12);
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v12);
  if (v6)
  {
LABEL_9:
    nitro::nitro_function::nitro_function(v6);
  }
}

void sub_1928A1448(_Unwind_Exception *exception_object)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (v1)
  {
    nitro::nitro_function::nitro_function(v1);
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSEngine::inner_product_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, unsigned __int8 *a3, void *a4, unint64_t a5, uint64_t *a6, double a7, double a8, int32x2_t a9)
{
  if (a6)
  {
    uint64_t v14 = *a6;
    if (*a6)
    {
      uint64_t v15 = (std::__shared_weak_count *)a6[1];
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v14 = 0;
  }
  if (((char)a3[23] & 0x80000000) == 0)
  {
    int v16 = a3[23];
    if (v16 != 1)
    {
      if (v16 != 5)
      {
        if (v16 == 7)
        {
          BOOL v17 = *(_DWORD *)a3 == 828792695 && *(_DWORD *)(a3 + 3) == 1952396849;
          uint64_t v18 = (int *)a3;
          if (!v17) {
            goto LABEL_15;
          }
          goto LABEL_42;
        }
        goto LABEL_77;
      }
      if (*(_DWORD *)a3 != 828792663 || a3[4] != 54) {
        goto LABEL_77;
      }
      goto LABEL_80;
    }
    int v43 = *a3;
    if (v43 != 98)
    {
      if (v43 != 87) {
        goto LABEL_77;
      }
LABEL_90:
      v65[0] = v14;
      v65[1] = (uint64_t)v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(&v66, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v65, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
      if (v15) {
        nitro::nitro_function::nitro_function(v15);
      }
      int v22 = (std::__shared_weak_count *)*((void *)&v66 + 1);
      long long v64 = v66;
      if (!*((void *)&v66 + 1))
      {
        Espresso::MPSEngine::inner_product_kernel::set_weights(a1, (uint64_t *)&v64);
        if (!v15) {
          return;
        }
        goto LABEL_105;
      }
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v66 + 1) + 8), 1uLL, memory_order_relaxed);
      Espresso::MPSEngine::inner_product_kernel::set_weights(a1, (uint64_t *)&v64);
LABEL_102:
      nitro::nitro_function::nitro_function(v22);
LABEL_103:
      nitro::nitro_function::nitro_function(v22);
      goto LABEL_104;
    }
LABEL_67:
    v62[0] = v14;
    v62[1] = (uint64_t)v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(&v66, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v62, *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    int v22 = (std::__shared_weak_count *)*((void *)&v66 + 1);
    uint64_t v46 = v66;
    if (*((void *)&v66 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v66 + 1) + 8), 1uLL, memory_order_relaxed);
      uint64_t v47 = *(void *)(a1 + 552);
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v47 = *(void *)(a1 + 552);
    }
    unint64_t v55 = *(std::__shared_weak_count **)(v47 + 200);
    *(void *)(v47 + 192) = v46;
    *(void *)(v47 + 200) = v22;
    if (v55) {
      goto LABEL_100;
    }
    goto LABEL_101;
  }
  uint64_t v32 = *((void *)a3 + 1);
  if (v32 == 1)
  {
    int v45 = **(unsigned __int8 **)a3;
    if (v45 == 87) {
      goto LABEL_90;
    }
    if (v45 != 98) {
      goto LABEL_77;
    }
    goto LABEL_67;
  }
  if (v32 != 5)
  {
    if (v32 == 7)
    {
      uint64_t v18 = *(int **)a3;
      if (**(_DWORD **)a3 != 828792695 || *(_DWORD *)(*(void *)a3 + 3) != 1952396849)
      {
LABEL_15:
        int v19 = *v18;
        int v20 = *(int *)((char *)v18 + 3);
        if (v19 != 862347127 || v20 != 1952395827) {
          goto LABEL_77;
        }
        v59[0] = v14;
        v59[1] = (uint64_t)v15;
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(&v66, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v59, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), (a4 & 0x3F) == 0);
        if (v15) {
          nitro::nitro_function::nitro_function(v15);
        }
        int v22 = (std::__shared_weak_count *)*((void *)&v66 + 1);
        uint64_t v23 = v66;
        if (*((void *)&v66 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v66 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v24 = *(unsigned int *)(v23 + 8);
        uint64_t v25 = *(int *)(v23 + 12);
        if (v25 && v24)
        {
          int v26 = *(_DWORD **)(v23 + 16);
          std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,Espresso::blob<float,2>::UnitializedBlobType,void>(&v57, *(_DWORD *)(v23 + 8), v25, 1, 1);
          if ((int)v24 >= 1)
          {
            uint64_t v27 = 0;
            id v28 = *(_DWORD **)(v57 + 16);
            do
            {
              uint64_t v29 = v26;
              uint64_t v30 = v28;
              uint64_t v31 = v25;
              if ((int)v25 >= 1)
              {
                do
                {
                  *v30++ = *v29;
                  v29 += v24;
                  --v31;
                }
                while (v31);
              }
              ++v27;
              v28 += v25;
              ++v26;
            }
            while (v27 != v24);
          }
        }
        else
        {
          std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int const*&,void>(&v57, (int *)(v23 + 8));
          memcpy(*(void **)(v57 + 16), *(const void **)(v23 + 16), 4 * *(int *)(v23 + 8) * (uint64_t)*(int *)(v23 + 12));
        }
        Espresso::MPSEngine::inner_product_kernel::set_weights(a1, &v57);
        unint64_t v55 = v58;
        if (!v58) {
          goto LABEL_101;
        }
        goto LABEL_100;
      }
LABEL_42:
      *(_DWORD *)(*(void *)(a1 + 552) + 240) = 268435472;
      v61[0] = v14;
      v61[1] = (uint64_t)v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,2>(&v66, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v61, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), (a4 & 0x3F) == 0);
      if (v15) {
        nitro::nitro_function::nitro_function(v15);
      }
      int v22 = (std::__shared_weak_count *)*((void *)&v66 + 1);
      uint64_t v34 = v66;
      if (*((void *)&v66 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v66 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v35 = *(unsigned int *)(v34 + 8);
      uint64_t v36 = *(int *)(v34 + 12);
      if (v36 && v35)
      {
        int v37 = *(_WORD **)(v34 + 16);
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,2>,std::allocator<Espresso::blob<unsigned short,2>>,int &,int &,int &,int &,Espresso::blob<unsigned short,2>::UnitializedBlobType,void>(&v60, *(_DWORD *)(v34 + 8), v36, 1, 1);
        if ((int)v35 >= 1)
        {
          uint64_t v38 = 0;
          unint64_t v39 = *(_WORD **)(v60 + 16);
          do
          {
            BOOL v40 = v37;
            int v41 = v39;
            uint64_t v42 = v36;
            if ((int)v36 >= 1)
            {
              do
              {
                *v41++ = *v40;
                v40 += v35;
                --v42;
              }
              while (v42);
            }
            ++v38;
            v39 += v36;
            ++v37;
          }
          while (v38 != v35);
        }
      }
      else
      {
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,2>,std::allocator<Espresso::blob<unsigned short,2>>,int const*&,void>(&v60, (int *)(v34 + 8));
        memcpy(*(void **)(v60 + 16), *(const void **)(v34 + 16), 2 * *(int *)(v34 + 8) * (uint64_t)*(int *)(v34 + 12));
      }
      uint64_t v54 = *(void *)(a1 + 552);
      unint64_t v55 = *(std::__shared_weak_count **)(v54 + 168);
      *(_OWORD *)(v54 + 160) = v60;
      if (v55) {
LABEL_100:
      }
        nitro::nitro_function::nitro_function(v55);
LABEL_101:
      if (!v22) {
        goto LABEL_104;
      }
      goto LABEL_102;
    }
LABEL_77:
    uint64_t v49 = *(void *)(a1 + 560);
    if (!v49)
    {
      LODWORD(v60) = 1;
      int v56 = 1;
      std::allocate_shared[abi:ne180100]<Espresso::quantized_weights_helper,std::allocator<Espresso::quantized_weights_helper>,std::shared_ptr<Espresso::abstract_context> &,int,int,unsigned int &,unsigned int &,void>(&v66, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), (int *)&v60, &v56, (int *)(a1 + 308), (int *)(a1 + 304));
      a7 = *(double *)&v66;
      uint64_t v50 = *(std::__shared_weak_count **)(a1 + 568);
      *(_OWORD *)(a1 + 560) = v66;
      if (v50)
      {
        nitro::nitro_function::nitro_function(v50);
        uint64_t v49 = *(void *)(a1 + 560);
      }
      else
      {
        uint64_t v49 = *(void *)&a7;
      }
    }
    Espresso::quantized_weights_helper::__set_weight_raw_blob(v49, a7, a8, a9, a2, (uint64_t)a3, (char *)a4, a5, a6);
    goto LABEL_104;
  }
  if (**(_DWORD **)a3 != 828792663 || *(unsigned char *)(*(void *)a3 + 4) != 54) {
    goto LABEL_77;
  }
LABEL_80:
  v63[0] = v14;
  v63[1] = (uint64_t)v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,2>(&v66, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v63, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  uint64_t v51 = *(void *)(a1 + 552);
  int v22 = (std::__shared_weak_count *)*((void *)&v66 + 1);
  uint64_t v52 = v66;
  if (*((void *)&v66 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v66 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v53 = *(std::__shared_weak_count **)(v51 + 168);
  *(void *)(v51 + 160) = v52;
  *(void *)(v51 + 168) = v22;
  if (v53) {
    nitro::nitro_function::nitro_function(v53);
  }
  *(_DWORD *)(*(void *)(a1 + 552) + 240) = 268435472;
  if (v22) {
    goto LABEL_103;
  }
LABEL_104:
  if (!v15) {
    return;
  }
LABEL_105:

  nitro::nitro_function::nitro_function(v15);
}

void sub_1928A1AF4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    nitro::nitro_function::nitro_function(v2);
    nitro::nitro_function::nitro_function(v2);
  }
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,2>,std::allocator<Espresso::blob<unsigned short,2>>,int &,int &,int &,int &,Espresso::blob<unsigned short,2>::UnitializedBlobType,void>(void *a1, int a2, int a3, int a4, int a5)
{
  uint64_t v10 = (char *)operator new(0x58uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = &unk_1EE389D10;
  *((void *)v10 + 3) = &unk_1EE36C0F0;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  float result = Espresso::kern_alloc_uninitialized((Espresso *)(2 * a2 * (uint64_t)a3 * a4 * a5));
  *((void *)v10 + 5) = result;
  v10[48] = 1;
  *a1 = v10 + 24;
  a1[1] = v10;
  return result;
}

void sub_1928A1C2C(_Unwind_Exception *a1)
{
  shared_owners = (std::__shared_weak_count *)v1[3].__shared_owners_;
  if (shared_owners) {
    nitro::nitro_function::nitro_function(shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v1[2].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::inner_product_kernel::on_resized(Espresso::MPSEngine::inner_product_kernel *this, Espresso::layer_data *a2, Espresso::layer_data *a3)
{
  if (!*((void *)this + 68))
  {
    if (!*(void *)(*((void *)this + 69) + 192))
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v9, *((_DWORD *)this + 76), 1, 1, 1);
      uint64_t v4 = v9;
      uint64_t v5 = *(int *)(v9 + 8);
      if (v5) {
        bzero(*(void **)(v9 + 16), 4 * v5);
      }
      uint64_t v6 = *((void *)this + 69);
      uint64_t v7 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = *(std::__shared_weak_count **)(v6 + 200);
      *(void *)(v6 + 192) = v4;
      *(void *)(v6 + 200) = v7;
      if (v8) {
        nitro::nitro_function::nitro_function(v8);
      }
      if (v7) {
        nitro::nitro_function::nitro_function(v7);
      }
    }
    Espresso::MPSEngine::inner_product_kernel::recreate_kernel(this);
  }
}

void Espresso::MPSEngine::inner_product_kernel::recreate_kernel(Espresso::MPSEngine::inner_product_kernel *this)
{
  uint64_t v2 = (const void *)*((void *)this + 1);
  if (!v2
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    id v16 = v3[18];
    nitro::nitro_function::nitro_function(v4);
  }
  else
  {
    id v16 = v3[18];
  }
  uint64_t v5 = *((void *)this + 69);
  if (!*((_DWORD *)this + 78) && !*(void *)(v5 + 192))
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v17, *((_DWORD *)this + 76), 1, 1, 1);
    uint64_t v5 = *((void *)this + 69);
    uint64_t v6 = v17;
    uint64_t v7 = *(std::__shared_weak_count **)(v5 + 200);
    *(_OWORD *)(v5 + 192) = v17;
    if (v7)
    {
      nitro::nitro_function::nitro_function(v7);
      uint64_t v5 = *((void *)this + 69);
      uint64_t v8 = *(void *)(v5 + 192);
    }
    else
    {
      uint64_t v8 = v6;
    }
    uint64_t v9 = *(int *)(v8 + 8);
    if (v9) {
      bzero(*(void **)(v8 + 16), 4 * v9);
    }
  }
  if ([(id)v5 ready])
  {
    uint64_t v10 = [objc_alloc(MEMORY[0x1E4F35440]) initWithDevice:v16 weights:*((void *)this + 69)];
    uint64_t v11 = (void *)*((void *)this + 68);
    *((void *)this + 68) = v10;

    if (!*((void *)this + 68))
    {
      uint64_t v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v15, "Error creating mps kernel");
      __cxa_throw(v15, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (*(unsigned char *)(*((void *)this + 1) + 64))
    {
      unint64_t v12 = (void *)((char *)this + 176);
      if (*((char *)this + 199) < 0) {
        unint64_t v12 = (void *)*v12;
      }
      uint64_t v13 = [NSString stringWithUTF8String:v12];
      [*((id *)this + 68) setLabel:v13];
    }
  }
}

void sub_1928A1F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::inner_product_kernel::clear_weights(std::__shared_weak_count **this)
{
  Espresso::generic_inner_product_kernel::clear_weights((Espresso::generic_inner_product_kernel *)this);
  uint64_t v2 = this[69];
  shared_owners = (std::__shared_weak_count *)v2[6].__shared_owners_;
  v2[6].__vftable = 0;
  v2[6].__shared_owners_ = 0;
  if (shared_owners)
  {
    nitro::nitro_function::nitro_function(shared_owners);
    uint64_t v2 = this[69];
  }
  uint64_t v4 = (std::__shared_weak_count *)v2[7].__vftable;
  v2[6].__shared_weak_owners_ = 0;
  v2[7].__vftable = 0;
  if (v4)
  {
    nitro::nitro_function::nitro_function(v4);
    uint64_t v2 = this[69];
  }
  shared_weak_owners = (std::__shared_weak_count *)v2[7].__shared_weak_owners_;
  v2[7].__shared_owners_ = 0;
  v2[7].__shared_weak_owners_ = 0;
  if (shared_weak_owners)
  {
    nitro::nitro_function::nitro_function(shared_weak_owners);
    uint64_t v2 = this[69];
  }
  uint64_t v6 = (std::__shared_weak_count *)v2[8].__shared_owners_;
  v2[8].__vftable = 0;
  v2[8].__shared_owners_ = 0;
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  uint64_t v7 = this[70];
  if (v7)
  {
    uint64_t v8 = (std::__shared_weak_count *)v7->__shared_owners_;
    v7->__vftable = 0;
    v7->__shared_owners_ = 0;
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    uint64_t v9 = this[70];
    uint64_t v10 = (std::__shared_weak_count *)v9[1].__vftable;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = 0;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
  }
  uint64_t v11 = this[71];
  *((_OWORD *)this + 35) = 0u;
  if (v11)
  {
    nitro::nitro_function::nitro_function(v11);
  }
}

void Espresso::MPSEngine::inner_product_kernel::share_weights(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2)
  {
    if (v4)
    {
      uint64_t v5 = *(std::__shared_weak_count **)(a2 + 8);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        objc_storeStrong((id *)(a1 + 544), v4[68]);
        nitro::nitro_function::nitro_function(v5);
      }
      else
      {
        id v6 = v4[68];
        objc_storeStrong((id *)(a1 + 544), v6);
      }
    }
  }
}

void Espresso::MPSEngine::inner_product_kernel::blob_options(Espresso::MPSEngine::inner_product_kernel *this@<X0>, char a2@<W1>, int a3@<W2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  if (a3 < 1) {
    return;
  }
  if (a2) {
    return;
  }
  uint64_t v5 = (const void *)*((void *)this + 1);
  if (!v5) {
    return;
  }
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = (char *)operator new(0x70uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = &unk_1EE388F48;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *((_OWORD *)v10 + 2) = 0u;
  *((_OWORD *)v10 + 3) = 0u;
  *((void *)v10 + 3) = &unk_1EE3661F8;
  *((_DWORD *)v10 + 12) = 1065353216;
  *((void *)v10 + 7) = 0x1FFFFFFFFLL;
  *((void *)v10 + 12) = 0;
  *((void *)v10 + 13) = 0;
  *((void *)v10 + 8) = 0;
  *((void *)v10 + 9) = 0;
  *((void *)v10 + 10) = 0;
  v10[88] = 0;
  *a4 = v10 + 24;
  a4[1] = v10;
  uint64_t v12 = v8[28];
  uint64_t v11 = v8[29];
  if (!v11)
  {
    *((void *)v10 + 12) = v12;
    *((void *)v10 + 13) = 0;
    if (!v9) {
      return;
    }
    goto LABEL_11;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  uint64_t v13 = (std::__shared_weak_count *)*((void *)v10 + 13);
  *((void *)v10 + 12) = v12;
  *((void *)v10 + 13) = v11;
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v9)
  {
LABEL_11:
    nitro::nitro_function::nitro_function(v9);
  }
}

void sub_1928A22B4(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSEngine::inner_product_kernel::__launch(Espresso::MPSEngine::inner_product_kernel *this, uint64_t a2, uint64_t **a3, const void ***a4)
{
  if (!*((void *)this + 68))
  {
    if (!*(void *)(*((void *)this + 69) + 192))
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(v73, *((_DWORD *)this + 76), 1, 1, 1);
      uint64_t v8 = *(void *)&v73[0];
      uint64_t v9 = *(int *)(*(void *)&v73[0] + 8);
      if (v9) {
        bzero(*(void **)(*(void *)&v73[0] + 16), 4 * v9);
      }
      uint64_t v10 = *((void *)this + 69);
      uint64_t v11 = (std::__shared_weak_count *)*((void *)&v73[0] + 1);
      if (*((void *)&v73[0] + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v73[0] + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v12 = *(std::__shared_weak_count **)(v10 + 200);
      *(void *)(v10 + 192) = v8;
      *(void *)(v10 + 200) = v11;
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
    }
    Espresso::MPSEngine::inner_product_kernel::recreate_kernel(this);
  }
  uint64_t v13 = *a4;
  unint64_t v14 = (char *)a4[1] - (char *)*a4;
  if (v14 >= 0x11)
  {
    uint64_t v15 = v13[2];
    if (v15)
    {
      if (v16)
      {
        long long v17 = (std::__shared_weak_count *)v13[3];
        if (v17)
        {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v13 = *a4;
          unint64_t v14 = (char *)a4[1] - (char *)*a4;
        }
LABEL_19:
        uint64_t v68 = v17;
        if (v14 >= 0x21 && (uint64_t v18 = v13[4]) != 0)
        {
          if (v19)
          {
            int v20 = (std::__shared_weak_count *)v13[5];
            if (v20) {
              atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v16)
            {
LABEL_25:
              id v21 = v16[21];
              if (!v19) {
                goto LABEL_27;
              }
              goto LABEL_26;
            }
LABEL_80:
            id v21 = 0;
            if (!v19)
            {
LABEL_27:
              if (!*((void *)this + 68) || *((unsigned char *)this + 600))
              {
                unint64_t v67 = v20;
                int v22 = [EspressoTrainingInnerProductWeightsForMPS alloc];
                int v74 = *((_DWORD *)this + 108);
                long long v23 = *((_OWORD *)this + 26);
                v73[6] = *((_OWORD *)this + 25);
                v73[7] = v23;
                long long v24 = *((_OWORD *)this + 22);
                v73[2] = *((_OWORD *)this + 21);
                v73[3] = v24;
                long long v25 = *((_OWORD *)this + 24);
                v73[4] = *((_OWORD *)this + 23);
                v73[5] = v25;
                long long v26 = *((_OWORD *)this + 20);
                v73[0] = *((_OWORD *)this + 19);
                v73[1] = v26;
                uint64_t v27 = [(EspressoTrainingInnerProductWeightsForMPS *)v22 initWithParams:v73 forMode:*(unsigned __int8 *)(*((void *)this + 1) + 114)];
                [(EspressoTrainingInnerProductWeightsForMPS *)v27 setWeightsBuffer:v21];
                [(EspressoTrainingInnerProductWeightsForMPS *)v27 setBiasesBuffer:v19];
                int v28 = 268435488;
                if (v16)
                {
                  if ((*((unsigned int (**)(id *))*v16 + 4))(v16) == 1) {
                    int v28 = 268435472;
                  }
                  else {
                    int v28 = 268435488;
                  }
                }
                v27->super.data_type = v28;
                objc_storeStrong((id *)this + 69, v27);
                Espresso::MPSEngine::inner_product_kernel::recreate_kernel(this);
                *((unsigned char *)this + 600) = 0;

                int v20 = v67;
              }
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0) {
                Espresso::throw_exception_selector<Espresso::invalid_state_error>("Training inner_product has bound weights");
              }
              if (!v19)
              {
                uint64_t v29 = (void *)*((void *)this + 74);
                if (!v29)
                {
                  Espresso::abstract_blob_container::shape(v69, **a3);
                  BOOL v30 = v70 > 3 || v70 == -1;
                  uint64_t v31 = 8;
                  if (v30) {
                    uint64_t v31 = 16;
                  }
                  uint64_t v32 = *(int *)(**a3 + v31);
                  if (__p)
                  {
                    uint64_t v72 = __p;
                    operator delete(__p);
                  }
                  uint64_t v33 = objc_msgSend(v21, "device", v67);
                  uint64_t v34 = [v33 newBufferWithLength:4 * v32 options:0];
                  uint64_t v35 = (void *)*((void *)this + 74);
                  *((void *)this + 74) = v34;

                  uint64_t v29 = (void *)*((void *)this + 74);
                }
                int v19 = v29;
              }
              id v36 = objc_alloc(MEMORY[0x1E4F35418]);
              int v37 = (void *)[v36 initWithWeights:v21 biases:v19];

              unint64_t v39 = *(std::__shared_weak_count **)(a2 + 8);
              if (v39) {
                atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              objc_msgSend(*((id *)this + 68), "reloadWeightsAndBiasesWithCommandBuffer:state:", v38[18], v37, v67);
              if (v39) {
                nitro::nitro_function::nitro_function(v39);
              }

              if (v20) {
                nitro::nitro_function::nitro_function(v20);
              }
              if (v68) {
                nitro::nitro_function::nitro_function(v68);
              }
              goto LABEL_54;
            }
LABEL_26:
            int v19 = (id *)v19[21];
            goto LABEL_27;
          }
        }
        else
        {
          int v19 = 0;
        }
        int v20 = 0;
        if (v16) {
          goto LABEL_25;
        }
        goto LABEL_80;
      }
    }
    else
    {
      id v16 = 0;
    }
    long long v17 = 0;
    goto LABEL_19;
  }
LABEL_54:
  if (!*((void *)this + 68))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The mps kernel was not created");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL v40 = *a3;
  if (!*v40)
  {
    int v41 = 0;
    goto LABEL_60;
  }
  if (!v41)
  {
LABEL_60:
    uint64_t v42 = 0;
    goto LABEL_61;
  }
  uint64_t v42 = (std::__shared_weak_count *)v40[1];
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_61:
  int v43 = *a4;
  unsigned int v44 = **a4;
  if (!v44)
  {
    int v45 = 0;
    goto LABEL_66;
  }
  if (!v45)
  {
LABEL_66:
    uint64_t v46 = 0;
    goto LABEL_67;
  }
  uint64_t v46 = (std::__shared_weak_count *)v43[1];
  if (v46) {
    atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_67:
  if (!*(void *)a2)
  {
    uint64_t v47 = 0;
    goto LABEL_72;
  }
  if (!v47)
  {
LABEL_72:
    unsigned int v48 = 0;
    goto LABEL_73;
  }
  unsigned int v48 = *(std::__shared_weak_count **)(a2 + 8);
  if (v48) {
    atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_73:
  uint64_t v49 = (void *)*((void *)v41 + 32);
  if ((unint64_t)((char *)a4[1] - (char *)*a4) < 0x11)
  {
    unint64_t v54 = [v49 count];
    unint64_t v55 = (void *)*((void *)this + 68);
    uint64_t v56 = v47[18];
    if (v54 >= 2)
    {
      [v55 encodeBatchToCommandBuffer:v56 sourceImages:*((void *)v45 + 32) destinationImages:*((void *)v41 + 32)];
      goto LABEL_85;
    }
    id v63 = *((id *)v45 + 30);
    id v65 = *((id *)v41 + 30);
    [v55 encodeToCommandBuffer:v56 sourceImage:v63 destinationImage:v65];
  }
  else
  {
    unint64_t v50 = [v49 count];
    uint64_t v51 = (void *)*((void *)this + 68);
    if (v50 >= 2)
    {
      uint64_t v52 = [*((id *)this + 68) resultStateBatchForSourceImage:*((void *)v45 + 32) sourceStates:0 destinationImage:*((void *)v41 + 32)];
      uint64_t v53 = (void *)*((void *)this + 73);
      *((void *)this + 73) = v52;

      [*((id *)this + 68) encodeBatchToCommandBuffer:v47[18] sourceImages:*((void *)v45 + 32) destinationStates:*((void *)this + 73) destinationImages:*((void *)v41 + 32)];
      goto LABEL_85;
    }
    id v57 = *((id *)v45 + 30);
    id v58 = *((id *)v41 + 30);
    uint64_t v59 = [v51 resultStateForSourceImage:v57 sourceStates:0 destinationImage:v58];
    long long v60 = (void *)*((void *)this + 72);
    *((void *)this + 72) = v59;

    uint64_t v61 = (void *)*((void *)this + 68);
    uint64_t v62 = v47[18];
    id v63 = *((id *)v45 + 30);
    uint64_t v64 = *((void *)this + 72);
    id v65 = *((id *)v41 + 30);
    [v61 encodeToCommandBuffer:v62 sourceImage:v63 destinationState:v64 destinationImage:v65];
  }

LABEL_85:
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  if (v46) {
    nitro::nitro_function::nitro_function(v46);
  }
  if (v42) {
    nitro::nitro_function::nitro_function(v42);
  }
}

void sub_1928A2A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::inner_product_kernel::~inner_product_kernel(id *this)
{
  uint64_t v2 = (std::__shared_weak_count *)this[71];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel((Espresso::generic_inner_product_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  uint64_t v2 = (std::__shared_weak_count *)this[71];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel((Espresso::generic_inner_product_kernel *)this);
}

BOOL Espresso::MPSEngine::upsample_kernel::is_valid_for_engine(uint64_t a1)
{
  return !*(unsigned char *)(a1 + 304) || *(_DWORD *)(a1 + 292) != 0;
}

void Espresso::MPSEngine::upsample_kernel::on_resized(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (a3[1] != *a3 {
    && *(void *)v3
  }
  {
    uint64_t v7 = *(std::__shared_weak_count **)(v3 + 8);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = *(const void **)(a1 + 8);
    if (!v8
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
    }
    uint64_t v10 = *(std::__shared_weak_count **)(a1 + 16);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v11 = *(_DWORD *)(a1 + 292);
    if (v11 == 1)
    {
      (*(void (**)(void, uint64_t, uint64_t *))(**(void **)(a1 + 384) + 80))(*(void *)(a1 + 384), a2, a3);
    }
    else
    {
      if (!v11)
      {
        uint64_t v12 = [objc_alloc(MEMORY[0x1E4F35508]) initWithDevice:v9[18] integerScaleFactorX:*(int *)(a1 + 284) integerScaleFactorY:*(int *)(a1 + 288)];
        uint64_t v13 = *(void **)(a1 + 376);
        *(void *)(a1 + 376) = v12;
      }
      if (!*(void *)(a1 + 376))
      {
        long long v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v17, "Error creating mps kernel");
        __cxa_throw(v17, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if (*(unsigned char *)(*(void *)(a1 + 8) + 64))
      {
        unint64_t v14 = (void *)(a1 + 176);
        if (*(char *)(a1 + 199) < 0) {
          unint64_t v14 = (void *)*v14;
        }
        uint64_t v15 = [NSString stringWithUTF8String:v14];
        [*(id *)(a1 + 376) setLabel:v15];
      }
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v7)
    {
      nitro::nitro_function::nitro_function(v7);
    }
  }
}

void sub_1928A2E9C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v3);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::upsample_kernel::__launch(void *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = a1[48];
  if (v8)
  {
    uint64_t v9 = *(void (**)(void))(*(void *)v8 + 16);
    v9();
    return;
  }
  if (!a1[47])
  {
    (*(void (**)(void *, uint64_t *, uint64_t *))(*a1 + 80))(a1, a3, a4);
    if (!a1[47])
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "The mps kernel was not created");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  uint64_t v10 = *a3;
  if (!*(void *)v10)
  {
    int v11 = 0;
    goto LABEL_12;
  }
  if (!v11)
  {
LABEL_12:
    uint64_t v12 = 0;
    goto LABEL_13;
  }
  uint64_t v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_13:
  uint64_t v13 = *a4;
  if (!*(void *)v13)
  {
    unint64_t v14 = 0;
    goto LABEL_18;
  }
  if (!v14)
  {
LABEL_18:
    uint64_t v15 = 0;
    goto LABEL_19;
  }
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 8);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_19:
  if (!*(void *)a2)
  {
    id v16 = 0;
    goto LABEL_24;
  }
  if (!v16)
  {
LABEL_24:
    long long v17 = 0;
    goto LABEL_25;
  }
  long long v17 = *(std::__shared_weak_count **)(a2 + 8);
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_25:
  unint64_t v18 = [v11[32] count];
  int v19 = (void *)a1[47];
  uint64_t v20 = v16[18];
  if (v18 < 2)
  {
    id v21 = v14[30];
    id v22 = v11[30];
    [v19 encodeToCommandBuffer:v20 sourceImage:v21 destinationImage:v22];

    if (!v17) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  [v19 encodeBatchToCommandBuffer:v20 sourceImages:v14[32] destinationImages:v11[32]];
  if (v17) {
LABEL_27:
  }
    nitro::nitro_function::nitro_function(v17);
LABEL_28:
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (v12)
  {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_1928A3214(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::upsample_kernel::~upsample_kernel(Espresso::MPSEngine::upsample_kernel *this)
{
  *(void *)this = &unk_1EE3731D0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE3731D0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t Espresso::MPSEngine::crop_and_resize_kernel::is_valid_for_engine(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 384);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v6 = *a2;
  uint64_t v7 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 200))(v2, &v6);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  return v4;
}

void sub_1928A33EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::MPSEngine::crop_and_resize_kernel::__launch(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 384);
  if (!v1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Metal kernel for crop_and_resize not found");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 16);

  return v2();
}

void sub_1928A3490(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::crop_and_resize_kernel::~crop_and_resize_kernel(Espresso::MPSEngine::crop_and_resize_kernel *this)
{
  *(void *)this = &unk_1EE375D78;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 47);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE375D78;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 49);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 47);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::MPSEngine::activation_kernel::re_initialize(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  long long v5 = *(_OWORD *)a4;
  long long v6 = *(_OWORD *)(a4 + 16);
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a4 + 32);
  *(_OWORD *)(a1 + 304) = v5;
  *(_OWORD *)(a1 + 320) = v6;
  uint64_t v7 = *(const void **)(a1 + 8);
  if (!v7
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 16);
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    id v18 = v11[18];
    nitro::nitro_function::nitro_function(v12);
    id v13 = v18;
  }
  else
  {
    id v13 = v11[18];
  }
  id v19 = v13;
  uint64_t v14 = create_mps_neuron(v13, *(_DWORD *)(a1 + 304), *(float *)(a1 + 308), *(float *)(a1 + 312));
  uint64_t v15 = *(void **)(a1 + 416);
  *(void *)(a1 + 416) = v14;

  if (!*(void *)(a1 + 416))
  {
    std::allocate_shared[abi:ne180100]<Espresso::MetalLowmemEngine::activation_kernel,std::allocator<Espresso::MetalLowmemEngine::activation_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params &,void>(&v20, a2, a3, a4);
    id v16 = *(std::__shared_weak_count **)(a1 + 432);
    *(_OWORD *)(a1 + 424) = v20;
    if (v16) {
      nitro::nitro_function::nitro_function(v16);
    }
  }
}

void sub_1928A3720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<Espresso::MetalLowmemEngine::activation_kernel,std::allocator<Espresso::MetalLowmemEngine::activation_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params &,void>(void *a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v8 = operator new(0x1D0uLL);
  v8[1] = 0;
  v8[2] = 0;
  *uint64_t v8 = &unk_1EE385AC8;
  long long v9 = *(_OWORD *)(a4 + 16);
  v11[0] = *(_OWORD *)a4;
  v11[1] = v9;
  int v12 = *(_DWORD *)(a4 + 32);
  float result = Espresso::MetalLowmemEngine::activation_kernel::activation_kernel(v8 + 3, a2, a3, v11);
  *a1 = result;
  a1[1] = v8;
  return result;
}

void sub_1928A383C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::activation_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::activation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385AC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::activation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385AC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::MPSEngine::activation_kernel::__set_weight_raw_blob(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 424);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 160))();
  }
  return result;
}

void Espresso::MPSEngine::activation_kernel::__launch(uint64_t a1, uint64_t a2, const void ***a3, uint64_t *a4)
{
  uint64_t v7 = *(void *)(a1 + 424);
  if (v7)
  {
    uint64_t v8 = *(void (**)(void))(*(void *)v7 + 16);
    v8();
    return;
  }
  if (!*(void *)(a1 + 416))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The mps kernel was not created");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  long long v9 = *a3;
  uint64_t v10 = **a3;
  if (!v10)
  {
    int v11 = 0;
    goto LABEL_11;
  }
  if (!v11)
  {
LABEL_11:
    int v12 = 0;
    goto LABEL_12;
  }
  int v12 = (std::__shared_weak_count *)v9[1];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_12:
  uint64_t v13 = *a4;
  if (!*(void *)v13)
  {
    uint64_t v14 = 0;
    goto LABEL_17;
  }
  if (!v14)
  {
LABEL_17:
    uint64_t v15 = 0;
    goto LABEL_18;
  }
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 8);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_18:
  if (!*(void *)a2)
  {
    id v16 = 0;
    goto LABEL_23;
  }
  if (!v16)
  {
LABEL_23:
    long long v17 = 0;
    goto LABEL_24;
  }
  long long v17 = *(std::__shared_weak_count **)(a2 + 8);
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_24:
  unint64_t v18 = [v11[32] count];
  id v19 = *(void **)(a1 + 416);
  uint64_t v20 = v16[18];
  if (v18 < 2)
  {
    id v21 = v14[30];
    id v22 = v11[30];
    [v19 encodeToCommandBuffer:v20 sourceImage:v21 destinationImage:v22];

    if (!v17) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  [v19 encodeBatchToCommandBuffer:v20 sourceImages:v14[32] destinationImages:v11[32]];
  if (v17) {
LABEL_26:
  }
    nitro::nitro_function::nitro_function(v17);
LABEL_27:
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (v12)
  {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_1928A3C00(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::general_padding_kernel::__launch(uint64_t a1, uint64_t a2, const void ***a3, uint64_t *a4)
{
  uint64_t v7 = *(void *)(a1 + 392);
  if (v7)
  {
    uint64_t v8 = *(void (**)(void))(*(void *)v7 + 16);
    v8();
    return;
  }
  if (!*(void *)(a1 + 384))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The mps kernel was not created");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  long long v9 = *a3;
  uint64_t v10 = **a3;
  if (!v10)
  {
    int v11 = 0;
    goto LABEL_11;
  }
  if (!v11)
  {
LABEL_11:
    int v12 = 0;
    goto LABEL_12;
  }
  int v12 = (std::__shared_weak_count *)v9[1];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_12:
  uint64_t v13 = *a4;
  if (!*(void *)v13)
  {
    uint64_t v14 = 0;
    goto LABEL_17;
  }
  if (!v14)
  {
LABEL_17:
    uint64_t v15 = 0;
    goto LABEL_18;
  }
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 8);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_18:
  if (!*(void *)a2)
  {
    id v16 = 0;
    goto LABEL_23;
  }
  if (!v16)
  {
LABEL_23:
    long long v17 = 0;
    goto LABEL_24;
  }
  long long v17 = *(std::__shared_weak_count **)(a2 + 8);
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_24:
  unint64_t v18 = [v11[32] count];
  id v19 = *(void **)(a1 + 384);
  uint64_t v20 = v16[18];
  if (v18 < 2)
  {
    id v21 = v14[30];
    id v22 = v11[30];
    [v19 encodeToCommandBuffer:v20 sourceImage:v21 destinationImage:v22];

    if (!v17) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  [v19 encodeBatchToCommandBuffer:v20 sourceImages:v14[32] destinationImages:v11[32]];
  if (v17) {
LABEL_26:
  }
    nitro::nitro_function::nitro_function(v17);
LABEL_27:
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (v12)
  {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_1928A3F78(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::general_padding_kernel::~general_padding_kernel(Espresso::MPSEngine::general_padding_kernel *this)
{
  *(void *)this = &unk_1EE375ED0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 50);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 47);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE375ED0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 50);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 47);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

void Espresso::MPSEngine::crop_kernel::__launch(uint64_t a1, uint64_t a2, const void ***a3, uint64_t *a4)
{
  if (!*(void *)(a1 + 296))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The mps kernel was not created");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v7 = *a3;
  uint64_t v8 = **a3;
  if (!v8)
  {
    long long v9 = 0;
    goto LABEL_7;
  }
  if (!v9)
  {
LABEL_7:
    uint64_t v10 = 0;
    goto LABEL_8;
  }
  uint64_t v10 = (std::__shared_weak_count *)v7[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_8:
  uint64_t v11 = *a4;
  if (!*(void *)v11)
  {
    int v12 = 0;
    goto LABEL_13;
  }
  if (!v12)
  {
LABEL_13:
    uint64_t v13 = 0;
    goto LABEL_14;
  }
  uint64_t v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_14:
  if (!*(void *)a2)
  {
    uint64_t v14 = 0;
    goto LABEL_19;
  }
  if (!v14)
  {
LABEL_19:
    uint64_t v15 = 0;
    goto LABEL_20;
  }
  uint64_t v15 = *(std::__shared_weak_count **)(a2 + 8);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_20:
  unint64_t v16 = [v9[32] count];
  long long v17 = *(void **)(a1 + 296);
  uint64_t v18 = v14[18];
  if (v16 >= 2)
  {
    [v17 encodeBatchToCommandBuffer:v18 sourceImages:*((void *)v12 + 32) destinationImages:v9[32]];
    if (!v15) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  id v19 = *((id *)v12 + 30);
  id v20 = v9[30];
  [v17 encodeToCommandBuffer:v18 sourceImage:v19 destinationImage:v20];

  if (v15) {
LABEL_22:
  }
    nitro::nitro_function::nitro_function(v15);
LABEL_23:
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v10)
  {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_1928A4350(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::crop_kernel::~crop_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

BOOL Espresso::MPSEngine::reduce_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(_DWORD *)(a1 + 280) == 11 && a3[1] != *a3 && *(int *)(*a3 + 8) > 256) {
    return 0;
  }
  if (*(void *)(a1 + 360)) {
    return 1;
  }
  return *(void *)(a1 + 352) != 0;
}

void Espresso::MPSEngine::reduce_kernel::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  if (*(void *)(a1 + 352) && *(_DWORD *)(a1 + 280) == 11 && *(_DWORD *)(a1 + 288) == 4)
  {
    uint64_t v8 = **a4;
    if (v8) {
    else
    }
      long long v9 = 0;
    long long v23 = **a3;
    if (v23) {
    else
    }
      long long v24 = 0;
    Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v42, *a2);
    id v25 = v42[0];
    uint64_t v26 = (uint64_t)**a4;
    int v27 = *(_DWORD *)(v26 + 20);
    LODWORD(v26) = *(_DWORD *)(v26 + 24);
    if ((int)v26 <= 1) {
      uint64_t v26 = 1;
    }
    else {
      uint64_t v26 = v26;
    }
    uint64_t v28 = v26 * v27;
    id v29 = v9[21];
    id v30 = v24[21];
    uint64_t v32 = *((int *)v9 + 2);
    uint64_t v31 = *((int *)v9 + 3);
    int v33 = *((_DWORD *)v9 + 4);
    v41[6] = 256;
    v41[2] = v32;
    void v41[3] = v31;
    v41[4] = v28;
    v41[5] = 0;
    v41[0] = ((v33 - 1) >> 2) + 1;
    v41[1] = v33;
    [v25 setComputePipelineState:*(void *)(a1 + 352)];
    [v25 setTexture:v30 atIndex:0];
    [v25 setTexture:v29 atIndex:1];
    [v25 setBytes:v41 length:28 atIndex:0];
    if ((int)v32 > 3 || (int)v31 > 3)
    {
      int v35 = v32 - 1;
      if ((int)v32 < 1) {
        int v35 = v32 + 2;
      }
      uint64_t v36 = (v35 >> 2) + 1;
      int v37 = v31 - 1;
      if ((int)v31 < 1) {
        int v37 = v31 + 2;
      }
      uint64_t v38 = v36;
      uint64_t v39 = (v37 >> 2) + 1;
      uint64_t v40 = (int)v28;
      uint64_t v34 = 4;
    }
    else
    {
      uint64_t v38 = v32;
      uint64_t v39 = v31;
      uint64_t v40 = v28;
      uint64_t v34 = 1;
    }
    objc_msgSend(v25, "dispatchThreadgroups:threadsPerThreadgroup:", &v38, v34, v34, 1);

    Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v42);
    return;
  }
  if (!*(void *)(a1 + 360)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("The mps kernel was not created");
  }
  uint64_t v10 = *a3;
  if (!**a3)
  {
    uint64_t v11 = 0;
    goto LABEL_12;
  }
  if (!v11)
  {
LABEL_12:
    int v12 = 0;
    goto LABEL_13;
  }
  int v12 = (std::__shared_weak_count *)v10[1];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_13:
  uint64_t v13 = *a4;
  if (!*v13)
  {
    uint64_t v14 = 0;
    goto LABEL_18;
  }
  if (!v14)
  {
LABEL_18:
    uint64_t v15 = 0;
    goto LABEL_19;
  }
  uint64_t v15 = (std::__shared_weak_count *)v13[1];
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_19:
  if (!*a2)
  {
    unint64_t v16 = 0;
    goto LABEL_24;
  }
  if (!v16)
  {
LABEL_24:
    long long v17 = 0;
    goto LABEL_25;
  }
  long long v17 = (std::__shared_weak_count *)a2[1];
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_25:
  unint64_t v18 = [v11[32] count];
  id v19 = *(void **)(a1 + 360);
  uint64_t v20 = v16[18];
  if (v18 < 2)
  {
    id v21 = v14[30];
    id v22 = v11[30];
    [v19 encodeToCommandBuffer:v20 sourceImage:v21 destinationImage:v22];

    if (!v17) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  [v19 encodeBatchToCommandBuffer:v20 sourceImages:v14[32] destinationImages:v11[32]];
  if (v17) {
LABEL_27:
  }
    nitro::nitro_function::nitro_function(v17);
LABEL_28:
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (v12)
  {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_1928A4904(_Unwind_Exception *a1)
{
  if (v2)
  {
    nitro::nitro_function::nitro_function(v2);
    if (!v3)
    {
LABEL_3:
      if (!v1) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v3)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v3);
  if (!v1) {
LABEL_5:
  }
    _Unwind_Resume(a1);
LABEL_4:
  nitro::nitro_function::nitro_function(v1);
  goto LABEL_5;
}

void Espresso::MPSEngine::reduce_kernel::~reduce_kernel(id *this)
{
  uint64_t v2 = (std::__shared_weak_count *)this[43];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  uint64_t v2 = (std::__shared_weak_count *)this[43];
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::MPSEngine::copy_kernel::__launch(void *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  if (!a1[36])
  {
    uint64_t v8 = (const void *)a1[1];
    if (!v8
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
    }
    uint64_t v10 = (std::__shared_weak_count *)a1[2];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      id v11 = v9[18];
      nitro::nitro_function::nitro_function(v10);
    }
    else
    {
      id v11 = v9[18];
    }
    LODWORD(v12) = 1.0;
    uint64_t v13 = [MEMORY[0x1E4F35930] cnnNeuronDescriptorWithType:2 a:v12 b:0.0];
    uint64_t v14 = [objc_alloc(MEMORY[0x1E4F35470]) initWithDevice:v11 neuronDescriptor:v13];
    uint64_t v15 = (void *)a1[36];
    a1[36] = v14;
  }
  uint64_t v16 = *a3;
  if (!*(void *)v16)
  {
    long long v17 = 0;
    goto LABEL_13;
  }
  if (!v17)
  {
LABEL_13:
    unint64_t v18 = 0;
    goto LABEL_14;
  }
  unint64_t v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_14:
  uint64_t v19 = *a4;
  if (!*(void *)v19)
  {
    uint64_t v20 = 0;
    goto LABEL_19;
  }
  if (!v20)
  {
LABEL_19:
    id v21 = 0;
    goto LABEL_20;
  }
  id v21 = *(std::__shared_weak_count **)(v19 + 8);
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_20:
  if (!*(void *)a2)
  {
    id v22 = 0;
    goto LABEL_25;
  }
  if (!v22)
  {
LABEL_25:
    long long v23 = 0;
    goto LABEL_26;
  }
  long long v23 = *(std::__shared_weak_count **)(a2 + 8);
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_26:
  unint64_t v24 = [v17[32] count];
  id v25 = (void *)a1[36];
  uint64_t v26 = v22[18];
  if (v24 >= 2)
  {
    [v25 encodeBatchToCommandBuffer:v26 sourceImages:*((void *)v20 + 32) destinationImages:v17[32]];
    if (!v23) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  id v27 = *((id *)v20 + 30);
  id v28 = v17[30];
  [v25 encodeToCommandBuffer:v26 sourceImage:v27 destinationImage:v28];

  if (v23) {
LABEL_28:
  }
    nitro::nitro_function::nitro_function(v23);
LABEL_29:
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  if (v18)
  {
    nitro::nitro_function::nitro_function(v18);
  }
}

void sub_1928A4D98(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::copy_kernel::~copy_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::MPSEngine::sgd_kernel::__launch()
{
}

void Espresso::MPSEngine::sgd_kernel::~sgd_kernel(Espresso::MPSEngine::sgd_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::MPSEngine::adam_kernel::__launch()
{
}

void Espresso::MPSEngine::adam_kernel::~adam_kernel(Espresso::MPSEngine::adam_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

BOOL Espresso::MPSEngine::grid_sampling_kernel::is_valid_for_engine(uint64_t a1)
{
  return *(unsigned char *)(a1 + 285) == 0;
}

void Espresso::MPSEngine::grid_sampling_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, const void ***a4)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 288))
  {
    id v8 = objc_alloc(MEMORY[0x1E4F35910]);
    long long v9 = *(const void **)(a1 + 8);
    if (!v9
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
    }
    id v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = [v8 initWithDevice:v10[18]];
    uint64_t v13 = *(void **)(a1 + 288);
    *(void *)(a1 + 288) = v12;

    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    [*(id *)(a1 + 288) setUseGridValueAsInputCoordinate:*(unsigned __int8 *)(a1 + 284)];
    if (!*(void *)(a1 + 288)) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("The mps kernel was not created");
    }
  }
  uint64_t v14 = *a3;
  if (*(void *)v14)
  {
    if (v15)
    {
      uint64_t v16 = *(void *)(v14 + 8);
      if (v16)
      {
        uint64_t v49 = *(std::__shared_weak_count **)(v14 + 8);
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
        goto LABEL_15;
      }
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v49 = 0;
LABEL_15:
  long long v17 = *a4;
  unint64_t v18 = **a4;
  if (v18)
  {
    if (v19)
    {
      uint64_t v20 = (atomic_ullong *)v17[1];
      if (v20)
      {
        unsigned int v48 = (std::__shared_weak_count *)v17[1];
        atomic_fetch_add_explicit(v20 + 1, 1uLL, memory_order_relaxed);
        long long v17 = *a4;
        goto LABEL_21;
      }
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  unsigned int v48 = 0;
LABEL_21:
  id v21 = v17[2];
  if (v21)
  {
    if (v22)
    {
      long long v23 = (atomic_ullong *)v17[3];
      if (v23)
      {
        uint64_t v47 = (std::__shared_weak_count *)v17[3];
        atomic_fetch_add_explicit(v23 + 1, 1uLL, memory_order_relaxed);
        goto LABEL_27;
      }
    }
  }
  else
  {
    id v22 = 0;
  }
  uint64_t v47 = 0;
LABEL_27:
  if (*(void *)a2)
  {
    if (v24)
    {
      uint64_t v25 = *(void *)(a2 + 8);
      if (v25)
      {
        uint64_t v46 = *(std::__shared_weak_count **)(a2 + 8);
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
        goto LABEL_33;
      }
    }
  }
  else
  {
    unint64_t v24 = 0;
  }
  uint64_t v46 = 0;
LABEL_33:
  unsigned int v44 = v24;
  int v45 = v19;
  if ((unint64_t)[v15[32] count] < 2)
  {
    id v35 = v22[30];
    id v36 = objc_alloc(MEMORY[0x1E4F35530]);
    int v37 = [v35 texture];
    uint64_t v38 = objc_msgSend(v36, "initWithParentImage:sliceRange:featureChannels:", v35, 0, objc_msgSend(v37, "arrayLength"), 2);

    uint64_t v39 = *(void **)(a1 + 288);
    uint64_t v40 = v24[18];
    id v41 = v19[30];
    id v42 = v15[30];
    [v39 encodeToCommandBuffer:v40 primaryImage:v41 secondaryImage:v38 destinationImage:v42];
  }
  else
  {
    uint64_t v26 = objc_opt_new();
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    id v27 = v22[32];
    uint64_t v28 = [v27 countByEnumeratingWithState:&v50 objects:v54 count:16];
    if (v28)
    {
      uint64_t v29 = *(void *)v51;
      do
      {
        for (uint64_t i = 0; i != v28; ++i)
        {
          if (*(void *)v51 != v29) {
            objc_enumerationMutation(v27);
          }
          uint64_t v31 = *(void **)(*((void *)&v50 + 1) + 8 * i);
          id v32 = objc_alloc(MEMORY[0x1E4F35530]);
          int v33 = [v31 texture];
          uint64_t v34 = objc_msgSend(v32, "initWithParentImage:sliceRange:featureChannels:", v31, 0, objc_msgSend(v33, "arrayLength"), 2);

          [v26 addObject:v34];
        }
        uint64_t v28 = [v27 countByEnumeratingWithState:&v50 objects:v54 count:16];
      }
      while (v28);
    }

    [*(id *)(a1 + 288) encodeBatchToCommandBuffer:v44[18] primaryImages:v45[32] secondaryImages:v26 destinationImages:v15[32]];
  }
  if (v46) {
    nitro::nitro_function::nitro_function(v46);
  }
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  if (v49) {
    nitro::nitro_function::nitro_function(v49);
  }
}

void sub_1928A54C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  __cxa_free_exception(v16);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::grid_sampling_kernel::~grid_sampling_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::MPSEngine::local_correlation_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, const void ***a4)
{
  if (!*(void *)(a1 + 296))
  {
    id v8 = objc_alloc(MEMORY[0x1E4F35920]);
    long long v9 = *(const void **)(a1 + 8);
    if (!v9
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
    }
    id v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = [v8 initWithDevice:v10[18] windowInX:*(int *)(a1 + 280) windowInY:*(int *)(a1 + 284) strideInX:*(int *)(a1 + 288) strideInY:*(int *)(a1 + 292)];
    uint64_t v13 = *(void **)(a1 + 296);
    *(void *)(a1 + 296) = v12;

    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (!*(void *)(a1 + 296)) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("The mps kernel was not created");
    }
  }
  uint64_t v14 = *a3;
  if (!*(void *)v14)
  {
    uint64_t v15 = 0;
    goto LABEL_14;
  }
  if (!v15)
  {
LABEL_14:
    uint64_t v16 = 0;
    goto LABEL_15;
  }
  uint64_t v16 = *(std::__shared_weak_count **)(v14 + 8);
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_15:
  long long v17 = *a4;
  unint64_t v18 = **a4;
  if (!v18)
  {
    uint64_t v19 = 0;
    goto LABEL_20;
  }
  if (!v19)
  {
LABEL_20:
    uint64_t v20 = 0;
    goto LABEL_21;
  }
  uint64_t v20 = (std::__shared_weak_count *)v17[1];
  if (v20)
  {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v17 = *a4;
  }
LABEL_21:
  id v21 = v17[2];
  if (!v21)
  {
    id v22 = 0;
    goto LABEL_26;
  }
  if (!v22)
  {
LABEL_26:
    long long v23 = 0;
    goto LABEL_27;
  }
  long long v23 = (std::__shared_weak_count *)v17[3];
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_27:
  if (!*(void *)a2)
  {
    unint64_t v24 = 0;
    goto LABEL_32;
  }
  if (!v24)
  {
LABEL_32:
    uint64_t v25 = 0;
    goto LABEL_33;
  }
  uint64_t v25 = *(std::__shared_weak_count **)(a2 + 8);
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_33:
  unint64_t v26 = [v15[32] count];
  id v27 = *(void **)(a1 + 296);
  uint64_t v28 = v24[18];
  if (v26 >= 2)
  {
    [v27 encodeBatchToCommandBuffer:v28 primaryImages:*((void *)v19 + 32) secondaryImages:*((void *)v22 + 32) destinationImages:v15[32]];
    if (!v25) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  id v29 = *((id *)v19 + 30);
  id v30 = *((id *)v22 + 30);
  id v31 = v15[30];
  [v27 encodeToCommandBuffer:v28 primaryImage:v29 secondaryImage:v30 destinationImage:v31];

  if (v25) {
LABEL_35:
  }
    nitro::nitro_function::nitro_function(v25);
LABEL_36:
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  if (v16)
  {
    nitro::nitro_function::nitro_function(v16);
  }
}

void sub_1928A5A20(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::local_correlation_kernel::~local_correlation_kernel(id *this)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

BOOL Espresso::MPSEngine::softmax_nd_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 8) - *(void *)a3 != 64) {
    return 0;
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v7, *(const Espresso::layer_shape **)a3, 0);
  BOOL result = 0;
  int v5 = (v8 & (*(int *)(a1 + 280) >> 31)) + *(_DWORD *)(a1 + 280);
  if (v5 >= 0 && v5 < v8) {
    return v8 + ~v5 == 2 && v8 > 3;
  }
  return result;
}

uint64_t Espresso::MPSEngine::softmax_nd_kernel::on_resized(uint64_t a1, void **a2)
{
  uint64_t v3 = *(void *)(a1 + 344);
  if (!v3)
  {
    int v4 = (*(uint64_t (**)(void))(*(void *)**a2 + 32))(**a2);
    int v5 = operator new(0x1B8uLL);
    v5[1] = 0;
    v5[2] = 0;
    void *v5 = &unk_1EE38CA20;
    v11[0] = *(_OWORD *)(a1 + 312);
    *(long long *)((char *)v11 + 12) = *(_OWORD *)(a1 + 324);
    uint64_t v3 = Espresso::MPSEngine::softmax_kernel::softmax_kernel((uint64_t)(v5 + 3), (uint64_t *)(a1 + 8), v4, v11);
    long long v6 = (uint64_t *)(a1 + 344);
    *(void *)&long long v7 = v3;
    *((void *)&v7 + 1) = v5;
    int v8 = *(std::__shared_weak_count **)(a1 + 352);
    *(_OWORD *)(a1 + 344) = v7;
    if (v8)
    {
      nitro::nitro_function::nitro_function(v8);
      uint64_t v3 = *v6;
      if (!*v6) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("No implementation found for softmax_nd");
      }
    }
  }
  long long v9 = *(uint64_t (**)(void))(*(void *)v3 + 80);

  return v9();
}

void sub_1928A5CEC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSEngine::softmax_kernel::softmax_kernel(uint64_t a1, uint64_t *a2, int a3, long long *a4)
{
  uint64_t v7 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_DWORD *)(v7 + 304) = 256;
  *(_OWORD *)(v7 + 280) = xmmword_192DCA290;
  *(void *)(v7 + 296) = 1;
  *(_DWORD *)(v7 + 308) = 0;
  *(unsigned char *)(v7 + 312) = 1;
  *(void *)(v7 + 320) = 0;
  *(void *)(v7 + 328) = 0;
  *(void *)uint64_t v7 = &unk_1EE372F20;
  *(_OWORD *)(v7 + 336) = 0u;
  *(_OWORD *)(v7 + 352) = 0u;
  *(_OWORD *)(v7 + 376) = 0u;
  *(_OWORD *)(v7 + 392) = 0u;
  *(void *)(v7 + 408) = 0;
  long long v8 = *a4;
  *(_OWORD *)(v7 + 292) = *(long long *)((char *)a4 + 12);
  *(_OWORD *)(v7 + 280) = v8;
  *(_DWORD *)(v7 + 368) = a3;
  long long v9 = *(const void **)(v7 + 8);
  if (!v9
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE34EF90;
  }
  id v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    id v12 = v10[18];
    nitro::nitro_function::nitro_function(v11);
  }
  else
  {
    id v12 = v10[18];
  }
  if (*(_DWORD *)(a1 + 300))
  {
    uint64_t v13 = [objc_alloc(MEMORY[0x1E4F354A0]) initWithDevice:v12];
    uint64_t v14 = *(void **)(a1 + 344);
    *(void *)(a1 + 344) = v13;
LABEL_13:

    goto LABEL_14;
  }
  uint64_t v15 = [objc_alloc(MEMORY[0x1E4F35500]) initWithDevice:v12];
  uint64_t v16 = *(void **)(a1 + 336);
  *(void *)(a1 + 336) = v15;

  if (!*(void *)(a1 + 336))
  {
    uint64_t v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v20, "Error creating mps kernel");
    __cxa_throw(v20, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (*(unsigned char *)(*(void *)(a1 + 8) + 64))
  {
    long long v17 = (void *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0) {
      long long v17 = (void *)*v17;
    }
    uint64_t v14 = [NSString stringWithUTF8String:v17];
    [*(id *)(a1 + 336) setLabel:v14];
    goto LABEL_13;
  }
LABEL_14:

  return a1;
}

void sub_1928A5F64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v3);

  int v5 = *(std::__shared_weak_count **)(v1 + 408);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }

  long long v6 = *(std::__shared_weak_count **)(v1 + 360);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }

  uint64_t v7 = *(std::__shared_weak_count **)(v1 + 328);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::softmax_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::softmax_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38CA20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::softmax_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38CA20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::MPSEngine::softmax_nd_kernel::__launch(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1[43];
  if (!v5)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 80))(a1, a3, a4);
    uint64_t v5 = a1[43];
  }
  long long v6 = *(uint64_t (**)(void))(*(void *)v5 + 16);

  return v6();
}

void Espresso::MPSEngine::softmax_nd_kernel::~softmax_nd_kernel(Espresso::MPSEngine::softmax_nd_kernel *this)
{
  *(void *)this = &unk_1EE373780;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE373780;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::base_kernel::~base_kernel(this);
}

uint64_t Espresso::MPSEngine::general_concat_kernel::on_resized(uint64_t result, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  if (a2[1] != *a2 && a3[1] != *a3)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(result + 296);
    if (!v5)
    {
      *(_DWORD *)(v4 + 312) = 0;
      *(_WORD *)(v4 + 352) = 0;
      (*(void (**)(void))(**(void **)v3 + 32))();
      long long v6 = (char *)operator new(0x1A0uLL);
      *((void *)v6 + 1) = 0;
      *((void *)v6 + 2) = 0;
      *(void *)long long v6 = &unk_1EE385978;
      long long v11 = *(_OWORD *)(v4 + 312);
      long long v12 = *(_OWORD *)(v4 + 328);
      *(_OWORD *)uint64_t v13 = *(_OWORD *)(v4 + 344);
      *(_OWORD *)&v13[16] = *(_OWORD *)(v4 + 360);
      uint64_t v5 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), (uint64_t *)(v4 + 8));
      uint64_t v7 = (uint64_t *)(v4 + 296);
      v6[368] = 0;
      *((void *)v6 + 48) = 0;
      *((void *)v6 + 49) = 0;
      *((void *)v6 + 47) = 0;
      *((void *)v6 + 3) = &unk_1EE348A70;
      *((void *)v6 + 50) = 0;
      *((void *)v6 + 51) = 0;
      *((_OWORD *)v6 + 19) = v11;
      *((_OWORD *)v6 + 20) = v12;
      *((_OWORD *)v6 + 21) = *(_OWORD *)v13;
      *(_OWORD *)(v6 + 349) = *(_OWORD *)&v13[13];
      *(void *)&long long v8 = v5;
      *((void *)&v8 + 1) = v6;
      long long v9 = *(std::__shared_weak_count **)(v4 + 304);
      *(_OWORD *)(v4 + 296) = v8;
      if (v9)
      {
        nitro::nitro_function::nitro_function(v9);
        uint64_t v5 = *v7;
        if (!*v7) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("No implementation found for general_concat_kernel");
        }
      }
    }
    uint64_t v10 = *(uint64_t (**)(void))(*(void *)v5 + 80);
    return v10();
  }
  return result;
}

void sub_1928A63D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::concat_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385978;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385978;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::MPSEngine::general_concat_kernel::__launch(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1[37];
  if (!v5)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 80))(a1, a3, a4);
    uint64_t v5 = a1[37];
    if (!v5) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("No implementation found for general_concat_kernel");
    }
  }
  long long v6 = *(uint64_t (**)(void))(*(void *)v5 + 16);

  return v6();
}

uint64_t Espresso::MPSEngine::split_nd_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::DummyMPSEngine::mps_split_nd_dispatch(*(const Espresso::layer_shape **)a3, *(void *)(a3 + 8), a1 + 280);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  return 0;
}

void sub_1928A6594(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSEngine::split_nd_kernel::on_resized(uint64_t a1, uint64_t *a2, void *a3)
{
  long long v6 = (_OWORD *)(a1 + 808);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 816);
  *long long v6 = 0u;
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  uint64_t v8 = *a2;
  if (a2[1] != *a2 && a3[1] != *a3)
  {
    if (*(void *)v8)
    {
      if (v9)
      {
        uint64_t v10 = v9;
        long long v11 = *(std::__shared_weak_count **)(v8 + 8);
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v12 = *(void *)v6;
        if (!*(void *)v6)
        {
          (*(void (**)(void *))(*(void *)v10 + 32))(v10);
          *(_DWORD *)(a1 + 824) = *(_DWORD *)(a1 + 284);
          *(_DWORD *)(a1 + 828) = 2;
          uint64_t v13 = operator new(0x1A0uLL);
          v13[1] = 0;
          v13[2] = 0;
          *uint64_t v13 = &unk_1EE385940;
          long long v16 = *(_OWORD *)(a1 + 824);
          long long v17 = *(_OWORD *)(a1 + 840);
          long long v18 = *(_OWORD *)(a1 + 856);
          int v19 = *(_DWORD *)(a1 + 872);
          uint64_t v12 = Espresso::base_kernel::base_kernel((uint64_t)(v13 + 3), (uint64_t *)(a1 + 8));
          *((unsigned char *)v13 + 360) = 0;
          v13[46] = 0;
          v13[47] = 0;
          v13[3] = &unk_1EE348918;
          *((_OWORD *)v13 + 24) = 0u;
          *((_OWORD *)v13 + 25) = 0u;
          *((_OWORD *)v13 + 19) = v16;
          *((_OWORD *)v13 + 20) = v17;
          *((_OWORD *)v13 + 21) = v18;
          *((_DWORD *)v13 + 88) = v19;
          *(void *)&long long v14 = v12;
          *((void *)&v14 + 1) = v13;
          uint64_t v15 = *(std::__shared_weak_count **)(a1 + 816);
          *long long v6 = v14;
          if (v15)
          {
            nitro::nitro_function::nitro_function(v15);
            uint64_t v12 = *(void *)v6;
          }
        }
        (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v12 + 80))(v12, a2, a3);
        if (v11)
        {
          nitro::nitro_function::nitro_function(v11);
        }
      }
    }
  }
}

void sub_1928A67D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::split_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::split_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385940;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::split_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385940;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::MPSEngine::split_nd_kernel::__launch(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1[101];
  if (!v5)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 80))(a1, a3, a4);
    uint64_t v5 = a1[101];
    if (!v5) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed to create split kernel");
    }
  }
  long long v6 = *(uint64_t (**)(void))(*(void *)v5 + 16);

  return v6();
}

void Espresso::MPSEngine::dummy_kernel::~dummy_kernel(Espresso::MPSEngine::dummy_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void std::allocate_shared[abi:ne180100]<Espresso::MPSEngine::dummy_kernel,std::allocator<Espresso::MPSEngine::dummy_kernel>,std::shared_ptr<Espresso::MPSEngine::context> &,void>(void *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  long long v6 = operator new(0x130uLL);
  uint64_t v7 = v6;
  v6[1] = 0;
  v6[2] = 0;
  *long long v6 = &unk_1EE38C9B0;
  uint64_t v8 = v6 + 3;
  v9[0] = a2;
  v9[1] = (uint64_t)a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), v9);
  *uint64_t v8 = &unk_1EE372B98;
  if (a3) {
    nitro::nitro_function::nitro_function(a3);
  }
  *a1 = v8;
  a1[1] = v7;
}

void sub_1928A6A68(_Unwind_Exception *a1)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::dummy_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::dummy_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C9B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::dummy_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE38C9B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_deconvolution_kernel>::conv_transposed_weights()
{
  return 0;
}

void Espresso::MPSEngine::convolution_kernel_base<Espresso::generic_deconvolution_kernel>::clear_weights(Espresso::generic_convolution_kernel *a1)
{
  Espresso::generic_convolution_kernel::clear_weights(a1);
  uint64_t v2 = (void *)*((void *)a1 + 73);
  uint64_t v3 = (std::__shared_weak_count *)v2[25];
  v2[24] = 0;
  v2[25] = 0;
  if (v3)
  {
    nitro::nitro_function::nitro_function(v3);
    uint64_t v2 = (void *)*((void *)a1 + 73);
  }
  uint64_t v4 = (std::__shared_weak_count *)v2[27];
  v2[26] = 0;
  v2[27] = 0;
  if (v4)
  {
    nitro::nitro_function::nitro_function(v4);
    uint64_t v2 = (void *)*((void *)a1 + 73);
  }
  uint64_t v5 = (std::__shared_weak_count *)v2[23];
  v2[22] = 0;
  v2[23] = 0;
  if (v5)
  {
    nitro::nitro_function::nitro_function(v5);
  }
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::upsample_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::upsample_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385A58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::upsample_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385A58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::crop_and_resize_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::crop_and_resize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385CC0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::crop_and_resize_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385CC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::MetalLowmemEngine::general_padding_kernel,std::allocator<Espresso::MetalLowmemEngine::general_padding_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_padding_params &,void>(uint64_t *a1, uint64_t *a2, long long *a3)
{
  long long v6 = (char *)operator new(0x190uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)long long v6 = &unk_1EE385CF8;
  long long v11 = a3[2];
  *(_OWORD *)uint64_t v12 = a3[3];
  *(_OWORD *)&v12[12] = *(long long *)((char *)a3 + 60);
  long long v9 = *a3;
  long long v10 = a3[1];
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((void *)v6 + 3) = &unk_1EE349ED0;
  *((void *)v6 + 48) = 0;
  *((void *)v6 + 49) = 0;
  *((_OWORD *)v6 + 21) = v11;
  *((_OWORD *)v6 + 22) = *(_OWORD *)v12;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  __n128 result = *(__n128 *)&v12[12];
  *(_OWORD *)(v6 + 364) = *(_OWORD *)&v12[12];
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1928A6DB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::general_padding_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::general_padding_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385CF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::general_padding_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385CF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ___ZN8Espresso9MPSEngine13reduce_kernel12used_versionEv_block_invoke()
{
  v0 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  id v3 = [v0 persistentDomainForName:*MEMORY[0x1E4F283E0]];

  uint64_t v1 = [v3 objectForKeyedSubscript:@"espresso.reduce_mps"];

  if (v1)
  {
    uint64_t v2 = [v3 objectForKeyedSubscript:@"espresso.reduce_mps"];
    Espresso::MPSEngine::reduce_kernel::used_version(void)::override_version = [v2 intValue];
  }
}

void sub_1928A6F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  long long v11 = v10;

  _Unwind_Resume(a1);
}

id Espresso::ANECompilerEngine::generate_v1_custom_neuron_from_values(float *a1, uint64_t a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9)
{
  _S10 = a8;
  _S12 = a7;
  _S8 = a6;
  _S11 = a5;
  _S13 = a4;
  _S14 = a3;
  long long v18 = objc_opt_new();
  [v18 setObject:&unk_1EE3AEF38 forKeyedSubscript:@"Version"];
  int v19 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:33];
  uint64_t v20 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:32];
  uint64_t v21 = 0;
  id v22 = a1;
  do
  {
    _S0 = *v22;
    __asm { FCVT            H0, S0 }
    uint64_t v28 = [NSNumber numberWithShort:SLOWORD(_S0)];
    [v19 setObject:v28 atIndexedSubscript:v21];

    if (v21)
    {
      _S0 = *v22 - *(v22 - 1);
      __asm { FCVT            H0, S0 }
      id v30 = [NSNumber numberWithShort:SLOWORD(_S0)];
      [v20 setObject:v30 atIndexedSubscript:v21 - 1];
    }
    ++v21;
    ++v22;
  }
  while (v21 != 33);
  id v31 = (void *)[v19 copy];
  id v32 = (void *)[v20 copy];
  __asm { FCVT            H0, S14 }
  uint64_t v34 = [NSNumber numberWithShort:_H0];
  [v18 setObject:v34 forKeyedSubscript:@"XSatLeft"];

  __asm { FCVT            H0, S13 }
  id v36 = [NSNumber numberWithShort:_H0];
  [v18 setObject:v36 forKeyedSubscript:@"YSatLeft"];

  __asm { FCVT            H0, S11 }
  uint64_t v38 = [NSNumber numberWithShort:_H0];
  [v18 setObject:v38 forKeyedSubscript:@"XSatRight"];

  __asm { FCVT            H0, S8 }
  uint64_t v40 = [NSNumber numberWithShort:_H0];
  [v18 setObject:v40 forKeyedSubscript:@"YSatRight"];

  __asm { FCVT            H0, S12 }
  id v42 = [NSNumber numberWithShort:_H0];
  [v18 setObject:v42 forKeyedSubscript:@"XLeft"];

  __asm { FCVT            H0, S10 }
  unsigned int v44 = [NSNumber numberWithShort:_H0];
  [v18 setObject:v44 forKeyedSubscript:@"XRight"];

  [v18 setObject:v31 forKeyedSubscript:@"YIntercept"];
  [v18 setObject:v32 forKeyedSubscript:@"Slope"];
  int v45 = [NSNumber numberWithBool:a2];
  [v18 setObject:v45 forKeyedSubscript:@"AntiSymmetric"];

  if (vabds_f32(_S12, _S14) >= a9)
  {
    _S0 = (float)(*a1 - _S13) / (float)(_S12 - _S14);
    __asm { FCVT            H0, S0 }
    [NSNumber numberWithShort:SLOWORD(_S0)];
  }
  else
  {
    [NSNumber numberWithShort:0];
  uint64_t v46 = };
  [v18 setObject:v46 forKeyedSubscript:@"SlopeLeft"];
  float v48 = _S11 - _S10;

  if (fabsf(v48) >= a9)
  {
    _S0 = (float)(_S8 - a1[32]) / v48;
    __asm { FCVT            H0, S0 }
    [NSNumber numberWithShort:SLOWORD(_S0)];
  }
  else
  {
    [NSNumber numberWithShort:0];
  uint64_t v49 = };
  [v18 setObject:v49 forKeyedSubscript:@"SlopeRight"];

  return v18;
}

void sub_1928A7364(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id Espresso::ANECompilerEngine::generate_custom_neuron_params(uint64_t a1, uint64_t a2, float a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v16 = 0;
  float v17 = (float)(a4 - a3) * 0.03125;
  float v18 = a3;
  do
  {
    *(float *)((char *)v23 + v16) = (*(float (**)(uint64_t, float))(a2 + 16))(a2, v18);
    float v18 = v17 + v18;
    v16 += 4;
  }
  while (v16 != 132);
  v21[6] = v23[6];
  v21[7] = v23[7];
  int v22 = v24;
  uint64_t v21[2] = v23[2];
  v21[3] = v23[3];
  v21[4] = v23[4];
  v21[5] = v23[5];
  v21[0] = v23[0];
  v21[1] = v23[1];
  int v19 = Espresso::ANECompilerEngine::generate_v1_custom_neuron_from_values((float *)v21, a1, a5, a7, a6, a8, a3, a4, 0.0001);

  return v19;
}

id Espresso::ANECompilerEngine::generate_mix_custom_neuron_params(uint64_t a1, int a2, uint64_t a3, int a4, void *a5, float a6, float a7, float a8, float a9, float a10, float a11, float a12, float a13)
{
  _S11 = a10;
  _S12 = a9;
  _S14 = a8;
  _S13 = a7;
  _S15 = a6;
  int v22 = a5;
  long long v23 = objc_opt_new();
  [v23 setObject:&unk_1EE3AEF50 forKeyedSubscript:@"Version"];
  int v24 = [NSNumber numberWithBool:a3];
  [v23 setObject:v24 forKeyedSubscript:@"InAbs"];

  if (a2 == 1)
  {
    float v25 = -16.0;
    [v23 setObject:@"SplitLut" forKeyedSubscript:@"Mode"];
  }
  else
  {
    if (a2) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unsupported Custom LUT Mode");
    }
    float v25 = 0.0;
    [v23 setObject:@"Lut" forKeyedSubscript:@"Mode"];
  }
  [v23 setObject:off_1E5747450[a4] forKeyedSubscript:@"CopySign"];
  unint64_t v26 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:33];
  for (uint64_t i = 0; i != 33; ++i)
  {
    float v28 = ldexp(1.0, -(int)a1) * v25;
    _S0 = v22[2](v22, v28);
    __asm { FCVT            H0, S0 }
    uint64_t v34 = [NSNumber numberWithShort:SLOWORD(_S0)];
    [v26 setObject:v34 atIndexedSubscript:i];

    float v25 = v25 + 1.0;
  }
  __asm { FCVT            H0, S15 }
  id v36 = [NSNumber numberWithShort:_H0];
  [v23 setObject:v36 forKeyedSubscript:@"XSatLeft"];

  __asm { FCVT            H0, S14 }
  uint64_t v38 = [NSNumber numberWithShort:_H0];
  [v23 setObject:v38 forKeyedSubscript:@"YSatLeft"];

  __asm { FCVT            H0, S13 }
  uint64_t v40 = [NSNumber numberWithShort:_H0];
  [v23 setObject:v40 forKeyedSubscript:@"XSatRight"];

  __asm { FCVT            H0, S12 }
  id v42 = [NSNumber numberWithShort:_H0];
  [v23 setObject:v42 forKeyedSubscript:@"YSatRight"];

  __asm { FCVT            H0, S11 }
  unsigned int v44 = [NSNumber numberWithShort:_H0];
  [v23 setObject:v44 forKeyedSubscript:@"SlopeLeft"];

  _S0 = a11;
  __asm { FCVT            H0, S0 }
  uint64_t v46 = [NSNumber numberWithShort:SLOWORD(_S0)];
  [v23 setObject:v46 forKeyedSubscript:@"SlopeRight"];

  _S0 = a12;
  __asm { FCVT            H0, S0 }
  float v48 = [NSNumber numberWithShort:SLOWORD(_S0)];
  [v23 setObject:v48 forKeyedSubscript:@"InterceptLeft"];

  _S0 = a13;
  __asm { FCVT            H0, S0 }
  long long v50 = [NSNumber numberWithShort:SLOWORD(_S0)];
  [v23 setObject:v50 forKeyedSubscript:@"InterceptRight"];

  long long v51 = [NSNumber numberWithShort:a1];
  [v23 setObject:v51 forKeyedSubscript:@"R"];

  [v23 setObject:v26 forKeyedSubscript:@"YIntercept"];

  return v23;
}

void sub_1928A7918(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id Espresso::ANECompilerEngine::generate_mix_custom_neuron_params(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, float a6, float a7, float a8, float a9, float a10, float a11, float a12)
{
  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3221225472;
  v26[2] = ___ZN8Espresso17ANECompilerEngine33generate_mix_custom_neuron_paramsEffffffffsNS0_15custom_lut_typeEmbNS0_14copy_sign_typeEPFffE_block_invoke;
  v26[3] = &__block_descriptor_40_e8_f12__0f8l;
  v26[4] = a5;
  long long v23 = (void *)MEMORY[0x192FF2250](v26);
  int v24 = Espresso::ANECompilerEngine::generate_mix_custom_neuron_params(a1, a2, a3, a4, v23, a6, a7, 0.0, a8, a9, a10, a11, a12);

  return v24;
}

void sub_1928A7ABC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN8Espresso17ANECompilerEngine33generate_mix_custom_neuron_paramsEffffffffsNS0_15custom_lut_typeEmbNS0_14copy_sign_typeEPFffE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t Espresso::MPSGraphEngine::Kernels::crop_and_resize_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, void *a3)
{
  uint64_t v4 = a3[1] - *a3;
  unint64_t v5 = v4 >> 6;
  if ((unint64_t)v4 >= 0x81)
  {
    long long v6 = a2[1];
    v34[0] = *a2;
    v34[1] = v6;
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->i64[1], 1uLL, memory_order_relaxed);
      unint64_t v5 = (uint64_t)(a3[1] - *a3) >> 6;
    }
    std::to_string(&v28, v5);
    uint64_t v7 = std::string::insert(&v28, 0, "[Dispatch::MPSGraph::crop_and_resize_kernel] unsupported: number of inputs must be <= 2, received ");
    std::string v29 = *v7;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v29, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v34, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_5:
    if (v33) {
      nitro::nitro_function::nitro_function(v33);
    }
    id v35 = (void **)v32;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v35);
    id v35 = (void **)v31;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v35);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_9;
  }
  if (!*(unsigned char *)(a1 + 312))
  {
    int v10 = *(_DWORD *)(a1 + 316);
    if (v10 != 2)
    {
      long long v6 = a2[1];
      v26[0] = *a2;
      v26[1] = v6;
      if (v6)
      {
        atomic_fetch_add_explicit(&v6->i64[1], 1uLL, memory_order_relaxed);
        int v10 = *(_DWORD *)(a1 + 316);
      }
      std::to_string(&v28, v10);
      uint64_t v13 = std::string::insert(&v28, 0, "[Dispatch::MPSGraph::crop_and_resize_kernel] unsupported: sample_ratio must be 2, received ");
      std::string v29 = *v13;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v29, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v26, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      goto LABEL_5;
    }
    if (v5 == 2)
    {
      int v14 = *(_DWORD *)(a1 + 280);
      if (v14 != 3 && v14) {
        return 0;
      }
      if (*(_DWORD *)(*a3 + 16) != 1)
      {
        long long v6 = a2[1];
        v22[0] = *a2;
        v22[1] = v6;
        if (v6) {
          atomic_fetch_add_explicit(&v6->i64[1], 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&v29, "[Dispatch::MPSGraph::crop_and_resize_kernel] unsupported: seq > 1 for first input");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v29, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v22, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
        Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
        goto LABEL_20;
      }
    }
    else if (v5 == 1)
    {
      int v11 = *(_DWORD *)(a1 + 304);
      if (v11)
      {
        long long v6 = a2[1];
        v25[0] = *a2;
        v25[1] = v6;
        if (v6)
        {
          atomic_fetch_add_explicit(&v6->i64[1], 1uLL, memory_order_relaxed);
          int v11 = *(_DWORD *)(a1 + 304);
        }
        std::to_string(&v28, v11);
        uint64_t v12 = std::string::insert(&v28, 0, "[Dispatch::MPSGraph::crop_and_resize_kernel] unsupported: crop_index_mode ");
        std::string v29 = *v12;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v29, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v25, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
        goto LABEL_5;
      }
      if (*(unsigned char *)(a1 + 296))
      {
        long long v6 = a2[1];
        v24[0] = *a2;
        v24[1] = v6;
        if (v6)
        {
          atomic_fetch_add_explicit(&v6->i64[1], 1uLL, memory_order_relaxed);
          int v17 = *(unsigned __int8 *)(a1 + 296);
        }
        else
        {
          int v17 = 1;
        }
        std::to_string(&v28, v17);
        uint64_t v20 = std::string::insert(&v28, 0, "[Dispatch::MPSGraph::crop_and_resize_kernel] unsupported: normalized_crop_indices ");
        std::string v29 = *v20;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v29, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v24, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_57:
        Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
LABEL_9:
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v29.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_23;
        }
        uint64_t v8 = (void *)v28.__r_.__value_.__r.__words[0];
        goto LABEL_22;
      }
      float v18 = *(float *)(a1 + 308);
      if (v18 != 1.0)
      {
        long long v6 = a2[1];
        v23[0] = *a2;
        v23[1] = v6;
        if (v6)
        {
          atomic_fetch_add_explicit(&v6->i64[1], 1uLL, memory_order_relaxed);
          float v18 = *(float *)(a1 + 308);
        }
        std::to_string(&v28, v18);
        int v19 = std::string::insert(&v28, 0, "[Dispatch::MPSGraph::crop_and_resize_kernel] unsupported: spatial_scale must be 1.f, received ");
        std::string v29 = *v19;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v29, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v23, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
        goto LABEL_57;
      }
    }
    float v15 = *(float *)(a1 + 320);
    if (v15 == 0.0) {
      return 1;
    }
    long long v6 = a2[1];
    v21[0] = *a2;
    v21[1] = v6;
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->i64[1], 1uLL, memory_order_relaxed);
      float v15 = *(float *)(a1 + 320);
    }
    std::to_string(&v28, v15);
    uint64_t v16 = std::string::insert(&v28, 0, "[Dispatch::MPSGraph::crop_and_resize_kernel] unsupported: pad_value must be 0.0f, received ");
    std::string v29 = *v16;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v29, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v21, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    goto LABEL_5;
  }
  long long v6 = a2[1];
  v27[0] = *a2;
  v27[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->i64[1], 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v29, "[Dispatch::MPSGraph::crop_and_resize_kernel] unsupported: position_sensitive");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (long long *)&v29, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(v27, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
  v28.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  v28.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_20:
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_23;
  }
  uint64_t v8 = (void *)v29.__r_.__value_.__r.__words[0];
LABEL_22:
  operator delete(v8);
LABEL_23:
  if (v6) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v6);
  }
  return 0;
}

void sub_1928A7FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&a36);
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (v36) {
    nitro::nitro_function::nitro_function(v36);
  }
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::crop_and_resize_kernel::~crop_and_resize_kernel(Espresso::MPSGraphEngine::Kernels::crop_and_resize_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::rule_convolution_groups::transform_and_return_skip_layers(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)&long long v79 = *MEMORY[0x1E4F143B8];
  if (!*(void *)a3
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent status");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  long long v9 = v8;
  int v10 = *(std::__shared_weak_count **)(a3 + 8);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v11 = v8[15];
  long long v67 = v8[14];
  long long v68 = v11;
  uint64_t v73 = *((void *)v8 + 40);
  long long v12 = v8[19];
  long long v71 = v8[18];
  long long v72 = v12;
  long long v13 = v8[17];
  long long v69 = v8[16];
  long long v70 = v13;
  long long v14 = v8[11];
  v64[0] = v8[10];
  v64[1] = v14;
  long long v15 = v8[13];
  long long v65 = v8[12];
  long long v66 = v15;
  DWORD1(v70) = (*((void *)v8 + 9) - *((void *)v8 + 8)) >> 4;
  *((int32x2_t *)&v65 + 1) = vmul_s32(*(int32x2_t *)((char *)&v65 + 8), vdup_n_s32(DWORD1(v70)));
  uint64_t v16 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&v59, "convolution");
  uint64_t v17 = *(void *)(*(void *)(*(void *)(a1 + 24) + 32) + 16 * *((int *)v9 + 2));
  if (*(char *)(v17 + 39) >= 0) {
    size_t v18 = *(unsigned __int8 *)(v17 + 39);
  }
  else {
    size_t v18 = *(void *)(v17 + 24);
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v18 + 11);
  if (v58 < 0) {
    p_p = __p;
  }
  if (v18)
  {
    if (*(char *)(v17 + 39) >= 0) {
      uint64_t v20 = (const void *)(v17 + 16);
    }
    else {
      uint64_t v20 = *(const void **)(v17 + 16);
    }
    memmove(p_p, v20, v18);
  }
  strcpy((char *)p_p + v18, "_conv_group");
  if (*((char *)v9 + 135) < 0) {
    std::string::__init_copy_ctor_external(&v78, *((const std::string::value_type **)v9 + 14), *((void *)v9 + 15));
  }
  else {
    std::string v78 = *(std::string *)(v9 + 7);
  }
  long long v53 = 0;
  unint64_t v54 = 0;
  uint64_t v55 = 0;
  v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53;
  v76.__r_.__value_.__s.__data_[8] = 0;
  long long v53 = (std::string *)operator new(0x18uLL);
  unint64_t v54 = v53;
  uint64_t v55 = v53 + 1;
  unint64_t v54 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v55, (long long *)&v78, &v79, v53);
  if (*((char *)v9 + 159) < 0) {
    std::string::__init_copy_ctor_external(&v76, *((const std::string::value_type **)v9 + 17), *((void *)v9 + 18));
  }
  else {
    std::string v76 = *(std::string *)((char *)v9 + 136);
  }
  long long v50 = 0;
  long long v51 = 0;
  long long v52 = 0;
  int v74 = &v50;
  char v75 = 0;
  long long v50 = (std::string *)operator new(0x18uLL);
  long long v51 = v50;
  long long v52 = v50 + 1;
  long long v51 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v52, (long long *)&v76, (long long *)&v77, v50);
  Espresso::sequential_builder::add<Espresso::convolution_uniforms>((uint64_t *)&lpsrc, v16, (uint64_t)&v59, (uint64_t)&__p, (uint64_t)v64, (uint64_t)v53, (uint64_t)v54, (uint64_t *)&v50);
  int v74 = &v50;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v76.__r_.__value_.__l.__data_);
  }
  v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v78.__r_.__value_.__l.__data_);
  }
  if (v58 < 0) {
    operator delete(__p);
  }
  if (v61 < 0) {
    operator delete(v59);
  }
  if (!lpsrc
  {
    int v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v45, "Inconsistent status");
    __cxa_throw(v45, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v22 = v21;
  long long v23 = v63;
  if (v63) {
    atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void **__return_ptr, void *))(*(void *)v21 + 472))(&v59, v21);
  (*(void (**)(void **__return_ptr, void *))(*(void *)v22 + 488))(&__p, v22);
  uint64_t v24 = *((void *)v9 + 8);
  uint64_t v25 = *((void *)v9 + 9);
  uint64_t v26 = v25 - v24;
  if (v25 != v24)
  {
    uint64_t v27 = 0;
    LODWORD(v28) = 0;
    LODWORD(i) = 0;
    unint64_t v30 = v26 >> 4;
    uint64_t v31 = *((void *)v9 + 11);
    id v32 = __p;
    if (v30 <= 1) {
      unint64_t v30 = 1;
    }
    do
    {
      unint64_t v33 = 0;
      uint64_t v34 = *(void *)(v24 + 16 * v27);
      unint64_t v35 = *(int *)(v34 + 8);
      id v36 = v59;
      for (uint64_t i = (int)i; ; ++i)
      {
        uint64_t v37 = 0;
        unint64_t v38 = v35;
        do
        {
          v38 *= *(int *)(v34 + 12 + v37);
          v37 += 4;
        }
        while (v37 != 12);
        if (v38 <= v33) {
          break;
        }
        *(_DWORD *)(v36[3] + 4 * i) = *(_DWORD *)(*(void *)(v34 + 24) + 4 * v33++);
      }
      uint64_t v39 = *(void *)(v31 + 16 * v27);
      uint64_t v40 = *(unsigned int *)(v39 + 8);
      if (v40)
      {
        id v41 = *(int **)(v39 + 16);
        uint64_t v42 = v32[2];
        uint64_t v28 = (int)v28;
        do
        {
          int v43 = *v41++;
          *(_DWORD *)(v42 + 4 * v28++) = v43;
          --v40;
        }
        while (v40);
      }
      ++v27;
    }
    while (v27 != v30);
  }
  float v48 = v59;
  uint64_t v49 = v60;
  if (v60) {
    atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void *, void **))(*(void *)v22 + 400))(v22, &v48);
  if (v49) {
    nitro::nitro_function::nitro_function(v49);
  }
  uint64_t v46 = __p;
  uint64_t v47 = v57;
  if (v57) {
    atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void *, void **))(*(void *)v22 + 392))(v22, &v46);
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }
  std::map<int,BOOL>::map[abi:ne180100](a4, (void *)v9 + 2);
  if (v57) {
    nitro::nitro_function::nitro_function(v57);
  }
  if (v60) {
    nitro::nitro_function::nitro_function(v60);
  }
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  if (v63) {
    nitro::nitro_function::nitro_function(v63);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_1928A8724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32)
{
  *(void *)(v33 - 128) = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 128));
  if (*(char *)(v33 - 73) < 0) {
    operator delete(*(void **)(v33 - 96));
  }
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (v32) {
    nitro::nitro_function::nitro_function(v32);
  }
  _Unwind_Resume(a1);
}

void sub_1928A8864()
{
  __cxa_free_exception(v0);
  JUMPOUT(0x1928A885CLL);
}

void Espresso::rule_convolution_groups::match_at_layer(Espresso::rule_convolution_groups *this@<X0>, int a2@<W1>, long long *a3@<X8>)
{
  uint64_t v4 = this;
  int v87 = a2;
  uint64_t v6 = *(void *)(*(void *)(*((void *)this + 3) + 32) + 16 * a2);
  uint64_t v7 = *(const void **)(v6 + 64);
  if (!v7
  {
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    return;
  }
  uint64_t v8 = *(std::__shared_weak_count **)(v6 + 72);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v9 = (char *)operator new(0x160uLL);
  *(_OWORD *)(v9 + 8) = 0u;
  *(void *)long long v9 = &unk_1EE387D90;
  *((_OWORD *)v9 + 2) = 0u;
  *((_OWORD *)v9 + 4) = 0u;
  *((_OWORD *)v9 + 5) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  *((_OWORD *)v9 + 7) = 0u;
  *((_OWORD *)v9 + 8) = 0u;
  *((_OWORD *)v9 + 9) = 0u;
  *((_OWORD *)v9 + 10) = 0u;
  *((_OWORD *)v9 + 11) = 0u;
  *((_OWORD *)v9 + 12) = 0u;
  *((_OWORD *)v9 + 13) = 0u;
  *((_OWORD *)v9 + 14) = 0u;
  *((_OWORD *)v9 + 15) = 0u;
  *((_OWORD *)v9 + 16) = 0u;
  *((_OWORD *)v9 + 17) = 0u;
  *((_OWORD *)v9 + 18) = 0u;
  *((_OWORD *)v9 + 19) = 0u;
  *((_OWORD *)v9 + 20) = 0u;
  *((_OWORD *)v9 + 21) = 0u;
  *((_OWORD *)v9 + 3) = 0u;
  *((void *)v9 + 5) = v9 + 48;
  *((_DWORD *)v9 + 8) = -1;
  *((_OWORD *)v9 + 3) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *((void *)v9 + 8) = v9 + 72;
  *((void *)v9 + 3) = &unk_1EE35B2C0;
  *(_OWORD *)(v9 + 88) = 0u;
  long long v82 = v9 + 88;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 120) = 0u;
  *(_OWORD *)(v9 + 136) = 0u;
  *(_OWORD *)(v9 + 152) = 0u;
  *(_OWORD *)(v9 + 168) = 0u;
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v9 + 184));
  *(void *)&long long v86 = v9 + 24;
  *((void *)&v86 + 1) = v9;
  int v10 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((void *)v4 + 1) + 16), a2, &v87);
  long long v11 = (int *)v10[5];
  uint64_t v81 = v10[6];
  if (v11 == (int *)v81)
  {
LABEL_56:
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    goto LABEL_61;
  }
  std::string v78 = a3;
  long long v79 = v8;
  unint64_t v77 = a2;
  uint64_t i = 0xFFFFFFFFLL;
  do
  {
    int v84 = *v11;
    int v14 = v84;
    uint64_t v15 = *(void *)(*(void *)(*((void *)v4 + 3) + 32) + 16 * v84);
    uint64_t v16 = *(const void **)(v15 + 64);
    if (!v16
    {
      *(void *)std::string v78 = 0;
      *((void *)v78 + 1) = 0;
LABEL_60:
      uint64_t v8 = v79;
      goto LABEL_61;
    }
    size_t v18 = v17;
    int v19 = *(std::__shared_weak_count **)(v15 + 72);
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(long long *__return_ptr, void *))(*(void *)v17 + 456))(&v83, v17);
    uint64_t v21 = (_OWORD *)*((void *)v9 + 12);
    unint64_t v20 = *((void *)v9 + 13);
    if ((unint64_t)v21 >= v20)
    {
      uint64_t v22 = ((uint64_t)v21 - *v82) >> 4;
      unint64_t v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v24 = v12;
      uint64_t v25 = i;
      uint64_t v26 = v20 - *v82;
      if (v26 >> 3 > v23) {
        unint64_t v23 = v26 >> 3;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v23;
      }
      uint64_t v91 = v9 + 104;
      uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v27);
      std::string v29 = &v28[16 * v22];
      *(void *)&long long v88 = v28;
      *((void *)&v88 + 1) = v29;
      std::vector<int> v90 = &v28[16 * v30];
      *(_OWORD *)std::string v29 = v83;
      long long v83 = 0uLL;
      unint64_t v89 = v29 + 16;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(v82, &v88);
      uint64_t v31 = *((void *)v9 + 12);
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v88);
      id v32 = (std::__shared_weak_count *)*((void *)&v83 + 1);
      *((void *)v9 + 12) = v31;
      uint64_t i = v25;
      long long v12 = v24;
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    else
    {
      *uint64_t v21 = v83;
      *((void *)v9 + 12) = v21 + 1;
    }
    (*(void (**)(long long *__return_ptr, void *))(*(void *)v18 + 448))(&v88, v18);
    uint64_t v34 = (char *)*((void *)v9 + 15);
    unint64_t v33 = *((void *)v9 + 16);
    if ((unint64_t)v34 >= v33)
    {
      uint64_t v80 = v19;
      unint64_t v35 = v4;
      id v36 = (char *)*((void *)v9 + 14);
      uint64_t v37 = (v34 - v36) >> 4;
      unint64_t v38 = v37 + 1;
      if ((unint64_t)(v37 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v39 = i;
      uint64_t v40 = v33 - (void)v36;
      if (v40 >> 3 > v38) {
        unint64_t v38 = v40 >> 3;
      }
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v41 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v41 = v38;
      }
      if (v41 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v42 = (char *)operator new(16 * v41);
      int v43 = &v42[16 * v37];
      *(_OWORD *)int v43 = v88;
      unsigned int v44 = v43 + 16;
      int v45 = &v42[16 * v41];
      long long v88 = 0uLL;
      if (v34 == v36)
      {
        *((void *)v9 + 14) = v43;
        *((void *)v9 + 15) = v44;
        *((void *)v9 + 16) = v45;
        uint64_t i = v39;
      }
      else
      {
        do
        {
          long long v46 = *((_OWORD *)v34 - 1);
          v34 -= 16;
          *((_OWORD *)v43 - 1) = v46;
          v43 -= 16;
          *(void *)uint64_t v34 = 0;
          *((void *)v34 + 1) = 0;
        }
        while (v34 != v36);
        uint64_t v34 = (char *)*((void *)v9 + 14);
        uint64_t v47 = (char *)*((void *)v9 + 15);
        *((void *)v9 + 14) = v43;
        *((void *)v9 + 15) = v44;
        *((void *)v9 + 16) = v45;
        for (uint64_t i = v39; v47 != v34; v47 -= 16)
        {
          float v48 = (std::__shared_weak_count *)*((void *)v47 - 1);
          if (v48) {
            nitro::nitro_function::nitro_function(v48);
          }
        }
      }
      if (v34) {
        operator delete(v34);
      }
      uint64_t v49 = (std::__shared_weak_count *)*((void *)&v88 + 1);
      *((void *)v9 + 15) = v44;
      uint64_t v4 = v35;
      int v19 = v80;
      if (v49) {
        nitro::nitro_function::nitro_function(v49);
      }
    }
    else
    {
      *(_OWORD *)uint64_t v34 = v88;
      *((void *)v9 + 15) = v34 + 16;
    }
    long long v50 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((void *)v4 + 1) + 16), v14, &v84);
    if ((char *)v50[6] - (char *)v50[5] != 4)
    {
LABEL_58:
      *(void *)std::string v78 = 0;
      *((void *)v78 + 1) = 0;
      if (v19) {
        nitro::nitro_function::nitro_function(v19);
      }
      goto LABEL_60;
    }
    if (i == -1)
    {
      uint64_t v51 = (*(uint64_t (**)(void *))(*(void *)v18 + 384))(v18);
      long long v52 = *(_OWORD *)v51;
      long long v53 = *(_OWORD *)(v51 + 32);
      *(_OWORD *)(v9 + 200) = *(_OWORD *)(v51 + 16);
      *(_OWORD *)(v9 + 216) = v53;
      *(_OWORD *)(v9 + 184) = v52;
      long long v54 = *(_OWORD *)(v51 + 48);
      long long v55 = *(_OWORD *)(v51 + 64);
      long long v56 = *(_OWORD *)(v51 + 96);
      *(_OWORD *)(v9 + 264) = *(_OWORD *)(v51 + 80);
      *(_OWORD *)(v9 + 280) = v56;
      *(_OWORD *)(v9 + 232) = v54;
      *(_OWORD *)(v9 + 248) = v55;
      long long v57 = *(_OWORD *)(v51 + 112);
      long long v58 = *(_OWORD *)(v51 + 128);
      long long v59 = *(_OWORD *)(v51 + 144);
      *(void *)(v9 + 341) = *(void *)(v51 + 157);
      *(_OWORD *)(v9 + 312) = v58;
      *(_OWORD *)(v9 + 328) = v59;
      *(_OWORD *)(v9 + 296) = v57;
      uint64_t i = *(unsigned int *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((void *)v4 + 1) + 16), v14, &v84)[5];
    }
    else if (*(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((void *)v4 + 1) + 16), v14, &v84)[5] != i)
    {
      goto LABEL_58;
    }
    *((unsigned char *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v9 + 5, v14, &v84)+ 32) = 1;
    if (v19) {
      nitro::nitro_function::nitro_function(v19);
    }
    ++v11;
  }
  while (v11 != (int *)v81);
  int v85 = i;
  a3 = v78;
  uint64_t v8 = v79;
  if (i == -1) {
    goto LABEL_56;
  }
  uint64_t v60 = *((void *)v4 + 3);
  uint64_t v61 = *(void *)(*(void *)(v60 + 32) + 16 * (int)i);
  uint64_t v62 = *(const void **)(v61 + 64);
  if (v62)
  {
    unint64_t v64 = v77;
    if (v63)
    {
      long long v65 = *(std::__shared_weak_count **)(v61 + 72);
      if (v65)
      {
        atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v60 = *((void *)v4 + 3);
      }
    }
    else
    {
      long long v65 = 0;
    }
  }
  else
  {
    long long v65 = 0;
    unint64_t v64 = v77;
  }
  *(void *)&long long v88 = v64;
  long long v66 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v60 + 56, v64, &v88);
  if (v66[4] - v66[3] == 24)
  {
    uint64_t v67 = *((void *)v4 + 3) + 96;
    unint64_t v68 = v85;
    *(void *)&long long v88 = v85;
    long long v69 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v67, v85, &v88);
    if (v69[4] - v69[3] == 24)
    {
      uint64_t v70 = *((void *)v4 + 3) + 56;
      int v71 = v87;
      *(void *)&long long v88 = v87;
      long long v72 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v70, v87, &v88);
      uint64_t v73 = v86;
      std::string::operator=((std::string *)(v86 + 112), (const std::string *)v72[3]);
      uint64_t v74 = *((void *)v4 + 3) + 96;
      *(void *)&long long v88 = v68;
      char v75 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v74, v68, &v88);
      std::string::operator=((std::string *)(v73 + 136), (const std::string *)v75[3]);
      *((unsigned char *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v73 + 16), v71, &v87)+ 32) = 1;
      *((unsigned char *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v73 + 16), v68, &v85)+ 32) = 1;
      long long v76 = v86;
      *(_DWORD *)(v86 + 8) = v71;
      *std::string v78 = v76;
      a3 = &v86;
    }
  }
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  if (v65) {
    nitro::nitro_function::nitro_function(v65);
  }
LABEL_61:
  if (*((void *)&v86 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v86 + 1));
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
}

void sub_1928A9004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  if (a24) {
    nitro::nitro_function::nitro_function(a24);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::rule_convolution_groups::status_t::~status_t(void **this)
{
  Espresso::rule_convolution_groups::status_t::~status_t(this);

  JUMPOUT(0x192FF16B0);
}

{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  void **v6;

  *this = &unk_1EE35B2C0;
  if (*((char *)this + 159) < 0) {
    operator delete(this[17]);
  }
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  uint64_t v2 = (char *)this[11];
  if (v2)
  {
    id v3 = (char *)this[12];
    uint64_t v4 = this[11];
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = (std::__shared_weak_count *)*((void *)v3 - 1);
        if (v5) {
          nitro::nitro_function::nitro_function(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = this[11];
    }
    this[12] = v2;
    operator delete(v4);
  }
  uint64_t v6 = this + 8;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v6);
  *this = &unk_1EE365EC8;
  std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::destroy(this[6]);
  std::__tree<int>::destroy(this[3]);
}

uint64_t std::__shared_ptr_emplace<Espresso::rule_convolution_groups::status_t>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::rule_convolution_groups::status_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387D90;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::rule_convolution_groups::status_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE387D90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::rule_convolution_groups::~rule_convolution_groups(Espresso::rule_convolution_groups *this)
{
  Espresso::graph_optimization_rule::~graph_optimization_rule(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::rule_inception_block::transform_and_return_skip_layers(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v189 = *MEMORY[0x1E4F143B8];
  if (!*(void *)a3
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent status");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v8 = v7;
  long long v9 = *(std::__shared_weak_count **)(a3 + 8);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v126 = a4;
  long long v127 = v9;
  v180[0] = 0;
  v180[1] = 0;
  v179 = (uint64_t *)v180;
  std::operator+<char>();
  int v10 = (_DWORD *)v8[8];
  v141 = v8;
  long long v132 = (_DWORD *)v8[9];
  if (v10 == v132) {
    goto LABEL_198;
  }
  int v143 = 0;
  uint64_t v138 = a1;
  v139 = (uint64_t **)(v8 + 11);
  v142 = (uint64_t **)(v8 + 17);
  *(void *)uint64_t v137 = *(void *)(a1 + 24);
  do
  {
    LODWORD(__p) = *v10;
    int v11 = (int)__p;
    if (*((unsigned char *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v139, (int)__p, &__p)+ 32))
    {
      int v12 = v11;
      uint64_t v13 = *(void *)(*(void *)(*(void *)v137 + 32) + 16 * v11);
      int v14 = *(void **)(v13 + 64);
      if (v14
      {
        uint64_t v15 = *(std::__shared_weak_count **)(v13 + 72);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v15 = 0;
      }
      int v135 = *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v14 + 384))(v14) + 40);
      if (v15) {
        nitro::nitro_function::nitro_function(v15);
      }
      uint64_t v16 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v142, v11, &__p);
      size_t v18 = v16[5];
      uint64_t v17 = v16[6];
      while (v18 != v17)
      {
        uint64_t v19 = *v18;
        unint64_t v20 = (std::__shared_weak_count *)v18[1];
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v21 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v19 + 384))(v19);
        long long v172 = v21[4];
        long long v173 = v21[5];
        v174[0] = v21[6];
        *(_OWORD *)((char *)v174 + 12) = *(_OWORD *)((char *)v21 + 108);
        *(_OWORD *)__str = *v21;
        *(_OWORD *)&__str[16] = v21[1];
        long long v170 = v21[2];
        long long v171 = v21[3];
        long long v22 = *(_OWORD *)((char *)v21 + 126);
        long long v23 = *(_OWORD *)((char *)v21 + 142);
        *(_OWORD *)&v188[10] = *(_OWORD *)((char *)v21 + 152);
        long long v187 = v22;
        *(_OWORD *)v188 = v23;
        uint64_t v24 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v179, v12, &__p);
        uint64_t v25 = v24;
        uint64_t v26 = v24[6];
        unint64_t v27 = v24[7];
        if (v26 >= v27)
        {
          uint64_t v30 = v24[5];
          unint64_t v31 = 0xCF3CF3CF3CF3CF3DLL * (v26 - v30);
          unint64_t v32 = v31 + 1;
          if (v31 + 1 > 0x186186186186186) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v33 = 0xCF3CF3CF3CF3CF3DLL * (v27 - v30);
          if (2 * v33 > v32) {
            unint64_t v32 = 2 * v33;
          }
          if (v33 >= 0xC30C30C30C30C3) {
            unint64_t v34 = 0x186186186186186;
          }
          else {
            unint64_t v34 = v32;
          }
          if (v34) {
            unint64_t v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::convolution_uniforms>>(v34);
          }
          else {
            uint64_t v35 = 0;
          }
          unint64_t v36 = v34 + 168 * v31;
          *(_OWORD *)(v36 + 64) = v172;
          *(_OWORD *)(v36 + 80) = v173;
          *(_OWORD *)(v36 + 96) = v174[0];
          *(_OWORD *)(v36 + 108) = *(_OWORD *)((char *)v174 + 12);
          *(_OWORD *)unint64_t v36 = *(_OWORD *)__str;
          *(_OWORD *)(v36 + 16) = *(_OWORD *)&__str[16];
          *(_OWORD *)(v36 + 32) = v170;
          *(_OWORD *)(v36 + 48) = v171;
          *(_WORD *)(v36 + 124) = v143;
          *(_OWORD *)(v36 + 152) = *(_OWORD *)&v188[10];
          *(_OWORD *)(v36 + 142) = *(_OWORD *)v188;
          *(_OWORD *)(v36 + 126) = v187;
          unint64_t v38 = v25[5];
          uint64_t v37 = v25[6];
          uint64_t v39 = (uint64_t *)v36;
          if (v37 != v38)
          {
            do
            {
              long long v40 = *(_OWORD *)(v37 - 21);
              long long v41 = *(_OWORD *)(v37 - 19);
              *(_OWORD *)(v39 - 17) = *(_OWORD *)(v37 - 17);
              *(_OWORD *)(v39 - 19) = v41;
              *(_OWORD *)(v39 - 21) = v40;
              long long v42 = *(_OWORD *)(v37 - 15);
              long long v43 = *(_OWORD *)(v37 - 13);
              long long v44 = *(_OWORD *)(v37 - 11);
              *(_OWORD *)(v39 - 9) = *(_OWORD *)(v37 - 9);
              *(_OWORD *)(v39 - 11) = v44;
              *(_OWORD *)(v39 - 13) = v43;
              *(_OWORD *)(v39 - 15) = v42;
              long long v45 = *(_OWORD *)(v37 - 7);
              long long v46 = *(_OWORD *)(v37 - 5);
              long long v47 = *(_OWORD *)(v37 - 3);
              *(uint64_t *)((char *)v39 - 11) = *(uint64_t *)((char *)v37 - 11);
              *(_OWORD *)(v39 - 3) = v47;
              *(_OWORD *)(v39 - 5) = v46;
              *(_OWORD *)(v39 - 7) = v45;
              v39 -= 21;
              v37 -= 21;
            }
            while (v37 != v38);
            uint64_t v37 = v25[5];
          }
          std::string v29 = (uint64_t *)(v36 + 168);
          v25[5] = v39;
          v25[6] = (uint64_t *)(v36 + 168);
          v25[7] = (uint64_t *)(v34 + 168 * v35);
          if (v37) {
            operator delete(v37);
          }
        }
        else
        {
          *((_OWORD *)v26 + 4) = v172;
          *((_OWORD *)v26 + 5) = v173;
          *((_OWORD *)v26 + 6) = v174[0];
          *(_OWORD *)((char *)v26 + 108) = *(_OWORD *)((char *)v174 + 12);
          *(_OWORD *)uint64_t v26 = *(_OWORD *)__str;
          *((_OWORD *)v26 + 1) = *(_OWORD *)&__str[16];
          *((_OWORD *)v26 + 2) = v170;
          *((_OWORD *)v26 + 3) = v171;
          *(_OWORD *)(v26 + 19) = *(_OWORD *)&v188[10];
          long long v28 = v187;
          *(_OWORD *)((char *)v26 + 142) = *(_OWORD *)v188;
          *((_WORD *)v26 + 62) = v143;
          *(_OWORD *)((char *)v26 + 126) = v28;
          std::string v29 = v26 + 21;
        }
        v25[6] = v29;
        if (v20) {
          nitro::nitro_function::nitro_function(v20);
        }
        v18 += 2;
      }
      v143 += v135;
    }
    ++v10;
    uint64_t v48 = *(void *)v137;
  }
  while (v10 != v132);
  uint64_t v49 = (int *)v8[8];
  long long v133 = (int *)v8[9];
  uint64_t v50 = v138;
  if (v49 == v133) {
    goto LABEL_198;
  }
  char v51 = 0;
  long long v136 = v8 + 23;
  do
  {
    int v176 = *v49;
    unint64_t v52 = v176;
    uint64_t v53 = *a2;
    uint64_t v54 = 16 * v176;
    uint64_t v55 = *(void *)(*(void *)(v48 + 32) + v54);
    if (*(char *)(v55 + 223) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)(v55 + 200), *(void *)(v55 + 208));
    }
    else
    {
      *(_OWORD *)__str = *(_OWORD *)(v55 + 200);
      *(void *)&__str[16] = *(void *)(v55 + 216);
    }
    std::string::operator=((std::string *)(v53 + 56), (const std::string *)__str);
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
    if (!*((unsigned char *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v139, v52, &v176)+ 32))
    {
      uint64_t v56 = *a2;
      uint64_t v57 = *(void *)(*(void *)(v48 + 32) + v54);
      long long v58 = *(std::__shared_weak_count **)(v57 + 72);
      uint64_t v153 = *(void *)(v57 + 64);
      v154 = v58;
      if (v58)
      {
        atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v57 = *(void *)(*(void *)(v48 + 32) + v54);
      }
      uint64_t v59 = *(void *)(v50 + 24) + 56;
      *(void *)&long long v187 = v52;
      uint64_t v60 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v59, v52, &v187);
      memset(v152, 0, sizeof(v152));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v152, v60[3], v60[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60[4] - v60[3]) >> 3));
      uint64_t v61 = *(void *)(v50 + 24) + 96;
      std::string __p = (void *)v52;
      uint64_t v62 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v61, v52, &__p);
      memset(v151, 0, sizeof(v151));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v151, v62[3], v62[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v62[4] - v62[3]) >> 3));
      Espresso::sequential_builder::add_kernel(v56, &v153, v57 + 40, v57 + 16, v152, v151);
      *(void *)__str = v151;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
      *(void *)__str = v152;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
      id v63 = v154;
      if (!v154) {
        goto LABEL_54;
      }
LABEL_53:
      nitro::nitro_function::nitro_function(v63);
      goto LABEL_54;
    }
    if (v51)
    {
      char v51 = 1;
      goto LABEL_61;
    }
    uint64_t v65 = *(void *)(*(void *)(v48 + 32) + v54);
    long long v66 = *(void **)(v65 + 64);
    if (v66)
    {
      uint64_t v67 = v8;
      if (v66)
      {
        unint64_t v68 = *(std::__shared_weak_count **)(v65 + 72);
        if (v68) {
          atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        unint64_t v68 = 0;
      }
    }
    else
    {
      unint64_t v68 = 0;
      uint64_t v67 = v8;
    }
    uint64_t v69 = (*(uint64_t (**)(void *))(*(void *)v66 + 384))(v66);
    long long v70 = *(_OWORD *)v69;
    long long v71 = *(_OWORD *)(v69 + 32);
    *(_OWORD *)&__str[16] = *(_OWORD *)(v69 + 16);
    long long v170 = v71;
    *(_OWORD *)__str = v70;
    long long v72 = *(_OWORD *)(v69 + 48);
    long long v73 = *(_OWORD *)(v69 + 64);
    long long v74 = *(_OWORD *)(v69 + 96);
    long long v173 = *(_OWORD *)(v69 + 80);
    v174[0] = v74;
    long long v171 = v72;
    long long v172 = v73;
    long long v75 = *(_OWORD *)(v69 + 112);
    long long v76 = *(_OWORD *)(v69 + 128);
    long long v77 = *(_OWORD *)(v69 + 144);
    uint64_t v175 = *(void *)(v69 + 160);
    v174[2] = v76;
    v174[3] = v77;
    v174[1] = v75;
    DWORD2(v170) = v143;
    std::string v78 = (uint64_t *)*a2;
    std::string::basic_string[abi:ne180100]<0>(&v187, "convolution");
    if ((v178 & 0x80u) == 0) {
      size_t v79 = v178;
    }
    else {
      size_t v79 = (size_t)v177[1];
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v79 + 6);
    if (v166 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if (v79)
    {
      if ((v178 & 0x80u) == 0) {
        uint64_t v81 = v177;
      }
      else {
        uint64_t v81 = (void **)v177[0];
      }
      memmove(p_p, v81, v79);
    }
    strcpy((char *)p_p + v79, "_fused");
    if (*((char *)v67 + 207) < 0)
    {
      std::string::__init_copy_ctor_external(&v185, (const std::string::value_type *)v67[23], v67[24]);
    }
    else
    {
      *(_OWORD *)&v185.__r_.__value_.__l.__data_ = *v136;
      v185.__r_.__value_.__r.__words[2] = v8[25];
    }
    v161 = 0;
    v162 = 0;
    v163 = 0;
    *(void *)&long long v183 = &v161;
    BYTE8(v183) = 0;
    v161 = (std::string *)operator new(0x18uLL);
    v162 = v161;
    v163 = v161 + 1;
    v162 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v163, (long long *)&v185, (long long *)&v186, v161);
    if (*((char *)v67 + 207) >= 0) {
      size_t v82 = *((unsigned __int8 *)v67 + 207);
    }
    else {
      size_t v82 = v67[24];
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v183, v82 + 6);
    if (v184 >= 0) {
      long long v83 = &v183;
    }
    else {
      long long v83 = (long long *)v183;
    }
    if (v82)
    {
      if (*((char *)v67 + 207) >= 0) {
        int v84 = v8 + 23;
      }
      else {
        int v84 = (const void *)v67[23];
      }
      memmove(v83, v84, v82);
    }
    strcpy((char *)v83 + v82, "_fused");
    v158 = 0;
    v159 = 0;
    v160 = 0;
    v181 = &v158;
    char v182 = 0;
    v158 = (std::string *)operator new(0x18uLL);
    v159 = v158;
    v160 = v158 + 1;
    v159 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v160, &v183, (long long *)&v185, v158);
    Espresso::sequential_builder::add<Espresso::convolution_uniforms>((uint64_t *)&lpsrc, v78, (uint64_t)&v187, (uint64_t)&__p, (uint64_t)__str, (uint64_t)v161, (uint64_t)v162, (uint64_t *)&v158);
    if (!lpsrc)
    {
      int v85 = 0;
LABEL_95:
      long long v86 = 0;
      goto LABEL_96;
    }
    if (!v85) {
      goto LABEL_95;
    }
    long long v86 = v168;
    if (!v168)
    {
      long long v128 = 0;
      goto LABEL_99;
    }
    atomic_fetch_add_explicit(&v168->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_96:
    long long v128 = v86;
    if (v168) {
      nitro::nitro_function::nitro_function(v168);
    }
LABEL_99:
    v181 = &v158;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v181);
    if (v184 < 0) {
      operator delete((void *)v183);
    }
    *(void *)&long long v183 = &v161;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v183);
    if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v185.__r_.__value_.__l.__data_);
    }
    if (v166 < 0) {
      operator delete(__p);
    }
    if ((v188[7] & 0x80000000) != 0) {
      operator delete((void *)v187);
    }
    (*(void (**)(long long *__return_ptr, void *))(*(void *)v85 + 472))(&v187, v85);
    long long v130 = v68;
    (*(void (**)(void **__return_ptr, void *))(*(void *)v85 + 488))(&__p, v85);
    int v87 = (_DWORD *)v67[8];
    long long v88 = (_DWORD *)v67[9];
    if (v87 != v88)
    {
      uint64_t v89 = 0;
      uint64_t v90 = 0;
      while (1)
      {
        LODWORD(v181) = *v87;
        int v91 = (int)v181;
        if (*((unsigned char *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v139, (int)v181, &v181)+ 32))break; {
LABEL_127:
        }
        if (++v87 == v88) {
          goto LABEL_128;
        }
      }
      uint64_t v92 = *(void *)(*(void *)(v48 + 32) + 16 * v91);
      char v93 = *(const void **)(v92 + 64);
      if (v93)
      {
        if (v94)
        {
          long long v95 = *(std::__shared_weak_count **)(v92 + 72);
          if (v95) {
            atomic_fetch_add_explicit(&v95->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_116;
        }
      }
      else
      {
        unint64_t v94 = 0;
      }
      long long v95 = 0;
LABEL_116:
      (*(void (**)(std::string *__return_ptr, void *))(*(void *)v94 + 456))(&v185, v94);
      (*(void (**)(long long *__return_ptr, void *))(*(void *)v94 + 448))(&v183, v94);
      uint64_t v96 = 0;
      uint64_t v97 = *(int *)(v185.__r_.__value_.__r.__words[0] + 8);
      do
      {
        v97 *= *(int *)(v185.__r_.__value_.__r.__words[0] + 12 + v96);
        v96 += 4;
      }
      while (v96 != 12);
      memcpy((void *)(*(void *)(v187 + 24) + 4 * v89), *(const void **)(v185.__r_.__value_.__r.__words[0] + 24), 4 * v97);
      memcpy((void *)(*((void *)__p + 2) + 4 * v90), *(const void **)(v183 + 16), 4 * *(int *)(v183 + 8));
      uint64_t v98 = 0;
      uint64_t v99 = *(int *)(v185.__r_.__value_.__r.__words[0] + 8);
      do
      {
        v99 *= *(int *)(v185.__r_.__value_.__r.__words[0] + 12 + v98);
        v98 += 4;
      }
      while (v98 != 12);
      uint64_t v100 = *(int *)(v183 + 8);
      if (*((void *)&v183 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v183 + 1));
      }
      if (v185.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v185.__r_.__value_.__l.__size_);
      }
      v89 += v99;
      v90 += v100;
      if (v95) {
        nitro::nitro_function::nitro_function(v95);
      }
      uint64_t v48 = *(void *)v137;
      goto LABEL_127;
    }
LABEL_128:
    long long v157 = v187;
    if (*((void *)&v187 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v187 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    id v63 = v130;
    (*(void (**)(void *, long long *))(*(void *)v85 + 400))(v85, &v157);
    uint64_t v50 = v138;
    if (*((void *)&v157 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v157 + 1));
    }
    v155 = __p;
    v156 = v165;
    if (v165) {
      atomic_fetch_add_explicit(&v165->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *, void **))(*(void *)v85 + 392))(v85, &v155);
    if (v156) {
      nitro::nitro_function::nitro_function(v156);
    }
    if (v165) {
      nitro::nitro_function::nitro_function(v165);
    }
    if (*((void *)&v187 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v187 + 1));
    }
    if (v128) {
      nitro::nitro_function::nitro_function(v128);
    }
    char v51 = 1;
    if (v130) {
      goto LABEL_53;
    }
LABEL_54:
    uint64_t v64 = *a2;
    if (*(char *)(*a2 + 79) < 0)
    {
      **(unsigned char **)(v64 + 56) = 0;
      *(void *)(v64 + 64) = 0;
    }
    else
    {
      *(unsigned char *)(v64 + 56) = 0;
      *(unsigned char *)(v64 + 79) = 0;
    }
LABEL_61:
    ++v49;
  }
  while (v49 != v133);
  long long v101 = (_DWORD *)v8[8];
  long long v131 = (_DWORD *)v8[9];
  if (v101 != v131)
  {
    long long v129 = (uint64_t **)(v8 + 14);
    while (1)
    {
      long long v134 = v101;
      LODWORD(v181) = *v101;
      int v102 = (int)v181;
      if (*((unsigned char *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v139, (int)v181, &v181)+ 32))
      {
        id v103 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v129, v102, &v181);
        int32x2_t v104 = (int *)v103[5];
        id v105 = (int *)v103[6];
        if (v104 != v105) {
          break;
        }
      }
LABEL_197:
      long long v101 = v134 + 1;
      if (v134 + 1 == v131) {
        goto LABEL_198;
      }
    }
    uint64_t v106 = 0;
    while (1)
    {
      unint64_t v107 = *v104;
      v108 = (uint64_t *)(*(void *)(*(void *)(v50 + 24) + 32) + 16 * v107);
      uint64_t v110 = *v108;
      v109 = (std::__shared_weak_count *)v108[1];
      if (v109) {
        atomic_fetch_add_explicit(&v109->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v111 = (uint64_t *)*a2;
      std::string::basic_string[abi:ne180100]<0>(__str, "convolution");
      v112 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v179, (int)v181, &v181)[5];
      if (*((char *)v141 + 207) >= 0) {
        size_t v113 = *((unsigned __int8 *)v141 + 207);
      }
      else {
        size_t v113 = v141[24];
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v187, v113 + 6);
      if (v188[7] >= 0) {
        v114 = &v187;
      }
      else {
        v114 = (long long *)v187;
      }
      if (v113)
      {
        if (*((char *)v141 + 207) >= 0) {
          int32x2_t v115 = v136;
        }
        else {
          int32x2_t v115 = (const void *)v141[23];
        }
        memmove(v114, v115, v113);
      }
      strcpy((char *)v114 + v113, "_fused");
      v148 = 0;
      v149 = 0;
      v150 = 0;
      std::string __p = &v148;
      LOBYTE(v165) = 0;
      v148 = (std::string *)operator new(0x18uLL);
      v149 = v148;
      v150 = v148 + 1;
      uint64_t v50 = v138;
      v149 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v150, &v187, (long long *)&v188[8], v148);
      uint64_t v116 = *(void *)(v138 + 24) + 96;
      *(void *)&long long v183 = v107;
      v117 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v116, v107, &v183);
      memset(v147, 0, sizeof(v147));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v147, v117[3], v117[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v117[4] - v117[3]) >> 3));
      Espresso::sequential_builder::add<Espresso::convolution_uniforms>((uint64_t *)&v185, v111, (uint64_t)__str, v110 + 16, (uint64_t)&v112[21 * v106], (uint64_t)v148, (uint64_t)v149, v147);
      if (!v185.__r_.__value_.__r.__words[0]) {
        break;
      }
      if (!v118) {
        goto LABEL_167;
      }
      std::string::size_type size = (std::__shared_weak_count *)v185.__r_.__value_.__l.__size_;
      if (v185.__r_.__value_.__l.__size_)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v185.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        goto LABEL_168;
      }
LABEL_170:
      std::string __p = v147;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      std::string __p = &v148;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if ((v188[7] & 0x80000000) != 0) {
        operator delete((void *)v187);
      }
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      (*(void (**)(unsigned char *__return_ptr, void *))(*(void *)v118 + 472))(__str, v118);
      (*(void (**)(long long *__return_ptr, void *))(*(void *)v118 + 488))(&v187, v118);
      int v120 = (int)v181;
      v121 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v142, (int)v181, &v181);
      (*(void (**)(void **__return_ptr))(*(void *)v121[5][2 * v106] + 456))(&__p);
      v122 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v142, v120, &v181);
      (*(void (**)(std::string *__return_ptr))(*(void *)v122[5][2 * v106] + 448))(&v185);
      uint64_t v123 = 0;
      uint64_t v124 = *((int *)__p + 2);
      do
      {
        v124 *= *(int *)((char *)__p + v123 + 12);
        v123 += 4;
      }
      while (v123 != 12);
      memcpy(*(void **)(*(void *)__str + 24), *((const void **)__p + 3), 4 * v124);
      memcpy(*(void **)(v187 + 16), *(const void **)(v185.__r_.__value_.__r.__words[0] + 16), 4 * *(int *)(v185.__r_.__value_.__r.__words[0] + 8));
      v145 = __p;
      v146 = v165;
      if (v165) {
        atomic_fetch_add_explicit(&v165->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void *, void **))(*(void *)v118 + 400))(v118, &v145);
      if (v146) {
        nitro::nitro_function::nitro_function(v146);
      }
      long long v144 = *(_OWORD *)&v185.__r_.__value_.__l.__data_;
      if (v185.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v185.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void *, long long *))(*(void *)v118 + 392))(v118, &v144);
      if (*((void *)&v144 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v144 + 1));
      }
      if (v185.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v185.__r_.__value_.__l.__size_);
      }
      if (v165) {
        nitro::nitro_function::nitro_function(v165);
      }
      if (*((void *)&v187 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v187 + 1));
      }
      if (*(void *)&__str[8]) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&__str[8]);
      }
      if (size) {
        nitro::nitro_function::nitro_function(size);
      }
      if (v109) {
        nitro::nitro_function::nitro_function(v109);
      }
      ++v106;
      if (++v104 == v105) {
        goto LABEL_197;
      }
    }
    v118 = 0;
LABEL_167:
    std::string::size_type size = 0;
LABEL_168:
    if (v185.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v185.__r_.__value_.__l.__size_);
    }
    goto LABEL_170;
  }
LABEL_198:
  std::map<int,BOOL>::map[abi:ne180100](v126, v141 + 2);
  if ((char)v178 < 0) {
    operator delete(v177[0]);
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v180[0]);
  if (v127) {
    nitro::nitro_function::nitro_function(v127);
  }
}

void sub_1928AA6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (SLOBYTE(STACK[0x25F]) < 0) {
    operator delete((void *)STACK[0x248]);
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(void **)(v10 - 248));
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        unint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    long long v9 = (uint64_t *)v7;
    uint64_t v7 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[6] = 0;
    v7[7] = 0;
    v7[5] = 0;
    void *v7 = 0;
    v7[1] = 0;
    void v7[2] = v9;
    *uint64_t v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    int v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      int v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::convolution_uniforms>>(unint64_t a1)
{
  if (a1 >= 0x186186186186187) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(168 * a1);
}

void Espresso::rule_inception_block::match_at_layer(Espresso::rule_inception_block *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  int v68 = a2;
  uint64_t v6 = (char *)operator new(0xF0uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(void *)uint64_t v6 = &unk_1EE386FC8;
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 5) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  *((_OWORD *)v6 + 8) = 0u;
  *((_OWORD *)v6 + 11) = 0u;
  *((_OWORD *)v6 + 12) = 0u;
  *((_OWORD *)v6 + 13) = 0u;
  *((_OWORD *)v6 + 14) = 0u;
  *((_OWORD *)v6 + 10) = 0u;
  *((_OWORD *)v6 + 9) = 0u;
  *((_OWORD *)v6 + 7) = 0u;
  *((_DWORD *)v6 + 8) = -1;
  *((_OWORD *)v6 + 3) = 0u;
  *((void *)v6 + 5) = v6 + 48;
  uint64_t v64 = (uint64_t **)(v6 + 40);
  *(_OWORD *)(v6 + 72) = 0u;
  *((void *)v6 + 8) = v6 + 72;
  *((void *)v6 + 3) = &unk_1EE3524E8;
  *(_OWORD *)(v6 + 88) = 0u;
  uint64_t v61 = (void **)(v6 + 88);
  *(_OWORD *)(v6 + 120) = 0u;
  *((void *)v6 + 13) = 0;
  *((void *)v6 + 14) = v6 + 120;
  *((_OWORD *)v6 + 9) = 0u;
  *((void *)v6 + 17) = v6 + 144;
  *(_OWORD *)(v6 + 168) = 0u;
  *((void *)v6 + 20) = v6 + 168;
  v6[232] = 0;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  uint64_t v7 = *((void *)this + 3) + 96;
  *(void *)&long long v65 = a2;
  int v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v7, a2, &v65);
  std::string::operator=((std::string *)(v6 + 208), (const std::string *)v8[3]);
  uint64_t v60 = a3;
  *((_DWORD *)v6 + 8) = a2;
  long long v9 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((void *)this + 1) + 16), a2, &v68);
  int v11 = (int *)v9[5];
  uint64_t v10 = (int *)v9[6];
  uint64_t v62 = v10;
  while (v11 != v10)
  {
    int v67 = *v11;
    int v12 = v67;
    uint64_t v13 = *(void *)(*(void *)(*((void *)this + 3) + 32) + 16 * v67);
    int v14 = *(const void **)(v13 + 64);
    if (v14)
    {
      if (v15)
      {
        uint64_t v16 = *(void *)(v13 + 72);
        if (v16)
        {
          id v63 = *(std::__shared_weak_count **)(v13 + 72);
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
          goto LABEL_9;
        }
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    id v63 = 0;
LABEL_9:
    size_t v18 = (int *)*((void *)v6 + 12);
    unint64_t v17 = *((void *)v6 + 13);
    if ((unint64_t)v18 >= v17)
    {
      unint64_t v20 = (int *)*v61;
      uint64_t v21 = ((char *)v18 - (unsigned char *)*v61) >> 2;
      unint64_t v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 62) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v23 = v17 - (void)v20;
      if (v23 >> 1 > v22) {
        unint64_t v22 = v23 >> 1;
      }
      BOOL v24 = (unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v24) {
        unint64_t v25 = v22;
      }
      if (v25)
      {
        unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v25);
        unint64_t v20 = (int *)*((void *)v6 + 11);
        size_t v18 = (int *)*((void *)v6 + 12);
      }
      else
      {
        uint64_t v26 = 0;
      }
      unint64_t v27 = (int *)(v25 + 4 * v21);
      *unint64_t v27 = v12;
      uint64_t v19 = v27 + 1;
      while (v18 != v20)
      {
        int v28 = *--v18;
        *--unint64_t v27 = v28;
      }
      *((void *)v6 + 11) = v27;
      *((void *)v6 + 12) = v19;
      *((void *)v6 + 13) = v25 + 4 * v26;
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      *size_t v18 = v12;
      uint64_t v19 = v18 + 1;
    }
    *((void *)v6 + 12) = v19;
    int v29 = v67;
    *((unsigned char *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v64, v67, &v67)+ 32) = 1;
    if (v15)
    {
      uint64_t v30 = (*(uint64_t (**)(void *))(*(void *)v15 + 384))(v15);
      BOOL v31 = *(_DWORD *)(v30 + 48) == 1 && *(_DWORD *)(v30 + 52) == 1;
      BOOL v32 = v31 && *(_WORD *)(v30 + 92) == 1;
      BOOL v33 = v32 && *(_WORD *)(v30 + 94) == 1;
      if (v33 && *(_DWORD *)(v30 + 116) == 1)
      {
        std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((void *)this + 1) + 16), v29, &v67);
        uint64_t v35 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((void *)this + 1) + 16), v29, &v67);
        uint64_t v37 = (int *)v35[5];
        unint64_t v36 = (int *)v35[6];
        while (v37 != v36)
        {
          int v38 = *v37;
          int v66 = v38;
          uint64_t v39 = *(void *)(*(void *)(*((void *)this + 3) + 32) + 16 * v38);
          long long v40 = *(const void **)(v39 + 64);
          if (v40
          {
            long long v42 = v41;
            long long v43 = *(std::__shared_weak_count **)(v39 + 72);
            *(void *)&long long v65 = v41;
            *((void *)&v65 + 1) = v43;
            if (v43)
            {
              atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v39 = *(void *)(*(void *)(*((void *)this + 3) + 32) + 16 * v38);
              long long v40 = *(const void **)(v39 + 64);
              if (!v40)
              {
LABEL_52:
                if (v42)
                {
                  *((unsigned char *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v64, v38, &v66)+ 32) = 1;
                  int v45 = v67;
                  *((unsigned char *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v6 + 14, v67, &v67)+ 32) = 1;
                  long long v46 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v6 + 20, v45, &v67);
                  std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>::push_back[abi:ne180100]((uint64_t)(v46 + 5), &v65);
                  long long v47 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v6 + 17, v45, &v67);
                  uint64_t v48 = v47;
                  uint64_t v49 = (int *)v47[6];
                  uint64_t v50 = v47[7];
                  if (v49 >= (int *)v50)
                  {
                    unint64_t v52 = v47[5];
                    uint64_t v53 = ((char *)v49 - (char *)v52) >> 2;
                    if ((unint64_t)(v53 + 1) >> 62) {
                      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                    }
                    unint64_t v54 = (char *)v50 - (char *)v52;
                    unint64_t v55 = ((char *)v50 - (char *)v52) >> 1;
                    if (v55 <= v53 + 1) {
                      unint64_t v55 = v53 + 1;
                    }
                    BOOL v24 = v54 >= 0x7FFFFFFFFFFFFFFCLL;
                    unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
                    if (!v24) {
                      unint64_t v56 = v55;
                    }
                    if (v56)
                    {
                      unint64_t v56 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v56);
                      unint64_t v52 = v48[5];
                      uint64_t v49 = (int *)v48[6];
                    }
                    else
                    {
                      uint64_t v57 = 0;
                    }
                    long long v58 = (int *)(v56 + 4 * v53);
                    int *v58 = v38;
                    char v51 = (uint64_t *)(v58 + 1);
                    while (v49 != (int *)v52)
                    {
                      int v59 = *--v49;
                      *--long long v58 = v59;
                    }
                    v48[5] = (uint64_t *)v58;
                    v48[6] = v51;
                    v48[7] = (uint64_t *)(v56 + 4 * v57);
                    if (v52) {
                      operator delete(v52);
                    }
                  }
                  else
                  {
                    *uint64_t v49 = v38;
                    char v51 = (uint64_t *)(v49 + 1);
                  }
                  v48[6] = v51;
                }
                goto LABEL_69;
              }
            }
          }
          else
          {
            long long v43 = 0;
            long long v42 = 0;
            long long v65 = 0uLL;
            if (!v40) {
              goto LABEL_52;
            }
          }
          long long v44 = *(std::__shared_weak_count **)(v39 + 72);
          if (v44)
          {
            atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
            nitro::nitro_function::nitro_function(v44);
          }
LABEL_69:
          if (v43) {
            nitro::nitro_function::nitro_function(v43);
          }
          ++v37;
        }
      }
    }
    if (v63) {
      nitro::nitro_function::nitro_function(v63);
    }
    ++v11;
    uint64_t v10 = v62;
  }
  if (*((void *)v6 + 16) >= 2uLL)
  {
    *uint64_t v60 = v6 + 24;
    v60[1] = v6;
  }
  else
  {
    *uint64_t v60 = 0;
    v60[1] = 0;
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v6);
  }
}

void sub_1928AB0FC(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>::push_back[abi:ne180100](uint64_t a1, long long *a2)
{
  unint64_t v5 = *(void **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    int v8 = *(void **)a1;
    uint64_t v9 = ((uint64_t)v5 - *(void *)a1) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - (void)v8;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v13 = (char *)operator new(16 * v12);
    int v14 = &v13[16 * v9];
    long long v15 = *a2;
    *(_OWORD *)int v14 = *a2;
    if (*((void *)&v15 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
      int v8 = *(void **)a1;
      unint64_t v5 = *(void **)(a1 + 8);
    }
    uint64_t v16 = &v13[16 * v12];
    uint64_t v7 = v14 + 16;
    if (v5 == v8)
    {
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v16;
    }
    else
    {
      do
      {
        long long v17 = *((_OWORD *)v5 - 1);
        v5 -= 2;
        *((_OWORD *)v14 - 1) = v17;
        v14 -= 16;
        void *v5 = 0;
        v5[1] = 0;
      }
      while (v5 != v8);
      int v8 = *(void **)a1;
      size_t v18 = *(void **)(a1 + 8);
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v16;
      while (v18 != v8)
      {
        uint64_t v19 = (std::__shared_weak_count *)*(v18 - 1);
        if (v19) {
          nitro::nitro_function::nitro_function(v19);
        }
        v18 -= 2;
      }
    }
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    uint64_t v6 = *((void *)a2 + 1);
    void *v5 = *(void *)a2;
    v5[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = v5 + 2;
  }
  *(void *)(a1 + 8) = v7;
}

void Espresso::rule_inception_block::status_t::~status_t(Espresso::rule_inception_block::status_t *this)
{
  Espresso::rule_inception_block::status_t::~status_t(this);

  JUMPOUT(0x192FF16B0);
}

{
  void *v2;
  void **v3;

  *(void *)this = &unk_1EE3524E8;
  if (*((char *)this + 207) < 0) {
    operator delete(*((void **)this + 23));
  }
  id v3 = (void **)((char *)this + 160);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>>>::destroy(*((char **)this + 18));
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*((void **)this + 15));
  std::__tree<int>::destroy(*((void **)this + 12));
  uint64_t v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    *((void *)this + 9) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1EE365EC8;
  std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::destroy(*((void **)this + 6));
  std::__tree<int>::destroy(*((void **)this + 3));
}

void std::__tree<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>>>::destroy(*((void *)a1 + 1));
    uint64_t v2 = (void **)(a1 + 40);
    std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100](&v2);
    operator delete(a1);
  }
}

uint64_t std::__shared_ptr_emplace<Espresso::rule_inception_block::status_t>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::rule_inception_block::status_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386FC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::rule_inception_block::status_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386FC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::rule_inception_block::~rule_inception_block(Espresso::rule_inception_block *this)
{
  Espresso::graph_optimization_rule::~graph_optimization_rule(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::rule_1x1_inceptionlike::transform_and_return_skip_layers(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  id v3 = *(void **)a1;
  if (*(void *)a1
  {
    unint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    unint64_t v5 = 0;
  }
  std::map<int,BOOL>::map[abi:ne180100](a2, v3 + 2);
  if (v5)
  {
    nitro::nitro_function::nitro_function(v5);
  }
}

void sub_1928AB574(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::rule_1x1_inceptionlike::match_at_layer(Espresso::rule_1x1_inceptionlike *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  int v21 = a2;
  unint64_t v5 = (char *)operator new(0x148uLL);
  *(_OWORD *)(v5 + 8) = 0u;
  *(void *)unint64_t v5 = &unk_1EE3879D8;
  *((_OWORD *)v5 + 2) = 0u;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  *((_OWORD *)v5 + 6) = 0u;
  *((_OWORD *)v5 + 7) = 0u;
  *((_OWORD *)v5 + 8) = 0u;
  *((_OWORD *)v5 + 9) = 0u;
  *((_OWORD *)v5 + 11) = 0u;
  *((_OWORD *)v5 + 12) = 0u;
  *((_OWORD *)v5 + 13) = 0u;
  *((_OWORD *)v5 + 14) = 0u;
  *((_OWORD *)v5 + 15) = 0u;
  *((_OWORD *)v5 + 16) = 0u;
  *((_OWORD *)v5 + 17) = 0u;
  *((_OWORD *)v5 + 18) = 0u;
  *((_OWORD *)v5 + 19) = 0u;
  *((_OWORD *)v5 + 10) = 0u;
  *((void *)v5 + 40) = 0;
  *((_OWORD *)v5 + 3) = 0u;
  *((_DWORD *)v5 + 8) = -1;
  *((void *)v5 + 5) = v5 + 48;
  *(_OWORD *)(v5 + 72) = 0u;
  *((_OWORD *)v5 + 3) = 0u;
  *((void *)v5 + 8) = v5 + 72;
  *((void *)v5 + 3) = &unk_1EE359DD8;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *((void *)v5 + 19) = 0;
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v5 + 160));
  uint64_t v6 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((void *)this + 1) + 16), a2, &v21);
  int v8 = (int *)v6[5];
  for (uint64_t i = v6[6]; v8 != (int *)i; ++v8)
  {
    int v20 = *v8;
    int v9 = v20;
    uint64_t v10 = *(void *)(*(void *)(*((void *)this + 3) + 32) + 16 * v20);
    uint64_t v11 = *(const void **)(v10 + 64);
    if (v11)
    {
      if (v12)
      {
        uint64_t v13 = *(std::__shared_weak_count **)(v10 + 72);
        *(void *)&long long v19 = v12;
        *((void *)&v19 + 1) = v13;
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v14 = (*(uint64_t (**)(void *))(*(void *)v12 + 384))(v12);
        if (*(_DWORD *)(v14 + 48) == 1
          && *(_DWORD *)(v14 + 52) == 1
          && *(_WORD *)(v14 + 92) == 1
          && *(_WORD *)(v14 + 94) == 1)
        {
          *((unsigned char *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v5 + 5, v9, &v20)+ 32) = 1;
          std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>::push_back[abi:ne180100]((uint64_t)(v5 + 88), &v19);
        }
        if (v13) {
          nitro::nitro_function::nitro_function(v13);
        }
      }
    }
  }
  if (*((void *)v5 + 12) - *((void *)v5 + 11) >= 0x20uLL)
  {
    *a3 = v5 + 24;
    a3[1] = v5;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v5);
  }
}

void sub_1928AB7FC(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

void Espresso::rule_1x1_inceptionlike::status_t::~status_t(void **this)
{
  Espresso::rule_1x1_inceptionlike::status_t::~status_t(this);

  JUMPOUT(0x192FF16B0);
}

{
  void **v2;

  *this = &unk_1EE359DD8;
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  uint64_t v2 = this + 8;
  std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *this = &unk_1EE365EC8;
  std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::destroy(this[6]);
  std::__tree<int>::destroy(this[3]);
}

uint64_t std::__shared_ptr_emplace<Espresso::rule_1x1_inceptionlike::status_t>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::rule_1x1_inceptionlike::status_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3879D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::rule_1x1_inceptionlike::status_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3879D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::rule_1x1_inceptionlike::~rule_1x1_inceptionlike(Espresso::rule_1x1_inceptionlike *this)
{
  Espresso::graph_optimization_rule::~graph_optimization_rule(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::_rule_bake_batchnorm::transform_and_return_skip_layers(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  if (!*(void *)a3
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent status");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v8 = *(void *)(a3 + 8);
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v9 = v6[2];
  uint64_t v10 = (uint64_t *)(*(void *)(*(void *)(a1 + 24) + 32) + 16 * v9);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *((void *)v6 + 8);
  uint64_t v13 = *((void *)v6 + 9);
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  if (!v14)
  {
    uint64_t v15 = *((void *)v6 + 9);
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v16 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v16, "Inconsistent state");
    __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 384))(v14);
  long long v19 = *(_OWORD *)(v17 + 128);
  long long v18 = *(_OWORD *)(v17 + 144);
  uint64_t v20 = *(void *)(v17 + 160);
  long long v45 = *(_OWORD *)(v17 + 112);
  long long v21 = *(_OWORD *)v17;
  long long v22 = *(_OWORD *)(v17 + 32);
  v44[1] = *(_OWORD *)(v17 + 16);
  v44[2] = v22;
  v44[0] = v21;
  long long v23 = *(_OWORD *)(v17 + 48);
  long long v24 = *(_OWORD *)(v17 + 64);
  long long v25 = *(_OWORD *)(v17 + 96);
  v44[5] = *(_OWORD *)(v17 + 80);
  v44[6] = v25;
  v44[3] = v23;
  v44[4] = v24;
  uint64_t v48 = v20;
  long long v46 = v19;
  long long v47 = v18;
  LODWORD(v45) = 0;
  uint64_t v26 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "convolution");
  uint64_t v27 = *(void *)(a1 + 24) + 56;
  v32[0] = v9;
  int v28 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v27, v9, v32);
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v36, v28[3], v28[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28[4] - v28[3]) >> 3));
  uint64_t v29 = *(void *)(a1 + 24) + 96;
  unint64_t v34 = v9;
  uint64_t v30 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v29, v9, &v34);
  memset(v35, 0, sizeof(v35));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v35, v30[3], v30[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30[4] - v30[3]) >> 3));
  Espresso::sequential_builder::add<Espresso::convolution_uniforms>((uint64_t *)&v41, v26, (uint64_t)__p, v12 + 16, (uint64_t)v44, v36, v37, v35);
  std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_convolution_kernel,Espresso::base_kernel>(&v43, v41, (uint64_t)v42);
  if (v42) {
    nitro::nitro_function::nitro_function(v42);
  }
  v33[0] = (void **)v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v33);
  v33[0] = (void **)&v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v33);
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v14 + 472))(__p, v14);
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v14 + 488))(&v41, v14);
  (*(void (**)(void ***__return_ptr, uint64_t))(*(void *)v14 + 456))(v33, v14);
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v14 + 448))(v32, v14);
  BOOL v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(v31, "not implemented!");
  __cxa_throw(v31, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1928ABDC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,std::__shared_weak_count *a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,std::__shared_weak_count *a29)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (a27) {
    nitro::nitro_function::nitro_function(a27);
  }
  if (a21) {
    nitro::nitro_function::nitro_function(a21);
  }
  if (a29)
  {
    nitro::nitro_function::nitro_function(a29);
    if (!v31)
    {
LABEL_11:
      if (!v30) {
        goto LABEL_12;
      }
      goto LABEL_16;
    }
  }
  else if (!v31)
  {
    goto LABEL_11;
  }
  nitro::nitro_function::nitro_function(v31);
  if (!v30)
  {
LABEL_12:
    if (!v29) {
LABEL_18:
    }
      _Unwind_Resume(exception_object);
LABEL_17:
    nitro::nitro_function::nitro_function(v29);
    goto LABEL_18;
  }
LABEL_16:
  nitro::nitro_function::nitro_function(v30);
  if (!v29) {
    goto LABEL_18;
  }
  goto LABEL_17;
}

void *std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_convolution_kernel,Espresso::base_kernel>(void *result, void *lpsrc, uint64_t a3)
{
  id v3 = result;
  if (lpsrc
  {
    void *v3 = result;
    v3[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void Espresso::_rule_bake_batchnorm::match_at_layer(Espresso::_rule_bake_batchnorm *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  int v14 = a2;
  uint64_t v6 = (char *)operator new(0x78uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE386C48;
  *((void *)v6 + 4) = 0xFFFFFFFFLL;
  *((void *)v6 + 6) = 0;
  *((void *)v6 + 5) = v6 + 48;
  *((void *)v6 + 10) = 0;
  *((void *)v6 + 9) = 0;
  *((void *)v6 + 7) = 0;
  *((void *)v6 + 8) = v6 + 72;
  *((void *)v6 + 3) = &unk_1EE3506F8;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *((_DWORD *)v6 + 8) = a2;
  uint64_t v7 = *(void *)(*(void *)(*((void *)this + 3) + 32) + 16 * a2);
  uint64_t v8 = *(const void **)(v7 + 64);
  if (!v8)
  {
LABEL_16:
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_20;
  }
  if (!v9)
  {
    {
      uint64_t v13 = *(std::__shared_weak_count **)(v7 + 72);
      if (v13)
      {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        *a3 = 0;
        a3[1] = 0;
LABEL_19:
        nitro::nitro_function::nitro_function(v13);
        goto LABEL_20;
      }
    }
    goto LABEL_16;
  }
  uint64_t v10 = v9;
  uint64_t v11 = *(std::__shared_weak_count **)(v7 + 72);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v9 + 384))(v9) + 112))
  {
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = (std::__shared_weak_count *)*((void *)v6 + 12);
    *((void *)v6 + 11) = v10;
    *((void *)v6 + 12) = v11;
    if (v12) {
      nitro::nitro_function::nitro_function(v12);
    }
    *((unsigned char *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v6 + 5, a2, &v14)+ 32) = 1;
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    *a3 = v6 + 24;
    a3[1] = v6;
    return;
  }
  *a3 = 0;
  a3[1] = 0;
  if (v11)
  {
    uint64_t v13 = v11;
    goto LABEL_19;
  }
LABEL_20:

  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v6);
}

void sub_1928AC1EC(_Unwind_Exception *a1)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

void Espresso::_rule_bake_batchnorm::status_t::~status_t(Espresso::_rule_bake_batchnorm::status_t *this)
{
  Espresso::_rule_bake_batchnorm::status_t::~status_t(this);

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_1EE3506F8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  id v3 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *(void *)this = &unk_1EE365EC8;
  std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::destroy(*((void **)this + 6));
  std::__tree<int>::destroy(*((void **)this + 3));
}

uint64_t std::__shared_ptr_emplace<Espresso::_rule_bake_batchnorm::status_t>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::_rule_bake_batchnorm::status_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386C48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::_rule_bake_batchnorm::status_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386C48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::_rule_bake_batchnorm::~_rule_bake_batchnorm(Espresso::_rule_bake_batchnorm *this)
{
  Espresso::graph_optimization_rule::~graph_optimization_rule(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::graph_optimization_rule_simple::transform_and_return_skip_layers@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  uint64_t v11 = *a2;
  uint64_t v12 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)a3[1];
  uint64_t v9 = *a3;
  uint64_t v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 32))(a1, &v11, &v9);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  return std::map<int,BOOL>::map[abi:ne180100](a4, (void *)(*a3 + 16));
}

void sub_1928AC454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<Espresso::graph_optimization_rule_status>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388E30;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::graph_optimization_rule_status>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388E30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *Espresso::rule_convolution_groups::rule_convolution_groups(void *a1, uint64_t a2)
{
  unint64_t v4 = *(uint64_t **)a2;
  id v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *a1 = &unk_1EE35AF00;
  a1[1] = v4;
  a1[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  a1[3] = v6;
  a1[4] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *a1 = &unk_1EE35B2E0;
  return a1;
}

void *Espresso::rule_inception_block::rule_inception_block(void *a1, uint64_t a2)
{
  unint64_t v4 = *(uint64_t **)a2;
  id v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *a1 = &unk_1EE35AF00;
  a1[1] = v4;
  a1[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  a1[3] = v6;
  a1[4] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *a1 = &unk_1EE352508;
  return a1;
}

void *Espresso::rule_1x1_inceptionlike::rule_1x1_inceptionlike(void *a1, uint64_t a2)
{
  unint64_t v4 = *(uint64_t **)a2;
  id v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *a1 = &unk_1EE35AF00;
  a1[1] = v4;
  a1[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  a1[3] = v6;
  a1[4] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *a1 = &unk_1EE359DF8;
  return a1;
}

void *Espresso::_rule_bake_batchnorm::_rule_bake_batchnorm(void *a1, uint64_t a2)
{
  unint64_t v4 = *(uint64_t **)a2;
  id v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *a1 = &unk_1EE35AF00;
  a1[1] = v4;
  a1[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  a1[3] = v6;
  a1[4] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  *a1 = &unk_1EE350718;
  return a1;
}

void std::__shared_ptr_emplace<Espresso::sequential_builder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386900;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::sequential_builder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE386900;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void Espresso::fold_transform_params(const Espresso::net **a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v156 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (std::__shared_weak_count *)*((void *)*a1 + 3);
  v137[0] = *((void *)*a1 + 2);
  v137[1] = (uint64_t)v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v136[0] = 0;
  v136[1] = 0;
  Espresso::sequential_builder::sequential_builder((uint64_t)&v138, v137, 0, v136);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  long long v133 = 0;
  long long v134 = 0;
  unint64_t v135 = 0;
  uint64_t v6 = *a1;
  uint64_t v7 = *((void *)*a1 + 4);
  if (*((void *)*a1 + 5) != v7)
  {
    int v102 = a3;
    unint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = (uint64_t *)(v7 + 16 * v8);
      uint64_t v11 = *v9;
      uint64_t v10 = (std::__shared_weak_count *)v9[1];
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v12 = *(const void **)(v11 + 64);
      if (!v12) {
        break;
      }
      int v14 = v13;
      if (!v13) {
        goto LABEL_18;
      }
      uint64_t v15 = *(std::__shared_weak_count **)(v11 + 72);
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if ((***(unsigned int (****)(void))(v13[1] + 8))(*(void *)(v13[1] + 8))
        && (***(unsigned int (****)(void))(v14[1] + 8))(*(void *)(v14[1] + 8)) != 100
        || *(_WORD *)((*(uint64_t (**)(void *))(*v14 + 384))(v14) + 72) == 2)
      {
        goto LABEL_19;
      }
      BOOL v16 = *(unsigned __int16 *)((*(uint64_t (**)(void *))(*v14 + 384))(v14) + 72) != 3;
LABEL_20:
      if (*(char *)(v11 + 223) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)(v11 + 200), *(void *)(v11 + 208));
      }
      else
      {
        *(_OWORD *)__str = *(_OWORD *)(v11 + 200);
        *(void *)&__str[16] = *(void *)(v11 + 216);
      }
      std::string::operator=(&__p, (const std::string *)__str);
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      uint64_t v17 = (uint64_t)*a1 + 56;
      *(void *)__str = v8;
      long long v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v17, v8, __str);
      uint64_t v20 = (long long *)v18[3];
      long long v19 = (long long *)v18[4];
      while (1)
      {
        if (v20 == v19) {
          goto LABEL_39;
        }
        if (*((char *)v20 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v20, *((void *)v20 + 1));
        }
        else
        {
          long long v21 = *v20;
          *(void *)&__str[16] = *((void *)v20 + 2);
          *(_OWORD *)__str = v21;
        }
        uint64_t v22 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)*a1 + 42), __str);
        if ((__str[23] & 0x80000000) != 0) {
          operator delete(*(void **)__str);
        }
        if (v22) {
          break;
        }
        uint64_t v20 = (long long *)((char *)v20 + 24);
      }
      if ((v16 | a2) == 1)
      {
        uint64_t v23 = (uint64_t)*a1 + 56;
        *(void *)__str = v8;
        long long v24 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v23, v8, __str);
        if (v24[4] - v24[3] != 24)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Not supported");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        long long v25 = *a1;
        uint64_t v26 = (uint64_t)*a1 + 56;
        *(void *)__str = v8;
        *(void *)buf = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v26, v8, __str)[3];
        uint64_t v27 = (float *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v25 + 41, *(void **)buf, (uint64_t)&std::piecewise_construct, (long long **)buf);
        float v28 = v27[14];
        float v29 = v27[18];
        float v30 = v27[19];
        float v31 = v27[20];
        float v32 = v27[21];
        uint64_t v33 = (uint64_t)*a1 + 56;
        *(void *)__str = v8;
        uint64_t v34 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v33, v8, __str)[3];
        uint64_t v35 = v134;
        if ((unint64_t)v134 >= v135)
        {
          uint64_t v43 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v133, v34);
        }
        else
        {
          if (*(char *)(v34 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v134, *(const std::string::value_type **)v34, *(void *)(v34 + 8));
          }
          else
          {
            long long v36 = *(_OWORD *)v34;
            v134->__r_.__value_.__r.__words[2] = *(void *)(v34 + 16);
            *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
          }
          uint64_t v43 = v35 + 1;
        }
        long long v134 = v43;
        uint64_t v44 = (*(uint64_t (**)(void *))(*v14 + 384))(v14);
        long long v45 = *(_OWORD *)v44;
        long long v46 = *(_OWORD *)(v44 + 32);
        *(_OWORD *)&__str[16] = *(_OWORD *)(v44 + 16);
        long long v124 = v46;
        *(_OWORD *)__str = v45;
        long long v47 = *(_OWORD *)(v44 + 48);
        long long v48 = *(_OWORD *)(v44 + 64);
        long long v49 = *(_OWORD *)(v44 + 96);
        long long v127 = *(_OWORD *)(v44 + 80);
        long long v128 = v49;
        long long v125 = v47;
        long long v126 = v48;
        long long v50 = *(_OWORD *)(v44 + 112);
        long long v51 = *(_OWORD *)(v44 + 128);
        long long v52 = *(_OWORD *)(v44 + 144);
        uint64_t v132 = *(void *)(v44 + 160);
        long long v130 = v51;
        long long v131 = v52;
        long long v129 = v50;
        if (v50)
        {
          uint64_t v100 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v100, "Invalid kernel: use fold_batchnorm first");
          __cxa_throw(v100, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "convolution");
        uint64_t v53 = (uint64_t)*a1 + 56;
        unint64_t v113 = v8;
        unint64_t v54 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v53, v8, &v113);
        uint64_t v118 = 0;
        uint64_t v119 = 0;
        uint64_t v120 = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v118, v54[3], v54[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v54[4] - v54[3]) >> 3));
        uint64_t v55 = (uint64_t)*a1 + 96;
        unint64_t v111 = v8;
        unint64_t v56 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v55, v8, &v111);
        memset(v117, 0, sizeof(v117));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v117, v56[3], v56[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56[4] - v56[3]) >> 3));
        Espresso::sequential_builder::add<Espresso::convolution_uniforms>((uint64_t *)&lpsrc, &v138, (uint64_t)buf, v11 + 16, (uint64_t)__str, v118, v119, v117);
        if (lpsrc)
        {
          if (v57)
          {
            long long v58 = v122;
            if (v122)
            {
              atomic_fetch_add_explicit(&v122->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_63:
              if (v122) {
                nitro::nitro_function::nitro_function(v122);
              }
            }
            int32x2_t v115 = (void **)v117;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v115);
            int32x2_t v115 = (void **)&v118;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v115);
            if (SHIBYTE(v150) < 0)
            {
              operator delete(*(void **)buf);
              if (!v16) {
                goto LABEL_73;
              }
            }
            else if (!v16)
            {
              goto LABEL_73;
            }
            if (a2)
            {
              long long v101 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v101, "fold_transform_params: Only available for VALID convolutions");
              __cxa_throw(v101, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            uint64_t v61 = Espresso::espresso_os_log_subsystem(v59, v60);
            if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl(&dword_1920CB000, v61, OS_LOG_TYPE_ERROR, "fold_transform_params should only be used for VALID convolutions", buf, 2u);
            }

LABEL_73:
            (*(void (**)(void **__return_ptr, void *))(*(void *)v57 + 472))(&lpsrc, v57);
            (*(void (**)(void ***__return_ptr, void *))(*(void *)v57 + 488))(&v115, v57);
            (*(void (**)(unint64_t *__return_ptr, void *))(*v14 + 456))(&v113, v14);
            uint64_t v62 = (Espresso *)(*(void *(**)(unint64_t *__return_ptr, void *))(*v14 + 448))(&v111, v14);
            uint64_t v64 = Espresso::espresso_os_log_subsystem(v62, v63);
            if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134219008;
              *(double *)&buf[4] = v28;
              __int16 v148 = 2048;
              double v149 = v29;
              __int16 v150 = 2048;
              double v151 = v30;
              __int16 v152 = 2048;
              double v153 = v31;
              __int16 v154 = 2048;
              double v155 = v32;
              _os_log_debug_impl(&dword_1920CB000, v64, OS_LOG_TYPE_DEBUG, "[Espresso::fold_transform_params] %f %f %f %f %f\n", buf, 0x34u);
            }

            unint64_t v65 = 0;
            int v66 = lpsrc;
            unint64_t v67 = *((int *)lpsrc + 2);
            unint64_t v68 = v113;
            uint64_t v69 = (char *)lpsrc + 12;
            while (1)
            {
              uint64_t v70 = 0;
              unint64_t v71 = v67;
              do
              {
                v71 *= *(int *)&v69[v70];
                v70 += 4;
              }
              while (v70 != 12);
              if (v71 <= v65) {
                break;
              }
              *(float *)(v66[3] + 4 * v65) = v28 * *(float *)(*(void *)(v68 + 24) + 4 * v65);
              ++v65;
            }
            long long v72 = v115;
            uint64_t v73 = *((unsigned int *)v115 + 2);
            if (v73)
            {
              long long v74 = *(int **)(v111 + 16);
              long long v75 = v115[2];
              do
              {
                int v76 = *v74++;
                *v75++ = v76;
                --v73;
              }
              while (v73);
            }
            long long v77 = (float *)operator new(0x10uLL);
            *long long v77 = v29;
            v77[1] = v30;
            v77[2] = v31;
            v77[3] = v32;
            uint64_t v78 = DWORD2(v124);
            if (SDWORD2(v124) >= 1)
            {
              uint64_t v79 = 0;
              int v80 = HIDWORD(v124);
              if (SHIDWORD(v124) >= 4) {
                LODWORD(v81) = 4;
              }
              else {
                LODWORD(v81) = HIDWORD(v124);
              }
              unint64_t v82 = v113;
              uint64_t v83 = *(void *)(v111 + 16);
              int v84 = (float *)v72[2];
              if ((int)v81 <= 1) {
                uint64_t v81 = 1;
              }
              else {
                uint64_t v81 = v81;
              }
              do
              {
                if (v80 < 1)
                {
                  float v89 = 0.0;
                }
                else
                {
                  uint64_t v85 = 0;
                  int v86 = *(_DWORD *)(v82 + 12) * *(_DWORD *)(v82 + 8);
                  uint64_t v87 = *(void *)(v82 + 24) + 4 * v86 * *(_DWORD *)(v82 + 16) * (int)v79;
                  uint64_t v88 = 4 * v86;
                  float v89 = 0.0;
                  do
                  {
                    if (*((_DWORD *)v66 + 3) * *((_DWORD *)v66 + 2) >= 1)
                    {
                      uint64_t v90 = (float *)v87;
                      uint64_t v91 = (*((_DWORD *)v66 + 3) * *((_DWORD *)v66 + 2));
                      do
                      {
                        float v92 = *v90++;
                        float v89 = v89 + (float)(v92 * v77[v85]);
                        --v91;
                      }
                      while (v91);
                    }
                    ++v85;
                    v87 += v88;
                  }
                  while (v85 != v81);
                }
                v84[v79] = v89 + *(float *)(v83 + 4 * v79);
                ++v79;
              }
              while (v79 != v78);
            }
            v109 = v72;
            uint64_t v110 = v116;
            if (v116) {
              atomic_fetch_add_explicit(&v116->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(void *, void ***))(*(void *)v57 + 392))(v57, &v109);
            if (v110) {
              nitro::nitro_function::nitro_function(v110);
            }
            unint64_t v107 = lpsrc;
            v108 = v122;
            if (v122) {
              atomic_fetch_add_explicit(&v122->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(void *, void **))(*(void *)v57 + 400))(v57, &v107);
            if (v108) {
              nitro::nitro_function::nitro_function(v108);
            }
            operator delete(v77);
            if (v112) {
              nitro::nitro_function::nitro_function(v112);
            }
            if (v114) {
              nitro::nitro_function::nitro_function(v114);
            }
            if (v116) {
              nitro::nitro_function::nitro_function(v116);
            }
            if (v122) {
              nitro::nitro_function::nitro_function(v122);
            }
            if (v58)
            {
              long long v42 = v58;
              goto LABEL_43;
            }
            goto LABEL_44;
          }
        }
        else
        {
          uint64_t v57 = 0;
        }
        long long v58 = 0;
        goto LABEL_63;
      }
LABEL_39:
      uint64_t v37 = *(std::__shared_weak_count **)(v11 + 72);
      v106[0] = *(void *)(v11 + 64);
      v106[1] = v37;
      if (v37) {
        atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v38 = (uint64_t)*a1 + 56;
      *(void *)buf = v8;
      uint64_t v39 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v38, v8, buf);
      memset(v105, 0, sizeof(v105));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v105, v39[3], v39[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39[4] - v39[3]) >> 3));
      uint64_t v40 = (uint64_t)*a1 + 96;
      lpsrc = (void *)v8;
      long long v41 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v40, v8, &lpsrc);
      memset(v104, 0, sizeof(v104));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v104, v41[3], v41[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41[4] - v41[3]) >> 3));
      Espresso::sequential_builder::add_kernel((uint64_t)&v138, v106, v11 + 40, v11 + 16, v105, v104);
      *(void *)__str = v104;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
      *(void *)__str = v105;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
      if (v37)
      {
        long long v42 = v37;
LABEL_43:
        nitro::nitro_function::nitro_function(v42);
      }
LABEL_44:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        *__p.__r_.__value_.__l.__data_ = 0;
        __p.__r_.__value_.__l.__size_ = 0;
        if (!v15) {
          goto LABEL_47;
        }
LABEL_46:
        nitro::nitro_function::nitro_function(v15);
        goto LABEL_47;
      }
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      if (v15) {
        goto LABEL_46;
      }
LABEL_47:
      if (v10) {
        nitro::nitro_function::nitro_function(v10);
      }
      ++v8;
      uint64_t v6 = *a1;
      uint64_t v7 = *((void *)*a1 + 4);
      if (v8 >= (*((void *)*a1 + 5) - v7) >> 4)
      {
        a3 = v102;
        goto LABEL_117;
      }
    }
    int v14 = 0;
LABEL_18:
    uint64_t v15 = 0;
LABEL_19:
    BOOL v16 = 0;
    goto LABEL_20;
  }
LABEL_117:
  Espresso::net::copy_parameters_from(v142, v6);
  Espresso::sequential_builder::build_from_network_shape((Espresso::sequential_builder *)&v138, (const Espresso::net *)((char *)*a1 + 184), a3);
  char v93 = (char *)v133;
  unint64_t v94 = v134;
  if (v133 != v134)
  {
    long long v95 = (void *)(*a3 + 328);
    uint64_t v96 = *a3 + 336;
    do
    {
      if (v93[23] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v93, *((void *)v93 + 1));
      }
      else
      {
        long long v97 = *(_OWORD *)v93;
        *(void *)&__str[16] = *((void *)v93 + 2);
        *(_OWORD *)__str = v97;
      }
      uint64_t v98 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)v95, __str);
      if ((void *)v96 != v98) {
        std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::erase(v95, (uint64_t)v98);
      }
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      v93 += 24;
    }
    while (v93 != (char *)v94);
  }
  *(void *)__str = &v133;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v146);
  if (v145) {
    nitro::nitro_function::nitro_function(v145);
  }
  if (v144) {
    nitro::nitro_function::nitro_function(v144);
  }
  if (v143) {
    nitro::nitro_function::nitro_function(v143);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v140, v140[1]);
  if (v139) {
    nitro::nitro_function::nitro_function(v139);
  }
}

void sub_1928AD4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void **a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (v71) {
    nitro::nitro_function::nitro_function(v71);
  }
  if (v70) {
    nitro::nitro_function::nitro_function(v70);
  }
  a41 = (void **)&a63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a41);
  Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)&a70);
  _Unwind_Resume(a1);
}

void Espresso::fold_concat(Espresso::net **a1@<X0>, Espresso::net **a2@<X8>)
{
  uint64_t v2 = a1;
  v80[0] = 0;
  id v3 = *a1;
  uint64_t v4 = *((void *)*a1 + 4);
  if (*((void *)*a1 + 5) != v4)
  {
    unint64_t v65 = a2;
    int v5 = 0;
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = (uint64_t *)(v4 + 16 * v6);
      uint64_t v9 = *v7;
      unint64_t v8 = (std::__shared_weak_count *)v7[1];
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v10 = *(const void **)(v9 + 64);
      if (v10)
      {
        unint64_t v67 = v8;
        {
          uint64_t v11 = *(std::__shared_weak_count **)(v9 + 72);
          if (v11)
          {
            atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
            nitro::nitro_function::nitro_function(v11);
          }
          uint64_t v12 = (std::__shared_weak_count *)v2[1];
          v75[0] = *v2;
          v75[1] = v12;
          if (v12) {
            atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::network_optimization_graph::network_optimization_graph(&v76, (uint64_t)v75);
          if (v12) {
            nitro::nitro_function::nitro_function(v12);
          }
          std::string __p = 0;
          uint64_t v73 = 0;
          unint64_t v74 = 0;
          uint64_t v13 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v79, v5, v80);
          int v14 = (int *)v13[5];
          uint64_t v15 = (int *)v13[6];
          if (v14 != v15)
          {
            __int16 v16 = 0;
            while (1)
            {
              unint64_t v17 = *v14;
              long long v18 = *v2;
              long long v19 = *(std::__shared_weak_count **)(*((void *)*v2 + 4) + 16 * v17 + 8);
              if (v19)
              {
                atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
                long long v18 = *v2;
              }
              v70.__r_.__value_.__r.__words[0] = v17;
              uint64_t v20 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v18 + 96, v17, &v70)[3];
              if (*((char *)v20 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v71, *(const std::string::value_type **)v20, *((void *)v20 + 1));
              }
              else
              {
                long long v21 = *v20;
                v71.__r_.__value_.__r.__words[2] = *((void *)v20 + 2);
                *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v21;
              }
              uint64_t v22 = *v2;
              if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)*v2 + 24), &v71))
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                std::runtime_error::runtime_error(exception, &v70);
                __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
              int v23 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v22 + 23, &v71, (long long **)&v70)+ 16);
              long long v24 = v73;
              if ((unint64_t)v73 >= v74)
              {
                uint64_t v26 = (char *)__p;
                uint64_t v27 = (v73 - (unsigned char *)__p) >> 2;
                unint64_t v28 = v27 + 1;
                if ((unint64_t)(v27 + 1) >> 62) {
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v29 = v74 - (void)__p;
                if ((uint64_t)(v74 - (void)__p) >> 1 > v28) {
                  unint64_t v28 = v29 >> 1;
                }
                if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v30 = v28;
                }
                if (v30) {
                  unint64_t v30 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v30);
                }
                else {
                  uint64_t v31 = 0;
                }
                float v32 = (char *)(v30 + 4 * v27);
                *(_DWORD *)float v32 = v23;
                long long v25 = v32 + 4;
                while (v24 != v26)
                {
                  int v33 = *((_DWORD *)v24 - 1);
                  v24 -= 4;
                  *((_DWORD *)v32 - 1) = v33;
                  v32 -= 4;
                }
                std::string __p = v32;
                unint64_t v74 = v30 + 4 * v31;
                if (v26) {
                  operator delete(v26);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v73 = v23;
                long long v25 = v24 + 4;
              }
              uint64_t v73 = v25;
              if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
                break;
              }
              if (v19) {
                goto LABEL_39;
              }
LABEL_40:
              v16 += v23;
              if (++v14 == v15)
              {
                int v5 = v80[0];
                goto LABEL_45;
              }
            }
            operator delete(v71.__r_.__value_.__l.__data_);
            if (!v19) {
              goto LABEL_40;
            }
LABEL_39:
            nitro::nitro_function::nitro_function(v19);
            goto LABEL_40;
          }
          __int16 v16 = 0;
LABEL_45:
          int v66 = v5;
          uint64_t v34 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v79, v5, v80);
          uint64_t v35 = v34[5];
          uint64_t v69 = v34[6];
          if (v35 != v69)
          {
            uint64_t v36 = 0;
            __int16 v37 = 0;
            do
            {
              uint64_t v38 = v35;
              uint64_t v39 = (uint64_t *)(*((void *)*v2 + 4) + 16 * *(int *)((char *)v35 + v36));
              uint64_t v40 = *v39;
              long long v41 = (std::__shared_weak_count *)v39[1];
              if (v41) {
                atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              long long v42 = *(const void **)(v40 + 64);
              if (!v42)
              {
LABEL_83:
                id v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                std::runtime_error::runtime_error(v63, &v71);
                __cxa_throw(v63, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              if (v43)
              {
                uint64_t v44 = v43;
                long long v45 = *(std::__shared_weak_count **)(v40 + 72);
                if (v45) {
                  atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                *(_WORD *)((*(uint64_t (**)(void *))(*(void *)v43 + 384))(v43) + 130) = v16;
                *(_WORD *)((*(uint64_t (**)(void *))(*(void *)v44 + 384))(v44) + 126) = v37;
                int v46 = *(_DWORD *)((char *)__p + v36);
                if (!v45) {
                  goto LABEL_55;
                }
              }
              else
              {
                if (!v47) {
                  goto LABEL_83;
                }
                long long v48 = v47;
                long long v45 = *(std::__shared_weak_count **)(v40 + 72);
                if (v45) {
                  atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                *(_WORD *)((*(uint64_t (**)(void *))(*(void *)v47 + 384))(v47) + 66) = v16;
                *(_WORD *)((*(uint64_t (**)(void *))(*(void *)v48 + 384))(v48) + 62) = v37;
                long long v49 = (char *)__p;
                int v50 = *(_DWORD *)((char *)__p + v36);
                *(_WORD *)((*(uint64_t (**)(void *))(*(void *)v48 + 384))(v48) + 68) = v50;
                int v51 = *(_DWORD *)&v49[v36];
                *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v48 + 384))(v48) + 104) = v51;
                int v46 = *(_DWORD *)&v49[v36];
                if (!v45) {
                  goto LABEL_55;
                }
              }
              nitro::nitro_function::nitro_function(v45);
LABEL_55:
              if (v41) {
                nitro::nitro_function::nitro_function(v41);
              }
              v37 += v46;
              v36 += 4;
              uint64_t v35 = v38;
              uint64_t v2 = a1;
            }
            while ((uint64_t *)((char *)v38 + v36) != v69);
          }
          int v52 = v66;
          uint64_t v53 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v79, v66, v80);
          unint64_t v54 = (int *)v53[5];
          uint64_t v55 = (int *)v53[6];
          if (v54 != v55)
          {
            do
            {
              unint64_t v56 = *v54;
              uint64_t v57 = *v2;
              long long v58 = *(std::__shared_weak_count **)(*((void *)*v2 + 4) + 16 * v56 + 8);
              if (v58)
              {
                atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
                uint64_t v57 = *v2;
              }
              v71.__r_.__value_.__r.__words[0] = v80[0];
              int v59 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v57 + 96, v80[0], &v71);
              uint64_t v60 = (uint64_t)*v2 + 96;
              v70.__r_.__value_.__r.__words[0] = v56;
              uint64_t v61 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v60, v56, &v70);
              if (v61 != v59) {
                std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v61 + 3), (std::string *)v59[3], (std::string *)v59[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v59[4] - v59[3]) >> 3));
              }
              if (v58) {
                nitro::nitro_function::nitro_function(v58);
              }
              ++v54;
            }
            while (v54 != v55);
            int v52 = v80[0];
          }
          Espresso::net::remove_layer(*v2, v52);
          int v5 = v52 - 1;
          v80[0] = v5;
          if (__p) {
            operator delete(__p);
          }
          std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v79[1]);
          std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v78);
          if (v77) {
            nitro::nitro_function::nitro_function(v77);
          }
        }
        unint64_t v8 = v67;
      }
      if (v8) {
        nitro::nitro_function::nitro_function(v8);
      }
      v80[0] = ++v5;
      uint64_t v6 = v5;
      id v3 = *v2;
      uint64_t v4 = *((void *)*v2 + 4);
    }
    while (v5 < (unint64_t)((*((void *)*v2 + 5) - v4) >> 4));
    a2 = v65;
  }
  uint64_t v62 = v2[1];
  *a2 = v3;
  a2[1] = v62;
  *uint64_t v2 = 0;
  v2[1] = 0;
}

void sub_1928ADE20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (__p) {
    operator delete(__p);
  }
  Espresso::network_optimization_graph::~network_optimization_graph((Espresso::network_optimization_graph *)&a33);
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  _Unwind_Resume(a1);
}

void Espresso::auto_add_auto_temporal_smoothing_before_softmaxes(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  id v3 = a1;
  unint64_t v62 = 0;
  uint64_t v63 = a2;
  int64x2_t v61 = 0uLL;
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(v5 + 32);
  if (*(void *)(v5 + 40) == v6) {
    goto LABEL_81;
  }
  unint64_t v7 = 0;
  long long v48 = v3;
  do
  {
    unint64_t v8 = (uint64_t *)(v6 + 16 * v7);
    uint64_t v10 = *v8;
    uint64_t v9 = (std::__shared_weak_count *)v8[1];
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v5 = *v3;
    }
    long long v58 = (int64x2_t *)v7;
    uint64_t v11 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v5 + 56, v7, &v58);
    uint64_t v12 = *(const void **)(v10 + 64);
    if (v12
    {
      uint64_t v13 = *(std::__shared_weak_count **)(v10 + 72);
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      LODWORD(v58) = 0;
      long long v59 = 0u;
      memset(v60, 0, sizeof(v60));
      std::vector<std::string>::vector(&v57, 0xAAAAAAAAAAAAAAABLL * (((char *)v11[1].__end_ - (char *)v11[1].__begin_) >> 3));
      long long v49 = v13;
      int v50 = v9;
      std::vector<int>::pointer begin = v11[1].__begin_;
      if (v11[1].__end_ != begin)
      {
        uint64_t v15 = 0;
        unint64_t v16 = 0;
        do
        {
          p_data = (const void **)&begin[v15].__r_.__value_.__l.__data_;
          size_t v18 = HIBYTE(begin[v15].__r_.__value_.__r.__words[2]);
          if ((v18 & 0x80u) == 0) {
            size_t v19 = v18;
          }
          else {
            size_t v19 = (size_t)p_data[1];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)__p, v19 + 12);
          if (v56 >= 0) {
            uint64_t v20 = __p;
          }
          else {
            uint64_t v20 = (void **)__p[0];
          }
          if (v19)
          {
            if (*((char *)p_data + 23) >= 0) {
              long long v21 = p_data;
            }
            else {
              long long v21 = *p_data;
            }
            memmove(v20, v21, v19);
          }
          strcpy((char *)v20 + v19, "__tx__smooth");
          uint64_t v22 = &v57.__begin_[v15];
          if (SHIBYTE(v57.__begin_[v15].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v22->__r_.__value_.__l.__data_);
          }
          long long v23 = *(_OWORD *)__p;
          v22->__r_.__value_.__r.__words[2] = v56;
          *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
          ++v16;
          std::vector<int>::pointer begin = v11[1].__begin_;
          ++v15;
        }
        while (0xAAAAAAAAAAAAAAABLL * (((char *)v11[1].__end_ - (char *)begin) >> 3) > v16);
      }
      id v3 = v48;
      if (v7)
      {
        uint64_t v24 = *(void *)(*(void *)(*v48 + 32) + 16 * (v7 - 1));
        long long v25 = *(const void **)(v24 + 64);
        if (v25)
        {
          {
            uint64_t v26 = *(std::__shared_weak_count **)(v24 + 72);
            if (v26)
            {
              atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
              nitro::nitro_function::nitro_function(v26);
            }
            __p[0] = &v57;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            uint64_t v27 = v49;
            uint64_t v9 = v50;
LABEL_72:
            v57.__begin_ = (std::vector<std::string>::pointer)((char *)&v60[1] + 8);
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
            v57.__begin_ = (std::vector<std::string>::pointer)v60;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
            if (*((void *)&v59 + 1)) {
              nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v59 + 1));
            }
            if (v27) {
              nitro::nitro_function::nitro_function(v27);
            }
            goto LABEL_76;
          }
        }
      }
      Espresso::abstract_engine_factory::shared(&v51);
      uint64_t v28 = v51;
      uint64_t v29 = *v48;
      std::string::basic_string[abi:ne180100]<0>(__p, "prediction_smoothing");
      Espresso::abstract_engine_factory::make_kernel_priv(v28, v29 + 16, (uint64_t)__p, (uint64_t)&v63, (int *)(v10 + 8));
      if (lpsrc)
      {
        if (v30)
        {
          uint64_t v31 = v54;
          if (!v54)
          {
LABEL_39:
            if (SHIBYTE(v56) < 0) {
              operator delete(__p[0]);
            }
            if (v52) {
              nitro::nitro_function::nitro_function(v52);
            }
            long long v47 = v31;
            float v32 = (char *)operator new(0xF8uLL);
            *((void *)v32 + 1) = 0;
            *((void *)v32 + 2) = 0;
            *(void *)float v32 = &unk_1EE389DF0;
            int v33 = v32 + 24;
            *((void *)v32 + 3) = &unk_1EE36C758;
            *(_OWORD *)(v32 + 40) = 0u;
            *(_OWORD *)(v32 + 56) = 0u;
            *(_OWORD *)(v32 + 72) = 0u;
            *(_OWORD *)(v32 + 88) = 0u;
            *(_OWORD *)(v32 + 104) = 0u;
            *(_OWORD *)(v32 + 120) = 0u;
            *(_OWORD *)(v32 + 136) = 0u;
            *(_OWORD *)(v32 + 152) = 0u;
            *(_OWORD *)(v32 + 161) = 0u;
            *((_OWORD *)v32 + 13) = 0u;
            *((_OWORD *)v32 + 14) = 0u;
            *((void *)v32 + 30) = 0;
            uint64_t v34 = (std::__shared_weak_count *)*((void *)&v59 + 1);
            *(void *)&long long v59 = v32 + 24;
            *((void *)&v59 + 1) = v32;
            if (v34)
            {
              nitro::nitro_function::nitro_function(v34);
              int v33 = (char *)v59;
            }
            if (v31) {
              atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v35 = (std::__shared_weak_count *)*((void *)v33 + 9);
            *((void *)v33 + 8) = v30;
            *((void *)v33 + 9) = v31;
            if (v35) {
              nitro::nitro_function::nitro_function(v35);
            }
            if (*(char *)(v10 + 39) >= 0) {
              size_t v36 = *(unsigned __int8 *)(v10 + 39);
            }
            else {
              size_t v36 = *(void *)(v10 + 24);
            }
            std::string::basic_string[abi:ne180100]((uint64_t)__p, v36 + 12);
            if (v56 >= 0) {
              __int16 v37 = __p;
            }
            else {
              __int16 v37 = (void **)__p[0];
            }
            if (v36)
            {
              if (*(char *)(v10 + 39) >= 0) {
                uint64_t v38 = (const void *)(v10 + 16);
              }
              else {
                uint64_t v38 = *(const void **)(v10 + 16);
              }
              memmove(v37, v38, v36);
            }
            strcpy((char *)v37 + v36, "__tx__smooth");
            uint64_t v39 = v59;
            uint64_t v40 = v59 + 16;
            if (*(char *)(v59 + 39) < 0)
            {
              operator delete(*(void **)v40);
              uint64_t v39 = v59;
            }
            int64_t v41 = v56;
            *(_OWORD *)uint64_t v40 = *(_OWORD *)__p;
            *(void *)(v40 + 16) = v41;
            MEMORY[0x192FF0F50](v39 + 40, "prediction_smoothing");
            id v3 = v48;
            *(void *)(v59 + 8) = *(void *)(v10 + 8);
            LODWORD(v58) = v7 - 1;
            if (v60 != (_OWORD *)&v11[1]) {
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v60, v11[1].__begin_, v11[1].__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v11[1].__end_ - (char *)v11[1].__begin_) >> 3));
            }
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v60[1] + 8, v57.__begin_, v57.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v57.__end_ - (char *)v57.__begin_) >> 3));
            if (&v11[1] != &v57) {
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v11[1], v57.__begin_, v57.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v57.__end_ - (char *)v57.__begin_) >> 3));
            }
            if (v47) {
              nitro::nitro_function::nitro_function(v47);
            }
            __p[0] = &v57;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            uint64_t v42 = v61.i64[1];
            uint64_t v27 = v49;
            uint64_t v9 = v50;
            if (v61.i64[1] >= v62)
            {
              uint64_t v43 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(&v61, (uint64_t)&v58);
            }
            else
            {
              std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(v61.i64[1], (uint64_t)&v58);
              uint64_t v43 = v42 + 72;
            }
            v61.i64[1] = v43;
            goto LABEL_72;
          }
          atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_37:
          if (v54) {
            nitro::nitro_function::nitro_function(v54);
          }
          goto LABEL_39;
        }
      }
      else
      {
        unint64_t v30 = 0;
      }
      uint64_t v31 = 0;
      goto LABEL_37;
    }
LABEL_76:
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
    ++v7;
    uint64_t v5 = *v3;
    uint64_t v6 = *(void *)(*v3 + 32);
  }
  while (v7 < (*(void *)(*v3 + 40) - v6) >> 4);
  if (v61.i64[1] != v61.i64[0])
  {
    Espresso::net::insert_layers(v5, (uint64_t **)&v61);
    uint64_t v44 = (Espresso *)*v3;
    long long v45 = (Espresso::net *)(*v3 + 184);
    *((unsigned char *)v44 + 180) = 0;
    Espresso::shape_network_recursive(v44, v45, 0, 0);
    uint64_t v5 = *v3;
  }
LABEL_81:
  uint64_t v46 = v3[1];
  *a3 = v5;
  a3[1] = v46;
  uint64_t *v3 = 0;
  v3[1] = 0;
  long long v58 = &v61;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
}

void sub_1928AE5C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  a30 = v30 - 120;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  _Unwind_Resume(a1);
}

void Espresso::add_context_transfer_before(const Espresso::net **a1@<X0>, unsigned int a2@<W1>, _OWORD *a3@<X8>)
{
  *((void *)&v97 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a1;
  unint64_t v7 = (std::__shared_weak_count *)*((void *)*a1 + 3);
  v70[0] = *((void *)*a1 + 2);
  v70[1] = (uint64_t)v7;
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = *a1;
  }
  int v8 = *(_DWORD *)(**((void **)v6 + 4) + 12);
  v69[0] = 0;
  v69[1] = 0;
  Espresso::sequential_builder::sequential_builder((uint64_t)&v71, v70, v8, v69);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  uint64_t v9 = (uint64_t)*a1 + 56;
  *(void *)&long long v90 = (int)a2;
  uint64_t v10 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, (int)a2, &v90)[3];
  if (*((char *)v10 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v68.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
    *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v11;
  }
  uint64_t v12 = *a1;
  uint64_t v13 = *((void *)*a1 + 4);
  if (*((void *)*a1 + 5) != v13)
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    uint64_t v54 = a2;
    uint64_t v16 = 8;
    while (1)
    {
      unint64_t v17 = *(std::__shared_weak_count **)(v13 + v16);
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v54 == v15)
      {
        long long v90 = 0u;
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = 0u;
        std::string::basic_string[abi:ne180100]<0>(&v65, "context_transfer");
        if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = HIBYTE(v68.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t size = v68.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 4);
        if (v64 >= 0) {
          size_t v19 = __p;
        }
        else {
          size_t v19 = (void **)__p[0];
        }
        if (size)
        {
          if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v20 = &v68;
          }
          else {
            uint64_t v20 = (std::string *)v68.__r_.__value_.__r.__words[0];
          }
          memmove(v19, v20, size);
        }
        strcpy((char *)v19 + size, "_cpu");
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v96, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
        }
        else {
          std::string v96 = v68;
        }
        uint64_t v60 = 0;
        int64x2_t v61 = 0;
        unint64_t v62 = 0;
        v86.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60;
        v86.__r_.__value_.__s.__data_[8] = 0;
        uint64_t v60 = (std::string *)operator new(0x18uLL);
        int64x2_t v61 = v60;
        unint64_t v62 = v60 + 1;
        int64x2_t v61 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v62, (long long *)&v96, &v97, v60);
        if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v21 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v21 = v68.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v94, v21 + 4);
        if (v95 >= 0) {
          uint64_t v22 = &v94;
        }
        else {
          uint64_t v22 = (long long *)v94;
        }
        if (v21)
        {
          if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v23 = &v68;
          }
          else {
            long long v23 = (std::string *)v68.__r_.__value_.__r.__words[0];
          }
          memmove(v22, v23, v21);
        }
        strcpy((char *)v22 + v21, "_cpu");
        std::vector<std::string> v57 = 0;
        long long v58 = 0;
        long long v59 = 0;
        v86.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
        v86.__r_.__value_.__s.__data_[8] = 0;
        std::vector<std::string> v57 = (std::string *)operator new(0x18uLL);
        long long v58 = v57;
        long long v59 = v57 + 1;
        long long v58 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v59, &v94, (long long *)&v96, v57);
        uint64_t v24 = v77;
        LODWORD(v86.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v79 + 8))();
        Espresso::abstract_engine_factory::make_kernel_priv(v24, (uint64_t)&v79, (uint64_t)&v65, (uint64_t)&v90, (int *)&v86);
        long long v25 = v87;
        if (!v87
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          std::runtime_error::runtime_error(exception, &v86);
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        uint64_t v27 = v26;
        uint64_t v28 = v88;
        if (v88)
        {
          atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v29 = v88;
          int v84 = v25;
          uint64_t v85 = v88;
          if (v88) {
            atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          uint64_t v29 = 0;
          int v84 = v25;
          uint64_t v85 = 0;
        }
        memset(&v86, 0, sizeof(v86));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v86, (uint64_t)v60, (uint64_t)v61, 0xAAAAAAAAAAAAAAABLL * (((char *)v61 - (char *)v60) >> 3));
        long long v82 = 0uLL;
        uint64_t v83 = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v82, (uint64_t)v57, (uint64_t)v58, 0xAAAAAAAAAAAAAAABLL * (((char *)v58 - (char *)v57) >> 3));
        Espresso::sequential_builder::add_kernel((uint64_t)&v71, &v84, (uint64_t)&v65, (uint64_t)__p, (std::string **)&v86, (std::string **)&v82);
        float v89 = (std::string *)&v82;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
        float v89 = &v86;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
        if (v29) {
          nitro::nitro_function::nitro_function(v29);
        }
        if (v71) {
          Espresso::sequential_builder::add_shape_from_kernel(&v71, (uint64_t)v87, (long long **)&v60, (uint64_t *)&v57);
        }
        if (v88) {
          nitro::nitro_function::nitro_function(v88);
        }
        v86.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v86);
        if (v95 < 0) {
          operator delete((void *)v94);
        }
        v86.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v86);
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v96.__r_.__value_.__l.__data_);
        }
        if (v64 < 0) {
          operator delete(__p[0]);
        }
        if (v67 < 0) {
          operator delete(v65);
        }
        LODWORD(v82) = 0;
        Espresso::create_context((int *)&v82, &v86);
        long long v30 = *(_OWORD *)&v86.__r_.__value_.__l.__data_;
        *(_OWORD *)&v86.__r_.__value_.__l.__data_ = 0uLL;
        uint64_t v31 = (std::__shared_weak_count *)*((void *)v27 + 40);
        *(_OWORD *)(v27 + 312) = v30;
        if (v31)
        {
          nitro::nitro_function::nitro_function(v31);
          if (v86.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v86.__r_.__value_.__l.__size_);
          }
        }
        uint64_t v32 = *((void *)v27 + 39);
        int v33 = (std::__shared_weak_count *)*((void *)*a1 + 3);
        uint64_t v55 = *((void *)*a1 + 2);
        int64_t v56 = v33;
        if (v33) {
          atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v32 + 112))(v32, &v55);
        if (v56) {
          nitro::nitro_function::nitro_function(v56);
        }
        uint64_t v35 = *((void *)*a1 + 2);
        uint64_t v34 = *((void *)*a1 + 3);
        if (v34) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
        }
        size_t v36 = (std::__shared_weak_count *)*((void *)v27 + 42);
        *((void *)v27 + 41) = v35;
        *((void *)v27 + 42) = v34;
        if (v36) {
          nitro::nitro_function::nitro_function(v36);
        }
        if (v28) {
          nitro::nitro_function::nitro_function(v28);
        }
      }
      uint64_t v38 = *a1;
      __int16 v37 = (std::__shared_weak_count *)a1[1];
      if (v37) {
        atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v39 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v39 = v68.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v82, v39 + 4);
      if (v83 >= 0) {
        uint64_t v40 = &v82;
      }
      else {
        uint64_t v40 = (long long *)v82;
      }
      if (v39)
      {
        if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int64_t v41 = &v68;
        }
        else {
          int64_t v41 = (std::string *)v68.__r_.__value_.__r.__words[0];
        }
        memmove(v40, v41, v39);
      }
      strcpy((char *)v40 + v39, "_cpu");
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v90, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v90 = *(_OWORD *)&v68.__r_.__value_.__l.__data_;
        v91.__r_.__value_.__r.__words[0] = v68.__r_.__value_.__r.__words[2];
      }
      *(_OWORD *)&v91.__r_.__value_.__r.__words[1] = v82;
      uint64_t v92 = v83;
      uint64_t v83 = 0;
      long long v82 = 0uLL;
      memset(&v86, 0, sizeof(v86));
      unint64_t v65 = &v86;
      char v66 = 0;
      v86.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
      v86.__r_.__value_.__l.__size_ = v86.__r_.__value_.__r.__words[0];
      v86.__r_.__value_.__r.__words[2] = v86.__r_.__value_.__r.__words[0] + 48;
      v86.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>((uint64_t)&v86.__r_.__value_.__r.__words[2], (uint64_t)&v90, (uint64_t)&v93, (uint64_t)v86.__r_.__value_.__l.__data_);
      Espresso::sequential_builder::copy_layer_from_network((uint64_t)&v71, v38, v14 >> 32, (const std::string **)&v86);
      unint64_t v65 = &v86;
      std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
      if (SHIBYTE(v92) < 0) {
        operator delete((void *)v91.__r_.__value_.__l.__size_);
      }
      if (v91.__r_.__value_.__s.__data_[7] < 0) {
        operator delete((void *)v90);
      }
      if (SHIBYTE(v83) < 0) {
        break;
      }
      if (v37) {
        goto LABEL_93;
      }
LABEL_94:
      if (v17) {
        nitro::nitro_function::nitro_function(v17);
      }
      ++v15;
      uint64_t v12 = *a1;
      uint64_t v13 = *((void *)*a1 + 4);
      v14 += 0x100000000;
      v16 += 16;
      if (v15 >= (*((void *)*a1 + 5) - v13) >> 4) {
        goto LABEL_100;
      }
    }
    operator delete((void *)v82);
    if (!v37) {
      goto LABEL_94;
    }
LABEL_93:
    nitro::nitro_function::nitro_function(v37);
    goto LABEL_94;
  }
LABEL_100:
  uint64_t v42 = (std::__shared_weak_count *)a1[1];
  uint64_t v43 = v12;
  if (v42)
  {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v43 = *a1;
  }
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)&v90, (long long **)v43 + 23);
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)&v91.__r_.__value_.__l.__size_, (long long **)v43 + 26);
  v86.__r_.__value_.__r.__words[0] = (std::string::size_type)&v68;
  uint64_t v44 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v90, &v68, (long long **)&v86);
  if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v45 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v45 = v68.__r_.__value_.__l.__size_;
  }
  uint64_t v46 = &v86;
  std::string::basic_string[abi:ne180100]((uint64_t)&v86, v45 + 4);
  if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v46 = (std::string *)v86.__r_.__value_.__r.__words[0];
  }
  if (v45)
  {
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v47 = &v68;
    }
    else {
      long long v47 = (std::string *)v68.__r_.__value_.__r.__words[0];
    }
    memmove(v46, v47, v45);
  }
  strcpy((char *)v46 + v45, "_cpu");
  *(void *)&long long v82 = &v86;
  long long v48 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v90, &v86, (_OWORD **)&v82);
  long long v49 = *(_OWORD *)(v44 + 56);
  long long v50 = *(_OWORD *)(v44 + 72);
  *((void *)v48 + 11) = *((void *)v44 + 11);
  *(_OWORD *)((char *)v48 + 72) = v50;
  *(_OWORD *)((char *)v48 + 56) = v49;
  if (v48 != (_OWORD *)v44) {
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v48 + 96, *((char **)v44 + 12), *((void *)v44 + 13), (uint64_t)(*((void *)v44 + 13) - *((void *)v44 + 12)) >> 2);
  }
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v86.__r_.__value_.__l.__data_);
  }
  Espresso::net::copy_parameters_from(v75, v12);
  Espresso::sequential_builder::build_from_network_shape((Espresso::sequential_builder *)&v71, (const Espresso::network_shape *)&v90, &v86);
  long long v51 = *(_OWORD *)&v86.__r_.__value_.__l.__data_;
  int v52 = (std::__shared_weak_count *)a1[1];
  *(_OWORD *)a1 = *(_OWORD *)&v86.__r_.__value_.__l.__data_;
  if (v52)
  {
    nitro::nitro_function::nitro_function(v52);
    long long v51 = *(_OWORD *)a1;
  }
  *a3 = v51;
  *a1 = 0;
  a1[1] = 0;
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v91.__r_.__value_.__l.__size_, (char *)v91.__r_.__value_.__r.__words[2]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v90, *((char **)&v90 + 1));
  if (v42) {
    nitro::nitro_function::nitro_function(v42);
  }
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v81);
  if (v80) {
    nitro::nitro_function::nitro_function(v80);
  }
  if (v78) {
    nitro::nitro_function::nitro_function(v78);
  }
  if (v76) {
    nitro::nitro_function::nitro_function(v76);
  }
  if (v74 < 0) {
    operator delete(v73[5]);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v73, v73[1]);
  if (v72) {
    nitro::nitro_function::nitro_function(v72);
  }
}

void sub_1928AF074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  Espresso::network_shape::~network_shape((char **)(v45 - 208));
  if (v44) {
    nitro::nitro_function::nitro_function(v44);
  }
  if (a38 < 0) {
    operator delete(__p);
  }
  Espresso::sequential_builder::~sequential_builder((Espresso::sequential_builder *)&a44);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      uint64_t v9 = (long long *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a4 + v7), *(const std::string::value_type **)v9, *((void *)v9 + 1));
      }
      else
      {
        long long v10 = *v9;
        *(void *)(v8 + 16) = *((void *)v9 + 2);
        *(_OWORD *)uint64_t v8 = v10;
      }
      long long v11 = (std::string *)(a4 + v7 + 24);
      uint64_t v12 = (const std::string::value_type **)(a2 + v7 + 24);
      if (*(char *)(a2 + v7 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *v12, *(void *)(a2 + v7 + 32));
      }
      else
      {
        long long v13 = *(_OWORD *)v12;
        *(void *)(a4 + v7 + 40) = *(void *)(a2 + v7 + 40);
        *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
      }
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1928AF38C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  while (v2 != v1)
  {
    v2 -= 48;
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v2);
  }
  _Unwind_Resume(exception_object);
}

void ReadOnlyFile::readOneString(uint64_t a1, std::string *this)
{
  uint64_t v2 = *(int *)(a1 + 72);
  id v3 = (unsigned int *)(*(void *)a1 + v2);
  if ((unint64_t)v3 > *(void *)a1 + *(void *)(a1 + 8) - 4
    || (std::string::size_type v5 = *v3, *(_DWORD *)(a1 + 72) = v2 + 4, v5 >= 0x2711)
    || !v5)
  {
    exitFramework(24);
  }
  std::string::resize(this, v5, 0);
  if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v7 = this;
  }
  else {
    uint64_t v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  do
  {
    uint64_t v8 = *(int *)(a1 + 72);
    uint64_t v9 = (std::string::value_type *)(*(void *)a1 + v8);
    if ((unint64_t)v9 > *(void *)a1 + *(void *)(a1 + 8) - 1) {
      exitFramework(23);
    }
    std::string::value_type v10 = *v9;
    *(_DWORD *)(a1 + 72) = v8 + 1;
    v7->__r_.__value_.__s.__data_[0] = v10;
    uint64_t v7 = (std::string *)((char *)v7 + 1);
    --v5;
  }
  while (v5);
}

float *onlineStdMeanVar(float *result, float *a2, float *a3, float *a4, float *a5, float *a6, int *a7, int a8)
{
  if (a8 <= 0)
  {
    int v9 = 0;
    *a5 = 3.4028e38;
    *a6 = 1.1755e-38;
    float v19 = 0.0;
    float v20 = -0.0;
  }
  else
  {
    uint64_t v8 = 0;
    int v9 = 0;
    uint64_t v10 = a8;
    double v11 = 0.0;
    double v12 = 0.0;
    do
    {
      float v13 = result[v8++];
      double v14 = v13 - v11;
      double v11 = v11 + v14 / (double)(int)v8;
      double v12 = v12 + v14 * (v13 - v11);
      int v15 = v13 >= -0.0078125;
      if (v13 > 0.0078125) {
        int v15 = 0;
      }
      v9 += v15;
    }
    while (a8 != v8);
    *a5 = 3.4028e38;
    *a6 = 1.1755e-38;
    float v16 = *a5;
    float v17 = 1.1755e-38;
    do
    {
      float v18 = *result;
      if (*result < v16)
      {
        *a5 = v18;
        float v16 = v18;
        float v18 = *result;
        float v17 = *a6;
      }
      if (v18 > v17)
      {
        *a6 = v18;
        float v16 = *a5;
        float v17 = v18;
      }
      ++result;
      --v10;
    }
    while (v10);
    float v19 = v11;
    float v20 = v12 / (double)(a8 - 1);
  }
  *a4 = v20;
  *a3 = sqrtf(v20);
  *a2 = v19;
  *a7 = v9;
  return result;
}

void applyForwardActivation(uint64_t *a1, uint64_t *a2, int a3, int a4, int a5)
{
  if (a3 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v25 = a4;
    uint64_t v11 = a4;
    size_t v12 = 4 * a4;
    uint64_t v13 = a3;
    do
    {
      uint64_t v14 = *a1;
      int v15 = (float *)(*a1 + 4 * v10 * v11);
      uint64_t v26 = v15;
      uint64_t v16 = *a2;
      float v17 = (void *)(*a2 + 4 * v10 * v11);
      switch(a5)
      {
        case 0:
          memmove(v15, v17, v12);
          break;
        case 1:
          VVector<float>::ffuncV(v15, (float *)v17, a4);
          break;
        case 2:
          int v27 = a4;
          vvtanhf(v15, (const float *)v17, &v27);
          break;
        case 3:
          VVector<float>::gfunc2V(&v26, (const float *)v17, a4);
          break;
        case 4:
          if (a4 >= 1)
          {
            uint64_t v18 = v25;
            do
            {
              float v19 = *(float *)(v16 + v9);
              if (v19 < 0.0) {
                float v19 = 0.0;
              }
              *(float *)(v14 + v9) = v19;
              v14 += 4;
              v16 += 4;
              --v18;
            }
            while (v18);
          }
          break;
        case 5:
          if (a4 >= 1)
          {
            float v20 = (float *)(v14 + v9);
            size_t v21 = (float *)(v16 + v9);
            uint64_t v22 = v25;
            do
            {
              float v23 = *v21 * 0.2 + 0.5;
              *float v20 = v23;
              float v24 = 0.0;
              if (v23 < 0.0 || (float v24 = 1.0, v23 > 1.0)) {
                *float v20 = v24;
              }
              ++v20;
              ++v21;
              --v22;
            }
            while (v22);
          }
          break;
        default:
          exitFramework(41);
      }
      ++v10;
      v9 += v12;
    }
    while (v10 != v13);
  }
}

void VVector<float>::ffuncV(float *a1, float *a2, int a3)
{
  uint64_t v4 = a1;
  if ((a1 & 0xF) != 0)
  {
    if (a3 >= 1)
    {
      uint64_t v5 = a3;
      do
      {
        float v6 = *a2++;
        *v4++ = 1.0 / (float)(expf(-v6) + 1.0);
        --v5;
      }
      while (v5);
    }
  }
  else if (a3 >= -2)
  {
    int v7 = a3 - 1;
    if (a3 < 1) {
      int v7 = a3 + 2;
    }
    int v8 = (v7 >> 2) + 1;
    __asm { FMOV            V0.4S, #1.0 }
    float32x4_t v16 = _Q0;
    do
    {
      float32x4_t v14 = *(float32x4_t *)a2;
      a2 += 4;
      *(double *)v15.i64 = MEMORY[0x192FF2C40]((__n128)vnegq_f32(v14));
      *(float32x4_t *)uint64_t v4 = vdivq_f32(v16, vaddq_f32(v15, v16));
      v4 += 4;
      --v8;
    }
    while (v8);
  }
}

void VVector<float>::gfunc2V(float **a1, const float *__A, int a3)
{
  float __B = 0.66667;
  LODWORD(__N) = a3;
  float v4 = 1.7159;
  vDSP_vsmul(__A, 1, &__B, *a1, 1, a3);
  vvtanhf(*a1, *a1, (const int *)&__N);
  vDSP_vsmul(*a1, 1, &v4, *a1, 1, (int)__N);
}

size_t SentenceFileHeader::read(SentenceFileHeader *this, __sFILE *__stream)
{
  int __ptr = 0;
  fread(&__ptr, 4uLL, 1uLL, __stream);
  size_t v4 = fread(this, 4uLL, 1uLL, __stream);
  size_t v5 = fread((char *)this + 4, 4uLL, 1uLL, __stream) + v4;
  size_t v6 = fread((char *)this + 8, 4uLL, 1uLL, __stream);
  int v7 = (int *)((char *)this + 12);
  size_t v8 = v5 + v6 + fread((char *)this + 12, 4uLL, 1uLL, __stream);
  size_t v9 = fread((char *)this + 16, 4uLL, 1uLL, __stream);
  size_t result = fread((char *)this + 20, 4uLL, 1uLL, __stream);
  if (v8 + v9 + result != 6) {
    exitFramework(67);
  }
  int v11 = *v7 & 3;
  if (!v11) {
    goto LABEL_8;
  }
  unsigned int v12 = *v7 & 0xFFFFFFFC;
  if (!v12) {
    unsigned int v12 = 32;
  }
  *((_DWORD *)this + 6) = v12;
  if (v12 > 0x20 || ((1 << v12) & 0x100010100) == 0) {
LABEL_8:
  }
    exitFramework(25);
  int *v7 = v11;
  return result;
}

void std::vector<VVector<float>>::resize(char **a1, unint64_t a2)
{
  id v3 = *a1;
  size_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    float v19 = &v3[8 * a2];
    goto LABEL_19;
  }
  unint64_t v6 = a2 - v5;
  int v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 3)
  {
    bzero(a1[1], 8 * v6);
    float v19 = &v4[8 * v6];
LABEL_19:
    a1[1] = v19;
    return;
  }
  if (a2 >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = v7 - v3;
  uint64_t v9 = v8 >> 2;
  if (v8 >> 2 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  int v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v10);
  unsigned int v12 = a1[1];
  uint64_t v13 = &v11[8 * v5];
  float32x4_t v15 = &v11[8 * v14];
  bzero(v13, 8 * v6);
  float32x4_t v16 = &v13[8 * v6];
  float v17 = *a1;
  if (v12 != *a1)
  {
    do
    {
      uint64_t v18 = *((void *)v12 - 1);
      v12 -= 8;
      *((void *)v13 - 1) = v18;
      v13 -= 8;
    }
    while (v12 != v17);
    unsigned int v12 = *a1;
  }
  *a1 = v13;
  a1[1] = v16;
  a1[2] = v15;
  if (v12)
  {
    operator delete(v12);
  }
}

void SentenceRecognizer::SentenceRecognizer(uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 56) = a3;
  *(_OWORD *)(a1 + 64) = xmmword_192DCA5F0;
  *(void *)(a1 + 80) = 0x100000001;
  *(_DWORD *)(a1 + 88) = 32;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 48) = a2[4];
  *(_DWORD *)(a1 + 32) = a2[17];
  int v3 = a2[12];
  if (v3 != 8)
  {
    if (v3 == 16) {
      SentenceRecognizer::init<short>(a1, a2, a3);
    }
    SentenceRecognizer::init<float>(a1, a2, a3);
  }
  SentenceRecognizer::init<signed char>(a1, a2, a3);
}

void sub_1928AFBFC(_Unwind_Exception *exception_object)
{
  int v3 = v2;
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 112) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void SentenceRecognizer::init<short>(uint64_t a1, int *a2, uint64_t a3)
{
  if ((a2[12] & 7) == 0)
  {
    int v4 = *a2;
    *(_DWORD *)a1 = a2[1];
    *(void *)(a1 + 4) = *((void *)a2 + 1);
    int v14 = *(void *)(a2 + 9);
    *(int32x2_t *)(a1 + 20) = vrev64_s32(*(int32x2_t *)(a2 + 9));
    *(void *)(a1 + 96) = 0;
    unint64_t v5 = operator new(0xCuLL);
    void *v5 = 0x300000001;
    int v11 = v5;
    *((_DWORD *)v5 + 2) = 3;
    unint64_t v6 = operator new(0xCuLL);
    *(void *)unint64_t v6 = 0x100000001;
    v6[2] = 3;
    *(void *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 16) = *(_DWORD *)(a3 + 8) != 0;
    *(_DWORD *)(a1 + 64) = 3;
    *(_DWORD *)(a1 + 68) = v4;
    *(void *)(a1 + 72) = 0x100000001;
    *(_DWORD *)(a1 + 80) = v14;
    *(void *)(a1 + 84) = 0x2000000001;
    switch(v4)
    {
      case 2:
        operator new();
      case 3:
        operator new();
      case 4:
        operator new();
      case 5:
        operator new();
      case 6:
        operator new();
      case 7:
        operator new();
      case 8:
        operator new();
      case 9:
        operator new();
      case 10:
        operator new();
      case 11:
        operator new();
      case 12:
        operator new();
      case 13:
        operator new();
      case 14:
        operator new();
      case 15:
        operator new();
      case 16:
        if (a2[16] >= 1)
        {
          uint64_t v10 = *((void *)a2 + 7);
          switch(*(_DWORD *)(v10 + 8))
          {
            case 0:
              *(void *)int v11 = *(void *)(v10 + 576);
              long long v11[2] = *(_DWORD *)(v10 + 584);
              operator new();
            case 1:
              operator new();
            case 3:
              operator new();
            case 4:
              operator new();
            case 5:
              *(void *)int v11 = *(void *)(v10 + 576);
              long long v11[2] = *(_DWORD *)(v10 + 584);
              operator new();
            case 7:
              *(void *)int v11 = *(void *)(v10 + 576);
              long long v11[2] = *(_DWORD *)(v10 + 584);
              operator new();
            default:
              exitFramework(89);
          }
        }
        if (*((void *)a2 + 7)) {
          operator new();
        }
        if (*(unsigned char *)(a1 + 16))
        {
          (*(void (**)(void))(**(void **)(*(void *)(a1 + 112) - 8) + 272))(*(void *)(*(void *)(a1 + 112) - 8));
          operator new();
        }
        (*(void (**)(void))(**(void **)(*(void *)(a1 + 112) - 8) + 272))(*(void *)(*(void *)(a1 + 112) - 8));
        operator new();
      case 17:
        operator new();
      case 19:
        operator new();
      case 20:
        operator new();
      case 21:
        operator new();
      case 22:
        operator new();
      case 23:
        operator new();
      case 24:
        operator new();
      case 25:
        operator new();
      case 26:
        operator new();
      case 27:
        operator new();
      case 28:
        operator new();
      case 29:
        operator new();
      case 30:
        operator new();
      case 31:
        operator new();
      case 32:
        operator new();
      case 33:
        operator new();
      case 39:
        operator new();
      case 40:
        operator new();
      case 46:
        operator new();
      case 47:
        operator new();
      case 48:
        uint64_t v9 = operator new(0xCuLL);
        *(void *)uint64_t v9 = 0x200000001;
        uint64_t v9[2] = 2;
        operator new();
      case 49:
      case 50:
      case 52:
        int v7 = operator new(0xCuLL);
        *(void *)int v7 = 0x200000001;
        void v7[2] = 2;
        operator new();
      case 51:
        uint64_t v8 = operator new(0xCuLL);
        *(void *)uint64_t v8 = 0x200000001;
        v8[2] = 2;
        operator new();
      default:
        exitFramework(5);
    }
  }
  exitFramework(345);
}

void sub_1928BBB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20)
{
  MEMORY[0x192FF16B0](v20, 0x10B1C40EA042734);
  operator delete(v21);
  if (STACK[0x260]) {
    operator delete((void *)STACK[0x260]);
  }
  if (STACK[0x278]) {
    operator delete((void *)STACK[0x278]);
  }
  if (STACK[0x290]) {
    operator delete((void *)STACK[0x290]);
  }
  if (STACK[0x320]) {
    operator delete((void *)STACK[0x320]);
  }
  if (STACK[0x350]) {
    operator delete((void *)STACK[0x350]);
  }
  uint64_t v26 = *(void **)(v24 - 112);
  if (v26)
  {
    operator delete(v26);
    if (!v23)
    {
LABEL_13:
      if (!v22)
      {
LABEL_18:
        operator delete(a18);
        operator delete(a20);
        _Unwind_Resume(a1);
      }
LABEL_17:
      operator delete(v22);
      goto LABEL_18;
    }
  }
  else if (!v23)
  {
    goto LABEL_13;
  }
  operator delete(v23);
  if (!v22) {
    goto LABEL_18;
  }
  goto LABEL_17;
}

void SentenceRecognizer::init<signed char>(uint64_t a1, int *a2, uint64_t a3)
{
  if ((a2[12] & 7) == 0)
  {
    int v4 = *a2;
    *(_DWORD *)a1 = a2[1];
    *(void *)(a1 + 4) = *((void *)a2 + 1);
    int v14 = *(void *)(a2 + 9);
    *(int32x2_t *)(a1 + 20) = vrev64_s32(*(int32x2_t *)(a2 + 9));
    *(void *)(a1 + 96) = 0;
    unint64_t v5 = operator new(0xCuLL);
    void *v5 = 0x300000001;
    int v11 = v5;
    *((_DWORD *)v5 + 2) = 3;
    unint64_t v6 = operator new(0xCuLL);
    *(void *)unint64_t v6 = 0x100000001;
    v6[2] = 3;
    *(void *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 16) = *(_DWORD *)(a3 + 8) != 0;
    *(_DWORD *)(a1 + 64) = 3;
    *(_DWORD *)(a1 + 68) = v4;
    *(void *)(a1 + 72) = 0x100000001;
    *(_DWORD *)(a1 + 80) = v14;
    *(void *)(a1 + 84) = 0x2000000001;
    switch(v4)
    {
      case 2:
        operator new();
      case 3:
        operator new();
      case 4:
        operator new();
      case 5:
        operator new();
      case 6:
        operator new();
      case 7:
        operator new();
      case 8:
        operator new();
      case 9:
        operator new();
      case 10:
        operator new();
      case 11:
        operator new();
      case 12:
        operator new();
      case 13:
        operator new();
      case 14:
        operator new();
      case 15:
        operator new();
      case 16:
        if (a2[16] >= 1)
        {
          uint64_t v10 = *((void *)a2 + 7);
          switch(*(_DWORD *)(v10 + 8))
          {
            case 0:
              *(void *)int v11 = *(void *)(v10 + 576);
              long long v11[2] = *(_DWORD *)(v10 + 584);
              operator new();
            case 1:
              operator new();
            case 3:
              operator new();
            case 4:
              operator new();
            case 5:
              *(void *)int v11 = *(void *)(v10 + 576);
              long long v11[2] = *(_DWORD *)(v10 + 584);
              operator new();
            case 7:
              *(void *)int v11 = *(void *)(v10 + 576);
              long long v11[2] = *(_DWORD *)(v10 + 584);
              operator new();
            default:
              exitFramework(89);
          }
        }
        if (*((void *)a2 + 7)) {
          operator new();
        }
        if (*(unsigned char *)(a1 + 16))
        {
          (*(void (**)(void))(**(void **)(*(void *)(a1 + 112) - 8) + 272))(*(void *)(*(void *)(a1 + 112) - 8));
          operator new();
        }
        (*(void (**)(void))(**(void **)(*(void *)(a1 + 112) - 8) + 272))(*(void *)(*(void *)(a1 + 112) - 8));
        operator new();
      case 17:
        operator new();
      case 19:
        operator new();
      case 20:
        operator new();
      case 21:
        operator new();
      case 22:
        operator new();
      case 23:
        operator new();
      case 24:
        operator new();
      case 25:
        operator new();
      case 26:
        operator new();
      case 27:
        operator new();
      case 28:
        operator new();
      case 29:
        operator new();
      case 30:
        operator new();
      case 31:
        operator new();
      case 32:
        operator new();
      case 33:
        operator new();
      case 39:
        operator new();
      case 40:
        operator new();
      case 46:
        operator new();
      case 47:
        operator new();
      case 48:
        uint64_t v9 = operator new(0xCuLL);
        *(void *)uint64_t v9 = 0x200000001;
        uint64_t v9[2] = 2;
        operator new();
      case 49:
      case 50:
      case 52:
        int v7 = operator new(0xCuLL);
        *(void *)int v7 = 0x200000001;
        void v7[2] = 2;
        operator new();
      case 51:
        uint64_t v8 = operator new(0xCuLL);
        *(void *)uint64_t v8 = 0x200000001;
        v8[2] = 2;
        operator new();
      default:
        exitFramework(5);
    }
  }
  exitFramework(345);
}

void sub_1928C9548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20)
{
  MEMORY[0x192FF16B0](v20, 0x10B1C40EA042734);
  operator delete(v21);
  if (STACK[0x260]) {
    operator delete((void *)STACK[0x260]);
  }
  if (STACK[0x278]) {
    operator delete((void *)STACK[0x278]);
  }
  if (STACK[0x290]) {
    operator delete((void *)STACK[0x290]);
  }
  if (STACK[0x320]) {
    operator delete((void *)STACK[0x320]);
  }
  if (STACK[0x350]) {
    operator delete((void *)STACK[0x350]);
  }
  uint64_t v26 = *(void **)(v24 - 112);
  if (v26)
  {
    operator delete(v26);
    if (!v23)
    {
LABEL_13:
      if (!v22)
      {
LABEL_18:
        operator delete(a18);
        operator delete(a20);
        _Unwind_Resume(a1);
      }
LABEL_17:
      operator delete(v22);
      goto LABEL_18;
    }
  }
  else if (!v23)
  {
    goto LABEL_13;
  }
  operator delete(v23);
  if (!v22) {
    goto LABEL_18;
  }
  goto LABEL_17;
}

void SentenceRecognizer::init<float>(uint64_t a1, int *a2, uint64_t a3)
{
  if ((a2[12] & 7) == 0)
  {
    int v4 = *a2;
    *(_DWORD *)a1 = a2[1];
    *(void *)(a1 + 4) = *((void *)a2 + 1);
    int v14 = *(void *)(a2 + 9);
    *(int32x2_t *)(a1 + 20) = vrev64_s32(*(int32x2_t *)(a2 + 9));
    *(void *)(a1 + 96) = 0;
    unint64_t v5 = operator new(0xCuLL);
    void *v5 = 0x300000001;
    int v11 = v5;
    *((_DWORD *)v5 + 2) = 3;
    unint64_t v6 = operator new(0xCuLL);
    *(void *)unint64_t v6 = 0x100000001;
    v6[2] = 3;
    *(void *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 16) = *(_DWORD *)(a3 + 8) != 0;
    *(_DWORD *)(a1 + 64) = 3;
    *(_DWORD *)(a1 + 68) = v4;
    *(void *)(a1 + 72) = 0x100000001;
    *(_DWORD *)(a1 + 80) = v14;
    *(void *)(a1 + 84) = 0x2000000001;
    switch(v4)
    {
      case 2:
        operator new();
      case 3:
        operator new();
      case 4:
        operator new();
      case 5:
        operator new();
      case 6:
        operator new();
      case 7:
        operator new();
      case 8:
        operator new();
      case 9:
        operator new();
      case 10:
        operator new();
      case 11:
        operator new();
      case 12:
        operator new();
      case 13:
        operator new();
      case 14:
        operator new();
      case 15:
        operator new();
      case 16:
        if (a2[16] >= 1)
        {
          uint64_t v10 = *((void *)a2 + 7);
          switch(*(_DWORD *)(v10 + 8))
          {
            case 0:
              *(void *)int v11 = *(void *)(v10 + 576);
              long long v11[2] = *(_DWORD *)(v10 + 584);
              operator new();
            case 1:
              operator new();
            case 3:
              operator new();
            case 4:
              operator new();
            case 5:
              *(void *)int v11 = *(void *)(v10 + 576);
              long long v11[2] = *(_DWORD *)(v10 + 584);
              operator new();
            case 7:
              *(void *)int v11 = *(void *)(v10 + 576);
              long long v11[2] = *(_DWORD *)(v10 + 584);
              operator new();
            default:
              exitFramework(89);
          }
        }
        if (*((void *)a2 + 7)) {
          operator new();
        }
        if (*(unsigned char *)(a1 + 16))
        {
          (*(void (**)(void))(**(void **)(*(void *)(a1 + 112) - 8) + 272))(*(void *)(*(void *)(a1 + 112) - 8));
          operator new();
        }
        (*(void (**)(void))(**(void **)(*(void *)(a1 + 112) - 8) + 272))(*(void *)(*(void *)(a1 + 112) - 8));
        operator new();
      case 17:
        operator new();
      case 19:
        operator new();
      case 20:
        operator new();
      case 21:
        operator new();
      case 22:
        operator new();
      case 23:
        operator new();
      case 24:
        operator new();
      case 25:
        operator new();
      case 26:
        operator new();
      case 27:
        operator new();
      case 28:
        operator new();
      case 29:
        operator new();
      case 30:
        operator new();
      case 31:
        operator new();
      case 32:
        operator new();
      case 33:
        operator new();
      case 39:
        operator new();
      case 40:
        operator new();
      case 46:
        operator new();
      case 47:
        operator new();
      case 48:
        uint64_t v9 = operator new(0xCuLL);
        *(void *)uint64_t v9 = 0x200000001;
        uint64_t v9[2] = 2;
        operator new();
      case 49:
      case 50:
      case 52:
        int v7 = operator new(0xCuLL);
        *(void *)int v7 = 0x200000001;
        void v7[2] = 2;
        operator new();
      case 51:
        uint64_t v8 = operator new(0xCuLL);
        *(void *)uint64_t v8 = 0x200000001;
        v8[2] = 2;
        operator new();
      default:
        exitFramework(5);
    }
  }
  exitFramework(345);
}

void sub_1928D6EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20)
{
  MEMORY[0x192FF16B0](v20, 0x10B1C40EA042734);
  operator delete(v21);
  if (STACK[0x260]) {
    operator delete((void *)STACK[0x260]);
  }
  if (STACK[0x278]) {
    operator delete((void *)STACK[0x278]);
  }
  if (STACK[0x290]) {
    operator delete((void *)STACK[0x290]);
  }
  if (STACK[0x320]) {
    operator delete((void *)STACK[0x320]);
  }
  if (STACK[0x350]) {
    operator delete((void *)STACK[0x350]);
  }
  uint64_t v26 = *(void **)(v24 - 112);
  if (v26)
  {
    operator delete(v26);
    if (!v23)
    {
LABEL_13:
      if (!v22)
      {
LABEL_18:
        operator delete(a18);
        operator delete(a20);
        _Unwind_Resume(a1);
      }
LABEL_17:
      operator delete(v22);
      goto LABEL_18;
    }
  }
  else if (!v23)
  {
    goto LABEL_13;
  }
  operator delete(v23);
  if (!v22) {
    goto LABEL_18;
  }
  goto LABEL_17;
}

char *std::vector<myactivation_t>::__init_with_size[abi:ne180100]<myactivation_t*,myactivation_t*>(void *a1, const void *a2, uint64_t a3)
{
  size_t result = (char *)operator new(0xCuLL);
  int v7 = result;
  *a1 = result;
  a1[1] = result;
  a1[2] = result + 12;
  size_t v8 = a3 - (void)a2;
  if (v8) {
    size_t result = (char *)memcpy(result, a2, v8);
  }
  a1[1] = &v7[v8];
  return result;
}

void sub_1928D8980(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void LSTM<float>::LSTM(uint64_t a1, int a2, int a3, _DWORD **a4, int a5, uint64_t a6, int a7, uint64_t a8, char a9)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EE322B58;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 52) = a3;
  *(_DWORD *)(a1 + 56) = a5;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(unsigned char *)(a1 + 1072) = 0;
  *(unsigned char *)(a1 + 1192) = 0;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(unsigned char *)(a1 + 1312) = 0;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  uint64_t v13 = (_OWORD *)(a1 + 1640);
  *(unsigned char *)(a1 + 1432) = 0;
  bzero((void *)(a1 + 64), 0x2A0uLL);
  *(_OWORD *)(a1 + 988) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1108) = 0u;
  *(_OWORD *)(a1 + 1228) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1348) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *uint64_t v13 = 0u;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(void *)(a1 + 1688) = 0;
  *(void *)(a1 + 1704) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1712), 0);
  *(void *)(a1 + 1776) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1784), 0);
  *(void *)(a1 + 1848) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1856), 0);
  *(void *)(a1 + 1920) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1928), 0);
  *(void *)(a1 + 1992) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2000), 0);
  *(void *)(a1 + 2064) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2072), 0);
  *(void *)(a1 + 2136) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2144), 0);
  *(void *)(a1 + 2208) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2216), 0);
  *(void *)(a1 + 2280) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2288), 0);
  *(void *)(a1 + 2352) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2360), 0);
  *(void *)(a1 + 2424) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2432), 0);
  *(_DWORD *)(a1 + 2496) = 0;
  *(_OWORD *)(a1 + 2624) = 0u;
  *(_OWORD *)(a1 + 2640) = 0u;
  *(_OWORD *)(a1 + 2656) = 0u;
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  int v14 = 1;
  *(unsigned char *)(a1 + 2692) = 1;
  *(unsigned char *)(a1 + 2672) = 0;
  *(unsigned char *)(a1 + 41) = 0;
  *(void *)(a1 + 2680) = a8;
  if (a8)
  {
    a7 = *(unsigned __int8 *)(a8 + 512);
    int v14 = *(_DWORD *)(a8 + 28);
    int v15 = a7 ^ 1;
  }
  else
  {
    int v15 = 1;
  }
  *(_DWORD *)(a1 + 2688) = v14;
  *(unsigned char *)(a1 + 40) = a7;
  int v16 = *(unsigned __int8 *)(a6 + 45);
  *(unsigned char *)(a1 + 1696) = v16;
  *(unsigned char *)(a1 + 1697) = *(unsigned char *)(a6 + 46);
  float v17 = *a4;
  *(_DWORD *)(a1 + 736) = **a4;
  *(_DWORD *)(a1 + 740) = v17[1];
  *(_DWORD *)(a1 + 744) = v17[2];
  if (!a7) {
    int v15 = 0;
  }
  *(_DWORD *)(a1 + 48) = v15 + *(_DWORD *)(a1 + 44);
  if (a9)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
    *(unsigned char *)(a1 + 2672) = 1;
    int v16 = *(unsigned __int8 *)(a1 + 1696);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a6 + 16);
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(void *)(a1 + 1632) = 0;
  if (!v16)
  {
    int v18 = *(_DWORD *)(a6 + 32);
    switch(v18)
    {
      case 2:
        operator new();
      case 1:
        operator new();
      case 0:
        operator new();
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "LSTM alloc, from constructor");
  LSTM<float>::init();
}

void sub_1928D9718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PTMutex *a10, PTMutex *a11, PTMutex *a12, PTMutex *a13, PTMutex *a14, PTMutex *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  MEMORY[0x192FF16B0](v53, 0x10B3C408D47FFFCLL);
  uint64_t v60 = (void **)(v52 + 328);
  int64x2_t v61 = (void *)v52[331];
  if (v61)
  {
    v52[332] = v61;
    operator delete(v61);
  }
  unint64_t v62 = *v60;
  if (*v60)
  {
    v52[329] = v62;
    operator delete(v62);
  }
  PTMutex::~PTMutex(v58);
  PTMutex::~PTMutex(v54);
  PTMutex::~PTMutex(a10);
  PTMutex::~PTMutex(a11);
  PTMutex::~PTMutex(a12);
  PTMutex::~PTMutex(a13);
  PTMutex::~PTMutex(a14);
  PTMutex::~PTMutex(v57);
  PTMutex::~PTMutex(v56);
  PTMutex::~PTMutex(v55);
  PTMutex::~PTMutex(a15);
  SparseMatrix<float>::~SparseMatrix(a17);
  SparseMatrix<float>::~SparseMatrix(a18);
  SparseMatrix<float>::~SparseMatrix(a16);
  SparseMatrix<float>::~SparseMatrix(a19);
  uint64_t v63 = (void *)v52[120];
  if (v63)
  {
    v52[121] = v63;
    operator delete(v63);
  }
  char v64 = (void *)v52[117];
  if (v64)
  {
    v52[118] = v64;
    operator delete(v64);
  }
  unint64_t v65 = (void *)v52[114];
  if (v65)
  {
    v52[115] = v65;
    operator delete(v65);
  }
  char v66 = (void *)v52[111];
  if (v66)
  {
    v52[112] = v66;
    operator delete(v66);
  }
  char v67 = (void *)v52[108];
  if (v67)
  {
    v52[109] = v67;
    operator delete(v67);
  }
  std::string v68 = (void *)v52[105];
  if (v68)
  {
    v52[106] = v68;
    operator delete(v68);
  }
  uint64_t v69 = (void *)v52[102];
  if (v69)
  {
    v52[103] = v69;
    operator delete(v69);
  }
  std::string v70 = (void *)v52[99];
  if (v70)
  {
    v52[100] = v70;
    operator delete(v70);
  }
  uint64_t v71 = (void *)v52[89];
  if (v71)
  {
    v52[90] = v71;
    operator delete(v71);
  }
  long long v72 = (void *)v52[86];
  if (v72)
  {
    v52[87] = v72;
    operator delete(v72);
  }
  uint64_t v73 = (void *)v52[83];
  if (v73)
  {
    v52[84] = v73;
    operator delete(v73);
  }
  char v74 = (void *)v52[80];
  if (v74)
  {
    v52[81] = v74;
    operator delete(v74);
  }
  long long v75 = (void *)v52[77];
  if (v75)
  {
    v52[78] = v75;
    operator delete(v75);
  }
  int v76 = (void *)v52[74];
  if (v76)
  {
    v52[75] = v76;
    operator delete(v76);
  }
  uint64_t v77 = (void *)v52[71];
  if (v77)
  {
    v52[72] = v77;
    operator delete(v77);
  }
  uint64_t v78 = (void *)v52[68];
  if (v78)
  {
    v52[69] = v78;
    operator delete(v78);
  }
  uint64_t v79 = (void *)v52[65];
  if (v79)
  {
    v52[66] = v79;
    operator delete(v79);
  }
  int v80 = (void *)v52[62];
  if (v80)
  {
    v52[63] = v80;
    operator delete(v80);
  }
  uint64_t v81 = (void *)v52[59];
  if (v81)
  {
    v52[60] = v81;
    operator delete(v81);
  }
  long long v82 = (void *)v52[56];
  if (v82)
  {
    v52[57] = v82;
    operator delete(v82);
  }
  uint64_t v83 = (void *)v52[53];
  if (v83)
  {
    v52[54] = v83;
    operator delete(v83);
  }
  int v84 = (void *)v52[50];
  if (v84)
  {
    v52[51] = v84;
    operator delete(v84);
  }
  uint64_t v85 = (void *)v52[47];
  if (v85)
  {
    v52[48] = v85;
    operator delete(v85);
  }
  std::string v86 = (void *)v52[44];
  if (v86)
  {
    v52[45] = v86;
    operator delete(v86);
  }
  a23 = v52 + 26;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  uint64_t v87 = (void *)v52[23];
  if (v87)
  {
    v52[24] = v87;
    operator delete(v87);
  }
  uint64_t v88 = (void *)v52[20];
  if (v88)
  {
    v52[21] = v88;
    operator delete(v88);
  }
  float v89 = (void *)v52[17];
  if (v89)
  {
    v52[18] = v89;
    operator delete(v89);
  }
  long long v90 = (void *)v52[14];
  if (v90)
  {
    v52[15] = v90;
    operator delete(v90);
  }
  std::string v91 = (void *)v52[11];
  if (v91)
  {
    v52[12] = v91;
    operator delete(v91);
  }
  uint64_t v92 = *a20;
  if (*a20)
  {
    v52[9] = v92;
    operator delete(v92);
  }
  *int v52 = a21;
  uint64_t v93 = (void *)v52[1];
  if (v93)
  {
    v52[2] = v93;
    operator delete(v93);
  }
  _Unwind_Resume(a1);
}

uint64_t Reverse::Reverse(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EE323018;
  *(void *)(a1 + 48) = a2;
  *(_DWORD *)(a1 + 56) = a3;
  *(unsigned char *)(a1 + 41) = 0;
  (*(void (**)(uint64_t))(*(void *)a2 + 192))(a2);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(*(void *)(a1 + 48) + 40);
  return a1;
}

void sub_1928D9C78(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_1EE3182B8;
  int v3 = (void *)v1[1];
  if (v3)
  {
    v1[2] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char **Parallel::Parallel(char **a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[6] = 0;
  *a1 = (char *)&unk_1EE323820;
  a1[7] = 0;
  a1[8] = 0;
  a1[10] = 0;
  a1[11] = 0;
  a1[12] = 0;
  std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(a1 + 10, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(_OWORD *)(a1 + 13) = 0u;
  *(_OWORD *)(a1 + 19) = 0u;
  *(_OWORD *)(a1 + 25) = 0u;
  *(_OWORD *)(a1 + 31) = 0u;
  *(_OWORD *)(a1 + 29) = 0u;
  *(_OWORD *)(a1 + 27) = 0u;
  *(_OWORD *)(a1 + 23) = 0u;
  *(_OWORD *)(a1 + 21) = 0u;
  *(_OWORD *)(a1 + 17) = 0u;
  *(_OWORD *)(a1 + 15) = 0u;
  *(_OWORD *)(a1 + 33) = 0u;
  (*((void (**)(char **))*a1 + 24))(a1);
  *((_DWORD *)a1 + 18) = 0;
  int v3 = a1[11];
  if (v3 != a1[10])
  {
    unint64_t v4 = 0;
    int v3 = a1[10];
    do
    {
      *((_DWORD *)a1 + 18) += (*(uint64_t (**)(void))(**(void **)&v3[8 * v4] + 272))(*(void *)&v3[8 * v4]);
      ++v4;
      int v3 = a1[10];
    }
    while (v4 < (a1[11] - v3) >> 3);
  }
  *((unsigned char *)a1 + 41) = 0;
  if (*(unsigned char *)(*(void *)v3 + 40)) {
    *((unsigned char *)a1 + 40) = 1;
  }
  Parallel::init(a1);
  return a1;
}

void sub_1928D9E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  int v14 = *v12;
  if (*v12)
  {
    v10[7] = v14;
    operator delete(v14);
  }
  void *v10 = v11;
  int v15 = (void *)v10[1];
  if (v15)
  {
    v10[2] = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FullLayer<float>::FullLayer(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, char a7, uint64_t a8)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EE323B58;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = a2;
  *(_DWORD *)(a1 + 100) = a3;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(unsigned char *)(a1 + 232) = 0;
  *(void *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(void *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 432) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 440), 0);
  *(_DWORD *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 112) = a5;
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  *(unsigned char *)(a1 + 41) = 0;
  *(_DWORD *)(a1 + 408) = a4;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a6 + 68);
  *(void *)(a1 + 528) = a8;
  if (a8) {
    a7 = *(unsigned char *)(a8 + 512);
  }
  *(unsigned char *)(a1 + 40) = a7;
  *(unsigned char *)(a1 + 520) = 0;
  *(_WORD *)(a1 + 116) = *(_WORD *)(a6 + 45);
  std::string::basic_string[abi:ne180100]<0>(__p, "FullLayer");
  (*(void (**)(uint64_t, void **, void, float))(*(void *)a1 + 400))(a1, __p, 0, -0.44);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a6 + 16);
  *(void *)(a1 + 424) = 0;
  if (!*(unsigned char *)(a1 + 116))
  {
    int v15 = *(_DWORD *)(a6 + 32);
    switch(v15)
    {
      case 2:
        operator new();
      case 1:
        operator new();
      case 0:
        operator new();
    }
  }
  return a1;
}

void sub_1928DA228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x192FF16B0](v24, 0x10B3C408D47FFFCLL);
  PTMutex::~PTMutex(v23);
  int v27 = (void *)v20[48];
  if (v27)
  {
    v20[49] = v27;
    operator delete(v27);
  }
  a15 = v20 + 45;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  uint64_t v28 = (void *)v20[42];
  if (v28)
  {
    v20[43] = v28;
    operator delete(v28);
  }
  uint64_t v29 = (void *)v20[39];
  if (v29)
  {
    v20[40] = v29;
    operator delete(v29);
  }
  long long v30 = (void *)v20[36];
  if (v30)
  {
    v20[37] = v30;
    operator delete(v30);
  }
  uint64_t v31 = (void *)v20[33];
  if (v31)
  {
    v20[34] = v31;
    operator delete(v31);
  }
  SparseMatrix<float>::~SparseMatrix(v22);
  uint64_t v32 = (void *)v20[9];
  if (v32)
  {
    v20[10] = v32;
    operator delete(v32);
  }
  int v33 = *v25;
  if (*v25)
  {
    v20[7] = v33;
    operator delete(v33);
  }
  *uint64_t v20 = v21;
  uint64_t v34 = (void *)v20[1];
  if (v34)
  {
    void v20[2] = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

void *std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    size_t result = std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      size_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1928DA3F0(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Stacked::Stacked(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EE323698;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>((void *)(a1 + 48), *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(unsigned char *)(a1 + 41) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  *(_DWORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(**(void **)a2 + 40);
  return a1;
}

void sub_1928DA4E0(_Unwind_Exception *exception_object)
{
  unint64_t v5 = *v3;
  if (*v3)
  {
    v1[7] = v5;
    operator delete(v5);
  }
  void *v1 = v2;
  unint64_t v6 = (void *)v1[1];
  if (v6)
  {
    v1[2] = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RecurrentLayer<float>::RecurrentLayer(uint64_t a1, int a2, int a3, int a4, char a5, char a6, char a7, uint64_t a8)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EE318608;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 48) = a3;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(void *)(a1 + 296) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 304), 0);
  *(_DWORD *)(a1 + 368) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 376) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  *(unsigned char *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 41) = 0;
  *(_DWORD *)(a1 + 208) = a4;
  *(void *)(a1 + 240) = a8;
  *(unsigned char *)(a1 + 40) = a7;
  *(unsigned char *)(a1 + 60) = a5;
  *(unsigned char *)(a1 + 61) = a6;
  std::string::basic_string[abi:ne180100]<0>(__p, "RecurrentLayer from Constructor");
  (*(void (**)(uint64_t, void **, void, float))(*(void *)a1 + 392))(a1, __p, 0, -0.44);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1928DA6C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  PTMutex::~PTMutex(v17);
  uint64_t v20 = (void *)v15[34];
  if (v20)
  {
    v15[35] = v20;
    operator delete(v20);
  }
  uint64_t v21 = *v18;
  if (*v18)
  {
    v15[32] = v21;
    operator delete(v21);
  }
  uint64_t v22 = (void *)v15[23];
  if (v22)
  {
    v15[24] = v22;
    operator delete(v22);
  }
  float v23 = (void *)v15[20];
  if (v23)
  {
    v15[21] = v23;
    operator delete(v23);
  }
  uint64_t v24 = (void *)v15[17];
  if (v24)
  {
    v15[18] = v24;
    operator delete(v24);
  }
  uint64_t v25 = (void *)v15[14];
  if (v25)
  {
    v15[15] = v25;
    operator delete(v25);
  }
  uint64_t v26 = (void *)v15[11];
  if (v26)
  {
    v15[12] = v26;
    operator delete(v26);
  }
  void *v15 = v16;
  int v27 = (void *)v15[1];
  if (v27)
  {
    v15[2] = v27;
    operator delete(v27);
  }
  _Unwind_Resume(a1);
}

uint64_t Direct::Direct(uint64_t a1, int a2, int a3, int a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EE322E68;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 48) = a3;
  *(_DWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 56) = a4;
  *(_OWORD *)(a1 + 64) = 0u;
  unint64_t v5 = (char **)(a1 + 64);
  unint64_t v6 = (char **)(a1 + 88);
  *(_OWORD *)(a1 + 112) = 0u;
  uint64_t v7 = (char **)(a1 + 112);
  size_t v8 = (char **)(a1 + 136);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 160) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 168), 0);
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(_WORD *)(a1 + 40) = 1;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a1 + 44) + 1;
  std::vector<VVector<float>>::resize(v5, maxFeatureVectors);
  std::vector<VVector<float>>::resize(v6, maxFeatureVectors);
  std::vector<VVector<float>>::resize(v7, maxFeatureVectors);
  std::vector<VVector<float>>::resize(v8, maxFeatureVectors);
  if (maxFeatureVectors >= 1) {
    operator new[]();
  }
  return a1;
}

void sub_1928DACD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, PTMutex *a13, uint64_t a14)
{
  uint64_t v20 = *v19;
  if (*v19)
  {
    v14[18] = v20;
    operator delete(v20);
  }
  uint64_t v21 = *v18;
  if (*v18)
  {
    v14[15] = v21;
    operator delete(v21);
  }
  uint64_t v22 = *v17;
  if (*v17)
  {
    v14[12] = v22;
    operator delete(v22);
  }
  float v23 = *v16;
  if (*v16)
  {
    v14[9] = v23;
    operator delete(v23);
  }
  void *v14 = v15;
  uint64_t v24 = (void *)v14[1];
  if (v24)
  {
    uint64_t v14[2] = v24;
    operator delete(v24);
  }
  _Unwind_Resume(a1);
}

uint64_t SoftMax<float>::SoftMax(uint64_t a1, int a2, int a3, uint64_t a4, char a5, uint64_t a6)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)a1 = &unk_1EE323B58;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(unsigned char *)(a1 + 232) = 0;
  *(void *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 432) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 440), 0);
  *(_DWORD *)(a1 + 504) = 0;
  *(_WORD *)(a1 + 40) = 0;
  *(void *)(a1 + 424) = 0;
  *(unsigned char *)(a1 + 520) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 110) = 0;
  *(_DWORD *)(a1 + 408) = 1;
  *(void *)(a1 + 528) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  *(void *)a1 = &unk_1EE323348;
  *(_WORD *)(a1 + 41) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 408) = 0;
  *(void *)(a1 + 528) = a6;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a4 + 68);
  if (a6) {
    a5 = *(unsigned char *)(a6 + 512);
  }
  *(unsigned char *)(a1 + 40) = a5;
  *(_DWORD *)(a1 + 96) = a2;
  *(_DWORD *)(a1 + 100) = a3;
  *(void *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 116) = *(_WORD *)(a4 + 45);
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 528) = a6;
  if (a2 < 1 || a3 <= 0) {
    exitFramework(34);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "SoftMax");
  FullLayer<float>::init(a1, (uint64_t)__p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a4 + 16);
  *(void *)(a1 + 424) = 0;
  if (!*(unsigned char *)(a1 + 116))
  {
    int v13 = *(_DWORD *)(a4 + 32);
    switch(v13)
    {
      case 2:
        operator new();
      case 1:
        operator new();
      case 0:
        operator new();
    }
  }
  return a1;
}

void sub_1928DB0F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x192FF16B0](v21, 0x10B3C408D47FFFCLL);
  FullLayer<float>::~FullLayer(v20);
  _Unwind_Resume(a1);
}

void GRU<float>::GRU(uint64_t a1, int a2, int a3, _DWORD **a4, int a5, uint64_t a6, int a7, uint64_t a8)
{
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_1EE3226C0;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 52) = a3;
  *(_DWORD *)(a1 + 56) = a5;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(unsigned char *)(a1 + 848) = 0;
  *(unsigned char *)(a1 + 968) = 0;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(unsigned char *)(a1 + 1088) = 0;
  *(void *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_DWORD *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 884) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 1004) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(void *)(a1 + 1160) = 0;
  *(void *)(a1 + 1232) = 0;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(void *)(a1 + 1240) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1248), 0);
  *(void *)(a1 + 1312) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1320), 0);
  *(void *)(a1 + 1384) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1392), 0);
  *(void *)(a1 + 1456) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1464), 0);
  *(void *)(a1 + 1528) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1536), 0);
  *(void *)(a1 + 1600) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1608), 0);
  *(void *)(a1 + 1672) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1680), 0);
  *(void *)(a1 + 1744) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1752), 0);
  *(void *)(a1 + 1816) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1824), 0);
  *(void *)(a1 + 1888) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1896), 0);
  *(void *)(a1 + 1960) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1968), 0);
  *(_DWORD *)(a1 + 2084) = 0;
  *(_OWORD *)(a1 + 2052) = 0u;
  *(_OWORD *)(a1 + 2068) = 0u;
  *(_OWORD *)(a1 + 2036) = 0u;
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  *(unsigned char *)(a1 + 2088) = 0;
  *(unsigned char *)(a1 + 41) = 0;
  *(void *)(a1 + 2096) = a8;
  if (a8)
  {
    a7 = *(unsigned __int8 *)(a8 + 512);
    int v13 = a7 ^ 1;
  }
  else
  {
    int v13 = 1;
  }
  *(unsigned char *)(a1 + 40) = a7;
  int v14 = *(unsigned __int8 *)(a6 + 45);
  *(unsigned char *)(a1 + 2032) = v14;
  *(unsigned char *)(a1 + 2033) = *(unsigned char *)(a6 + 46);
  char v15 = *a4;
  *(_DWORD *)(a1 + 568) = **a4;
  *(_DWORD *)(a1 + 572) = v15[1];
  *(_DWORD *)(a1 + 576) = v15[2];
  if (!a7) {
    int v13 = 0;
  }
  *(_DWORD *)(a1 + 48) = v13 + *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a6 + 16);
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  if (!v14)
  {
    int v16 = *(_DWORD *)(a6 + 32);
    switch(v16)
    {
      case 2:
        operator new();
      case 1:
        operator new();
      case 0:
        operator new();
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "GRU alloc, from constructor");
  GRU<float>::init();
}

void sub_1928DBD64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PTMutex *a10, PTMutex *a11, PTMutex *a12, PTMutex *a13, PTMutex *a14, PTMutex *a15, PTMutex *a16, PTMutex *a17, PTMutex *a18, PTMutex *a19, PTMutex *a20,void **a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  MEMORY[0x192FF16B0](v47, 0x10B3C40C37BAA31);
  uint64_t v53 = (void *)v46[258];
  if (v53)
  {
    v46[259] = v53;
    operator delete(v53);
  }
  uint64_t v54 = (void *)v46[255];
  if (v54)
  {
    v46[256] = v54;
    operator delete(v54);
  }
  PTMutex::~PTMutex(a10);
  PTMutex::~PTMutex(a11);
  PTMutex::~PTMutex(a12);
  PTMutex::~PTMutex(a13);
  PTMutex::~PTMutex(a14);
  PTMutex::~PTMutex(a15);
  PTMutex::~PTMutex(a16);
  PTMutex::~PTMutex(a17);
  PTMutex::~PTMutex(a18);
  PTMutex::~PTMutex(a19);
  PTMutex::~PTMutex(a20);
  SparseMatrix<float>::~SparseMatrix(v50);
  SparseMatrix<float>::~SparseMatrix(v48);
  SparseMatrix<float>::~SparseMatrix(v49);
  uint64_t v55 = (void *)v46[91];
  if (v55)
  {
    v46[92] = v55;
    operator delete(v55);
  }
  int64_t v56 = (void *)v46[88];
  if (v56)
  {
    v46[89] = v56;
    operator delete(v56);
  }
  std::vector<std::string> v57 = (void *)v46[85];
  if (v57)
  {
    v46[86] = v57;
    operator delete(v57);
  }
  long long v58 = (void *)v46[82];
  if (v58)
  {
    v46[83] = v58;
    operator delete(v58);
  }
  long long v59 = (void *)v46[79];
  if (v59)
  {
    v46[80] = v59;
    operator delete(v59);
  }
  uint64_t v60 = (void *)v46[76];
  if (v60)
  {
    v46[77] = v60;
    operator delete(v60);
  }
  int64x2_t v61 = (void *)v46[68];
  if (v61)
  {
    v46[69] = v61;
    operator delete(v61);
  }
  unint64_t v62 = (void *)v46[65];
  if (v62)
  {
    v46[66] = v62;
    operator delete(v62);
  }
  uint64_t v63 = (void *)v46[62];
  if (v63)
  {
    v46[63] = v63;
    operator delete(v63);
  }
  char v64 = (void *)v46[59];
  if (v64)
  {
    v46[60] = v64;
    operator delete(v64);
  }
  unint64_t v65 = (void *)v46[56];
  if (v65)
  {
    v46[57] = v65;
    operator delete(v65);
  }
  char v66 = *v51;
  if (*v51)
  {
    v46[54] = v66;
    operator delete(v66);
  }
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  char v67 = (void *)v46[23];
  if (v67)
  {
    v46[24] = v67;
    operator delete(v67);
  }
  std::string v68 = (void *)v46[20];
  if (v68)
  {
    v46[21] = v68;
    operator delete(v68);
  }
  uint64_t v69 = (void *)v46[17];
  if (v69)
  {
    v46[18] = v69;
    operator delete(v69);
  }
  std::string v70 = (void *)v46[14];
  if (v70)
  {
    v46[15] = v70;
    operator delete(v70);
  }
  uint64_t v71 = (void *)v46[11];
  if (v71)
  {
    v46[12] = v71;
    operator delete(v71);
  }
  long long v72 = *a21;
  if (*a21)
  {
    v46[9] = v72;
    operator delete(v72);
  }
  *uint64_t v46 = a22;
  uint64_t v73 = (void *)v46[1];
  if (v73)
  {
    v46[2] = v73;
    operator delete(v73);
  }
  _Unwind_Resume(a1);
}

uint64_t BatchNormalization<float>::BatchNormalization(uint64_t a1, int a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EE321340;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 48) = 925353388;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  long long v5 = *(_OWORD *)(a3 + 32);
  long long v6 = *(_OWORD *)(a3 + 48);
  *(void *)(a1 + 120) = *(void *)(a3 + 64);
  *(_OWORD *)(a1 + 104) = v6;
  *(_OWORD *)(a1 + 88) = v5;
  *(_OWORD *)(a1 + 72) = v4;
  *(_OWORD *)(a1 + 168) = 0u;
  uint64_t v7 = (char **)(a1 + 168);
  size_t v8 = (char **)(a1 + 192);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 224), 0);
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 41) = 0;
  std::vector<VVector<float>>::resize(v7, maxFeatureVectors);
  std::vector<VVector<float>>::resize(v8, maxFeatureVectors);
  *(_WORD *)(a1 + 160) = *(_WORD *)(a1 + 101);
  if (maxFeatureVectors >= 1) {
    operator new[]();
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 200))(a1);
  return a1;
}

void sub_1928DC4AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, PTMutex *a9, uint64_t a10)
{
  int v14 = *v12;
  if (*v12)
  {
    v10[25] = v14;
    operator delete(v14);
  }
  char v15 = *v11;
  if (*v11)
  {
    v10[22] = v15;
    operator delete(v15);
  }
  void *v10 = a10;
  int v16 = (void *)v10[1];
  if (v16)
  {
    v10[2] = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void Parallel::Parallel(Parallel *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = &unk_1EE323820;
  *((void *)this + 6) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  Parallel::unsetSpecialBidir((uint64_t)this);
}

void sub_1928DC604(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  size_t v8 = (void *)v2[32];
  if (v8)
  {
    v2[33] = v8;
    operator delete(v8);
  }
  uint64_t v9 = *v6;
  if (*v6)
  {
    v2[30] = v9;
    operator delete(v9);
  }
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v10 = (void *)v2[16];
  if (v10)
  {
    v2[17] = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)v2[13];
  if (v11)
  {
    v2[14] = v11;
    operator delete(v11);
  }
  unsigned int v12 = *v5;
  if (*v5)
  {
    v2[11] = v12;
    operator delete(v12);
  }
  int v13 = *v4;
  if (*v4)
  {
    v2[7] = v13;
    operator delete(v13);
  }
  *uint64_t v2 = v3;
  int v14 = (void *)v2[1];
  if (v14)
  {
    v2[2] = v14;
    operator delete(v14);
  }
  _Unwind_Resume(a1);
}

uint64_t Parallel::unsetSpecialBidir(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 80);
  if (*(void *)(this + 88) != v1)
  {
    uint64_t v2 = this;
    unint64_t v3 = 0;
    do
    {
      this = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 192))(*(void *)(v1 + 8 * v3));
      ++v3;
      uint64_t v1 = *(void *)(v2 + 80);
    }
    while (v3 < (*(void *)(v2 + 88) - v1) >> 3);
  }
  return this;
}

char *std::vector<NeuralNetwork *>::__assign_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    size_t result = std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__vallocate[abi:ne180100](v7, v11);
    int v13 = (char *)v7[1];
    unsigned int v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      int v18 = v9;
      float v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unsigned int v12 = (void **)(result + 8);
  int v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  int v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    size_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    int v18 = v9;
    float v19 = v16;
LABEL_18:
    size_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  void *v12 = &v9[v17];
  return result;
}

void ParallelSelector<float>::init(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 529);
  uint64_t v3 = *(void *)(a1 + 496);
  int v4 = *(_DWORD *)(v3 + 8);
  *(_DWORD *)(a1 + 340) = v4;
  long long v5 = *(int **)(v3 + 16);
  long long v6 = *(int **)(v3 + 24);
  uint64_t v7 = v5 + 1;
  if (v5 != v6 && v7 != v6)
  {
    int v9 = *v5;
    uint64_t v10 = v5 + 1;
    do
    {
      int v12 = *v10++;
      int v11 = v12;
      BOOL v13 = v9 < v12;
      if (v9 <= v12) {
        int v9 = v11;
      }
      if (v13) {
        long long v5 = v7;
      }
      uint64_t v7 = v10;
    }
    while (v10 != v6);
  }
  int v14 = *v5;
  if (v14 > v4) {
    int v4 = v14;
  }
  *(_DWORD *)(a1 + 344) = v4;
  (*(void (**)(void))(***(void ***)(a1 + 80) + 272))(**(void **)(a1 + 80));
  int v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1);
  uint64_t v16 = *(void *)(a1 + 104);
  *(_DWORD *)(a1 + 72) = v15;
  *(_DWORD *)(a1 + 348) = v15;
  *(void *)(a1 + 112) = v16;
  std::vector<VVector<float>>::resize((char **)(a1 + 104), maxFeatureVectors);
  int v17 = maxFeatureVectors;
  if (maxFeatureVectors >= 1) {
    operator new[]();
  }
  if (!v2)
  {
    *(void *)(a1 + 456) = *(void *)(a1 + 448);
    *(void *)(a1 + 512) = *(void *)(a1 + 504);
    std::vector<VVector<float>>::resize((char **)(a1 + 448), v17);
    std::vector<VVector<float>>::resize((char **)(a1 + 504), maxFeatureVectors);
    if (maxFeatureVectors >= 1) {
      operator new[]();
    }
    std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)(a1 + 200));
    std::vector<std::vector<VVector<float>>>::resize(a1 + 200, (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3);
    if (*(void *)(a1 + 88) != *(void *)(a1 + 80))
    {
      unint64_t v18 = 0;
      int v19 = maxFeatureVectors;
      do
      {
        std::vector<VVector<float>>::resize((char **)(*(void *)(a1 + 200) + 24 * v18), v19);
        int v19 = maxFeatureVectors;
        if (maxFeatureVectors >= 1)
        {
          uint64_t v20 = *(void *)(*(void *)(a1 + 80) + 8 * v18);
          (*(uint64_t (**)(uint64_t))(*(void *)v20 + 272))(v20);
          operator new[]();
        }
        ++v18;
      }
      while (v18 < (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3);
    }
    std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)(a1 + 472));
    std::vector<std::vector<VVector<float>>>::resize(a1 + 472, 2uLL);
    uint64_t v21 = 0;
    char v22 = 1;
    int v23 = maxFeatureVectors;
    do
    {
      char v24 = v22;
      std::vector<VVector<float>>::resize((char **)(*(void *)(a1 + 472) + 24 * v21), v23);
      int v23 = maxFeatureVectors;
      if (maxFeatureVectors >= 1) {
        operator new[]();
      }
      char v22 = 0;
      uint64_t v21 = 1;
    }
    while ((v24 & 1) != 0);
  }
  *(void *)(a1 + 312) = *(void *)(a1 + 304);
  std::vector<int>::size_type v25 = *(int *)(a1 + 340) + 1;

  std::vector<int>::resize((std::vector<int> *)(a1 + 304), v25);
}

void Parallel::~Parallel(Parallel *this)
{
  *(void *)this = &unk_1EE323820;
  uint64_t v3 = *((void *)this + 6);
  uint64_t v2 = *((void *)this + 7);
  if (v2 == v3)
  {
    uint64_t v3 = *((void *)this + 7);
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v3 + 8 * v4);
      if (v5)
      {
        MEMORY[0x192FF1690](v5, 0x1000C8052888210);
        uint64_t v3 = *((void *)this + 6);
        uint64_t v2 = *((void *)this + 7);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  *((void *)this + 7) = v3;
  uint64_t v7 = *((void *)this + 10);
  uint64_t v6 = *((void *)this + 11);
  if (v6 != v7)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(v7 + 8 * v8);
      if (v9)
      {
        (*(void (**)(uint64_t))(*(void *)v9 + 368))(v9);
        uint64_t v7 = *((void *)this + 10);
        uint64_t v6 = *((void *)this + 11);
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
  }
  uint64_t v10 = (void *)*((void *)this + 32);
  if (v10)
  {
    *((void *)this + 33) = v10;
    operator delete(v10);
  }
  int v11 = (void *)*((void *)this + 29);
  if (v11)
  {
    *((void *)this + 30) = v11;
    operator delete(v11);
  }
  int v17 = (void **)((char *)this + 200);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v17);
  int v17 = (void **)((char *)this + 176);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v17);
  int v17 = (void **)((char *)this + 152);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v17);
  int v12 = (void *)*((void *)this + 16);
  if (v12)
  {
    *((void *)this + 17) = v12;
    operator delete(v12);
  }
  BOOL v13 = (void *)*((void *)this + 13);
  if (v13)
  {
    *((void *)this + 14) = v13;
    operator delete(v13);
  }
  int v14 = (void *)*((void *)this + 10);
  if (v14)
  {
    *((void *)this + 11) = v14;
    operator delete(v14);
  }
  int v15 = (void *)*((void *)this + 6);
  if (v15)
  {
    *((void *)this + 7) = v15;
    operator delete(v15);
  }
  *(void *)this = &unk_1EE3182B8;
  uint64_t v16 = (void *)*((void *)this + 1);
  if (v16)
  {
    *((void *)this + 2) = v16;
    operator delete(v16);
  }
}

{
  uint64_t vars8;

  Parallel::~Parallel(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t NeuralNetwork::reverseBackward(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 296))();
}

uint64_t NeuralNetwork::reverseForward(uint64_t a1)
{
  {
    uint64_t v4 = a1;
    a1 = v4;
    if (v3)
    {
      NeuralNetwork::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy = 0;
      unk_1E93070E0 = 0;
      qword_1E93070E8 = 0;
      __cxa_atexit((void (*)(void *))std::vector<int>::~vector[abi:ne180100], &NeuralNetwork::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy, &dword_1920CB000);
      a1 = v4;
    }
  }
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)a1 + 304);

  return v1();
}

void NeuralNetwork::forwardForSingleFeatureVector()
{
}

uint64_t NeuralNetwork::setFirstLayerFlag(uint64_t this)
{
  *(unsigned char *)(this + 41) = 1;
  return this;
}

uint64_t NeuralNetwork::isFirstLayer(NeuralNetwork *this)
{
  return *((unsigned __int8 *)this + 41);
}

float Parallel::log2Probability(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1[10];
  if (a1[11] == v3) {
    return 0.0;
  }
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  float v8 = 0.0;
  do
  {
    float v8 = v8
       + (*(float (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 8 * v7) + 352))(*(void *)(v3 + 8 * v7), a1[25] + v6, a3);
    ++v7;
    uint64_t v3 = a1[10];
    v6 += 24;
  }
  while (v7 < (a1[11] - v3) >> 3);
  return v8;
}

void Parallel::computeError(uint64_t a1, float ***a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v12 = *(int **)(a1 + 256);
  int v13 = 0;
  uint64_t v14 = *(void *)(a1 + 264) - (void)v12;
  if (v14)
  {
    unint64_t v15 = v14 >> 2;
    if (v15 <= 1) {
      unint64_t v15 = 1;
    }
    do
    {
      int v16 = *v12++;
      v13 += v16;
      --v15;
    }
    while (v15);
  }
  VVector<float>::print(*a2, "Parallel:: computeError: targets for feature vector[0] = ", v13);
  int v17 = *(int **)(a1 + 256);
  int v18 = 0;
  uint64_t v19 = *(void *)(a1 + 264) - (void)v17;
  if (v19)
  {
    unint64_t v20 = v19 >> 2;
    if (v20 <= 1) {
      unint64_t v20 = 1;
    }
    do
    {
      int v21 = *v17++;
      v18 += v21;
      --v20;
    }
    while (v20);
  }
  VVector<float>::print(*a2 + 1, "Parallel:: computeError: targets for feature vector[1] = ", v18);
  memset(v42, 0, sizeof(v42));
  std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(v42, *(const void **)(a1 + 80), *(void *)(a1 + 88), (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3);
  std::string __p = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 256), *(void *)(a1 + 264), (uint64_t)(*(void *)(a1 + 264) - *(void *)(a1 + 256)) >> 2);
  Parallel::split(a1, (uint64_t *)v42, (void *)(a1 + 200), (uint64_t *)a2, &__p, a4);
  if (__p)
  {
    uint64_t v40 = __p;
    operator delete(__p);
  }
  if (v42[0]) {
    operator delete(v42[0]);
  }
  char v22 = **(float ****)(a1 + 200);
  int v23 = (*(uint64_t (**)(void))(***(void ***)(a1 + 80) + 272))(**(void **)(a1 + 80));
  VVector<float>::print(v22, "Parallel:: computeError: targets for sub network[0], feature vec#0", v23);
  char v24 = *(float ***)(*(void *)(a1 + 200) + 24);
  int v25 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 80) + 8) + 272))();
  VVector<float>::print(v24, "Parallel:: computeError: targets for sub network[1], feature vec#0", v25);
  uint64_t v26 = (float **)(**(void **)(a1 + 200) + 8);
  int v27 = (*(uint64_t (**)(void))(***(void ***)(a1 + 80) + 272))();
  VVector<float>::print(v26, "Parallel:: computeError: targets for sub network[0], feature vec#1", v27);
  uint64_t v28 = (float **)(*(void *)(*(void *)(a1 + 200) + 24) + 8);
  int v29 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 80) + 8) + 272))();
  VVector<float>::print(v28, "Parallel:: computeError: targets for sub network[1], feature vec#1", v29);
  long long v30 = *(void ***)(a1 + 80);
  uint64_t v31 = *(void *)(a1 + 88);
  if ((void **)v31 == v30)
  {
    unint64_t v34 = (v31 - (uint64_t)v30) >> 3;
    long long v30 = *(void ***)(a1 + 88);
  }
  else
  {
    uint64_t v32 = 0;
    unint64_t v33 = 0;
    do
    {
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v30[v33] + 344))(v30[v33], *(void *)(a1 + 200) + v32, *(void *)(a1 + 176) + v32, a4, a5, a6);
      ++v33;
      long long v30 = *(void ***)(a1 + 80);
      uint64_t v31 = *(void *)(a1 + 88);
      unint64_t v34 = (v31 - (uint64_t)v30) >> 3;
      v32 += 24;
    }
    while (v34 > v33);
  }
  memset(v38, 0, sizeof(v38));
  std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(v38, v30, v31, v34);
  uint64_t v35 = 0;
  size_t v36 = 0;
  uint64_t v37 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v35, *(const void **)(a1 + 256), *(void *)(a1 + 264), (uint64_t)(*(void *)(a1 + 264) - *(void *)(a1 + 256)) >> 2);
  Parallel::merge(a1, a3, (void *)(a1 + 176), &v35, a4);
  if (v35)
  {
    size_t v36 = v35;
    operator delete(v35);
  }
  if (v38[0]) {
    operator delete(v38[0]);
  }
}

void sub_1928DD84C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void VVector<float>::print(float **a1, char *a2, int a3)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  sprintf(v67, "0x%lx", *a1);
  std::string::basic_string[abi:ne180100]<0>(v65, "() ");
  if (a3 <= 0) {
    goto LABEL_7;
  }
  uint64_t v6 = *a1;
  uint64_t v7 = a3;
  char v8 = 1;
  do
  {
    float v9 = *v6++;
    BOOL v10 = v9 >= -1.0;
    if (v9 > 1.0) {
      BOOL v10 = 0;
    }
    v8 &= v10;
    --v7;
  }
  while (v7);
  if (v8) {
LABEL_7:
  }
    int v11 = "inRange:yes";
  else {
    int v11 = "inRange:no";
  }
  std::string::basic_string[abi:ne180100]<0>(&v49, v11);
  int v12 = std::string::insert(&v49, 0, " (");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  uint64_t v14 = std::string::append(&v58, ") ");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  int64_t v64 = v14->__r_.__value_.__r.__words[2];
  long long v63 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v58);
  v56[0] = 0;
  v56[1] = 0;
  uint64_t v57 = 0;
  std::ostream::operator<<();
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v58, (uint64_t)v56);
  std::operator+<char>();
  int v16 = std::string::append(&v49, "] ");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  int64_t v55 = v16->__r_.__value_.__r.__words[2];
  long long v54 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v49);
  std::string::basic_string[abi:ne180100]<0>(&v44, a2);
  if (v64 >= 0) {
    int v18 = (const std::string::value_type *)&v63;
  }
  else {
    int v18 = (const std::string::value_type *)v63;
  }
  if (v64 >= 0) {
    std::string::size_type v19 = HIBYTE(v64);
  }
  else {
    std::string::size_type v19 = *((void *)&v63 + 1);
  }
  unint64_t v20 = std::string::append(&v44, v18, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if ((v66 & 0x80u) == 0) {
    char v22 = (const std::string::value_type *)v65;
  }
  else {
    char v22 = (const std::string::value_type *)v65[0];
  }
  if ((v66 & 0x80u) == 0) {
    std::string::size_type v23 = v66;
  }
  else {
    std::string::size_type v23 = (std::string::size_type)v65[1];
  }
  char v24 = std::string::append(&v45, v22, v23);
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (v55 >= 0) {
    uint64_t v26 = (const std::string::value_type *)&v54;
  }
  else {
    uint64_t v26 = (const std::string::value_type *)v54;
  }
  if (v55 >= 0) {
    std::string::size_type v27 = HIBYTE(v55);
  }
  else {
    std::string::size_type v27 = *((void *)&v54 + 1);
  }
  uint64_t v28 = std::string::append(&v46, v26, v27);
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  long long v30 = std::string::append(&v47, "[ ");
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (a3 >= 1)
  {
    uint64_t v32 = 0;
    if (a3 >= 1000) {
      unsigned int v33 = 1000;
    }
    else {
      unsigned int v33 = a3;
    }
    uint64_t v34 = 4 * v33;
    do
    {
      memset(&v47, 0, sizeof(v47));
      std::ios_base::clear((std::ios_base *)((char *)&v49 + *(void *)(v49.__r_.__value_.__r.__words[0] - 24)), 0);
      std::ostream::operator<<();
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v49, (uint64_t)&v47);
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v47.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v46, size + 3);
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v36 = &v46;
      }
      else {
        size_t v36 = (std::string *)v46.__r_.__value_.__r.__words[0];
      }
      if (size)
      {
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v37 = &v47;
        }
        else {
          uint64_t v37 = (std::string *)v47.__r_.__value_.__r.__words[0];
        }
        memmove(v36, v37, size);
      }
      *(_DWORD *)((char *)&v36->__r_.__value_.__l.__data_ + size) = 2108448;
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v38 = &v46;
      }
      else {
        uint64_t v38 = (std::string *)v46.__r_.__value_.__r.__words[0];
      }
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v39 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v39 = v46.__r_.__value_.__l.__size_;
      }
      std::string::append(&v48, (const std::string::value_type *)v38, v39);
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v47.__r_.__value_.__l.__data_);
      }
      v32 += 4;
    }
    while (v34 != v32);
  }
  std::string::append(&v48, "]");
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  v49.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA408];
  std::string::size_type v40 = v49.__r_.__value_.__r.__words[0];
  std::string::size_type v41 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  std::string::size_type v42 = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(std::string::size_type *)((char *)v49.__r_.__value_.__r.__words + *(void *)(v49.__r_.__value_.__r.__words[0] - 24)) = v42;
  std::string::size_type v43 = v41;
  v49.__r_.__value_.__r.__words[2] = v41;
  uint64_t v50 = MEMORY[0x1E4FBA470] + 16;
  if (v52 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x192FF15B0](&v53);
  if (SHIBYTE(v55) < 0) {
    operator delete((void *)v54);
  }
  if (SHIBYTE(v57) < 0) {
    operator delete(v56[0]);
  }
  v58.__r_.__value_.__r.__words[0] = v40;
  *(std::string::size_type *)((char *)v58.__r_.__value_.__r.__words + *(void *)(v40 - 24)) = v42;
  v58.__r_.__value_.__r.__words[2] = v43;
  uint64_t v59 = MEMORY[0x1E4FBA470] + 16;
  if (v61 < 0) {
    operator delete(v60);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x192FF15B0](&v62);
  if (SHIBYTE(v64) < 0) {
    operator delete((void *)v63);
  }
  if ((char)v66 < 0) {
    operator delete(v65[0]);
  }
}

void sub_1928DDF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a33);
  if (a72 < 0) {
    operator delete(a68);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a75);
  if (*(char *)(v75 - 233) < 0) {
    operator delete(*(void **)(v75 - 256));
  }
  if (*(char *)(v75 - 209) < 0) {
    operator delete(*(void **)(v75 - 232));
  }
  _Unwind_Resume(a1);
}

uint64_t Parallel::split(uint64_t result, uint64_t *a2, void *a3, uint64_t *a4, void *a5, int a6)
{
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (v6 != *a2)
  {
    uint64_t v10 = result;
    unint64_t v11 = 0;
    int v12 = 0;
    do
    {
      if (a6 >= 1)
      {
        uint64_t v13 = 0;
        int v23 = v12;
        uint64_t v14 = 4 * v12;
        do
        {
          uint64_t v15 = *(void *)(*a3 + 24 * v11);
          uint64_t v16 = *a4;
          uint64_t v17 = *(unsigned int *)(*a5 + 4 * v11);
          size_t result = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 272))(v10);
          if ((int)v17 >= 1)
          {
            int v18 = *(_DWORD **)(v15 + 8 * v13);
            std::string::size_type v19 = (int *)(*(void *)(v16 + 8 * v13) + v14);
            do
            {
              int v20 = *v19++;
              *v18++ = v20;
              --v17;
            }
            while (v17);
          }
          ++v13;
        }
        while (v13 != a6);
        uint64_t v7 = *a2;
        uint64_t v6 = a2[1];
        int v12 = v23;
      }
      v12 += *(_DWORD *)(*a5 + 4 * v11++);
    }
    while (v11 < (v6 - v7) >> 3);
  }
  return result;
}

uint64_t Parallel::merge(uint64_t result, uint64_t *a2, void *a3, void *a4, int a5)
{
  uint64_t v6 = *(void *)(result + 80);
  uint64_t v5 = *(void *)(result + 88);
  if (v5 != v6)
  {
    float v9 = (void *)result;
    unint64_t v10 = 0;
    int v11 = 0;
    do
    {
      if (a5 >= 1)
      {
        uint64_t v12 = 0;
        int v21 = v11;
        uint64_t v13 = 4 * v11;
        do
        {
          uint64_t v14 = *a2;
          uint64_t v15 = *(void *)(*a3 + 24 * v10);
          uint64_t v16 = *(unsigned int *)(*a4 + 4 * v10);
          size_t result = (*(uint64_t (**)(void *))(*v9 + 272))(v9);
          if ((int)v16 >= 1)
          {
            uint64_t v17 = *(int **)(v15 + 8 * v12);
            int v18 = (_DWORD *)(*(void *)(v14 + 8 * v12) + v13);
            do
            {
              int v19 = *v17++;
              *v18++ = v19;
              --v16;
            }
            while (v16);
          }
          ++v12;
        }
        while (v12 != a5);
        uint64_t v6 = v9[10];
        uint64_t v5 = v9[11];
        int v11 = v21;
      }
      v11 += *(_DWORD *)(*a4 + 4 * v10++);
    }
    while (v10 < (v5 - v6) >> 3);
  }
  return result;
}

void *Parallel::updateFrom(Parallel *this, NeuralNetwork *lpsrc, float a3, float a4, uint64_t a5)
{
  if (!result) {
    __cxa_bad_cast();
  }
  uint64_t v10 = *((void *)this + 10);
  if (*((void *)this + 11) != v10)
  {
    uint64_t v11 = (uint64_t)result;
    unint64_t v12 = 0;
    do
    {
      size_t result = (void *)(*(uint64_t (**)(void, void, uint64_t, float, float))(**(void **)(v10 + 8 * v12)
                                                                                        + 336))(*(void *)(v10 + 8 * v12), *(void *)(*(void *)(v11 + 80) + 8 * v12), a5, a3, a4);
      ++v12;
      uint64_t v10 = *((void *)this + 10);
    }
    while (v12 < (*((void *)this + 11) - v10) >> 3);
  }
  return result;
}

void *Parallel::setMaster(Parallel *this, NeuralNetwork *lpsrc)
{
  if (!result) {
    __cxa_bad_cast();
  }
  uint64_t v4 = *((void *)this + 10);
  if (*((void *)this + 11) != v4)
  {
    uint64_t v5 = (uint64_t)result;
    unint64_t v6 = 0;
    do
    {
      size_t result = (void *)(*(uint64_t (**)(void, void))(**(void **)(v4 + 8 * v6) + 328))(*(void *)(v4 + 8 * v6), *(void *)(*(void *)(v5 + 80) + 8 * v6));
      ++v6;
      uint64_t v4 = *((void *)this + 10);
    }
    while (v6 < (*((void *)this + 11) - v4) >> 3);
  }
  return result;
}

void Parallel::forward(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = a1;
  LODWORD(v10) = a4 & 0xFFFFFF;
  uint64_t v11 = *(void ***)(a1 + 80);
  uint64_t v12 = *(void *)(a1 + 88);
  if ((void **)v12 == v11)
  {
    unint64_t v63 = 0;
    uint64_t v11 = *(void ***)(a1 + 88);
  }
  else
  {
    unint64_t v13 = 0;
    uint64_t v99 = a4 & 0xFFFFFF;
    uint64_t v14 = (int)v10 - 1;
    do
    {
      uint64_t v15 = *(void *)(v9 + 224);
      uint64_t v16 = a2;
      if (v15)
      {
        uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 32))(v15);
        uint64_t v11 = *(void ***)(v9 + 80);
      }
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v11[v13] + 304))(v11[v13], v16, a3, v99, a5, a6, a7);
      i2s(&v110);
      uint64_t v17 = std::string::insert(&v110, 0, "Parallel: nFeatureVectors = ");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v111.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      int v19 = std::string::append(&v111, " network = ");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v112.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      i2s(&v109);
      if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v21 = &v109;
      }
      else {
        int v21 = (std::string *)v109.__r_.__value_.__r.__words[0];
      }
      if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v109.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v109.__r_.__value_.__l.__size_;
      }
      int v23 = std::string::append(&v112, (const std::string::value_type *)v21, size);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v113.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      long long v25 = std::string::append(&v113, " first output[");
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v114.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      i2s(&__p);
      if ((v108 & 0x80u) == 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if ((v108 & 0x80u) == 0) {
        std::string::size_type v28 = v108;
      }
      else {
        std::string::size_type v28 = v107;
      }
      long long v29 = std::string::append(&v114, p_p, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v115.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      long long v31 = std::string::append(&v115, "]");
      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      std::string::size_type v117 = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)uint64_t v116 = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v115.__r_.__value_.__l.__data_);
      }
      if ((char)v108 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v114.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v113.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v109.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v112.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v111.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v110.__r_.__value_.__l.__data_);
      }
      uint64_t v33 = *(void *)(*(void *)(v9 + 80) + 8 * v13);
      uint64_t v34 = *(float ***)(*(uint64_t (**)(uint64_t))(*(void *)v33 + 32))(v33);
      int v35 = SHIBYTE(v117);
      size_t v36 = (char *)v116[0];
      uint64_t v37 = *(void *)(*(void *)(a1 + 80) + 8 * v13);
      int v38 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 272))(v37);
      if (v35 >= 0) {
        std::string::size_type v39 = (char *)v116;
      }
      else {
        std::string::size_type v39 = v36;
      }
      VVector<float>::print(v34, v39, v38);
      i2s(&v109);
      std::string::size_type v40 = std::string::insert(&v109, 0, "Parallel: nFeatureVectors = ");
      long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      v110.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v41;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v42 = std::string::append(&v110, " network = ");
      long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      v111.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      i2s(&__p);
      if ((v108 & 0x80u) == 0) {
        std::string v44 = (const std::string::value_type *)&__p;
      }
      else {
        std::string v44 = (const std::string::value_type *)__p;
      }
      if ((v108 & 0x80u) == 0) {
        std::string::size_type v45 = v108;
      }
      else {
        std::string::size_type v45 = v107;
      }
      std::string v46 = std::string::append(&v111, v44, v45);
      long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      v112.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v47;
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      std::string v48 = std::string::append(&v112, " last output[");
      long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      v113.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      i2s(v104);
      if ((v105 & 0x80u) == 0) {
        uint64_t v50 = v104;
      }
      else {
        uint64_t v50 = (void **)v104[0];
      }
      if ((v105 & 0x80u) == 0) {
        std::string::size_type v51 = v105;
      }
      else {
        std::string::size_type v51 = (std::string::size_type)v104[1];
      }
      char v52 = std::string::append(&v113, (const std::string::value_type *)v50, v51);
      long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
      v114.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v53;
      v52->__r_.__value_.__l.__size_ = 0;
      v52->__r_.__value_.__r.__words[2] = 0;
      v52->__r_.__value_.__r.__words[0] = 0;
      long long v54 = std::string::append(&v114, "]");
      long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      v115.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v55;
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v114.__r_.__value_.__l.__data_);
      }
      if ((char)v105 < 0) {
        operator delete(v104[0]);
      }
      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v113.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v112.__r_.__value_.__l.__data_);
      }
      if ((char)v108 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v111.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v110.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v109.__r_.__value_.__l.__data_);
      }
      uint64_t v56 = *(void *)(*(void *)(a1 + 80) + 8 * v13);
      uint64_t v57 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)v56 + 32))(v56);
      int v58 = SHIBYTE(v115.__r_.__value_.__r.__words[2]);
      std::string::size_type v59 = v115.__r_.__value_.__r.__words[0];
      uint64_t v60 = *(void *)(*(void *)(a1 + 80) + 8 * v13);
      int v61 = (*(uint64_t (**)(uint64_t))(*(void *)v60 + 272))(v60);
      if (v58 >= 0) {
        uint64_t v62 = &v115;
      }
      else {
        uint64_t v62 = (std::string *)v59;
      }
      VVector<float>::print((float **)(v57 + 8 * v14), (char *)v62, v61);
      if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v115.__r_.__value_.__l.__data_);
      }
      uint64_t v9 = a1;
      if (SHIBYTE(v117) < 0) {
        operator delete(v116[0]);
      }
      ++v13;
      uint64_t v11 = *(void ***)(a1 + 80);
      uint64_t v12 = *(void *)(a1 + 88);
      unint64_t v63 = (v12 - (uint64_t)v11) >> 3;
    }
    while (v63 > v13);
    if ((void **)v12 == v11)
    {
      uint64_t v11 = *(void ***)(a1 + 88);
      LODWORD(v10) = v99;
    }
    else
    {
      uint64_t v64 = 0;
      std::string::size_type v91 = *(void *)(MEMORY[0x1E4FBA408] + 72);
      uint64_t v92 = *(void **)(MEMORY[0x1E4FBA408] + 64);
      uint64_t v10 = v99;
      char v95 = (void *)*MEMORY[0x1E4FBA408];
      do
      {
        uint64_t v97 = v64;
        unint64_t v65 = (uint64_t **)(*(uint64_t (**)(void *))(*v11[v64] + 32))(v11[v64]);
        int v66 = (*(uint64_t (**)(void))(***(void ***)(v9 + 80) + 272))();
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v116);
        memset(&v115, 0, sizeof(v115));
        if (v10)
        {
          uint64_t v67 = 0;
          uint64_t v68 = 0;
          do
          {
            std::ios_base::clear((std::ios_base *)((char *)v116 + *((void *)v116[0] - 3)), 0);
            std::ostream::operator<<();
            std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)v116, (uint64_t)&v115);
            std::string::basic_string[abi:ne180100]<0>(&v111, "IN (outputOfASubNetwork) Parallel output from LSTM::output");
            std::string::basic_string[abi:ne180100]<0>(&v110, " [");
            if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v69 = &v110;
            }
            else {
              uint64_t v69 = (std::string *)v110.__r_.__value_.__r.__words[0];
            }
            if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v70 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v70 = v110.__r_.__value_.__l.__size_;
            }
            uint64_t v71 = std::string::append(&v111, (const std::string::value_type *)v69, v70);
            long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
            v112.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v72;
            v71->__r_.__value_.__l.__size_ = 0;
            v71->__r_.__value_.__r.__words[2] = 0;
            v71->__r_.__value_.__r.__words[0] = 0;
            if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v73 = &v115;
            }
            else {
              uint64_t v73 = (std::string *)v115.__r_.__value_.__r.__words[0];
            }
            if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v74 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v74 = v115.__r_.__value_.__l.__size_;
            }
            uint64_t v75 = std::string::append(&v112, (const std::string::value_type *)v73, v74);
            long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
            v113.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v76;
            v75->__r_.__value_.__l.__size_ = 0;
            v75->__r_.__value_.__r.__words[2] = 0;
            v75->__r_.__value_.__r.__words[0] = 0;
            std::string::basic_string[abi:ne180100]<0>(&v109, "] ");
            if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v77 = &v109;
            }
            else {
              uint64_t v77 = (std::string *)v109.__r_.__value_.__r.__words[0];
            }
            if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v78 = HIBYTE(v109.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v78 = v109.__r_.__value_.__l.__size_;
            }
            uint64_t v79 = std::string::append(&v113, (const std::string::value_type *)v77, v78);
            long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
            v114.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v80;
            v79->__r_.__value_.__l.__size_ = 0;
            v79->__r_.__value_.__r.__words[2] = 0;
            v79->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v109.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v113.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v112.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v110.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v111.__r_.__value_.__l.__data_);
            }
            if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v81 = &v114;
            }
            else {
              uint64_t v81 = (std::string *)v114.__r_.__value_.__r.__words[0];
            }
            VVector<float>::print((float **)&(*v65)[v67], (char *)v81, v66);
            if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v114.__r_.__value_.__l.__data_);
            }
            ++v68;
            ++v67;
          }
          while (v99 != v68);
          uint64_t v9 = a1;
          uint64_t v10 = v99;
          if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v115.__r_.__value_.__l.__data_);
          }
        }
        v116[0] = v95;
        *(void **)((char *)v116 + *((void *)v95 - 3)) = v92;
        std::string::size_type v117 = v91;
        uint64_t v118 = MEMORY[0x1E4FBA470] + 16;
        if (v120 < 0) {
          operator delete(v119);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x192FF15B0](&v121);
        if (v10)
        {
          long long v82 = *v65;
          uint64_t v83 = *(void **)(*(void *)(v9 + 152) + 24 * v97);
          uint64_t v84 = v10;
          do
          {
            uint64_t v85 = *v82++;
            *v83++ = v85;
            --v84;
          }
          while (v84);
        }
        uint64_t v64 = v97 + 1;
        uint64_t v11 = *(void ***)(v9 + 80);
        uint64_t v12 = *(void *)(v9 + 88);
        unint64_t v63 = (v12 - (uint64_t)v11) >> 3;
      }
      while (v63 > v97 + 1);
    }
  }
  memset(v103, 0, sizeof(v103));
  std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(v103, v11, v12, v63);
  uint64_t v100 = 0;
  long long v101 = 0;
  uint64_t v102 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v100, *(const void **)(v9 + 256), *(void *)(v9 + 264), (uint64_t)(*(void *)(v9 + 264) - *(void *)(v9 + 256)) >> 2);
  Parallel::merge(v9, (uint64_t *)(v9 + 104), (void *)(v9 + 152), &v100, v10);
  if (v100)
  {
    long long v101 = v100;
    operator delete(v100);
  }
  if (v103[0]) {
    operator delete(v103[0]);
  }
  std::string v86 = *(int **)(v9 + 256);
  int v87 = 0;
  uint64_t v88 = *(void *)(v9 + 264) - (void)v86;
  if (v88)
  {
    unint64_t v89 = v88 >> 2;
    if (v89 <= 1) {
      unint64_t v89 = 1;
    }
    do
    {
      int v90 = *v86++;
      v87 += v90;
      --v89;
    }
    while (v89);
  }
  VVector<float>::print(*(float ***)(v9 + 104), "Parallel:: forward: merged output = ", v87);
}

void sub_1928DEF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a23) {
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

void Parallel::backward(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  memset(v16, 0, sizeof(v16));
  std::vector<NeuralNetwork *>::__init_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>(v16, *(const void **)(a1 + 80), *(void *)(a1 + 88), (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3);
  std::string __p = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 256), *(void *)(a1 + 264), (uint64_t)(*(void *)(a1 + 264) - *(void *)(a1 + 256)) >> 2);
  Parallel::split(a1, (uint64_t *)v16, (void *)(a1 + 176), a4, &__p, a5);
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }
  if (v16[0]) {
    operator delete(v16[0]);
  }
  int v10 = ((*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3) - 1;
  if (v10 >= 0)
  {
    uint64_t v11 = 8 * (((*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3) - 1);
    uint64_t v12 = 24 * v10;
    do
    {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(*(void *)(a1 + 80) + v11)
                                                                         + 296))(*(void *)(*(void *)(a1 + 80) + v11), a2, a3, *(void *)(a1 + 176) + v12, a5);
      v11 -= 8;
      v12 -= 24;
    }
    while (v11 != -8);
  }
}

void sub_1928DF2E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Parallel::update(uint64_t this, float a2, float a3)
{
  uint64_t v3 = *(void *)(this + 80);
  if (*(void *)(this + 88) != v3)
  {
    uint64_t v6 = this;
    unint64_t v7 = 0;
    do
    {
      this = (*(uint64_t (**)(void, float, float))(**(void **)(v3 + 8 * v7) + 288))(*(void *)(v3 + 8 * v7), a2, a3);
      ++v7;
      uint64_t v3 = *(void *)(v6 + 80);
    }
    while (v7 < (*(void *)(v6 + 88) - v3) >> 3);
  }
  return this;
}

uint64_t Parallel::setPredictionMode(uint64_t this, uint64_t a2)
{
  uint64_t v2 = *(void *)(this + 80);
  if (*(void *)(this + 88) != v2)
  {
    uint64_t v4 = this;
    unint64_t v5 = 0;
    do
    {
      this = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 8 * v5) + 280))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 80);
    }
    while (v5 < (*(void *)(v4 + 88) - v2) >> 3);
  }
  return this;
}

uint64_t Parallel::noutputs(Parallel *this)
{
  uint64_t v1 = *((void *)this + 10);
  if (*((void *)this + 11) == v1) {
    return 0;
  }
  unint64_t v3 = 0;
  LODWORD(v4) = 0;
  do
  {
    uint64_t v4 = (*(unsigned int (**)(void))(**(void **)(v1 + 8 * v3) + 272))(*(void *)(v1 + 8 * v3))
       + v4;
    ++v3;
    uint64_t v1 = *((void *)this + 10);
  }
  while (v3 < (*((void *)this + 11) - v1) >> 3);
  return v4;
}

uint64_t Parallel::ninputs(Parallel *this)
{
  return (*(uint64_t (**)(void))(***((void ***)this + 10) + 264))();
}

void *Parallel::cleanupAllBuffers(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[10];
  if (this[11] != v2)
  {
    unint64_t v3 = 0;
    do
    {
      this = (void *)(*(uint64_t (**)(void))(**(void **)(v2 + 8 * v3) + 208))(*(void *)(v2 + 8 * v3));
      ++v3;
      uint64_t v2 = v1[10];
    }
    while (v3 < (v1[11] - v2) >> 3);
  }
  uint64_t v5 = v1[6];
  uint64_t v4 = v1[7];
  if (v4 == v5)
  {
    uint64_t v5 = v1[7];
  }
  else
  {
    unint64_t v6 = 0;
    do
    {
      this = *(void **)(v5 + 8 * v6);
      if (this)
      {
        this = (void *)MEMORY[0x192FF1690](this, 0x1000C8052888210);
        uint64_t v5 = v1[6];
        uint64_t v4 = v1[7];
      }
      ++v6;
    }
    while (v6 < (v4 - v5) >> 3);
  }
  v1[7] = v5;
  return this;
}

void Parallel::allocAllBuffers(char **this)
{
  Parallel::init(this);
  uint64_t v2 = this[10];
  if (this[11] != v2)
  {
    unint64_t v3 = 0;
    do
    {
      (*(void (**)(void))(**(void **)&v2[8 * v3] + 200))(*(void *)&v2[8 * v3]);
      ++v3;
      uint64_t v2 = this[10];
    }
    while (v3 < (this[11] - v2) >> 3);
  }
}

void Parallel::init(char **this)
{
  std::vector<VVector<float>>::resize(this + 13, maxFeatureVectors);
  std::vector<VVector<float>>::resize(this + 16, maxFeatureVectors);
  if (maxFeatureVectors >= 1) {
    operator new[]();
  }
  std::vector<std::vector<VVector<float>>>::resize((uint64_t)(this + 22), (this[11] - this[10]) >> 3);
  std::vector<std::vector<VVector<float>>>::resize((uint64_t)(this + 19), (this[11] - this[10]) >> 3);
  std::vector<std::vector<VVector<float>>>::resize((uint64_t)(this + 25), (this[11] - this[10]) >> 3);
  this[30] = this[29];
  uint64_t v2 = (void **)(this + 32);
  uint64_t v33 = (void **)(this + 29);
  this[33] = this[32];
  unint64_t v3 = this[10];
  if (this[11] != v3)
  {
    unint64_t v4 = 0;
    do
    {
      int v5 = (*(uint64_t (**)(void))(**(void **)&v3[8 * v4] + 272))(*(void *)&v3[8 * v4]);
      int v6 = v5;
      char v8 = this[33];
      unint64_t v7 = this[34];
      if (v8 >= v7)
      {
        int v10 = (char *)*v2;
        uint64_t v11 = (v8 - (unsigned char *)*v2) >> 2;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v7 - v10;
        if (v13 >> 1 > v12) {
          unint64_t v12 = v13 >> 1;
        }
        BOOL v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL;
        unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v14) {
          unint64_t v15 = v12;
        }
        if (v15)
        {
          unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v15);
          int v10 = this[32];
          char v8 = this[33];
        }
        else
        {
          uint64_t v16 = 0;
        }
        uint64_t v17 = (char *)(v15 + 4 * v11);
        *(_DWORD *)uint64_t v17 = v6;
        uint64_t v9 = v17 + 4;
        while (v8 != v10)
        {
          int v18 = *((_DWORD *)v8 - 1);
          v8 -= 4;
          *((_DWORD *)v17 - 1) = v18;
          v17 -= 4;
        }
        this[32] = v17;
        this[33] = v9;
        this[34] = (char *)(v15 + 4 * v16);
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        *(_DWORD *)char v8 = v5;
        uint64_t v9 = v8 + 4;
      }
      this[33] = v9;
      uint64_t v19 = *(void *)&this[10][8 * v4];
      int v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 264))(v19);
      int v21 = v20;
      int v23 = this[30];
      char v22 = this[31];
      if (v23 >= v22)
      {
        long long v25 = (char *)*v33;
        uint64_t v26 = (v23 - (unsigned char *)*v33) >> 2;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v28 = v22 - v25;
        if (v28 >> 1 > v27) {
          unint64_t v27 = v28 >> 1;
        }
        BOOL v14 = (unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL;
        unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v14) {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          unint64_t v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v29);
          long long v25 = this[29];
          int v23 = this[30];
        }
        else
        {
          uint64_t v30 = 0;
        }
        long long v31 = (char *)(v29 + 4 * v26);
        *(_DWORD *)long long v31 = v21;
        long long v24 = v31 + 4;
        while (v23 != v25)
        {
          int v32 = *((_DWORD *)v23 - 1);
          v23 -= 4;
          *((_DWORD *)v31 - 1) = v32;
          v31 -= 4;
        }
        this[29] = v31;
        this[30] = v24;
        this[31] = (char *)(v29 + 4 * v30);
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        *(_DWORD *)int v23 = v20;
        long long v24 = v23 + 4;
      }
      this[30] = v24;
      std::vector<VVector<float>>::resize((char **)&this[22][24 * v4], maxFeatureVectors);
      std::vector<VVector<float>>::resize((char **)&this[19][24 * v4], maxFeatureVectors);
      std::vector<VVector<float>>::resize((char **)&this[25][24 * v4], maxFeatureVectors);
      if (maxFeatureVectors >= 1) {
        operator new[]();
      }
      ++v4;
      unint64_t v3 = this[10];
    }
    while (v4 < (this[11] - v3) >> 3);
  }
}

void std::vector<std::vector<VVector<float>>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void **)a1;
  unint64_t v3 = *(void **)(a1 + 8);
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(void *)a1) >> 3);
  unint64_t v6 = a2 - v5;
  if (a2 > v5)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v3) >> 3) >= v6)
    {
      bzero(*(void **)(a1 + 8), 24 * ((24 * v6 - 24) / 0x18) + 24);
      *(void *)(a1 + 8) = &v3[3 * ((24 * v6 - 24) / 0x18) + 3];
      return;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v4) >> 3);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= a2) {
      uint64_t v9 = a2;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v11 = 3 * v10;
    unint64_t v12 = (char *)operator new(24 * v10);
    uint64_t v13 = &v12[24 * v5];
    BOOL v14 = &v12[8 * v11];
    size_t v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
    bzero(v13, v15);
    uint64_t v16 = &v13[v15];
    if (v3 == v4)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (!v3) {
        return;
      }
    }
    else
    {
      do
      {
        uint64_t v17 = v13;
        *((void *)v13 - 1) = 0;
        long long v18 = *(_OWORD *)(v3 - 3);
        v3 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((void *)v17 - 1) = v3[2];
        void *v3 = 0;
        v3[1] = 0;
        v3[2] = 0;
      }
      while (v3 != v4);
      uint64_t v19 = *(void **)a1;
      unint64_t v3 = *(void **)(a1 + 8);
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (v3 != v19)
      {
        int v20 = v3;
        do
        {
          char v22 = (void *)*(v20 - 3);
          v20 -= 3;
          int v21 = v22;
          if (v22)
          {
            *(v3 - 2) = v21;
            operator delete(v21);
          }
          unint64_t v3 = v20;
        }
        while (v20 != v19);
        unint64_t v3 = v19;
      }
      if (!v3) {
        return;
      }
    }
    operator delete(v3);
    return;
  }
  if (a2 < v5)
  {
    int v23 = &v4[3 * a2];
    if (v3 != v23)
    {
      long long v24 = *(void **)(a1 + 8);
      do
      {
        uint64_t v26 = (void *)*(v24 - 3);
        v24 -= 3;
        long long v25 = v26;
        if (v26)
        {
          *(v3 - 2) = v25;
          operator delete(v25);
        }
        unint64_t v3 = v24;
      }
      while (v24 != v23);
    }
    *(void *)(a1 + 8) = v23;
  }
}

uint64_t Parallel::setSpecialBidir(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 80);
  if (*(void *)(this + 88) != v1)
  {
    uint64_t v2 = this;
    unint64_t v3 = 0;
    do
    {
      this = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 184))(*(void *)(v1 + 8 * v3));
      ++v3;
      uint64_t v1 = *(void *)(v2 + 80);
    }
    while (v3 < (*(void *)(v2 + 88) - v1) >> 3);
  }
  return this;
}

uint64_t Parallel::setWeightMatrices(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      size_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 8 * v5) + 176))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 80);
    }
    while (v5 < (*(void *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t Parallel::getWeightMatrices(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      size_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 8 * v5) + 168))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 80);
    }
    while (v5 < (*(void *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t Parallel::resetForNewBatch(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 80);
  if (*(void *)(this + 88) != v1)
  {
    uint64_t v2 = this;
    unint64_t v3 = 0;
    do
    {
      this = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 160))(*(void *)(v1 + 8 * v3));
      ++v3;
      uint64_t v1 = *(void *)(v2 + 80);
    }
    while (v3 < (*(void *)(v2 + 88) - v1) >> 3);
  }
  return this;
}

uint64_t Parallel::clearState(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v3)
  {
    uint64_t v6 = result;
    unint64_t v7 = 0;
    do
    {
      size_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 8 * v7) + 152))(*(void *)(v3 + 8 * v7), a2, a3);
      ++v7;
      uint64_t v3 = *(void *)(v6 + 80);
    }
    while (v7 < (*(void *)(v6 + 88) - v3) >> 3);
  }
  return result;
}

uint64_t Parallel::restoreState(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v4)
  {
    uint64_t v8 = result;
    unint64_t v9 = 0;
    do
    {
      size_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v4 + 8 * v9) + 144))(*(void *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      uint64_t v4 = *(void *)(v8 + 80);
    }
    while (v9 < (*(void *)(v8 + 88) - v4) >> 3);
  }
  return result;
}

uint64_t Parallel::saveState(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v4)
  {
    uint64_t v8 = result;
    unint64_t v9 = 0;
    do
    {
      size_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v4 + 8 * v9) + 136))(*(void *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      uint64_t v4 = *(void *)(v8 + 80);
    }
    while (v9 < (*(void *)(v8 + 88) - v4) >> 3);
  }
  return result;
}

uint64_t Parallel::allocInitialState(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      size_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 8 * v5) + 128))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 80);
    }
    while (v5 < (*(void *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t Parallel::normalizeModel(uint64_t this, float a2)
{
  uint64_t v2 = *(void *)(this + 80);
  if (*(void *)(this + 88) != v2)
  {
    uint64_t v4 = this;
    unint64_t v5 = 0;
    do
    {
      this = (*(uint64_t (**)(void, float))(**(void **)(v2 + 8 * v5) + 120))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 80);
    }
    while (v5 < (*(void *)(v4 + 88) - v2) >> 3);
  }
  return this;
}

uint64_t Parallel::clipModel(uint64_t this, float a2)
{
  uint64_t v2 = *(void *)(this + 80);
  if (*(void *)(this + 88) != v2)
  {
    uint64_t v4 = this;
    unint64_t v5 = 0;
    do
    {
      this = (*(uint64_t (**)(void, float))(**(void **)(v2 + 8 * v5) + 112))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 80);
    }
    while (v5 < (*(void *)(v4 + 88) - v2) >> 3);
  }
  return this;
}

void *Parallel::applyGradient(void *this, const NeuralNetwork *lpsrc)
{
  uint64_t v2 = (uint64_t)this;
  if (lpsrc)
  {
    uint64_t v3 = (uint64_t)this;
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(v2 + 80);
  if (*(void *)(v2 + 88) != v4)
  {
    unint64_t v5 = 0;
    do
    {
      this = (void *)(*(uint64_t (**)(void, void))(**(void **)(v4 + 8 * v5) + 104))(*(void *)(v4 + 8 * v5), *(void *)(*(void *)(v3 + 80) + 8 * v5));
      ++v5;
      uint64_t v4 = *(void *)(v2 + 80);
    }
    while (v5 < (*(void *)(v2 + 88) - v4) >> 3);
  }
  return this;
}

void *Parallel::addGradient(void *this, const NeuralNetwork *lpsrc)
{
  uint64_t v2 = (uint64_t)this;
  if (lpsrc)
  {
    uint64_t v3 = (uint64_t)this;
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(v2 + 80);
  if (*(void *)(v2 + 88) != v4)
  {
    unint64_t v5 = 0;
    do
    {
      this = (void *)(*(uint64_t (**)(void, void))(**(void **)(v4 + 8 * v5) + 96))(*(void *)(v4 + 8 * v5), *(void *)(*(void *)(v3 + 80) + 8 * v5));
      ++v5;
      uint64_t v4 = *(void *)(v2 + 80);
    }
    while (v5 < (*(void *)(v2 + 88) - v4) >> 3);
  }
  return this;
}

const NeuralNetwork *Parallel::compareModels(const NeuralNetwork *this, const NeuralNetwork *lpsrc, const NeuralNetwork *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = (uint64_t)this;
  if (lpsrc)
  {
    uint64_t v5 = (uint64_t)this;
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v5 = 0;
  if (a3)
  {
LABEL_3:
    uint64_t v3 = this;
  }
LABEL_4:
  uint64_t v6 = *(void *)(v4 + 80);
  if (*(void *)(v4 + 88) != v6)
  {
    unint64_t v7 = 0;
    do
    {
      this = (const NeuralNetwork *)(*(uint64_t (**)(void, void, void))(**(void **)(v6 + 8 * v7) + 88))(*(void *)(v6 + 8 * v7), *(void *)(*(void *)(v5 + 80) + 8 * v7), *(void *)(*((void *)v3 + 10) + 8 * v7));
      ++v7;
      uint64_t v6 = *(void *)(v4 + 80);
    }
    while (v7 < (*(void *)(v4 + 88) - v6) >> 3);
  }
  return this;
}

const NeuralNetwork *Parallel::subtractModels(const NeuralNetwork *this, const NeuralNetwork *lpsrc, const NeuralNetwork *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = (uint64_t)this;
  if (lpsrc)
  {
    uint64_t v5 = (uint64_t)this;
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v5 = 0;
  if (a3)
  {
LABEL_3:
    uint64_t v3 = this;
  }
LABEL_4:
  uint64_t v6 = *(void *)(v4 + 80);
  if (*(void *)(v4 + 88) != v6)
  {
    unint64_t v7 = 0;
    do
    {
      this = (const NeuralNetwork *)(*(uint64_t (**)(void, void, void))(**(void **)(v6 + 8 * v7) + 80))(*(void *)(v6 + 8 * v7), *(void *)(*(void *)(v5 + 80) + 8 * v7), *(void *)(*((void *)v3 + 10) + 8 * v7));
      ++v7;
      uint64_t v6 = *(void *)(v4 + 80);
    }
    while (v7 < (*(void *)(v4 + 88) - v6) >> 3);
  }
  return this;
}

uint64_t Parallel::write(uint64_t this, __sFILE *a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(this + 80);
  if (*(void *)(this + 88) != v5)
  {
    uint64_t v10 = this;
    unint64_t v11 = 0;
    do
    {
      this = (*(uint64_t (**)(void, __sFILE *, int *, uint64_t, uint64_t))(**(void **)(v5 + 8 * v11) + 72))(*(void *)(v5 + 8 * v11), a2, a3, a4, a5);
      ++v11;
      uint64_t v5 = *(void *)(v10 + 80);
    }
    while (v11 < (*(void *)(v10 + 88) - v5) >> 3);
  }
  return this;
}

uint64_t Parallel::read(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v4)
  {
    uint64_t v8 = result;
    unint64_t v9 = 0;
    do
    {
      size_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v4 + 8 * v9) + 64))(*(void *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      uint64_t v4 = *(void *)(v8 + 80);
    }
    while (v9 < (*(void *)(v8 + 88) - v4) >> 3);
  }
  return result;
}

uint64_t Parallel::weightsAreNaN(Parallel *this)
{
  uint64_t v1 = *((void *)this + 10);
  if (*((void *)this + 11) == v1) {
    return 0;
  }
  unint64_t v3 = 0;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 56))(*(void *)(v1 + 8 * v3));
    if (result) {
      break;
    }
    ++v3;
    uint64_t v1 = *((void *)this + 10);
  }
  while (v3 < (*((void *)this + 11) - v1) >> 3);
  return result;
}

uint64_t Parallel::inputDeltas(Parallel *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 11) - 8) + 48))();
}

uint64_t Parallel::deltas(Parallel *this)
{
  return (uint64_t)this + 128;
}

uint64_t Parallel::outputs(Parallel *this)
{
  return (uint64_t)this + 104;
}

void Parallel::inputs(Parallel *this)
{
}

void Parallel::targets(Parallel *this)
{
}

uint64_t Parallel::setFirstLayerFlag(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 80);
  if (*(void *)(this + 88) != v1)
  {
    uint64_t v2 = this;
    unint64_t v3 = 0;
    do
    {
      this = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 8))(*(void *)(v1 + 8 * v3));
      ++v3;
      uint64_t v1 = *(void *)(v2 + 80);
    }
    while (v3 < (*(void *)(v2 + 88) - v1) >> 3);
  }
  return this;
}

uint64_t Parallel::isFirstLayer(Parallel *this)
{
  return (****((uint64_t (*****)(void))this + 10))(**((void **)this + 10));
}

void ParallelSelector<float>::~ParallelSelector(uint64_t a1)
{
  ParallelSelector<float>::~ParallelSelector(a1);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void **v14;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE320AA8;
  unint64_t v3 = *(void *)(a1 + 280);
  uint64_t v2 = *(void *)(a1 + 288);
  if (v2 == v3)
  {
    unint64_t v3 = *(void *)(a1 + 288);
  }
  else
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void **)(v3 + 8 * v4);
      if (*v5)
      {
        MEMORY[0x192FF1690](*v5, 0x1000C8052888210);
        int *v5 = 0;
        unint64_t v3 = *(void *)(a1 + 280);
        uint64_t v2 = *(void *)(a1 + 288);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  *(void *)(a1 + 288) = v3;
  BOOL v14 = (void **)(a1 + 536);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v14);
  uint64_t v6 = *(void **)(a1 + 504);
  if (v6)
  {
    *(void *)(a1 + 512) = v6;
    operator delete(v6);
  }
  BOOL v14 = (void **)(a1 + 472);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v14);
  unint64_t v7 = *(void **)(a1 + 448);
  if (v7)
  {
    *(void *)(a1 + 456) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(a1 + 424);
  if (v8)
  {
    *(void *)(a1 + 432) = v8;
    operator delete(v8);
  }
  unint64_t v9 = *(void **)(a1 + 400);
  if (v9)
  {
    *(void *)(a1 + 408) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *(void **)(a1 + 376);
  if (v10)
  {
    *(void *)(a1 + 384) = v10;
    operator delete(v10);
  }
  unint64_t v11 = *(void **)(a1 + 352);
  if (v11)
  {
    *(void *)(a1 + 360) = v11;
    operator delete(v11);
  }
  unint64_t v12 = *(void **)(a1 + 304);
  if (v12)
  {
    *(void *)(a1 + 312) = v12;
    operator delete(v12);
  }
  uint64_t v13 = *(void **)(a1 + 280);
  if (v13)
  {
    *(void *)(a1 + 288) = v13;
    operator delete(v13);
  }

  Parallel::~Parallel((Parallel *)a1);
}

float ParallelSelector<float>::log2Probability(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v13 = 0;
  if (a3 < 1) {
    return 0.0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = a3;
  float v6 = 0.0;
  do
  {
    uint64_t v7 = *(int *)(a1 + 332);
    uint64_t v8 = *(void *)(*(void *)(a1 + 80) + 8 * v7);
    (*(void (**)(uint64_t, uint64_t, char *, uint64_t))(*(void *)v8 + 232))(v8, *(void *)(a1 + 200) + 24 * (int)v7, (char *)&v13 + 4, v4);
    uint64_t v9 = *(int *)(*(void *)(a1 + 400) + 4 * v4);
    uint64_t v10 = *(void *)(*(void *)(a1 + 80) + 8 * v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v10 + 232))(v10, *(void *)(a1 + 200) + 24 * (int)v9, &v13, v4);
    float v11 = *((float *)&v13 + 1);
    if ((*(_DWORD *)(a1 + 328) - 3) < 2) {
      float v11 = -0.0;
    }
    float v6 = v6 + (float)(*(float *)&v13 + v11);
    ++v4;
  }
  while (v5 != v4);
  return v6;
}

uint64_t ParallelSelector<float>::computeError(uint64_t result, uint64_t a2, uint64_t a3, int a4, _DWORD *a5, uint64_t a6)
{
  if (a4 >= 1)
  {
    uint64_t v19 = v6;
    uint64_t v20 = v7;
    uint64_t v10 = result;
    uint64_t v11 = 0;
    uint64_t v12 = a4;
    do
    {
      int v18 = 0;
      uint64_t v13 = *(int *)(v10 + 332);
      uint64_t v14 = *(void *)(*(void *)(v10 + 80) + 8 * v13);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(void *)v14 + 240))(v14, *(void *)(v10 + 200) + 24 * v13, *(void *)(v10 + 472) + 24 * v13, v11, &v18, a6);
      int v17 = 0;
      uint64_t v15 = *(int *)(*(void *)(v10 + 400) + 4 * v11);
      uint64_t v16 = *(void *)(*(void *)(v10 + 80) + 8 * v15);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(void *)v16 + 240))(v16, *(void *)(v10 + 200) + 24 * (int)v15, *(void *)(v10 + 472) + 24 * *(int *)(v10 + 336), v11, &v17, a6);
      if (v18 == 1 || v17 == 1) {
        ++*a5;
      }
      ++v11;
    }
    while (v12 != v11);
  }
  return result;
}

void *ParallelSelector<float>::updateFrom(uint64_t a1, void *lpsrc, uint64_t a3, float a4, float a5)
{
  if (!result) {
    __cxa_bad_cast();
  }
  int v10 = *(_DWORD *)(a1 + 340);
  if ((v10 & 0x80000000) == 0)
  {
    uint64_t v11 = (uint64_t)result;
    uint64_t v12 = 0;
    do
    {
      if (*(int *)(*(void *)(v11 + 304) + 4 * v12) >= 1)
      {
        uint64_t v13 = *(void *)(*(void *)(a1 + 80) + 8 * v12);
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void, uint64_t, float, float))(*(void *)v13 + 336))(v13, *(void *)(*(void *)(v11 + 80) + 8 * v12), a3, a4, a5);
        int v10 = *(_DWORD *)(a1 + 340);
      }
    }
    while (v12++ < v10);
  }
  return result;
}

void ParallelSelector<float>::forward(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int **a7)
{
  v147 = 0;
  __int16 v148 = 0;
  unint64_t v149 = 0;
  if ((*(_DWORD *)(a1 + 340) & 0x80000000) == 0)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *(void *)(a1 + 304);
    do
      *(_DWORD *)(v14 + 4 * v13) = 0;
    while (v13++ < *(int *)(a1 + 340));
  }
  uint64_t v16 = *(void *)(a1 + 224);
  if (v16) {
    a2 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 32))(v16);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "ParallelSelector");
  uint64_t v17 = a4 & 0xFFFFFF;
  if (SHIBYTE(v146) < 0) {
    operator delete(__p);
  }
  if (v17 > (a5 != 0))
  {
    uint64_t v18 = a5 != 0;
    while (1)
    {
      uint64_t v19 = *(int *)(a1 + 332);
      uint64_t v20 = *(void *)(*(void *)(a1 + 80) + 8 * v19);
      (*(void (**)(uint64_t))(*(void *)v20 + 272))(v20);
      uint64_t v21 = *(void *)(*(void *)(a1 + 80) + 8 * v19);
      (*(void (**)(uint64_t))(*(void *)v21 + 264))(v21);
      uint64_t v22 = *(void *)(a1 + 304);
      if (!*(_DWORD *)(v22 + 4 * v19))
      {
        *(_DWORD *)(v22 + 4 * v19) = 1;
        uint64_t v23 = *(void *)(*(void *)(a1 + 80) + 8 * v19);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 256))(v23, v17);
      }
      std::string __p = 0;
      v145 = 0;
      uint64_t v146 = 0;
      uint64_t v24 = *(void *)(*(void *)(a1 + 80) + 8 * v19);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v24 + 224))(v24, a2, a3, v18, &__p);
      uint64_t v25 = *(void *)(*(void *)(a1 + 80) + 8 * v19);
      v142 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v25 + 32))(v25);
      memset(&v143, 0, sizeof(v143));
      int v26 = *(_DWORD *)(a1 + 328);
      if (v26 == 1) {
        break;
      }
      if (v26 == 2)
      {
        uint64_t v72 = *v142;
        uint64_t v73 = *(void *)(*(void *)(a1 + 80) + 8 * *(int *)(a1 + 332));
        int v74 = (*(uint64_t (**)(uint64_t))(*(void *)v73 + 272))(v73);
        if (v74 < 1)
        {
          int v75 = 0;
        }
        else
        {
          int v75 = 0;
          uint64_t v76 = 0;
          float v78 = 1.1755e-38;
          do
          {
            uint64_t v77 = *(void *)(v72 + 8 * v18);
            if (*(float *)(v77 + 4 * v76) > v78)
            {
              int v75 = v76;
              float v78 = *(float *)(v77 + 4 * v76);
            }
            ++v76;
          }
          while (v74 != v76);
        }
        int v81 = v75 + 1;
        std::vector<int>::pointer end = v143.__end_;
        if (v143.__end_ >= v143.__end_cap_.__value_)
        {
          std::vector<int>::pointer begin = v143.__begin_;
          int64_t v85 = v143.__end_ - v143.__begin_;
          unint64_t v86 = v85 + 1;
          if ((unint64_t)(v85 + 1) >> 62) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          int64_t v87 = (char *)v143.__end_cap_.__value_ - (char *)v143.__begin_;
          if (((char *)v143.__end_cap_.__value_ - (char *)v143.__begin_) >> 1 > v86) {
            unint64_t v86 = v87 >> 1;
          }
          BOOL v52 = (unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v88 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v52) {
            unint64_t v88 = v86;
          }
          if (v88)
          {
            unint64_t v88 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v88);
            std::vector<int>::pointer begin = v143.__begin_;
            std::vector<int>::pointer end = v143.__end_;
          }
          else
          {
            uint64_t v89 = 0;
          }
          uint64_t v93 = (int *)(v88 + 4 * v85);
          *uint64_t v93 = v81;
          uint64_t v83 = v93 + 1;
          while (end != begin)
          {
            int v94 = *--end;
            *--uint64_t v93 = v94;
          }
          v143.__begin_ = v93;
          v143.__end_ = v83;
          v143.__end_cap_.__value_ = (int *)(v88 + 4 * v89);
          if (begin) {
            operator delete(begin);
          }
        }
        else
        {
          *v143.__end_ = v81;
          uint64_t v83 = end + 1;
        }
        v143.__end_ = v83;
        goto LABEL_133;
      }
      if (v26 != 4)
      {
        uint64_t v34 = &v143;
        VVector<float>::getTopNIndices((uint64_t *)(*v142 + 8 * v18), *(_DWORD *)(a1 + 340), &v143, *(_DWORD *)(*(void *)(a1 + 496) + 8));
        goto LABEL_134;
      }
      unint64_t v27 = (char *)v147;
      __int16 v148 = (char *)v147;
      uint64_t v28 = *(void *)(a1 + 536);
      uint64_t v29 = *(void *)(a1 + 544) - v28;
      if (v29)
      {
        unint64_t v30 = v29 / 24;
        if (v30 <= 1) {
          unint64_t v30 = 1;
        }
        long long v31 = (void *)(v28 + 8);
        do
        {
          void *v31 = *(v31 - 1);
          v31 += 3;
          --v30;
        }
        while (v30);
      }
      uint64_t v33 = *a7;
      int v32 = a7[1];
      uint64_t v34 = (std::vector<int> *)(a1 + 352);
      unint64_t v35 = (char *)v32 - (char *)*a7;
      if (v32 != *a7)
      {
        if (v35 < 5)
        {
          __int16 v148 = v27;
          if (v35 == 4)
          {
            size_t v36 = operator new(4uLL);
            int v37 = *v33;
            *size_t v36 = *v33;
            goto LABEL_85;
          }
        }
        else
        {
          size_t v36 = operator new(4uLL);
          int v37 = *v33;
          *size_t v36 = *v33;
          if (v33[1] != -1) {
            exitFramework(900);
          }
          if (v35 >= 9)
          {
            v140 = v36;
            unint64_t v38 = 2;
            do
            {
              uint64_t v39 = v17;
              int v40 = *v33;
              int v41 = v33[v38];
              uint64_t v42 = *(void *)(a1 + 496);
              if (v40 == -1)
              {
                if (*(void *)(v42 + 104)) {
                  int v47 = *(_DWORD *)(v42 + 112);
                }
                else {
                  int v47 = *(_DWORD *)(v42 + 96);
                }
                if (v41 >= v47)
                {
                  fprintf((FILE *)*MEMORY[0x1E4F143D8], "WARNING: Invalid (too large) Montreal id (%d) - IGNORE\n", v41);
                  uint64_t v17 = v39;
                }
                else
                {
                  int WordClass = OutputCluster::getWordClass(*(OutputCluster **)(a1 + 496), v41);
                  int WordClassIndex = OutputCluster::getWordClassIndex((OutputCluster *)v42, v41);
                  uint64_t v57 = *(void *)(a1 + 536) + 24 * WordClass;
                  std::string::size_type v59 = (_DWORD **)(v57 + 8);
                  int v58 = *(_DWORD **)(v57 + 8);
                  unint64_t v60 = *(void *)(v57 + 16);
                  if ((unint64_t)v58 >= v60)
                  {
                    int v139 = WordClassIndex;
                    uint64_t v64 = *(_DWORD **)v57;
                    uint64_t v65 = ((uint64_t)v58 - *(void *)v57) >> 2;
                    unint64_t v66 = v65 + 1;
                    if ((unint64_t)(v65 + 1) >> 62) {
                      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v67 = v60 - (void)v64;
                    if (v67 >> 1 > v66) {
                      unint64_t v66 = v67 >> 1;
                    }
                    BOOL v52 = (unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL;
                    unint64_t v68 = 0x3FFFFFFFFFFFFFFFLL;
                    if (!v52) {
                      unint64_t v68 = v66;
                    }
                    if (v68)
                    {
                      unint64_t v68 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v68);
                      int v58 = *v59;
                      uint64_t v64 = *(_DWORD **)v57;
                    }
                    else
                    {
                      uint64_t v69 = 0;
                    }
                    std::string::size_type v70 = (_DWORD *)(v68 + 4 * v65);
                    *std::string::size_type v70 = v139;
                    int v61 = v70 + 1;
                    while (v58 != v64)
                    {
                      int v71 = *--v58;
                      *--std::string::size_type v70 = v71;
                    }
                    *(void *)uint64_t v57 = v70;
                    *std::string::size_type v59 = v61;
                    *(void *)(v57 + 16) = v68 + 4 * v69;
                    if (v64) {
                      operator delete(v64);
                    }
                  }
                  else
                  {
                    _DWORD *v58 = WordClassIndex;
                    int v61 = v58 + 1;
                  }
                  uint64_t v17 = v39;
                  *std::string::size_type v59 = v61;
                }
              }
              else
              {
                int v43 = OutputCluster::getWordClassIndex(*(OutputCluster **)(a1 + 496), v41);
                int v44 = v43;
                std::string::size_type v45 = v148;
                if ((unint64_t)v148 >= v149)
                {
                  std::string v48 = (char *)v147;
                  uint64_t v49 = (v148 - (unsigned char *)v147) >> 2;
                  unint64_t v50 = v49 + 1;
                  if ((unint64_t)(v49 + 1) >> 62) {
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v17 = v39;
                  uint64_t v51 = v149 - (void)v147;
                  if ((uint64_t)(v149 - (void)v147) >> 1 > v50) {
                    unint64_t v50 = v51 >> 1;
                  }
                  BOOL v52 = (unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL;
                  unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
                  if (!v52) {
                    unint64_t v53 = v50;
                  }
                  if (v53)
                  {
                    unint64_t v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v53);
                    std::string v48 = (char *)v147;
                    std::string::size_type v45 = v148;
                  }
                  else
                  {
                    uint64_t v54 = 0;
                  }
                  uint64_t v62 = (char *)(v53 + 4 * v49);
                  *(_DWORD *)uint64_t v62 = v44;
                  std::string v46 = v62 + 4;
                  while (v45 != v48)
                  {
                    int v63 = *((_DWORD *)v45 - 1);
                    v45 -= 4;
                    *((_DWORD *)v62 - 1) = v63;
                    v62 -= 4;
                  }
                  v147 = v62;
                  __int16 v148 = v46;
                  unint64_t v149 = v53 + 4 * v54;
                  if (v48) {
                    operator delete(v48);
                  }
                }
                else
                {
                  *(_DWORD *)__int16 v148 = v43;
                  std::string v46 = v45 + 4;
                  uint64_t v17 = v39;
                }
                __int16 v148 = v46;
              }
              ++v38;
              uint64_t v33 = *a7;
            }
            while (v38 < a7[1] - *a7);
            size_t v36 = v140;
            int v37 = *v140;
          }
LABEL_85:
          v141 = v36;
          if (v37 == -1)
          {
            uint64_t v95 = *(void *)(a1 + 544);
            uint64_t v96 = *(void *)(a1 + 536);
            if (v95 != v96)
            {
              unint64_t v97 = 0;
              do
              {
                uint64_t v98 = *(void *)(v96 + 24 * v97);
                uint64_t v99 = *(void *)(v96 + 24 * v97++ + 8);
                if (v99 != v98)
                {
                  std::vector<int>::pointer v100 = v143.__end_;
                  if (v143.__end_ >= v143.__end_cap_.__value_)
                  {
                    std::vector<int>::pointer v102 = v143.__begin_;
                    int64_t v103 = v143.__end_ - v143.__begin_;
                    unint64_t v104 = v103 + 1;
                    if ((unint64_t)(v103 + 1) >> 62) {
                      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                    }
                    int64_t v105 = (char *)v143.__end_cap_.__value_ - (char *)v143.__begin_;
                    if (((char *)v143.__end_cap_.__value_ - (char *)v143.__begin_) >> 1 > v104) {
                      unint64_t v104 = v105 >> 1;
                    }
                    BOOL v52 = (unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL;
                    unint64_t v106 = 0x3FFFFFFFFFFFFFFFLL;
                    if (!v52) {
                      unint64_t v106 = v104;
                    }
                    if (v106)
                    {
                      unint64_t v106 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v106);
                      std::vector<int>::pointer v102 = v143.__begin_;
                      std::vector<int>::pointer v100 = v143.__end_;
                    }
                    else
                    {
                      uint64_t v107 = 0;
                    }
                    unsigned __int8 v108 = (int *)(v106 + 4 * v103);
                    int *v108 = v97;
                    long long v101 = v108 + 1;
                    while (v100 != v102)
                    {
                      int v109 = *--v100;
                      *--unsigned __int8 v108 = v109;
                    }
                    v143.__begin_ = v108;
                    v143.__end_ = v101;
                    v143.__end_cap_.__value_ = (int *)(v106 + 4 * v107);
                    if (v102) {
                      operator delete(v102);
                    }
                  }
                  else
                  {
                    *v143.__end_ = v97;
                    long long v101 = v100 + 1;
                  }
                  v143.__end_ = v101;
                  uint64_t v95 = *(void *)(a1 + 544);
                  uint64_t v96 = *(void *)(a1 + 536);
                }
              }
              while (0xAAAAAAAAAAAAAAABLL * ((v95 - v96) >> 3) > v97);
            }
          }
          else
          {
            if (v37 < 0
              || (int v90 = v37 + 1,
                  (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3 <= (unint64_t)(v37 + 1)))
            {
              exitFramework(45);
            }
            std::vector<int>::pointer v91 = v143.__end_;
            if (v143.__end_ >= v143.__end_cap_.__value_)
            {
              std::vector<int>::pointer v110 = v143.__begin_;
              int64_t v111 = v143.__end_ - v143.__begin_;
              unint64_t v112 = v111 + 1;
              if ((unint64_t)(v111 + 1) >> 62) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              int64_t v113 = (char *)v143.__end_cap_.__value_ - (char *)v143.__begin_;
              if (((char *)v143.__end_cap_.__value_ - (char *)v143.__begin_) >> 1 > v112) {
                unint64_t v112 = v113 >> 1;
              }
              BOOL v52 = (unint64_t)v113 >= 0x7FFFFFFFFFFFFFFCLL;
              unint64_t v114 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v52) {
                unint64_t v114 = v112;
              }
              if (v114)
              {
                unint64_t v114 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v114);
                std::vector<int>::pointer v110 = v143.__begin_;
                std::vector<int>::pointer v91 = v143.__end_;
              }
              else
              {
                uint64_t v115 = 0;
              }
              uint64_t v116 = (int *)(v114 + 4 * v111);
              int *v116 = v90;
              uint64_t v92 = v116 + 1;
              while (v91 != v110)
              {
                int v117 = *--v91;
                *--uint64_t v116 = v117;
              }
              v143.__begin_ = v116;
              v143.__end_ = v92;
              v143.__end_cap_.__value_ = (int *)(v114 + 4 * v115);
              if (v110) {
                operator delete(v110);
              }
            }
            else
            {
              *v143.__end_ = v90;
              uint64_t v92 = v91 + 1;
            }
            v143.__end_ = v92;
          }
          operator delete(v141);
        }
LABEL_133:
        uint64_t v34 = &v143;
      }
LABEL_134:
      bzero(*(void **)(*(void *)(a1 + 104) + 8 * v18), 4 * *(int *)(a1 + 348));
      std::vector<int>::pointer v118 = v34->__begin_;
      if (v34->__end_ != v34->__begin_)
      {
        unint64_t v119 = 0;
        while (1)
        {
          uint64_t v120 = v118[v119];
          uint64_t v121 = *(void *)(a1 + 304);
          if (!*(_DWORD *)(v121 + 4 * v120))
          {
            *(_DWORD *)(v121 + 4 * v120) = 1;
            uint64_t v122 = *(void *)(*(void *)(a1 + 80) + 8 * v120);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v122 + 256))(v122, v17);
          }
          uint64_t v123 = a7[1] != *a7 && **a7 == -1 ? (void **)(*(void *)(a1 + 536) + 24 * (int)v120 - 24) : &v147;
          uint64_t v124 = *(void *)(*(void *)(a1 + 80) + 8 * v120);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v124 + 224))(v124, a2, a3, v18, v123);
          uint64_t v125 = *(void *)(*(void *)(a1 + 80) + 8 * v120);
          long long v126 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v125 + 32))(v125);
          uint64_t v127 = *(void *)(a1 + 256);
          if ((*(_DWORD *)(a1 + 328) - 3) >= 2) {
            break;
          }
          uint64_t v128 = *(unsigned int *)(v127 + 4 * v120);
          if ((int)v128 >= 1)
          {
            float v129 = *(float *)(*(void *)(*v142 + 8 * v18) + 4 * ((int)v120 - 1));
            long long v130 = *(float **)(*v126 + 8 * v18);
            uint64_t v131 = v128;
            do
            {
              *long long v130 = v129 * *v130;
              ++v130;
              --v131;
            }
            while (v131);
LABEL_148:
            if ((int)v128 >= 1)
            {
              uint64_t v132 = *(int **)(*(void *)(*(void *)(a1 + 496) + 120) + 24 * ((int)v120 - 1));
              long long v133 = *(_DWORD **)(*v126 + 8 * v18);
              uint64_t v134 = *(void *)(*(void *)(a1 + 104) + 8 * v18);
              do
              {
                uint64_t v136 = *v132++;
                uint64_t v135 = v136;
                LODWORD(v136) = *v133++;
                *(_DWORD *)(v134 + 4 * v135) = v136;
                --v128;
              }
              while (v128);
            }
          }
          ++v119;
          std::vector<int>::pointer v118 = v34->__begin_;
          if (v119 >= v34->__end_ - v34->__begin_) {
            goto LABEL_152;
          }
        }
        uint64_t v128 = *(unsigned int *)(v127 + 4 * v120);
        goto LABEL_148;
      }
LABEL_152:
      uint64_t v137 = *(void *)(a1 + 104);
      vDSP_Length v138 = *(int *)(a1 + 348);
      float __C = 0.0;
      vDSP_sve(*(const float **)(v137 + 8 * v18), 1, &__C, v138);
      if (v143.__begin_)
      {
        v143.__end_ = v143.__begin_;
        operator delete(v143.__begin_);
      }
      if (__p)
      {
        v145 = __p;
        operator delete(__p);
      }
      if (++v18 == v17) {
        goto LABEL_157;
      }
    }
    int v79 = *(_DWORD *)(*(void *)(a1 + 400) + 4 * v18);
    long long v80 = (int *)operator new(4uLL);
    *long long v80 = v79;
    v143.__end_ = v80 + 1;
    v143.__end_cap_.__value_ = v80 + 1;
    v143.__begin_ = v80;
    goto LABEL_133;
  }
LABEL_157:
  if (v147)
  {
    __int16 v148 = (char *)v147;
    operator delete(v147);
  }
}

void sub_1928E1BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  if (a21) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t OutputCluster::getWordClass(OutputCluster *this, int a2)
{
  uint64_t v2 = *((void *)this + 8);
  if (v2)
  {
    unint64_t v3 = (unsigned int *)(v2 + 4 * ((2 * a2) | 1));
    return *v3;
  }
  uint64_t v7 = (char *)*((void *)this + 6);
  uint64_t v5 = (char *)this + 48;
  uint64_t v6 = v7;
  if (v7)
  {
    uint64_t v8 = v5;
    do
    {
      int v9 = *((_DWORD *)v6 + 7);
      BOOL v10 = v9 < a2;
      if (v9 >= a2) {
        uint64_t v11 = (char **)v6;
      }
      else {
        uint64_t v11 = (char **)(v6 + 8);
      }
      if (!v10) {
        uint64_t v8 = v6;
      }
      uint64_t v6 = *v11;
    }
    while (*v11);
    if (v8 != v5 && *((_DWORD *)v8 + 7) <= a2)
    {
      unint64_t v3 = (unsigned int *)(v8 + 32);
      return *v3;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t OutputCluster::getWordClassIndex(OutputCluster *this, int a2)
{
  uint64_t v2 = *((void *)this + 13);
  if (v2)
  {
    unint64_t v3 = (unsigned int *)(v2 + 4 * ((2 * a2) | 1));
    return *v3;
  }
  uint64_t v7 = (char *)*((void *)this + 11);
  uint64_t v5 = (char *)this + 88;
  uint64_t v6 = v7;
  if (v7)
  {
    uint64_t v8 = v5;
    do
    {
      int v9 = *((_DWORD *)v6 + 7);
      BOOL v10 = v9 < a2;
      if (v9 >= a2) {
        uint64_t v11 = (char **)v6;
      }
      else {
        uint64_t v11 = (char **)(v6 + 8);
      }
      if (!v10) {
        uint64_t v8 = v6;
      }
      uint64_t v6 = *v11;
    }
    while (*v11);
    if (v8 != v5 && *((_DWORD *)v8 + 7) <= a2)
    {
      unint64_t v3 = (unsigned int *)(v8 + 32);
      return *v3;
    }
  }
  return 0xFFFFFFFFLL;
}

void VVector<float>::getTopNIndices(uint64_t *a1, int a2, std::vector<int> *a3, int a4)
{
  std::vector<std::pair<int,float>>::vector(&__p, a2);
  uint64_t v8 = (float *)__p;
  if (a2 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *a1;
    uint64_t v11 = (char *)__p + 4;
    do
    {
      *(v11 - 1) = v9;
      _DWORD *v11 = *(_DWORD *)(v10 + 4 * v9);
      v11 += 2;
      ++v9;
    }
    while (a2 != v9);
  }
  uint64_t v12 = &v8[2 * a4];
  uint64_t v13 = v64;
  if (v12 != v64)
  {
    do
    {
      unint64_t v14 = ((char *)v13 - (char *)v8) >> 3;
      if (v14 < 2) {
        break;
      }
      if (v14 == 3)
      {
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::__wrap_iter<std::pair<int,float> *>>(v8, v8 + 2, v13 - 2);
        break;
      }
      if (v14 == 2)
      {
        float v48 = *(v13 - 1);
        float v49 = v8[1];
        if (v48 > v49)
        {
          float v50 = *v8;
          *uint64_t v8 = *(v13 - 2);
          *(v13 - 2) = v50;
          v8[1] = v48;
          *(v13 - 1) = v49;
        }
        break;
      }
      if ((char *)v13 - (char *)v8 <= 63)
      {
        while (v8 != v13 - 2)
        {
          uint64_t v51 = v8;
          v8 += 2;
          if (v51 != v13 && v8 != v13)
          {
            BOOL v52 = v8;
            unint64_t v53 = v51;
            do
            {
              if (v52[1] > v53[1]) {
                unint64_t v53 = v52;
              }
              v52 += 2;
            }
            while (v52 != v13);
            if (v53 != v51)
            {
              int v54 = *(_DWORD *)v51;
              *uint64_t v51 = *v53;
              *(_DWORD *)unint64_t v53 = v54;
              int v55 = *((_DWORD *)v51 + 1);
              v51[1] = v53[1];
              *((_DWORD *)v53 + 1) = v55;
            }
          }
        }
        break;
      }
      uint64_t v15 = &v8[2 * (v14 >> 1)];
      uint64_t v16 = v13 - 2;
      int v17 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::__wrap_iter<std::pair<int,float> *>>(v8, v15, v13 - 2);
      float v18 = v8[1];
      float v19 = v15[1];
      if (v18 <= v19)
      {
        uint64_t v21 = v13 - 2;
        while (1)
        {
          unint64_t v20 = (unint64_t)(v21 - 2);
          if (v21 - 2 == v8) {
            break;
          }
          float v22 = *(v21 - 1);
          v21 -= 2;
          if (v22 > v19)
          {
            float v23 = *v8;
            *uint64_t v8 = *(float *)v20;
            *(float *)unint64_t v20 = v23;
            v8[1] = v22;
            *(float *)(v20 + 4) = v18;
            ++v17;
            goto LABEL_15;
          }
        }
        int v37 = v8 + 2;
        float v38 = *(v13 - 1);
        if (v18 <= v38)
        {
          while (v37 != v16)
          {
            float v39 = v37[1];
            if (v18 > v39)
            {
              int v43 = *(_DWORD *)v37;
              float *v37 = *(v13 - 2);
              *((_DWORD *)v13 - 2) = v43;
              v37[1] = v38;
              *(v13 - 1) = v39;
              v37 += 2;
              goto LABEL_46;
            }
            v37 += 2;
          }
          break;
        }
LABEL_46:
        if (v37 == v16) {
          break;
        }
        while (1)
        {
          float v44 = v8[1];
          do
          {
            uint64_t v34 = v37;
            float v45 = v37[1];
            v37 += 2;
          }
          while (v44 <= v45);
          do
          {
            float v46 = *(v16 - 1);
            v16 -= 2;
          }
          while (v44 > v46);
          if (v34 >= v16) {
            break;
          }
          float v47 = *v34;
          float *v34 = *v16;
          *uint64_t v16 = v47;
          v34[1] = v46;
          v16[1] = v45;
        }
        if (v34 > v12) {
          break;
        }
      }
      else
      {
        unint64_t v20 = (unint64_t)(v13 - 2);
LABEL_15:
        uint64_t v24 = v8 + 2;
        if ((unint64_t)(v8 + 2) >= v20)
        {
          unint64_t v27 = v8 + 2;
        }
        else
        {
          uint64_t v25 = v8 + 2;
          while (1)
          {
            float v26 = v15[1];
            do
            {
              unint64_t v27 = v25;
              float v28 = v25[1];
              v25 += 2;
            }
            while (v28 > v26);
            do
            {
              float v29 = *(float *)(v20 - 4);
              v20 -= 8;
            }
            while (v29 <= v26);
            if ((unint64_t)v27 >= v20) {
              break;
            }
            float v30 = *v27;
            *unint64_t v27 = *(float *)v20;
            *(float *)unint64_t v20 = v30;
            v27[1] = v29;
            *(float *)(v20 + 4) = v28;
            ++v17;
            if (v15 == v27) {
              uint64_t v15 = (float *)v20;
            }
          }
        }
        if (v27 != v15)
        {
          float v31 = v15[1];
          float v32 = v27[1];
          if (v31 > v32)
          {
            float v33 = *v27;
            *unint64_t v27 = *v15;
            float *v15 = v33;
            v27[1] = v31;
            v15[1] = v32;
            ++v17;
          }
        }
        if (v27 == v12) {
          break;
        }
        if (!v17)
        {
          if (v27 <= v12)
          {
            int v40 = v27 + 2;
            while (v40 != v13)
            {
              float v41 = v40[1];
              float v42 = *(v40 - 1);
              v40 += 2;
              if (v41 > v42) {
                goto LABEL_30;
              }
            }
          }
          else
          {
            while (v24 != v27)
            {
              float v35 = v24[1];
              float v36 = *(v24 - 1);
              v24 += 2;
              if (v35 > v36) {
                goto LABEL_30;
              }
            }
          }
          break;
        }
LABEL_30:
        if (v27 <= v12)
        {
          uint64_t v34 = v27 + 2;
        }
        else
        {
          uint64_t v13 = v27;
          uint64_t v34 = v8;
        }
      }
      uint64_t v8 = v34;
    }
    while (v13 != v12);
    uint64_t v8 = (float *)__p;
  }
  unint64_t v56 = 126 - 2 * __clz(a4);
  if (a4) {
    uint64_t v57 = v56;
  }
  else {
    uint64_t v57 = 0;
  }
  std::__introsort<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *,false>(v8, &v8[2 * a4], v57, 1);
  std::vector<int>::resize(a3, a4);
  int v58 = (float *)__p;
  if (a4 < 1)
  {
    if (!__p) {
      return;
    }
  }
  else
  {
    std::vector<int>::pointer begin = a3->__begin_;
    uint64_t v60 = a4;
    int v61 = (int *)__p;
    do
    {
      int v62 = *v61;
      v61 += 2;
      *begin++ = v62 + 1;
      --v60;
    }
    while (v60);
  }
  uint64_t v64 = v58;
  operator delete(v58);
}

void sub_1928E2130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::pair<int,float>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::pair<int,float>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1928E21A8(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float *std::__introsort<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *,false>(float *result, float *a2, uint64_t a3, char a4)
{
  uint64_t v9 = result;
  while (2)
  {
    uint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = ((char *)a2 - (char *)v10) >> 3;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                float v44 = *(a2 - 1);
                float v45 = v10[1];
                if (v44 > v45)
                {
                  float v46 = *v10;
                  float *v10 = *(a2 - 2);
                  *(a2 - 2) = v46;
                  v10[1] = v44;
                  *(a2 - 1) = v45;
                }
                break;
              case 3uLL:
                uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(v10, v10 + 2, a2 - 2);
                break;
              case 4uLL:
                uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(v10, v10 + 2, v10 + 4, a2 - 2);
                break;
              case 5uLL:
                uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(v10, v10 + 2, v10 + 4, v10 + 6, a2 - 2);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            float v47 = v10 + 2;
            BOOL v49 = v10 == a2 || v47 == a2;
            if (a4)
            {
              if (!v49)
              {
                uint64_t v50 = 0;
                uint64_t v51 = v10;
                do
                {
                  float v52 = v51[3];
                  float v53 = v51[1];
                  uint64_t v51 = v47;
                  if (v52 > v53)
                  {
                    float v54 = *v47;
                    uint64_t v55 = v50;
                    while (1)
                    {
                      unint64_t v56 = (float *)((char *)v10 + v55);
                      v56[2] = *(float *)((char *)v10 + v55);
                      v56[3] = *(float *)((char *)v10 + v55 + 4);
                      if (!v55) {
                        break;
                      }
                      v55 -= 8;
                      if (v52 <= *(v56 - 1))
                      {
                        uint64_t v57 = (uint64_t)v10 + v55 + 8;
                        goto LABEL_84;
                      }
                    }
                    uint64_t v57 = (uint64_t)v10;
LABEL_84:
                    *(float *)uint64_t v57 = v54;
                    *(float *)(v57 + 4) = v52;
                  }
                  float v47 = v51 + 2;
                  v50 += 8;
                }
                while (v51 + 2 != a2);
              }
            }
            else if (!v49)
            {
              unint64_t v88 = v10 + 1;
              do
              {
                float v89 = v9[3];
                float v90 = v9[1];
                uint64_t v9 = v47;
                if (v89 > v90)
                {
                  float v91 = *v47;
                  uint64_t v92 = v88;
                  do
                  {
                    v92[1] = *(v92 - 1);
                    v92[2] = *v92;
                    float v93 = *(v92 - 2);
                    v92 -= 2;
                  }
                  while (v89 > v93);
                  v92[1] = v91;
                  v92[2] = v89;
                }
                float v47 = v9 + 2;
                v88 += 2;
              }
              while (v9 + 2 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v58 = (v12 - 2) >> 1;
              int64_t v59 = v58;
              do
              {
                int64_t v60 = v59;
                if (v58 >= v59)
                {
                  uint64_t v61 = (2 * v59) | 1;
                  int v62 = &v10[2 * v61];
                  if (2 * v60 + 2 < (uint64_t)v12 && v62[1] > v62[3])
                  {
                    v62 += 2;
                    uint64_t v61 = 2 * v60 + 2;
                  }
                  float v63 = v62[1];
                  float v64 = v10[2 * v60 + 1];
                  if (v63 <= v64)
                  {
                    uint64_t v65 = &v10[2 * v60];
                    int v66 = *(_DWORD *)v65;
                    do
                    {
                      uint64_t v67 = v65;
                      uint64_t v65 = v62;
                      *uint64_t v67 = *v62;
                      v67[1] = v63;
                      if (v58 < v61) {
                        break;
                      }
                      uint64_t v68 = 2 * v61;
                      uint64_t v61 = (2 * v61) | 1;
                      int v62 = &v10[2 * v61];
                      uint64_t v69 = v68 + 2;
                      if (v69 < (uint64_t)v12 && v62[1] > v62[3])
                      {
                        v62 += 2;
                        uint64_t v61 = v69;
                      }
                      float v63 = v62[1];
                    }
                    while (v63 <= v64);
                    *(_DWORD *)uint64_t v65 = v66;
                    v65[1] = v64;
                  }
                }
                int64_t v59 = v60 - 1;
              }
              while (v60);
              uint64_t v70 = (unint64_t)v11 >> 3;
              do
              {
                uint64_t v71 = 0;
                float v72 = *v10;
                int v73 = *((_DWORD *)v10 + 1);
                uint64_t v74 = v70 - 2;
                if (v70 < 2) {
                  uint64_t v74 = v70 - 1;
                }
                uint64_t v75 = v74 >> 1;
                uint64_t v76 = v10;
                do
                {
                  uint64_t v77 = v76;
                  v76 += 2 * v71 + 2;
                  uint64_t v78 = 2 * v71;
                  uint64_t v71 = (2 * v71) | 1;
                  uint64_t v79 = v78 + 2;
                  if (v79 < v70 && v76[1] > v76[3])
                  {
                    v76 += 2;
                    uint64_t v71 = v79;
                  }
                  *uint64_t v77 = *v76;
                  v77[1] = v76[1];
                }
                while (v71 <= v75);
                if (v76 == a2 - 2)
                {
                  *uint64_t v76 = v72;
                  *((_DWORD *)v76 + 1) = v73;
                }
                else
                {
                  *uint64_t v76 = *(a2 - 2);
                  v76[1] = *(a2 - 1);
                  *(a2 - 2) = v72;
                  *((_DWORD *)a2 - 1) = v73;
                  uint64_t v80 = (char *)v76 - (char *)v10 + 8;
                  if (v80 >= 9)
                  {
                    unint64_t v81 = (unint64_t)((v80 >> 3) - 2) >> 1;
                    float v82 = v10[2 * v81 + 1];
                    float v83 = v76[1];
                    if (v82 > v83)
                    {
                      int v84 = *(_DWORD *)v76;
                      do
                      {
                        unint64_t v85 = v81;
                        unint64_t v86 = v76;
                        uint64_t v76 = &v10[2 * v85];
                        float *v86 = *v76;
                        v86[1] = v82;
                        if (!v85) {
                          break;
                        }
                        unint64_t v81 = (v85 - 1) >> 1;
                        float v82 = v10[2 * v81 + 1];
                      }
                      while (v82 > v83);
                      *(_DWORD *)uint64_t v76 = v84;
                      v10[2 * v85 + 1] = v83;
                    }
                  }
                }
                a2 -= 2;
              }
              while (v70-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = &v10[2 * (v12 >> 1)];
          if ((unint64_t)v11 >= 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(v9, &v9[2 * (v12 >> 1)], a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(v9 + 2, v14 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(v9 + 4, &v9[2 * v13 + 2], a2 - 6);
            uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(v14 - 2, v14, &v9[2 * v13 + 2]);
            float v15 = *v9;
            *uint64_t v9 = *v14;
            float *v14 = v15;
            int v16 = *((_DWORD *)v9 + 1);
            v9[1] = v14[1];
            *((_DWORD *)v14 + 1) = v16;
          }
          else
          {
            uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(&v9[2 * (v12 >> 1)], v9, a2 - 2);
          }
          --a3;
          if (a4) {
            break;
          }
          float v17 = v9[1];
          if (*(v9 - 1) > v17) {
            goto LABEL_13;
          }
          if (v17 <= *(a2 - 1))
          {
            uint64_t v34 = v9 + 2;
            do
            {
              uint64_t v10 = v34;
              if (v34 >= a2) {
                break;
              }
              float v35 = v34[1];
              v34 += 2;
            }
            while (v17 <= v35);
          }
          else
          {
            float v32 = v9;
            do
            {
              uint64_t v10 = v32 + 2;
              float v33 = v32[3];
              v32 += 2;
            }
            while (v17 <= v33);
          }
          float v36 = a2;
          if (v10 < a2)
          {
            int v37 = a2;
            do
            {
              float v36 = v37 - 2;
              float v38 = *(v37 - 1);
              v37 -= 2;
            }
            while (v17 > v38);
          }
          float v39 = *v9;
          while (v10 < v36)
          {
            float v40 = *v10;
            float *v10 = *v36;
            *float v36 = v40;
            int v41 = *((_DWORD *)v10 + 1);
            v10[1] = v36[1];
            *((_DWORD *)v36 + 1) = v41;
            do
            {
              float v42 = v10[3];
              v10 += 2;
            }
            while (v17 <= v42);
            do
            {
              float v43 = *(v36 - 1);
              v36 -= 2;
            }
            while (v17 > v43);
          }
          BOOL v4 = v10 - 2 >= v9;
          BOOL v5 = v10 - 2 == v9;
          if (v10 - 2 != v9)
          {
            *uint64_t v9 = *(v10 - 2);
            v9[1] = *(v10 - 1);
          }
          a4 = 0;
          *(v10 - 2) = v39;
          *(v10 - 1) = v17;
        }
        float v17 = v9[1];
LABEL_13:
        float v18 = *v9;
        float v19 = v9;
        do
        {
          unint64_t v20 = v19;
          v19 += 2;
        }
        while (v20[3] > v17);
        uint64_t v21 = a2;
        if (v20 == v9)
        {
          uint64_t v24 = a2;
          while (v19 < v24)
          {
            float v22 = v24 - 2;
            float v25 = *(v24 - 1);
            v24 -= 2;
            if (v25 > v17) {
              goto LABEL_23;
            }
          }
          float v22 = v24;
        }
        else
        {
          do
          {
            float v22 = v21 - 2;
            float v23 = *(v21 - 1);
            v21 -= 2;
          }
          while (v23 <= v17);
        }
LABEL_23:
        uint64_t v10 = v19;
        if (v19 < v22)
        {
          float v26 = v22;
          do
          {
            float v27 = *v10;
            float *v10 = *v26;
            float *v26 = v27;
            int v28 = *((_DWORD *)v10 + 1);
            v10[1] = v26[1];
            *((_DWORD *)v26 + 1) = v28;
            do
            {
              float v29 = v10[3];
              v10 += 2;
            }
            while (v29 > v17);
            do
            {
              float v30 = *(v26 - 1);
              v26 -= 2;
            }
            while (v30 <= v17);
          }
          while (v10 < v26);
        }
        if (v10 - 2 != v9)
        {
          *uint64_t v9 = *(v10 - 2);
          v9[1] = *(v10 - 1);
        }
        *(v10 - 2) = v18;
        *(v10 - 1) = v17;
        if (v19 >= v22) {
          break;
        }
LABEL_34:
        uint64_t result = (float *)std::__introsort<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *,false>(v9, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v31 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(v9, v10 - 2);
      uint64_t result = (float *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(v10, a2);
      if (result) {
        break;
      }
      if (!v31) {
        goto LABEL_34;
      }
    }
    a2 = v10 - 2;
    if (!v31) {
      continue;
    }
    return result;
  }
}

float *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(float *result, float *a2, float *a3)
{
  float v3 = a2[1];
  float v4 = result[1];
  float v5 = a3[1];
  if (v3 <= v4)
  {
    if (v5 > v3)
    {
      float v7 = *a2;
      *a2 = *a3;
      *a3 = v7;
      a2[1] = v5;
      a3[1] = v3;
      float v8 = a2[1];
      float v9 = result[1];
      if (v8 > v9)
      {
        float v10 = *result;
        *uint64_t result = *a2;
        *a2 = v10;
        result[1] = v8;
        a2[1] = v9;
      }
    }
  }
  else
  {
    float v6 = *result;
    if (v5 <= v3)
    {
      *uint64_t result = *a2;
      *a2 = v6;
      result[1] = v3;
      a2[1] = v4;
      float v11 = a3[1];
      if (v11 <= v4) {
        return result;
      }
      *a2 = *a3;
      *a3 = v6;
      a2[1] = v11;
    }
    else
    {
      *uint64_t result = *a3;
      *a3 = v6;
      result[1] = v5;
    }
    a3[1] = v4;
  }
  return result;
}

float *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(float *a1, float *a2, float *a3, float *a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(a1, a2, a3);
  float v9 = a4[1];
  float v10 = a3[1];
  if (v9 > v10)
  {
    float v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    a3[1] = v9;
    a4[1] = v10;
    float v12 = a3[1];
    float v13 = a2[1];
    if (v12 > v13)
    {
      float v14 = *a2;
      *a2 = *a3;
      *a3 = v14;
      a2[1] = v12;
      a3[1] = v13;
      float v15 = a2[1];
      float v16 = a1[1];
      if (v15 > v16)
      {
        float v17 = *a1;
        *a1 = *a2;
        *a2 = v17;
        a1[1] = v15;
        a2[1] = v16;
      }
    }
  }
  return result;
}

float *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(float *a1, float *a2, float *a3, float *a4, float *a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(a1, a2, a3, a4);
  float v11 = a5[1];
  float v12 = a4[1];
  if (v11 > v12)
  {
    float v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    a4[1] = v11;
    a5[1] = v12;
    float v14 = a4[1];
    float v15 = a3[1];
    if (v14 > v15)
    {
      float v16 = *a3;
      *a3 = *a4;
      *a4 = v16;
      a3[1] = v14;
      a4[1] = v15;
      float v17 = a3[1];
      float v18 = a2[1];
      if (v17 > v18)
      {
        float v19 = *a2;
        *a2 = *a3;
        *a3 = v19;
        a2[1] = v17;
        a3[1] = v18;
        float v20 = a2[1];
        float v21 = a1[1];
        if (v20 > v21)
        {
          float v22 = *a1;
          *a1 = *a2;
          *a2 = v22;
          a1[1] = v20;
          a2[1] = v21;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(float *a1, float *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float v6 = *(a2 - 1);
      float v7 = a1[1];
      if (v6 > v7)
      {
        float v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        a1[1] = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      float v9 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::pair<int,float> *>(a1, a1 + 2, a1 + 4);
      float v10 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    float v13 = v10[1];
    if (v13 > v9[1])
    {
      int v14 = *(_DWORD *)v10;
      uint64_t v15 = v11;
      while (1)
      {
        float v16 = (float *)((char *)a1 + v15);
        v16[6] = *(float *)((char *)a1 + v15 + 16);
        v16[7] = *(float *)((char *)a1 + v15 + 20);
        if (v15 == -16) {
          break;
        }
        v15 -= 8;
        if (v13 <= v16[3])
        {
          uint64_t v17 = (uint64_t)a1 + v15 + 24;
          goto LABEL_12;
        }
      }
      uint64_t v17 = (uint64_t)a1;
LABEL_12:
      *(_DWORD *)uint64_t v17 = v14;
      *(float *)(v17 + 4) = v13;
      if (++v12 == 8) {
        return v10 + 2 == a2;
      }
    }
    float v9 = v10;
    v11 += 8;
    v10 += 2;
    if (v10 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ScoreCompareType &,std::__wrap_iter<std::pair<int,float> *>>(float *a1, float *a2, float *a3)
{
  float v3 = a2[1];
  float v4 = a1[1];
  float v5 = a3[1];
  if (v3 > v4)
  {
    float v6 = *a1;
    if (v5 > v3)
    {
      *a1 = *a3;
      *a3 = v6;
      a1[1] = v5;
      a3[1] = v4;
      return 1;
    }
    *a1 = *a2;
    *a2 = v6;
    a1[1] = v3;
    a2[1] = v4;
    float v11 = a3[1];
    if (v11 <= v4) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v6;
    a2[1] = v11;
    a3[1] = v4;
    return 2;
  }
  if (v5 > v3)
  {
    float v7 = *a2;
    *a2 = *a3;
    *a3 = v7;
    a2[1] = v5;
    a3[1] = v3;
    float v8 = a2[1];
    float v9 = a1[1];
    if (v8 <= v9) {
      return 1;
    }
    float v10 = *a1;
    *a1 = *a2;
    *a2 = v10;
    a1[1] = v8;
    a2[1] = v9;
    return 2;
  }
  return 0;
}

char *std::vector<std::pair<int,float>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  BOOL result = (char *)operator new(8 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * a2];
  return result;
}

void ParallelSelector<float>::backward(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 8 * a5;
    uint64_t v9 = a5;
    do
    {
      uint64_t v10 = *(void *)(a1 + 504);
      int v11 = (*(uint64_t (**)(void))(***(void ***)(a1 + 80) + 264))(**(void **)(a1 + 80));
      bzero(*(void **)(v10 + v7), 4 * v11);
      v7 += 8;
    }
    while (v8 != v7);
    uint64_t v12 = 0;
    for (uint64_t i = 0; i != v9; ++i)
    {
      uint64_t v14 = *(int *)(a1 + 332);
      uint64_t v15 = *(void *)(*(void *)(a1 + 80) + 8 * v14);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v15 + 248))(v15, *(void *)(a1 + 472) + 24 * (int)v14, a3, i, *(unsigned int *)(*(void *)(a1 + 256) + 4 * v14), *(unsigned int *)(*(void *)(a1 + 256) + 4 * v14));
      uint64_t v16 = *(void *)(*(void *)(a1 + 80) + 8 * v14);
      uint64_t v17 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 48))(v16);
      memset(v31, 0, sizeof(v31));
      std::vector<VVector<float>>::__init_with_size[abi:ne180100]<VVector<float>*,VVector<float>*>(v31, *v17, v17[1], v17[1] - *v17);
      uint64_t v18 = *(void *)(a1 + 504);
      float v19 = (char *)v31[0];
      int v20 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 80) + 8 * v14) + 264))();
      float32_t v21 = VVector<float>::add<float>((float32x4_t **)(v18 + v12), (float32x4_t **)&v19[v12], v20);
      uint64_t v22 = *(int *)(*(void *)(a1 + 400) + 4 * i);
      uint64_t v23 = *(void *)(*(void *)(a1 + 80) + 8 * v22);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, float32_t))(*(void *)v23 + 248))(v23, *(void *)(a1 + 472) + 24 * *(int *)(a1 + 336), a3, i, *(unsigned int *)(a1 + 344), *(unsigned int *)(*(void *)(a1 + 256) + 4 * v22), v21);
      uint64_t v24 = *(void *)(*(void *)(a1 + 80) + 8 * v22);
      float v25 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(void *)v24 + 48))(v24);
      memset(v30, 0, sizeof(v30));
      std::vector<VVector<float>>::__init_with_size[abi:ne180100]<VVector<float>*,VVector<float>*>(v30, *v25, v25[1], v25[1] - *v25);
      uint64_t v26 = *(void *)(a1 + 504);
      float v27 = (char *)v30[0];
      uint64_t v28 = *(void *)(*(void *)(a1 + 80) + 8 * v22);
      int v29 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 264))(v28);
      VVector<float>::add<float>((float32x4_t **)(v26 + v12), (float32x4_t **)&v27[v12], v29);
      if (v27) {
        operator delete(v27);
      }
      if (v19) {
        operator delete(v19);
      }
      v12 += 8;
    }
  }
}

void sub_1928E3114(_Unwind_Exception *exception_object)
{
  if (v2) {
    operator delete(v2);
  }
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<VVector<float>>::__init_with_size[abi:ne180100]<VVector<float>*,VVector<float>*>(void *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    float v4 = result;
    if (a4 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    BOOL result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a4);
    *float v4 = result;
    v4[1] = result;
    v4[2] = &result[v7];
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *result++ = v8;
    }
    v4[1] = result;
  }
  return result;
}

void sub_1928E31B4(_Unwind_Exception *exception_object)
{
  float v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float32_t VVector<float>::add<float>(float32x4_t **a1, float32x4_t **a2, int a3)
{
  int v3 = a3 / 8;
  if (a3 >= 8)
  {
    float v4 = *a1;
    float v5 = *a2;
    int v6 = a3 / 8;
    do
    {
      float32x4_t v7 = *v5;
      float32x4_t v8 = v5[1];
      v5 += 2;
      float32x4_t v9 = vaddq_f32(v8, v4[1]);
      float32x4_t v10 = vaddq_f32(v7, *v4);
      *float v4 = v10;
      v4[1] = v9;
      v4 += 2;
      --v6;
    }
    while (v6);
  }
  int v11 = 2 * v3;
  if (8 * v3 < a3)
  {
    uint64_t v12 = a3 - (uint64_t)(v11 * 4);
    f32 = (*a1)[v11].f32;
    uint64_t v14 = (*a2)[v11].f32;
    do
    {
      float v15 = *v14++;
      v10.f32[0] = v15 + *f32;
      *f32++ = v10.f32[0];
      --v12;
    }
    while (v12);
  }
  return v10.f32[0];
}

void ParallelSelector<float>::update()
{
}

uint64_t ParallelSelector<float>::setPredictionMode(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(result + 528) = a2;
  uint64_t v2 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      BOOL result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 8 * v5) + 280))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 80);
    }
    while (v5 < (*(void *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t ParallelSelector<float>::noutputs(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  if ((unint64_t)(*(void *)(a1 + 88) - v1) < 9) {
    return 0;
  }
  LODWORD(v3) = 0;
  unint64_t v4 = 1;
  do
  {
    uint64_t v3 = (*(unsigned int (**)(void))(**(void **)(v1 + 8 * v4) + 272))(*(void *)(v1 + 8 * v4))
       + v3;
    ++v4;
    uint64_t v1 = *(void *)(a1 + 80);
  }
  while (v4 < (*(void *)(a1 + 88) - v1) >> 3);
  return v3;
}

void ParallelSelector<float>::rearrangeTargets(uint64_t a1, void *a2, void *a3, int a4, char a5)
{
  int v28 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1);
  unint64_t v26 = (a4 - 1);
  if (a4 >= 1)
  {
    unint64_t v9 = 0;
    uint64_t v10 = a4;
    do
    {
      if (a5)
      {
        if (a3[1] != *a3)
        {
          if (v9 >= v26) {
            int v11 = 2;
          }
          else {
            int v11 = **(_DWORD **)(*a3 + 24 * v9 + 24);
          }
          goto LABEL_21;
        }
        if (v28 >= 1)
        {
          int v11 = 0;
          uint64_t v15 = 0;
          float v17 = 1.1755e-38;
          do
          {
            uint64_t v16 = *(void *)(*a2 + 8 * v9);
            if (*(float *)(v16 + 4 * v15) > v17)
            {
              int v11 = v15;
              float v17 = *(float *)(v16 + 4 * v15);
            }
            ++v15;
          }
          while (v28 != v15);
          goto LABEL_21;
        }
      }
      else if (v28 >= 1)
      {
        int v11 = 0;
        uint64_t v12 = 0;
        float v14 = 1.1755e-38;
        do
        {
          uint64_t v13 = *(void *)(*a2 + 8 * v9);
          if (*(float *)(v13 + 4 * v12) > v14)
          {
            int v11 = v12;
            float v14 = *(float *)(v13 + 4 * v12);
          }
          ++v12;
        }
        while (v28 != v12);
        goto LABEL_21;
      }
      int v11 = 0;
LABEL_21:
      uint64_t v18 = *(void *)(a1 + 376);
      *(_DWORD *)(v18 + 4 * v9) = v11;
      float v19 = *(OutputCluster **)(a1 + 496);
      *(_DWORD *)(*(void *)(a1 + 400) + 4 * v9) = OutputCluster::getWordClass(v19, v11) + 1;
      *(_DWORD *)(*(void *)(a1 + 424) + 4 * v9) = OutputCluster::getWordClassIndex(v19, *(_DWORD *)(v18 + 4 * v9));
      uint64_t v20 = **(void **)(a1 + 200);
      int v21 = (*(uint64_t (**)(void))(***(void ***)(a1 + 80) + 272))();
      bzero(*(void **)(v20 + 8 * v9), 4 * v21);
      uint64_t v22 = *(void **)(a1 + 200);
      uint64_t v23 = *(int *)(*(void *)(a1 + 400) + 4 * v9);
      *(_DWORD *)(*(void *)(*v22 + 8 * v9) + 4 * v23 - 4) = 1065353216;
      uint64_t v24 = v22[3 * (int)v23];
      int v25 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 80) + 8 * v23) + 272))();
      bzero(*(void **)(v24 + 8 * v9), 4 * v25);
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 200) + 24 * *(int *)(*(void *)(a1 + 400) + 4 * v9))
                            + 8 * v9)
                + 4 * *(int *)(*(void *)(a1 + 424) + 4 * v9)) = 1065353216;
      ++v9;
    }
    while (v9 != v10);
  }
}

void ParallelSelector<float>::cleanupAllBuffers(void *a1)
{
  uint64_t v3 = a1[35];
  uint64_t v2 = a1[36];
  if (v2 == v3)
  {
    uint64_t v3 = a1[36];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      unint64_t v5 = *(void **)(v3 + 8 * v4);
      if (*v5)
      {
        MEMORY[0x192FF1690](*v5, 0x1000C8052888210);
        void *v5 = 0;
        uint64_t v3 = a1[35];
        uint64_t v2 = a1[36];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  a1[36] = v3;
  uint64_t v6 = a1[10];
  if (a1[11] != v6)
  {
    unint64_t v7 = 0;
    do
    {
      (*(void (**)(void))(**(void **)(v6 + 8 * v7) + 208))(*(void *)(v6 + 8 * v7));
      ++v7;
      uint64_t v6 = a1[10];
    }
    while (v7 < (a1[11] - v6) >> 3);
  }
  a1[14] = a1[13];
  a1[57] = a1[56];
  a1[64] = a1[63];
  std::vector<std::vector<int>>::__clear[abi:ne180100](a1 + 25);
  std::vector<std::vector<int>>::__clear[abi:ne180100](a1 + 59);
  a1[39] = a1[38];
}

void ParallelSelector<float>::allocAllBuffers(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  if (*(void *)(a1 + 88) != v2)
  {
    unint64_t v3 = 0;
    do
    {
      (*(void (**)(void))(**(void **)(v2 + 8 * v3) + 200))(*(void *)(v2 + 8 * v3));
      ++v3;
      uint64_t v2 = *(void *)(a1 + 80);
    }
    while (v3 < (*(void *)(a1 + 88) - v2) >> 3);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "From allocAllBuffers");
  ParallelSelector<float>::init(a1);
  if (v5 < 0) {
    operator delete(__p);
  }
}

void sub_1928E37B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ParallelSelector<float>::resetForNewBatch(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v1)
  {
    uint64_t v2 = result;
    unint64_t v3 = 0;
    do
    {
      BOOL result = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 160))(*(void *)(v1 + 8 * v3));
      ++v3;
      uint64_t v1 = *(void *)(v2 + 80);
    }
    while (v3 < (*(void *)(v2 + 88) - v1) >> 3);
  }
  return result;
}

uint64_t ParallelSelector<float>::normalizeModel(uint64_t result, float a2)
{
  uint64_t v2 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      BOOL result = (*(uint64_t (**)(void, float))(**(void **)(v2 + 8 * v5) + 120))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 80);
    }
    while (v5 < (*(void *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t ParallelSelector<float>::clipModel(uint64_t result, float a2)
{
  uint64_t v2 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      BOOL result = (*(uint64_t (**)(void, float))(**(void **)(v2 + 8 * v5) + 112))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 80);
    }
    while (v5 < (*(void *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

void *ParallelSelector<float>::applyGradient(void *result, void *lpsrc)
{
  uint64_t v2 = (uint64_t)result;
  if (lpsrc)
  {
    uint64_t v3 = (uint64_t)result;
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(v2 + 80);
  if (*(void *)(v2 + 88) != v4)
  {
    unint64_t v5 = 0;
    do
    {
      BOOL result = (void *)(*(uint64_t (**)(void, void))(**(void **)(v4 + 8 * v5) + 104))(*(void *)(v4 + 8 * v5), *(void *)(*(void *)(v3 + 80) + 8 * v5));
      ++v5;
      uint64_t v4 = *(void *)(v2 + 80);
    }
    while (v5 < (*(void *)(v2 + 88) - v4) >> 3);
  }
  return result;
}

void *ParallelSelector<float>::addGradient(void *result, void *lpsrc)
{
  uint64_t v2 = (uint64_t)result;
  if (lpsrc)
  {
    uint64_t v3 = (uint64_t)result;
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(v2 + 80);
  if (*(void *)(v2 + 88) != v4)
  {
    unint64_t v5 = 0;
    do
    {
      BOOL result = (void *)(*(uint64_t (**)(void, void))(**(void **)(v4 + 8 * v5) + 96))(*(void *)(v4 + 8 * v5), *(void *)(*(void *)(v3 + 80) + 8 * v5));
      ++v5;
      uint64_t v4 = *(void *)(v2 + 80);
    }
    while (v5 < (*(void *)(v2 + 88) - v4) >> 3);
  }
  return result;
}

void *ParallelSelector<float>::compareModels(void *result, void *lpsrc, void *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = (uint64_t)result;
  if (lpsrc)
  {
    uint64_t v5 = (uint64_t)result;
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v5 = 0;
  if (a3)
  {
LABEL_3:
    uint64_t v3 = result;
  }
LABEL_4:
  uint64_t v6 = *(void *)(v4 + 80);
  if (*(void *)(v4 + 88) != v6)
  {
    unint64_t v7 = 0;
    do
    {
      BOOL result = (void *)(*(uint64_t (**)(void, void, void))(**(void **)(v6 + 8 * v7) + 88))(*(void *)(v6 + 8 * v7), *(void *)(*(void *)(v5 + 80) + 8 * v7), *(void *)(v3[10] + 8 * v7));
      ++v7;
      uint64_t v6 = *(void *)(v4 + 80);
    }
    while (v7 < (*(void *)(v4 + 88) - v6) >> 3);
  }
  return result;
}

void *ParallelSelector<float>::subtractModels(void *result, void *lpsrc, void *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = (uint64_t)result;
  if (lpsrc)
  {
    uint64_t v5 = (uint64_t)result;
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v5 = 0;
  if (a3)
  {
LABEL_3:
    uint64_t v3 = result;
  }
LABEL_4:
  uint64_t v6 = *(void *)(v4 + 80);
  if (*(void *)(v4 + 88) != v6)
  {
    unint64_t v7 = 0;
    do
    {
      BOOL result = (void *)(*(uint64_t (**)(void, void, void))(**(void **)(v6 + 8 * v7) + 80))(*(void *)(v6 + 8 * v7), *(void *)(*(void *)(v5 + 80) + 8 * v7), *(void *)(v3[10] + 8 * v7));
      ++v7;
      uint64_t v6 = *(void *)(v4 + 80);
    }
    while (v7 < (*(void *)(v4 + 88) - v6) >> 3);
  }
  return result;
}

uint64_t ParallelSelector<float>::write(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v5)
  {
    uint64_t v10 = result;
    unint64_t v11 = 0;
    do
    {
      BOOL result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(v5 + 8 * v11) + 72))(*(void *)(v5 + 8 * v11), a2, a3, a4, a5);
      ++v11;
      uint64_t v5 = *(void *)(v10 + 80);
    }
    while (v11 < (*(void *)(v10 + 88) - v5) >> 3);
  }
  return result;
}

uint64_t ParallelSelector<float>::read(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v4)
  {
    uint64_t v8 = result;
    unint64_t v9 = 0;
    do
    {
      BOOL result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v4 + 8 * v9) + 64))(*(void *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      uint64_t v4 = *(void *)(v8 + 80);
    }
    while (v9 < (*(void *)(v8 + 88) - v4) >> 3);
  }
  return result;
}

uint64_t ParallelSelector<float>::weightsAreNaN(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  if (*(void *)(a1 + 88) == v1) {
    return 0;
  }
  unint64_t v3 = 0;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 56))(*(void *)(v1 + 8 * v3));
    if (result) {
      break;
    }
    ++v3;
    uint64_t v1 = *(void *)(a1 + 80);
  }
  while (v3 < (*(void *)(a1 + 88) - v1) >> 3);
  return result;
}

uint64_t ParallelSelector<float>::inputDeltas(uint64_t a1)
{
  return a1 + 504;
}

uint64_t ParallelSelector<float>::deltas(uint64_t a1)
{
  return a1 + 448;
}

uint64_t ParallelSelector<float>::outputs(uint64_t a1)
{
  return a1 + 104;
}

void BatchNormalization<float>::~BatchNormalization(void *a1)
{
  BatchNormalization<float>::~BatchNormalization(a1);

  JUMPOUT(0x192FF16B0);
}

void *BatchNormalization<float>::~BatchNormalization(void *a1)
{
  *a1 = &unk_1EE321340;
  uint64_t v4 = a1 + 36;
  uint64_t v2 = (void *)a1[36];
  unint64_t v3 = (void *)v4[1];
  if (v3 == v2)
  {
    uint64_t v2 = v3;
    if (v3)
    {
LABEL_7:
      a1[37] = v2;
      operator delete(v2);
    }
  }
  else
  {
    unint64_t v5 = 0;
    do
    {
      if (*((void *)v2 + v5))
      {
        MEMORY[0x192FF1690](*((void *)v2 + v5), 0x1000C8052888210);
        uint64_t v2 = (void *)a1[36];
        unint64_t v3 = (void *)a1[37];
      }
      ++v5;
    }
    while (v5 < ((unsigned char *)v3 - (unsigned char *)v2) >> 3);
    if (v2) {
      goto LABEL_7;
    }
  }
  PTMutex::~PTMutex((PTMutex *)(a1 + 27));
  uint64_t v6 = (void *)a1[24];
  if (v6)
  {
    a1[25] = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)a1[21];
  if (v7)
  {
    a1[22] = v7;
    operator delete(v7);
  }
  *a1 = &unk_1EE3182B8;
  uint64_t v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

void BatchNormalization<float>::log2Probability()
{
}

void BatchNormalization<float>::computeError()
{
}

void *BatchNormalization<float>::setMaster(void *a1, void *lpsrc)
{
  if (!result) {
    __cxa_bad_cast();
  }
  a1[18] = result[18];
  a1[19] = result[19];
  a1[16] = result[16];
  a1[17] = result[17];
  return result;
}

int *BatchNormalization<float>::forward(int *result, void *a2, uint64_t a3, int a4)
{
  uint64_t v4 = a4 & 0xFFFFFF;
  if ((a4 & 0xFFFFFF) != 0)
  {
    uint64_t v6 = result;
    uint64_t v7 = 0;
    do
    {
      memmove(*(void **)(*((void *)v6 + 21) + 8 * v7), *(const void **)(*a2 + 8 * v7), 4 * v6[11]);
      int v8 = v6[11];
      unint64_t v9 = *(const void **)(*((void *)v6 + 21) + 8 * v7);
      if (v8 >= 1)
      {
        float v10 = *((float *)v6 + 12);
        unint64_t v11 = (float *)*((void *)v6 + 16);
        uint64_t v12 = (float *)*((void *)v6 + 17);
        uint64_t v13 = *(float **)(*((void *)v6 + 21) + 8 * v7);
        uint64_t v14 = v6[11];
        uint64_t v15 = (float *)*((void *)v6 + 18);
        uint64_t v16 = (float *)*((void *)v6 + 19);
        do
        {
          float v17 = *v11++;
          float v18 = v17;
          float v19 = *v12++;
          float v20 = sqrtf(v10 + v19);
          float v21 = *v15++;
          float v22 = v21;
          float v23 = *v16++;
          *uint64_t v13 = v23 + (float)((float)((float)(*v13 - v18) / v20) * v22);
          ++v13;
          --v14;
        }
        while (v14);
      }
      uint64_t result = (int *)memmove(*(void **)(*((void *)v6 + 24) + 8 * v7++), v9, 4 * v8);
    }
    while (v7 != v4);
  }
  return result;
}

void BatchNormalization<float>::backward()
{
}

uint64_t BatchNormalization<float>::noutputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t BatchNormalization<float>::ninputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t BatchNormalization<float>::cleanupAllBuffers(uint64_t result)
{
  uint64_t v1 = (void *)result;
  uint64_t v3 = *(void *)(result + 288);
  uint64_t v2 = *(void *)(result + 296);
  if (v2 == v3)
  {
    uint64_t v3 = *(void *)(result + 296);
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t result = *(void *)(v3 + 8 * v4);
      if (result)
      {
        uint64_t result = MEMORY[0x192FF1690](result, 0x1000C8052888210);
        uint64_t v3 = v1[36];
        uint64_t v2 = v1[37];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  v1[37] = v3;
  v1[22] = v1[21];
  v1[25] = v1[24];
  return result;
}

void BatchNormalization<float>::allocAllBuffers(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "BatchNormalization, from allocAll");
  std::vector<VVector<float>>::resize((char **)(a1 + 168), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 192), maxFeatureVectors);
  if (!*(unsigned char *)(a1 + 161)) {
    operator new[]();
  }
  if (maxFeatureVectors >= 1) {
    operator new[]();
  }
  if (v3 < 0) {
    operator delete(__p);
  }
}

void sub_1928E4910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float **BatchNormalization<float>::write(uint64_t a1, FILE *__stream, int *a3, uint64_t a4, unsigned int a5)
{
  int __ptr = *(_DWORD *)(a1 + 44);
  fwrite(&__ptr, 4uLL, 1uLL, __stream);
  *a3 += 4;
  VVector<float>::write((float **)(a1 + 128), __stream, a3, 32, a5, *(_DWORD *)(a1 + 44));
  VVector<float>::write((float **)(a1 + 136), __stream, a3, 32, a5, *(_DWORD *)(a1 + 44));
  VVector<float>::write((float **)(a1 + 144), __stream, a3, 32, a5, *(_DWORD *)(a1 + 44));
  int v9 = *(_DWORD *)(a1 + 44);

  return VVector<float>::write((float **)(a1 + 152), __stream, a3, 32, a5, v9);
}

float **VVector<float>::write(float **result, FILE *__stream, int *a3, int a4, unsigned int a5, int a6)
{
  if (a5 > 0x20 || ((1 << a5) & 0x100010100) == 0) {
    exitFramework(23);
  }
  int v9 = result;
  switch(a4)
  {
    case 8:
      if (a5 == 32)
      {
        if (!__stream) {
          goto LABEL_68;
        }
        int v15 = *a3 & 0xF;
        if (*a3 <= 0) {
          int v15 = -(-*a3 & 0xF);
        }
        if (v15 >= 15) {
          int v16 = 16;
        }
        else {
          int v16 = 15 - v15;
        }
        LOBYTE(__ptr[0]) = v16;
        fwrite(__ptr, 1uLL, 1uLL, __stream);
        ++*a3;
        writeByteArray((size_t)__stream, a3, v16);
        if ((*(unsigned char *)a3 & 0xF) != 0) {
          goto LABEL_69;
        }
LABEL_36:
        float v17 = *v9;
        std::string::basic_string[abi:ne180100]<0>(__ptr, "write(fp)");
        std::string::basic_string[abi:ne180100]<0>(__p, "VVector");
        float v29 = 0.0;
        float v30 = 0.0;
        onlineStdMeanVar(v17, &v33, &v32, &v31, &v30, &v29, &v28, a6);
        if (v25 < 0) {
          operator delete(__p[0]);
        }
        if (v27 < 0) {
          operator delete(__ptr[0]);
        }
        operator new[]();
      }
LABEL_70:
      exitFramework(45);
    case 16:
      if (a5 == 32)
      {
        if (!__stream) {
          goto LABEL_68;
        }
        int v13 = *a3 & 0xF;
        if (*a3 <= 0) {
          int v13 = -(-*a3 & 0xF);
        }
        if (v13 >= 15) {
          int v14 = 16;
        }
        else {
          int v14 = 15 - v13;
        }
        LOBYTE(__ptr[0]) = v14;
        fwrite(__ptr, 1uLL, 1uLL, __stream);
        ++*a3;
        writeByteArray((size_t)__stream, a3, v14);
        if ((*(unsigned char *)a3 & 0xF) != 0) {
          goto LABEL_69;
        }
        goto LABEL_36;
      }
      goto LABEL_70;
    case 32:
      switch(a5)
      {
        case 0x20u:
          if (__stream)
          {
            int v10 = *a3 & 0xF;
            if (*a3 <= 0) {
              int v10 = -(-*a3 & 0xF);
            }
            if (v10 >= 15) {
              int v11 = 16;
            }
            else {
              int v11 = 15 - v10;
            }
            LOBYTE(__ptr[0]) = v11;
            fwrite(__ptr, 1uLL, 1uLL, __stream);
            ++*a3;
            writeByteArray((size_t)__stream, a3, v11);
            if ((*(unsigned char *)a3 & 0xF) == 0)
            {
              uint64_t v12 = *v9;
              std::string::basic_string[abi:ne180100]<0>(__ptr, "write(fp)");
              std::string::basic_string[abi:ne180100]<0>(__p, "VVector");
              float v29 = 0.0;
              float v30 = 0.0;
              onlineStdMeanVar(v12, &v33, &v32, &v31, &v30, &v29, &v28, a6);
              if (v25 < 0) {
                operator delete(__p[0]);
              }
              if (v27 < 0) {
                operator delete(__ptr[0]);
              }
              operator new[]();
            }
            goto LABEL_69;
          }
LABEL_68:
          exitFramework(9);
        case 8u:
          if (!__stream) {
            goto LABEL_68;
          }
          int v21 = *a3 & 0xF;
          if (*a3 <= 0) {
            int v21 = -(-*a3 & 0xF);
          }
          if (v21 >= 15) {
            int v22 = 16;
          }
          else {
            int v22 = 15 - v21;
          }
          LOBYTE(__ptr[0]) = v22;
          fwrite(__ptr, 1uLL, 1uLL, __stream);
          ++*a3;
          writeByteArray((size_t)__stream, a3, v22);
          if ((*(unsigned char *)a3 & 0xF) == 0)
          {
            float v23 = *v9;
            std::string::basic_string[abi:ne180100]<0>(__ptr, "write(fp)");
            std::string::basic_string[abi:ne180100]<0>(__p, "VVector");
            float v29 = 0.0;
            float v30 = 0.0;
            onlineStdMeanVar(v23, &v33, &v32, &v31, &v30, &v29, &v28, a6);
            if (v25 < 0) {
              operator delete(__p[0]);
            }
            if (v27 < 0) {
              operator delete(__ptr[0]);
            }
            operator new[]();
          }
LABEL_69:
          exitFramework(17);
        case 0x10u:
          if (!__stream) {
            goto LABEL_68;
          }
          int v18 = *a3 & 0xF;
          if (*a3 <= 0) {
            int v18 = -(-*a3 & 0xF);
          }
          if (v18 >= 15) {
            int v19 = 16;
          }
          else {
            int v19 = 15 - v18;
          }
          LOBYTE(__ptr[0]) = v19;
          fwrite(__ptr, 1uLL, 1uLL, __stream);
          ++*a3;
          writeByteArray((size_t)__stream, a3, v19);
          if ((*(unsigned char *)a3 & 0xF) == 0)
          {
            float v20 = *v9;
            std::string::basic_string[abi:ne180100]<0>(__ptr, "write(fp)");
            std::string::basic_string[abi:ne180100]<0>(__p, "VVector");
            float v29 = 0.0;
            float v30 = 0.0;
            onlineStdMeanVar(v20, &v33, &v32, &v31, &v30, &v29, &v28, a6);
            if (v25 < 0) {
              operator delete(__p[0]);
            }
            if (v27 < 0) {
              operator delete(__ptr[0]);
            }
            operator new[]();
          }
          goto LABEL_69;
      }
      break;
  }
  return result;
}

void sub_1928E50B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BatchNormalization<float>::read(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(int *)(a2 + 72);
  uint64_t v7 = (int *)(*(void *)a2 + v6);
  if ((unint64_t)v7 <= *(void *)a2 + *(void *)(a2 + 8) - 4)
  {
    int v8 = *v7;
    *(_DWORD *)(a2 + 72) = v6 + 4;
  }
  else
  {
    int v8 = 0;
  }
  if (*(_DWORD *)(a1 + 44) != v8) {
    exitFramework(3);
  }
  VVector<float>::read((signed __int8 **)(a1 + 128), a2, *a3, *(unsigned __int8 *)(a1 + 161), (signed __int8 **)0x20, v8);
  VVector<float>::read((signed __int8 **)(a1 + 136), a2, *a3, *(unsigned __int8 *)(a1 + 161), (signed __int8 **)0x20, *(_DWORD *)(a1 + 44));
  VVector<float>::read((signed __int8 **)(a1 + 144), a2, *a3, *(unsigned __int8 *)(a1 + 161), (signed __int8 **)0x20, *(_DWORD *)(a1 + 44));
  int v9 = *a3;
  int v10 = *(unsigned __int8 *)(a1 + 161);
  int v11 = *(_DWORD *)(a1 + 44);

  return VVector<float>::read((signed __int8 **)(a1 + 152), a2, v9, v10, (signed __int8 **)0x20, v11);
}

uint64_t VVector<float>::read(signed __int8 **a1, uint64_t a2, int a3, BOOL a4, signed __int8 **a5, int a6)
{
  int v20 = a6;
  if (!a2) {
    goto LABEL_24;
  }
  int v7 = (int)a5;
  if (a3 == 3)
  {
    readPadding((uint64_t *)a2);
    char v11 = *(unsigned char *)(a2 + 72);
  }
  else
  {
    char v11 = *(unsigned char *)a1;
  }
  if ((v11 & 0xF) != 0) {
    exitFramework(19);
  }
  if (a4)
  {
    *a1 = 0;
    if (v7 == 8)
    {
      uint64_t v17 = *(int *)(a2 + 72);
      int v18 = (signed __int8 *)(*(void *)a2 + v17);
      *a1 = v18;
      *(_DWORD *)(a2 + 72) = v17 + a6;
      uint64_t result = a6;
      if (!v18) {
        goto LABEL_24;
      }
    }
    else
    {
      if (v7 == 16)
      {
        int v12 = 2 * a6;
        uint64_t v19 = *(int *)(a2 + 72);
        int v14 = (signed __int8 *)(*(void *)a2 + v19);
        *a1 = v14;
        int v15 = v19 + 2 * a6;
      }
      else
      {
        if (v7 != 32) {
          exitFramework(46);
        }
        int v12 = 4 * a6;
        uint64_t v13 = *(int *)(a2 + 72);
        int v14 = (signed __int8 *)(*(void *)a2 + v13);
        *a1 = v14;
        int v15 = v13 + 4 * a6;
      }
      *(_DWORD *)(a2 + 72) = v15;
      uint64_t result = v12;
      if (!v14) {
        goto LABEL_24;
      }
    }
  }
  else
  {
    switch(v7)
    {
      case 8:
        uint64_t result = ReadOnlyFile::readInt8Array((ReadOnlyFile *)a2, *a1, &v20, a4, a5);
        break;
      case 16:
        uint64_t result = ReadOnlyFile::readInt16Array((ReadOnlyFile *)a2, (__int16 *)*a1, &v20, a4, (__int16 **)a5);
        break;
      case 32:
        uint64_t result = ReadOnlyFile::readFloatArray((ReadOnlyFile *)a2, (float *)*a1, &v20, a4, (float **)a5);
        break;
      default:
        exitFramework(45);
    }
    if (!*a1) {
LABEL_24:
    }
      exitFramework(9);
  }
  if (!result) {
    goto LABEL_24;
  }
  return result;
}

uint64_t *readPadding(uint64_t *result)
{
  uint64_t v1 = *((int *)result + 18);
  uint64_t v2 = *result;
  char v3 = (unsigned __int8 *)(*result + v1);
  unint64_t v4 = *result + result[1] - 1;
  if ((unint64_t)v3 <= v4)
  {
    int v5 = *v3;
    int v6 = v1 + 1;
    for (*((_DWORD *)result + 18) = v6; v5; --v5)
    {
      if (v2 + v6 <= v4) {
        *((_DWORD *)result + 18) = ++v6;
      }
    }
  }
  return result;
}

uint64_t ReadOnlyFile::readFloatArray(ReadOnlyFile *this, float *a2, int *a3, BOOL a4, float **a5)
{
  int v5 = *a3;
  if (*a3 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)this;
    unint64_t v8 = *(void *)this + *((void *)this + 1) - 4;
    int v9 = *((_DWORD *)this + 18);
    do
    {
      int v10 = (float *)(v7 + v9);
      if ((unint64_t)v10 > v8) {
        exitFramework(25);
      }
      float v11 = *v10;
      v9 += 4;
      *((_DWORD *)this + 18) = v9;
      a2[v6++] = v11;
    }
    while (v6 < *a3);
  }
  return 4 * v5;
}

uint64_t ReadOnlyFile::readInt16Array(ReadOnlyFile *this, __int16 *a2, int *a3, BOOL a4, __int16 **a5)
{
  int v5 = *a3;
  if (*a3 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)this;
    unint64_t v8 = *(void *)this + *((void *)this + 1) - 4;
    int v9 = *((_DWORD *)this + 18);
    do
    {
      int v10 = (__int16 *)(v7 + v9 + (int)v6);
      if ((unint64_t)v10 > v8) {
        exitFramework(25);
      }
      __int16 v11 = *v10;
      *((_DWORD *)this + 18) = v9 + v6 + 1;
      a2[v6++] = v11;
    }
    while (v6 < *a3);
  }
  return 2 * v5;
}

uint64_t ReadOnlyFile::readInt8Array(ReadOnlyFile *this, signed __int8 *a2, const int *a3, BOOL a4, signed __int8 **a5)
{
  uint64_t result = *a3;
  if ((int)result >= 1)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *((int *)this + 18);
      int v9 = (signed __int8 *)(*(void *)this + v8);
      if ((unint64_t)v9 > *(void *)this + *((void *)this + 1) - 1) {
        exitFramework(25);
      }
      signed __int8 v10 = *v9;
      *((_DWORD *)this + 18) = v8 + 1;
      a2[v7++] = v10;
    }
    while (v7 < *a3);
  }
  return result;
}

uint64_t BatchNormalization<float>::weightsAreNaN()
{
  return 0;
}

void BatchNormalization<float>::inputDeltas()
{
}

void BatchNormalization<float>::deltas()
{
}

uint64_t BatchNormalization<float>::outputs(uint64_t a1)
{
  return a1 + 192;
}

uint64_t BatchNormalization<float>::inputs(uint64_t a1)
{
  return a1 + 168;
}

void BatchNormalization<float>::targets()
{
}

void EstimatorScalar<float>::EstimatorScalar(uint64_t a1, long long *a2, int a3, int a4, float a5)
{
  *(void *)a1 = &unk_1EE320790;
  *(float *)(a1 + 8) = a5;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    *(void *)(a1 + 48) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v6;
  }
  *(unsigned char *)(a1 + 56) = 1;
  operator new();
}

void sub_1928E562C(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v3, 0x80C40B8603338);
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

uint64_t EstimatorADAM<float>::EstimatorADAM(uint64_t a1, long long *a2, int a3, int a4, float a5, float a6, double a7)
{
  *(void *)a1 = &unk_1EE318250;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(float *)(a1 + 20) = a5;
  *(float *)(a1 + 24) = a6;
  *(_DWORD *)(a1 + 28) = 841731191;
  *(double *)(a1 + 32) = a7;
  *(_DWORD *)(a1 + 56) = a3;
  *(_DWORD *)(a1 + 60) = a4;
  signed __int8 v10 = (std::string *)(a1 + 136);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    a6 = *(float *)(a1 + 24);
    a7 = *(double *)(a1 + 32);
  }
  else
  {
    long long v11 = *a2;
    v10->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  *(unsigned char *)(a1 + 160) = 1;
  *(_DWORD *)(a1 + 56) = a4;
  *(_DWORD *)(a1 + 60) = a3;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(float *)(a1 + 40) = a6;
  *(double *)(a1 + 48) = a7;
  *(_DWORD *)(a1 + 164) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 128) = 0;
  return a1;
}

uint64_t EstimatorAdaMax<float>::EstimatorAdaMax(uint64_t a1, long long *a2, int a3, int a4, float a5, float a6, double a7)
{
  *(void *)a1 = &unk_1EE320728;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = a4;
  *(float *)(a1 + 24) = a5;
  *(float *)(a1 + 28) = a6;
  *(_DWORD *)(a1 + 32) = 841731191;
  float v10 = a7;
  *(float *)(a1 + 36) = v10;
  long long v11 = (std::string *)(a1 + 120);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    a6 = *(float *)(a1 + 28);
    float v10 = *(float *)(a1 + 36);
  }
  else
  {
    long long v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  *(unsigned char *)(a1 + 144) = 1;
  *(_DWORD *)(a1 + 16) = a4;
  *(_DWORD *)(a1 + 20) = a3;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  *(float *)(a1 + 40) = a6;
  *(float *)(a1 + 44) = v10;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 112) = 0;
  return a1;
}

void GRU<float>::init()
{
}

void sub_1928E7F8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  SparseMatrix<float>::~SparseMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t SparseMatrix<float>::~SparseMatrix(uint64_t a1)
{
  SparseMatrix<float>::cleanupAllBuffers((void *)a1);
  uint64_t v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }
  int v5 = (void **)(a1 + 48);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t SparseMatrix<float>::cleanupAllBuffers(void *a1)
{
  uint64_t v2 = a1[12];
  uint64_t v3 = a1[13];
  if (v3 == v2)
  {
    uint64_t v2 = a1[13];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v2 + 8 * v4);
      if (v5)
      {
        MEMORY[0x192FF1690](v5, 0x1000C8052888210);
        uint64_t v2 = a1[12];
        uint64_t v3 = a1[13];
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
  }
  a1[13] = v2;
  uint64_t v6 = a1[10];
  if (v6)
  {
    MEMORY[0x192FF16B0](v6, 0x80C40B8603338);
    a1[10] = 0;
  }
  uint64_t result = a1[9];
  if (result)
  {
    uint64_t result = MEMORY[0x192FF16B0](result, 0x80C40B8603338);
    a1[9] = 0;
  }
  return result;
}

void MMatrix<float>::MMatrix()
{
}

void VVector<float>::VVector()
{
}

uint64_t SparseMatrix<float>::SparseMatrix(uint64_t a1, int a2, int a3, int a4, int a5)
{
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v6 = (uint64_t *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  *(_DWORD *)(a1 + 12) = a5;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v7 = (void *)(a1 + 72);
  *(void *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  std::vector<VVector<float>>::resize((char **)(a1 + 24), a4);
  unint64_t v8 = *(int *)(a1 + 8);
  if ((int)v8 > 0) {
    operator new[]();
  }
  std::vector<std::vector<int>>::resize(v6, v8);
  if (*(int *)(a1 + 8) >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    do
    {
      std::vector<int>::resize((std::vector<int> *)(*(void *)(a1 + 48) + v9), *(int *)(a1 + 12));
      ++v10;
      v9 += 24;
    }
    while (v10 < *(int *)(a1 + 8));
  }
  void *v7 = 0;
  v7[1] = 0;
  if (!*(unsigned char *)(a1 + 88)) {
    operator new();
  }
  return a1;
}

void sub_1928E865C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x192FF16B0](v4, 0x80C40B8603338);
  uint64_t v7 = *v5;
  if (*v5)
  {
    *(void *)(v2 + 104) = v7;
    operator delete(v7);
  }
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  unint64_t v8 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 32) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

uint64_t SparseMatrix<float>::operator=(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_OWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(void *)(a1 + 104) = *(void *)(a1 + 96);
  uint64_t v5 = *(void ***)(a1 + 72);
  if (!v5) {
    operator new();
  }
  memmove(*v5, **((const void ***)a2 + 9), 4 * (int)v4);
  uint64_t v6 = *(void ***)(a1 + 80);
  if (!v6) {
    operator new();
  }
  memmove(*v6, **((const void ***)a2 + 10), 4 * *(_DWORD *)(a1 + 4) * *(_DWORD *)a1);
  *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
  std::vector<VVector<float>>::resize((char **)(a1 + 24), *(int *)(a1 + 8));
  unint64_t v7 = *(int *)(a1 + 8);
  if ((int)v7 > 0) {
    operator new[]();
  }
  std::vector<std::vector<int>>::resize((uint64_t *)(a1 + 48), v7);
  if (*(int *)(a1 + 8) >= 1)
  {
    uint64_t v8 = 0;
    int v9 = *(_DWORD *)(a1 + 12);
    do
    {
      std::vector<int>::resize((std::vector<int> *)(*(void *)(a1 + 48) + 24 * v8), v9);
      int v9 = *(_DWORD *)(a1 + 12);
      if (v9 >= 1)
      {
        uint64_t v10 = 0;
        uint64_t v11 = *(void *)(*((void *)a2 + 6) + 24 * v8);
        uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 24 * v8);
        do
        {
          *(_DWORD *)(v12 + 4 * v10) = *(_DWORD *)(v11 + 4 * v10);
          ++v10;
        }
        while (v10 < *(int *)(a1 + 12));
        int v9 = *(_DWORD *)(a1 + 12);
      }
      ++v8;
    }
    while (v8 < *(int *)(a1 + 8));
  }
  return a1;
}

void sub_1928E8B1C(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

void rgen(void)
{
  {
    unsigned int v0 = 5489;
    rgen(void)::rgen_[0] = 5489;
    for (uint64_t i = 1; i != 624; ++i)
    {
      unsigned int v0 = i + 1812433253 * (v0 ^ (v0 >> 30));
      rgen(void)::rgen_[i] = v0;
    }
    qword_1E9307AB8 = 0;
  }
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  unint64_t v1 = (qword_1E9307AB8 + 1) % 0x270uLL;
  unsigned int v2 = rgen(void)::rgen_[(qword_1E9307AB8 + 397) % 0x270uLL] ^ ((rgen(void)::rgen_[v1] & 0x7FFFFFFE | rgen(void)::rgen_[qword_1E9307AB8] & 0x80000000) >> 1) ^ (rgen(void)::rgen_[v1] << 31 >> 31) & 0x9908B0DF;
  rgen(void)::rgen_[qword_1E9307AB8] = v2;
  qword_1E9307AB8 = v1;
  unsigned int v3 = ((v2 ^ (v2 >> 11)) << 7) & 0x9D2C5680 ^ v2 ^ (v2 >> 11);
  return (v3 << 15) & 0xEFC60000 ^ v3 ^ (((v3 << 15) & 0xEFC60000 ^ v3) >> 18);
}

void EstimatorAdaMax<float>::~EstimatorAdaMax(uint64_t a1)
{
  EstimatorAdaMax<float>::~EstimatorAdaMax(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t EstimatorAdaMax<float>::~EstimatorAdaMax(uint64_t a1)
{
  *(void *)a1 = &unk_1EE320728;
  unsigned int v2 = *(void **)(a1 + 56);
  if (v2)
  {
    if (*v2)
    {
      MEMORY[0x192FF1690](*v2, 0x1000C8052888210);
      uint64_t v3 = *(void *)(a1 + 56);
      if (v3) {
        MEMORY[0x192FF16B0](v3, 0x80C40B8603338);
      }
    }
  }
  long long v4 = *(void **)(a1 + 64);
  if (v4)
  {
    if (*v4)
    {
      MEMORY[0x192FF1690](*v4, 0x1000C8052888210);
      uint64_t v5 = *(void *)(a1 + 64);
      if (v5) {
        MEMORY[0x192FF16B0](v5, 0x80C40B8603338);
      }
    }
  }
  uint64_t v6 = *(void **)(a1 + 72);
  if (v6)
  {
    if (*v6)
    {
      MEMORY[0x192FF1690](*v6, 0x1000C8052888210);
      uint64_t v7 = *(void *)(a1 + 72);
      if (v7) {
        MEMORY[0x192FF16B0](v7, 0x80C40B8603338);
      }
    }
  }
  uint64_t v8 = *(void **)(a1 + 80);
  if (v8)
  {
    if (*v8)
    {
      MEMORY[0x192FF1690](*v8, 0x1000C8052888210);
      uint64_t v9 = *(void *)(a1 + 80);
      if (v9) {
        MEMORY[0x192FF16B0](v9, 0x80C40B8603338);
      }
    }
  }
  uint64_t v10 = *(void **)(a1 + 88);
  if (v10)
  {
    if (*v10)
    {
      MEMORY[0x192FF1690](*v10, 0x1000C8052888210);
      uint64_t v11 = *(void *)(a1 + 88);
      if (v11) {
        MEMORY[0x192FF16B0](v11, 0x80C40B8603338);
      }
    }
  }
  uint64_t v12 = *(void **)(a1 + 96);
  if (v12)
  {
    if (*v12)
    {
      MEMORY[0x192FF1690](*v12, 0x1000C8052888210);
      uint64_t v13 = *(void *)(a1 + 96);
      if (v13) {
        MEMORY[0x192FF16B0](v13, 0x80C40B8603338);
      }
    }
  }
  int v14 = *(void **)(a1 + 104);
  if (v14)
  {
    if (*v14)
    {
      MEMORY[0x192FF1690](*v14, 0x1000C8052888210);
      uint64_t v15 = *(void *)(a1 + 104);
      if (v15) {
        MEMORY[0x192FF16B0](v15, 0x80C40B8603338);
      }
    }
  }
  int v16 = *(void **)(a1 + 48);
  if (v16)
  {
    if (*v16)
    {
      MEMORY[0x192FF1690](*v16, 0x1000C8052888210);
      uint64_t v17 = *(void *)(a1 + 48);
      if (v17) {
        MEMORY[0x192FF16B0](v17, 0x80C40B8603338);
      }
    }
  }
  int v18 = *(void **)(a1 + 112);
  if (v18)
  {
    if (*v18)
    {
      MEMORY[0x192FF1690](*v18, 0x1000C8052888210);
      uint64_t v19 = *(void *)(a1 + 112);
      if (v19) {
        MEMORY[0x192FF16B0](v19, 0x80C40B8603338);
      }
    }
  }
  *(unsigned char *)(a1 + 12) = 0;
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  return a1;
}

float EstimatorAdaMax<float>::getAlpha(uint64_t a1)
{
  return *(float *)(a1 + 24);
}

uint64_t EstimatorAdaMax<float>::isTransposed(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

void EstimatorAdaMax<float>::name(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 120), *(void *)(a1 + 128));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 120);
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 136);
  }
}

float *EstimatorAdaMax<float>::print(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 12)) {
    EstimatorAdaMax<float>::allocate();
  }
  int v2 = *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16);
  float v5 = 0.0;
  float v6 = 0.0;
  onlineStdMeanVar(**(float ***)(a1 + 56), &v9, &v8, &v7, &v6, &v5, &v4, v2);
  onlineStdMeanVar(**(float ***)(a1 + 64), &v9, &v8, &v7, &v6, &v5, &v4, v2);
  onlineStdMeanVar(**(float ***)(a1 + 72), &v9, &v8, &v7, &v6, &v5, &v4, v2);
  onlineStdMeanVar(**(float ***)(a1 + 80), &v9, &v8, &v7, &v6, &v5, &v4, v2);
  return onlineStdMeanVar(**(float ***)(a1 + 104), &v9, &v8, &v7, &v6, &v5, &v4, v2);
}

void EstimatorAdaMax<float>::allocate()
{
}

void sub_1928E9470(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

uint64_t EstimatorAdaMax<float>::updateRowOfElements(uint64_t result, int a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = **(void **)(result + 104) + 4 * a2;
    uint64_t v7 = **(void **)(result + 80) + 4 * a2;
    uint64_t v8 = **(void **)(result + 72) + 4 * a2;
    uint64_t v9 = **(void **)(result + 64) + 4 * a2;
    uint64_t v10 = **(void **)(result + 56) + 4 * a2;
    do
    {
      float v11 = *(float *)(a3 + v5);
      *(float *)(v9 + v5) = (float)(v11 * (float)(1.0 - *(float *)(result + 28)))
                          + (float)(*(float *)(result + 28) * *(float *)(v10 + v5));
      float v12 = fabsf(v11);
      if ((float)(*(float *)(result + 36) * *(float *)(v8 + v5)) >= v12) {
        float v12 = *(float *)(result + 36) * *(float *)(v8 + v5);
      }
      *(float *)(v7 + v5) = v12;
      float v13 = (float)(*(float *)(v9 + v5) * (float)(*(float *)(result + 24) / (float)(1.0 - *(float *)(result + 40))))
          / (float)(v12 + *(float *)(result + 32));
      *(float *)(v6 + v5) = v13;
      *(float *)(a4 + v5) = v13;
      v5 += 4;
    }
    while (4 * a5 != v5);
  }
  return result;
}

float EstimatorAdaMax<float>::updateOneElement(uint64_t a1, int a2, float a3)
{
  int v4 = *(void **)(a1 + 72);
  uint64_t v3 = *(void **)(a1 + 80);
  uint64_t v5 = **(void **)(a1 + 64);
  *(float *)(v5 + 4 * a2) = (float)((float)(1.0 - *(float *)(a1 + 28)) * a3)
                            + (float)(*(float *)(a1 + 28) * *(float *)(**(void **)(a1 + 56) + 4 * a2));
  float v6 = fabsf(a3);
  if ((float)(*(float *)(a1 + 36) * *(float *)(*v4 + 4 * a2)) >= v6) {
    float v6 = *(float *)(a1 + 36) * *(float *)(*v4 + 4 * a2);
  }
  *(float *)(*v3 + 4 * a2) = v6;
  float result = (float)(*(float *)(v5 + 4 * a2) * (float)(*(float *)(a1 + 24) / (float)(1.0 - *(float *)(a1 + 40))))
         / (float)(v6 + *(float *)(a1 + 32));
  *(float *)(**(void **)(a1 + 104) + 4 * a2) = result;
  return result;
}

void EstimatorAdaMax<float>::reset(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 0;
  int v2 = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 44) = v2;
  bzero(**(void ***)(a1 + 56), 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  bzero(**(void ***)(a1 + 64), 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  bzero(**(void ***)(a1 + 72), 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  bzero(**(void ***)(a1 + 80), 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  bzero(**(void ***)(a1 + 104), 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  uint64_t v3 = *(void ***)(a1 + 112);
  if (v3) {
    bzero(*v3, 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  }
  int v4 = *(void ***)(a1 + 48);
  if (v4)
  {
    uint64_t v5 = *v4;
    size_t v6 = 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16);
    bzero(v5, v6);
  }
}

float EstimatorAdaMax<float>::update(uint64_t a1, void *a2, uint64_t a3, float a4)
{
  if (a4 != 0.0) {
    *(float *)(a1 + 24) = a4;
  }
  if (!*(unsigned char *)(a1 + 12)) {
    EstimatorAdaMax<float>::allocate();
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
  {
    int v8 = *(_DWORD *)(a1 + 16);
    uint64_t v7 = *(unsigned int *)(a1 + 20);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(a1 + 16);
    int v8 = *(_DWORD *)(a1 + 20);
  }
  SparseMatrix<float>::add<float>(a3, a2, v7, v8, a1);
  uint64_t v10 = *(void ***)(a1 + 72);
  uint64_t v9 = *(const void ***)(a1 + 80);
  memmove(**(void ***)(a1 + 56), **(const void ***)(a1 + 64), 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  memmove(*v10, *v9, 4 * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
  float result = *(float *)(a1 + 28) * *(float *)(a1 + 40);
  float v12 = *(float *)(a1 + 36) * *(float *)(a1 + 44);
  *(float *)(a1 + 40) = result;
  *(float *)(a1 + 44) = v12;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void SparseMatrix<float>::add<float>(uint64_t a1, void *a2, uint64_t a3, int a4, uint64_t a5)
{
  v89[0] = 0;
  v89[1] = 0;
  unint64_t v88 = v89;
  v87[0] = 0;
  v87[1] = 0;
  unint64_t v86 = (uint64_t *)v87;
  int v7 = *(_DWORD *)(a1 + 16);
  if (v7 < 1)
  {
    char v25 = v89;
  }
  else
  {
    uint64_t v8 = 0;
    LODWORD(v9) = *(_DWORD *)(a1 + 12);
    do
    {
      if ((int)v9 >= 1)
      {
        uint64_t v10 = 0;
        do
        {
          int v11 = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 24 * v8) + 4 * v10);
          LODWORD(v83) = v11;
          float v12 = v89[0];
          if (!v89[0]) {
            goto LABEL_14;
          }
          float v13 = v89;
          do
          {
            int v14 = v12;
            uint64_t v15 = v13;
            int v16 = *((_DWORD *)v12 + 7);
            uint64_t v17 = v12 + 1;
            if (v16 >= v11)
            {
              uint64_t v17 = v14;
              float v13 = (void **)v14;
            }
            float v12 = (void *)*v17;
          }
          while (v12);
          if (v13 == v89) {
            goto LABEL_14;
          }
          if (v16 < v11) {
            int v14 = v15;
          }
          if (v11 < *((_DWORD *)v14 + 7)) {
LABEL_14:
          }
            std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t *)&v88, v11, v11);
          int v18 = v87[0];
          if (!v87[0]) {
            goto LABEL_24;
          }
          uint64_t v19 = v87;
          do
          {
            int v20 = v18;
            int v21 = v19;
            int v22 = *((_DWORD *)v18 + 7);
            float v23 = v18 + 1;
            if (v22 >= v11)
            {
              float v23 = v20;
              uint64_t v19 = (void **)v20;
            }
            int v18 = (void *)*v23;
          }
          while (v18);
          if (v19 == v87) {
            goto LABEL_24;
          }
          if (v22 < v11) {
            int v20 = v21;
          }
          if (v11 >= *((_DWORD *)v20 + 7))
          {
            uint64_t v24 = std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(&v86, v11, (unsigned int *)&v83);
            ++*((_DWORD *)v24 + 8);
          }
          else
          {
LABEL_24:
            std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::pair<int,int>>((uint64_t *)&v86, v11, COERCE_DOUBLE(v11 | 0x100000000));
          }
          ++v10;
          uint64_t v9 = *(int *)(a1 + 12);
        }
        while (v10 < v9);
        int v7 = *(_DWORD *)(a1 + 16);
      }
      ++v8;
    }
    while (v8 < v7);
    char v25 = v88;
  }
  float v83 = 0;
  int v84 = 0;
  unint64_t v85 = 0;
  std::string __p = 0;
  unint64_t v81 = 0;
  unint64_t v82 = 0;
  uint64_t v26 = **(void **)(a1 + 80);
  if (v25 == v89)
  {
    float v29 = 0;
  }
  else
  {
    uint64_t v77 = **(void **)(a1 + 80);
    char v27 = 0;
    unint64_t v28 = 0;
    float v29 = 0;
    do
    {
      int v30 = *((_DWORD *)v25 + 7);
      int v79 = v30;
      if ((unint64_t)v29 >= v28)
      {
        uint64_t v31 = v29 - v27;
        unint64_t v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 62) {
          goto LABEL_99;
        }
        unint64_t v33 = v28 - (void)v27;
        unint64_t v34 = (uint64_t)(v28 - (void)v27) >> 1;
        if (v34 > v32) {
          unint64_t v32 = v34;
        }
        if (v33 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v32;
        }
        if (v35) {
          unint64_t v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v35);
        }
        else {
          uint64_t v36 = 0;
        }
        int v37 = (int *)(v35 + 4 * v31);
        int *v37 = v30;
        float v38 = v37 + 1;
        while (v29 != v27)
        {
          int v39 = *--v29;
          *--int v37 = v39;
        }
        float v83 = v37;
        int v84 = v38;
        unint64_t v78 = v35 + 4 * v36;
        unint64_t v85 = v78;
        if (v27) {
          operator delete(v27);
        }
        char v27 = v37;
        float v29 = v38;
      }
      else
      {
        unint64_t v78 = v28;
        *v29++ = v30;
      }
      int v84 = v29;
      float v40 = std::__tree<std::__value_type<Espresso::platform,int>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,int>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,int>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(&v86, v79, (unsigned int *)&v79);
      int v41 = v40;
      float v42 = v81;
      if ((unint64_t)v81 >= v82)
      {
        float v44 = (char *)__p;
        uint64_t v45 = (v81 - (unsigned char *)__p) >> 2;
        unint64_t v46 = v45 + 1;
        if ((unint64_t)(v45 + 1) >> 62) {
LABEL_99:
        }
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        uint64_t v47 = v82 - (void)__p;
        if ((uint64_t)(v82 - (void)__p) >> 1 > v46) {
          unint64_t v46 = v47 >> 1;
        }
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v48 = v46;
        }
        if (v48) {
          unint64_t v48 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v48);
        }
        else {
          uint64_t v49 = 0;
        }
        uint64_t v50 = (char *)(v48 + 4 * v45);
        *(_DWORD *)uint64_t v50 = *((_DWORD *)v41 + 8);
        float v43 = v50 + 4;
        while (v42 != v44)
        {
          int v51 = *((_DWORD *)v42 - 1);
          v42 -= 4;
          *((_DWORD *)v50 - 1) = v51;
          v50 -= 4;
        }
        std::string __p = v50;
        unint64_t v82 = v48 + 4 * v49;
        if (v44) {
          operator delete(v44);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v81 = *((_DWORD *)v40 + 8);
        float v43 = v42 + 4;
      }
      unint64_t v81 = v43;
      if ((int)a3 >= 1) {
        bzero((void *)(v77 + 4 * v79 * (int)a3), 4 * a3);
      }
      float v52 = v25[1];
      unint64_t v28 = v78;
      if (v52)
      {
        do
        {
          float v53 = (void **)v52;
          float v52 = (void *)*v52;
        }
        while (v52);
      }
      else
      {
        do
        {
          float v53 = (void **)v25[2];
          BOOL v54 = *v53 == v25;
          char v25 = v53;
        }
        while (!v54);
      }
      char v25 = v53;
    }
    while (v53 != v89);
    int v7 = *(_DWORD *)(a1 + 16);
    uint64_t v26 = v77;
  }
  if (v7 >= 1)
  {
    uint64_t v55 = 0;
    uint64_t v56 = *(unsigned int *)(a1 + 12);
    do
    {
      if ((int)v56 >= 1)
      {
        uint64_t v57 = 0;
        uint64_t v58 = *(void *)(*(void *)(a1 + 48) + 24 * v55);
        do
        {
          if ((int)a3 >= 1)
          {
            int64_t v59 = *(float **)(*(void *)(a1 + 24) + 8 * v55);
            int64_t v60 = (float *)(v26 + 4 * *(_DWORD *)(v58 + 4 * v57) * (int)a3);
            uint64_t v61 = a3;
            do
            {
              float v62 = *v59++;
              *int64_t v60 = v62 + *v60;
              ++v60;
              --v61;
            }
            while (v61);
          }
          ++v57;
        }
        while (v57 != v56);
      }
      ++v55;
    }
    while (v55 != v7);
  }
  float v63 = (int *)v83;
  if (v29 != v83)
  {
    uint64_t v64 = v26;
    unint64_t v65 = 0;
    uint64_t v66 = **(void **)(a1 + 72);
    unint64_t v67 = ((char *)v29 - (unsigned char *)v83) >> 2;
    do
    {
      uint64_t v68 = v63[v65];
      (*(void (**)(uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)a5 + 32))(a5, (v68 * a3), v64 + 4 * (int)v68 * (int)a3, v66, a3);
      uint64_t v66 = **(void **)(a1 + 72);
      if ((int)a3 >= 1)
      {
        uint64_t v69 = (float *)(*a2 + 4 * v68);
        uint64_t v70 = **(float ***)(a1 + 72);
        uint64_t v71 = a3;
        do
        {
          float v72 = *v70 + *v69;
          *uint64_t v69 = v72;
          float v73 = 2.0;
          if (v72 > 2.0 || (float v73 = -2.0, v72 < -2.0)) {
            *uint64_t v69 = v73;
          }
          ++v70;
          v69 += a4;
          --v71;
        }
        while (v71);
      }
      ++v65;
    }
    while (v67 > v65);
  }
  if (__p) {
    operator delete(__p);
  }
  if (v63) {
    operator delete(v63);
  }
  std::__tree<int>::destroy(v87[0]);
  std::__tree<int>::destroy(v89[0]);
}

void sub_1928E9D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  std::__tree<int>::destroy(a23);
  std::__tree<int>::destroy(*(void **)(v23 - 104));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::pair<int,int>>(uint64_t *result, int a2, double a3)
{
  int v4 = (uint64_t **)result;
  size_t v6 = (uint64_t **)(result + 1);
  uint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        size_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        size_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = (uint64_t **)(result + 1);
LABEL_9:
    uint64_t v9 = (char *)operator new(0x28uLL);
    *(double *)(v9 + 28) = a3;
    return std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(v4, (uint64_t)v7, v6, (uint64_t *)v9);
  }
  return result;
}

float EstimatorAdaMax<float>::update(uint64_t a1, const float **a2, void *a3, float a4)
{
  if (a4 != 0.0) {
    *(float *)(a1 + 24) = a4;
  }
  if (!*(unsigned char *)(a1 + 12)) {
    EstimatorAdaMax<float>::allocate();
  }
  int v7 = *(_DWORD *)(a1 + 16);
  int v8 = *(_DWORD *)(a1 + 20);
  if (a4 != 0.0) {
    *(float *)(a1 + 24) = a4;
  }
  uint64_t v9 = (v8 * v7);
  if (!*(unsigned char *)(a1 + 12)) {
    EstimatorAdaMax<float>::allocate();
  }
  if ((int)v9 >= 1)
  {
    for (uint64_t i = 0; i != v9; ++i)
      *(float *)(**(void **)(a1 + 104) + 4 * i) = (*(float (**)(uint64_t, uint64_t, float))(*(void *)a1 + 24))(a1, i, *(float *)(*a3 + 4 * i));
  }
  float v12 = *(void ***)(a1 + 72);
  int v11 = *(const void ***)(a1 + 80);
  memmove(**(void ***)(a1 + 56), **(const void ***)(a1 + 64), 4 * (int)v9);
  memmove(*v12, *v11, 4 * (int)v9);
  float v13 = *(const float ***)(a1 + 104);
  vDSP_Length v14 = *(int *)(a1 + 20) * (uint64_t)*(int *)(a1 + 16);
  float __B = 1.0;
  vDSP_vsma(*v13, 1, &__B, *a2, 1, (float *)*a2, 1, v14);
  float result = *(float *)(a1 + 28) * *(float *)(a1 + 40);
  float v16 = *(float *)(a1 + 36) * *(float *)(a1 + 44);
  *(float *)(a1 + 40) = result;
  *(float *)(a1 + 44) = v16;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void EstimatorADAM<float>::~EstimatorADAM(uint64_t a1)
{
  EstimatorADAM<float>::~EstimatorADAM(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t EstimatorADAM<float>::~EstimatorADAM(uint64_t a1)
{
  *(void *)a1 = &unk_1EE318250;
  int v2 = *(void **)(a1 + 72);
  if (v2)
  {
    if (*v2)
    {
      MEMORY[0x192FF1690](*v2, 0x1000C8052888210);
      uint64_t v3 = *(void *)(a1 + 72);
      if (v3) {
        MEMORY[0x192FF16B0](v3, 0x80C40B8603338);
      }
    }
  }
  int v4 = *(void **)(a1 + 80);
  if (v4)
  {
    if (*v4)
    {
      MEMORY[0x192FF1690](*v4, 0x1000C8052888210);
      uint64_t v5 = *(void *)(a1 + 80);
      if (v5) {
        MEMORY[0x192FF16B0](v5, 0x80C40B8603338);
      }
    }
  }
  size_t v6 = *(void **)(a1 + 88);
  if (v6)
  {
    if (*v6)
    {
      MEMORY[0x192FF1690](*v6, 0x1000C8052888210);
      uint64_t v7 = *(void *)(a1 + 88);
      if (v7) {
        MEMORY[0x192FF16B0](v7, 0x80C40B8603338);
      }
    }
  }
  int v8 = *(void **)(a1 + 96);
  if (v8)
  {
    if (*v8)
    {
      MEMORY[0x192FF1690](*v8, 0x1000C8052888210);
      uint64_t v9 = *(void *)(a1 + 96);
      if (v9) {
        MEMORY[0x192FF16B0](v9, 0x80C40B8603338);
      }
    }
  }
  uint64_t v10 = *(void **)(a1 + 104);
  if (v10)
  {
    if (*v10)
    {
      MEMORY[0x192FF1690](*v10, 0x1000C8052888210);
      uint64_t v11 = *(void *)(a1 + 104);
      if (v11) {
        MEMORY[0x192FF16B0](v11, 0x80C40B8603338);
      }
    }
  }
  float v12 = *(void **)(a1 + 112);
  if (v12)
  {
    if (*v12)
    {
      MEMORY[0x192FF1690](*v12, 0x1000C8052888210);
      uint64_t v13 = *(void *)(a1 + 112);
      if (v13) {
        MEMORY[0x192FF16B0](v13, 0x80C40B8603338);
      }
    }
  }
  vDSP_Length v14 = *(void **)(a1 + 120);
  if (v14)
  {
    if (*v14)
    {
      MEMORY[0x192FF1690](*v14, 0x1000C8052888210);
      uint64_t v15 = *(void *)(a1 + 120);
      if (v15) {
        MEMORY[0x192FF16B0](v15, 0x80C40B8603338);
      }
    }
  }
  uint64_t v17 = (void *)(a1 + 64);
  float v16 = *(void **)(a1 + 64);
  if (v16)
  {
    if (*v16)
    {
      MEMORY[0x192FF1690](*v16, 0x1000C8052888210);
      if (*v17) {
        MEMORY[0x192FF16B0](*v17, 0x80C40B8603338);
      }
    }
  }
  int v18 = *(void **)(a1 + 128);
  if (v18)
  {
    if (*v18)
    {
      MEMORY[0x192FF1690](*v18, 0x1000C8052888210);
      uint64_t v19 = *(void *)(a1 + 128);
      if (v19) {
        MEMORY[0x192FF16B0](v19, 0x80C40B8603338);
      }
    }
  }
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)uint64_t v17 = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(unsigned char *)(a1 + 16) = 0;
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  return a1;
}

float EstimatorADAM<float>::getAlpha(uint64_t a1)
{
  return *(float *)(a1 + 20);
}

uint64_t EstimatorADAM<float>::isTransposed(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 160);
}

void EstimatorADAM<float>::name(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 159) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 136), *(void *)(a1 + 144));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 136);
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 152);
  }
}

float *EstimatorADAM<float>::print(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16)) {
    EstimatorADAM<float>::allocate();
  }
  int v2 = *(_DWORD *)(a1 + 56);
  int v3 = *(_DWORD *)(a1 + 60);
  int v4 = v3 * v2;
  float v9 = 0.0;
  float v10 = 0.0;
  uint64_t v5 = *(float ***)(a1 + 72);
  onlineStdMeanVar(*v5, &v13, &v12, &v11, &v10, &v9, &v8, v3 * v2);
  if (*(int *)(a1 + 164) >= 2) {
    MMatrix<float>::print(v5, "prevM=", v2, v3, 10);
  }
  size_t v6 = *(float ***)(a1 + 80);
  onlineStdMeanVar(*v6, &v13, &v12, &v11, &v10, &v9, &v8, v4);
  if (*(int *)(a1 + 164) >= 2) {
    MMatrix<float>::print(v6, "M=", *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 60), 10);
  }
  onlineStdMeanVar(**(float ***)(a1 + 88), &v13, &v12, &v11, &v10, &v9, &v8, v4);
  onlineStdMeanVar(**(float ***)(a1 + 96), &v13, &v12, &v11, &v10, &v9, &v8, v4);
  return onlineStdMeanVar(**(float ***)(a1 + 120), &v13, &v12, &v11, &v10, &v9, &v8, v4);
}

void EstimatorADAM<float>::allocate()
{
}

void sub_1928EA804(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

void MMatrix<float>::print(float **a1, char *a2, int a3, int a4, int a5)
{
  LODWORD(v5) = a5;
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  sprintf(__s, "0x%lx", *a1);
  std::string::basic_string[abi:ne180100]<0>(&v52, __s);
  float v9 = std::string::insert(&v52, 0, " (");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  float v11 = std::string::append(&v45, ") ");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  int64_t v54 = v11->__r_.__value_.__r.__words[2];
  long long v53 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (a4 * a3 >= (int)v5) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = (a4 * a3);
  }
  if ((int)v5 <= 0) {
    goto LABEL_14;
  }
  float v13 = *a1;
  char v14 = 1;
  uint64_t v15 = v5;
  do
  {
    float v16 = *v13++;
    BOOL v17 = v16 >= -1.0;
    if (v16 > 1.0) {
      BOOL v17 = 0;
    }
    v14 &= v17;
    --v15;
  }
  while (v15);
  if (v14) {
LABEL_14:
  }
    int v18 = "yes";
  else {
    int v18 = "no";
  }
  std::string::basic_string[abi:ne180100]<0>(&v51, v18);
  uint64_t v19 = std::string::insert(&v51, 0, " (");
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  int v21 = std::string::append(&v45, ") ");
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v45);
  std::string::basic_string[abi:ne180100]<0>(&v42, a2);
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v23 = &v52;
  }
  else {
    uint64_t v23 = (std::string *)v52.__r_.__value_.__r.__words[0];
  }
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v52.__r_.__value_.__l.__size_;
  }
  char v25 = std::string::append(&v42, (const std::string::value_type *)v23, size);
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if (v54 >= 0) {
    char v27 = (const std::string::value_type *)&v53;
  }
  else {
    char v27 = (const std::string::value_type *)v53;
  }
  if (v54 >= 0) {
    std::string::size_type v28 = HIBYTE(v54);
  }
  else {
    std::string::size_type v28 = *((void *)&v53 + 1);
  }
  float v29 = std::string::append(&v43, v27, v28);
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  uint64_t v31 = std::string::append(&v44, "[");
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v33 = 0;
    uint64_t v34 = 4 * v5;
    do
    {
      memset(&v44, 0, sizeof(v44));
      std::ios_base::clear((std::ios_base *)((char *)&v45 + *(void *)(v45.__r_.__value_.__r.__words[0] - 24)), 0);
      *(void *)&v47[*(void *)(v45.__r_.__value_.__r.__words[2] - 24)] = 6;
      std::ostream::operator<<();
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v45, (uint64_t)&v44);
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v35 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v35 = v44.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v43, v35 + 1);
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v36 = &v43;
      }
      else {
        uint64_t v36 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if (v35)
      {
        if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v37 = &v44;
        }
        else {
          int v37 = (std::string *)v44.__r_.__value_.__r.__words[0];
        }
        memmove(v36, v37, v35);
      }
      *(_WORD *)((char *)&v36->__r_.__value_.__l.__data_ + v35) = 32;
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        float v38 = &v43;
      }
      else {
        float v38 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v39 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v39 = v43.__r_.__value_.__l.__size_;
      }
      std::string::append(&v51, (const std::string::value_type *)v38, v39);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v43.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      v33 += 4;
    }
    while (v34 != v33);
  }
  std::string::append(&v51, " ]");
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  v45.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA408];
  std::string::size_type v40 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(std::string::size_type *)((char *)v45.__r_.__value_.__r.__words + *(void *)(v45.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v45.__r_.__value_.__r.__words[2] = v40;
  uint64_t v46 = MEMORY[0x1E4FBA470] + 16;
  if (v49 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x192FF15B0](&v50);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v54) < 0) {
    operator delete((void *)v53);
  }
}

void sub_1928EADA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a64 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a23);
  if (a71 < 0) {
    operator delete(a66);
  }
  if (*(char *)(v71 - 217) < 0) {
    operator delete(*(void **)(v71 - 240));
  }
  _Unwind_Resume(a1);
}

float EstimatorADAM<float>::updateOneElement(uint64_t a1, int a2, float a3)
{
  int v4 = *(void **)(a1 + 88);
  int v3 = *(void **)(a1 + 96);
  uint64_t v5 = **(void **)(a1 + 80);
  *(float *)(v5 + 4 * a2) = (float)((float)(1.0 - *(float *)(a1 + 24)) * a3)
                            + (float)(*(float *)(a1 + 24) * *(float *)(**(void **)(a1 + 72) + 4 * a2));
  float v6 = (1.0 - *(double *)(a1 + 32)) * a3 * a3 + *(double *)(a1 + 32) * *(float *)(*v4 + 4 * a2);
  *(float *)(*v3 + 4 * a2) = v6;
  float v7 = v6 / (1.0 - *(double *)(a1 + 48));
  float result = *(float *)(a1 + 20)
         * (float)((float)(*(float *)(v5 + 4 * a2) / (float)(1.0 - *(float *)(a1 + 40)))
                 / (float)(*(float *)(a1 + 28) + sqrtf(v7)));
  *(float *)(**(void **)(a1 + 120) + 4 * a2) = result;
  return result;
}

void EstimatorADAM<float>::reset(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 24);
  *(void *)(a1 + 48) = *(void *)(a1 + 32);
  bzero(**(void ***)(a1 + 72), 4 * *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56));
  bzero(**(void ***)(a1 + 80), 4 * *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56));
  bzero(**(void ***)(a1 + 88), 4 * *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56));
  bzero(**(void ***)(a1 + 96), 4 * *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56));
  bzero(**(void ***)(a1 + 120), 4 * *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56));
  int v2 = *(void ***)(a1 + 128);
  if (v2) {
    bzero(*v2, 4 * *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56));
  }
  int v3 = *(void ***)(a1 + 64);
  if (v3)
  {
    int v4 = *v3;
    size_t v5 = 4 * *(_DWORD *)(a1 + 60) * *(_DWORD *)(a1 + 56);
    bzero(v4, v5);
  }
}

double EstimatorADAM<float>::update(uint64_t a1, void *a2, uint64_t a3, float a4)
{
  if (a4 != 0.0) {
    *(float *)(a1 + 20) = a4;
  }
  if (!*(unsigned char *)(a1 + 16)) {
    EstimatorADAM<float>::allocate();
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
  {
    int v8 = *(_DWORD *)(a1 + 56);
    uint64_t v7 = *(unsigned int *)(a1 + 60);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(a1 + 56);
    int v8 = *(_DWORD *)(a1 + 60);
  }
  SparseMatrix<float>::add<float>(a3, a2, v7, v8, a1);
  *(float *)(a1 + 40) = *(float *)(a1 + 24) * *(float *)(a1 + 40);
  double result = *(double *)(a1 + 32) * *(double *)(a1 + 48);
  *(double *)(a1 + 48) = result;
  ++*(void *)(a1 + 8);
  return result;
}

uint64_t EstimatorADAM<float>::update(uint64_t result, float a2)
{
  if (a2 != 0.0) {
    *(float *)(result + 20) = a2;
  }
  if (!*(unsigned char *)(result + 16)) {
    EstimatorADAM<float>::allocate();
  }
  return result;
}

void EstimatorScalar<float>::~EstimatorScalar(uint64_t a1)
{
  EstimatorScalar<float>::~EstimatorScalar(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t EstimatorScalar<float>::~EstimatorScalar(uint64_t a1)
{
  *(void *)a1 = &unk_1EE320790;
  int v2 = *(void **)(a1 + 24);
  if (v2)
  {
    if (!*v2 || (MEMORY[0x192FF1690](*v2, 0x1000C8052888210), *(void *)(a1 + 24))) {
      MEMORY[0x192FF16B0]();
    }
    *(void *)(a1 + 24) = 0;
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

float EstimatorScalar<float>::getAlpha(uint64_t a1)
{
  return *(float *)(a1 + 8);
}

uint64_t EstimatorScalar<float>::isTransposed(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 56);
}

void EstimatorScalar<float>::name(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 32), *(void *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 32);
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 48);
  }
}

float EstimatorScalar<float>::updateRowOfElements(uint64_t a1, uint64_t a2, float *a3, float *a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v5 = a5;
    do
    {
      float v6 = *a3++;
      float result = v6 * *(float *)(a1 + 8);
      *a4++ = result;
      --v5;
    }
    while (v5);
  }
  return result;
}

float EstimatorScalar<float>::updateOneElement(uint64_t a1, float a2)
{
  return *(float *)(a1 + 8) * a2;
}

void EstimatorScalar<float>::update(uint64_t a1, void *a2, uint64_t a3, float a4)
{
  if (a4 != 0.0) {
    *(float *)(a1 + 8) = a4;
  }
  SparseMatrix<float>::add<float>(a3, a2, *(unsigned int *)(a1 + 12), *(_DWORD *)(a1 + 16), a1);
}

void EstimatorScalar<float>::update(uint64_t a1, const float **a2, const float **a3, float a4)
{
  if (a4 == 0.0) {
    a4 = *(float *)(a1 + 8);
  }
  else {
    *(float *)(a1 + 8) = a4;
  }
  vDSP_Length v4 = *(int *)(a1 + 16) * (uint64_t)*(int *)(a1 + 12);
  float __B = a4;
  vDSP_vsma(*a3, 1, &__B, *a2, 1, (float *)*a2, 1, v4);
}

void GRU<float>::~GRU(uint64_t a1)
{
  GRU<float>::~GRU(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t GRU<float>::~GRU(uint64_t a1)
{
  *(void *)a1 = &unk_1EE3226C0;
  GRU<float>::cleanupAllBuffers((void *)a1);
  int v2 = *(void **)(a1 + 2064);
  if (v2)
  {
    *(void *)(a1 + 2072) = v2;
    operator delete(v2);
  }
  int v3 = *(void **)(a1 + 2040);
  if (v3)
  {
    *(void *)(a1 + 2048) = v3;
    operator delete(v3);
  }
  PTMutex::~PTMutex((PTMutex *)(a1 + 1960));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1888));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1816));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1744));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1672));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1600));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1528));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1456));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1384));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1312));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1240));
  SparseMatrix<float>::~SparseMatrix(a1 + 1000);
  SparseMatrix<float>::~SparseMatrix(a1 + 880);
  SparseMatrix<float>::~SparseMatrix(a1 + 760);
  vDSP_Length v4 = *(void **)(a1 + 728);
  if (v4)
  {
    *(void *)(a1 + 736) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 704);
  if (v5)
  {
    *(void *)(a1 + 712) = v5;
    operator delete(v5);
  }
  float v6 = *(void **)(a1 + 680);
  if (v6)
  {
    *(void *)(a1 + 688) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 656);
  if (v7)
  {
    *(void *)(a1 + 664) = v7;
    operator delete(v7);
  }
  int v8 = *(void **)(a1 + 632);
  if (v8)
  {
    *(void *)(a1 + 640) = v8;
    operator delete(v8);
  }
  float v9 = *(void **)(a1 + 608);
  if (v9)
  {
    *(void *)(a1 + 616) = v9;
    operator delete(v9);
  }
  long long v10 = *(void **)(a1 + 544);
  if (v10)
  {
    *(void *)(a1 + 552) = v10;
    operator delete(v10);
  }
  float v11 = *(void **)(a1 + 520);
  if (v11)
  {
    *(void *)(a1 + 528) = v11;
    operator delete(v11);
  }
  long long v12 = *(void **)(a1 + 496);
  if (v12)
  {
    *(void *)(a1 + 504) = v12;
    operator delete(v12);
  }
  float v13 = *(void **)(a1 + 472);
  if (v13)
  {
    *(void *)(a1 + 480) = v13;
    operator delete(v13);
  }
  char v14 = *(void **)(a1 + 448);
  if (v14)
  {
    *(void *)(a1 + 456) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void **)(a1 + 424);
  if (v15)
  {
    *(void *)(a1 + 432) = v15;
    operator delete(v15);
  }
  uint64_t v24 = (void **)(a1 + 208);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v24);
  float v16 = *(void **)(a1 + 184);
  if (v16)
  {
    *(void *)(a1 + 192) = v16;
    operator delete(v16);
  }
  BOOL v17 = *(void **)(a1 + 160);
  if (v17)
  {
    *(void *)(a1 + 168) = v17;
    operator delete(v17);
  }
  int v18 = *(void **)(a1 + 136);
  if (v18)
  {
    *(void *)(a1 + 144) = v18;
    operator delete(v18);
  }
  uint64_t v19 = *(void **)(a1 + 112);
  if (v19)
  {
    *(void *)(a1 + 120) = v19;
    operator delete(v19);
  }
  long long v20 = *(void **)(a1 + 88);
  if (v20)
  {
    *(void *)(a1 + 96) = v20;
    operator delete(v20);
  }
  int v21 = *(void **)(a1 + 64);
  if (v21)
  {
    *(void *)(a1 + 72) = v21;
    operator delete(v21);
  }
  *(void *)a1 = &unk_1EE3182B8;
  long long v22 = *(void **)(a1 + 8);
  if (v22)
  {
    *(void *)(a1 + 16) = v22;
    operator delete(v22);
  }
  return a1;
}

uint64_t GRU<float>::cleanupAllBuffers(void *a1)
{
  uint64_t v2 = a1[256];
  uint64_t v3 = a1[255];
  if (v2 == v3)
  {
    uint64_t v3 = a1[256];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v3 + 8 * v4);
      if (v5)
      {
        MEMORY[0x192FF1690](v5, 0x1000C8052888210);
        uint64_t v2 = a1[256];
        uint64_t v3 = a1[255];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  uint64_t v6 = a1[259];
  uint64_t v7 = a1[258];
  if (v6 == v7)
  {
    uint64_t v7 = a1[259];
  }
  else
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(v7 + 8 * v8);
      if (v9)
      {
        MEMORY[0x192FF1690](v9, 0x1000C8052888210);
        uint64_t v6 = a1[259];
        uint64_t v7 = a1[258];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
    uint64_t v3 = a1[255];
  }
  a1[256] = v3;
  a1[259] = v7;
  SparseMatrix<float>::cleanupAllBuffers(a1 + 95);
  SparseMatrix<float>::cleanupAllBuffers(a1 + 125);

  return SparseMatrix<float>::cleanupAllBuffers(a1 + 110);
}

void GRU<float>::log2Probability()
{
}

void GRU<float>::computeError()
{
}

void GRU<float>::updateFrom(uint64_t a1, void *lpsrc, float a3)
{
  if (*(_DWORD *)(a1 + 2036)) {
    exitFramework(1);
  }
  if (!v5) {
    __cxa_bad_cast();
  }
  uint64_t v6 = v5;
  GRU<float>::safeAddDenseOrSparse(a1, (const float **)(a1 + 240), (uint64_t)(v5 + 280), v5 + 190, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), *(void *)(a1 + 1168), a1 + 1240, a3);
  GRU<float>::safeAddDenseOrSparse(a1, (const float **)(a1 + 248), (uint64_t)(v6 + 284), v6 + 250, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), *(void *)(a1 + 1184), a1 + 1312, a3);
  GRU<float>::safeAddDenseOrSparse(a1, (const float **)(a1 + 232), (uint64_t)(v6 + 282), v6 + 220, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), *(void *)(a1 + 1176), a1 + 1384, a3);
  GRU<float>::safeAddDenseOrSparse(a1, (const float **)(a1 + 264), (uint64_t)(v6 + 286), 0, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), *(void *)(a1 + 1192), a1 + 1456, a3);
  GRU<float>::safeAddDenseOrSparse(a1, (const float **)(a1 + 272), (uint64_t)(v6 + 290), 0, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), *(void *)(a1 + 1208), a1 + 1528, a3);
  int v7 = *(_DWORD *)(a1 + 52);
  uint64_t v8 = *(void *)(a1 + 1200);

  GRU<float>::safeAddDenseOrSparse(a1, (const float **)(a1 + 256), (uint64_t)(v6 + 288), 0, v7, v7, v8, a1 + 1600, a3);
}

void GRU<float>::safeAddDenseOrSparse(uint64_t a1, const float **a2, uint64_t a3, _DWORD *a4, int a5, int a6, uint64_t a7, uint64_t a8, float a9)
{
  if (a8) {
    pthread_mutex_lock((pthread_mutex_t *)(a8 + 8));
  }
  if (*(_DWORD *)(a1 + 56))
  {
    if (a4 && a4[1] * *a4 >= 1)
    {
      (*(void (**)(uint64_t, const float **, _DWORD *, float))(*(void *)a7 + 8))(a7, a2, a4, a9);
      if (!a8) {
        return;
      }
    }
    else
    {
      (**(void (***)(uint64_t, const float **, uint64_t, float))a7)(a7, a2, a3, a9);
      if (!a8) {
        return;
      }
    }
LABEL_11:
    pthread_mutex_unlock((pthread_mutex_t *)(a8 + 8));
    return;
  }
  (**(void (***)(uint64_t, const float **, uint64_t, float))a7)(a7, a2, a3, a9);
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*a2, 1, &__B, &__C, (float *)*a2, 1, a6 * a5);
  if (a8) {
    goto LABEL_11;
  }
}

char *GRU<float>::setMaster(uint64_t a1, void *lpsrc)
{
  if (*(_DWORD *)(a1 + 2036) != 1) {
    exitFramework(1);
  }
  if (!result) {
    __cxa_bad_cast();
  }
  *(void *)(a1 + 328) = result + 232;
  *(void *)(a1 + 336) = result + 240;
  *(void *)(a1 + 344) = result + 248;
  *(void *)(a1 + 352) = result + 256;
  *(void *)(a1 + 360) = result + 264;
  *(void *)(a1 + 368) = result + 272;
  *(void *)(a1 + 376) = result + 280;
  *(void *)(a1 + 384) = result + 288;
  *(void *)(a1 + 392) = result + 296;
  *(void *)(a1 + 400) = result + 304;
  *(void *)(a1 + 408) = result + 312;
  *(void *)(a1 + 416) = result + 320;
  return result;
}

uint64_t GRU<float>::reverseBackward(unsigned char *a1)
{
  a1[2088] = 1;
  uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 296))(a1);
  a1[2088] = 0;
  return result;
}

uint64_t GRU<float>::reverseForward(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  a1[2088] = 1;
  {
    uint64_t v13 = a6;
    uint64_t v12 = a5;
    unsigned int v11 = a4;
    uint64_t v9 = a2;
    uint64_t v10 = a3;
    a2 = v9;
    a3 = v10;
    a4 = v11;
    a5 = v12;
    a6 = v13;
    if (v8)
    {
      GRU<float>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy = 0;
      unk_1E9307BE0 = 0;
      qword_1E9307BE8 = 0;
      __cxa_atexit((void (*)(void *))std::vector<int>::~vector[abi:ne180100], &GRU<float>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy, &dword_1920CB000);
      a2 = v9;
      a3 = v10;
      a4 = v11;
      a5 = v12;
      a6 = v13;
    }
  }
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 304))(a1, a2, a3, a4, a5, a6, &GRU<float>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy);
  a1[2088] = 0;
  return result;
}

void GRU<float>::forward(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5)
{
  uint64_t v196 = *MEMORY[0x1E4F143B8];
  if (a3[1] == *a3 || *(int *)(a1 + 56) < 1) {
    int v170 = 0;
  }
  else {
    int v170 = (**(uint64_t (***)(uint64_t))a1)(a1);
  }
  uint64_t v8 = *(void *)(a1 + 2096);
  if (!v8 || (float v9 = *(float *)(v8 + 604), v9 <= 0.0)) {
    float v9 = 50.0;
  }
  std::string __p = 0;
  long long v192 = 0uLL;
  i2s(&v190);
  uint64_t v10 = std::string::insert(&v190, 0, "GRU Forward W_z[");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v195.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v195.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  uint64_t v12 = std::string::append(&v195, "] WGZ:");
  uint64_t v13 = (void *)v12->__r_.__value_.__r.__words[0];
  v194[0] = (void *)v12->__r_.__value_.__l.__size_;
  *(void **)((char *)v194 + 7) = *(void **)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
  char v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v192) < 0) {
    operator delete(__p);
  }
  std::string __p = v13;
  *(void **)&long long v192 = v194[0];
  *(void **)((char *)&v192 + 7) = *(void **)((char *)v194 + 7);
  HIBYTE(v192) = v14;
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v195.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v190.__r_.__value_.__l.__data_);
  }
  if (v192 >= 0) {
    p_p = (char *)&__p;
  }
  else {
    p_p = (char *)__p;
  }
  MMatrix<float>::print(*(float ***)(a1 + 328), p_p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 10);
  i2s(&v190);
  float v16 = std::string::insert(&v190, 0, "GRU Forward W_r[");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v195.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v195.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  int v18 = std::string::append(&v195, "] WGR:");
  uint64_t v19 = (void *)v18->__r_.__value_.__r.__words[0];
  v194[0] = (void *)v18->__r_.__value_.__l.__size_;
  *(void **)((char *)v194 + 7) = *(void **)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
  char v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v192) < 0) {
    operator delete(__p);
  }
  std::string __p = v19;
  *(void **)&long long v192 = v194[0];
  *(void **)((char *)&v192 + 7) = *(void **)((char *)v194 + 7);
  HIBYTE(v192) = v20;
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v195.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v190.__r_.__value_.__l.__data_);
  }
  if (v192 >= 0) {
    int v21 = (char *)&__p;
  }
  else {
    int v21 = (char *)__p;
  }
  MMatrix<float>::print(*(float ***)(a1 + 336), v21, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 10);
  i2s(&v190);
  long long v22 = std::string::insert(&v190, 0, "GRU Forward W_o[");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v195.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v195.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  uint64_t v24 = std::string::append(&v195, "] WGO:");
  char v25 = (void *)v24->__r_.__value_.__r.__words[0];
  v194[0] = (void *)v24->__r_.__value_.__l.__size_;
  *(void **)((char *)v194 + 7) = *(void **)((char *)&v24->__r_.__value_.__r.__words[1] + 7);
  char v26 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v192) < 0) {
    operator delete(__p);
  }
  std::string __p = v25;
  *(void **)&long long v192 = v194[0];
  *(void **)((char *)&v192 + 7) = *(void **)((char *)v194 + 7);
  HIBYTE(v192) = v26;
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v195.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v190.__r_.__value_.__l.__data_);
  }
  if (v192 >= 0) {
    char v27 = (char *)&__p;
  }
  else {
    char v27 = (char *)__p;
  }
  MMatrix<float>::print(*(float ***)(a1 + 344), v27, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 10);
  i2s(&v190);
  std::string::size_type v28 = std::string::insert(&v190, 0, "GRU Forward R_z[");
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v195.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v195.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  long long v30 = std::string::append(&v195, "] RGZ:");
  uint64_t v31 = (void *)v30->__r_.__value_.__r.__words[0];
  v194[0] = (void *)v30->__r_.__value_.__l.__size_;
  *(void **)((char *)v194 + 7) = *(void **)((char *)&v30->__r_.__value_.__r.__words[1] + 7);
  char v32 = HIBYTE(v30->__r_.__value_.__r.__words[2]);
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v192) < 0) {
    operator delete(__p);
  }
  std::string __p = v31;
  *(void **)&long long v192 = v194[0];
  *(void **)((char *)&v192 + 7) = *(void **)((char *)v194 + 7);
  HIBYTE(v192) = v32;
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v195.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v190.__r_.__value_.__l.__data_);
  }
  if (v192 >= 0) {
    uint64_t v33 = (char *)&__p;
  }
  else {
    uint64_t v33 = (char *)__p;
  }
  MMatrix<float>::print(*(float ***)(a1 + 352), v33, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 10);
  i2s(&v190);
  uint64_t v34 = std::string::insert(&v190, 0, "GRU Forward R_r[");
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v195.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v195.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  uint64_t v36 = std::string::append(&v195, "] RGR:");
  int v37 = (void *)v36->__r_.__value_.__r.__words[0];
  v194[0] = (void *)v36->__r_.__value_.__l.__size_;
  *(void **)((char *)v194 + 7) = *(void **)((char *)&v36->__r_.__value_.__r.__words[1] + 7);
  char v38 = HIBYTE(v36->__r_.__value_.__r.__words[2]);
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v192) < 0) {
    operator delete(__p);
  }
  std::string __p = v37;
  *(void **)&long long v192 = v194[0];
  *(void **)((char *)&v192 + 7) = *(void **)((char *)v194 + 7);
  HIBYTE(v192) = v38;
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v195.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v190.__r_.__value_.__l.__data_);
  }
  if (v192 >= 0) {
    std::string::size_type v39 = (char *)&__p;
  }
  else {
    std::string::size_type v39 = (char *)__p;
  }
  MMatrix<float>::print(*(float ***)(a1 + 360), v39, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 10);
  i2s(&v190);
  std::string::size_type v40 = std::string::insert(&v190, 0, "GRU Forward R_o[");
  long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v195.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v195.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  std::string v42 = std::string::append(&v195, "] RGO:");
  std::string v43 = (void *)v42->__r_.__value_.__r.__words[0];
  v194[0] = (void *)v42->__r_.__value_.__l.__size_;
  *(void **)((char *)v194 + 7) = *(void **)((char *)&v42->__r_.__value_.__r.__words[1] + 7);
  char v44 = HIBYTE(v42->__r_.__value_.__r.__words[2]);
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v192) < 0) {
    operator delete(__p);
  }
  std::string __p = v43;
  *(void **)&long long v192 = v194[0];
  *(void **)((char *)&v192 + 7) = *(void **)((char *)v194 + 7);
  HIBYTE(v192) = v44;
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v195.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v190.__r_.__value_.__l.__data_);
  }
  if (v192 >= 0) {
    std::string v45 = (char *)&__p;
  }
  else {
    std::string v45 = (char *)__p;
  }
  MMatrix<float>::print(*(float ***)(a1 + 368), v45, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 10);
  uint64_t v46 = *(void *)(a1 + 2096);
  if (v46 && *(unsigned char *)(v46 + 244))
  {
    i2s(&v190);
    uint64_t v47 = std::string::insert(&v190, 0, "GRU Forward B_z[");
    long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v195.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v195.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    char v49 = std::string::append(&v195, "] :");
    uint64_t v50 = (void *)v49->__r_.__value_.__r.__words[0];
    v194[0] = (void *)v49->__r_.__value_.__l.__size_;
    *(void **)((char *)v194 + 7) = *(void **)((char *)&v49->__r_.__value_.__r.__words[1] + 7);
    char v51 = HIBYTE(v49->__r_.__value_.__r.__words[2]);
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v192) < 0) {
      operator delete(__p);
    }
    std::string __p = v50;
    *(void **)&long long v192 = v194[0];
    *(void **)((char *)&v192 + 7) = *(void **)((char *)v194 + 7);
    HIBYTE(v192) = v51;
    if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v195.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v190.__r_.__value_.__l.__data_);
    }
    if (v192 >= 0) {
      std::string v52 = (char *)&__p;
    }
    else {
      std::string v52 = (char *)__p;
    }
    VVector<float>::print(*(float ***)(a1 + 376), v52, *(_DWORD *)(a1 + 52));
    i2s(&v190);
    long long v53 = std::string::insert(&v190, 0, "GRU Forward B_r[");
    long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    v195.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v195.__r_.__value_.__l.__data_ = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    uint64_t v55 = std::string::append(&v195, "] :");
    uint64_t v56 = (void *)v55->__r_.__value_.__r.__words[0];
    v194[0] = (void *)v55->__r_.__value_.__l.__size_;
    *(void **)((char *)v194 + 7) = *(void **)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
    char v57 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v192) < 0) {
      operator delete(__p);
    }
    std::string __p = v56;
    *(void **)&long long v192 = v194[0];
    *(void **)((char *)&v192 + 7) = *(void **)((char *)v194 + 7);
    HIBYTE(v192) = v57;
    if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v195.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v190.__r_.__value_.__l.__data_);
    }
    if (v192 >= 0) {
      uint64_t v58 = (char *)&__p;
    }
    else {
      uint64_t v58 = (char *)__p;
    }
    VVector<float>::print(*(float ***)(a1 + 384), v58, *(_DWORD *)(a1 + 52));
    i2s(&v190);
    int64_t v59 = std::string::insert(&v190, 0, "GRU Forward B_o[");
    long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
    v195.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v195.__r_.__value_.__l.__data_ = v60;
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    uint64_t v61 = std::string::append(&v195, "] :");
    float v62 = (void *)v61->__r_.__value_.__r.__words[0];
    v194[0] = (void *)v61->__r_.__value_.__l.__size_;
    *(void **)((char *)v194 + 7) = *(void **)((char *)&v61->__r_.__value_.__r.__words[1] + 7);
    char v63 = HIBYTE(v61->__r_.__value_.__r.__words[2]);
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v192) < 0) {
      operator delete(__p);
    }
    std::string __p = v62;
    *(void **)&long long v192 = v194[0];
    *(void **)((char *)&v192 + 7) = *(void **)((char *)v194 + 7);
    HIBYTE(v192) = v63;
    if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v195.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v190.__r_.__value_.__l.__data_);
    }
    if (v192 >= 0) {
      uint64_t v64 = (char *)&__p;
    }
    else {
      uint64_t v64 = (char *)__p;
    }
    VVector<float>::print(*(float ***)(a1 + 392), v64, *(_DWORD *)(a1 + 52));
  }
  unsigned int v65 = a4 & 0xFFFFFF;
  unsigned int v66 = a5 != 0;
  if (v65 > v66)
  {
    unsigned int v167 = v65;
    signed int v168 = v65 - 1;
    v165 = (float **)(a1 + 584);
    do
    {
      if (*(unsigned char *)(a1 + 2088)) {
        signed int v67 = v65 + ~v66;
      }
      else {
        signed int v67 = v66;
      }
      if (*(unsigned char *)(a1 + 2088)) {
        int v68 = 1;
      }
      else {
        int v68 = -1;
      }
      if (*(unsigned char *)(a1 + 2088)) {
        BOOL v69 = v67 < v168;
      }
      else {
        BOOL v69 = v67 > 0;
      }
      BOOL v173 = v69;
      uint64_t v70 = v67;
      memmove(*(void **)(*(void *)(a1 + 64) + 8 * v67), *(const void **)(*a2 + 8 * v67), 4 * *(int *)(a1 + 44));
      if (*(unsigned char *)(a1 + 40)) {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8 * v67) + 4 * *(int *)(a1 + 48) - 4) = 1065353216;
      }
      int v71 = v67 + v68;
      VVector<float>::print((float **)(*(void *)(a1 + 112) + 8 * (v67 + v68)), "GRU output t-1 : ", *(_DWORD *)(a1 + 52));
      VVector<float>::print((float **)(*(void *)(a1 + 64) + 8 * v67), "GRU input t: ", *(_DWORD *)(a1 + 44));
      if (v170)
      {
        int v72 = *(unsigned __int8 *)(a1 + 40);
        int v73 = *(_DWORD *)(a1 + 48);
        uint64_t v74 = *(_DWORD **)(*(void *)(a1 + 208) + 24 * v67);
        _DWORD *v74 = **(_DWORD **)(*a3 + 24 * v67);
        if (v72) {
          v74[1] = v73 - 1;
        }
      }
      bzero(*(void **)(*(void *)(a1 + 424) + 8 * v67), 4 * *(int *)(a1 + 52));
      bzero(*(void **)(*(void *)(a1 + 448) + 8 * v67), 4 * *(int *)(a1 + 52));
      bzero(*(void **)(*(void *)(a1 + 472) + 8 * v67), 4 * *(int *)(a1 + 52));
      uint64_t v75 = *(void *)(a1 + 2096);
      if (v75
        && !*(unsigned char *)(v75 + 20)
        && ((int v112 = *(_DWORD *)(v75 + 40), v112 == 4) || v112 == 2)
        && *(_DWORD *)(v75 + 44) == 3)
      {
        uint64_t v172 = *(void *)(a1 + 424);
        uint64_t v163 = *(void *)(a1 + 472);
        uint64_t v164 = *(void *)(a1 + 448);
        uint64_t v113 = *(void *)(a1 + 64);
        unint64_t v114 = *(const float ***)(a1 + 328);
        uint64_t v115 = *(void *)(a1 + 208) + 24 * (int)v70;
        memset(&v190, 0, sizeof(v190));
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v190, *(const void **)v115, *(void *)(v115 + 8), (uint64_t)(*(void *)(v115 + 8) - *(void *)v115) >> 2);
        uint64_t v116 = *(unsigned int *)(a1 + 52);
        __Y = *(float **)(a1 + 600);
        if (!__Y) {
          operator new[]();
        }
        cblas_sgemv(CblasRowMajor, CblasNoTrans, 3 * v116, *(_DWORD *)(a1 + 48), 1.0, *v114, *(_DWORD *)(a1 + 48), *(const float **)(v113 + 8 * v70), 1, 0.0, __Y, 1);
        __int16 v150 = (float32x4_t **)(v172 + 8 * v70);
        if ((int)v116 < 1)
        {
          VVector<float>::print(v165, "outvec0/gzx", v116);
          VVector<float>::add<float>(v150, (float32x4_t **)v165, v116);
        }
        else
        {
          double v151 = *(int **)(a1 + 600);
          __int16 v152 = *(_DWORD **)(a1 + 584);
          uint64_t v153 = v116;
          do
          {
            int v154 = *v151++;
            *v152++ = v154;
            --v153;
          }
          while (v153);
          VVector<float>::print(v165, "outvec0/gzx", v116);
          VVector<float>::add<float>(v150, (float32x4_t **)v165, v116);
          double v155 = *(_DWORD **)(a1 + 584);
          uint64_t v156 = (int *)(*(void *)(a1 + 600) + 4 * v116);
          uint64_t v157 = v116;
          do
          {
            int v158 = *v156++;
            *v155++ = v158;
            --v157;
          }
          while (v157);
        }
        VVector<float>::print(v165, "outvec1/grx", v116);
        VVector<float>::add<float>((float32x4_t **)(v164 + 8 * v70), (float32x4_t **)v165, v116);
        if ((int)v116 >= 1)
        {
          v159 = *(_DWORD **)(a1 + 584);
          v160 = (int *)(*(void *)(a1 + 600) + 8 * v116);
          uint64_t v161 = v116;
          do
          {
            int v162 = *v160++;
            *v159++ = v162;
            --v161;
          }
          while (v161);
        }
        VVector<float>::print(v165, "outvec2/gox", v116);
        VVector<float>::add<float>((float32x4_t **)(v163 + 8 * v70), (float32x4_t **)v165, v116);
        VVector<float>::print((float **)v150, "outVec0 == gix[]", v116);
        VVector<float>::print((float **)(v164 + 8 * v70), "outVec1 == gfx[]", v116);
        VVector<float>::print((float **)(v163 + 8 * v70), "outVec3 == gox[]", v116);
        if (v190.__r_.__value_.__r.__words[0])
        {
          v190.__r_.__value_.__l.__size_ = v190.__r_.__value_.__r.__words[0];
          operator delete(v190.__r_.__value_.__l.__data_);
        }
        char v76 = 1;
      }
      else
      {
        char v76 = 0;
      }
      sprintf((char *)&v195, "GRU[t=%d] input/source forwardNew1() vec ", v70);
      VVector<float>::print((float **)(*(void *)(a1 + 64) + 8 * v70), (char *)&v195, *(_DWORD *)(a1 + 48));
      if ((v76 & 1) == 0)
      {
        uint64_t v77 = *(void *)(a1 + 424);
        uint64_t v78 = *(void *)(a1 + 64);
        int v79 = *(uint64_t **)(a1 + 328);
        uint64_t v80 = *(void *)(a1 + 208) + 24 * (int)v70;
        memset(v194, 0, sizeof(v194));
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v194, *(const void **)v80, *(void *)(v80 + 8), (uint64_t)(*(void *)(v80 + 8) - *(void *)v80) >> 2);
        GRU<float>::computeXTimesWSparseOrDense(a1, v170, (float32x4_t **)(v77 + 8 * v70), *(const float **)(v78 + 8 * v70), v79, v194[0], (uint64_t)v194[1], *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
        if (v194[0])
        {
          v194[1] = v194[0];
          operator delete(v194[0]);
        }
      }
      unint64_t v81 = *(unsigned char **)(a1 + 2096);
      uint64_t v82 = *(void *)(a1 + 424);
      float v83 = *(float32x4_t ***)(a1 + 400);
      int v84 = *(float32x4_t ***)(a1 + 376);
      int v85 = *(_DWORD *)(a1 + 52);
      std::string::basic_string[abi:ne180100]<0>(&v188, "gzx");
      GRU<float>::addOptionalBiasVector(v81, (float32x4_t **)(v82 + 8 * v70), v83, v84, v85);
      if (v189 < 0) {
        operator delete(v188);
      }
      uint64_t v171 = v71;
      if (v173) {
        cblas_sgemv(CblasRowMajor, CblasNoTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0, **(const float ***)(a1 + 352), *(_DWORD *)(a1 + 52), *(const float **)(*(void *)(a1 + 112) + 8 * v71), 1, 1.0, *(float **)(*(void *)(a1 + 424) + 8 * v70), 1);
      }
      uint64_t v86 = *(void *)(a1 + 424);
      vDSP_Length v87 = *(int *)(a1 + 52);
      *(float *)&float __B = -v9;
      *(float *)&__C.__r_.__value_.__l.__data_ = v9;
      vDSP_vclip(*(const float **)(v86 + 8 * v70), 1, (const float *)&__B, (const float *)&__C, *(float **)(v86 + 8 * v70), 1, v87);
      VVector<float>::applyForwardActivation((float **)(*(void *)(a1 + 496) + 8 * v70), *(float **)(*(void *)(a1 + 424) + 8 * v70), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 568));
      if ((v76 & 1) == 0)
      {
        uint64_t v88 = *(void *)(a1 + 448);
        uint64_t v89 = *(void *)(a1 + 64);
        float v90 = *(uint64_t **)(a1 + 336);
        uint64_t v91 = *(void *)(a1 + 208) + 24 * (int)v70;
        uint64_t v186 = 0;
        uint64_t v187 = 0;
        std::string v185 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v185, *(const void **)v91, *(void *)(v91 + 8), (uint64_t)(*(void *)(v91 + 8) - *(void *)v91) >> 2);
        GRU<float>::computeXTimesWSparseOrDense(a1, v170, (float32x4_t **)(v88 + 8 * v70), *(const float **)(v89 + 8 * v70), v90, v185, (uint64_t)v186, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
        if (v185)
        {
          uint64_t v186 = v185;
          operator delete(v185);
        }
      }
      uint64_t v92 = *(unsigned char **)(a1 + 2096);
      uint64_t v93 = *(void *)(a1 + 448);
      int v94 = *(float32x4_t ***)(a1 + 408);
      uint64_t v95 = *(float32x4_t ***)(a1 + 384);
      int v96 = *(_DWORD *)(a1 + 52);
      std::string::basic_string[abi:ne180100]<0>(&v183, "grx");
      GRU<float>::addOptionalBiasVector(v92, (float32x4_t **)(v93 + 8 * v70), v94, v95, v96);
      if (v184 < 0) {
        operator delete(v183);
      }
      if (v173) {
        cblas_sgemv(CblasRowMajor, CblasNoTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0, **(const float ***)(a1 + 360), *(_DWORD *)(a1 + 52), *(const float **)(*(void *)(a1 + 112) + 8 * v171), 1, 1.0, *(float **)(*(void *)(a1 + 448) + 8 * v70), 1);
      }
      uint64_t v97 = *(void *)(a1 + 448);
      vDSP_Length v98 = *(int *)(a1 + 52);
      *(float *)&float __B = -v9;
      *(float *)&__C.__r_.__value_.__l.__data_ = v9;
      vDSP_vclip(*(const float **)(v97 + 8 * v70), 1, (const float *)&__B, (const float *)&__C, *(float **)(v97 + 8 * v70), 1, v98);
      VVector<float>::applyForwardActivation((float **)(*(void *)(a1 + 520) + 8 * v70), *(float **)(*(void *)(a1 + 448) + 8 * v70), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 572));
      bzero(*(void **)(*(void *)(a1 + 88) + 8 * v70), 4 * *(int *)(a1 + 52));
      if (v173) {
        VVector<float>::mulAddV((float32x4_t **)(*(void *)(a1 + 88) + 8 * v70), (float32x4_t **)(*(void *)(a1 + 112) + 8 * v171), (float32x4_t **)(*(void *)(a1 + 520) + 8 * v70), *(_DWORD *)(a1 + 52));
      }
      uint64_t v99 = *(void *)(a1 + 88);
      vDSP_Length v100 = *(int *)(a1 + 52);
      *(float *)&float __B = -v9;
      *(float *)&__C.__r_.__value_.__l.__data_ = v9;
      vDSP_vclip(*(const float **)(v99 + 8 * v70), 1, (const float *)&__B, (const float *)&__C, *(float **)(v99 + 8 * v70), 1, v100);
      if ((v76 & 1) == 0)
      {
        uint64_t v101 = *(void *)(a1 + 472);
        uint64_t v102 = *(void *)(a1 + 64);
        int64_t v103 = *(uint64_t **)(a1 + 344);
        uint64_t v104 = *(void *)(a1 + 208) + 24 * (int)v70;
        v181 = 0;
        uint64_t v182 = 0;
        v180 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v180, *(const void **)v104, *(void *)(v104 + 8), (uint64_t)(*(void *)(v104 + 8) - *(void *)v104) >> 2);
        GRU<float>::computeXTimesWSparseOrDense(a1, v170, (float32x4_t **)(v101 + 8 * v70), *(const float **)(v102 + 8 * v70), v103, v180, (uint64_t)v181, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
        if (v180)
        {
          v181 = v180;
          operator delete(v180);
        }
      }
      int64_t v105 = *(unsigned char **)(a1 + 2096);
      uint64_t v106 = *(void *)(a1 + 472);
      uint64_t v107 = *(float32x4_t ***)(a1 + 416);
      unsigned __int8 v108 = *(float32x4_t ***)(a1 + 392);
      uint64_t v109 = *(void *)(a1 + 520);
      int v110 = *(_DWORD *)(a1 + 52);
      std::string::basic_string[abi:ne180100]<0>(&v178, "gox");
      if (v105 && v105[244])
      {
        int64_t v111 = (float32x4_t **)(v106 + 8 * v70);
        if (v105[376]) {
          VVector<float>::add<float>(v111, v107, v110);
        }
        if (v105[245])
        {
          if (v105[610]) {
            VVector<float>::mulAddV(v111, v108, (float32x4_t **)(v109 + 8 * v70), v110);
          }
          else {
            VVector<float>::add<float>(v111, v108, v110);
          }
        }
      }
      if (v179 < 0) {
        operator delete(v178);
      }
      cblas_sgemv(CblasRowMajor, CblasNoTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0, **(const float ***)(a1 + 368), *(_DWORD *)(a1 + 52), *(const float **)(*(void *)(a1 + 88) + 8 * v70), 1, 1.0, *(float **)(*(void *)(a1 + 472) + 8 * v70), 1);
      uint64_t v118 = *(void *)(a1 + 472);
      vDSP_Length v119 = *(int *)(a1 + 52);
      *(float *)&float __B = -v9;
      *(float *)&__C.__r_.__value_.__l.__data_ = v9;
      vDSP_vclip(*(const float **)(v118 + 8 * v70), 1, (const float *)&__B, (const float *)&__C, *(float **)(v118 + 8 * v70), 1, v119);
      VVector<float>::applyForwardActivation((float **)(*(void *)(a1 + 544) + 8 * v70), *(float **)(*(void *)(a1 + 472) + 8 * v70), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 576));
      float __B = 0;
      long long v177 = 0uLL;
      i2s(&v174);
      uint64_t v120 = std::string::insert(&v174, 0, "GRU Forward final[");
      unsigned int v65 = v167;
      long long v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
      __C.__r_.__value_.__r.__words[2] = v120->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__C.__r_.__value_.__l.__data_ = v121;
      v120->__r_.__value_.__l.__size_ = 0;
      v120->__r_.__value_.__r.__words[2] = 0;
      v120->__r_.__value_.__r.__words[0] = 0;
      uint64_t v122 = std::string::append(&__C, "] updateGate gzx:");
      uint64_t v123 = (void *)v122->__r_.__value_.__r.__words[0];
      v193[0] = v122->__r_.__value_.__l.__size_;
      *(void *)((char *)v193 + 7) = *(std::string::size_type *)((char *)&v122->__r_.__value_.__r.__words[1] + 7);
      char v124 = HIBYTE(v122->__r_.__value_.__r.__words[2]);
      v122->__r_.__value_.__l.__size_ = 0;
      v122->__r_.__value_.__r.__words[2] = 0;
      v122->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v177) < 0) {
        operator delete(__B);
      }
      float __B = v123;
      *(void *)&long long v177 = v193[0];
      *(void *)((char *)&v177 + 7) = *(void *)((char *)v193 + 7);
      HIBYTE(v177) = v124;
      if (SHIBYTE(__C.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__C.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v174.__r_.__value_.__l.__data_);
      }
      if (v177 >= 0) {
        p_B = (char *)&__B;
      }
      else {
        p_B = (char *)__B;
      }
      VVector<float>::print((float **)(*(void *)(a1 + 424) + 8 * v70), p_B, *(_DWORD *)(a1 + 52));
      i2s(&v174);
      long long v126 = std::string::insert(&v174, 0, "GRU Forward final[");
      long long v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
      __C.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__C.__r_.__value_.__l.__data_ = v127;
      v126->__r_.__value_.__l.__size_ = 0;
      v126->__r_.__value_.__r.__words[2] = 0;
      v126->__r_.__value_.__r.__words[0] = 0;
      uint64_t v128 = std::string::append(&__C, "] resetGate  grx:");
      float v129 = (void *)v128->__r_.__value_.__r.__words[0];
      v193[0] = v128->__r_.__value_.__l.__size_;
      *(void *)((char *)v193 + 7) = *(std::string::size_type *)((char *)&v128->__r_.__value_.__r.__words[1] + 7);
      char v130 = HIBYTE(v128->__r_.__value_.__r.__words[2]);
      v128->__r_.__value_.__l.__size_ = 0;
      v128->__r_.__value_.__r.__words[2] = 0;
      v128->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v177) < 0) {
        operator delete(__B);
      }
      float __B = v129;
      *(void *)&long long v177 = v193[0];
      *(void *)((char *)&v177 + 7) = *(void *)((char *)v193 + 7);
      HIBYTE(v177) = v130;
      if (SHIBYTE(__C.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__C.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v174.__r_.__value_.__l.__data_);
      }
      if (v177 >= 0) {
        uint64_t v131 = (char *)&__B;
      }
      else {
        uint64_t v131 = (char *)__B;
      }
      VVector<float>::print((float **)(*(void *)(a1 + 448) + 8 * v70), v131, *(_DWORD *)(a1 + 52));
      i2s(&v174);
      uint64_t v132 = std::string::insert(&v174, 0, "GRU Forward final[");
      long long v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
      __C.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__C.__r_.__value_.__l.__data_ = v133;
      v132->__r_.__value_.__l.__size_ = 0;
      v132->__r_.__value_.__r.__words[2] = 0;
      v132->__r_.__value_.__r.__words[0] = 0;
      uint64_t v134 = std::string::append(&__C, "] gox:");
      uint64_t v135 = (void *)v134->__r_.__value_.__r.__words[0];
      v193[0] = v134->__r_.__value_.__l.__size_;
      *(void *)((char *)v193 + 7) = *(std::string::size_type *)((char *)&v134->__r_.__value_.__r.__words[1] + 7);
      char v136 = HIBYTE(v134->__r_.__value_.__r.__words[2]);
      v134->__r_.__value_.__l.__size_ = 0;
      v134->__r_.__value_.__r.__words[2] = 0;
      v134->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v177) < 0) {
        operator delete(__B);
      }
      float __B = v135;
      *(void *)&long long v177 = v193[0];
      *(void *)((char *)&v177 + 7) = *(void *)((char *)v193 + 7);
      HIBYTE(v177) = v136;
      if (SHIBYTE(__C.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__C.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v174.__r_.__value_.__l.__data_);
      }
      if (v177 >= 0) {
        uint64_t v137 = (char *)&__B;
      }
      else {
        uint64_t v137 = (char *)__B;
      }
      VVector<float>::print((float **)(*(void *)(a1 + 472) + 8 * v70), v137, *(_DWORD *)(a1 + 52));
      bzero(*(void **)(*(void *)(a1 + 112) + 8 * v70), 4 * *(int *)(a1 + 52));
      uint64_t v138 = *(void *)(a1 + 112);
      int v139 = (float32x4_t **)(v138 + 8 * v70);
      uint64_t v140 = *(void *)(a1 + 496);
      v141 = (float32x4_t **)(v140 + 8 * v70);
      int v142 = *(_DWORD *)(a1 + 52);
      if (v142 >= 1)
      {
        std::vector<int> v143 = *(float **)(*(void *)(a1 + 544) + 8 * v70);
        long long v144 = *v141;
        v145 = *v139;
        uint64_t v146 = *(unsigned int *)(a1 + 52);
        do
        {
          float v147 = *v143++;
          float v148 = v147;
          float v149 = v144->f32[0];
          long long v144 = (float32x4_t *)((char *)v144 + 4);
          v145->f32[0] = v145->f32[0] + (float)(v148 * (float)(1.0 - v149));
          v145 = (float32x4_t *)((char *)v145 + 4);
          --v146;
        }
        while (v146);
      }
      if (v173)
      {
        VVector<float>::mulAddV(v139, v141, (float32x4_t **)(v138 + 8 * v171), v142);
        uint64_t v140 = *(void *)(a1 + 496);
        int v142 = *(_DWORD *)(a1 + 52);
      }
      VVector<float>::print((float **)(v140 + 8 * v70), "GRU Forward updateGate gz:", v142);
      VVector<float>::print((float **)(*(void *)(a1 + 520) + 8 * v70), "GRU Forward resetGate gr:", *(_DWORD *)(a1 + 52));
      VVector<float>::print((float **)(*(void *)(a1 + 88) + 8 * v70), "GRU Forward state (internal cell c_t) state[t]:", *(_DWORD *)(a1 + 52));
      VVector<float>::print((float **)(*(void *)(a1 + 544) + 8 * v70), "GRU Forward outputgate go:", *(_DWORD *)(a1 + 52));
      VVector<float>::print((float **)(*(void *)(a1 + 112) + 8 * v70), "GRU Forward final output[t]:", *(_DWORD *)(a1 + 52));
      if (SHIBYTE(v177) < 0) {
        operator delete(__B);
      }
      ++v66;
    }
    while (v66 != v167);
  }
  if (SHIBYTE(v192) < 0) {
    operator delete(__p);
  }
}

void sub_1928ED14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (__p) {
    operator delete(__p);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  _Unwind_Resume(a1);
}

float32_t GRU<float>::computeXTimesWSparseOrDense(uint64_t a1, int a2, float32x4_t **a3, const float *__X, uint64_t *a5, const void *a6, uint64_t a7, int __M, int __lda)
{
  uint64_t v12 = (float **)(a1 + 584);
  if (a2)
  {
    std::string __p = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, a6, a7, (a7 - (uint64_t)a6) >> 2);
    VVector<float>::internalMul(v12, (int *)__p, v15, *a5, __M, __lda);
    if (__p)
    {
      uint64_t v15 = (int *)__p;
      operator delete(__p);
    }
  }
  else
  {
    cblas_sgemv(CblasRowMajor, CblasNoTrans, __M, __lda, 1.0, (const float *)*a5, __lda, __X, 1, 0.0, *v12, 1);
  }
  return VVector<float>::add<float>(a3, (float32x4_t **)v12, __M);
}

float32_t GRU<float>::addOptionalBiasVector(unsigned char *a1, float32x4_t **a2, float32x4_t **a3, float32x4_t **a4, int a5)
{
  if (a1 && a1[244])
  {
    if (a1[376]) {
      float32_t result = VVector<float>::add<float>(a2, a3, a5);
    }
    if (a1[245])
    {
      return VVector<float>::add<float>(a2, a4, a5);
    }
  }
  return result;
}

void VVector<float>::applyForwardActivation(float **a1, float *a2, int a3, int a4)
{
  switch(a4)
  {
    case 0:
      size_t v4 = 4 * a3;
      uint64_t v5 = *a1;
      memmove(v5, a2, v4);
      break;
    case 1:
      uint64_t v6 = *a1;
      VVector<float>::ffuncV(v6, a2, a3);
      break;
    case 2:
      int v15 = a3;
      vvtanhf(*a1, a2, &v15);
      break;
    case 3:
      VVector<float>::gfunc2V(a1, a2, a3);
      break;
    case 4:
      if (a3 >= 1)
      {
        int v7 = *a1;
        uint64_t v8 = a3;
        do
        {
          float v9 = *a2++;
          float v10 = v9;
          if (v9 < 0.0) {
            float v10 = 0.0;
          }
          *v7++ = v10;
          --v8;
        }
        while (v8);
      }
      break;
    case 5:
      if (a3 >= 1)
      {
        long long v11 = *a1;
        uint64_t v12 = a3;
        do
        {
          float v13 = *a2 * 0.2 + 0.5;
          float *v11 = v13;
          float v14 = 0.0;
          if (v13 < 0.0 || (float v14 = 1.0, v13 > 1.0)) {
            float *v11 = v14;
          }
          ++v11;
          ++a2;
          --v12;
        }
        while (v12);
      }
      break;
    default:
      exitFramework(4);
  }
}

float32_t VVector<float>::mulAddV(float32x4_t **a1, float32x4_t **a2, float32x4_t **a3, int a4)
{
  int v4 = a4 / 8;
  if (a4 >= 8)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = *a3;
    int v7 = a4 / 8;
    uint64_t v8 = *a2;
    do
    {
      float32x4_t v9 = *v8;
      float32x4_t v10 = v8[1];
      v8 += 2;
      float32x4_t v11 = *v6;
      float32x4_t v12 = v6[1];
      v6 += 2;
      float32x4_t v13 = vmlaq_f32(v5[1], v12, v10);
      float32x4_t *v5 = vmlaq_f32(*v5, v11, v9);
      v5[1] = v13;
      v5 += 2;
      --v7;
    }
    while (v7);
  }
  int v14 = 2 * v4;
  if (8 * v4 < a4)
  {
    uint64_t v15 = a4 - (uint64_t)(v14 * 4);
    f32 = (*a1)[v14].f32;
    long long v17 = (*a3)[v14].f32;
    int v18 = (*a2)[v14].f32;
    do
    {
      float v19 = *v18++;
      float v20 = v19;
      float v21 = *v17++;
      v9.f32[0] = *f32 + (float)(v20 * v21);
      *f32++ = v9.f32[0];
      --v15;
    }
    while (v15);
  }
  return v9.f32[0];
}

float **VVector<float>::internalMul(float **result, int *a2, int *a3, uint64_t a4, int a5, int a6)
{
  if ((char *)a3 - (char *)a2 == 8)
  {
    if (a5 >= 1)
    {
      uint64_t v7 = *a2;
      uint64_t v6 = a2[1];
      uint64_t v8 = *result;
      uint64_t v9 = a5;
      do
      {
        *v8++ = *(float *)(a4 + 4 * v7) + *(float *)(a4 + 4 * v6);
        a4 += 4 * a6;
        --v9;
      }
      while (v9);
    }
  }
  else if (a5 >= 1)
  {
    uint64_t v10 = 0;
    unint64_t v11 = a3 - a2;
    float32x4_t v12 = *result;
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    do
    {
      v12[v10] = 0.0;
      if (a3 != a2)
      {
        float v13 = 0.0;
        int v14 = a2;
        unint64_t v15 = v11;
        do
        {
          int v16 = *v14++;
          float v13 = *(float *)(a4 + 4 * (v16 + (int)v10 * a6)) + v13;
          v12[v10] = v13;
          --v15;
        }
        while (v15);
      }
      ++v10;
    }
    while (v10 != a5);
  }
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float *v12;
  float v13;
  int *v14;
  unint64_t v15;
  uint64_t v16;

  if ((char *)a3 - (char *)a2 == 8)
  {
    if (a5 >= 1)
    {
      uint64_t v7 = *a2;
      uint64_t v6 = a2[1];
      uint64_t v8 = *result;
      uint64_t v9 = a5;
      do
      {
        *v8++ = (float)(*(char *)(a4 + v6) + *(char *)(a4 + v7)) * 0.039673;
        a4 += a6;
        --v9;
      }
      while (v9);
    }
  }
  else if (a5 >= 1)
  {
    uint64_t v10 = 0;
    unint64_t v11 = a3 - a2;
    float32x4_t v12 = *result;
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    do
    {
      v12[v10] = 0.0;
      if (a3 != a2)
      {
        float v13 = 0.0;
        int v14 = a2;
        unint64_t v15 = v11;
        do
        {
          int v16 = *v14++;
          float v13 = v13 + (float)((float)*(char *)(a4 + v16 + (int)v10 * a6) * 0.039673);
          v12[v10] = v13;
          --v15;
        }
        while (v15);
      }
      ++v10;
    }
    while (v10 != a5);
  }
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float *v12;
  float v13;
  int *v14;
  unint64_t v15;
  int v16;

  if ((char *)a3 - (char *)a2 == 8)
  {
    if (a5 >= 1)
    {
      uint64_t v7 = *a2;
      uint64_t v6 = a2[1];
      uint64_t v8 = *result;
      uint64_t v9 = a5;
      do
      {
        *v8++ = (float)(*(__int16 *)(a4 + 2 * v6) + *(__int16 *)(a4 + 2 * v7)) * 0.0001526;
        a4 += 2 * a6;
        --v9;
      }
      while (v9);
    }
  }
  else if (a5 >= 1)
  {
    uint64_t v10 = 0;
    unint64_t v11 = a3 - a2;
    float32x4_t v12 = *result;
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    do
    {
      v12[v10] = 0.0;
      if (a3 != a2)
      {
        float v13 = 0.0;
        int v14 = a2;
        unint64_t v15 = v11;
        do
        {
          int v16 = *v14++;
          float v13 = v13 + (double)*(__int16 *)(a4 + 2 * (v16 + (int)v10 * a6)) * 0.000152597204;
          --v15;
        }
        while (v15);
        v12[v10] = v13;
      }
      ++v10;
    }
    while (v10 != a5);
  }
  return result;
}

void GRU<float>::backward(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5)
{
  int v56 = a5;
  int v62 = a5 - 1;
  if (a5 >= 1)
  {
    char v57 = (float32x4_t **)(a1 + 752);
    long long v60 = (void **)(a1 + 1232);
    int v6 = a5 - 1;
    do
    {
      int v7 = *(unsigned __int8 *)(a1 + 2088);
      if (*(unsigned char *)(a1 + 2088)) {
        int v8 = v62 - v6;
      }
      else {
        int v8 = v6;
      }
      if (*(unsigned char *)(a1 + 2088)) {
        BOOL v9 = v8 < v62;
      }
      else {
        BOOL v9 = v8 > 0;
      }
      if (*(unsigned char *)(a1 + 2088)) {
        BOOL v10 = v8 > 0;
      }
      else {
        BOOL v10 = v8 < v62;
      }
      if (*(unsigned char *)(a1 + 2088)) {
        int v11 = v8 + 1;
      }
      else {
        int v11 = v8 - 1;
      }
      int v61 = v11;
      memmove(*(void **)(*(void *)(a1 + 632) + 8 * v8), *(const void **)(*a4 + 8 * v8), 4 * *(int *)(a1 + 52));
      if (v10)
      {
        if (v7) {
          int v12 = v8 - 1;
        }
        else {
          int v12 = v8 + 1;
        }
        bzero(*(void **)(a1 + 752), 4 * *(int *)(a1 + 52));
        cblas_sgemv(CblasRowMajor, CblasTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0, **(const float ***)(a1 + 368), *(_DWORD *)(a1 + 52), *(const float **)(*(void *)(a1 + 656) + 8 * v12), 1, 0.0, *(float **)(a1 + 752), 1);
        VVector<float>::mulAddV((float32x4_t **)(*(void *)(a1 + 632) + 8 * v8), v57, (float32x4_t **)(*(void *)(a1 + 520) + 8 * v12), *(_DWORD *)(a1 + 52));
        cblas_sgemv(CblasRowMajor, CblasTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0, **(const float ***)(a1 + 352), *(_DWORD *)(a1 + 52), *(const float **)(*(void *)(a1 + 680) + 8 * v12), 1, 1.0, *(float **)(*(void *)(a1 + 632) + 8 * v8), 1);
        cblas_sgemv(CblasRowMajor, CblasTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0, **(const float ***)(a1 + 360), *(_DWORD *)(a1 + 52), *(const float **)(*(void *)(a1 + 704) + 8 * v12), 1, 1.0, *(float **)(*(void *)(a1 + 632) + 8 * v8), 1);
      }
      VVector<float>::applyPrimeDerivative((void **)(a1 + 1216), *(float **)(*(void *)(a1 + 472) + 8 * v8), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 576));
      VVector<float>::applyPrimeDerivative(v60, *(float **)(*(void *)(a1 + 448) + 8 * v8), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 572));
      VVector<float>::applyPrimeDerivative((void **)(a1 + 1224), *(float **)(*(void *)(a1 + 424) + 8 * v8), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 568));
      bzero(*(void **)(*(void *)(a1 + 656) + 8 * v8), 4 * *(int *)(a1 + 52));
      float v13 = (float32x4_t **)(*(void *)(a1 + 656) + 8 * v8);
      int v14 = *(_DWORD *)(a1 + 52);
      if (v14 >= 1)
      {
        unint64_t v15 = *(float **)(*(void *)(a1 + 632) + 8 * v8);
        int v16 = *(float **)(*(void *)(a1 + 496) + 8 * v8);
        long long v17 = *v13;
        uint64_t v18 = *(unsigned int *)(a1 + 52);
        do
        {
          float v19 = *v15++;
          float v20 = v19;
          float v21 = *v16++;
          v17->f32[0] = v17->f32[0] + (float)(v20 * (float)(1.0 - v21));
          long long v17 = (float32x4_t *)((char *)v17 + 4);
          --v18;
        }
        while (v18);
      }
      VVector<float>::mulV(v13, v13, (float32x4_t **)(a1 + 1216), v14);
      long long v22 = (void **)(*(void *)(a1 + 680) + 8 * v8);
      if (v9)
      {
        int v23 = *(_DWORD *)(a1 + 52);
        if (v23 >= 1)
        {
          uint64_t v24 = *(float **)(*(void *)(a1 + 112) + 8 * v61);
          char v25 = *(float **)(*(void *)(a1 + 544) + 8 * v8);
          char v26 = (float *)*v22;
          uint64_t v27 = *(unsigned int *)(a1 + 52);
          do
          {
            float v28 = *v24++;
            float v29 = v28;
            float v30 = *v25++;
            *v26++ = v29 - v30;
            --v27;
          }
          while (v27);
        }
      }
      else
      {
        memmove(*v22, *(const void **)(*(void *)(a1 + 544) + 8 * v8), 4 * *(int *)(a1 + 52));
        long long v22 = (void **)(*(void *)(a1 + 680) + 8 * v8);
        int v23 = *(_DWORD *)(a1 + 52);
        if (v23 >= 1)
        {
          uint64_t v31 = (float *)*v22;
          uint64_t v32 = *(unsigned int *)(a1 + 52);
          do
          {
            float *v31 = -*v31;
            ++v31;
            --v32;
          }
          while (v32);
        }
      }
      VVector<float>::mulV((float32x4_t **)v22, (float32x4_t **)(*(void *)(a1 + 632) + 8 * v8), (float32x4_t **)v22, v23);
      uint64_t v33 = (float32x4_t **)(*(void *)(a1 + 680) + 8 * v8);
      VVector<float>::mulV(v33, v33, (float32x4_t **)(a1 + 1224), *(_DWORD *)(a1 + 52));
      uint64_t v34 = *(void *)(a1 + 704);
      if (v9)
      {
        cblas_sgemv(CblasRowMajor, CblasTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0, **(const float ***)(a1 + 368), *(_DWORD *)(a1 + 52), *(const float **)(*(void *)(a1 + 656) + 8 * v8), 1, 0.0, *(float **)(v34 + 8 * v8), 1);
        VVector<float>::mulV((float32x4_t **)(*(void *)(a1 + 704) + 8 * v8), (float32x4_t **)(*(void *)(a1 + 704) + 8 * v8), (float32x4_t **)(*(void *)(a1 + 112) + 8 * v61), *(_DWORD *)(a1 + 52));
        long long v35 = (float32x4_t **)(*(void *)(a1 + 704) + 8 * v8);
        v36.n128_f32[0] = VVector<float>::mulV(v35, v35, (float32x4_t **)v60, *(_DWORD *)(a1 + 52));
      }
      else
      {
        bzero(*(void **)(v34 + 8 * v8), 4 * *(int *)(a1 + 52));
      }
      if (((**(uint64_t (***)(uint64_t, __n128))a1)(a1, v36) & 1) == 0)
      {
        bzero(*(void **)(*(void *)(a1 + 608) + 8 * v8), 4 * *(int *)(a1 + 48));
        cblas_sgemv(CblasRowMajor, CblasTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1.0, **(const float ***)(a1 + 328), *(_DWORD *)(a1 + 48), *(const float **)(*(void *)(a1 + 680) + 8 * v8), 1, 1.0, *(float **)(*(void *)(a1 + 608) + 8 * v8), 1);
        cblas_sgemv(CblasRowMajor, CblasTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1.0, **(const float ***)(a1 + 344), *(_DWORD *)(a1 + 48), *(const float **)(*(void *)(a1 + 656) + 8 * v8), 1, 1.0, *(float **)(*(void *)(a1 + 608) + 8 * v8), 1);
        cblas_sgemv(CblasRowMajor, CblasTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1.0, **(const float ***)(a1 + 336), *(_DWORD *)(a1 + 48), *(const float **)(*(void *)(a1 + 704) + 8 * v8), 1, 1.0, *(float **)(*(void *)(a1 + 608) + 8 * v8), 1);
      }
    }
    while (v6-- > 0);
  }
  if (*(int *)(a1 + 56) > 0)
  {
    *(_DWORD *)(a1 + 776) = 0;
    *(_DWORD *)(a1 + 1016) = 0;
    *(_DWORD *)(a1 + 896) = 0;
  }
  if (v56 > 1)
  {
    int v38 = 1;
    int v39 = v56 - 2;
    do
    {
      if (*(unsigned char *)(a1 + 2088)) {
        int v40 = v39;
      }
      else {
        int v40 = v38;
      }
      if (*(unsigned char *)(a1 + 2088)) {
        int v41 = 1;
      }
      else {
        int v41 = -1;
      }
      int v42 = v40 + v41;
      if (*(unsigned char *)(a1 + 2088)) {
        int v43 = v56 - 2;
      }
      else {
        int v43 = 1;
      }
      BOOL v44 = v40 == v43;
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 680) + 8 * v40), (const float **)(*(void *)(a1 + 112) + 8 * v42), (void **)(a1 + 1152), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v44);
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 704) + 8 * v40), (const float **)(*(void *)(a1 + 112) + 8 * v42), (void **)(a1 + 1144), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v44);
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 656) + 8 * v40), (const float **)(*(void *)(a1 + 112) + 8 * v42), (void **)(a1 + 1160), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v44);
      ++v38;
      --v39;
    }
    while (v39 != -1);
  }
  if (v56 >= 1)
  {
    int v45 = 0;
    int v46 = v62;
    do
    {
      if (*(unsigned char *)(a1 + 2088)) {
        int v47 = v46;
      }
      else {
        int v47 = v45;
      }
      int v48 = v62;
      if (!*(unsigned char *)(a1 + 2088)) {
        int v48 = 0;
      }
      if (a3[1] == *a3 || *(int *)(a1 + 56) < 1)
      {
        BOOL v55 = v47 == v48;
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 704) + 8 * v47), (const float **)(*(void *)(a1 + 64) + 8 * v47), (void **)(a1 + 1120), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v55);
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 680) + 8 * v47), (const float **)(*(void *)(a1 + 64) + 8 * v47), (void **)(a1 + 1128), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v55);
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 656) + 8 * v47), (const float **)(*(void *)(a1 + 64) + 8 * v47), (void **)(a1 + 1136), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v55);
      }
      else
      {
        uint64_t v49 = *(void *)(a1 + 704);
        uint64_t v50 = *(void *)(a1 + 208) + 24 * v47;
        uint64_t v70 = 0;
        uint64_t v71 = 0;
        std::string __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v50, *(void *)(v50 + 8), (uint64_t)(*(void *)(v50 + 8) - *(void *)v50) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 760, *(int **)(v49 + 8 * v47), (uint64_t)__p, *(_DWORD *)(a1 + 52));
        if (__p)
        {
          uint64_t v70 = __p;
          operator delete(__p);
        }
        uint64_t v51 = *(void *)(a1 + 680);
        uint64_t v52 = *(void *)(a1 + 208) + 24 * v47;
        signed int v67 = 0;
        uint64_t v68 = 0;
        unsigned int v66 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v66, *(const void **)v52, *(void *)(v52 + 8), (uint64_t)(*(void *)(v52 + 8) - *(void *)v52) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 880, *(int **)(v51 + 8 * v47), (uint64_t)v66, *(_DWORD *)(a1 + 52));
        if (v66)
        {
          signed int v67 = v66;
          operator delete(v66);
        }
        uint64_t v53 = *(void *)(a1 + 656);
        uint64_t v54 = *(void *)(a1 + 208) + 24 * v47;
        uint64_t v64 = 0;
        uint64_t v65 = 0;
        char v63 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v63, *(const void **)v54, *(void *)(v54 + 8), (uint64_t)(*(void *)(v54 + 8) - *(void *)v54) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 1000, *(int **)(v53 + 8 * v47), (uint64_t)v63, *(_DWORD *)(a1 + 52));
        if (v63)
        {
          uint64_t v64 = v63;
          operator delete(v63);
        }
      }
      ++v45;
      --v46;
    }
    while (v46 != -1);
  }
}

void VVector<float>::applyPrimeDerivative(void **a1, float *__src, int a3, int a4)
{
  int v4 = __src;
  switch(a4)
  {
    case 0:
      size_t v5 = 4 * a3;
      int v6 = *a1;
      memmove(v6, __src, v5);
      break;
    case 1:
      if (a3 >= 1)
      {
        int v7 = (float *)*a1;
        uint64_t v8 = a3;
        do
        {
          float v9 = *v4++;
          float v10 = expf(-v9);
          *v7++ = (float)(1.0 / (float)(v10 + 1.0)) * (float)(1.0 - (float)(1.0 / (float)(v10 + 1.0)));
          --v8;
        }
        while (v8);
      }
      break;
    case 2:
      if (a3 >= 1)
      {
        int v11 = (float *)*a1;
        uint64_t v12 = a3;
        do
        {
          float v13 = *v4++;
          float v14 = tanhf(v13);
          *v11++ = 1.0 - (float)(v14 * v14);
          --v12;
        }
        while (v12);
      }
      break;
    case 3:
      if (a3 >= 1)
      {
        unint64_t v15 = (float *)*a1;
        uint64_t v16 = a3;
        do
        {
          float v17 = *v4++;
          float v18 = tanhf(v17 * 0.66667);
          *v15++ = (float)(1.0 - (float)(v18 * v18)) * 1.1439;
          --v16;
        }
        while (v16);
      }
      break;
    case 4:
      if (a3 >= 1)
      {
        float v19 = (float *)*a1;
        uint64_t v20 = a3;
        do
        {
          float v21 = *v4++;
          if (v21 > 0.0) {
            float v22 = 1.0;
          }
          else {
            float v22 = 0.0;
          }
          *v19++ = v22;
          --v20;
        }
        while (v20);
      }
      break;
    default:
      return;
  }
}

float32_t VVector<float>::mulV(float32x4_t **a1, float32x4_t **a2, float32x4_t **a3, int a4)
{
  int v4 = a4 / 8;
  if (a4 >= 8)
  {
    size_t v5 = *a1;
    int v6 = *a3;
    int v7 = a4 / 8;
    uint64_t v8 = *a2;
    do
    {
      float32x4_t v10 = *v8;
      float32x4_t v9 = v8[1];
      v8 += 2;
      float32x4_t v12 = *v6;
      float32x4_t v11 = v6[1];
      v6 += 2;
      float32x4_t v13 = vmulq_f32(v9, v11);
      float32x4_t *v5 = vmulq_f32(v10, v12);
      v5[1] = v13;
      v5 += 2;
      --v7;
    }
    while (v7);
  }
  int v14 = 2 * v4;
  if (8 * v4 < a4)
  {
    uint64_t v15 = a4 - (uint64_t)(v14 * 4);
    uint64_t v16 = &(*a1)[v14];
    f32 = (*a3)[v14].f32;
    float v18 = (*a2)[v14].f32;
    do
    {
      float v19 = *v18++;
      float v20 = v19;
      float v21 = *f32++;
      v13.f32[0] = v20 * v21;
      v16->i32[0] = v13.i32[0];
      uint64_t v16 = (float32x4_t *)((char *)v16 + 4);
      --v15;
    }
    while (v15);
  }
  return v13.f32[0];
}

void VVector<float>::sumOuterProdWithInitFlag(const float **a1, const float **a2, void **a3, int a4, int a5, int a6)
{
  if (a6)
  {
    bzero(*a3, 4 * a5 * a4);
    cblas_sger(CblasRowMajor, a4, a5, 1.0, *a1, 1, *a2, 1, (float *)*a3, a5);
  }
  else
  {
    float32x4_t v11 = *a3;
    VVector<float>::sumOuterProd((uint64_t)a1, (uint64_t)a2, (uint64_t)v11, a4, a5);
  }
}

uint64_t SparseMatrix<float>::sum<float>(uint64_t result, int *a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    int v4 = *(_DWORD **)(*(void *)(result + 24) + 8 * *(int *)(result + 16));
    uint64_t v5 = a4;
    do
    {
      int v6 = *a2++;
      *v4++ = v6;
      --v5;
    }
    while (v5);
  }
  if (*(int *)(result + 12) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(result + 48);
    do
    {
      *(_DWORD *)(*(void *)(v8 + 24 * *(int *)(result + 16)) + 4 * v7) = *(_DWORD *)(a3 + 4 * v7);
      ++v7;
    }
    while (v7 < *(int *)(result + 12));
  }
  ++*(_DWORD *)(result + 16);
  return result;
}

void VVector<float>::sumOuterProd(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  global_queue = dispatch_get_global_queue(0, 0);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  long long v11[2] = ___ZNK7VVectorIfE12sumOuterProdERKS0_S2_R7MMatrixIfEii_block_invoke;
  v11[3] = &__block_descriptor_tmp_1;
  int v12 = a5;
  v11[4] = a3;
  v11[5] = a1;
  v11[6] = a2;
  dispatch_apply(a4, global_queue, v11);
}

void ___ZNK7VVectorIfE12sumOuterProdERKS0_S2_R7MMatrixIfEii_block_invoke(uint64_t a1, uint64_t a2)
{
  vDSP_Length v2 = *(int *)(a1 + 56);
  uint64_t v3 = (float *)(*(void *)(a1 + 32) + 4 * v2 * a2);
  float __B = *(float *)(**(void **)(a1 + 40) + 4 * (int)a2);
  vDSP_vsma(**(const float ***)(a1 + 48), 1, &__B, v3, 1, v3, 1, v2);
}

void GRU<float>::update(uint64_t a1, float a2)
{
  int v4 = *(_DWORD *)(a1 + 48);
  int v5 = *(_DWORD *)(a1 + 52);
  if (*(int *)(a1 + 56) < 1)
  {
    float __B = a2;
    vDSP_Length v6 = v5 * v4;
    vDSP_vsma(*(const float **)(a1 + 1120), 1, &__B, *(const float **)(a1 + 240), 1, *(float **)(a1 + 240), 1, v6);
    float __B = a2;
    vDSP_vsma(*(const float **)(a1 + 1136), 1, &__B, *(const float **)(a1 + 248), 1, *(float **)(a1 + 248), 1, v6);
    float __B = a2;
    vDSP_vsma(*(const float **)(a1 + 1128), 1, &__B, *(const float **)(a1 + 232), 1, *(float **)(a1 + 232), 1, v6);
  }
  else
  {
    SparseMatrix<float>::add<float>(a1 + 760, (uint64_t *)(a1 + 240), v5, v4, a2);
    SparseMatrix<float>::add<float>(a1 + 1000, (uint64_t *)(a1 + 248), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), a2);
    SparseMatrix<float>::add<float>(a1 + 880, (uint64_t *)(a1 + 232), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), a2);
  }
  vDSP_Length v7 = (v5 * v5);
  float __B = a2;
  vDSP_vsma(*(const float **)(a1 + 1144), 1, &__B, *(const float **)(a1 + 264), 1, *(float **)(a1 + 264), 1, v7);
  float __B = a2;
  vDSP_vsma(*(const float **)(a1 + 1160), 1, &__B, *(const float **)(a1 + 272), 1, *(float **)(a1 + 272), 1, v7);
  float __B = a2;
  vDSP_vsma(*(const float **)(a1 + 1152), 1, &__B, *(const float **)(a1 + 256), 1, *(float **)(a1 + 256), 1, v7);
}

void SparseMatrix<float>::add<float>(uint64_t a1, uint64_t *a2, int a3, int a4, float a5)
{
  uint64_t v5 = *(unsigned int *)(a1 + 16);
  if ((int)v5 >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = a3;
    do
    {
      if (a3 >= 1)
      {
        int v12 = *(float **)(*(void *)(a1 + 24) + 8 * v10);
        uint64_t v13 = a3;
        do
        {
          float *v12 = *v12 * a5;
          ++v12;
          --v13;
        }
        while (v13);
      }
      ++v10;
    }
    while (v10 != v5);
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = *(void *)(a1 + 24);
      uint64_t v16 = *(void *)(a1 + 48) + 24 * v14;
      float v30 = 0;
      uint64_t v31 = 0;
      std::string __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v16, *(void *)(v16 + 8), (uint64_t)(*(void *)(v16 + 8) - *(void *)v16) >> 2);
      float v17 = (int *)__p;
      if (a3 >= 1)
      {
        uint64_t v18 = 0;
        float v19 = (int *)v30;
        unint64_t v20 = (v30 - (unsigned char *)__p) >> 2;
        uint64_t v21 = *(void *)(v15 + 8 * v14);
        uint64_t v22 = *a2;
        if (v20 <= 1) {
          unint64_t v20 = 1;
        }
        do
        {
          if (v19 != v17)
          {
            int v23 = v17;
            unint64_t v24 = v20;
            do
            {
              uint64_t v25 = *v23++;
              uint64_t v26 = v25 + (int)v18 * a4;
              float v27 = *(float *)(v21 + 4 * v18) + *(float *)(v22 + 4 * v26);
              *(float *)(v22 + 4 * v26) = v27;
              float v28 = 2.0;
              if (v27 > 2.0 || (float v28 = -2.0, v27 < -2.0)) {
                *(float *)(v22 + 4 * v26) = v28;
              }
              --v24;
            }
            while (v24);
          }
          ++v18;
        }
        while (v18 != v11);
      }
      if (v17)
      {
        float v30 = (char *)v17;
        operator delete(v17);
      }
      ++v14;
    }
    while (v14 < *(int *)(a1 + 16));
  }
}

uint64_t GRU<float>::noutputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t GRU<float>::ninputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

void GRU<float>::allocAllBuffers()
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "GRU alloc, from allocAll");
  GRU<float>::init();
}

void sub_1928EE65C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t GRU<float>::unsetSpecialBidir(uint64_t result)
{
  *(unsigned char *)(result + 42) = 0;
  return result;
}

uint64_t GRU<float>::setSpecialBidir(uint64_t result)
{
  *(unsigned char *)(result + 42) = 1;
  return result;
}

char *GRU<float>::getWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = **(void **)(a1 + 328);
  unsigned int v6 = *(_DWORD *)(a1 + 48);
  unsigned int v5 = *(_DWORD *)(a1 + 52);
  LODWORD(v7) = v5;
  double v8 = COERCE_DOUBLE(__PAIR64__(v6, v5));
  unint64_t v9 = *(void *)(a2 + 8);
  if (v9 >= *(void *)(a2 + 16))
  {
    uint64_t v10 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v4, COERCE_DOUBLE(__PAIR64__(v6, v5)));
    unsigned int v6 = *(_DWORD *)(a1 + 48);
    unsigned int v5 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v5;
    double v8 = COERCE_DOUBLE(__PAIR64__(v6, v5));
  }
  else
  {
    *(void *)unint64_t v9 = v4;
    uint64_t v10 = (char *)(v9 + 16);
    *(_DWORD *)(v9 + 8) = v5;
    *(_DWORD *)(v9 + 12) = v6;
  }
  *(void *)(a2 + 8) = v10;
  uint64_t v11 = **(void **)(a1 + 336);
  if ((unint64_t)v10 >= *(void *)(a2 + 16))
  {
    int v12 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v11, v8);
    unsigned int v6 = *(_DWORD *)(a1 + 48);
    unsigned int v5 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v5;
    double v8 = COERCE_DOUBLE(__PAIR64__(v6, v5));
  }
  else
  {
    *(void *)uint64_t v10 = v11;
    int v12 = v10 + 16;
    *((_DWORD *)v10 + 2) = v5;
    *((_DWORD *)v10 + 3) = v6;
  }
  *(void *)(a2 + 8) = v12;
  uint64_t v13 = **(void **)(a1 + 344);
  if ((unint64_t)v12 >= *(void *)(a2 + 16))
  {
    uint64_t v14 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v13, v8);
    unsigned int v5 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v5;
  }
  else
  {
    *(void *)int v12 = v13;
    uint64_t v14 = v12 + 16;
    *((_DWORD *)v12 + 2) = v5;
    *((_DWORD *)v12 + 3) = v6;
  }
  *(void *)(a2 + 8) = v14;
  uint64_t v15 = **(void **)(a1 + 352);
  HIDWORD(v7) = v5;
  if ((unint64_t)v14 >= *(void *)(a2 + 16))
  {
    uint64_t v16 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v15, v7);
    unsigned int v5 = *(_DWORD *)(a1 + 52);
    double v7 = COERCE_DOUBLE(vdup_n_s32(v5));
  }
  else
  {
    *(void *)uint64_t v14 = v15;
    uint64_t v16 = v14 + 16;
    *((_DWORD *)v14 + 2) = v5;
    *((_DWORD *)v14 + 3) = v5;
  }
  *(void *)(a2 + 8) = v16;
  uint64_t v17 = **(void **)(a1 + 360);
  if ((unint64_t)v16 >= *(void *)(a2 + 16))
  {
    float32_t result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v17, v7);
    unsigned int v5 = *(_DWORD *)(a1 + 52);
    double v7 = COERCE_DOUBLE(vdup_n_s32(v5));
  }
  else
  {
    *(void *)uint64_t v16 = v17;
    float32_t result = v16 + 16;
    *((_DWORD *)v16 + 2) = v5;
    *((_DWORD *)v16 + 3) = v5;
  }
  *(void *)(a2 + 8) = result;
  uint64_t v19 = **(void **)(a1 + 368);
  if ((unint64_t)result >= *(void *)(a2 + 16))
  {
    float32_t result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v19, v7);
    unint64_t v20 = result;
  }
  else
  {
    *(void *)float32_t result = v19;
    unint64_t v20 = result + 16;
    *((_DWORD *)result + 2) = v5;
    *((_DWORD *)result + 3) = v5;
  }
  *(void *)(a2 + 8) = v20;
  return result;
}

char *std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3 = *(double **)a1;
  uint64_t v4 = *(double **)(a1 + 8);
  uint64_t v5 = ((uint64_t)v4 - *(void *)a1) >> 4;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = *(void *)(a1 + 16) - (void)v3;
  if (v8 >> 3 > v6) {
    unint64_t v6 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  int v12 = (char *)operator new(16 * v9);
  uint64_t v13 = (double *)&v12[16 * v5];
  *(void *)uint64_t v13 = a2;
  v13[1] = a3;
  uint64_t v14 = (char *)(v13 + 2);
  while (v4 != v3)
  {
    uint64_t v15 = *((void *)v4 - 2);
    v4 -= 2;
    *((void *)v13 - 2) = v15;
    v13 -= 2;
    v13[1] = v4[1];
  }
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = v14;
  *(void *)(a1 + 16) = &v12[16 * v9];
  if (v3) {
    operator delete(v3);
  }
  return v14;
}

void GRU<float>::resetForNewBatch(void *a1)
{
  uint64_t v2 = a1[146];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v2 + 40))(v2, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v3 = a1[147];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v3 + 40))(v3, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v4 = a1[148];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v4 + 40))(v4, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = a1[149];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v5 + 40))(v5, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = a1[150];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v6 + 40))(v6, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = a1[151];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v7 + 40))(v7, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(void))(*(void *)a1[146] + 16))(a1[146]);
  (*(void (**)(void))(*(void *)a1[147] + 16))(a1[147]);
  (*(void (**)(void))(*(void *)a1[148] + 16))(a1[148]);
  (*(void (**)(void))(*(void *)a1[149] + 16))(a1[149]);
  (*(void (**)(void))(*(void *)a1[150] + 16))(a1[150]);
  (*(void (**)(void))(*(void *)a1[151] + 16))(a1[151]);
  uint64_t v8 = a1[146];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v8 + 40))(v8, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = a1[147];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v9 + 40))(v9, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v10 = a1[148];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v10 + 40))(v10, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v11 = a1[149];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v11 + 40))(v11, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v12 = a1[150];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v12 + 40))(v12, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v13 = a1[151];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v13 + 40))(v13, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1928EEDE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void GRU<float>::clearState(uint64_t a1, void *a2, int *a3)
{
  uint64_t v5 = (int *)(*a2 + 16 * *a3);
  bzero(**((void ***)v5 + 1), 4 * *v5);
  uint64_t v6 = *a3 + 1;
  *a3 = v6;
  bzero(**(void ***)(*a2 + 16 * v6 + 8), 4 * *(int *)(*a2 + 16 * v6));
  ++*a3;
}

void *GRU<float>::restoreState(uint64_t a1, void *a2, int a3, int *a4)
{
  uint64_t v8 = *(void *)(a1 + 112);
  uint64_t v9 = *a4;
  *a4 = v9 + 1;
  memmove(*(void **)(v8 + 8 * a3), **(const void ***)(*a2 + 16 * v9 + 8), 4 * *(int *)(a1 + 52));
  uint64_t v10 = *(void *)(a1 + 88);
  uint64_t v11 = *a4;
  *a4 = v11 + 1;
  size_t v12 = 4 * *(int *)(a1 + 52);
  uint64_t v13 = *(void **)(v10 + 8 * a3);
  uint64_t v14 = **(const void ***)(*a2 + 16 * v11 + 8);

  return memmove(v13, v14, v12);
}

void *GRU<float>::saveState(uint64_t a1, uint64_t *a2, int a3, int *a4)
{
  uint64_t v8 = *(int *)(a1 + 52);
  uint64_t v9 = *a2;
  *(_DWORD *)(v9 + 16 * *a4) = v8;
  memmove(**(void ***)(v9 + 16 * *a4 + 8), *(const void **)(*(void *)(a1 + 112) + 8 * a3), 4 * v8);
  uint64_t v10 = *a4 + 1;
  *a4 = v10;
  uint64_t v11 = *(int *)(a1 + 52);
  uint64_t v12 = *a2;
  *(_DWORD *)(v12 + 16 * v10) = v11;
  float32_t result = memmove(**(void ***)(v12 + 16 * *a4 + 8), *(const void **)(*(void *)(a1 + 88) + 8 * a3), 4 * v11);
  ++*a4;
  return result;
}

void GRU<float>::allocInitialState()
{
}

void sub_1928EF1F8(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

uint64_t GRU<float>::normalizeModel(uint64_t result, float a2)
{
  int v2 = *(_DWORD *)(result + 52);
  uint64_t v3 = (*(_DWORD *)(result + 48) * v2);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = **(float ***)(result + 336);
    uint64_t v5 = v4;
    uint64_t v6 = (*(_DWORD *)(result + 48) * v2);
    do
    {
      float *v5 = *v5 * a2;
      ++v5;
      --v6;
    }
    while (v6);
    uint64_t v7 = v3;
    do
    {
      *uint64_t v4 = *v4 * a2;
      ++v4;
      --v7;
    }
    while (v7);
    uint64_t v8 = **(float ***)(result + 344);
    do
    {
      *uint64_t v8 = *v8 * a2;
      ++v8;
      --v3;
    }
    while (v3);
  }
  if (v2)
  {
    uint64_t v9 = (v2 * v2);
    uint64_t v10 = **(float ***)(result + 360);
    uint64_t v11 = v9;
    do
    {
      float *v10 = *v10 * a2;
      ++v10;
      --v11;
    }
    while (v11);
    uint64_t v12 = **(float ***)(result + 352);
    uint64_t v13 = v9;
    do
    {
      float *v12 = *v12 * a2;
      ++v12;
      --v13;
    }
    while (v13);
    uint64_t v14 = **(float ***)(result + 368);
    do
    {
      float *v14 = *v14 * a2;
      ++v14;
      --v9;
    }
    while (v9);
  }
  return result;
}

void GRU<float>::clipModel(uint64_t a1, float a2)
{
  uint64_t v4 = *(const float ***)(a1 + 336);
  float v5 = -a2;
  vDSP_Length v6 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __C = a2;
  float __B = -a2;
  vDSP_vclip(*v4, 1, &__B, &__C, (float *)*v4, 1, v6);
  uint64_t v7 = *(const float ***)(a1 + 328);
  vDSP_Length v8 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __C = a2;
  float __B = v5;
  vDSP_vclip(*v7, 1, &__B, &__C, (float *)*v7, 1, v8);
  uint64_t v9 = *(const float ***)(a1 + 344);
  vDSP_Length v10 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __C = a2;
  float __B = v5;
  vDSP_vclip(*v9, 1, &__B, &__C, (float *)*v9, 1, v10);
  uint64_t v11 = *(const float ***)(a1 + 360);
  vDSP_Length v12 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __C = a2;
  float __B = v5;
  vDSP_vclip(*v11, 1, &__B, &__C, (float *)*v11, 1, v12);
  uint64_t v13 = *(const float ***)(a1 + 352);
  vDSP_Length v14 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __C = a2;
  float __B = v5;
  vDSP_vclip(*v13, 1, &__B, &__C, (float *)*v13, 1, v14);
  char v15 = *(const float ***)(a1 + 368);
  vDSP_Length v16 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __C = a2;
  float __B = v5;
  vDSP_vclip(*v15, 1, &__B, &__C, (float *)*v15, 1, v16);
}

void GRU<float>::applyGradient(uint64_t a1, void *lpsrc)
{
  if (lpsrc) {
  else
  }
    uint64_t v3 = 0;
  float v4 = (*(float (**)(void))(**(void **)(a1 + 1176) + 64))(*(void *)(a1 + 1176));
  (***(void (****)(void, void, uint64_t))(a1 + 1176))(*(void *)(a1 + 1176), *(void *)(a1 + 328), (uint64_t)v3 + 232);
  (***(void (****)(float))(a1 + 1168))(v4);
  (***(void (****)(float))(a1 + 1184))(v4);
  (***(void (****)(float))(a1 + 1200))(v4);
  (***(void (****)(float))(a1 + 1192))(v4);
  (***(void (****)(float))(a1 + 1208))(v4);
  float v5 = *(const float ***)(a1 + 328);
  vDSP_Length v6 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*v5, 1, &__B, &__C, (float *)*v5, 1, v6);
  uint64_t v7 = *(const float ***)(a1 + 336);
  vDSP_Length v8 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*v7, 1, &__B, &__C, (float *)*v7, 1, v8);
  uint64_t v9 = *(const float ***)(a1 + 344);
  vDSP_Length v10 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*v9, 1, &__B, &__C, (float *)*v9, 1, v10);
  uint64_t v11 = *(const float ***)(a1 + 352);
  vDSP_Length v12 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*v11, 1, &__B, &__C, (float *)*v11, 1, v12);
  uint64_t v13 = *(const float ***)(a1 + 360);
  vDSP_Length v14 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*v13, 1, &__B, &__C, (float *)*v13, 1, v14);
  char v15 = *(const float ***)(a1 + 368);
  vDSP_Length v16 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*v15, 1, &__B, &__C, (float *)*v15, 1, v16);
}

void GRU<float>::addGradient(uint64_t a1, void *lpsrc)
{
  if (lpsrc) {
  else
  }
    uint64_t v3 = 0;
  float v4 = *(const float ***)(a1 + 336);
  float v5 = (const float **)v3[42];
  vDSP_Length v6 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __B = 1.0;
  vDSP_vsma(*v5, 1, &__B, *v4, 1, (float *)*v4, 1, v6);
  uint64_t v7 = *(const float ***)(a1 + 328);
  vDSP_Length v8 = (const float **)v3[41];
  vDSP_Length v9 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __B = 1.0;
  vDSP_vsma(*v8, 1, &__B, *v7, 1, (float *)*v7, 1, v9);
  vDSP_Length v10 = *(const float ***)(a1 + 344);
  uint64_t v11 = (const float **)v3[43];
  vDSP_Length v12 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __B = 1.0;
  vDSP_vsma(*v11, 1, &__B, *v10, 1, (float *)*v10, 1, v12);
  uint64_t v13 = *(const float ***)(a1 + 360);
  vDSP_Length v14 = (const float **)v3[45];
  vDSP_Length v15 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __B = 1.0;
  vDSP_vsma(*v14, 1, &__B, *v13, 1, (float *)*v13, 1, v15);
  vDSP_Length v16 = *(const float ***)(a1 + 352);
  uint64_t v17 = (const float **)v3[44];
  vDSP_Length v18 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __B = 1.0;
  vDSP_vsma(*v17, 1, &__B, *v16, 1, (float *)*v16, 1, v18);
  uint64_t v19 = *(const float ***)(a1 + 368);
  unint64_t v20 = (const float **)v3[46];
  vDSP_Length v21 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __B = 1.0;
  vDSP_vsma(*v20, 1, &__B, *v19, 1, (float *)*v19, 1, v21);
}

void GRU<float>::compareModels(uint64_t a1, void *lpsrc, void **a3)
{
  uint64_t v3 = a3;
  if (lpsrc)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  float v5 = 0;
  if (a3) {
LABEL_3:
  }
LABEL_4:
  std::vector<BOOL>::vector(&__p, 4uLL);
  uint64_t v6 = (*(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52));
  if ((int)v6 <= 0)
  {
    uint64_t v13 = __p;
LABEL_12:
    unint64_t v14 = *v13 | 1;
    goto LABEL_13;
  }
  uint64_t v7 = (float *)*v3[42];
  vDSP_Length v8 = (float *)*v5[42];
  LOBYTE(v9) = 1;
  do
  {
    float v10 = *v7++;
    float v11 = v10;
    float v12 = *v8++;
    int v9 = v9 & (vabds_f32(v11, v12) < 0.0000001);
    --v6;
  }
  while (v6);
  uint64_t v13 = __p;
  if (v9) {
    goto LABEL_12;
  }
  unint64_t v14 = *(void *)__p & 0xFFFFFFFFFFFFFFFELL;
LABEL_13:
  *uint64_t v13 = v14;
  operator delete(v13);
}

float GRU<float>::subtractModels(uint64_t a1, void *lpsrc, const void *a3)
{
  if (lpsrc)
  {
    if (a3)
    {
LABEL_3:
      goto LABEL_6;
    }
  }
  else
  {
    float v5 = 0;
    if (a3) {
      goto LABEL_3;
    }
  }
  uint64_t v7 = 0;
LABEL_6:
  int v8 = *(_DWORD *)(a1 + 52);
  uint64_t v9 = (*(_DWORD *)(a1 + 48) * v8);
  if ((int)v9 >= 1)
  {
    float v10 = (float *)*v7[42];
    float v11 = (float *)*v5[42];
    float v12 = **(float ***)(a1 + 336);
    uint64_t v13 = (*(_DWORD *)(a1 + 48) * v8);
    do
    {
      float v14 = *v10++;
      float v15 = v14;
      float v16 = *v11++;
      *v12++ = v15 - v16;
      --v13;
    }
    while (v13);
    uint64_t v17 = (float *)*v7[43];
    vDSP_Length v18 = (float *)*v5[43];
    uint64_t v19 = **(float ***)(a1 + 344);
    uint64_t v20 = v9;
    do
    {
      float v21 = *v17++;
      float v22 = v21;
      float v23 = *v18++;
      *v19++ = v22 - v23;
      --v20;
    }
    while (v20);
    unint64_t v24 = (float *)*v7[41];
    uint64_t v25 = (float *)*v5[41];
    uint64_t v26 = **(float ***)(a1 + 328);
    do
    {
      float v27 = *v24++;
      float v28 = v27;
      float v29 = *v25++;
      float result = v28 - v29;
      *v26++ = result;
      --v9;
    }
    while (v9);
  }
  if (v8)
  {
    uint64_t v30 = (v8 * v8);
    uint64_t v31 = (float *)*v7[45];
    uint64_t v32 = (float *)*v5[45];
    uint64_t v33 = **(float ***)(a1 + 360);
    uint64_t v34 = v30;
    do
    {
      float v35 = *v31++;
      float v36 = v35;
      float v37 = *v32++;
      *v33++ = v36 - v37;
      --v34;
    }
    while (v34);
    int v38 = (float *)*v7[46];
    int v39 = (float *)*v5[46];
    int v40 = **(float ***)(a1 + 368);
    uint64_t v41 = v30;
    do
    {
      float v42 = *v38++;
      float v43 = v42;
      float v44 = *v39++;
      *v40++ = v43 - v44;
      --v41;
    }
    while (v41);
    int v45 = (float *)*v7[44];
    int v46 = (float *)*v5[44];
    int v47 = **(float ***)(a1 + 352);
    do
    {
      float v48 = *v45++;
      float v49 = v48;
      float v50 = *v46++;
      float result = v49 - v50;
      *v47++ = result;
      --v30;
    }
    while (v30);
  }
  return result;
}

void GRU<float>::write(uint64_t a1, FILE *__stream, __sFILE *a3, int a4, int a5)
{
  NeuralNetwork::writeDimensions(__stream, a3, (int *)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  if (a4 >= 1)
  {
    int __ptr = *(_DWORD *)(a1 + 568);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    int __ptr = *(_DWORD *)(a1 + 572);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    int __ptr = *(_DWORD *)(a1 + 576);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    LODWORD(a3->_p) += 12;
  }
  MMatrix<float>::write(*(void *)(a1 + 336), __stream, (int *)a3, a5);
}

size_t NeuralNetwork::writeDimensions(FILE *__stream, __sFILE *a2, int *a3, int a4)
{
  if (!__stream) {
    exitFramework(3);
  }
  int __ptr = (int)a3;
  fwrite(&__ptr, 4uLL, 1uLL, __stream);
  LODWORD(a2->_p) += 4;
  int v9 = a4;
  size_t result = fwrite(&v9, 4uLL, 1uLL, __stream);
  LODWORD(a2->_p) += 4;
  return result;
}

void MMatrix<float>::write(int a1, FILE *__stream, int *a3, int a4)
{
  switch(a4)
  {
    case 8:
      if (!__stream) {
        goto LABEL_28;
      }
      int v8 = *a3 & 0xF;
      if (*a3 <= 0) {
        int v8 = -(-*a3 & 0xF);
      }
      if (v8 >= 15) {
        int v9 = 16;
      }
      else {
        int v9 = 15 - v8;
      }
      char v14 = v9;
      fwrite(&v14, 1uLL, 1uLL, __stream);
      ++*a3;
      writeByteArray((size_t)__stream, a3, v9);
      if ((*(unsigned char *)a3 & 0xF) == 0) {
        operator new[]();
      }
      break;
    case 16:
      if (!__stream) {
        goto LABEL_28;
      }
      int v10 = *a3 & 0xF;
      if (*a3 <= 0) {
        int v10 = -(-*a3 & 0xF);
      }
      if (v10 >= 15) {
        int v11 = 16;
      }
      else {
        int v11 = 15 - v10;
      }
      char v13 = v11;
      fwrite(&v13, 1uLL, 1uLL, __stream);
      ++*a3;
      writeByteArray((size_t)__stream, a3, v11);
      if ((*(unsigned char *)a3 & 0xF) == 0) {
        operator new[]();
      }
      break;
    case 32:
      if (__stream)
      {
        int v6 = *a3 & 0xF;
        if (*a3 <= 0) {
          int v6 = -(-*a3 & 0xF);
        }
        if (v6 >= 15) {
          int v7 = 16;
        }
        else {
          int v7 = 15 - v6;
        }
        char __ptr = v7;
        fwrite(&__ptr, 1uLL, 1uLL, __stream);
        ++*a3;
        writeByteArray((size_t)__stream, a3, v7);
        if ((*(unsigned char *)a3 & 0xF) == 0) {
          operator new[]();
        }
        break;
      }
LABEL_28:
      exitFramework(9);
    default:
      exitFramework(23);
  }
  exitFramework(18);
}

uint64_t GRU<float>::read(uint64_t a1, NeuralNetwork *this, int *a3, int *a4, int *a5)
{
  int v5 = (int)a4;
  *(void *)uint64_t v26 = 0;
  NeuralNetwork::readDimensions((uint64_t *)this, (ReadOnlyFile *)&v26[4], v26, a4, a5);
  if (v5 >= 1)
  {
    int v9 = *((_DWORD *)this + 18);
    uint64_t v10 = *(void *)this;
    int v11 = (int *)(*(void *)this + v9);
    unint64_t v12 = *(void *)this + *((void *)this + 1) - 4;
    if ((unint64_t)v11 <= v12)
    {
      int v13 = *v11;
      v9 += 4;
      *((_DWORD *)this + 18) = v9;
    }
    else
    {
      int v13 = 0;
    }
    uint64_t v14 = v9;
    *(_DWORD *)(a1 + 568) = v13;
    if (v10 + v9 <= v12)
    {
      int v15 = *(_DWORD *)(v10 + v9);
      v9 += 4;
      *((_DWORD *)this + 18) = v9;
      uint64_t v14 = v9;
    }
    else
    {
      int v15 = 0;
    }
    *(_DWORD *)(a1 + 572) = v15;
    float v16 = (int *)(v10 + v14);
    if ((unint64_t)v16 <= v12)
    {
      int v17 = *v16;
      *((_DWORD *)this + 18) = v9 + 4;
    }
    else
    {
      int v17 = 0;
    }
    *(_DWORD *)(a1 + 576) = v17;
  }
  vDSP_Length v18 = (float **)*(unsigned int *)(a1 + 52);
  if (v18 != *(_DWORD *)&v26[4] || (int v19 = *(_DWORD *)(a1 + 48), v19 != *(_DWORD *)v26)) {
    exitFramework(3);
  }
  MMatrix<float>::read(*(char **)(a1 + 336), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 2033), v18, v19);
  MMatrix<float>::read(*(char **)(a1 + 328), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 2033), (float **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<float>::read(*(char **)(a1 + 344), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 2033), (float **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<float>::read(*(char **)(a1 + 360), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 2033), (float **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
  MMatrix<float>::read(*(char **)(a1 + 352), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 2033), (float **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
  uint64_t v20 = *(char **)(a1 + 368);
  int v21 = *a3;
  int v22 = *(unsigned __int8 *)(a1 + 2033);
  float v23 = (float **)*(unsigned int *)(a1 + 52);
  int v24 = *(_DWORD *)(a1 + 52);

  return MMatrix<float>::read(v20, (uint64_t)this, v21, v22, v23, v24);
}

uint64_t *NeuralNetwork::readDimensions(uint64_t *this, ReadOnlyFile *a2, char *a3, int *a4, int *a5)
{
  if (!this) {
    exitFramework(3);
  }
  uint64_t v5 = *this;
  uint64_t v6 = this[1];
  int v7 = (_DWORD *)(*this + *((int *)this + 18));
  if ((unint64_t)v7 <= *this + v6 - 4)
  {
    *(_DWORD *)a2 = *v7;
    int v8 = *((_DWORD *)this + 18) + 4;
    *((_DWORD *)this + 18) = v8;
    uint64_t v5 = *this;
    uint64_t v6 = this[1];
  }
  else
  {
    *(_DWORD *)a2 = 0;
    int v8 = *((_DWORD *)this + 18);
  }
  int v9 = (_DWORD *)(v5 + v8);
  if ((unint64_t)v9 <= v5 + v6 - 4)
  {
    *(_DWORD *)a3 = *v9;
    *((_DWORD *)this + 18) += 4;
  }
  else
  {
    *(_DWORD *)a3 = 0;
  }
  return this;
}

uint64_t MMatrix<float>::read(char *a1, uint64_t a2, int a3, BOOL a4, float **a5, int a6)
{
  if (!a2) {
LABEL_11:
  }
    exitFramework(9);
  int v7 = (int)a5;
  if (a3 == 3)
  {
    readPadding((uint64_t *)a2);
    char v11 = *(unsigned char *)(a2 + 72);
  }
  else
  {
    char v11 = *a1;
  }
  if ((v11 & 0xF) != 0) {
    exitFramework(18);
  }
  if (a4)
  {
    uint64_t v12 = *(int *)(a2 + 72);
    uint64_t v13 = *(void *)a2 + v12;
    *(void *)a1 = v13;
    *(_DWORD *)(a2 + 72) = v12 + 4 * a6 * v7;
    uint64_t result = 4 * a6 * v7;
    if (!v13) {
      goto LABEL_11;
    }
  }
  else
  {
    int v15 = *(float **)a1;
    int v16 = a6 * v7;
    uint64_t result = ReadOnlyFile::readFloatArray((ReadOnlyFile *)a2, v15, &v16, a4, a5);
    if (!*(void *)a1) {
      goto LABEL_11;
    }
  }
  if (!result) {
    goto LABEL_11;
  }
  return result;
}

uint64_t GRU<float>::weightsAreNaN()
{
  return 0;
}

uint64_t GRU<float>::inputDeltas(uint64_t a1)
{
  return a1 + 608;
}

void GRU<float>::deltas()
{
}

uint64_t GRU<float>::outputs(uint64_t a1)
{
  return a1 + 112;
}

uint64_t GRU<float>::inputs(uint64_t a1)
{
  return a1 + 64;
}

void GRU<float>::targets()
{
}

void FullLayer<float>::init(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 528);
  if (v4) {
    int v5 = *(unsigned __int8 *)(v4 + 512);
  }
  else {
    int v5 = 0;
  }
  if (*(unsigned char *)(a1 + 40)) {
    int v6 = *(_DWORD *)(a1 + 96) + (v5 ^ 1);
  }
  else {
    int v6 = *(_DWORD *)(a1 + 96);
  }
  int v7 = *(_DWORD *)(a1 + 100);
  *(_DWORD *)(a1 + 104) = v6;
  *(_DWORD *)(a1 + 108) = v7 * v6;
  if (!*(_DWORD *)(a1 + 504))
  {
    if (!*(unsigned char *)(a1 + 117))
    {
      if (!v4 || *(_DWORD *)(v4 + 40) != 1) {
        MMatrix<float>::MMatrix();
      }
      *(void *)(a1 + 128) = *(void *)(v4 + 112);
    }
    *(void *)(a1 + 512) = a1 + 128;
  }
  if (!*(unsigned char *)(a1 + 116)) {
    operator new[]();
  }
  if (!*(_DWORD *)(a1 + 504))
  {
    int v9 = (void *)(a1 + 128);
    if (*(void *)(a1 + 128))
    {
      std::string::basic_string[abi:ne180100]<0>(&v24, " constructt W=");
      int v10 = *(char *)(a2 + 23);
      if (v10 >= 0) {
        char v11 = (const std::string::value_type *)a2;
      }
      else {
        char v11 = *(const std::string::value_type **)a2;
      }
      if (v10 >= 0) {
        std::string::size_type v12 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        std::string::size_type v12 = *(void *)(a2 + 8);
      }
      uint64_t v13 = std::string::insert(&v24, 0, v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      int64_t v26 = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      if (v26 >= 0) {
        int v15 = (char *)__p;
      }
      else {
        int v15 = (char *)__p[0];
      }
      MMatrix<float>::print((float **)(a1 + 128), v15, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 10);
      if (SHIBYTE(v26) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      if (!*(_DWORD *)(a1 + 504) && *v9)
      {
        std::string::basic_string[abi:ne180100]<0>(&v24, " construct W=");
        int v16 = *(char *)(a2 + 23);
        if (v16 >= 0) {
          int v17 = (const std::string::value_type *)a2;
        }
        else {
          int v17 = *(const std::string::value_type **)a2;
        }
        if (v16 >= 0) {
          std::string::size_type v18 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          std::string::size_type v18 = *(void *)(a2 + 8);
        }
        int v19 = std::string::insert(&v24, 0, v17, v18);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        int64_t v26 = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        if (v26 >= 0) {
          int v21 = (char *)__p;
        }
        else {
          int v21 = (char *)__p[0];
        }
        MMatrix<float>::print((float **)(a1 + 128), v21, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 10);
        if (SHIBYTE(v26) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v24.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  if (*(int *)(a1 + 112) < 1) {
    unsigned __int8 v8 = 0;
  }
  else {
    unsigned __int8 v8 = (**(uint64_t (***)(uint64_t))a1)(a1);
  }
  if (*(unsigned char *)(a1 + 42)) {
    int v22 = 2;
  }
  else {
    int v22 = maxFeatureVectors;
  }
  if (((*(unsigned char *)(a1 + 42) != 0) & v8) != 0) {
    int v23 = 2;
  }
  else {
    int v23 = maxFeatureVectors;
  }
  std::vector<VVector<float>>::resize((char **)(a1 + 264), v23);
  std::vector<VVector<float>>::resize((char **)(a1 + 384), v22);
  std::vector<VVector<float>>::resize((char **)(a1 + 288), maxFeatureVectors);
  if (!*(unsigned char *)(a1 + 116))
  {
    std::vector<VVector<float>>::resize((char **)(a1 + 312), maxFeatureVectors);
    std::vector<VVector<float>>::resize((char **)(a1 + 336), maxFeatureVectors);
  }
  std::vector<std::vector<int>>::resize((uint64_t *)(a1 + 360), maxFeatureVectors);
  if (v23 >= 1) {
    operator new[]();
  }
  if (v22 >= 1) {
    operator new[]();
  }
  if (maxFeatureVectors >= 1)
  {
    if (!*(unsigned char *)(a1 + 116)) {
      operator new[]();
    }
    operator new[]();
  }
}

void sub_1928F1004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FullLayer<float>::~FullLayer(uint64_t a1)
{
  *(void *)a1 = &unk_1EE323B58;
  FullLayer<float>::cleanupAllBuffers(a1);
  uint64_t v2 = *(void *)(a1 + 424);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 80))(v2);
    *(void *)(a1 + 424) = 0;
  }
  PTMutex::~PTMutex((PTMutex *)(a1 + 432));
  uint64_t v3 = *(void **)(a1 + 384);
  if (v3)
  {
    *(void *)(a1 + 392) = v3;
    operator delete(v3);
  }
  std::string::size_type v12 = (void **)(a1 + 360);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v4 = *(void **)(a1 + 336);
  if (v4)
  {
    *(void *)(a1 + 344) = v4;
    operator delete(v4);
  }
  int v5 = *(void **)(a1 + 312);
  if (v5)
  {
    *(void *)(a1 + 320) = v5;
    operator delete(v5);
  }
  int v6 = *(void **)(a1 + 288);
  if (v6)
  {
    *(void *)(a1 + 296) = v6;
    operator delete(v6);
  }
  int v7 = *(void **)(a1 + 264);
  if (v7)
  {
    *(void *)(a1 + 272) = v7;
    operator delete(v7);
  }
  SparseMatrix<float>::~SparseMatrix(a1 + 144);
  unsigned __int8 v8 = *(void **)(a1 + 72);
  if (v8)
  {
    *(void *)(a1 + 80) = v8;
    operator delete(v8);
  }
  int v9 = *(void **)(a1 + 48);
  if (v9)
  {
    *(void *)(a1 + 56) = v9;
    operator delete(v9);
  }
  *(void *)a1 = &unk_1EE3182B8;
  int v10 = *(void **)(a1 + 8);
  if (v10)
  {
    *(void *)(a1 + 16) = v10;
    operator delete(v10);
  }
  return a1;
}

void FullLayer<float>::cleanupAllBuffers(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  if (v3 == v2)
  {
    uint64_t v2 = *(void *)(a1 + 56);
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v2 + 8 * v4);
      if (v5)
      {
        MEMORY[0x192FF1690](v5, 0x1000C8052888210);
        uint64_t v2 = *(void *)(a1 + 48);
        uint64_t v3 = *(void *)(a1 + 56);
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
  }
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 80);
  if (v7 == v6)
  {
    uint64_t v6 = *(void *)(a1 + 80);
  }
  else
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(v6 + 8 * v8);
      if (v9)
      {
        MEMORY[0x192FF1690](v9, 0x1000C8052888210);
        uint64_t v6 = *(void *)(a1 + 72);
        uint64_t v7 = *(void *)(a1 + 80);
      }
      ++v8;
    }
    while (v8 < (v7 - v6) >> 3);
    uint64_t v2 = *(void *)(a1 + 48);
  }
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 80) = v6;
  SparseMatrix<float>::cleanupAllBuffers((void *)(a1 + 144));
  *(void *)(a1 + 272) = *(void *)(a1 + 264);
  *(void *)(a1 + 296) = *(void *)(a1 + 288);
  *(void *)(a1 + 392) = *(void *)(a1 + 384);
  std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)(a1 + 360));
  if (!*(unsigned char *)(a1 + 116))
  {
    *(void *)(a1 + 320) = *(void *)(a1 + 312);
    *(void *)(a1 + 344) = *(void *)(a1 + 336);
  }
}

void FullLayer<float>::computeErrorRMSE(uint64_t a1, void *a2, void *a3, int a4, _DWORD *a5)
{
  if (a4 >= 1)
  {
    uint64_t v9 = a4;
    do
    {
      uint64_t v10 = (v9 - 1);
      uint64_t v11 = *(unsigned int *)(a1 + 100);
      if ((int)v11 >= 1)
      {
        int v12 = 0;
        uint64_t v13 = 0;
        long long v14 = *(float **)(*(void *)(a1 + 288) + 8 * v10);
        float v15 = 1.1755e-38;
        do
        {
          if (v14[v13] > v15)
          {
            int v12 = v13;
            float v15 = v14[v13];
          }
          ++v13;
        }
        while (v11 != v13);
        int v16 = 0;
        uint64_t v17 = 0;
        std::string::size_type v18 = *(float **)(*a2 + 8 * v10);
        float v19 = 1.1755e-38;
        do
        {
          if (v18[v17] > v19)
          {
            int v16 = v17;
            float v19 = v18[v17];
          }
          ++v17;
        }
        while (v11 != v17);
        if (v12 != v16)
        {
          ++*a5;
          uint64_t v11 = *(unsigned int *)(a1 + 100);
        }
        if ((int)v11 >= 1)
        {
          long long v20 = *(float **)(*a3 + 8 * v10);
          do
          {
            float v21 = *v18++;
            float v22 = v21;
            float v23 = *v14++;
            *v20++ = v22 - v23;
            --v11;
          }
          while (v11);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v34, "SoftMax ComputerError::targets t=");
      i2s(__p);
      if ((v33 & 0x80u) == 0) {
        std::string v24 = __p;
      }
      else {
        std::string v24 = (void **)__p[0];
      }
      if ((v33 & 0x80u) == 0) {
        std::string::size_type v25 = v33;
      }
      else {
        std::string::size_type v25 = (std::string::size_type)__p[1];
      }
      int64_t v26 = std::string::append(&v34, (const std::string::value_type *)v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      int64_t v36 = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)float v35 = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      if ((char)v33 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      if (v36 >= 0) {
        float v28 = (char *)v35;
      }
      else {
        float v28 = (char *)v35[0];
      }
      VVector<float>::print((float **)(*a2 + 8 * v10), v28, *(_DWORD *)(a1 + 100));
      VVector<float>::print((float **)(*(void *)(a1 + 288) + 8 * v10), "SoftMax ComputerError::output ", *(_DWORD *)(a1 + 100));
      VVector<float>::print((float **)(*a3 + 8 * v10), "SoftMax ComputerError::deltas ", *(_DWORD *)(a1 + 100));
      if (SHIBYTE(v36) < 0) {
        operator delete(v35[0]);
      }
      BOOL v31 = __OFSUB__(v9, 1);
      BOOL v29 = v9 == 1;
      BOOL v30 = --v9 < 0;
    }
    while (!(v30 ^ v31 | v29));
  }
}

void sub_1928F1490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

float FullLayer<float>::probability(uint64_t a1, int a2, int a3)
{
  return *(float *)(*(void *)(*(void *)(a1 + 288) + 8 * a2) + 4 * a3);
}

uint64_t FullLayer<float>::outputDeltas(uint64_t a1)
{
  return a1 + 336;
}

void FullLayer<float>::~FullLayer(uint64_t a1)
{
  FullLayer<float>::~FullLayer(a1);

  JUMPOUT(0x192FF16B0);
}

float FullLayer<float>::log2Probability(uint64_t a1, uint64_t *a2, int a3)
{
  if (a3 < 1) {
    return 0.0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = *(unsigned int *)(a1 + 100);
  uint64_t v5 = *a2;
  uint64_t v6 = *(void *)(a1 + 288);
  uint64_t v7 = a3;
  float v8 = 0.0;
  do
  {
    if ((int)v4 < 1)
    {
      int v9 = 0;
    }
    else
    {
      int v9 = 0;
      uint64_t v10 = 0;
      float v12 = 1.1755e-38;
      do
      {
        uint64_t v11 = *(void *)(v5 + 8 * v3);
        if (*(float *)(v11 + 4 * v10) > v12)
        {
          int v9 = v10;
          float v12 = *(float *)(v11 + 4 * v10);
        }
        ++v10;
      }
      while (v4 != v10);
    }
    float v13 = *(float *)(*(void *)(v6 + 8 * v3) + 4 * v9);
    if (v13 <= 1.0e-10) {
      float v14 = 99.0;
    }
    else {
      float v14 = -log2f(v13);
    }
    float v8 = v8 + v14;
    ++v3;
  }
  while (v3 != v7);
  return v8;
}

_DWORD *FullLayer<float>::computeError(_DWORD *result)
{
  if (!result[30]) {
    return (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 392))();
  }
  return result;
}

uint64_t FullLayer<float>::updateFrom(uint64_t a1, void *lpsrc, float a3)
{
  if (*(_DWORD *)(a1 + 504)) {
    exitFramework(1);
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 440));
  uint64_t v5 = **(void (****)(float))(a1 + 424);
  if (*(_DWORD *)(a1 + 112))
  {
    v5[1](a3);
  }
  else
  {
    (*v5)(a3);
    uint64_t v6 = *(const float ***)(a1 + 512);
    vDSP_Length v7 = *(int *)(a1 + 108);
    float __C = 2.0;
    float __B = -2.0;
    vDSP_vclip(*v6, 1, &__B, &__C, (float *)*v6, 1, v7);
  }
  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 440));
}

char *FullLayer<float>::setMaster(uint64_t a1, void *lpsrc)
{
  if (*(_DWORD *)(a1 + 504) != 1) {
    exitFramework(1);
  }
  if (!result) {
    __cxa_bad_cast();
  }
  *(void *)(a1 + 512) = result + 128;
  return result;
}

uint64_t FullLayer<float>::reverseBackward(unsigned char *a1)
{
  a1[520] = 1;
  uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 296))(a1);
  a1[520] = 0;
  return result;
}

uint64_t FullLayer<float>::reverseForward(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  a1[520] = 1;
  {
    uint64_t v13 = a6;
    uint64_t v12 = a5;
    unsigned int v11 = a4;
    uint64_t v9 = a2;
    uint64_t v10 = a3;
    a2 = v9;
    a3 = v10;
    a4 = v11;
    a5 = v12;
    a6 = v13;
    if (v8)
    {
      FullLayer<float>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy = 0;
      unk_1E9307BC0 = 0;
      qword_1E9307BC8 = 0;
      __cxa_atexit((void (*)(void *))std::vector<int>::~vector[abi:ne180100], &FullLayer<float>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy, &dword_1920CB000);
      a2 = v9;
      a3 = v10;
      a4 = v11;
      a5 = v12;
      a6 = v13;
    }
  }
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 304))(a1, a2, a3, a4, a5, a6, &FullLayer<float>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy);
  a1[520] = 0;
  return result;
}

void FullLayer<float>::forward(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5)
{
  if (a3[1] == *a3 || *(int *)(a1 + 112) < 1) {
    int v9 = 0;
  }
  else {
    int v9 = (**(uint64_t (***)(uint64_t))a1)(a1);
  }
  int v10 = *(unsigned __int8 *)(a1 + 520);
  std::string::basic_string[abi:ne180100]<0>(__p, "Fulllayer");
  if (a5 && v10) {
    exitFramework(34);
  }
  unsigned int v11 = a4 & 0xFFFFFF;
  unsigned int v12 = a5 != 0;
  if (v34 < 0) {
    operator delete(__p[0]);
  }
  if (v11 > v12)
  {
    unsigned int v13 = ~v12 + v11;
    do
    {
      if (*(unsigned char *)(a1 + 520)) {
        int v14 = v13;
      }
      else {
        int v14 = v12;
      }
      uint64_t v15 = v14;
      if (*(unsigned char *)(a1 + 42)) {
        int v16 = 1;
      }
      else {
        int v16 = v14;
      }
      if (((*(unsigned char *)(a1 + 42) != 0) & v9) != 0) {
        uint64_t v17 = 1;
      }
      else {
        uint64_t v17 = v14;
      }
      uint64_t v18 = *(void *)(a1 + 264);
      if (v9)
      {
        bzero(*(void **)(v18 + 8 * v17), 4 * *(int *)(a1 + 104));
        uint64_t v19 = *(void *)(a1 + 264);
        *(_DWORD *)(*(void *)(v19 + 8 * v17) + 4 * **(int **)(*a3 + 24 * (int)v15)) = 1065353216;
      }
      else
      {
        memmove(*(void **)(v18 + 8 * v17), *(const void **)(*a2 + 8 * v17), 4 * *(int *)(a1 + 96));
        uint64_t v19 = *(void *)(a1 + 264);
      }
      int v20 = *(_DWORD *)(a1 + 104);
      if (*(unsigned char *)(a1 + 40)) {
        *(_DWORD *)(*(void *)(v19 + 8 * v17) + 4 * (v20 - 1)) = 1065353216;
      }
      VVector<float>::print((float **)(v19 + 8 * v17), "FullLayer input: ", v20);
      MMatrix<float>::print(*(float ***)(a1 + 512), "FullLayer weights: ", *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 10);
      if (v9)
      {
        uint64_t v21 = *(void *)(a1 + 360);
        float v22 = (const void **)(v21 + 24 * v15);
        float v23 = *v22;
        *(_DWORD *)*float v22 = **(_DWORD **)(*a3 + 24 * v15);
        if (*(unsigned char *)(a1 + 40)) {
          v23[1] = *(_DWORD *)(a1 + 104) - 1;
        }
        uint64_t v24 = v16;
        std::string::size_type v25 = (float **)(*(void *)(a1 + 384) + 8 * v16);
        BOOL v31 = 0;
        uint64_t v32 = 0;
        BOOL v30 = 0;
        uint64_t v26 = *(void *)(v21 + 24 * (int)v15 + 8);
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v30, *v22, v26, (v26 - (uint64_t)*v22) >> 2);
        VVector<float>::internalMul(v25, (int *)v30, v31, **(void **)(a1 + 512), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104));
        if (v30)
        {
          BOOL v31 = (int *)v30;
          operator delete(v30);
        }
      }
      else
      {
        uint64_t v24 = v16;
        cblas_sgemv(CblasRowMajor, CblasNoTrans, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 1.0, **(const float ***)(a1 + 512), *(_DWORD *)(a1 + 104), *(const float **)(*(void *)(a1 + 264) + 8 * v17), 1, 0.0, *(float **)(*(void *)(a1 + 384) + 8 * v16), 1);
      }
      uint64_t v27 = *(void *)(a1 + 384);
      vDSP_Length v28 = *(int *)(a1 + 100);
      LODWORD(__p[0]) = -1035468800;
      float __C = 50.0;
      vDSP_vclip(*(const float **)(v27 + 8 * v24), 1, (const float *)__p, &__C, *(float **)(v27 + 8 * v24), 1, v28);
      VVector<float>::applyForwardActivation((float **)(*(void *)(a1 + 288) + 8 * v15), *(float **)(*(void *)(a1 + 384) + 8 * v24), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 408));
      ++v12;
      --v13;
    }
    while (v13 != -1);
  }
}

void sub_1928F1C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void FullLayer<float>::backward(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (*(int *)(a1 + 112) < 1) {
    bzero(*(void **)(a1 + 136), 4 * *(int *)(a1 + 108));
  }
  else {
    *(_DWORD *)(a1 + 160) = 0;
  }
  BOOL v9 = __OFSUB__(a5, 1);
  int v10 = a5 - 1;
  if (v10 < 0 == v9)
  {
    unsigned int v11 = 0;
    do
    {
      if (*(unsigned char *)(a1 + 520)) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v10;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 248))(a1, a4, a3, v12, 0xFFFFFFFFLL, 0xFFFFFFFFLL);
      --v10;
      ++v11;
    }
    while (v10 != -1);
  }
}

uint64_t FullLayer<float>::update(uint64_t a1)
{
  if (*(int *)(a1 + 112) < 1) {
    return (***(uint64_t (****)(void))(a1 + 424))();
  }
  else {
    return (*(uint64_t (**)(void))(**(void **)(a1 + 424) + 8))();
  }
}

uint64_t FullLayer<float>::noutputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 100);
}

uint64_t FullLayer<float>::ninputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

void FullLayer<float>::initDW(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 116))
  {
    if (*(_DWORD *)(a1 + 112)) {
      *(_DWORD *)(a1 + 160) = 0;
    }
    else {
      bzero(*(void **)(a1 + 136), 4 * *(int *)(a1 + 108));
    }
  }
  uint64_t v4 = *(void *)(a1 + 264);
  if (*(void *)(a1 + 272) != v4)
  {
    unint64_t v5 = 0;
    do
    {
      bzero(*(void **)(v4 + 8 * v5++), 4 * *(int *)(a1 + 104));
      uint64_t v4 = *(void *)(a1 + 264);
    }
    while (v5 < (*(void *)(a1 + 272) - v4) >> 3);
  }
  uint64_t v6 = *(void *)(a1 + 288);
  if (*(void *)(a1 + 296) != v6)
  {
    unint64_t v7 = 0;
    do
    {
      bzero(*(void **)(v6 + 8 * v7++), 4 * *(int *)(a1 + 100));
      uint64_t v6 = *(void *)(a1 + 288);
    }
    while (v7 < (*(void *)(a1 + 296) - v6) >> 3);
  }
  if (a2 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 8 * a2;
    do
    {
      if (!*(unsigned char *)(a1 + 116))
      {
        bzero(*(void **)(*(void *)(a1 + 312) + v8), 4 * *(int *)(a1 + 104));
        bzero(*(void **)(*(void *)(a1 + 336) + v8), 4 * *(int *)(a1 + 100));
      }
      v8 += 8;
    }
    while (v9 != v8);
  }
}

void FullLayer<float>::backwardForSingleFeatureVector(uint64_t a1, uint64_t *a2, void *a3, int a4)
{
  if (((**(uint64_t (***)(uint64_t))a1)(a1) & 1) == 0)
  {
    VVector<float>::applyBackwardActivationDerivative((void **)(a1 + 416), *(float **)(*(void *)(a1 + 384) + 8 * a4), *(float **)(*a2 + 8 * a4), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 408));
    cblas_sgemv(CblasRowMajor, CblasTrans, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 1.0, **(const float ***)(a1 + 512), *(_DWORD *)(a1 + 104), *(const float **)(a1 + 416), 1, 0.0, *(float **)(*(void *)(a1 + 312) + 8 * a4), 1);
    uint64_t v8 = *(void *)(a1 + 312);
    vDSP_Length v9 = *(int *)(a1 + 104);
    float __B = -50.0;
    float __C = 50.0;
    vDSP_vclip(*(const float **)(v8 + 8 * a4), 1, &__B, &__C, *(float **)(v8 + 8 * a4), 1, v9);
  }
  if (a3[1] == *a3 || *(int *)(a1 + 112) < 1 || !(**(unsigned int (***)(uint64_t))a1)(a1))
  {
    VVector<float>::sumOuterProd(a1 + 416, *(void *)(a1 + 264) + 8 * a4, *(void *)(a1 + 136), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104));
  }
  else
  {
    uint64_t v10 = *a2;
    uint64_t v11 = *(void *)(a1 + 360) + 24 * a4;
    unsigned int v13 = 0;
    uint64_t v14 = 0;
    std::string __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v11, *(void *)(v11 + 8), (uint64_t)(*(void *)(v11 + 8) - *(void *)v11) >> 2);
    SparseMatrix<float>::sum<float>(a1 + 144, *(int **)(v10 + 8 * a4), (uint64_t)__p, *(_DWORD *)(a1 + 100));
    if (__p)
    {
      unsigned int v13 = __p;
      operator delete(__p);
    }
  }
}

float VVector<float>::applyBackwardActivationDerivative(void **a1, float *a2, float *__src, int a4, int a5)
{
  switch(a5)
  {
    case 0:
      memmove(*a1, __src, 4 * a4);
      break;
    case 1:
      if (a4 >= 1)
      {
        uint64_t v6 = (float *)*a1;
        uint64_t v7 = a4;
        float result = 1.0;
        do
        {
          float v8 = *a2++;
          float v9 = v8 * (float)(1.0 - v8);
          float v10 = *__src++;
          *v6++ = v10 * v9;
          --v7;
        }
        while (v7);
      }
      break;
    case 2:
      if (a4 >= 1)
      {
        uint64_t v11 = (float *)*a1;
        uint64_t v12 = a4;
        float result = 1.0;
        do
        {
          float v13 = *a2++;
          float v14 = 1.0 - (float)(v13 * v13);
          float v15 = *__src++;
          *v11++ = v14 * v15;
          --v12;
        }
        while (v12);
      }
      break;
    case 3:
      if (a4 >= 1)
      {
        int v16 = (float *)*a1;
        uint64_t v17 = a4;
        float result = 1.7159;
        do
        {
          float v18 = *a2++;
          float v19 = (float)(v18 + 1.7159) * (float)((float)(1.7159 - v18) * 0.38853);
          float v20 = *__src++;
          *v16++ = v20 * v19;
          --v17;
        }
        while (v17);
      }
      break;
    case 4:
      uint64_t v21 = (float *)*a1;
      *(_DWORD *)*a1 = -971227136;
      if (a4 >= 1)
      {
        uint64_t v22 = a4;
        float v23 = v21;
        uint64_t v24 = a4;
        do
        {
          float v25 = *a2++;
          if (v25 > 0.0) {
            float v26 = 1.0;
          }
          else {
            float v26 = 0.0;
          }
          *v23++ = v26;
          --v24;
        }
        while (v24);
        do
        {
          float v27 = *__src++;
          float result = *v21 * v27;
          *v21++ = result;
          --v22;
        }
        while (v22);
      }
      break;
    default:
      return result;
  }
  return result;
}

float FullLayer<float>::computeErrorForSingleFeatureVector(uint64_t a1, uint64_t *a2, void *a3, int a4, _DWORD *a5, float result)
{
  uint64_t v6 = *(void *)(a1 + 288);
  uint64_t v7 = *(unsigned int *)(a1 + 100);
  if ((int)v7 <= 0)
  {
    uint64_t v14 = *a2;
    float v15 = (float **)(*a2 + 8 * a4);
  }
  else
  {
    int v8 = 0;
    uint64_t v9 = 0;
    float v11 = 1.1755e-38;
    do
    {
      uint64_t v10 = *(void *)(v6 + 8 * a4);
      if (*(float *)(v10 + 4 * v9) > v11)
      {
        int v8 = v9;
        float v11 = *(float *)(v10 + 4 * v9);
      }
      ++v9;
    }
    while (v7 != v9);
    int v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = *a2;
    float v15 = (float **)(*a2 + 8 * a4);
    float result = 1.1755e-38;
    do
    {
      if ((*v15)[v13] > result)
      {
        int v12 = v13;
        float result = (*v15)[v13];
      }
      ++v13;
    }
    while (v7 != v13);
    if (v8 != v12) {
      ++*a5;
    }
  }
  if (a4 < (unint64_t)((uint64_t)(a3[1] - *a3) >> 3)
    && a4 < (unint64_t)((a2[1] - v14) >> 3)
    && a4 < (unint64_t)((*(void *)(a1 + 296) - v6) >> 3))
  {
    uint64_t v16 = *(unsigned int *)(a1 + 100);
    if ((int)v16 >= 1)
    {
      uint64_t v17 = *v15;
      float v18 = *(float **)(v6 + 8 * a4);
      float v19 = *(float **)(*a3 + 8 * a4);
      do
      {
        float v20 = *v17++;
        float v21 = v20;
        float v22 = *v18++;
        float result = v21 - v22;
        *v19++ = result;
        --v16;
      }
      while (v16);
    }
  }
  return result;
}

void FullLayer<float>::log2ProbabilityForSingleFeatureVector(uint64_t a1, void *a2, float *a3, int a4)
{
  uint64_t v5 = *(unsigned int *)(a1 + 100);
  if ((int)v5 < 1)
  {
    uint64_t v10 = 0;
  }
  else
  {
    int v6 = 0;
    uint64_t v7 = 0;
    float v9 = 1.1755e-38;
    do
    {
      uint64_t v8 = *(void *)(*a2 + 8 * a4);
      if (*(float *)(v8 + 4 * v7) > v9)
      {
        int v6 = v7;
        float v9 = *(float *)(v8 + 4 * v7);
      }
      ++v7;
    }
    while (v5 != v7);
    uint64_t v10 = v6;
  }
  float v11 = *(float *)(*(void *)(*(void *)(a1 + 288) + 8 * a4) + 4 * v10);
  if (v11 <= 1.0e-10) {
    float v12 = 99.0;
  }
  else {
    float v12 = 0.0 - log2f(v11);
  }
  *a3 = v12;
}

void FullLayer<float>::allocAllBuffers(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "FullLayer, from allocAll");
  (*(void (**)(uint64_t, void **, void, float))(*(void *)a1 + 400))(a1, __p, 0, -0.44);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1928F2414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FullLayer<float>::unsetSpecialBidir(uint64_t result)
{
  *(unsigned char *)(result + 42) = 0;
  return result;
}

uint64_t FullLayer<float>::setSpecialBidir(uint64_t result)
{
  *(unsigned char *)(result + 42) = 1;
  return result;
}

uint64_t FullLayer<float>::setWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(v2 - 16);
  *(void *)(a2 + 8) = v2 - 16;
  *(void *)(a1 + 128) = v3;
  uint64_t result = a1 + 128;
  *(void *)(result + 384) = result;
  return result;
}

char *FullLayer<float>::getWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = **(void **)(a1 + 512);
  double v4 = *(double *)(a1 + 100);
  uint64_t v5 = *(uint64_t **)(a2 + 8);
  if ((unint64_t)v5 >= *(void *)(a2 + 16))
  {
    uint64_t result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v3, v4);
  }
  else
  {
    uint64_t *v5 = v3;
    *((double *)v5 + 1) = v4;
    uint64_t result = (char *)(v5 + 2);
  }
  *(void *)(a2 + 8) = result;
  return result;
}

void FullLayer<float>::resetForNewBatch(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 424);
  std::string::basic_string[abi:ne180100]<0>(__p, "FULLLAYER - Print before reset");
  (*(void (**)(uint64_t, void **))(*(void *)v2 + 40))(v2, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(void))(**(void **)(a1 + 424) + 16))(*(void *)(a1 + 424));
  uint64_t v3 = *(void *)(a1 + 424);
  std::string::basic_string[abi:ne180100]<0>(__p, "FULLLAYER - Print AFTER reset");
  (*(void (**)(uint64_t, void **))(*(void *)v3 + 40))(v3, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1928F25A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FullLayer<float>::normalizeModel(uint64_t result, float a2)
{
  uint64_t v2 = *(unsigned int *)(result + 108);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = **(float ***)(result + 512);
    do
    {
      float *v3 = *v3 * a2;
      ++v3;
      --v2;
    }
    while (v2);
  }
  return result;
}

void FullLayer<float>::clipModel(uint64_t a1, float a2)
{
  uint64_t v2 = *(const float ***)(a1 + 512);
  vDSP_Length v3 = *(int *)(a1 + 108);
  float __B = -a2;
  float __C = a2;
  vDSP_vclip(*v2, 1, &__B, &__C, (float *)*v2, 1, v3);
}

void FullLayer<float>::applyGradient(uint64_t a1, void *lpsrc)
{
  if (lpsrc) {
  else
  }
    vDSP_Length v3 = 0;
  uint64_t v4 = *(void *)(a1 + 424);
  uint64_t v5 = *(void *)(a1 + 512);
  int v6 = v3 + 128;
  (*(void (**)(uint64_t))(*(void *)v4 + 64))(v4);
  (**(void (***)(uint64_t, uint64_t, char *))v4)(v4, v5, v6);
  uint64_t v7 = *(const float ***)(a1 + 512);
  vDSP_Length v8 = *(int *)(a1 + 108);
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*v7, 1, &__B, &__C, (float *)*v7, 1, v8);
}

void FullLayer<float>::addGradient(uint64_t a1, void *lpsrc)
{
  uint64_t v4 = *(const float ***)(a1 + 512);
  vDSP_Length v5 = *(int *)(a1 + 104) * (uint64_t)*(int *)(a1 + 100);
  float __B = 1.0;
  vDSP_vsma(v3[16], 1, &__B, *v4, 1, (float *)*v4, 1, v5);
}

void FullLayer<float>::compareModels(int a1, void *lpsrc, const void *a3)
{
  if (lpsrc) {
  if (a3)
  }
  {
  }
}

float FullLayer<float>::subtractModels(uint64_t a1, void *lpsrc, const void *a3)
{
  if (lpsrc)
  {
    if (a3)
    {
LABEL_3:
      goto LABEL_6;
    }
  }
  else
  {
    vDSP_Length v5 = 0;
    if (a3) {
      goto LABEL_3;
    }
  }
  uint64_t v7 = 0;
LABEL_6:
  uint64_t v8 = (*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100));
  if ((int)v8 >= 1)
  {
    float v9 = (float *)v7[16];
    uint64_t v10 = (float *)*((void *)v5 + 16);
    float v11 = **(float ***)(a1 + 512);
    do
    {
      float v12 = *v9++;
      float v13 = v12;
      float v14 = *v10++;
      float result = v13 - v14;
      *v11++ = result;
      --v8;
    }
    while (v8);
  }
  return result;
}

void FullLayer<float>::write(uint64_t a1, FILE *__stream, __sFILE *a3, int a4, int a5)
{
  NeuralNetwork::writeDimensions(__stream, a3, (int *)*(unsigned int *)(a1 + 100), *(_DWORD *)(a1 + 104));
  if (a4 >= 1)
  {
    int __ptr = *(_DWORD *)(a1 + 408);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    LODWORD(a3->_p) += 4;
  }
  uint64_t v10 = *(void *)(a1 + 512);

  MMatrix<float>::write(v10, __stream, (int *)a3, a5);
}

uint64_t FullLayer<float>::read(uint64_t a1, NeuralNetwork *this, int *a3, int *a4, int *a5)
{
  int v5 = (int)a4;
  *(void *)float v18 = 0;
  NeuralNetwork::readDimensions((uint64_t *)this, (ReadOnlyFile *)&v18[4], v18, a4, a5);
  if (v5 >= 1)
  {
    uint64_t v9 = *((int *)this + 18);
    uint64_t v10 = (int *)(*(void *)this + v9);
    if ((unint64_t)v10 <= *(void *)this + *((void *)this + 1) - 4)
    {
      int v11 = *v10;
      *((_DWORD *)this + 18) = v9 + 4;
    }
    else
    {
      int v11 = 0;
    }
    *(_DWORD *)(a1 + 408) = v11;
  }
  float v12 = (float **)*(unsigned int *)(a1 + 100);
  if (v12 != *(_DWORD *)&v18[4] || (int v13 = *(_DWORD *)(a1 + 104), v13 != *(_DWORD *)v18)) {
    exitFramework(3);
  }
  float v14 = *(char **)(a1 + 512);
  int v15 = *a3;
  int v16 = *(unsigned __int8 *)(a1 + 117);

  return MMatrix<float>::read(v14, (uint64_t)this, v15, v16, v12, v13);
}

uint64_t FullLayer<float>::weightsAreNaN()
{
  return 0;
}

uint64_t FullLayer<float>::inputDeltas(uint64_t a1)
{
  return a1 + 312;
}

uint64_t FullLayer<float>::deltas(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 376))();
}

uint64_t FullLayer<float>::outputs(uint64_t a1)
{
  return a1 + 288;
}

uint64_t FullLayer<float>::inputs(uint64_t a1)
{
  return a1 + 264;
}

void FullLayer<float>::targets()
{
}

void SoftMax<float>::~SoftMax(uint64_t a1)
{
  FullLayer<float>::~FullLayer(a1);

  JUMPOUT(0x192FF16B0);
}

void SoftMax<float>::forward(unsigned __int8 *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v13 = a1[520];
  std::string::basic_string[abi:ne180100]<0>(&__p, "Softmax");
  if (a5 && v13) {
    exitFramework(34);
  }
  unsigned int v14 = a4 & 0xFFFFFF;
  uint64_t v15 = a5 != 0;
  if (v17 < 0) {
    operator delete(__p);
  }
  if (v14 > v15)
  {
    do
    {
      (*(void (**)(unsigned __int8 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 224))(a1, a2, a3, v15, a7);
      uint64_t v15 = (v15 + 1);
    }
    while (v14 != v15);
  }
}

void sub_1928F2CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SoftMax<float>::forwardForSingleFeatureVector(uint64_t a1, void *a2, uint64_t a3, int a4, const void **a5)
{
  int v9 = *(unsigned __int8 *)(a1 + 42);
  uint64_t v10 = a4;
  uint64_t v11 = *(int *)(a1 + 96);
  vDSP_Length __M = *(int *)(a1 + 100);
  float v12 = *(const float ***)(a1 + 512);
  vDSP_Length v13 = *(int *)(a1 + 104);
  unsigned int v14 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  memmove(*(void **)(*v14 + 8 * a4), *(const void **)(*a2 + 8 * a4), 4 * v11);
  if (*(unsigned char *)(a1 + 40)) {
    *(_DWORD *)(*(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) + 8 * v10)
  }
              + 4 * ((int)v13 - 1)) = 1065353216;
  uint64_t v15 = (int *)*a5;
  int v16 = (int *)a5[1];
  if (v9) {
    uint64_t v17 = 1;
  }
  else {
    uint64_t v17 = v10;
  }
  uint64_t v18 = *(void *)(a1 + 384);
  uint64_t v19 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (v16 == v15)
  {
    cblas_sgemv(CblasRowMajor, CblasNoTrans, __M, v13, 1.0, *v12, v13, *(const float **)(v19 + 8 * v10), 1, 0.0, *(float **)(v18 + 8 * v17), 1);
    uint64_t v25 = *(void *)(a1 + 384);
    float __C = 50.0;
    float __B = -50.0;
    vDSP_vclip(*(const float **)(v25 + 8 * v17), 1, &__B, &__C, *(float **)(v25 + 8 * v17), 1, __M);
    float v26 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    VVector<float>::outputExpNormalized((float **)(*v26 + 8 * v10), *(const float **)(*(void *)(a1 + 384) + 8 * v17), __M);
    uint64_t v27 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    float __C = 5.0;
    float __B = -5.0;
    vDSP_vclip(*(const float **)(v27 + 8 * v10), 1, &__B, &__C, *(float **)(v27 + 8 * v10), 1, __M);
  }
  else
  {
    bzero(*(void **)(v18 + 8 * v17), 4 * __M);
    float v20 = (int *)*a5;
    if (a5[1] != *a5)
    {
      unint64_t v21 = 0;
      do
      {
        vDSP_dotpr(*(const float **)(v19 + 8 * v10), 1, &(*v12)[v20[v21] * (int)v13], 1, (float *)(*(void *)(v18 + 8 * v17) + 4 * v20[v21]), v13);
        ++v21;
        float v20 = (int *)*a5;
      }
      while (v21 < ((unsigned char *)a5[1] - (unsigned char *)*a5) >> 2);
    }
    uint64_t v22 = *(void *)(a1 + 384);
    float __C = 50.0;
    float __B = -50.0;
    vDSP_vclip(*(const float **)(v22 + 8 * v17), 1, &__B, &__C, *(float **)(v22 + 8 * v17), 1, __M);
    float v23 = (void **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1) + 8 * v10);
    uint64_t v24 = (uint64_t *)(*(void *)(a1 + 384) + 8 * v17);
    BOOL v30 = 0;
    uint64_t v31 = 0;
    std::string __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *a5, (uint64_t)a5[1], ((unsigned char *)a5[1] - (unsigned char *)*a5) >> 2);
    VVector<float>::outputExpNormalized(v23, v24, (int **)&__p, __M);
    if (__p)
    {
      BOOL v30 = __p;
      operator delete(__p);
    }
  }
}

void VVector<float>::outputExpNormalized(void **a1, uint64_t *a2, int **a3, int a4)
{
  bzero(*a1, 4 * a4);
  uint64_t v8 = a3;
  uint64_t v7 = (char *)*a3;
  uint64_t v9 = (char *)v8[1] - v7;
  if (v9)
  {
    unint64_t v10 = v9 >> 2;
    uint64_t v11 = *a2;
    float v12 = (float *)*a1;
    if (v10 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v10;
    }
    float v14 = 0.0;
    uint64_t v15 = v7;
    uint64_t v16 = v13;
    do
    {
      uint64_t v17 = *(int *)v15;
      v15 += 4;
      float v18 = expf(*(float *)(v11 + 4 * v17));
      v12[v17] = v18;
      float v14 = v14 + v18;
      --v16;
    }
    while (v16);
    float v19 = 0.001;
    if (v14 > 0.0) {
      float v19 = v14 + 0.001;
    }
    do
    {
      uint64_t v20 = *(int *)v7;
      v7 += 4;
      v12[v20] = v12[v20] / v19;
      --v13;
    }
    while (v13);
  }
}

void VVector<float>::outputExpNormalized(float **a1, const float *a2, int a3)
{
  float __C = 0.0;
  LODWORD(__N) = a3;
  vvexpf(*a1, a2, (const int *)&__N);
  vDSP_sve(*a1, 1, &__C, (int)__N);
  float v4 = __C;
  if (fabsf(__C) == INFINITY)
  {
    float __C = 1.7014e38;
    float v4 = 1.7014e38;
  }
  if (v4 <= 0.0) {
    float v5 = 0.001;
  }
  else {
    float v5 = v4 + 0.001;
  }
  float __B = v5;
  vDSP_vsdiv(*a1, 1, &__B, *a1, 1, (int)__N);
}

void SoftMax<float>::allocAllBuffers(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "SoftMax, from allocAll");
  FullLayer<float>::init(a1, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1928F3208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SoftMax<float>::outputs(uint64_t a1)
{
  return a1 + 288;
}

uint64_t SoftMax<float>::inputs(uint64_t a1)
{
  return a1 + 264;
}

void SoftMax<float>::targets()
{
}

void Direct::outputDeltas(Direct *this)
{
}

void Direct::~Direct(Direct *this)
{
  Direct::~Direct(this);

  JUMPOUT(0x192FF16B0);
}

{
  void *v2;
  void *v3;
  char *v4;
  unint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  *(void *)this = &unk_1EE322E68;
  float v4 = (char *)this + 232;
  uint64_t v2 = (void *)*((void *)this + 29);
  char v3 = (void *)*((void *)v4 + 1);
  if (v3 == v2)
  {
    uint64_t v2 = v3;
    if (v3)
    {
LABEL_7:
      *((void *)this + 30) = v2;
      operator delete(v2);
    }
  }
  else
  {
    float v5 = 0;
    do
    {
      if (*((void *)v2 + v5))
      {
        MEMORY[0x192FF1690](*((void *)v2 + v5), 0x1000C8052888210);
        uint64_t v2 = (void *)*((void *)this + 29);
        char v3 = (void *)*((void *)this + 30);
      }
      ++v5;
    }
    while (v5 < ((unsigned char *)v3 - (unsigned char *)v2) >> 3);
    if (v2) {
      goto LABEL_7;
    }
  }
  PTMutex::~PTMutex((Direct *)((char *)this + 160));
  int v6 = (void *)*((void *)this + 17);
  if (v6)
  {
    *((void *)this + 18) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 14);
  if (v7)
  {
    *((void *)this + 15) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 11);
  if (v8)
  {
    *((void *)this + 12) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 8);
  if (v9)
  {
    *((void *)this + 9) = v9;
    operator delete(v9);
  }
  *(void *)this = &unk_1EE3182B8;
  unint64_t v10 = (void *)*((void *)this + 1);
  if (v10)
  {
    *((void *)this + 2) = v10;
    operator delete(v10);
  }
}

void Direct::log2Probability()
{
}

void Direct::computeError()
{
}

void Direct::forward(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  if ((a4 & 0xFFFFFF) != 0)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 8 * (a4 & 0xFFFFFF);
    do
    {
      memmove(*(void **)(*(void *)(a1 + 64) + v6), *(const void **)(*a2 + v6), 4 * *(int *)(a1 + 44));
      if (*(unsigned char *)(a1 + 40)) {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + v6) + 4 * *(int *)(a1 + 44)) = 1065353216;
      }
      memmove(*(void **)(*(void *)(a1 + 88) + v6), *(const void **)(*a2 + v6), 4 * *(int *)(a1 + 48));
      v6 += 8;
    }
    while (v7 != v6);
  }
  VVector<float>::print(*(float ***)(a1 + 64), "FullLayer input: ", *(_DWORD *)(a1 + 60));
  uint64_t v8 = *(float ***)(a1 + 88);
  int v9 = *(_DWORD *)(a1 + 48);

  VVector<float>::print(v8, "FullLayer output[0]: ", v9);
}

void Direct::backward(uint64_t a1, uint64_t a2, uint64_t a3, float ***a4, int a5)
{
  if (a5 <= 0)
  {
    int v9 = *(float ***)(a1 + 112);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = *a4;
    int v9 = *(float ***)(a1 + 112);
    do
    {
      v9[v7] = v8[v7];
      ++v7;
    }
    while (a5 != v7);
  }
  VVector<float>::print(v9, "Direct backward: dxs err to percolate up: ", *(_DWORD *)(a1 + 60));
  unint64_t v10 = *a4;
  int v11 = *(_DWORD *)(a1 + 48);

  VVector<float>::print(v10, "Direct backward: deltas input err : ", v11);
}

uint64_t Direct::noutputs(Direct *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t Direct::ninputs(Direct *this)
{
  return *((unsigned int *)this + 15);
}

uint64_t Direct::weightsAreNaN(Direct *this)
{
  return 0;
}

uint64_t Direct::inputDeltas(Direct *this)
{
  return (uint64_t)this + 112;
}

void Direct::deltas(Direct *this)
{
}

uint64_t Direct::outputs(Direct *this)
{
  return (uint64_t)this + 88;
}

uint64_t Direct::inputs(Direct *this)
{
  return (uint64_t)this + 64;
}

void Direct::targets(Direct *this)
{
}

void RecurrentLayer<float>::init(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 240);
  if (v1) {
    BOOL v2 = !*(unsigned char *)(v1 + 20) && *(_DWORD *)(v1 + 40) == 1 && *(_DWORD *)(v1 + 44) == 1;
  }
  else {
    BOOL v2 = 1;
  }
  int v3 = *(_DWORD *)(a1 + 48);
  int v4 = *(_DWORD *)(a1 + 44) + *(unsigned __int8 *)(a1 + 40);
  *(_DWORD *)(a1 + 52) = v4;
  if (v2)
  {
    v4 += v3;
    *(_DWORD *)(a1 + 52) = v4;
  }
  *(_DWORD *)(a1 + 56) = v3 * v4;
  operator new[]();
}

void sub_1928F3FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

float RecurrentLayer<float>::probability(uint64_t a1, int a2, int a3)
{
  return *(float *)(*(void *)(*(void *)(a1 + 112) + 8 * a2) + 4 * a3);
}

uint64_t RecurrentLayer<float>::outputDeltas(uint64_t a1)
{
  return a1 + 160;
}

void RecurrentLayer<float>::~RecurrentLayer(void *a1)
{
  RecurrentLayer<float>::~RecurrentLayer(a1);

  JUMPOUT(0x192FF16B0);
}

void *RecurrentLayer<float>::~RecurrentLayer(void *a1)
{
  *a1 = &unk_1EE318608;
  RecurrentLayer<float>::cleanupAllBuffers((uint64_t)a1);
  PTMutex::~PTMutex((PTMutex *)(a1 + 37));
  BOOL v2 = (void *)a1[34];
  if (v2)
  {
    a1[35] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[31];
  if (v3)
  {
    a1[32] = v3;
    operator delete(v3);
  }
  int v4 = (void *)a1[23];
  if (v4)
  {
    a1[24] = v4;
    operator delete(v4);
  }
  float v5 = (void *)a1[20];
  if (v5)
  {
    a1[21] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[17];
  if (v6)
  {
    a1[18] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[14];
  if (v7)
  {
    a1[15] = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)a1[11];
  if (v8)
  {
    a1[12] = v8;
    operator delete(v8);
  }
  *a1 = &unk_1EE3182B8;
  int v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t RecurrentLayer<float>::cleanupAllBuffers(uint64_t result)
{
  uint64_t v1 = (void *)result;
  uint64_t v2 = *(void *)(result + 248);
  uint64_t v3 = *(void *)(result + 256);
  if (v3 == v2)
  {
    uint64_t v2 = *(void *)(result + 256);
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      float result = *(void *)(v2 + 8 * v4);
      if (result)
      {
        float result = MEMORY[0x192FF1690](result, 0x1000C8052888210);
        uint64_t v2 = v1[31];
        uint64_t v3 = v1[32];
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
  }
  uint64_t v5 = v1[34];
  uint64_t v6 = v1[35];
  if (v6 == v5)
  {
    uint64_t v5 = v1[35];
  }
  else
  {
    unint64_t v7 = 0;
    do
    {
      float result = *(void *)(v5 + 8 * v7);
      if (result)
      {
        float result = MEMORY[0x192FF1690](result, 0x1000C8052888210);
        uint64_t v5 = v1[34];
        uint64_t v6 = v1[35];
      }
      ++v7;
    }
    while (v7 < (v6 - v5) >> 3);
    uint64_t v2 = v1[31];
  }
  v1[32] = v2;
  v1[35] = v5;
  return result;
}

float RecurrentLayer<float>::log2Probability(uint64_t a1, uint64_t *a2, int a3)
{
  if (a3 < 1) {
    return 0.0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  uint64_t v5 = *a2;
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v7 = a3;
  float v8 = 0.0;
  do
  {
    if ((int)v4 < 1)
    {
      int v9 = 0;
    }
    else
    {
      int v9 = 0;
      uint64_t v10 = 0;
      float v12 = 1.1755e-38;
      do
      {
        uint64_t v11 = *(void *)(v5 + 8 * v3);
        if (*(float *)(v11 + 4 * v10) > v12)
        {
          int v9 = v10;
          float v12 = *(float *)(v11 + 4 * v10);
        }
        ++v10;
      }
      while (v4 != v10);
    }
    float v13 = *(float *)(*(void *)(v6 + 8 * v3) + 4 * v9);
    if (v13 <= 1.0e-10) {
      float v14 = 99.0;
    }
    else {
      float v14 = -log2f(v13);
    }
    float v8 = v8 + v14;
    ++v3;
  }
  while (v3 != v7);
  return v8;
}

uint64_t RecurrentLayer<float>::computeError(uint64_t result, uint64_t *a2, uint64_t *a3, int a4, int *a5)
{
  if (a4 >= 1)
  {
    int v5 = *a5;
    uint64_t v6 = *(void *)(result + 112);
    uint64_t v7 = *a2;
    uint64_t v8 = *a3;
    uint64_t v9 = a4;
    uint64_t v10 = *(unsigned int *)(result + 48);
    do
    {
      if ((int)v10 >= 1)
      {
        int v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = (v9 - 1);
        float v14 = *(float **)(v6 + 8 * v13);
        float v15 = 1.1755e-38;
        do
        {
          if (v14[v12] > v15)
          {
            int v11 = v12;
            float v15 = v14[v12];
          }
          ++v12;
        }
        while (v10 != v12);
        int v16 = 0;
        uint64_t v17 = 0;
        float v18 = *(float **)(v7 + 8 * v13);
        float v19 = 1.1755e-38;
        do
        {
          if (v18[v17] > v19)
          {
            int v16 = v17;
            float v19 = v18[v17];
          }
          ++v17;
        }
        while (v10 != v17);
        if (v11 == v16)
        {
          uint64_t v10 = v10;
        }
        else
        {
          *a5 = ++v5;
          uint64_t v10 = *(unsigned int *)(result + 48);
        }
        if ((int)v10 >= 1)
        {
          uint64_t v20 = *(float **)(v8 + 8 * v13);
          uint64_t v21 = v10;
          do
          {
            float v22 = *v18++;
            float v23 = v22;
            float v24 = *v14++;
            *v20++ = v23 - v24;
            --v21;
          }
          while (v21);
        }
      }
    }
    while (v9-- > 1);
  }
  return result;
}

uint64_t RecurrentLayer<float>::updateFrom(uint64_t a1, void *lpsrc, float a3)
{
  if (*(_DWORD *)(a1 + 368)) {
    exitFramework(1);
  }
  if (!v5) {
    __cxa_bad_cast();
  }
  uint64_t v6 = v5;
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 304));
  vDSP_Length v7 = *(int *)(a1 + 56);
  float __B = a3;
  vDSP_vsma(v6[10], 1, &__B, *(const float **)(a1 + 64), 1, *(float **)(a1 + 64), 1, v7);
  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 304));
}

char *RecurrentLayer<float>::setMaster(uint64_t a1, void *lpsrc)
{
  if (*(_DWORD *)(a1 + 368) != 1) {
    exitFramework(1);
  }
  if (!result) {
    __cxa_bad_cast();
  }
  *(void *)(a1 + 376) = result + 64;
  return result;
}

void RecurrentLayer<float>::forward(uint64_t a1, void *a2, uint64_t a3, int a4, uint64_t a5)
{
  id v54[2] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a1 + 240);
  if (v8)
  {
    if (*(float *)(v8 + 604) <= 0.0) {
      float v9 = 50.0;
    }
    else {
      float v9 = *(float *)(v8 + 604);
    }
    BOOL v47 = !*(unsigned char *)(v8 + 20) && *(_DWORD *)(v8 + 40) == 1 && *(_DWORD *)(v8 + 44) == 1;
  }
  else
  {
    BOOL v47 = 1;
    float v9 = 50.0;
  }
  BOOL v10 = *(unsigned char *)(a1 + 232) != 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Recurrent");
  char v11 = !v10;
  if (!a5) {
    char v11 = 1;
  }
  if ((v11 & 1) == 0) {
    exitFramework(34);
  }
  unsigned int v12 = a5 != 0;
  if (SHIBYTE(v53) < 0) {
    operator delete(__p);
  }
  std::string __p = 0;
  long long v53 = 0uLL;
  i2s(&v50);
  uint64_t v13 = std::string::insert(&v50, 0, "RNN Forward W_i[");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  float v15 = std::string::append(&v51, "] W:");
  int v16 = (void *)v15->__r_.__value_.__r.__words[0];
  v54[0] = v15->__r_.__value_.__l.__size_;
  *(void *)((char *)v54 + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
  char v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v53) < 0) {
    operator delete(__p);
  }
  std::string __p = v16;
  *(void *)&long long v53 = v54[0];
  *(void *)((char *)&v53 + 7) = *(void *)((char *)v54 + 7);
  HIBYTE(v53) = v17;
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (v53 >= 0) {
    p_p = (char *)&__p;
  }
  else {
    p_p = (char *)__p;
  }
  MMatrix<float>::print(*(float ***)(a1 + 376), p_p, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
  i2s(&v50);
  float v19 = std::string::insert(&v50, 0, "RNN Forward R_i[");
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  uint64_t v21 = std::string::append(&v51, "] R:");
  float v22 = (void *)v21->__r_.__value_.__r.__words[0];
  v54[0] = v21->__r_.__value_.__l.__size_;
  *(void *)((char *)v54 + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
  char v23 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v53) < 0) {
    operator delete(__p);
  }
  std::string __p = v22;
  *(void *)&long long v53 = v54[0];
  *(void *)((char *)&v53 + 7) = *(void *)((char *)v54 + 7);
  HIBYTE(v53) = v23;
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  float v24 = *(float ***)(a1 + 384);
  if (v24)
  {
    if (v53 >= 0) {
      uint64_t v25 = (char *)&__p;
    }
    else {
      uint64_t v25 = (char *)__p;
    }
    MMatrix<float>::print(v24, v25, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 48));
  }
  int v26 = a4 & 0xFFFFFF;
  if ((a4 & 0xFFFFFFu) > v12)
  {
    do
    {
      if (*(unsigned char *)(a1 + 232)) {
        int v27 = v26 + ~v12;
      }
      else {
        int v27 = v12;
      }
      if (*(unsigned char *)(a1 + 232)) {
        int v28 = 1;
      }
      else {
        int v28 = -1;
      }
      if (*(unsigned char *)(a1 + 232)) {
        BOOL v29 = v27 >= v26 - 1;
      }
      else {
        BOOL v29 = v27 < 1;
      }
      uint64_t v30 = v27;
      bzero(*(void **)(*(void *)(a1 + 88) + 8 * v27), 4 * *(int *)(a1 + 52));
      uint64_t v31 = *(void *)(a1 + 88);
      int v32 = *(_DWORD *)(a1 + 44);
      if (v32 >= 1)
      {
        unsigned __int8 v33 = *(int **)(*a2 + 8 * v27);
        char v34 = *(_DWORD **)(v31 + 8 * v27);
        uint64_t v35 = *(unsigned int *)(a1 + 44);
        do
        {
          int v36 = *v33++;
          *v34++ = v36;
          --v35;
        }
        while (v35);
      }
      int v37 = v27 + v28;
      if (v47 && !v29)
      {
        uint64_t v38 = *(unsigned int *)(a1 + 48);
        if ((int)v38 >= 1)
        {
          int v39 = *(int **)(*(void *)(a1 + 112) + 8 * v37);
          int v40 = (_DWORD *)(*(void *)(v31 + 8 * v30) + 4 * v32);
          do
          {
            int v41 = *v39++;
            *v40++ = v41;
            --v38;
          }
          while (v38);
        }
      }
      if (*(unsigned char *)(a1 + 40)) {
        *(_DWORD *)(*(void *)(v31 + 8 * v30) + 4 * *(int *)(a1 + 52) - 4) = 1065353216;
      }
      VVector<float>::print((float **)(*(void *)(a1 + 112) + 8 * v37), "RNN output t-1 : ", *(_DWORD *)(a1 + 48));
      VVector<float>::print((float **)(*(void *)(a1 + 88) + 8 * v30), "RNN input t: ", *(_DWORD *)(a1 + 52));
      MMatrix<float>::print((float **)(a1 + 64), "RNN weights: ", *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 10);
      cblas_sgemv(CblasRowMajor, CblasNoTrans, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), 1.0, **(const float ***)(a1 + 376), *(_DWORD *)(a1 + 52), *(const float **)(*(void *)(a1 + 88) + 8 * v30), 1, 0.0, *(float **)(a1 + 216), 1);
      VVector<float>::print((float **)(a1 + 216), "RNN tmp #1: ", *(_DWORD *)(a1 + 48));
      if (!v47 && !v29) {
        cblas_sgemv(CblasRowMajor, CblasNoTrans, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 48), 1.0, **(const float ***)(a1 + 384), *(_DWORD *)(a1 + 48), *(const float **)(*(void *)(a1 + 112) + 8 * v37), 1, 1.0, *(float **)(a1 + 216), 1);
      }
      uint64_t v42 = *(void *)(a1 + 240);
      float v43 = *(float32x4_t ***)(a1 + 392);
      int v44 = *(_DWORD *)(a1 + 48);
      std::string::basic_string[abi:ne180100]<0>(&v48, "rnn bias ");
      if (v42 && *(unsigned char *)(v42 + 244)) {
        VVector<float>::add<float>((float32x4_t **)(a1 + 216), v43, v44);
      }
      if (v49 < 0) {
        operator delete(v48);
      }
      VVector<float>::print((float **)(a1 + 216), "RNN tmp #2 after: ", *(_DWORD *)(a1 + 48));
      vDSP_Length v45 = *(int *)(a1 + 48);
      *(float *)&v51.__r_.__value_.__l.__data_ = -v9;
      *(float *)&v50.__r_.__value_.__l.__data_ = v9;
      vDSP_vclip(*(const float **)(a1 + 216), 1, (const float *)&v51, (const float *)&v50, *(float **)(a1 + 216), 1, v45);
      VVector<float>::print((float **)(a1 + 216), "RNN tmp #3: ", *(_DWORD *)(a1 + 48));
      memmove(*(void **)(*(void *)(a1 + 184) + 8 * v30), *(const void **)(a1 + 216), 4 * *(int *)(a1 + 48));
      VVector<float>::applyForwardActivation((float **)(*(void *)(a1 + 112) + 8 * v30), *(float **)(a1 + 216), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 208));
      VVector<float>::print((float **)(*(void *)(a1 + 112) + 8 * v30), "RNN out: ", *(_DWORD *)(a1 + 48));
      ++v12;
    }
    while (v12 != v26);
  }
  if (SHIBYTE(v53) < 0) {
    operator delete(__p);
  }
}

void sub_1928F4ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

void RecurrentLayer<float>::backward(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5)
{
  if ((**(uint64_t (***)(uint64_t))a1)(a1)) {
    goto LABEL_8;
  }
  if (a5 > 0)
  {
    int v8 = 0;
    int v9 = a5 - 1;
    do
    {
      if (*(unsigned char *)(a1 + 232)) {
        int v10 = v8;
      }
      else {
        int v10 = v9;
      }
      VVector<float>::applyBackwardActivationDerivative((void **)(a1 + 216), *(float **)(*(void *)(a1 + 184) + 8 * v10), *(float **)(*a4 + 8 * v10), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 208));
      cblas_sgemv(CblasRowMajor, CblasTrans, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), 1.0, **(const float ***)(a1 + 376), *(_DWORD *)(a1 + 52), *(const float **)(a1 + 216), 1, 0.0, *(float **)(*(void *)(a1 + 136) + 8 * v10), 1);
      uint64_t v11 = *(void *)(a1 + 136);
      vDSP_Length v12 = *(int *)(a1 + 52);
      LODWORD(__B) = -1035468800;
      LODWORD(__C.__r_.__value_.__l.__data_) = 1112014848;
      vDSP_vclip(*(const float **)(v11 + 8 * v10), 1, (const float *)&__B, (const float *)&__C, *(float **)(v11 + 8 * v10), 1, v12);
      --v9;
      ++v8;
    }
    while (v9 != -1);
LABEL_8:
    bzero(*(void **)(a1 + 80), 4 * *(int *)(a1 + 56));
    if (a5 >= 1)
    {
      int v13 = 0;
      do
      {
        --a5;
        if (*(unsigned char *)(a1 + 232)) {
          int v14 = v13;
        }
        else {
          int v14 = a5;
        }
        uint64_t v15 = v14;
        VVector<float>::sumOuterProd(*a4 + 8 * v14, *(void *)(a1 + 88) + 8 * v14, *(void *)(a1 + 80), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52));
        if (*(unsigned char *)(a1 + 40)) {
          *(_DWORD *)(*(void *)(*(void *)(a1 + 136) + 8 * v15) + 4 * *(int *)(a1 + 52) - 4) = 1065353216;
        }
        std::string::basic_string[abi:ne180100]<0>(&v31, "FullLayer DW: t[");
        i2s(v29);
        if ((v30 & 0x80u) == 0) {
          int v16 = v29;
        }
        else {
          int v16 = (void **)v29[0];
        }
        if ((v30 & 0x80u) == 0) {
          std::string::size_type v17 = v30;
        }
        else {
          std::string::size_type v17 = (std::string::size_type)v29[1];
        }
        float v18 = std::string::append(&v31, (const std::string::value_type *)v16, v17);
        long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        __C.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__C.__r_.__value_.__l.__data_ = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(__p, "] ");
        if ((v28 & 0x80u) == 0) {
          long long v20 = __p;
        }
        else {
          long long v20 = (void **)__p[0];
        }
        if ((v28 & 0x80u) == 0) {
          std::string::size_type v21 = v28;
        }
        else {
          std::string::size_type v21 = (std::string::size_type)__p[1];
        }
        float v22 = std::string::append(&__C, (const std::string::value_type *)v20, v21);
        long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        int64_t v34 = v22->__r_.__value_.__r.__words[2];
        long long __B = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        if ((char)v28 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(__C.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__C.__r_.__value_.__l.__data_);
        }
        if ((char)v30 < 0) {
          operator delete(v29[0]);
        }
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v31.__r_.__value_.__l.__data_);
        }
        if (v34 >= 0) {
          p_B = (char *)&__B;
        }
        else {
          p_B = (char *)__B;
        }
        MMatrix<float>::print((float **)(a1 + 80), p_B, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), 10);
        if (SHIBYTE(v34) < 0) {
          operator delete((void *)__B);
        }
        ++v13;
      }
      while (a5 > 0);
    }
    return;
  }
  uint64_t v25 = *(void **)(a1 + 80);
  size_t v26 = 4 * *(int *)(a1 + 56);

  bzero(v25, v26);
}

void sub_1928F4E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void RecurrentLayer<float>::update()
{
}

uint64_t RecurrentLayer<float>::noutputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t RecurrentLayer<float>::ninputs(uint64_t a1)
{
  return *(_DWORD *)(a1 + 44) + *(unsigned __int8 *)(a1 + 40);
}

void RecurrentLayer<float>::allocAllBuffers(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "RecurrentLayer from allocAll");
  (*(void (**)(uint64_t, void **, void, float))(*(void *)a1 + 392))(a1, __p, 0, -0.44);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1928F5000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RecurrentLayer<float>::unsetSpecialBidir(uint64_t result)
{
  *(unsigned char *)(result + 42) = 0;
  return result;
}

uint64_t RecurrentLayer<float>::setSpecialBidir(uint64_t result)
{
  *(unsigned char *)(result + 42) = 1;
  return result;
}

uint64_t RecurrentLayer<float>::setWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(v2 - 16);
  *(void *)(a2 + 8) = v2 - 16;
  *(void *)(a1 + 64) = v3;
  uint64_t result = a1 + 64;
  *(void *)(result + 312) = result;
  return result;
}

char *RecurrentLayer<float>::getWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = **(void **)(a1 + 376);
  double v4 = *(double *)(a1 + 48);
  int v5 = *(uint64_t **)(a2 + 8);
  if ((unint64_t)v5 >= *(void *)(a2 + 16))
  {
    uint64_t result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v3, v4);
  }
  else
  {
    uint64_t *v5 = v3;
    *((double *)v5 + 1) = v4;
    uint64_t result = (char *)(v5 + 2);
  }
  *(void *)(a2 + 8) = result;
  return result;
}

void RecurrentLayer<float>::clearState(uint64_t a1, void *a2, int *a3)
{
  double v4 = (int *)(*a2 + 16 * *a3);
  bzero(**((void ***)v4 + 1), 4 * *v4);
  ++*a3;
}

void RecurrentLayer<float>::restoreState(uint64_t a1, void *a2, int a3, int *a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v7 = *a4;
  *a4 = v7 + 1;
  memmove(*(void **)(v6 + 8 * a3), **(const void ***)(*a2 + 16 * v7 + 8), 4 * *(int *)(a1 + 48));
  sprintf(v8, "RNN restore startTimIdx = %d", a3);
  VVector<float>::print((float **)(*(void *)(a1 + 112) + 8 * a3), v8, *(_DWORD *)(a1 + 48));
}

void *RecurrentLayer<float>::saveState(uint64_t a1, uint64_t *a2, int a3, int *a4)
{
  uint64_t v5 = *(int *)(a1 + 48);
  uint64_t v6 = *a2;
  *(_DWORD *)(v6 + 16 * *a4) = v5;
  uint64_t result = memmove(**(void ***)(v6 + 16 * *a4 + 8), *(const void **)(*(void *)(a1 + 112) + 8 * a3), 4 * v5);
  ++*a4;
  return result;
}

void RecurrentLayer<float>::allocInitialState()
{
}

void sub_1928F531C(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

void RecurrentLayer<float>::addGradient(uint64_t a1, void *lpsrc)
{
  double v4 = *(const float ***)(a1 + 376);
  vDSP_Length v5 = *(int *)(a1 + 52) * (uint64_t)*(int *)(a1 + 48);
  float __B = 1.0;
  vDSP_vsma(v3[8], 1, &__B, *v4, 1, (float *)*v4, 1, v5);
}

void RecurrentLayer<float>::compareModels(int a1, void *lpsrc, const void *a3)
{
  if (lpsrc) {
  if (a3)
  }
  {
  }
}

float RecurrentLayer<float>::subtractModels(uint64_t a1, void *lpsrc, const void *a3)
{
  if (lpsrc)
  {
    if (a3)
    {
LABEL_3:
      goto LABEL_6;
    }
  }
  else
  {
    vDSP_Length v5 = 0;
    if (a3) {
      goto LABEL_3;
    }
  }
  uint64_t v7 = 0;
LABEL_6:
  uint64_t v8 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
  if ((int)v8 >= 1)
  {
    uint64_t v9 = (float *)v7[8];
    int v10 = (float *)*((void *)v5 + 8);
    uint64_t v11 = **(float ***)(a1 + 376);
    do
    {
      float v12 = *v9++;
      float v13 = v12;
      float v14 = *v10++;
      float result = v13 - v14;
      *v11++ = result;
      --v8;
    }
    while (v8);
  }
  return result;
}

void RecurrentLayer<float>::write(uint64_t a1, FILE *__stream, __sFILE *a3, int a4, int a5)
{
  NeuralNetwork::writeDimensions(__stream, a3, (int *)*(unsigned int *)(a1 + 48), *(_DWORD *)(a1 + 52));
  if (a4 >= 1)
  {
    int __ptr = *(_DWORD *)(a1 + 208);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    LODWORD(a3->_p) += 4;
  }
  uint64_t v10 = *(void *)(a1 + 376);

  MMatrix<float>::write(v10, __stream, (int *)a3, a5);
}

uint64_t RecurrentLayer<float>::read(uint64_t a1, NeuralNetwork *this, int *a3, int *a4, int *a5)
{
  int v5 = (int)a4;
  *(void *)float v18 = 0;
  NeuralNetwork::readDimensions((uint64_t *)this, (ReadOnlyFile *)&v18[4], v18, a4, a5);
  if (v5 >= 1)
  {
    uint64_t v9 = *((int *)this + 18);
    uint64_t v10 = (int *)(*(void *)this + v9);
    if ((unint64_t)v10 <= *(void *)this + *((void *)this + 1) - 4)
    {
      int v11 = *v10;
      *((_DWORD *)this + 18) = v9 + 4;
    }
    else
    {
      int v11 = 0;
    }
    *(_DWORD *)(a1 + 208) = v11;
  }
  float v12 = (float **)*(unsigned int *)(a1 + 48);
  if (v12 != *(_DWORD *)&v18[4] || (int v13 = *(_DWORD *)(a1 + 52), v13 != *(_DWORD *)v18)) {
    exitFramework(3);
  }
  float v14 = *(char **)(a1 + 376);
  int v15 = *a3;
  int v16 = *(unsigned __int8 *)(a1 + 61);

  return MMatrix<float>::read(v14, (uint64_t)this, v15, v16, v12, v13);
}

uint64_t RecurrentLayer<float>::weightsAreNaN()
{
  return 0;
}

uint64_t RecurrentLayer<float>::inputDeltas(uint64_t a1)
{
  return a1 + 136;
}

uint64_t RecurrentLayer<float>::deltas(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 376))();
}

uint64_t RecurrentLayer<float>::outputs(uint64_t a1)
{
  return a1 + 112;
}

uint64_t RecurrentLayer<float>::inputs(uint64_t a1)
{
  return a1 + 88;
}

void RecurrentLayer<float>::targets()
{
}

void Stacked::~Stacked(Stacked *this)
{
  Stacked::~Stacked(this);

  JUMPOUT(0x192FF16B0);
}

{
  void *v2;
  void *v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  *(void *)this = &unk_1EE323698;
  double v4 = (char *)this + 48;
  uint64_t v2 = (void *)*((void *)this + 6);
  uint64_t v3 = (void *)*((void *)v4 + 1);
  if (v3 == v2)
  {
    uint64_t v2 = v3;
    if (v3)
    {
LABEL_7:
      *((void *)this + 7) = v2;
      operator delete(v2);
    }
  }
  else
  {
    int v5 = 0;
    do
    {
      uint64_t v6 = *((void *)v2 + v5);
      if (v6)
      {
        (*(void (**)(void))(*(void *)v6 + 368))(*((void *)v2 + v5));
        uint64_t v2 = (void *)*((void *)this + 6);
        uint64_t v3 = (void *)*((void *)this + 7);
      }
      ++v5;
    }
    while (v5 < ((unsigned char *)v3 - (unsigned char *)v2) >> 3);
    if (v2) {
      goto LABEL_7;
    }
  }
  *(void *)this = &unk_1EE3182B8;
  uint64_t v7 = (void *)*((void *)this + 1);
  if (v7)
  {
    *((void *)this + 2) = v7;
    operator delete(v7);
  }
}

uint64_t Stacked::log2Probability(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 56) - 8) + 352))();
}

uint64_t Stacked::computeError(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 56) - 8) + 344))();
}

void *Stacked::updateFrom(Stacked *this, NeuralNetwork *lpsrc, float a3, float a4, uint64_t a5)
{
  if (!result) {
    __cxa_bad_cast();
  }
  uint64_t v11 = (uint64_t)result;
  if (*((float *)this + 8) != a3) {
    *((float *)this + 8) = a3;
  }
  if (*((float *)lpsrc + 8) != a3) {
    *((float *)lpsrc + 8) = a3;
  }
  uint64_t v12 = *((void *)this + 6);
  if (*((void *)this + 7) != v12)
  {
    unint64_t v13 = 0;
    do
    {
      float result = (void *)(*(uint64_t (**)(void, void, uint64_t, float, float))(**(void **)(v12 + 8 * v13)
                                                                                        + 336))(*(void *)(v12 + 8 * v13), *(void *)(*(void *)(v11 + 48) + 8 * v13), a5, a3, a4);
      ++v13;
      uint64_t v12 = *((void *)this + 6);
    }
    while (v13 < (*((void *)this + 7) - v12) >> 3);
  }
  return result;
}

void *Stacked::setMaster(Stacked *this, NeuralNetwork *lpsrc)
{
  if (!result) {
    __cxa_bad_cast();
  }
  uint64_t v4 = *((void *)this + 6);
  if (*((void *)this + 7) != v4)
  {
    uint64_t v5 = (uint64_t)result;
    unint64_t v6 = 0;
    do
    {
      float result = (void *)(*(uint64_t (**)(void, void))(**(void **)(v4 + 8 * v6) + 328))(*(void *)(v4 + 8 * v6), *(void *)(*(void *)(v5 + 48) + 8 * v6));
      ++v6;
      uint64_t v4 = *((void *)this + 6);
    }
    while (v6 < (*((void *)this + 7) - v4) >> 3);
  }
  return result;
}

uint64_t Stacked::reverseBackward(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = (*(void *)(result + 56) - *(void *)(result + 48)) >> 3;
  uint64_t v6 = (v5 - 1);
  if ((int)v5 - 1 >= 0)
  {
    uint64_t v11 = result;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = *(void *)(v11 + 48);
      if (v12)
      {
        uint64_t v14 = (*(uint64_t (**)(void))(**(void **)(v13 + 8 * v6 + 8) + 48))(*(void *)(v13 + 8 * v6 + 8));
        uint64_t v13 = *(void *)(v11 + 48);
      }
      else
      {
        uint64_t v14 = a4;
      }
      float result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(v13 + 8 * v6)
                                                                                     + 320))(*(void *)(v13 + 8 * v6), a2, a3, v14, a5);
      ++v12;
    }
    while (v6-- > 0);
  }
  return result;
}

uint64_t Stacked::reverseForward(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(result + 48);
  if (*(void *)(result + 56) != v6)
  {
    uint64_t v12 = result;
    unint64_t v13 = 0;
    do
    {
      if (v13)
      {
        uint64_t v14 = (*(uint64_t (**)(void))(**(void **)(v6 + 8 * v13 - 8) + 32))(*(void *)(v6 + 8 * v13 - 8));
        uint64_t v6 = *(void *)(v12 + 48);
      }
      else
      {
        uint64_t v14 = a2;
      }
      float result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(v6 + 8 * v13)
                                                                                              + 312))(*(void *)(v6 + 8 * v13), v14, a3, a4, a5, a6);
      ++v13;
      uint64_t v6 = *(void *)(v12 + 48);
    }
    while (v13 < (*(void *)(v12 + 56) - v6) >> 3);
  }
  return result;
}

uint64_t Stacked::forward(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = *(void *)(result + 48);
  if (*(void *)(result + 56) != v7)
  {
    uint64_t v14 = result;
    unint64_t v15 = 0;
    do
    {
      if (v15)
      {
        uint64_t v16 = (*(uint64_t (**)(void))(**(void **)(v7 + 8 * v15 - 8) + 32))(*(void *)(v7 + 8 * v15 - 8));
        uint64_t v7 = *(void *)(v14 + 48);
      }
      else
      {
        uint64_t v16 = a2;
      }
      float result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(v7 + 8 * v15) + 304))(*(void *)(v7 + 8 * v15), v16, a3, a4, a5, a6, a7);
      ++v15;
      uint64_t v7 = *(void *)(v14 + 48);
    }
    while (v15 < (*(void *)(v14 + 56) - v7) >> 3);
  }
  return result;
}

uint64_t Stacked::backward(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = (*(void *)(result + 56) - *(void *)(result + 48)) >> 3;
  uint64_t v6 = (v5 - 1);
  if ((int)v5 - 1 >= 0)
  {
    uint64_t v11 = result;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = *(void *)(v11 + 48);
      if (v12)
      {
        uint64_t v14 = (*(uint64_t (**)(void))(**(void **)(v13 + 8 * v6 + 8) + 48))(*(void *)(v13 + 8 * v6 + 8));
        uint64_t v13 = *(void *)(v11 + 48);
      }
      else
      {
        uint64_t v14 = a4;
      }
      float result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(v13 + 8 * v6)
                                                                                     + 296))(*(void *)(v13 + 8 * v6), a2, a3, v14, a5);
      ++v12;
    }
    while (v6-- > 0);
  }
  return result;
}

uint64_t Stacked::update(uint64_t this, float a2, float a3)
{
  uint64_t v3 = *(void *)(this + 48);
  if (*(void *)(this + 56) != v3)
  {
    uint64_t v6 = this;
    unint64_t v7 = 0;
    do
    {
      this = (*(uint64_t (**)(void, float, float))(**(void **)(v3 + 8 * v7) + 288))(*(void *)(v3 + 8 * v7), a2, a3);
      ++v7;
      uint64_t v3 = *(void *)(v6 + 48);
    }
    while (v7 < (*(void *)(v6 + 56) - v3) >> 3);
  }
  return this;
}

uint64_t Stacked::setPredictionMode(uint64_t this, uint64_t a2)
{
  uint64_t v2 = *(void *)(this + 48);
  if (*(void *)(this + 56) != v2)
  {
    uint64_t v4 = this;
    unint64_t v5 = 0;
    do
    {
      this = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 8 * v5) + 280))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 48);
    }
    while (v5 < (*(void *)(v4 + 56) - v2) >> 3);
  }
  return this;
}

uint64_t Stacked::noutputs(Stacked *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 7) - 8) + 272))();
}

uint64_t Stacked::ninputs(Stacked *this)
{
  return (*(uint64_t (**)(void))(***((void ***)this + 6) + 264))();
}

uint64_t Stacked::cleanupAllBuffers(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 48);
  if (*(void *)(this + 56) != v1)
  {
    uint64_t v2 = this;
    unint64_t v3 = 0;
    do
    {
      this = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 208))(*(void *)(v1 + 8 * v3));
      ++v3;
      uint64_t v1 = *(void *)(v2 + 48);
    }
    while (v3 < (*(void *)(v2 + 56) - v1) >> 3);
  }
  return this;
}

uint64_t Stacked::allocAllBuffers(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 48);
  if (*(void *)(this + 56) != v1)
  {
    uint64_t v2 = this;
    unint64_t v3 = 0;
    do
    {
      this = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 200))(*(void *)(v1 + 8 * v3));
      ++v3;
      uint64_t v1 = *(void *)(v2 + 48);
    }
    while (v3 < (*(void *)(v2 + 56) - v1) >> 3);
  }
  return this;
}

uint64_t Stacked::unsetSpecialBidir(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 48);
  if (*(void *)(this + 56) != v1)
  {
    uint64_t v2 = this;
    unint64_t v3 = 0;
    do
    {
      this = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 192))(*(void *)(v1 + 8 * v3));
      ++v3;
      uint64_t v1 = *(void *)(v2 + 48);
    }
    while (v3 < (*(void *)(v2 + 56) - v1) >> 3);
  }
  return this;
}

uint64_t Stacked::setSpecialBidir(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 48);
  if (*(void *)(this + 56) != v1)
  {
    uint64_t v2 = this;
    unint64_t v3 = 0;
    do
    {
      this = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 184))(*(void *)(v1 + 8 * v3));
      ++v3;
      uint64_t v1 = *(void *)(v2 + 48);
    }
    while (v3 < (*(void *)(v2 + 56) - v1) >> 3);
  }
  return this;
}

uint64_t Stacked::setWeightMatrices(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 48);
  if (*(void *)(result + 56) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      float result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 8 * v5) + 176))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 48);
    }
    while (v5 < (*(void *)(v4 + 56) - v2) >> 3);
  }
  return result;
}

uint64_t Stacked::getWeightMatrices(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 48);
  if (*(void *)(result + 56) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      float result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 8 * v5) + 168))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 48);
    }
    while (v5 < (*(void *)(v4 + 56) - v2) >> 3);
  }
  return result;
}

uint64_t Stacked::resetForNewBatch(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 48);
  if (*(void *)(this + 56) != v1)
  {
    uint64_t v2 = this;
    unint64_t v3 = 0;
    do
    {
      this = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 160))(*(void *)(v1 + 8 * v3));
      ++v3;
      uint64_t v1 = *(void *)(v2 + 48);
    }
    while (v3 < (*(void *)(v2 + 56) - v1) >> 3);
  }
  return this;
}

uint64_t Stacked::clearState(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 48);
  if (*(void *)(result + 56) != v3)
  {
    uint64_t v6 = result;
    unint64_t v7 = 0;
    do
    {
      float result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v3 + 8 * v7) + 152))(*(void *)(v3 + 8 * v7), a2, a3);
      ++v7;
      uint64_t v3 = *(void *)(v6 + 48);
    }
    while (v7 < (*(void *)(v6 + 56) - v3) >> 3);
  }
  return result;
}

uint64_t Stacked::restoreState(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 48);
  if (*(void *)(result + 56) != v4)
  {
    uint64_t v8 = result;
    unint64_t v9 = 0;
    do
    {
      float result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v4 + 8 * v9) + 144))(*(void *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      uint64_t v4 = *(void *)(v8 + 48);
    }
    while (v9 < (*(void *)(v8 + 56) - v4) >> 3);
  }
  return result;
}

uint64_t Stacked::saveState(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 48);
  if (*(void *)(result + 56) != v4)
  {
    uint64_t v8 = result;
    unint64_t v9 = 0;
    do
    {
      float result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v4 + 8 * v9) + 136))(*(void *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      uint64_t v4 = *(void *)(v8 + 48);
    }
    while (v9 < (*(void *)(v8 + 56) - v4) >> 3);
  }
  return result;
}

uint64_t Stacked::allocInitialState(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 48);
  if (*(void *)(result + 56) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      float result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 8 * v5) + 128))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 48);
    }
    while (v5 < (*(void *)(v4 + 56) - v2) >> 3);
  }
  return result;
}

uint64_t Stacked::normalizeModel(uint64_t this, float a2)
{
  uint64_t v2 = *(void *)(this + 48);
  if (*(void *)(this + 56) != v2)
  {
    uint64_t v4 = this;
    unint64_t v5 = 0;
    do
    {
      this = (*(uint64_t (**)(void, float))(**(void **)(v2 + 8 * v5) + 120))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 48);
    }
    while (v5 < (*(void *)(v4 + 56) - v2) >> 3);
  }
  return this;
}

uint64_t Stacked::clipModel(uint64_t this, float a2)
{
  uint64_t v2 = *(void *)(this + 48);
  if (*(void *)(this + 56) != v2)
  {
    uint64_t v4 = this;
    unint64_t v5 = 0;
    do
    {
      this = (*(uint64_t (**)(void, float))(**(void **)(v2 + 8 * v5) + 112))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 48);
    }
    while (v5 < (*(void *)(v4 + 56) - v2) >> 3);
  }
  return this;
}

uint64_t Stacked::applyGradient(uint64_t this, const NeuralNetwork *lpsrc)
{
  uint64_t v2 = *(void *)(this + 48);
  if (*(void *)(this + 56) != v2)
  {
    uint64_t v4 = this;
    unint64_t v5 = 0;
    do
    {
      this = (*(uint64_t (**)(void, void))(**(void **)(v2 + 8 * v5) + 104))(*(void *)(v2 + 8 * v5), *(void *)(v6[6] + 8 * v5));
      ++v5;
      uint64_t v2 = *(void *)(v4 + 48);
    }
    while (v5 < (*(void *)(v4 + 56) - v2) >> 3);
  }
  return this;
}

uint64_t Stacked::addGradient(uint64_t this, const NeuralNetwork *lpsrc)
{
  uint64_t v2 = *(void *)(this + 48);
  if (*(void *)(this + 56) != v2)
  {
    uint64_t v4 = this;
    unint64_t v5 = 0;
    do
    {
      this = (*(uint64_t (**)(void, void))(**(void **)(v2 + 8 * v5) + 96))(*(void *)(v2 + 8 * v5), *(void *)(v6[6] + 8 * v5));
      ++v5;
      uint64_t v2 = *(void *)(v4 + 48);
    }
    while (v5 < (*(void *)(v4 + 56) - v2) >> 3);
  }
  return this;
}

uint64_t Stacked::compareModels(uint64_t this, const NeuralNetwork *lpsrc, const NeuralNetwork *a3)
{
  uint64_t v3 = *(void *)(this + 48);
  if (*(void *)(this + 56) != v3)
  {
    uint64_t v6 = this;
    unint64_t v7 = 0;
    do
    {
      if (lpsrc) {
      else
      }
        uint64_t v8 = 0;
      this = (*(uint64_t (**)(void, void, void))(**(void **)(v3 + 8 * v7) + 88))(*(void *)(v3 + 8 * v7), *(void *)(v8[6] + 8 * v7), *(void *)(v9[6] + 8 * v7));
      ++v7;
      uint64_t v3 = *(void *)(v6 + 48);
    }
    while (v7 < (*(void *)(v6 + 56) - v3) >> 3);
  }
  return this;
}

uint64_t Stacked::subtractModels(uint64_t this, const NeuralNetwork *lpsrc, const NeuralNetwork *a3)
{
  uint64_t v3 = *(void *)(this + 48);
  if (*(void *)(this + 56) != v3)
  {
    uint64_t v6 = this;
    unint64_t v7 = 0;
    do
    {
      if (lpsrc) {
      else
      }
        uint64_t v8 = 0;
      this = (*(uint64_t (**)(void, void, void))(**(void **)(v3 + 8 * v7) + 80))(*(void *)(v3 + 8 * v7), *(void *)(v8[6] + 8 * v7), *(void *)(v9[6] + 8 * v7));
      ++v7;
      uint64_t v3 = *(void *)(v6 + 48);
    }
    while (v7 < (*(void *)(v6 + 56) - v3) >> 3);
  }
  return this;
}

uint64_t Stacked::write(uint64_t this, __sFILE *a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(this + 48);
  if (*(void *)(this + 56) != v5)
  {
    uint64_t v10 = this;
    unint64_t v11 = 0;
    do
    {
      this = (*(uint64_t (**)(void, __sFILE *, int *, uint64_t, uint64_t))(**(void **)(v5 + 8 * v11) + 72))(*(void *)(v5 + 8 * v11), a2, a3, a4, a5);
      ++v11;
      uint64_t v5 = *(void *)(v10 + 48);
    }
    while (v11 < (*(void *)(v10 + 56) - v5) >> 3);
  }
  return this;
}

uint64_t Stacked::read(uint64_t this, ReadOnlyFile *a2, const SentenceFileHeader *a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(this + 48);
  if (*(void *)(this + 56) != v4)
  {
    uint64_t v8 = this;
    unint64_t v9 = 0;
    do
    {
      this = (*(uint64_t (**)(void, ReadOnlyFile *, const SentenceFileHeader *, uint64_t))(**(void **)(v4 + 8 * v9) + 64))(*(void *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      uint64_t v4 = *(void *)(v8 + 48);
    }
    while (v9 < (*(void *)(v8 + 56) - v4) >> 3);
  }
  return this;
}

uint64_t Stacked::weightsAreNaN(Stacked *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (*((void *)this + 7) == v1) {
    return 0;
  }
  unint64_t v3 = 0;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 56))(*(void *)(v1 + 8 * v3));
    if (result) {
      break;
    }
    ++v3;
    uint64_t v1 = *((void *)this + 6);
  }
  while (v3 < (*((void *)this + 7) - v1) >> 3);
  return result;
}

uint64_t Stacked::inputDeltas(Stacked *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 7) - 8) + 48))();
}

uint64_t Stacked::deltas(Stacked *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 7) - 8) + 40))();
}

uint64_t Stacked::outputs(Stacked *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 7) - 8) + 32))();
}

uint64_t Stacked::inputs(Stacked *this)
{
  return (*(uint64_t (**)(void))(***((void ***)this + 6) + 24))();
}

uint64_t Stacked::targets(Stacked *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 7) - 8) + 16))();
}

uint64_t Stacked::setFirstLayerFlag(Stacked *this)
{
  return (*(uint64_t (**)(void))(***((void ***)this + 6) + 8))();
}

uint64_t Stacked::isFirstLayer(Stacked *this)
{
  return (****((uint64_t (*****)(void))this + 6))(**((void **)this + 6));
}

void Reverse::~Reverse(Reverse *this)
{
  Reverse::~Reverse(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t v2;
  void *v3;

  *(void *)this = &unk_1EE323018;
  uint64_t v2 = *((void *)this + 6);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 368))(v2);
  }
  *(void *)this = &unk_1EE3182B8;
  unint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

uint64_t Reverse::log2Probability(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 352))();
}

uint64_t Reverse::computeError(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 344))();
}

uint64_t Reverse::updateFrom(Reverse *this, NeuralNetwork *lpsrc, float a3, float a4, uint64_t a5)
{
  if (!v9) {
    __cxa_bad_cast();
  }
  uint64_t v12 = v9[6];
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128, __n128))(**((void **)this + 6) + 336);
  uint64_t v14 = *((void *)this + 6);
  v10.n128_f32[0] = a3;
  v11.n128_f32[0] = a4;

  return v13(v14, v12, a5, v10, v11);
}

uint64_t Reverse::setMaster(Reverse *this, NeuralNetwork *lpsrc)
{
  if (!v3) {
    __cxa_bad_cast();
  }
  uint64_t v4 = v3[6];
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(**((void **)this + 6) + 328);
  uint64_t v6 = *((void *)this + 6);

  return v5(v6, v4);
}

uint64_t Reverse::forward(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 312))();
}

uint64_t Reverse::backward(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 320))();
}

uint64_t Reverse::update(Reverse *this, float a2, float a3)
{
  return (*(uint64_t (**)(float, float))(**((void **)this + 6) + 288))(a2, a3);
}

uint64_t Reverse::noutputs(Reverse *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 6) + 272))();
}

uint64_t Reverse::ninputs(Reverse *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 6) + 264))();
}

uint64_t Reverse::cleanupAllBuffers(Reverse *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 6) + 208))();
}

uint64_t Reverse::allocAllBuffers(Reverse *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 6) + 200))();
}

uint64_t Reverse::unsetSpecialBidir(Reverse *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 6) + 192))();
}

uint64_t Reverse::setSpecialBidir(Reverse *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 6) + 184))();
}

uint64_t Reverse::setWeightMatrices(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 176))();
}

uint64_t Reverse::getWeightMatrices(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 168))();
}

uint64_t Reverse::resetForNewBatch(Reverse *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 6) + 160))();
}

uint64_t Reverse::clearState(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 152))();
}

uint64_t Reverse::restoreState(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 144))();
}

uint64_t Reverse::saveState(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 136))();
}

uint64_t Reverse::allocInitialState(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 128))();
}

uint64_t Reverse::normalizeModel(Reverse *this, float a2)
{
  return (*(uint64_t (**)(float))(**((void **)this + 6) + 120))(a2);
}

uint64_t Reverse::clipModel(Reverse *this, float a2)
{
  return (*(uint64_t (**)(float))(**((void **)this + 6) + 112))(a2);
}

uint64_t Reverse::applyGradient(Reverse *this, const NeuralNetwork *lpsrc)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**((void **)this + 6) + 104);
  uint64_t v5 = *((void *)this + 6);

  return v4(v5, v3);
}

uint64_t Reverse::addGradient(Reverse *this, const NeuralNetwork *lpsrc)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**((void **)this + 6) + 96);
  uint64_t v5 = *((void *)this + 6);

  return v4(v5, v3);
}

uint64_t Reverse::compareModels(Reverse *this, const NeuralNetwork *lpsrc, const NeuralNetwork *a3)
{
  if (lpsrc) {
  else
  }
    uint64_t v5 = 0;
  uint64_t v7 = v5[6];
  uint64_t v8 = v6[6];
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(**((void **)this + 6) + 88);
  uint64_t v10 = *((void *)this + 6);

  return v9(v10, v7, v8);
}

uint64_t Reverse::subtractModels(Reverse *this, const NeuralNetwork *lpsrc, const NeuralNetwork *a3)
{
  if (lpsrc) {
  else
  }
    uint64_t v5 = 0;
  uint64_t v7 = v5[6];
  uint64_t v8 = v6[6];
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(**((void **)this + 6) + 80);
  uint64_t v10 = *((void *)this + 6);

  return v9(v10, v7, v8);
}

uint64_t Reverse::write(Reverse *this, __sFILE *a2, int *a3)
{
  return (*(uint64_t (**)(void, __sFILE *, int *))(**((void **)this + 6) + 72))(*((void *)this + 6), a2, a3);
}

uint64_t Reverse::read(Reverse *this, ReadOnlyFile *a2, const SentenceFileHeader *a3)
{
  return (*(uint64_t (**)(void, ReadOnlyFile *, const SentenceFileHeader *))(**((void **)this + 6) + 64))(*((void *)this + 6), a2, a3);
}

uint64_t Reverse::weightsAreNaN(Reverse *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 6) + 56))();
}

uint64_t Reverse::inputDeltas(Reverse *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 6) + 48))();
}

uint64_t Reverse::deltas(Reverse *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 6) + 40))();
}

uint64_t Reverse::outputs(Reverse *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 6) + 32))();
}

uint64_t Reverse::inputs(Reverse *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 6) + 24))();
}

uint64_t Reverse::targets(Reverse *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 6) + 16))();
}

uint64_t Reverse::setFirstLayerFlag(Reverse *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 6) + 8))();
}

uint64_t Reverse::isFirstLayer(Reverse *this)
{
  return (***((uint64_t (****)(void))this + 6))(*((void *)this + 6));
}

void LSTM<float>::init()
{
}

void sub_1928FBABC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  SparseMatrix<float>::~SparseMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<MMatrix<float>>::resize(char **a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v5 = (v3 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    uint64_t v16 = &v4[8 * a2];
    goto LABEL_20;
  }
  unint64_t v6 = a2 - v5;
  uint64_t v7 = a1[2];
  if (a2 - v5 <= (v7 - v3) >> 3)
  {
    bzero(a1[1], 8 * v6);
    uint64_t v16 = &v3[8 * v6];
LABEL_20:
    a1[1] = v16;
    return;
  }
  if (a2 >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = v7 - v4;
  uint64_t v9 = v8 >> 2;
  if (v8 >> 2 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  __n128 v11 = (char *)operator new(8 * v10);
  uint64_t v12 = &v11[8 * v5];
  uint64_t v13 = &v11[8 * v10];
  bzero(v12, 8 * v6);
  uint64_t v14 = &v12[8 * v6];
  if (v3 != v4)
  {
    do
    {
      uint64_t v15 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v12 - 1) = v15;
      v12 -= 8;
    }
    while (v3 != v4);
    uint64_t v3 = *a1;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3)
  {
    operator delete(v3);
  }
}

void LSTM<float>::~LSTM(uint64_t a1)
{
  LSTM<float>::~LSTM(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t LSTM<float>::~LSTM(uint64_t a1)
{
  *(void *)a1 = &unk_1EE322B58;
  LSTM<float>::cleanupAllBuffers((void *)a1);
  uint64_t v2 = *(void *)(a1 + 1552);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 80))(v2);
    *(void *)(a1 + 1552) = 0;
    uint64_t v3 = *(void *)(a1 + 1560);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 80))(v3);
    }
    *(void *)(a1 + 1560) = 0;
    uint64_t v4 = *(void *)(a1 + 1568);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 80))(v4);
    }
    *(void *)(a1 + 1568) = 0;
    uint64_t v5 = *(void *)(a1 + 1576);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 80))(v5);
    }
    *(void *)(a1 + 1576) = 0;
    uint64_t v6 = *(void *)(a1 + 1584);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 80))(v6);
    }
    *(void *)(a1 + 1584) = 0;
    uint64_t v7 = *(void *)(a1 + 1592);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 80))(v7);
    }
    *(void *)(a1 + 1592) = 0;
    uint64_t v8 = *(void *)(a1 + 1600);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 80))(v8);
    }
    *(void *)(a1 + 1600) = 0;
    uint64_t v9 = *(void *)(a1 + 1608);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 80))(v9);
    }
    *(void *)(a1 + 1608) = 0;
  }
  unint64_t v10 = *(void **)(a1 + 2648);
  if (v10)
  {
    *(void *)(a1 + 2656) = v10;
    operator delete(v10);
  }
  __n128 v11 = *(void **)(a1 + 2624);
  if (v11)
  {
    *(void *)(a1 + 2632) = v11;
    operator delete(v11);
  }
  PTMutex::~PTMutex((PTMutex *)(a1 + 2424));
  PTMutex::~PTMutex((PTMutex *)(a1 + 2352));
  PTMutex::~PTMutex((PTMutex *)(a1 + 2280));
  PTMutex::~PTMutex((PTMutex *)(a1 + 2208));
  PTMutex::~PTMutex((PTMutex *)(a1 + 2136));
  PTMutex::~PTMutex((PTMutex *)(a1 + 2064));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1992));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1920));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1848));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1776));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1704));
  SparseMatrix<float>::~SparseMatrix(a1 + 1344);
  SparseMatrix<float>::~SparseMatrix(a1 + 1224);
  SparseMatrix<float>::~SparseMatrix(a1 + 1104);
  SparseMatrix<float>::~SparseMatrix(a1 + 984);
  uint64_t v12 = *(void **)(a1 + 960);
  if (v12)
  {
    *(void *)(a1 + 968) = v12;
    operator delete(v12);
  }
  uint64_t v13 = *(void **)(a1 + 936);
  if (v13)
  {
    *(void *)(a1 + 944) = v13;
    operator delete(v13);
  }
  uint64_t v14 = *(void **)(a1 + 912);
  if (v14)
  {
    *(void *)(a1 + 920) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void **)(a1 + 888);
  if (v15)
  {
    *(void *)(a1 + 896) = v15;
    operator delete(v15);
  }
  uint64_t v16 = *(void **)(a1 + 864);
  if (v16)
  {
    *(void *)(a1 + 872) = v16;
    operator delete(v16);
  }
  std::string::size_type v17 = *(void **)(a1 + 840);
  if (v17)
  {
    *(void *)(a1 + 848) = v17;
    operator delete(v17);
  }
  float v18 = *(void **)(a1 + 816);
  if (v18)
  {
    *(void *)(a1 + 824) = v18;
    operator delete(v18);
  }
  long long v19 = *(void **)(a1 + 792);
  if (v19)
  {
    *(void *)(a1 + 800) = v19;
    operator delete(v19);
  }
  long long v20 = *(void **)(a1 + 712);
  if (v20)
  {
    *(void *)(a1 + 720) = v20;
    operator delete(v20);
  }
  std::string::size_type v21 = *(void **)(a1 + 688);
  if (v21)
  {
    *(void *)(a1 + 696) = v21;
    operator delete(v21);
  }
  float v22 = *(void **)(a1 + 664);
  if (v22)
  {
    *(void *)(a1 + 672) = v22;
    operator delete(v22);
  }
  long long v23 = *(void **)(a1 + 640);
  if (v23)
  {
    *(void *)(a1 + 648) = v23;
    operator delete(v23);
  }
  float v24 = *(void **)(a1 + 616);
  if (v24)
  {
    *(void *)(a1 + 624) = v24;
    operator delete(v24);
  }
  uint64_t v25 = *(void **)(a1 + 592);
  if (v25)
  {
    *(void *)(a1 + 600) = v25;
    operator delete(v25);
  }
  size_t v26 = *(void **)(a1 + 568);
  if (v26)
  {
    *(void *)(a1 + 576) = v26;
    operator delete(v26);
  }
  int v27 = *(void **)(a1 + 544);
  if (v27)
  {
    *(void *)(a1 + 552) = v27;
    operator delete(v27);
  }
  unsigned __int8 v28 = *(void **)(a1 + 520);
  if (v28)
  {
    *(void *)(a1 + 528) = v28;
    operator delete(v28);
  }
  BOOL v29 = *(void **)(a1 + 496);
  if (v29)
  {
    *(void *)(a1 + 504) = v29;
    operator delete(v29);
  }
  unsigned __int8 v30 = *(void **)(a1 + 472);
  if (v30)
  {
    *(void *)(a1 + 480) = v30;
    operator delete(v30);
  }
  std::string v31 = *(void **)(a1 + 448);
  if (v31)
  {
    *(void *)(a1 + 456) = v31;
    operator delete(v31);
  }
  int v32 = *(void **)(a1 + 424);
  if (v32)
  {
    *(void *)(a1 + 432) = v32;
    operator delete(v32);
  }
  unsigned __int8 v33 = *(void **)(a1 + 400);
  if (v33)
  {
    *(void *)(a1 + 408) = v33;
    operator delete(v33);
  }
  int64_t v34 = *(void **)(a1 + 376);
  if (v34)
  {
    *(void *)(a1 + 384) = v34;
    operator delete(v34);
  }
  uint64_t v35 = *(void **)(a1 + 352);
  if (v35)
  {
    *(void *)(a1 + 360) = v35;
    operator delete(v35);
  }
  int v44 = (void **)(a1 + 208);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v44);
  int v36 = *(void **)(a1 + 184);
  if (v36)
  {
    *(void *)(a1 + 192) = v36;
    operator delete(v36);
  }
  int v37 = *(void **)(a1 + 160);
  if (v37)
  {
    *(void *)(a1 + 168) = v37;
    operator delete(v37);
  }
  uint64_t v38 = *(void **)(a1 + 136);
  if (v38)
  {
    *(void *)(a1 + 144) = v38;
    operator delete(v38);
  }
  int v39 = *(void **)(a1 + 112);
  if (v39)
  {
    *(void *)(a1 + 120) = v39;
    operator delete(v39);
  }
  int v40 = *(void **)(a1 + 88);
  if (v40)
  {
    *(void *)(a1 + 96) = v40;
    operator delete(v40);
  }
  int v41 = *(void **)(a1 + 64);
  if (v41)
  {
    *(void *)(a1 + 72) = v41;
    operator delete(v41);
  }
  *(void *)a1 = &unk_1EE3182B8;
  uint64_t v42 = *(void **)(a1 + 8);
  if (v42)
  {
    *(void *)(a1 + 16) = v42;
    operator delete(v42);
  }
  return a1;
}

uint64_t LSTM<float>::cleanupAllBuffers(void *a1)
{
  uint64_t v2 = a1[329];
  uint64_t v3 = a1[328];
  if (v2 == v3)
  {
    uint64_t v3 = a1[329];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v3 + 8 * v4);
      if (v5)
      {
        MEMORY[0x192FF1690](v5, 0x1000C8052888210);
        uint64_t v2 = a1[329];
        uint64_t v3 = a1[328];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  uint64_t v6 = a1[332];
  uint64_t v7 = a1[331];
  if (v6 == v7)
  {
    uint64_t v7 = a1[332];
  }
  else
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(v7 + 8 * v8);
      if (v9)
      {
        MEMORY[0x192FF1690](v9, 0x1000C8052888210);
        uint64_t v6 = a1[332];
        uint64_t v7 = a1[331];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
    uint64_t v3 = a1[328];
  }
  a1[329] = v3;
  a1[332] = v7;
  SparseMatrix<float>::cleanupAllBuffers(a1 + 123);
  SparseMatrix<float>::cleanupAllBuffers(a1 + 153);
  SparseMatrix<float>::cleanupAllBuffers(a1 + 138);

  return SparseMatrix<float>::cleanupAllBuffers(a1 + 168);
}

void LSTM<float>::log2Probability()
{
}

void LSTM<float>::computeError()
{
}

uint64_t LSTM<float>::updateFrom(uint64_t a1, void *lpsrc, float a3)
{
  if (*(_DWORD *)(a1 + 2496)) {
    exitFramework(1);
  }
  if (!v5) {
    __cxa_bad_cast();
  }
  uint64_t v6 = v5;
  GRU<float>::safeAddDenseOrSparse(a1, (const float **)(a1 + 232), (uint64_t)(v5 + 366), v5 + 246, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), *(void *)(a1 + 1552), a1 + 1704, a3);
  GRU<float>::safeAddDenseOrSparse(a1, (const float **)(a1 + 248), (uint64_t)(v6 + 370), v6 + 306, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), *(void *)(a1 + 1568), a1 + 1776, a3);
  GRU<float>::safeAddDenseOrSparse(a1, (const float **)(a1 + 240), (uint64_t)(v6 + 368), v6 + 276, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), *(void *)(a1 + 1560), a1 + 1848, a3);
  GRU<float>::safeAddDenseOrSparse(a1, (const float **)(a1 + 256), (uint64_t)(v6 + 372), v6 + 336, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), *(void *)(a1 + 1576), a1 + 1920, a3);
  GRU<float>::safeAddDenseOrSparse(a1, (const float **)(a1 + 264), (uint64_t)(v6 + 374), 0, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), *(void *)(a1 + 1584), a1 + 1992, a3);
  GRU<float>::safeAddDenseOrSparse(a1, (const float **)(a1 + 280), (uint64_t)(v6 + 378), 0, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), *(void *)(a1 + 1600), a1 + 2064, a3);
  GRU<float>::safeAddDenseOrSparse(a1, (const float **)(a1 + 272), (uint64_t)(v6 + 376), 0, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), *(void *)(a1 + 1592), a1 + 2136, a3);
  GRU<float>::safeAddDenseOrSparse(a1, (const float **)(a1 + 288), (uint64_t)(v6 + 380), 0, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), *(void *)(a1 + 1608), a1 + 2208, a3);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 2288));
  int v7 = *(_DWORD *)(a1 + 52);
  unint64_t v8 = *(float **)(a1 + 296);
  if (v7 >= 1)
  {
    uint64_t v9 = (float *)*((void *)v6 + 191);
    unint64_t v10 = *(float **)(a1 + 296);
    uint64_t v11 = *(unsigned int *)(a1 + 52);
    do
    {
      float v12 = *v9++;
      float *v10 = *v10 + (float)(a3 * v12);
      ++v10;
      --v11;
    }
    while (v11);
  }
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(v8, 1, &__B, &__C, v8, 1, v7);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 2288));
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 2360));
  int v13 = *(_DWORD *)(a1 + 52);
  uint64_t v14 = *(float **)(a1 + 312);
  if (v13 >= 1)
  {
    uint64_t v15 = (float *)*((void *)v6 + 193);
    uint64_t v16 = *(float **)(a1 + 312);
    uint64_t v17 = *(unsigned int *)(a1 + 52);
    do
    {
      float v18 = *v15++;
      *uint64_t v16 = *v16 + (float)(a3 * v18);
      ++v16;
      --v17;
    }
    while (v17);
  }
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(v14, 1, &__B, &__C, v14, 1, v13);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 2360));
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 2432));
  int v19 = *(_DWORD *)(a1 + 52);
  long long v20 = *(float **)(a1 + 304);
  if (v19 >= 1)
  {
    std::string::size_type v21 = (float *)*((void *)v6 + 192);
    float v22 = *(float **)(a1 + 304);
    uint64_t v23 = *(unsigned int *)(a1 + 52);
    do
    {
      float v24 = *v21++;
      *float v22 = *v22 + (float)(a3 * v24);
      ++v22;
      --v23;
    }
    while (v23);
  }
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(v20, 1, &__B, &__C, v20, 1, v19);
  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 2432));
}

char *LSTM<float>::setMaster(uint64_t a1, void *lpsrc)
{
  if (*(_DWORD *)(a1 + 2496) != 1) {
    exitFramework(1);
  }
  if (!result) {
    __cxa_bad_cast();
  }
  *(void *)(a1 + 2504) = result + 232;
  *(void *)(a1 + 2520) = result + 248;
  *(void *)(a1 + 2512) = result + 240;
  *(void *)(a1 + 2528) = result + 256;
  *(void *)(a1 + 2536) = result + 264;
  *(void *)(a1 + 2552) = result + 280;
  *(void *)(a1 + 2544) = result + 272;
  *(void *)(a1 + 2560) = result + 288;
  *(void *)(a1 + 2568) = result + 296;
  *(void *)(a1 + 2576) = result + 304;
  *(void *)(a1 + 2584) = result + 312;
  *(void *)(a1 + 2592) = result + 320;
  *(void *)(a1 + 2600) = result + 328;
  *(void *)(a1 + 2608) = result + 336;
  *(void *)(a1 + 2616) = result + 344;
  return result;
}

uint64_t LSTM<float>::reverseBackward(unsigned char *a1)
{
  a1[2672] = 1;
  uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 296))(a1);
  a1[2672] = 0;
  return result;
}

uint64_t LSTM<float>::reverseForward(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  a1[2672] = 1;
  {
    uint64_t v13 = a6;
    uint64_t v12 = a5;
    unsigned int v11 = a4;
    uint64_t v9 = a2;
    uint64_t v10 = a3;
    a2 = v9;
    a3 = v10;
    a4 = v11;
    a5 = v12;
    a6 = v13;
    if (v8)
    {
      LSTM<float>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy = 0;
      unk_1E9307BA0 = 0;
      qword_1E9307BA8 = 0;
      __cxa_atexit((void (*)(void *))std::vector<int>::~vector[abi:ne180100], &LSTM<float>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy, &dword_1920CB000);
      a2 = v9;
      a3 = v10;
      a4 = v11;
      a5 = v12;
      a6 = v13;
    }
  }
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 304))(a1, a2, a3, a4, a5, a6, &LSTM<float>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy);
  a1[2672] = 0;
  return result;
}

void LSTM<float>::forward(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5)
{
  if (a4 < 0x2000000) {
    int v8 = 1;
  }
  else {
    int v8 = HIBYTE(a4);
  }
  uint64_t v9 = *(void *)(a1 + 2680);
  if (v9) {
    BOOL v98 = *(unsigned char *)(v9 + 600) != 0;
  }
  else {
    BOOL v98 = 0;
  }
  if (a3[1] == *a3 || *(int *)(a1 + 56) < 1)
  {
    int v10 = 0;
    if (!v9)
    {
LABEL_13:
      float v11 = 50.0;
      goto LABEL_14;
    }
  }
  else
  {
    int v10 = (**(uint64_t (***)(uint64_t))a1)(a1);
    uint64_t v9 = *(void *)(a1 + 2680);
    if (!v9) {
      goto LABEL_13;
    }
  }
  float v11 = *(float *)(v9 + 604);
  if (v11 <= 0.0) {
    goto LABEL_13;
  }
LABEL_14:
  int v12 = *(unsigned __int8 *)(a1 + 2672);
  std::string::basic_string[abi:ne180100]<0>(v123, "LSTMv2");
  if (a5 && v12) {
    exitFramework(34);
  }
  unsigned int v13 = a4 & 0xFFFFFF;
  if (v124 < 0) {
    operator delete(v123[0]);
  }
  if (a5) {
    BOOL v14 = *(unsigned char *)(a1 + 42) == 0;
  }
  else {
    BOOL v14 = 0;
  }
  unsigned int v15 = v14;
  if (v13 > v15)
  {
    int v100 = a4 & 0xFFFFFF;
    signed int v101 = v13 - 1;
    uint64_t v99 = (uint64_t *)(a1 + 752);
    int v106 = v10;
    while (1)
    {
      signed int v16 = v13 + ~v15;
      if (!*(unsigned char *)(a1 + 2672)) {
        signed int v16 = v15;
      }
      uint64_t v17 = v16;
      if (*(unsigned char *)(a1 + 2672)) {
        BOOL v18 = v16 < v101;
      }
      else {
        BOOL v18 = v16 > 0;
      }
      BOOL v110 = v18;
      if (*(unsigned char *)(a1 + 2672)) {
        uint64_t v19 = v17 + 1;
      }
      else {
        uint64_t v19 = v17 - 1;
      }
      uint64_t v108 = v19;
      int v20 = *(unsigned __int8 *)(a1 + 42);
      if (((*(unsigned char *)(a1 + 42) != 0) & v10) != 0) {
        uint64_t v21 = 1;
      }
      else {
        uint64_t v21 = v17;
      }
      uint64_t v22 = *(void *)(a1 + 64);
      if (v10)
      {
        bzero(*(void **)(v22 + 8 * v21), 4 * *(int *)(a1 + 48));
        *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8 * v21) + 4 * **(int **)(*a3 + 24 * (int)v17)) = 1065353216;
      }
      else
      {
        memmove(*(void **)(v22 + 8 * v21), *(const void **)(*a2 + 8 * v21), 4 * *(int *)(a1 + 44));
      }
      int v23 = *(unsigned __int8 *)(a1 + 40);
      if (*(unsigned char *)(a1 + 40)) {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8 * v21) + 4 * *(int *)(a1 + 48) - 4) = 1065353216;
      }
      if (v10)
      {
        int v24 = *(_DWORD *)(a1 + 48);
        uint64_t v25 = *(_DWORD **)(*(void *)(a1 + 208) + 24 * v17);
        *uint64_t v25 = **(_DWORD **)(*a3 + 24 * v17);
        if (v23) {
          v25[1] = v24 - 1;
        }
      }
      uint64_t v26 = *(void *)(a1 + 136);
      if (v8 == 1) {
        memcpy(*(void **)(v26 + 8 * v21), *(const void **)(*(void *)(a1 + 64) + 8 * v21), 4 * *(int *)(a1 + 48));
      }
      else {
        memmove(*(void **)(v26 + 8 * v21), *(const void **)(*a2 + 8 * v21), 4 * *(_DWORD *)(a1 + 44) * v8);
      }
      if (v8 > *(_DWORD *)(a1 + 2688)) {
        exitFramework(83724);
      }
      if (v20) {
        uint64_t v27 = 1;
      }
      else {
        uint64_t v27 = v17;
      }
      if (*(unsigned char *)(a1 + 2692))
      {
        bzero(*(void **)(*(void *)(a1 + 544) + 8 * v27), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(void *)(a1 + 568) + 8 * v27), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(void *)(a1 + 616) + 8 * v27), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(void *)(a1 + 592) + 8 * v27), 4 * *(int *)(a1 + 52));
      }
      bzero(*(void **)(*(void *)(a1 + 352) + 8 * v27), 4 * *(_DWORD *)(a1 + 52) * v8);
      bzero(*(void **)(*(void *)(a1 + 376) + 8 * v27), 4 * *(_DWORD *)(a1 + 52) * v8);
      bzero(*(void **)(*(void *)(a1 + 400) + 8 * v27), 4 * *(_DWORD *)(a1 + 52) * v8);
      bzero(*(void **)(*(void *)(a1 + 424) + 8 * v27), 4 * *(_DWORD *)(a1 + 52) * v8);
      uint64_t v28 = *(void *)(a1 + 2680);
      unsigned int v105 = v15;
      if (!v28)
      {
LABEL_72:
        int v32 = 0;
        BOOL v34 = !v110;
LABEL_73:
        uint64_t v37 = *(void *)(a1 + 208) + 24 * (int)v17;
        LSTM<float>::computeXTimesWSparseOrDense(a1, v10, (const float **)(*(void *)(a1 + 424) + 8 * v27), *(const float **)(*(void *)(a1 + 136) + 8 * v21), *(uint64_t **)(a1 + 2528), *(const void **)v37, *(void *)(v37 + 8), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
        char v109 = 0;
LABEL_74:
        char v36 = 1;
        if (!v34 && (v32 & 1) == 0)
        {
          cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasTrans, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0, *(const float **)(*(void *)(a1 + 160) + 8 * (int)v108), *(_DWORD *)(a1 + 52), **(const float ***)(a1 + 2560), *(_DWORD *)(a1 + 52), 1.0, *(float **)(*(void *)(a1 + 424) + 8 * v27), *(_DWORD *)(a1 + 52));
          char v36 = 0;
          int v32 = 0;
        }
        goto LABEL_77;
      }
      int v29 = *(_DWORD *)(v28 + 40);
      BOOL v30 = !*(unsigned char *)(v28 + 20) && (v29 == 5 || v29 == 2) && *(_DWORD *)(v28 + 44) == 6;
      if (v29 != 5 && v29 != 2) {
        break;
      }
      BOOL v31 = *(_DWORD *)(v28 + 60) == 22;
      int v32 = v31;
      if (v30) {
        goto LABEL_69;
      }
      BOOL v33 = v110;
      BOOL v34 = !v110;
      if (!v31) {
        BOOL v33 = 0;
      }
      if (!v33) {
        goto LABEL_73;
      }
      char v109 = 0;
LABEL_70:
      char v35 = v109;
      LSTM<float>::computeXTimesWSparseOrDenseCombined(a1, (void *)(*(void *)(a1 + 352) + 8 * v27), (uint64_t *)(*(void *)(a1 + 376) + 8 * v27), (void *)(*(void *)(a1 + 424) + 8 * v27), (uint64_t *)(*(void *)(a1 + 400) + 8 * v27), (const float **)(*(void *)(a1 + 160) + 8 * (int)v108), *(const float ***)(a1 + 2536), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52));
      int v32 = 1;
      char v36 = 1;
      char v109 = 1;
      if ((v35 & 1) == 0) {
        goto LABEL_73;
      }
LABEL_77:
      char v104 = v36;
      uint64_t v107 = v21;
      uint64_t v38 = *(void *)(a1 + 2680);
      int v39 = (void *)(*(void *)(a1 + 424) + 8 * v27);
      int v40 = *(float32x4_t ***)(a1 + 2608);
      int v41 = *(_DWORD *)(a1 + 52);
      std::string::basic_string[abi:ne180100]<0>(v123, "cix");
      LSTM<float>::addOptionalBiasVector(v38, v39, v40, v8, v41);
      if (v124 < 0) {
        operator delete(v123[0]);
      }
      uint64_t v42 = *(void *)(a1 + 424);
      vDSP_Length v43 = *(int *)(a1 + 52) * (uint64_t)v8;
      float v125 = 50.0;
      v126[0] = -50.0;
      vDSP_vclip(*(const float **)(v42 + 8 * v27), 1, v126, &v125, *(float **)(v42 + 8 * v27), 1, v43);
      applyForwardActivation((uint64_t *)(*(void *)(a1 + 520) + 8 * v27), (uint64_t *)(*(void *)(a1 + 424) + 8 * v27), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 740));
      if ((v109 & 1) == 0)
      {
        uint64_t v44 = *(void *)(a1 + 208) + 24 * (int)v17;
        LSTM<float>::computeXTimesWSparseOrDense(a1, v10, (const float **)(*(void *)(a1 + 352) + 8 * v27), *(const float **)(*(void *)(a1 + 136) + 8 * v107), *(uint64_t **)(a1 + 2504), *(const void **)v44, *(void *)(v44 + 8), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
      }
      uint64_t v45 = *(void *)(a1 + 2680);
      int v46 = (void *)(*(void *)(a1 + 352) + 8 * v27);
      BOOL v47 = *(float32x4_t ***)(a1 + 2592);
      int v48 = *(_DWORD *)(a1 + 52);
      std::string::basic_string[abi:ne180100]<0>(&v121, "gix");
      LSTM<float>::addOptionalBiasVector(v45, v46, v47, v8, v48);
      if (v122 < 0) {
        operator delete(v121);
      }
      if (v110)
      {
        if (v32)
        {
          uint64_t v49 = (int)v108;
        }
        else
        {
          cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasTrans, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0, *(const float **)(*(void *)(a1 + 160) + 8 * v108), *(_DWORD *)(a1 + 52), **(const float ***)(a1 + 2536), *(_DWORD *)(a1 + 52), 1.0, *(float **)(*(void *)(a1 + 352) + 8 * v27), *(_DWORD *)(a1 + 52));
          uint64_t v49 = v108;
        }
        uint64_t v50 = *(void *)(a1 + 2680);
        std::string v51 = (void *)(*(void *)(a1 + 352) + 8 * v27);
        uint64_t v52 = *(float32x4_t ***)(a1 + 2568);
        long long v53 = (void *)(*(void *)(a1 + 184) + 8 * v49);
        int v54 = *(_DWORD *)(a1 + 52);
        std::string::basic_string[abi:ne180100]<0>(&__p, "gix");
        LSTM<float>::addOptionalPeepholeVector(a1, v50, v51, v52, v53, v8, v54);
        int v10 = v106;
        if (v120 < 0) {
          operator delete(__p);
        }
      }
      uint64_t v55 = *(void *)(a1 + 352);
      vDSP_Length v56 = *(int *)(a1 + 52) * (uint64_t)v8;
      float v125 = 50.0;
      v126[0] = -50.0;
      vDSP_vclip(*(const float **)(v55 + 8 * v27), 1, v126, &v125, *(float **)(v55 + 8 * v27), 1, v56);
      applyForwardActivation((uint64_t *)(*(void *)(a1 + 448) + 8 * v27), (uint64_t *)(*(void *)(a1 + 352) + 8 * v27), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      if ((v109 & 1) == 0)
      {
        uint64_t v57 = *(void *)(a1 + 208) + 24 * (int)v17;
        LSTM<float>::computeXTimesWSparseOrDense(a1, v10, (const float **)(*(void *)(a1 + 376) + 8 * v27), *(const float **)(*(void *)(a1 + 136) + 8 * v107), *(uint64_t **)(a1 + 2512), *(const void **)v57, *(void *)(v57 + 8), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
      }
      uint64_t v58 = *(void *)(a1 + 2680);
      int64_t v59 = (void *)(*(void *)(a1 + 376) + 8 * v27);
      long long v60 = *(float32x4_t ***)(a1 + 2600);
      int v61 = *(_DWORD *)(a1 + 52);
      std::string::basic_string[abi:ne180100]<0>(&v117, "gfx");
      LSTM<float>::addOptionalBiasVector(v58, v59, v60, v8, v61);
      if (v118 < 0) {
        operator delete(v117);
      }
      uint64_t v62 = v107;
      if (v110)
      {
        if (v32)
        {
          uint64_t v63 = (int)v108;
        }
        else
        {
          uint64_t v63 = (int)v108;
          cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasTrans, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0, *(const float **)(*(void *)(a1 + 160) + 8 * (int)v108), *(_DWORD *)(a1 + 52), **(const float ***)(a1 + 2544), *(_DWORD *)(a1 + 52), 1.0, *(float **)(*(void *)(a1 + 376) + 8 * v27), *(_DWORD *)(a1 + 52));
        }
        uint64_t v64 = *(void *)(a1 + 2680);
        uint64_t v65 = (void *)(*(void *)(a1 + 376) + 8 * v27);
        unsigned int v66 = *(float32x4_t ***)(a1 + 2576);
        signed int v67 = (void *)(*(void *)(a1 + 184) + 8 * v63);
        int v68 = *(_DWORD *)(a1 + 52);
        std::string::basic_string[abi:ne180100]<0>(&v115, "gfx");
        LSTM<float>::addOptionalPeepholeVector(a1, v64, v65, v66, v67, v8, v68);
        int v10 = v106;
        uint64_t v62 = v107;
        if (v116 < 0) {
          operator delete(v115);
        }
      }
      uint64_t v69 = *(void *)(a1 + 2680);
      if (v69)
      {
        int v70 = *(unsigned __int8 *)(v69 + 601);
        int v71 = *(_DWORD *)(a1 + 52);
        unsigned int v72 = v105;
        if (v70)
        {
          uint64_t v73 = (v71 * v8);
          if ((int)v73 >= 1)
          {
            uint64_t v74 = *(float **)(*(void *)(a1 + 376) + 8 * v27);
            do
            {
              float *v74 = *v74 + 1.0;
              ++v74;
              --v73;
            }
            while (v73);
          }
        }
      }
      else
      {
        int v71 = *(_DWORD *)(a1 + 52);
        unsigned int v72 = v105;
      }
      uint64_t v75 = *(void *)(a1 + 376);
      float v125 = 50.0;
      v126[0] = -50.0;
      vDSP_vclip(*(const float **)(v75 + 8 * v27), 1, v126, &v125, *(float **)(v75 + 8 * v27), 1, v71 * v8);
      applyForwardActivation((uint64_t *)(*(void *)(a1 + 472) + 8 * v27), (uint64_t *)(*(void *)(a1 + 376) + 8 * v27), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      VVector<float>::mulV((float32x4_t **)(*(void *)(a1 + 184) + 8 * v17), (float32x4_t **)(*(void *)(a1 + 520) + 8 * v27), (float32x4_t **)(*(void *)(a1 + 448) + 8 * v27), *(_DWORD *)(a1 + 52) * v8);
      if (v110)
      {
        if (v98)
        {
          uint64_t v76 = (*(_DWORD *)(a1 + 52) * v8);
          if ((int)v76 >= 1)
          {
            uint64_t v77 = *(void *)(a1 + 184);
            uint64_t v78 = *(float **)(v77 + 8 * (int)v108);
            int v79 = *(float **)(*(void *)(a1 + 448) + 8 * v27);
            uint64_t v80 = *(float **)(v77 + 8 * v17);
            do
            {
              float v81 = *v78++;
              float v82 = v81;
              float v83 = *v79++;
              *uint64_t v80 = *v80 + (float)(v82 * (float)(1.0 - v83));
              ++v80;
              --v76;
            }
            while (v76);
          }
        }
        else
        {
          VVector<float>::mulAddV((float32x4_t **)(*(void *)(a1 + 184) + 8 * v17), (float32x4_t **)(*(void *)(a1 + 472) + 8 * v27), (float32x4_t **)(*(void *)(a1 + 184) + 8 * (int)v108), *(_DWORD *)(a1 + 52) * v8);
        }
      }
      uint64_t v84 = *(void *)(a1 + 184);
      vDSP_Length v85 = *(int *)(a1 + 52) * (uint64_t)v8;
      float v125 = v11;
      v126[0] = -v11;
      vDSP_vclip(*(const float **)(v84 + 8 * v17), 1, v126, &v125, *(float **)(v84 + 8 * v17), 1, v85);
      if ((v109 & 1) == 0)
      {
        uint64_t v86 = *(void *)(a1 + 208) + 24 * (int)v17;
        LSTM<float>::computeXTimesWSparseOrDense(a1, v10, (const float **)(*(void *)(a1 + 400) + 8 * v27), *(const float **)(*(void *)(a1 + 136) + 8 * v62), *(uint64_t **)(a1 + 2520), *(const void **)v86, *(void *)(v86 + 8), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
      }
      uint64_t v87 = *(void *)(a1 + 2680);
      uint64_t v88 = (void *)(*(void *)(a1 + 400) + 8 * v27);
      uint64_t v89 = *(float32x4_t ***)(a1 + 2616);
      int v90 = *(_DWORD *)(a1 + 52);
      std::string::basic_string[abi:ne180100]<0>(&v113, "gox");
      LSTM<float>::addOptionalBiasVector(v87, v88, v89, v8, v90);
      if (v114 < 0) {
        operator delete(v113);
      }
      if ((v104 & 1) == 0) {
        cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasTrans, v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0, *(const float **)(*(void *)(a1 + 160) + 8 * (int)v108), *(_DWORD *)(a1 + 52), **(const float ***)(a1 + 2552), *(_DWORD *)(a1 + 52), 1.0, *(float **)(*(void *)(a1 + 400) + 8 * v27), *(_DWORD *)(a1 + 52));
      }
      uint64_t v91 = *(void *)(a1 + 2680);
      uint64_t v92 = (void *)(*(void *)(a1 + 400) + 8 * v27);
      uint64_t v93 = *(float32x4_t ***)(a1 + 2584);
      int v94 = (void *)(*(void *)(a1 + 184) + 8 * v17);
      int v95 = *(_DWORD *)(a1 + 52);
      std::string::basic_string[abi:ne180100]<0>(&v111, "gox");
      LSTM<float>::addOptionalPeepholeVector(a1, v91, v92, v93, v94, v8, v95);
      if (v112 < 0) {
        operator delete(v111);
      }
      uint64_t v96 = *(void *)(a1 + 400);
      vDSP_Length v97 = *(int *)(a1 + 52) * (uint64_t)v8;
      float v125 = 50.0;
      v126[0] = -50.0;
      vDSP_vclip(*(const float **)(v96 + 8 * v27), 1, v126, &v125, *(float **)(v96 + 8 * v27), 1, v97);
      applyForwardActivation((uint64_t *)(*(void *)(a1 + 496) + 8 * v27), (uint64_t *)(*(void *)(a1 + 400) + 8 * v27), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      applyForwardActivation(v99, (uint64_t *)(*(void *)(a1 + 184) + 8 * v17), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 744));
      VVector<float>::mulV((float32x4_t **)(*(void *)(a1 + 160) + 8 * v17), (float32x4_t **)v99, (float32x4_t **)(*(void *)(a1 + 496) + 8 * v27), *(_DWORD *)(a1 + 52) * v8);
      int v10 = v106;
      unsigned int v13 = v100;
      if (*(unsigned char *)(a1 + 2692))
      {
        memcpy(*(void **)(*(void *)(a1 + 112) + 8 * v17), *(const void **)(*(void *)(a1 + 160) + 8 * v17), 4 * *(int *)(a1 + 52));
        memcpy(*(void **)(*(void *)(a1 + 88) + 8 * v17), *(const void **)(*(void *)(a1 + 184) + 8 * v17), 4 * *(int *)(a1 + 52));
      }
      unsigned int v15 = v72 + 1;
      if (v15 == v100) {
        return;
      }
    }
    if (!v30) {
      goto LABEL_72;
    }
    int v32 = 0;
LABEL_69:
    LSTM<float>::computeXTimesWSparseOrDenseCombined(a1, (void *)(*(void *)(a1 + 352) + 8 * v27), (uint64_t *)(*(void *)(a1 + 376) + 8 * v27), (void *)(*(void *)(a1 + 424) + 8 * v27), (uint64_t *)(*(void *)(a1 + 400) + 8 * v27), (const float **)(*(void *)(a1 + 136) + 8 * v21), *(const float ***)(a1 + 2504), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
    BOOL v34 = !v110;
    char v109 = 1;
    if ((v110 & v32 & 1) == 0) {
      goto LABEL_74;
    }
    goto LABEL_70;
  }
}

void sub_1928FD448(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 129) < 0) {
    operator delete(*(void **)(v1 - 152));
  }
  _Unwind_Resume(exception_object);
}

void LSTM<float>::computeXTimesWSparseOrDenseCombined(uint64_t a1, void *a2, uint64_t *a3, void *a4, uint64_t *a5, const float **a6, const float **a7, int __M, int a9, int __lda)
{
  v29[4] = *MEMORY[0x1E4F143B8];
  float __C = *(float **)(a1 + 784);
  if (!__C) {
    operator new[]();
  }
  cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasTrans, __M, 4 * a9, __lda, 1.0, *a6, __lda, *a7, __lda, 0.0, __C, 4 * a9);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = *a3;
  v29[0] = *a2;
  v29[1] = v19;
  uint64_t v20 = *a5;
  v29[2] = *a4;
  v29[3] = v20;
  uint64_t v21 = 4 * a9;
  do
  {
    bzero(*(void **)(a1 + 752), 4 * a9 * __M);
    if (__M >= 1)
    {
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v24 = v17;
      do
      {
        if (a9 >= 1)
        {
          uint64_t v25 = (_DWORD *)(*(void *)(a1 + 752) + v22);
          uint64_t v26 = (int *)(*(void *)(a1 + 784) + v24);
          uint64_t v27 = a9;
          do
          {
            int v28 = *v26++;
            *v25++ = v28;
            --v27;
          }
          while (v27);
        }
        ++v23;
        v22 += v21;
        v24 += 16 * a9;
      }
      while (v23 != __M);
    }
    vDSP_vadd(*(const float **)(a1 + 752), 1, (const float *)v29[v18], 1, (float *)v29[v18], 1, a9 * __M);
    ++v18;
    v17 += v21;
  }
  while (v18 != 4);
}

void LSTM<float>::computeXTimesWSparseOrDense(uint64_t a1, int a2, const float **a3, const float *__A, uint64_t *a5, const void *a6, uint64_t a7, int __M, int __ldc, int __ldb)
{
  if (a2)
  {
    if (__M != 1) {
      exitFramework(502);
    }
    BOOL v14 = (const float **)(a1 + 760);
    std::string __p = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, a6, a7, (a7 - (uint64_t)a6) >> 2);
    VVector<float>::internalMul((float **)(a1 + 760), (int *)__p, v19, *a5, __ldc, __ldb);
    if (__p)
    {
      uint64_t v19 = (int *)__p;
      operator delete(__p);
    }
    vDSP_vadd(*v14, 1, *a3, 1, (float *)*a3, 1, __ldc);
  }
  else
  {
    cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasTrans, __M, __ldc, __ldb, 1.0, __A, __ldb, (const float *)*a5, __ldb, 0.0, *(float **)(a1 + 752), __ldc);
    unsigned int v15 = *(const float **)(a1 + 752);
    signed int v16 = *a3;
    uint64_t v17 = (float *)*a3;
    vDSP_vadd(v15, 1, v16, 1, v17, 1, __ldc * __M);
  }
}

void LSTM<float>::addOptionalBiasVector(uint64_t a1, void *a2, float32x4_t **a3, int a4, int a5)
{
  if (a1)
  {
    if (*(unsigned char *)(a1 + 244)) {
      BOOL v5 = a4 < 1;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 4 * a5;
      uint64_t v11 = a4;
      do
      {
        int v12 = (float32x4_t *)(*a2 + v9);
        VVector<float>::add<float>(&v12, a3, a5);
        v9 += v10;
        --v11;
      }
      while (v11);
    }
  }
}

void LSTM<float>::addOptionalPeepholeVector(uint64_t a1, uint64_t a2, void *a3, float32x4_t **a4, void *a5, int a6, int a7)
{
  if (!a2)
  {
    if (a6 < 1) {
      return;
    }
    goto LABEL_9;
  }
  if (*(unsigned char *)(a2 + 520)) {
    BOOL v11 = a6 <= 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
LABEL_9:
    uint64_t v12 = 0;
    uint64_t v13 = 4 * a7;
    uint64_t v14 = a6;
    do
    {
      signed int v16 = (float32x4_t *)(*a3 + v12);
      unsigned int v15 = (float32x4_t *)(*a5 + v12);
      VVector<float>::mulAddV(&v16, a4, &v15, *(_DWORD *)(a1 + 52));
      v12 += v13;
      --v14;
    }
    while (v14);
  }
}

void LSTM<float>::backward(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5)
{
  int v63 = a5 - 1;
  if (a5 >= 1)
  {
    int v6 = 0;
    uint64_t v57 = (void **)(a1 + 1648);
    int v7 = (void **)(a1 + 1656);
    uint64_t v52 = (float **)(a1 + 1680);
    int v8 = a5;
    int v54 = (float **)(a1 + 1672);
    long long v53 = (void **)(a1 + 1664);
    do
    {
      uint64_t v9 = v7;
      int v10 = v8 - 1;
      int v62 = v10;
      if (*(unsigned char *)(a1 + 2672))
      {
        int v10 = v6;
        BOOL v11 = v6 < v63;
      }
      else
      {
        BOOL v11 = v10 > 0;
      }
      BOOL v61 = v11;
      if (*(unsigned char *)(a1 + 2672)) {
        BOOL v12 = v10 > 0;
      }
      else {
        BOOL v12 = v10 < v63;
      }
      if (*(unsigned char *)(a1 + 2672)) {
        int v13 = v10 - 1;
      }
      else {
        int v13 = v10 + 1;
      }
      if (*(unsigned char *)(a1 + 2672)) {
        int v14 = v10 + 1;
      }
      else {
        int v14 = v10 - 1;
      }
      int v56 = v14;
      uint64_t v15 = v10;
      memmove(*(void **)(*(void *)(a1 + 840) + 8 * v10), *(const void **)(*a4 + 8 * v10), 4 * *(int *)(a1 + 52));
      BOOL v60 = v12;
      if (v12)
      {
        cblas_sgemv(CblasRowMajor, CblasTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0, **(const float ***)(a1 + 2560), *(_DWORD *)(a1 + 52), *(const float **)(*(void *)(a1 + 936) + 8 * v13), 1, 1.0, *(float **)(*(void *)(a1 + 840) + 8 * v15), 1);
        cblas_sgemv(CblasRowMajor, CblasTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0, **(const float ***)(a1 + 2536), *(_DWORD *)(a1 + 52), *(const float **)(*(void *)(a1 + 912) + 8 * v13), 1, 1.0, *(float **)(*(void *)(a1 + 840) + 8 * v15), 1);
        cblas_sgemv(CblasRowMajor, CblasTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0, **(const float ***)(a1 + 2544), *(_DWORD *)(a1 + 52), *(const float **)(*(void *)(a1 + 888) + 8 * v13), 1, 1.0, *(float **)(*(void *)(a1 + 840) + 8 * v15), 1);
        cblas_sgemv(CblasRowMajor, CblasTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 1.0, **(const float ***)(a1 + 2552), *(_DWORD *)(a1 + 52), *(const float **)(*(void *)(a1 + 864) + 8 * v13), 1, 1.0, *(float **)(*(void *)(a1 + 840) + 8 * v15), 1);
      }
      signed int v16 = *(float **)(*(void *)(a1 + 352) + 8 * v15);
      uint64_t v17 = *(float **)(*(void *)(a1 + 376) + 8 * v15);
      uint64_t v18 = *(float **)(*(void *)(a1 + 424) + 8 * v15);
      uint64_t v19 = *(float **)(*(void *)(a1 + 400) + 8 * v15);
      uint64_t v20 = *(float32x4_t **)(*(void *)(a1 + 448) + 8 * v15);
      uint64_t v77 = *(float32x4_t **)(*(void *)(a1 + 496) + 8 * v15);
      uint64_t v78 = v20;
      VVector<float>::applyPrimeDerivative((void **)(a1 + 1640), v19, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      VVector<float>::applyPrimeDerivative(v57, v17, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      int v7 = v9;
      VVector<float>::applyPrimeDerivative(v9, v16, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      VVector<float>::applyForwardActivation(v54, v18, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 740));
      VVector<float>::applyPrimeDerivative(v53, v18, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 740));
      VVector<float>::applyForwardActivation(v52, *(float **)(*(void *)(a1 + 88) + 8 * v15), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 744));
      VVector<float>::applyPrimeDerivative((void **)(a1 + 1688), *(float **)(*(void *)(a1 + 88) + 8 * v15), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 744));
      VVector<float>::mul((void **)(*(void *)(a1 + 864) + 8 * v15), (float32x4_t **)(a1 + 1640), (float32x4_t **)v52, (float32x4_t **)(*(void *)(a1 + 840) + 8 * v15), *(_DWORD *)(a1 + 52));
      VVector<float>::mul((void **)(*(void *)(a1 + 960) + 8 * v15), (float32x4_t **)(a1 + 1688), &v77, (float32x4_t **)(*(void *)(a1 + 840) + 8 * v15), *(_DWORD *)(a1 + 52));
      VVector<float>::mulAddV((float32x4_t **)(*(void *)(a1 + 960) + 8 * v15), (float32x4_t **)(*(void *)(a1 + 864) + 8 * v15), *(float32x4_t ***)(a1 + 2584), *(_DWORD *)(a1 + 52));
      if (v60)
      {
        uint64_t v76 = *(float32x4_t **)(*(void *)(a1 + 472) + 8 * v13);
        VVector<float>::mulAddV((float32x4_t **)(*(void *)(a1 + 960) + 8 * v15), (float32x4_t **)(*(void *)(a1 + 888) + 8 * v13), *(float32x4_t ***)(a1 + 2576), *(_DWORD *)(a1 + 52));
        VVector<float>::mulAddV((float32x4_t **)(*(void *)(a1 + 960) + 8 * v15), (float32x4_t **)(*(void *)(a1 + 912) + 8 * v13), *(float32x4_t ***)(a1 + 2568), *(_DWORD *)(a1 + 52));
        VVector<float>::mulAddV((float32x4_t **)(*(void *)(a1 + 960) + 8 * v15), (float32x4_t **)(*(void *)(a1 + 960) + 8 * v13), &v76, *(_DWORD *)(a1 + 52));
      }
      VVector<float>::mul((void **)(*(void *)(a1 + 936) + 8 * v15), (float32x4_t **)v53, (float32x4_t **)(*(void *)(a1 + 960) + 8 * v15), &v78, *(_DWORD *)(a1 + 52));
      if (v61) {
        VVector<float>::mul((void **)(*(void *)(a1 + 888) + 8 * v15), (float32x4_t **)v57, (float32x4_t **)(*(void *)(a1 + 960) + 8 * v15), (float32x4_t **)(*(void *)(a1 + 88) + 8 * v56), *(_DWORD *)(a1 + 52));
      }
      v21.n128_f32[0] = VVector<float>::mul((void **)(*(void *)(a1 + 912) + 8 * v15), (float32x4_t **)v9, (float32x4_t **)(*(void *)(a1 + 960) + 8 * v15), (float32x4_t **)v54, *(_DWORD *)(a1 + 52));
      if (((**(uint64_t (***)(uint64_t, __n128))a1)(a1, v21) & 1) == 0)
      {
        bzero(*(void **)(*(void *)(a1 + 816) + 8 * v15), 4 * *(int *)(a1 + 48));
        cblas_sgemv(CblasRowMajor, CblasTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1.0, **(const float ***)(a1 + 2504), *(_DWORD *)(a1 + 48), *(const float **)(*(void *)(a1 + 912) + 8 * v15), 1, 0.0, *(float **)(*(void *)(a1 + 816) + 8 * v15), 1);
        if (v61) {
          cblas_sgemv(CblasRowMajor, CblasTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1.0, **(const float ***)(a1 + 2512), *(_DWORD *)(a1 + 48), *(const float **)(*(void *)(a1 + 888) + 8 * v15), 1, 1.0, *(float **)(*(void *)(a1 + 816) + 8 * v15), 1);
        }
        cblas_sgemv(CblasRowMajor, CblasTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1.0, **(const float ***)(a1 + 2520), *(_DWORD *)(a1 + 48), *(const float **)(*(void *)(a1 + 864) + 8 * v15), 1, 1.0, *(float **)(*(void *)(a1 + 816) + 8 * v15), 1);
        cblas_sgemv(CblasRowMajor, CblasTrans, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 1.0, **(const float ***)(a1 + 2528), *(_DWORD *)(a1 + 48), *(const float **)(*(void *)(a1 + 936) + 8 * v15), 1, 1.0, *(float **)(*(void *)(a1 + 816) + 8 * v15), 1);
      }
      ++v6;
      int v8 = v62;
    }
    while (v62 > 0);
  }
  uint64_t v22 = *(unsigned int *)(a1 + 52);
  if ((int)v22 <= 0)
  {
    uint64_t v24 = (float32x4_t **)(a1 + 1536);
    uint64_t v25 = (float32x4_t **)(a1 + 1544);
  }
  else
  {
    size_t v23 = 4 * v22;
    bzero(*(void **)(a1 + 1528), 4 * v22);
    uint64_t v24 = (float32x4_t **)(a1 + 1536);
    bzero(*(void **)(a1 + 1536), v23);
    uint64_t v25 = (float32x4_t **)(a1 + 1544);
    bzero(*(void **)(a1 + 1544), v23);
  }
  uint64_t v58 = v25;
  if (*(int *)(a1 + 56) > 0)
  {
    *(_DWORD *)(a1 + 1000) = 0;
    *(_DWORD *)(a1 + 1240) = 0;
    *(_DWORD *)(a1 + 1120) = 0;
    *(_DWORD *)(a1 + 1360) = 0;
  }
  if (a5 > 1)
  {
    int v26 = 1;
    int v27 = a5 - 2;
    do
    {
      if (*(unsigned char *)(a1 + 2672)) {
        int v28 = v27;
      }
      else {
        int v28 = v26;
      }
      if (*(unsigned char *)(a1 + 2672)) {
        int v29 = 1;
      }
      else {
        int v29 = -1;
      }
      int v30 = v28 + v29;
      if (*(unsigned char *)(a1 + 2672)) {
        int v31 = a5 - 2;
      }
      else {
        int v31 = 1;
      }
      BOOL v32 = v28 == v31;
      VVector<float>::mulAddV((float32x4_t **)(a1 + 1528), (float32x4_t **)(*(void *)(a1 + 912) + 8 * v28), (float32x4_t **)(*(void *)(a1 + 88) + 8 * v30), *(_DWORD *)(a1 + 52));
      VVector<float>::mulAddV(v24, (float32x4_t **)(*(void *)(a1 + 888) + 8 * v28), (float32x4_t **)(*(void *)(a1 + 88) + 8 * v30), *(_DWORD *)(a1 + 52));
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 912) + 8 * v28), (const float **)(*(void *)(a1 + 112) + 8 * v30), (void **)(a1 + 1496), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v32);
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 888) + 8 * v28), (const float **)(*(void *)(a1 + 112) + 8 * v30), (void **)(a1 + 1504), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v32);
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 864) + 8 * v28), (const float **)(*(void *)(a1 + 112) + 8 * v30), (void **)(a1 + 1512), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v32);
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 936) + 8 * v28), (const float **)(*(void *)(a1 + 112) + 8 * v30), (void **)(a1 + 1520), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v32);
      ++v26;
      --v27;
    }
    while (v27 != -1);
    int v33 = 1;
    int v34 = a5 - 2;
    do
    {
      if (*(unsigned char *)(a1 + 2672)) {
        int v35 = v34;
      }
      else {
        int v35 = v33;
      }
      if (*(unsigned char *)(a1 + 2672)) {
        int v36 = a5 - 2;
      }
      else {
        int v36 = 1;
      }
      if (a3[1] == *a3 || *(int *)(a1 + 56) < 1 || !(**(unsigned int (***)(uint64_t))a1)(a1))
      {
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 888) + 8 * v35), (const float **)(*(void *)(a1 + 64) + 8 * v35), (void **)(a1 + 1472), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v35 == v36);
      }
      else
      {
        uint64_t v37 = *(void *)(a1 + 888);
        uint64_t v38 = *(void *)(a1 + 208) + 24 * v35;
        uint64_t v74 = 0;
        uint64_t v75 = 0;
        uint64_t v73 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v73, *(const void **)v38, *(void *)(v38 + 8), (uint64_t)(*(void *)(v38 + 8) - *(void *)v38) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 1104, *(int **)(v37 + 8 * v35), (uint64_t)v73, *(_DWORD *)(a1 + 52));
        if (v73)
        {
          uint64_t v74 = v73;
          operator delete(v73);
        }
      }
      ++v33;
      --v34;
    }
    while (v34 != -1);
  }
  if (a5 >= 1)
  {
    int v39 = 0;
    int v40 = v63;
    do
    {
      if (*(unsigned char *)(a1 + 2672)) {
        int v41 = v40;
      }
      else {
        int v41 = v39;
      }
      if (*(unsigned char *)(a1 + 2672)) {
        int v42 = v63;
      }
      else {
        int v42 = 0;
      }
      uint64_t v43 = v41;
      VVector<float>::mulAddV(v58, (float32x4_t **)(*(void *)(a1 + 864) + 8 * v41), (float32x4_t **)(*(void *)(a1 + 88) + 8 * v41), *(_DWORD *)(a1 + 52));
      if (a3[1] == *a3 || *(int *)(a1 + 56) < 1)
      {
        BOOL v50 = v43 == v42;
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 912) + 8 * v43), (const float **)(*(void *)(a1 + 64) + 8 * v43), (void **)(a1 + 1464), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v50);
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 864) + 8 * v43), (const float **)(*(void *)(a1 + 64) + 8 * v43), (void **)(a1 + 1480), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v50);
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 936) + 8 * v43), (const float **)(*(void *)(a1 + 64) + 8 * v43), (void **)(a1 + 1488), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v50);
      }
      else
      {
        uint64_t v44 = *(void *)(a1 + 912);
        uint64_t v45 = *(void *)(a1 + 208) + 24 * (int)v43;
        int v71 = 0;
        uint64_t v72 = 0;
        int v70 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v70, *(const void **)v45, *(void *)(v45 + 8), (uint64_t)(*(void *)(v45 + 8) - *(void *)v45) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 984, *(int **)(v44 + 8 * v43), (uint64_t)v70, *(_DWORD *)(a1 + 52));
        if (v70)
        {
          int v71 = v70;
          operator delete(v70);
        }
        uint64_t v46 = *(void *)(a1 + 864);
        uint64_t v47 = *(void *)(a1 + 208) + 24 * (int)v43;
        int v68 = 0;
        uint64_t v69 = 0;
        std::string __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v47, *(void *)(v47 + 8), (uint64_t)(*(void *)(v47 + 8) - *(void *)v47) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 1224, *(int **)(v46 + 8 * v43), (uint64_t)__p, *(_DWORD *)(a1 + 52));
        if (__p)
        {
          int v68 = __p;
          operator delete(__p);
        }
        uint64_t v48 = *(void *)(a1 + 936);
        uint64_t v49 = *(void *)(a1 + 208) + 24 * (int)v43;
        uint64_t v65 = 0;
        uint64_t v66 = 0;
        uint64_t v64 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v64, *(const void **)v49, *(void *)(v49 + 8), (uint64_t)(*(void *)(v49 + 8) - *(void *)v49) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 1344, *(int **)(v48 + 8 * v43), (uint64_t)v64, *(_DWORD *)(a1 + 52));
        if (v64)
        {
          uint64_t v65 = v64;
          operator delete(v64);
        }
      }
      ++v39;
      --v40;
    }
    while (v40 != -1);
  }
}

float32_t VVector<float>::mul(void **a1, float32x4_t **a2, float32x4_t **a3, float32x4_t **a4, int a5)
{
  bzero(*a1, 4 * a5);
  int v11 = a5 / 8;
  if (a5 >= 8)
  {
    BOOL v12 = (float32x4_t *)*a1;
    int v13 = *a4;
    int v14 = *a3;
    int v15 = a5 / 8;
    signed int v16 = *a2;
    do
    {
      float32x4_t v18 = *v16;
      float32x4_t v17 = v16[1];
      v16 += 2;
      float32x4_t v20 = *v14;
      float32x4_t v19 = v14[1];
      v14 += 2;
      float32x4_t v21 = vmulq_f32(v18, v20);
      float32x4_t v10 = vmulq_f32(v17, v19);
      float32x4_t v22 = *v13;
      float32x4_t v23 = v13[1];
      v13 += 2;
      float32x4_t v24 = vmlaq_f32(v12[1], v23, v10);
      float32x4_t *v12 = vmlaq_f32(*v12, v22, v21);
      v12[1] = v24;
      v12 += 2;
      --v15;
    }
    while (v15);
  }
  int v25 = 8 * v11;
  if (8 * v11 < a5)
  {
    uint64_t v26 = a5 - (uint64_t)v25;
    int v27 = (float *)((char *)*a1 + 4 * v25);
    f32 = (*a4)[v25 / 4u].f32;
    int v29 = (*a3)[v25 / 4u].f32;
    int v30 = (*a2)[v25 / 4u].f32;
    do
    {
      float v31 = *v30++;
      float v32 = v31;
      float v33 = *v29++;
      float v34 = v33;
      float v35 = *f32++;
      v10.f32[0] = *v27 + (float)((float)(v32 * v34) * v35);
      *v27++ = v10.f32[0];
      --v26;
    }
    while (v26);
  }
  return v10.f32[0];
}

void LSTM<float>::update(uint64_t a1, float a2)
{
  int v4 = *(_DWORD *)(a1 + 48);
  int v5 = *(_DWORD *)(a1 + 52);
  if (*(int *)(a1 + 56) < 1)
  {
    float __B = a2;
    vDSP_Length v6 = v5 * v4;
    vDSP_vsma(*(const float **)(a1 + 1464), 1, &__B, *(const float **)(a1 + 232), 1, *(float **)(a1 + 232), 1, v6);
    float __B = a2;
    vDSP_vsma(*(const float **)(a1 + 1480), 1, &__B, *(const float **)(a1 + 248), 1, *(float **)(a1 + 248), 1, v6);
    float __B = a2;
    vDSP_vsma(*(const float **)(a1 + 1472), 1, &__B, *(const float **)(a1 + 240), 1, *(float **)(a1 + 240), 1, v6);
    float __B = a2;
    vDSP_vsma(*(const float **)(a1 + 1488), 1, &__B, *(const float **)(a1 + 256), 1, *(float **)(a1 + 256), 1, v6);
  }
  else
  {
    SparseMatrix<float>::add<float>(a1 + 984, (uint64_t *)(a1 + 232), v5, v4, a2);
    SparseMatrix<float>::add<float>(a1 + 1224, (uint64_t *)(a1 + 248), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), a2);
    SparseMatrix<float>::add<float>(a1 + 1104, (uint64_t *)(a1 + 240), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), a2);
    SparseMatrix<float>::add<float>(a1 + 1344, (uint64_t *)(a1 + 256), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), a2);
  }
  vDSP_Length v7 = (v5 * v5);
  float __B = a2;
  vDSP_vsma(*(const float **)(a1 + 1496), 1, &__B, *(const float **)(a1 + 264), 1, *(float **)(a1 + 264), 1, v7);
  float __B = a2;
  vDSP_vsma(*(const float **)(a1 + 1512), 1, &__B, *(const float **)(a1 + 280), 1, *(float **)(a1 + 280), 1, v7);
  float __B = a2;
  vDSP_vsma(*(const float **)(a1 + 1504), 1, &__B, *(const float **)(a1 + 272), 1, *(float **)(a1 + 272), 1, v7);
  float __B = a2;
  vDSP_vsma(*(const float **)(a1 + 1520), 1, &__B, *(const float **)(a1 + 288), 1, *(float **)(a1 + 288), 1, v7);
  uint64_t v8 = *(unsigned int *)(a1 + 52);
  if ((int)v8 >= 1)
  {
    uint64_t v9 = *(float **)(a1 + 1528);
    float32x4_t v10 = *(float **)(a1 + 296);
    uint64_t v11 = *(unsigned int *)(a1 + 52);
    do
    {
      float v12 = *v9++;
      float *v10 = *v10 + (float)(a2 * v12);
      ++v10;
      --v11;
    }
    while (v11);
    int v13 = *(float **)(a1 + 1544);
    int v14 = *(float **)(a1 + 312);
    uint64_t v15 = v8;
    do
    {
      float v16 = *v13++;
      float *v14 = *v14 + (float)(a2 * v16);
      ++v14;
      --v15;
    }
    while (v15);
    float32x4_t v17 = *(float **)(a1 + 1536);
    float32x4_t v18 = *(float **)(a1 + 304);
    do
    {
      float v19 = *v17++;
      *float32x4_t v18 = *v18 + (float)(a2 * v19);
      ++v18;
      --v8;
    }
    while (v8);
  }
}

uint64_t LSTM<float>::noutputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t LSTM<float>::ninputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

void LSTM<float>::allocAllBuffers()
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "LSTM alloc, from allocAll");
  LSTM<float>::init();
}

void sub_1928FE7AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LSTM<float>::unsetSpecialBidir(uint64_t result)
{
  *(unsigned char *)(result + 42) = 0;
  return result;
}

uint64_t LSTM<float>::setSpecialBidir(uint64_t result)
{
  *(unsigned char *)(result + 42) = 1;
  return result;
}

__n128 LSTM<float>::setWeightMatrices(void *a1, uint64_t a2)
{
  uint64_t v2 = *(_OWORD **)(a2 + 8);
  uint64_t v3 = *((void *)v2-- - 2);
  a1[29] = v3;
  a1[313] = a1 + 29;
  *(void *)(a2 + 8) = v2;
  *uint64_t v2 = *(v2 - 1);
  a1[30] = *(void *)v2;
  a1[314] = a1 + 30;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v4 - 16;
  *uint64_t v2 = *(_OWORD *)(v4 - 32);
  a1[32] = *(void *)v2;
  a1[316] = a1 + 32;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v5 - 16;
  *uint64_t v2 = *(_OWORD *)(v5 - 32);
  a1[31] = *(void *)v2;
  vDSP_Length v6 = a1 + 31;
  v6[284] = v6;
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v7 - 16;
  *uint64_t v2 = *(_OWORD *)(v7 - 32);
  v6[2] = *(void *)v2;
  v6[286] = v6 + 2;
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v8 - 16;
  *uint64_t v2 = *(_OWORD *)(v8 - 32);
  v6[3] = *(void *)v2;
  v6[287] = v6 + 3;
  uint64_t v9 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v9 - 16;
  *uint64_t v2 = *(_OWORD *)(v9 - 32);
  v6[5] = *(void *)v2;
  v6[289] = v6 + 5;
  uint64_t v10 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v10 - 16;
  *uint64_t v2 = *(_OWORD *)(v10 - 32);
  v6[4] = *(void *)v2;
  v6[288] = v6 + 4;
  uint64_t v11 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v11 - 16;
  *uint64_t v2 = *(_OWORD *)(v11 - 32);
  v6[6] = *(void *)v2;
  v6[290] = v6 + 6;
  uint64_t v12 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v12 - 16;
  *uint64_t v2 = *(_OWORD *)(v12 - 32);
  v6[7] = *(void *)v2;
  v6[291] = v6 + 7;
  uint64_t v13 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v13 - 16;
  __n128 result = *(__n128 *)(v13 - 32);
  *uint64_t v2 = result;
  v6[8] = *(void *)v2;
  v6[292] = v6 + 8;
  *(void *)(a2 + 8) -= 16;
  return result;
}

char *LSTM<float>::getWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = **(void **)(a1 + 2504);
  unsigned int v5 = *(_DWORD *)(a1 + 48);
  unsigned int v6 = *(_DWORD *)(a1 + 52);
  LODWORD(v7) = v6;
  double v8 = COERCE_DOUBLE(__PAIR64__(v5, v6));
  unint64_t v9 = *(void *)(a2 + 8);
  if (v9 >= *(void *)(a2 + 16))
  {
    uint64_t v10 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v4, COERCE_DOUBLE(__PAIR64__(v5, v6)));
    unsigned int v5 = *(_DWORD *)(a1 + 48);
    unsigned int v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    double v8 = COERCE_DOUBLE(__PAIR64__(v5, v6));
  }
  else
  {
    *(void *)unint64_t v9 = v4;
    uint64_t v10 = (char *)(v9 + 16);
    *(_DWORD *)(v9 + 8) = v6;
    *(_DWORD *)(v9 + 12) = v5;
  }
  *(void *)(a2 + 8) = v10;
  uint64_t v11 = **(void **)(a1 + 2512);
  if ((unint64_t)v10 >= *(void *)(a2 + 16))
  {
    uint64_t v12 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v11, v8);
    unsigned int v5 = *(_DWORD *)(a1 + 48);
    unsigned int v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    double v8 = COERCE_DOUBLE(__PAIR64__(v5, v6));
  }
  else
  {
    *(void *)uint64_t v10 = v11;
    uint64_t v12 = v10 + 16;
    *((_DWORD *)v10 + 2) = v6;
    *((_DWORD *)v10 + 3) = v5;
  }
  *(void *)(a2 + 8) = v12;
  uint64_t v13 = **(void **)(a1 + 2528);
  if ((unint64_t)v12 >= *(void *)(a2 + 16))
  {
    int v14 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v13, v8);
    unsigned int v5 = *(_DWORD *)(a1 + 48);
    unsigned int v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    double v8 = COERCE_DOUBLE(__PAIR64__(v5, v6));
  }
  else
  {
    *(void *)uint64_t v12 = v13;
    int v14 = v12 + 16;
    *((_DWORD *)v12 + 2) = v6;
    *((_DWORD *)v12 + 3) = v5;
  }
  *(void *)(a2 + 8) = v14;
  uint64_t v15 = **(void **)(a1 + 2520);
  if ((unint64_t)v14 >= *(void *)(a2 + 16))
  {
    float v16 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v15, v8);
    unsigned int v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
  }
  else
  {
    *(void *)int v14 = v15;
    float v16 = v14 + 16;
    *((_DWORD *)v14 + 2) = v6;
    *((_DWORD *)v14 + 3) = v5;
  }
  *(void *)(a2 + 8) = v16;
  uint64_t v17 = **(void **)(a1 + 2536);
  unint64_t v18 = __PAIR64__(v6, LODWORD(v7));
  if ((unint64_t)v16 >= *(void *)(a2 + 16))
  {
    float v19 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v17, COERCE_DOUBLE(__PAIR64__(v6, LODWORD(v7))));
    unsigned int v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    unint64_t v18 = (unint64_t)vdup_n_s32(v6);
  }
  else
  {
    *(void *)float v16 = v17;
    float v19 = v16 + 16;
    *((_DWORD *)v16 + 2) = v6;
    *((_DWORD *)v16 + 3) = v6;
  }
  *(void *)(a2 + 8) = v19;
  uint64_t v20 = **(void **)(a1 + 2544);
  if ((unint64_t)v19 >= *(void *)(a2 + 16))
  {
    float32x4_t v21 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v20, *(double *)&v18);
    unsigned int v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    unint64_t v18 = (unint64_t)vdup_n_s32(v6);
  }
  else
  {
    *(void *)float v19 = v20;
    float32x4_t v21 = v19 + 16;
    *((_DWORD *)v19 + 2) = v6;
    *((_DWORD *)v19 + 3) = v6;
  }
  *(void *)(a2 + 8) = v21;
  uint64_t v22 = **(void **)(a1 + 2560);
  if ((unint64_t)v21 >= *(void *)(a2 + 16))
  {
    float32x4_t v23 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v22, *(double *)&v18);
    unsigned int v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    unint64_t v18 = (unint64_t)vdup_n_s32(v6);
  }
  else
  {
    *(void *)float32x4_t v21 = v22;
    float32x4_t v23 = v21 + 16;
    *((_DWORD *)v21 + 2) = v6;
    *((_DWORD *)v21 + 3) = v6;
  }
  *(void *)(a2 + 8) = v23;
  uint64_t v24 = **(void **)(a1 + 2552);
  if ((unint64_t)v23 >= *(void *)(a2 + 16))
  {
    int v25 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v24, *(double *)&v18);
    unsigned int v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
  }
  else
  {
    *(void *)float32x4_t v23 = v24;
    int v25 = v23 + 16;
    *((_DWORD *)v23 + 2) = v6;
    *((_DWORD *)v23 + 3) = v6;
  }
  *(void *)(a2 + 8) = v25;
  uint64_t v26 = **(void **)(a1 + 2568);
  HIDWORD(v7) = 0;
  if ((unint64_t)v25 >= *(void *)(a2 + 16))
  {
    int v27 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v26, v7);
    unsigned int v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
  }
  else
  {
    *(void *)int v25 = v26;
    int v27 = v25 + 16;
    *((_DWORD *)v25 + 2) = v6;
    *((_DWORD *)v25 + 3) = 0;
  }
  *(void *)(a2 + 8) = v27;
  uint64_t v28 = **(void **)(a1 + 2576);
  if ((unint64_t)v27 >= *(void *)(a2 + 16))
  {
    __n128 result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v28, COERCE_DOUBLE((unint64_t)LODWORD(v7)));
    unsigned int v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
  }
  else
  {
    *(void *)int v27 = v28;
    __n128 result = v27 + 16;
    *((_DWORD *)v27 + 2) = v6;
    *((_DWORD *)v27 + 3) = 0;
  }
  *(void *)(a2 + 8) = result;
  uint64_t v30 = **(void **)(a1 + 2584);
  if ((unint64_t)result >= *(void *)(a2 + 16))
  {
    __n128 result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v30, COERCE_DOUBLE((unint64_t)LODWORD(v7)));
    float v31 = result;
  }
  else
  {
    *(void *)__n128 result = v30;
    float v31 = result + 16;
    *((_DWORD *)result + 2) = v6;
    *((_DWORD *)result + 3) = 0;
  }
  *(void *)(a2 + 8) = v31;
  return result;
}

void LSTM<float>::resetForNewBatch(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 2692))
  {
    uint64_t v2 = *(void *)(a1 + 1552);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v2 + 40))(v2, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v3 = *(void *)(a1 + 1560);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v3 + 40))(v3, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v4 = *(void *)(a1 + 1568);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v4 + 40))(v4, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v5 = *(void *)(a1 + 1576);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v5 + 40))(v5, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v6 = *(void *)(a1 + 1584);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v6 + 40))(v6, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = *(void *)(a1 + 1592);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v7 + 40))(v7, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = *(void *)(a1 + 1600);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v8 + 40))(v8, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v9 = *(void *)(a1 + 1608);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v9 + 40))(v9, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    (*(void (**)(void))(**(void **)(a1 + 1552) + 16))(*(void *)(a1 + 1552));
    (*(void (**)(void))(**(void **)(a1 + 1560) + 16))(*(void *)(a1 + 1560));
    (*(void (**)(void))(**(void **)(a1 + 1568) + 16))(*(void *)(a1 + 1568));
    (*(void (**)(void))(**(void **)(a1 + 1576) + 16))(*(void *)(a1 + 1576));
    (*(void (**)(void))(**(void **)(a1 + 1584) + 16))(*(void *)(a1 + 1584));
    (*(void (**)(void))(**(void **)(a1 + 1592) + 16))(*(void *)(a1 + 1592));
    (*(void (**)(void))(**(void **)(a1 + 1600) + 16))(*(void *)(a1 + 1600));
    (*(void (**)(void))(**(void **)(a1 + 1608) + 16))(*(void *)(a1 + 1608));
    uint64_t v10 = *(void *)(a1 + 1552);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v10 + 40))(v10, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v11 = *(void *)(a1 + 1560);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v11 + 40))(v11, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v12 = *(void *)(a1 + 1568);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v12 + 40))(v12, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v13 = *(void *)(a1 + 1576);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v13 + 40))(v13, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v14 = *(void *)(a1 + 1584);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v14 + 40))(v14, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v15 = *(void *)(a1 + 1592);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v15 + 40))(v15, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v16 = *(void *)(a1 + 1600);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v16 + 40))(v16, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v17 = *(void *)(a1 + 1608);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v17 + 40))(v17, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1928FF2D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void LSTM<float>::clearState(uint64_t a1, void *a2, int *a3)
{
  if (*(int *)(a1 + 2688) >= 1)
  {
    int v6 = 0;
    int v7 = *a3;
    do
    {
      bzero(**(void ***)(*a2 + 16 * v7 + 8), 4 * *(int *)(*a2 + 16 * v7));
      uint64_t v8 = *a3 + 1;
      *a3 = v8;
      bzero(**(void ***)(*a2 + 16 * v8 + 8), 4 * *(int *)(*a2 + 16 * v8));
      int v7 = *a3 + 1;
      *a3 = v7;
      ++v6;
    }
    while (v6 < *(_DWORD *)(a1 + 2688));
  }
}

int *LSTM<float>::restoreState(int *result, void *a2, int a3, int *a4)
{
  if (result[672] >= 1)
  {
    int v6 = result;
    int v7 = 0;
    uint64_t v8 = a3;
    do
    {
      int v9 = v6[13] * v7;
      uint64_t v10 = (void *)(*(void *)(*((void *)v6 + 20) + 8 * v8) + 4 * v9);
      uint64_t v11 = (void *)(*(void *)(*((void *)v6 + 23) + 8 * v8) + 4 * v9);
      uint64_t v12 = *a4;
      *a4 = v12 + 1;
      memmove(v10, **(const void ***)(*a2 + 16 * v12 + 8), 4 * v6[13]);
      uint64_t v13 = *a4;
      *a4 = v13 + 1;
      __n128 result = (int *)memmove(v11, **(const void ***)(*a2 + 16 * v13 + 8), 4 * v6[13]);
      ++v7;
    }
    while (v7 < v6[672]);
  }
  return result;
}

int *LSTM<float>::saveState(int *result, uint64_t *a2, int a3, int *a4)
{
  if (result[672] >= 1)
  {
    int v6 = result;
    int v7 = 0;
    uint64_t v8 = a3;
    int v9 = *a4;
    do
    {
      uint64_t v10 = v6[13];
      int v11 = v10 * v7;
      uint64_t v12 = *(void *)(*((void *)v6 + 20) + 8 * v8);
      uint64_t v13 = *a2;
      *(_DWORD *)(v13 + 16 * v9) = v10;
      memmove(**(void ***)(v13 + 16 * *a4 + 8), (const void *)(v12 + 4 * (int)v10 * v7), 4 * v10);
      uint64_t v14 = *a4 + 1;
      *a4 = v14;
      uint64_t v15 = v6[13];
      uint64_t v16 = *a2;
      *(_DWORD *)(v16 + 16 * v14) = v15;
      __n128 result = (int *)memmove(**(void ***)(v16 + 16 * *a4 + 8), (const void *)(*(void *)(*((void *)v6 + 23) + 8 * v8) + 4 * v11), 4 * v15);
      int v9 = *a4 + 1;
      *a4 = v9;
      ++v7;
    }
    while (v7 < v6[672]);
  }
  return result;
}

uint64_t LSTM<float>::allocInitialState(uint64_t result)
{
  if (*(int *)(result + 2688) >= 1) {
    operator new();
  }
  return result;
}

void sub_1928FF7B0(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

uint64_t LSTM<float>::normalizeModel(uint64_t result, float a2)
{
  uint64_t v2 = *(unsigned int *)(result + 52);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = **(float ***)(result + 2568);
    uint64_t v4 = *(unsigned int *)(result + 52);
    do
    {
      float *v3 = *v3 * a2;
      ++v3;
      --v4;
    }
    while (v4);
    uint64_t v5 = **(float ***)(result + 2576);
    uint64_t v6 = v2;
    do
    {
      float *v5 = *v5 * a2;
      ++v5;
      --v6;
    }
    while (v6);
    int v7 = **(float ***)(result + 2584);
    uint64_t v8 = v2;
    do
    {
      float *v7 = *v7 * a2;
      ++v7;
      --v8;
    }
    while (v8);
  }
  uint64_t v9 = (*(_DWORD *)(result + 48) * v2);
  if ((int)v9 >= 1)
  {
    uint64_t v10 = **(float ***)(result + 2504);
    uint64_t v11 = (*(_DWORD *)(result + 48) * v2);
    do
    {
      float *v10 = *v10 * a2;
      ++v10;
      --v11;
    }
    while (v11);
    uint64_t v12 = **(float ***)(result + 2512);
    uint64_t v13 = v9;
    do
    {
      float *v12 = *v12 * a2;
      ++v12;
      --v13;
    }
    while (v13);
    uint64_t v14 = **(float ***)(result + 2520);
    uint64_t v15 = v9;
    do
    {
      float *v14 = *v14 * a2;
      ++v14;
      --v15;
    }
    while (v15);
    uint64_t v16 = **(float ***)(result + 2528);
    do
    {
      *uint64_t v16 = *v16 * a2;
      ++v16;
      --v9;
    }
    while (v9);
  }
  if (v2)
  {
    uint64_t v17 = (v2 * v2);
    unint64_t v18 = **(float ***)(result + 2536);
    uint64_t v19 = v17;
    do
    {
      *unint64_t v18 = *v18 * a2;
      ++v18;
      --v19;
    }
    while (v19);
    uint64_t v20 = **(float ***)(result + 2544);
    uint64_t v21 = v17;
    do
    {
      *uint64_t v20 = *v20 * a2;
      ++v20;
      --v21;
    }
    while (v21);
    uint64_t v22 = **(float ***)(result + 2552);
    uint64_t v23 = v17;
    do
    {
      *uint64_t v22 = *v22 * a2;
      ++v22;
      --v23;
    }
    while (v23);
    uint64_t v24 = **(float ***)(result + 2560);
    do
    {
      float *v24 = *v24 * a2;
      ++v24;
      --v17;
    }
    while (v17);
  }
  return result;
}

void LSTM<float>::clipModel(uint64_t a1, float a2)
{
  uint64_t v4 = *(const float ***)(a1 + 2568);
  float v5 = -a2;
  vDSP_Length v6 = *(int *)(a1 + 52);
  float __C = a2;
  float __B = -a2;
  vDSP_vclip(*v4, 1, &__B, &__C, (float *)*v4, 1, v6);
  int v7 = *(const float ***)(a1 + 2576);
  vDSP_Length v8 = *(int *)(a1 + 52);
  float __C = a2;
  float __B = v5;
  vDSP_vclip(*v7, 1, &__B, &__C, (float *)*v7, 1, v8);
  uint64_t v9 = *(const float ***)(a1 + 2584);
  vDSP_Length v10 = *(int *)(a1 + 52);
  float __C = a2;
  float __B = v5;
  vDSP_vclip(*v9, 1, &__B, &__C, (float *)*v9, 1, v10);
  uint64_t v11 = *(const float ***)(a1 + 2504);
  vDSP_Length v12 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __C = a2;
  float __B = v5;
  vDSP_vclip(*v11, 1, &__B, &__C, (float *)*v11, 1, v12);
  uint64_t v13 = *(const float ***)(a1 + 2512);
  vDSP_Length v14 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __C = a2;
  float __B = v5;
  vDSP_vclip(*v13, 1, &__B, &__C, (float *)*v13, 1, v14);
  uint64_t v15 = *(const float ***)(a1 + 2520);
  vDSP_Length v16 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __C = a2;
  float __B = v5;
  vDSP_vclip(*v15, 1, &__B, &__C, (float *)*v15, 1, v16);
  uint64_t v17 = *(const float ***)(a1 + 2528);
  vDSP_Length v18 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __C = a2;
  float __B = v5;
  vDSP_vclip(*v17, 1, &__B, &__C, (float *)*v17, 1, v18);
  uint64_t v19 = *(const float ***)(a1 + 2536);
  vDSP_Length v20 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __C = a2;
  float __B = v5;
  vDSP_vclip(*v19, 1, &__B, &__C, (float *)*v19, 1, v20);
  uint64_t v21 = *(const float ***)(a1 + 2544);
  vDSP_Length v22 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __C = a2;
  float __B = v5;
  vDSP_vclip(*v21, 1, &__B, &__C, (float *)*v21, 1, v22);
  uint64_t v23 = *(const float ***)(a1 + 2552);
  vDSP_Length v24 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __C = a2;
  float __B = v5;
  vDSP_vclip(*v23, 1, &__B, &__C, (float *)*v23, 1, v24);
  int v25 = *(const float ***)(a1 + 2560);
  vDSP_Length v26 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __C = a2;
  float __B = v5;
  vDSP_vclip(*v25, 1, &__B, &__C, (float *)*v25, 1, v26);
}

void LSTM<float>::applyGradient(uint64_t a1, void *lpsrc)
{
  if (lpsrc) {
  else
  }
    uint64_t v3 = 0;
  float v4 = (*(float (**)(void))(**(void **)(a1 + 1552) + 64))(*(void *)(a1 + 1552));
  float v5 = (*(float (**)(void))(**(void **)(a1 + 1552) + 64))(*(void *)(a1 + 1552));
  (***(void (****)(float))(a1 + 1552))(v4);
  (***(void (****)(float))(a1 + 1560))(v4);
  (***(void (****)(float))(a1 + 1568))(v4);
  (***(void (****)(float))(a1 + 1576))(v4);
  (***(void (****)(float))(a1 + 1584))(v4);
  (***(void (****)(float))(a1 + 1592))(v4);
  (***(void (****)(float))(a1 + 1600))(v4);
  (***(void (****)(float))(a1 + 1608))(v4);
  vDSP_Length v6 = *(float ***)(a1 + 2568);
  uint64_t v7 = *(unsigned int *)(a1 + 52);
  if ((int)v7 <= 0)
  {
    vDSP_Length v10 = *v6;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = *v3[321];
    vDSP_Length v10 = *v6;
    do
    {
      v10[v8] = v10[v8] + (float)(v5 * *(float *)(v9 + v8 * 4));
      ++v8;
    }
    while (v7 != v8);
    uint64_t v11 = (float *)*v3[322];
    vDSP_Length v12 = **(float ***)(a1 + 2576);
    uint64_t v13 = v7;
    do
    {
      float v14 = *v11++;
      float *v12 = *v12 + (float)(v5 * v14);
      ++v12;
      --v13;
    }
    while (v13);
    uint64_t v15 = (float *)*v3[323];
    vDSP_Length v16 = **(float ***)(a1 + 2584);
    uint64_t v17 = v7;
    do
    {
      float v18 = *v15++;
      *vDSP_Length v16 = *v16 + (float)(v5 * v18);
      ++v16;
      --v17;
    }
    while (v17);
  }
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(v10, 1, &__B, &__C, v10, 1, (int)v7);
  uint64_t v19 = *(const float ***)(a1 + 2576);
  vDSP_Length v20 = *(int *)(a1 + 52);
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*v19, 1, &__B, &__C, (float *)*v19, 1, v20);
  uint64_t v21 = *(const float ***)(a1 + 2584);
  vDSP_Length v22 = *(int *)(a1 + 52);
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*v21, 1, &__B, &__C, (float *)*v21, 1, v22);
  uint64_t v23 = *(const float ***)(a1 + 2504);
  vDSP_Length v24 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*v23, 1, &__B, &__C, (float *)*v23, 1, v24);
  int v25 = *(const float ***)(a1 + 2512);
  vDSP_Length v26 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*v25, 1, &__B, &__C, (float *)*v25, 1, v26);
  int v27 = *(const float ***)(a1 + 2520);
  vDSP_Length v28 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*v27, 1, &__B, &__C, (float *)*v27, 1, v28);
  int v29 = *(const float ***)(a1 + 2528);
  vDSP_Length v30 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*v29, 1, &__B, &__C, (float *)*v29, 1, v30);
  float v31 = *(const float ***)(a1 + 2536);
  vDSP_Length v32 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*v31, 1, &__B, &__C, (float *)*v31, 1, v32);
  float v33 = *(const float ***)(a1 + 2544);
  vDSP_Length v34 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*v33, 1, &__B, &__C, (float *)*v33, 1, v34);
  float v35 = *(const float ***)(a1 + 2552);
  vDSP_Length v36 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*v35, 1, &__B, &__C, (float *)*v35, 1, v36);
  uint64_t v37 = *(const float ***)(a1 + 2560);
  vDSP_Length v38 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __C = 2.0;
  float __B = -2.0;
  vDSP_vclip(*v37, 1, &__B, &__C, (float *)*v37, 1, v38);
}

void LSTM<float>::addGradient(uint64_t a1, void *lpsrc)
{
  if (lpsrc) {
  else
  }
    uint64_t v3 = 0;
  VVector<float>::add<float>(*(float32x4_t ***)(a1 + 2568), *((float32x4_t ***)v3 + 321), *(_DWORD *)(a1 + 52));
  VVector<float>::add<float>(*(float32x4_t ***)(a1 + 2576), *((float32x4_t ***)v3 + 322), *(_DWORD *)(a1 + 52));
  VVector<float>::add<float>(*(float32x4_t ***)(a1 + 2584), *((float32x4_t ***)v3 + 323), *(_DWORD *)(a1 + 52));
  float v4 = *(const float ***)(a1 + 2504);
  float v5 = (const float **)*((void *)v3 + 313);
  vDSP_Length v6 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __B = 1.0;
  vDSP_vsma(*v5, 1, &__B, *v4, 1, (float *)*v4, 1, v6);
  uint64_t v7 = *(const float ***)(a1 + 2512);
  uint64_t v8 = (const float **)*((void *)v3 + 314);
  vDSP_Length v9 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __B = 1.0;
  vDSP_vsma(*v8, 1, &__B, *v7, 1, (float *)*v7, 1, v9);
  vDSP_Length v10 = *(const float ***)(a1 + 2520);
  uint64_t v11 = (const float **)*((void *)v3 + 315);
  vDSP_Length v12 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __B = 1.0;
  vDSP_vsma(*v11, 1, &__B, *v10, 1, (float *)*v10, 1, v12);
  uint64_t v13 = *(const float ***)(a1 + 2528);
  float v14 = (const float **)*((void *)v3 + 316);
  vDSP_Length v15 = *(int *)(a1 + 48) * (uint64_t)*(int *)(a1 + 52);
  float __B = 1.0;
  vDSP_vsma(*v14, 1, &__B, *v13, 1, (float *)*v13, 1, v15);
  vDSP_Length v16 = *(const float ***)(a1 + 2536);
  uint64_t v17 = (const float **)*((void *)v3 + 317);
  vDSP_Length v18 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __B = 1.0;
  vDSP_vsma(*v17, 1, &__B, *v16, 1, (float *)*v16, 1, v18);
  uint64_t v19 = *(const float ***)(a1 + 2544);
  vDSP_Length v20 = (const float **)*((void *)v3 + 318);
  vDSP_Length v21 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __B = 1.0;
  vDSP_vsma(*v20, 1, &__B, *v19, 1, (float *)*v19, 1, v21);
  vDSP_Length v22 = *(const float ***)(a1 + 2552);
  uint64_t v23 = (const float **)*((void *)v3 + 319);
  vDSP_Length v24 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __B = 1.0;
  vDSP_vsma(*v23, 1, &__B, *v22, 1, (float *)*v22, 1, v24);
  int v25 = *(const float ***)(a1 + 2560);
  vDSP_Length v26 = (const float **)*((void *)v3 + 320);
  vDSP_Length v27 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 52));
  float __B = 1.0;
  vDSP_vsma(*v26, 1, &__B, *v25, 1, (float *)*v25, 1, v27);
}

void LSTM<float>::compareModels(uint64_t a1, void *lpsrc, void **a3)
{
  uint64_t v3 = a3;
  if (lpsrc)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  float v5 = 0;
  if (a3) {
LABEL_3:
  }
LABEL_4:
  std::vector<BOOL>::vector(&__p, 4uLL);
  uint64_t v6 = *(unsigned int *)(a1 + 52);
  if ((int)v6 <= 0)
  {
    uint64_t v13 = __p;
LABEL_12:
    unint64_t v14 = *v13 | 1;
    goto LABEL_13;
  }
  uint64_t v7 = (float *)*v3[321];
  uint64_t v8 = (float *)*v5[321];
  LOBYTE(v9) = 1;
  do
  {
    float v10 = *v7++;
    float v11 = v10;
    float v12 = *v8++;
    int v9 = v9 & (vabds_f32(v11, v12) < 0.0000001);
    --v6;
  }
  while (v6);
  uint64_t v13 = __p;
  if (v9) {
    goto LABEL_12;
  }
  unint64_t v14 = *(void *)__p & 0xFFFFFFFFFFFFFFFELL;
LABEL_13:
  *uint64_t v13 = v14;
  operator delete(v13);
}

float LSTM<float>::subtractModels(uint64_t a1, void *lpsrc, const void *a3)
{
  if (lpsrc)
  {
    if (a3)
    {
LABEL_3:
      goto LABEL_6;
    }
  }
  else
  {
    float v5 = 0;
    if (a3) {
      goto LABEL_3;
    }
  }
  uint64_t v7 = 0;
LABEL_6:
  uint64_t v8 = *(unsigned int *)(a1 + 52);
  if ((int)v8 >= 1)
  {
    int v9 = (float *)*v7[321];
    float v10 = (float *)*v5[321];
    float v11 = **(float ***)(a1 + 2568);
    uint64_t v12 = *(unsigned int *)(a1 + 52);
    do
    {
      float v13 = *v9++;
      float v14 = v13;
      float v15 = *v10++;
      *v11++ = v14 - v15;
      --v12;
    }
    while (v12);
    vDSP_Length v16 = (float *)*v7[322];
    uint64_t v17 = (float *)*v5[322];
    vDSP_Length v18 = **(float ***)(a1 + 2576);
    uint64_t v19 = v8;
    do
    {
      float v20 = *v16++;
      float v21 = v20;
      float v22 = *v17++;
      *v18++ = v21 - v22;
      --v19;
    }
    while (v19);
    uint64_t v23 = (float *)*v7[323];
    vDSP_Length v24 = (float *)*v5[323];
    int v25 = **(float ***)(a1 + 2584);
    uint64_t v26 = v8;
    do
    {
      float v27 = *v23++;
      float v28 = v27;
      float v29 = *v24++;
      float result = v28 - v29;
      *v25++ = result;
      --v26;
    }
    while (v26);
  }
  uint64_t v30 = (*(_DWORD *)(a1 + 48) * v8);
  if ((int)v30 >= 1)
  {
    float v31 = (float *)*v7[313];
    vDSP_Length v32 = (float *)*v5[313];
    float v33 = **(float ***)(a1 + 2504);
    uint64_t v34 = (*(_DWORD *)(a1 + 48) * v8);
    do
    {
      float v35 = *v31++;
      float v36 = v35;
      float v37 = *v32++;
      *v33++ = v36 - v37;
      --v34;
    }
    while (v34);
    vDSP_Length v38 = (float *)*v7[315];
    int v39 = (float *)*v5[315];
    int v40 = **(float ***)(a1 + 2520);
    uint64_t v41 = v30;
    do
    {
      float v42 = *v38++;
      float v43 = v42;
      float v44 = *v39++;
      *v40++ = v43 - v44;
      --v41;
    }
    while (v41);
    uint64_t v45 = (float *)*v7[314];
    uint64_t v46 = (float *)*v5[314];
    uint64_t v47 = **(float ***)(a1 + 2512);
    uint64_t v48 = v30;
    do
    {
      float v49 = *v45++;
      float v50 = v49;
      float v51 = *v46++;
      *v47++ = v50 - v51;
      --v48;
    }
    while (v48);
    uint64_t v52 = (float *)*v7[316];
    long long v53 = (float *)*v5[316];
    int v54 = **(float ***)(a1 + 2528);
    do
    {
      float v55 = *v52++;
      float v56 = v55;
      float v57 = *v53++;
      float result = v56 - v57;
      *v54++ = result;
      --v30;
    }
    while (v30);
  }
  if (v8)
  {
    uint64_t v58 = (v8 * v8);
    int64_t v59 = (float *)*v7[317];
    BOOL v60 = (float *)*v5[317];
    BOOL v61 = **(float ***)(a1 + 2536);
    uint64_t v62 = v58;
    do
    {
      float v63 = *v59++;
      float v64 = v63;
      float v65 = *v60++;
      *v61++ = v64 - v65;
      --v62;
    }
    while (v62);
    uint64_t v66 = (float *)*v7[319];
    signed int v67 = (float *)*v5[319];
    int v68 = **(float ***)(a1 + 2552);
    uint64_t v69 = v58;
    do
    {
      float v70 = *v66++;
      float v71 = v70;
      float v72 = *v67++;
      *v68++ = v71 - v72;
      --v69;
    }
    while (v69);
    uint64_t v73 = (float *)*v7[318];
    uint64_t v74 = (float *)*v5[318];
    uint64_t v75 = **(float ***)(a1 + 2544);
    uint64_t v76 = v58;
    do
    {
      float v77 = *v73++;
      float v78 = v77;
      float v79 = *v74++;
      *v75++ = v78 - v79;
      --v76;
    }
    while (v76);
    uint64_t v80 = (float *)*v7[320];
    float v81 = (float *)*v5[320];
    float v82 = **(float ***)(a1 + 2560);
    do
    {
      float v83 = *v80++;
      float v84 = v83;
      float v85 = *v81++;
      float result = v84 - v85;
      *v82++ = result;
      --v58;
    }
    while (v58);
  }
  return result;
}

void LSTM<float>::write(uint64_t a1, FILE *__stream, __sFILE *a3, int a4, unsigned int a5)
{
  NeuralNetwork::writeDimensions(__stream, a3, (int *)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  if (a4 >= 1)
  {
    int __ptr = *(_DWORD *)(a1 + 736);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    int __ptr = *(_DWORD *)(a1 + 740);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    int __ptr = *(_DWORD *)(a1 + 744);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    LODWORD(a3->_p) += 12;
  }
  VVector<float>::write(*(float ***)(a1 + 2568), __stream, (int *)a3, 32, a5, *(_DWORD *)(a1 + 52));
  VVector<float>::write(*(float ***)(a1 + 2576), __stream, (int *)a3, 32, a5, *(_DWORD *)(a1 + 52));
  VVector<float>::write(*(float ***)(a1 + 2584), __stream, (int *)a3, 32, a5, *(_DWORD *)(a1 + 52));
  MMatrix<float>::write(*(void *)(a1 + 2504), __stream, (int *)a3, a5);
}

uint64_t LSTM<float>::read(uint64_t a1, NeuralNetwork *this, int *a3, int *a4, int *a5)
{
  int v5 = (int)a4;
  *(void *)int v25 = 0;
  NeuralNetwork::readDimensions((uint64_t *)this, (ReadOnlyFile *)&v25[4], v25, a4, a5);
  if (v5 >= 1)
  {
    int v9 = *((_DWORD *)this + 18);
    uint64_t v10 = *(void *)this;
    float v11 = (int *)(*(void *)this + v9);
    unint64_t v12 = *(void *)this + *((void *)this + 1) - 4;
    if ((unint64_t)v11 <= v12)
    {
      int v13 = *v11;
      v9 += 4;
      *((_DWORD *)this + 18) = v9;
    }
    else
    {
      int v13 = 0;
    }
    uint64_t v14 = v9;
    *(_DWORD *)(a1 + 736) = v13;
    if (v10 + v9 <= v12)
    {
      int v15 = *(_DWORD *)(v10 + v9);
      v9 += 4;
      *((_DWORD *)this + 18) = v9;
      uint64_t v14 = v9;
    }
    else
    {
      int v15 = 0;
    }
    *(_DWORD *)(a1 + 740) = v15;
    vDSP_Length v16 = (int *)(v10 + v14);
    if ((unint64_t)v16 <= v12)
    {
      int v17 = *v16;
      *((_DWORD *)this + 18) = v9 + 4;
    }
    else
    {
      int v17 = 0;
    }
    *(_DWORD *)(a1 + 744) = v17;
  }
  int v18 = *(_DWORD *)(a1 + 52);
  if (v18 != *(_DWORD *)&v25[4] || *(_DWORD *)(a1 + 48) != *(_DWORD *)v25) {
    exitFramework(3);
  }
  VVector<float>::read(*(signed __int8 ***)(a1 + 2568), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (signed __int8 **)0x20, v18);
  VVector<float>::read(*(signed __int8 ***)(a1 + 2576), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (signed __int8 **)0x20, *(_DWORD *)(a1 + 52));
  VVector<float>::read(*(signed __int8 ***)(a1 + 2584), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (signed __int8 **)0x20, *(_DWORD *)(a1 + 52));
  MMatrix<float>::read(*(char **)(a1 + 2504), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (float **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<float>::read(*(char **)(a1 + 2512), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (float **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<float>::read(*(char **)(a1 + 2520), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (float **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<float>::read(*(char **)(a1 + 2528), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (float **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<float>::read(*(char **)(a1 + 2536), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (float **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
  MMatrix<float>::read(*(char **)(a1 + 2544), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (float **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
  MMatrix<float>::read(*(char **)(a1 + 2552), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (float **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
  uint64_t v19 = *(char **)(a1 + 2560);
  int v20 = *a3;
  int v21 = *(unsigned __int8 *)(a1 + 1697);
  float v22 = (float **)*(unsigned int *)(a1 + 52);
  int v23 = *(_DWORD *)(a1 + 52);

  return MMatrix<float>::read(v19, (uint64_t)this, v20, v21, v22, v23);
}

uint64_t LSTM<float>::weightsAreNaN()
{
  return 0;
}

uint64_t LSTM<float>::inputDeltas(uint64_t a1)
{
  return a1 + 816;
}

void LSTM<float>::deltas()
{
}

void **LSTM<float>::outputs(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 792);
  std::vector<VVector<float>>::resize((char **)(a1 + 792), (uint64_t)(*(void *)(a1 + 168) - *(void *)(a1 + 160)) >> 3);
  uint64_t v3 = *(uint64_t **)(a1 + 160);
  uint64_t v4 = *(void *)(a1 + 168) - (void)v3;
  if (v4)
  {
    unint64_t v5 = v4 >> 3;
    uint64_t v6 = *v2;
    if (v5 <= 1) {
      unint64_t v5 = 1;
    }
    do
    {
      uint64_t v7 = *v3++;
      *v6++ = v7;
      --v5;
    }
    while (v5);
  }
  return v2;
}

uint64_t LSTM<float>::inputs(uint64_t a1)
{
  return a1 + 64;
}

void LSTM<float>::targets()
{
}

void LSTM<signed char>::LSTM(uint64_t a1, int a2, int a3, _DWORD **a4, int a5, uint64_t a6, int a7, uint64_t a8, char a9)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EE3229D0;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 52) = a3;
  *(_DWORD *)(a1 + 56) = a5;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(unsigned char *)(a1 + 1072) = 0;
  *(unsigned char *)(a1 + 1192) = 0;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(unsigned char *)(a1 + 1312) = 0;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  int v13 = (_OWORD *)(a1 + 1640);
  *(unsigned char *)(a1 + 1432) = 0;
  bzero((void *)(a1 + 64), 0x2A0uLL);
  *(_OWORD *)(a1 + 988) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1108) = 0u;
  *(_OWORD *)(a1 + 1228) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1348) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *int v13 = 0u;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(void *)(a1 + 1688) = 0;
  *(void *)(a1 + 1704) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1712), 0);
  *(void *)(a1 + 1776) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1784), 0);
  *(void *)(a1 + 1848) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1856), 0);
  *(void *)(a1 + 1920) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1928), 0);
  *(void *)(a1 + 1992) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2000), 0);
  *(void *)(a1 + 2064) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2072), 0);
  *(void *)(a1 + 2136) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2144), 0);
  *(void *)(a1 + 2208) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2216), 0);
  *(void *)(a1 + 2280) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2288), 0);
  *(void *)(a1 + 2352) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2360), 0);
  *(void *)(a1 + 2424) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2432), 0);
  *(_DWORD *)(a1 + 2496) = 0;
  *(_OWORD *)(a1 + 2624) = 0u;
  *(_OWORD *)(a1 + 2640) = 0u;
  *(_OWORD *)(a1 + 2656) = 0u;
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  int v14 = 1;
  *(unsigned char *)(a1 + 2692) = 1;
  *(unsigned char *)(a1 + 2672) = 0;
  *(unsigned char *)(a1 + 41) = 0;
  *(void *)(a1 + 2680) = a8;
  if (a8)
  {
    a7 = *(unsigned __int8 *)(a8 + 512);
    int v14 = *(_DWORD *)(a8 + 28);
    int v15 = a7 ^ 1;
  }
  else
  {
    int v15 = 1;
  }
  *(_DWORD *)(a1 + 2688) = v14;
  *(unsigned char *)(a1 + 40) = a7;
  int v16 = *(unsigned __int8 *)(a6 + 45);
  *(unsigned char *)(a1 + 1696) = v16;
  *(unsigned char *)(a1 + 1697) = *(unsigned char *)(a6 + 46);
  int v17 = *a4;
  *(_DWORD *)(a1 + 736) = **a4;
  *(_DWORD *)(a1 + 740) = v17[1];
  *(_DWORD *)(a1 + 744) = v17[2];
  if (!a7) {
    int v15 = 0;
  }
  *(_DWORD *)(a1 + 48) = v15 + *(_DWORD *)(a1 + 44);
  if (a9)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
    *(unsigned char *)(a1 + 2672) = 1;
    int v16 = *(unsigned __int8 *)(a1 + 1696);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a6 + 16);
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(void *)(a1 + 1632) = 0;
  if (!v16)
  {
    int v18 = *(_DWORD *)(a6 + 32);
    switch(v18)
    {
      case 2:
        operator new();
      case 1:
        operator new();
      case 0:
        operator new();
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "LSTM alloc, from constructor");
  LSTM<signed char>::init();
}

void sub_192901A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PTMutex *a10, PTMutex *a11, PTMutex *a12, PTMutex *a13, PTMutex *a14, PTMutex *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  MEMORY[0x192FF16B0](v53, 0x10B3C408D47FFFCLL);
  BOOL v60 = (void **)(v52 + 328);
  BOOL v61 = (void *)v52[331];
  if (v61)
  {
    v52[332] = v61;
    operator delete(v61);
  }
  uint64_t v62 = *v60;
  if (*v60)
  {
    v52[329] = v62;
    operator delete(v62);
  }
  PTMutex::~PTMutex(v58);
  PTMutex::~PTMutex(v54);
  PTMutex::~PTMutex(a10);
  PTMutex::~PTMutex(a11);
  PTMutex::~PTMutex(a12);
  PTMutex::~PTMutex(a13);
  PTMutex::~PTMutex(a14);
  PTMutex::~PTMutex(v57);
  PTMutex::~PTMutex(v56);
  PTMutex::~PTMutex(v55);
  PTMutex::~PTMutex(a15);
  SparseMatrix<float>::~SparseMatrix(a17);
  SparseMatrix<float>::~SparseMatrix(a18);
  SparseMatrix<float>::~SparseMatrix(a16);
  SparseMatrix<float>::~SparseMatrix(a19);
  float v63 = (void *)v52[120];
  if (v63)
  {
    v52[121] = v63;
    operator delete(v63);
  }
  float v64 = (void *)v52[117];
  if (v64)
  {
    v52[118] = v64;
    operator delete(v64);
  }
  float v65 = (void *)v52[114];
  if (v65)
  {
    v52[115] = v65;
    operator delete(v65);
  }
  uint64_t v66 = (void *)v52[111];
  if (v66)
  {
    v52[112] = v66;
    operator delete(v66);
  }
  signed int v67 = (void *)v52[108];
  if (v67)
  {
    v52[109] = v67;
    operator delete(v67);
  }
  int v68 = (void *)v52[105];
  if (v68)
  {
    v52[106] = v68;
    operator delete(v68);
  }
  uint64_t v69 = (void *)v52[102];
  if (v69)
  {
    v52[103] = v69;
    operator delete(v69);
  }
  float v70 = (void *)v52[99];
  if (v70)
  {
    v52[100] = v70;
    operator delete(v70);
  }
  float v71 = (void *)v52[89];
  if (v71)
  {
    v52[90] = v71;
    operator delete(v71);
  }
  float v72 = (void *)v52[86];
  if (v72)
  {
    v52[87] = v72;
    operator delete(v72);
  }
  uint64_t v73 = (void *)v52[83];
  if (v73)
  {
    v52[84] = v73;
    operator delete(v73);
  }
  uint64_t v74 = (void *)v52[80];
  if (v74)
  {
    v52[81] = v74;
    operator delete(v74);
  }
  uint64_t v75 = (void *)v52[77];
  if (v75)
  {
    v52[78] = v75;
    operator delete(v75);
  }
  uint64_t v76 = (void *)v52[74];
  if (v76)
  {
    v52[75] = v76;
    operator delete(v76);
  }
  float v77 = (void *)v52[71];
  if (v77)
  {
    v52[72] = v77;
    operator delete(v77);
  }
  float v78 = (void *)v52[68];
  if (v78)
  {
    v52[69] = v78;
    operator delete(v78);
  }
  float v79 = (void *)v52[65];
  if (v79)
  {
    v52[66] = v79;
    operator delete(v79);
  }
  uint64_t v80 = (void *)v52[62];
  if (v80)
  {
    v52[63] = v80;
    operator delete(v80);
  }
  float v81 = (void *)v52[59];
  if (v81)
  {
    v52[60] = v81;
    operator delete(v81);
  }
  float v82 = (void *)v52[56];
  if (v82)
  {
    v52[57] = v82;
    operator delete(v82);
  }
  float v83 = (void *)v52[53];
  if (v83)
  {
    v52[54] = v83;
    operator delete(v83);
  }
  float v84 = (void *)v52[50];
  if (v84)
  {
    v52[51] = v84;
    operator delete(v84);
  }
  float v85 = (void *)v52[47];
  if (v85)
  {
    v52[48] = v85;
    operator delete(v85);
  }
  uint64_t v86 = (void *)v52[44];
  if (v86)
  {
    v52[45] = v86;
    operator delete(v86);
  }
  a23 = v52 + 26;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  uint64_t v87 = (void *)v52[23];
  if (v87)
  {
    v52[24] = v87;
    operator delete(v87);
  }
  uint64_t v88 = (void *)v52[20];
  if (v88)
  {
    v52[21] = v88;
    operator delete(v88);
  }
  uint64_t v89 = (void *)v52[17];
  if (v89)
  {
    v52[18] = v89;
    operator delete(v89);
  }
  int v90 = (void *)v52[14];
  if (v90)
  {
    v52[15] = v90;
    operator delete(v90);
  }
  uint64_t v91 = (void *)v52[11];
  if (v91)
  {
    v52[12] = v91;
    operator delete(v91);
  }
  uint64_t v92 = *a20;
  if (*a20)
  {
    v52[9] = v92;
    operator delete(v92);
  }
  *uint64_t v52 = a21;
  uint64_t v93 = (void *)v52[1];
  if (v93)
  {
    v52[2] = v93;
    operator delete(v93);
  }
  _Unwind_Resume(a1);
}

uint64_t FullLayer<signed char>::FullLayer(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, char a7, uint64_t a8)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EE3239B0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = a2;
  *(_DWORD *)(a1 + 100) = a3;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(unsigned char *)(a1 + 232) = 0;
  *(void *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(void *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 432) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 440), 0);
  *(_DWORD *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 112) = a5;
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  *(unsigned char *)(a1 + 41) = 0;
  *(_DWORD *)(a1 + 408) = a4;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a6 + 68);
  *(void *)(a1 + 528) = a8;
  if (a8) {
    a7 = *(unsigned char *)(a8 + 512);
  }
  *(unsigned char *)(a1 + 40) = a7;
  *(unsigned char *)(a1 + 520) = 0;
  *(_WORD *)(a1 + 116) = *(_WORD *)(a6 + 45);
  std::string::basic_string[abi:ne180100]<0>(__p, "FullLayer");
  (*(void (**)(uint64_t, void **, void, float))(*(void *)a1 + 400))(a1, __p, 0, -0.44);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a6 + 16);
  *(void *)(a1 + 424) = 0;
  if (!*(unsigned char *)(a1 + 116))
  {
    int v15 = *(_DWORD *)(a6 + 32);
    switch(v15)
    {
      case 2:
        operator new();
      case 1:
        operator new();
      case 0:
        operator new();
    }
  }
  return a1;
}

void sub_192902224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x192FF16B0](v24, 0x10B3C408D47FFFCLL);
  PTMutex::~PTMutex(v23);
  float v27 = (void *)v20[48];
  if (v27)
  {
    v20[49] = v27;
    operator delete(v27);
  }
  a15 = v20 + 45;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  float v28 = (void *)v20[42];
  if (v28)
  {
    v20[43] = v28;
    operator delete(v28);
  }
  float v29 = (void *)v20[39];
  if (v29)
  {
    v20[40] = v29;
    operator delete(v29);
  }
  uint64_t v30 = (void *)v20[36];
  if (v30)
  {
    v20[37] = v30;
    operator delete(v30);
  }
  float v31 = (void *)v20[33];
  if (v31)
  {
    v20[34] = v31;
    operator delete(v31);
  }
  SparseMatrix<float>::~SparseMatrix(v22);
  vDSP_Length v32 = (void *)v20[9];
  if (v32)
  {
    v20[10] = v32;
    operator delete(v32);
  }
  float v33 = *v25;
  if (*v25)
  {
    v20[7] = v33;
    operator delete(v33);
  }
  *int v20 = v21;
  uint64_t v34 = (void *)v20[1];
  if (v34)
  {
    void v20[2] = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

uint64_t RecurrentLayer<signed char>::RecurrentLayer(uint64_t a1, int a2, int a3, int a4, char a5, char a6, char a7, uint64_t a8)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EE318468;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 48) = a3;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(void *)(a1 + 296) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 304), 0);
  *(_DWORD *)(a1 + 368) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 376) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  *(unsigned char *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 41) = 0;
  *(_DWORD *)(a1 + 208) = a4;
  *(void *)(a1 + 240) = a8;
  *(unsigned char *)(a1 + 40) = a7;
  *(unsigned char *)(a1 + 60) = a5;
  *(unsigned char *)(a1 + 61) = a6;
  std::string::basic_string[abi:ne180100]<0>(__p, "RecurrentLayer from Constructor");
  (*(void (**)(uint64_t, void **, void, float))(*(void *)a1 + 392))(a1, __p, 0, -0.44);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_192902534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  PTMutex::~PTMutex(v17);
  int v20 = (void *)v15[34];
  if (v20)
  {
    v15[35] = v20;
    operator delete(v20);
  }
  uint64_t v21 = *v18;
  if (*v18)
  {
    v15[32] = v21;
    operator delete(v21);
  }
  uint64_t v22 = (void *)v15[23];
  if (v22)
  {
    v15[24] = v22;
    operator delete(v22);
  }
  int v23 = (void *)v15[20];
  if (v23)
  {
    v15[21] = v23;
    operator delete(v23);
  }
  uint64_t v24 = (void *)v15[17];
  if (v24)
  {
    v15[18] = v24;
    operator delete(v24);
  }
  int v25 = (void *)v15[14];
  if (v25)
  {
    v15[15] = v25;
    operator delete(v25);
  }
  uint64_t v26 = (void *)v15[11];
  if (v26)
  {
    v15[12] = v26;
    operator delete(v26);
  }
  void *v15 = v16;
  float v27 = (void *)v15[1];
  if (v27)
  {
    v15[2] = v27;
    operator delete(v27);
  }
  _Unwind_Resume(a1);
}

uint64_t SoftMax<signed char>::SoftMax(uint64_t a1, int a2, int a3, uint64_t a4, char a5, uint64_t a6)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)a1 = &unk_1EE3239B0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(unsigned char *)(a1 + 232) = 0;
  *(void *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 432) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 440), 0);
  *(_DWORD *)(a1 + 504) = 0;
  *(_WORD *)(a1 + 40) = 0;
  *(void *)(a1 + 424) = 0;
  *(unsigned char *)(a1 + 520) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 110) = 0;
  *(_DWORD *)(a1 + 408) = 1;
  *(void *)(a1 + 528) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  *(void *)a1 = &unk_1EE3231A0;
  *(_WORD *)(a1 + 41) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 408) = 0;
  *(void *)(a1 + 528) = a6;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a4 + 68);
  if (a6) {
    a5 = *(unsigned char *)(a6 + 512);
  }
  *(unsigned char *)(a1 + 40) = a5;
  *(_DWORD *)(a1 + 96) = a2;
  *(_DWORD *)(a1 + 100) = a3;
  *(void *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 116) = *(_WORD *)(a4 + 45);
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 528) = a6;
  if (a2 < 1 || a3 <= 0) {
    exitFramework(34);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "SoftMax");
  FullLayer<signed char>::init(a1, (uint64_t)__p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a4 + 16);
  *(void *)(a1 + 424) = 0;
  if (!*(unsigned char *)(a1 + 116))
  {
    int v13 = *(_DWORD *)(a4 + 32);
    switch(v13)
    {
      case 2:
        operator new();
      case 1:
        operator new();
      case 0:
        operator new();
    }
  }
  return a1;
}

void sub_192902944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x192FF16B0](v21, 0x10B3C408D47FFFCLL);
  FullLayer<signed char>::~FullLayer(v20);
  _Unwind_Resume(a1);
}

void GRU<signed char>::GRU(uint64_t a1, int a2, int a3, _DWORD **a4, int a5, uint64_t a6, int a7, uint64_t a8)
{
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_1EE322538;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 52) = a3;
  *(_DWORD *)(a1 + 56) = a5;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(unsigned char *)(a1 + 848) = 0;
  *(unsigned char *)(a1 + 968) = 0;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(unsigned char *)(a1 + 1088) = 0;
  *(void *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_DWORD *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 884) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 1004) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(void *)(a1 + 1160) = 0;
  *(void *)(a1 + 1232) = 0;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(void *)(a1 + 1240) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1248), 0);
  *(void *)(a1 + 1312) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1320), 0);
  *(void *)(a1 + 1384) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1392), 0);
  *(void *)(a1 + 1456) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1464), 0);
  *(void *)(a1 + 1528) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1536), 0);
  *(void *)(a1 + 1600) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1608), 0);
  *(void *)(a1 + 1672) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1680), 0);
  *(void *)(a1 + 1744) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1752), 0);
  *(void *)(a1 + 1816) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1824), 0);
  *(void *)(a1 + 1888) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1896), 0);
  *(void *)(a1 + 1960) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1968), 0);
  *(_DWORD *)(a1 + 2084) = 0;
  *(_OWORD *)(a1 + 2052) = 0u;
  *(_OWORD *)(a1 + 2068) = 0u;
  *(_OWORD *)(a1 + 2036) = 0u;
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  *(unsigned char *)(a1 + 2088) = 0;
  *(unsigned char *)(a1 + 41) = 0;
  *(void *)(a1 + 2096) = a8;
  if (a8)
  {
    a7 = *(unsigned __int8 *)(a8 + 512);
    int v13 = a7 ^ 1;
  }
  else
  {
    int v13 = 1;
  }
  *(unsigned char *)(a1 + 40) = a7;
  int v14 = *(unsigned __int8 *)(a6 + 45);
  *(unsigned char *)(a1 + 2032) = v14;
  *(unsigned char *)(a1 + 2033) = *(unsigned char *)(a6 + 46);
  char v15 = *a4;
  *(_DWORD *)(a1 + 568) = **a4;
  *(_DWORD *)(a1 + 572) = v15[1];
  *(_DWORD *)(a1 + 576) = v15[2];
  if (!a7) {
    int v13 = 0;
  }
  *(_DWORD *)(a1 + 48) = v13 + *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a6 + 16);
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  if (!v14)
  {
    int v16 = *(_DWORD *)(a6 + 32);
    switch(v16)
    {
      case 2:
        operator new();
      case 1:
        operator new();
      case 0:
        operator new();
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "GRU alloc, from constructor");
  GRU<signed char>::init();
}

void sub_1929035B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PTMutex *a10, PTMutex *a11, PTMutex *a12, PTMutex *a13, PTMutex *a14, PTMutex *a15, PTMutex *a16, PTMutex *a17, PTMutex *a18, PTMutex *a19, PTMutex *a20,void **a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  MEMORY[0x192FF16B0](v47, 0x10B3C40C37BAA31);
  uint64_t v53 = (void *)v46[258];
  if (v53)
  {
    v46[259] = v53;
    operator delete(v53);
  }
  int v54 = (void *)v46[255];
  if (v54)
  {
    v46[256] = v54;
    operator delete(v54);
  }
  PTMutex::~PTMutex(a10);
  PTMutex::~PTMutex(a11);
  PTMutex::~PTMutex(a12);
  PTMutex::~PTMutex(a13);
  PTMutex::~PTMutex(a14);
  PTMutex::~PTMutex(a15);
  PTMutex::~PTMutex(a16);
  PTMutex::~PTMutex(a17);
  PTMutex::~PTMutex(a18);
  PTMutex::~PTMutex(a19);
  PTMutex::~PTMutex(a20);
  SparseMatrix<float>::~SparseMatrix(v50);
  SparseMatrix<float>::~SparseMatrix(v48);
  SparseMatrix<float>::~SparseMatrix(v49);
  float v55 = (void *)v46[91];
  if (v55)
  {
    v46[92] = v55;
    operator delete(v55);
  }
  float v56 = (void *)v46[88];
  if (v56)
  {
    v46[89] = v56;
    operator delete(v56);
  }
  float v57 = (void *)v46[85];
  if (v57)
  {
    v46[86] = v57;
    operator delete(v57);
  }
  uint64_t v58 = (void *)v46[82];
  if (v58)
  {
    v46[83] = v58;
    operator delete(v58);
  }
  int64_t v59 = (void *)v46[79];
  if (v59)
  {
    v46[80] = v59;
    operator delete(v59);
  }
  BOOL v60 = (void *)v46[76];
  if (v60)
  {
    v46[77] = v60;
    operator delete(v60);
  }
  BOOL v61 = (void *)v46[68];
  if (v61)
  {
    v46[69] = v61;
    operator delete(v61);
  }
  uint64_t v62 = (void *)v46[65];
  if (v62)
  {
    v46[66] = v62;
    operator delete(v62);
  }
  float v63 = (void *)v46[62];
  if (v63)
  {
    v46[63] = v63;
    operator delete(v63);
  }
  float v64 = (void *)v46[59];
  if (v64)
  {
    v46[60] = v64;
    operator delete(v64);
  }
  float v65 = (void *)v46[56];
  if (v65)
  {
    v46[57] = v65;
    operator delete(v65);
  }
  uint64_t v66 = *v51;
  if (*v51)
  {
    v46[54] = v66;
    operator delete(v66);
  }
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  signed int v67 = (void *)v46[23];
  if (v67)
  {
    v46[24] = v67;
    operator delete(v67);
  }
  int v68 = (void *)v46[20];
  if (v68)
  {
    v46[21] = v68;
    operator delete(v68);
  }
  uint64_t v69 = (void *)v46[17];
  if (v69)
  {
    v46[18] = v69;
    operator delete(v69);
  }
  float v70 = (void *)v46[14];
  if (v70)
  {
    v46[15] = v70;
    operator delete(v70);
  }
  float v71 = (void *)v46[11];
  if (v71)
  {
    v46[12] = v71;
    operator delete(v71);
  }
  float v72 = *a21;
  if (*a21)
  {
    v46[9] = v72;
    operator delete(v72);
  }
  *uint64_t v46 = a22;
  uint64_t v73 = (void *)v46[1];
  if (v73)
  {
    v46[2] = v73;
    operator delete(v73);
  }
  _Unwind_Resume(a1);
}

uint64_t BatchNormalization<signed char>::BatchNormalization(uint64_t a1, int a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EE3211B8;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 48) = 925353388;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  long long v5 = *(_OWORD *)(a3 + 32);
  long long v6 = *(_OWORD *)(a3 + 48);
  *(void *)(a1 + 120) = *(void *)(a3 + 64);
  *(_OWORD *)(a1 + 104) = v6;
  *(_OWORD *)(a1 + 88) = v5;
  *(_OWORD *)(a1 + 72) = v4;
  *(_OWORD *)(a1 + 168) = 0u;
  uint64_t v7 = (char **)(a1 + 168);
  uint64_t v8 = (char **)(a1 + 192);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 224), 0);
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 41) = 0;
  std::vector<VVector<float>>::resize(v7, maxFeatureVectors);
  std::vector<VVector<float>>::resize(v8, maxFeatureVectors);
  *(_WORD *)(a1 + 160) = *(_WORD *)(a1 + 101);
  if (maxFeatureVectors >= 1) {
    operator new[]();
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 200))(a1);
  return a1;
}

void sub_192903D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, PTMutex *a9, uint64_t a10)
{
  int v14 = *v12;
  if (*v12)
  {
    v10[25] = v14;
    operator delete(v14);
  }
  char v15 = *v11;
  if (*v11)
  {
    v10[22] = v15;
    operator delete(v15);
  }
  void *v10 = a10;
  int v16 = (void *)v10[1];
  if (v16)
  {
    v10[2] = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void ParallelSelector<signed char>::~ParallelSelector(uint64_t a1)
{
  ParallelSelector<signed char>::~ParallelSelector(a1);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void **v14;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE320918;
  uint64_t v3 = *(void *)(a1 + 280);
  uint64_t v2 = *(void *)(a1 + 288);
  if (v2 == v3)
  {
    uint64_t v3 = *(void *)(a1 + 288);
  }
  else
  {
    long long v4 = 0;
    do
    {
      long long v5 = *(void **)(v3 + 8 * v4);
      if (*v5)
      {
        MEMORY[0x192FF1690](*v5, 0x1000C8052888210);
        float *v5 = 0;
        uint64_t v3 = *(void *)(a1 + 280);
        uint64_t v2 = *(void *)(a1 + 288);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  *(void *)(a1 + 288) = v3;
  int v14 = (void **)(a1 + 536);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v14);
  long long v6 = *(void **)(a1 + 504);
  if (v6)
  {
    *(void *)(a1 + 512) = v6;
    operator delete(v6);
  }
  int v14 = (void **)(a1 + 472);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v14);
  uint64_t v7 = *(void **)(a1 + 448);
  if (v7)
  {
    *(void *)(a1 + 456) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(a1 + 424);
  if (v8)
  {
    *(void *)(a1 + 432) = v8;
    operator delete(v8);
  }
  int v9 = *(void **)(a1 + 400);
  if (v9)
  {
    *(void *)(a1 + 408) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *(void **)(a1 + 376);
  if (v10)
  {
    *(void *)(a1 + 384) = v10;
    operator delete(v10);
  }
  float v11 = *(void **)(a1 + 352);
  if (v11)
  {
    *(void *)(a1 + 360) = v11;
    operator delete(v11);
  }
  unint64_t v12 = *(void **)(a1 + 304);
  if (v12)
  {
    *(void *)(a1 + 312) = v12;
    operator delete(v12);
  }
  int v13 = *(void **)(a1 + 280);
  if (v13)
  {
    *(void *)(a1 + 288) = v13;
    operator delete(v13);
  }

  Parallel::~Parallel((Parallel *)a1);
}

float ParallelSelector<signed char>::log2Probability(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v13 = 0;
  if (a3 < 1) {
    return 0.0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = a3;
  float v6 = 0.0;
  do
  {
    uint64_t v7 = *(int *)(a1 + 332);
    uint64_t v8 = *(void *)(*(void *)(a1 + 80) + 8 * v7);
    (*(void (**)(uint64_t, uint64_t, char *, uint64_t))(*(void *)v8 + 232))(v8, *(void *)(a1 + 200) + 24 * (int)v7, (char *)&v13 + 4, v4);
    uint64_t v9 = *(int *)(*(void *)(a1 + 400) + 4 * v4);
    uint64_t v10 = *(void *)(*(void *)(a1 + 80) + 8 * v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v10 + 232))(v10, *(void *)(a1 + 200) + 24 * (int)v9, &v13, v4);
    float v11 = *((float *)&v13 + 1);
    if ((*(_DWORD *)(a1 + 328) - 3) < 2) {
      float v11 = -0.0;
    }
    float v6 = v6 + (float)(*(float *)&v13 + v11);
    ++v4;
  }
  while (v5 != v4);
  return v6;
}

uint64_t ParallelSelector<signed char>::computeError(uint64_t result, uint64_t a2, uint64_t a3, int a4, _DWORD *a5, uint64_t a6)
{
  if (a4 >= 1)
  {
    uint64_t v19 = v6;
    uint64_t v20 = v7;
    uint64_t v10 = result;
    uint64_t v11 = 0;
    uint64_t v12 = a4;
    do
    {
      int v18 = 0;
      uint64_t v13 = *(int *)(v10 + 332);
      uint64_t v14 = *(void *)(*(void *)(v10 + 80) + 8 * v13);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(void *)v14 + 240))(v14, *(void *)(v10 + 200) + 24 * v13, *(void *)(v10 + 472) + 24 * v13, v11, &v18, a6);
      int v17 = 0;
      uint64_t v15 = *(int *)(*(void *)(v10 + 400) + 4 * v11);
      uint64_t v16 = *(void *)(*(void *)(v10 + 80) + 8 * v15);
      float result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(void *)v16 + 240))(v16, *(void *)(v10 + 200) + 24 * (int)v15, *(void *)(v10 + 472) + 24 * *(int *)(v10 + 336), v11, &v17, a6);
      if (v18 == 1 || v17 == 1) {
        ++*a5;
      }
      ++v11;
    }
    while (v12 != v11);
  }
  return result;
}

void *ParallelSelector<signed char>::updateFrom(uint64_t a1, void *lpsrc, uint64_t a3, float a4, float a5)
{
  if (!result) {
    __cxa_bad_cast();
  }
  int v10 = *(_DWORD *)(a1 + 340);
  if ((v10 & 0x80000000) == 0)
  {
    uint64_t v11 = (uint64_t)result;
    uint64_t v12 = 0;
    do
    {
      if (*(int *)(*(void *)(v11 + 304) + 4 * v12) >= 1)
      {
        uint64_t v13 = *(void *)(*(void *)(a1 + 80) + 8 * v12);
        float result = (void *)(*(uint64_t (**)(uint64_t, void, uint64_t, float, float))(*(void *)v13 + 336))(v13, *(void *)(*(void *)(v11 + 80) + 8 * v12), a3, a4, a5);
        int v10 = *(_DWORD *)(a1 + 340);
      }
    }
    while (v12++ < v10);
  }
  return result;
}

void ParallelSelector<signed char>::forward(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int **a7)
{
  float v147 = 0;
  float v148 = 0;
  unint64_t v149 = 0;
  if ((*(_DWORD *)(a1 + 340) & 0x80000000) == 0)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *(void *)(a1 + 304);
    do
      *(_DWORD *)(v14 + 4 * v13) = 0;
    while (v13++ < *(int *)(a1 + 340));
  }
  uint64_t v16 = *(void *)(a1 + 224);
  if (v16) {
    a2 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 32))(v16);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "ParallelSelector");
  uint64_t v17 = a4 & 0xFFFFFF;
  if (SHIBYTE(v146) < 0) {
    operator delete(__p);
  }
  if (v17 > (a5 != 0))
  {
    uint64_t v18 = a5 != 0;
    while (1)
    {
      uint64_t v19 = *(int *)(a1 + 332);
      uint64_t v20 = *(void *)(*(void *)(a1 + 80) + 8 * v19);
      (*(void (**)(uint64_t))(*(void *)v20 + 272))(v20);
      uint64_t v21 = *(void *)(*(void *)(a1 + 80) + 8 * v19);
      (*(void (**)(uint64_t))(*(void *)v21 + 264))(v21);
      uint64_t v22 = *(void *)(a1 + 304);
      if (!*(_DWORD *)(v22 + 4 * v19))
      {
        *(_DWORD *)(v22 + 4 * v19) = 1;
        uint64_t v23 = *(void *)(*(void *)(a1 + 80) + 8 * v19);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 256))(v23, v17);
      }
      std::string __p = 0;
      v145 = 0;
      uint64_t v146 = 0;
      uint64_t v24 = *(void *)(*(void *)(a1 + 80) + 8 * v19);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v24 + 224))(v24, a2, a3, v18, &__p);
      uint64_t v25 = *(void *)(*(void *)(a1 + 80) + 8 * v19);
      int v142 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v25 + 32))(v25);
      memset(&v143, 0, sizeof(v143));
      int v26 = *(_DWORD *)(a1 + 328);
      if (v26 == 1) {
        break;
      }
      if (v26 == 2)
      {
        uint64_t v72 = *v142;
        uint64_t v73 = *(void *)(*(void *)(a1 + 80) + 8 * *(int *)(a1 + 332));
        int v74 = (*(uint64_t (**)(uint64_t))(*(void *)v73 + 272))(v73);
        if (v74 < 1)
        {
          int v75 = 0;
        }
        else
        {
          int v75 = 0;
          uint64_t v76 = 0;
          float v78 = 1.1755e-38;
          do
          {
            uint64_t v77 = *(void *)(v72 + 8 * v18);
            if (*(float *)(v77 + 4 * v76) > v78)
            {
              int v75 = v76;
              float v78 = *(float *)(v77 + 4 * v76);
            }
            ++v76;
          }
          while (v74 != v76);
        }
        int v81 = v75 + 1;
        std::vector<int>::pointer end = v143.__end_;
        if (v143.__end_ >= v143.__end_cap_.__value_)
        {
          std::vector<int>::pointer begin = v143.__begin_;
          int64_t v85 = v143.__end_ - v143.__begin_;
          unint64_t v86 = v85 + 1;
          if ((unint64_t)(v85 + 1) >> 62) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          int64_t v87 = (char *)v143.__end_cap_.__value_ - (char *)v143.__begin_;
          if (((char *)v143.__end_cap_.__value_ - (char *)v143.__begin_) >> 1 > v86) {
            unint64_t v86 = v87 >> 1;
          }
          BOOL v52 = (unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v88 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v52) {
            unint64_t v88 = v86;
          }
          if (v88)
          {
            unint64_t v88 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v88);
            std::vector<int>::pointer begin = v143.__begin_;
            std::vector<int>::pointer end = v143.__end_;
          }
          else
          {
            uint64_t v89 = 0;
          }
          uint64_t v93 = (int *)(v88 + 4 * v85);
          *uint64_t v93 = v81;
          float v83 = v93 + 1;
          while (end != begin)
          {
            int v94 = *--end;
            *--uint64_t v93 = v94;
          }
          v143.__begin_ = v93;
          v143.__end_ = v83;
          v143.__end_cap_.__value_ = (int *)(v88 + 4 * v89);
          if (begin) {
            operator delete(begin);
          }
        }
        else
        {
          *v143.__end_ = v81;
          float v83 = end + 1;
        }
        v143.__end_ = v83;
        goto LABEL_133;
      }
      if (v26 != 4)
      {
        uint64_t v34 = &v143;
        VVector<float>::getTopNIndices((uint64_t *)(*v142 + 8 * v18), *(_DWORD *)(a1 + 340), &v143, *(_DWORD *)(*(void *)(a1 + 496) + 8));
        goto LABEL_134;
      }
      float v27 = (char *)v147;
      float v148 = (char *)v147;
      uint64_t v28 = *(void *)(a1 + 536);
      uint64_t v29 = *(void *)(a1 + 544) - v28;
      if (v29)
      {
        unint64_t v30 = v29 / 24;
        if (v30 <= 1) {
          unint64_t v30 = 1;
        }
        float v31 = (void *)(v28 + 8);
        do
        {
          void *v31 = *(v31 - 1);
          v31 += 3;
          --v30;
        }
        while (v30);
      }
      float v33 = *a7;
      vDSP_Length v32 = a7[1];
      uint64_t v34 = (std::vector<int> *)(a1 + 352);
      unint64_t v35 = (char *)v32 - (char *)*a7;
      if (v32 != *a7)
      {
        if (v35 < 5)
        {
          float v148 = v27;
          if (v35 == 4)
          {
            float v36 = operator new(4uLL);
            int v37 = *v33;
            *float v36 = *v33;
            goto LABEL_85;
          }
        }
        else
        {
          float v36 = operator new(4uLL);
          int v37 = *v33;
          *float v36 = *v33;
          if (v33[1] != -1) {
            exitFramework(900);
          }
          if (v35 >= 9)
          {
            uint64_t v140 = v36;
            unint64_t v38 = 2;
            do
            {
              uint64_t v39 = v17;
              int v40 = *v33;
              int v41 = v33[v38];
              uint64_t v42 = *(void *)(a1 + 496);
              if (v40 == -1)
              {
                if (*(void *)(v42 + 104)) {
                  int v47 = *(_DWORD *)(v42 + 112);
                }
                else {
                  int v47 = *(_DWORD *)(v42 + 96);
                }
                if (v41 >= v47)
                {
                  fprintf((FILE *)*MEMORY[0x1E4F143D8], "WARNING: Invalid (too large) Montreal id (%d) - IGNORE\n", v41);
                  uint64_t v17 = v39;
                }
                else
                {
                  int WordClass = OutputCluster::getWordClass(*(OutputCluster **)(a1 + 496), v41);
                  int WordClassIndex = OutputCluster::getWordClassIndex((OutputCluster *)v42, v41);
                  uint64_t v57 = *(void *)(a1 + 536) + 24 * WordClass;
                  int64_t v59 = (_DWORD **)(v57 + 8);
                  uint64_t v58 = *(_DWORD **)(v57 + 8);
                  unint64_t v60 = *(void *)(v57 + 16);
                  if ((unint64_t)v58 >= v60)
                  {
                    int v139 = WordClassIndex;
                    float v64 = *(_DWORD **)v57;
                    uint64_t v65 = ((uint64_t)v58 - *(void *)v57) >> 2;
                    unint64_t v66 = v65 + 1;
                    if ((unint64_t)(v65 + 1) >> 62) {
                      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v67 = v60 - (void)v64;
                    if (v67 >> 1 > v66) {
                      unint64_t v66 = v67 >> 1;
                    }
                    BOOL v52 = (unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL;
                    unint64_t v68 = 0x3FFFFFFFFFFFFFFFLL;
                    if (!v52) {
                      unint64_t v68 = v66;
                    }
                    if (v68)
                    {
                      unint64_t v68 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v68);
                      uint64_t v58 = *v59;
                      float v64 = *(_DWORD **)v57;
                    }
                    else
                    {
                      uint64_t v69 = 0;
                    }
                    float v70 = (_DWORD *)(v68 + 4 * v65);
                    *float v70 = v139;
                    BOOL v61 = v70 + 1;
                    while (v58 != v64)
                    {
                      int v71 = *--v58;
                      *--float v70 = v71;
                    }
                    *(void *)uint64_t v57 = v70;
                    *int64_t v59 = v61;
                    *(void *)(v57 + 16) = v68 + 4 * v69;
                    if (v64) {
                      operator delete(v64);
                    }
                  }
                  else
                  {
                    _DWORD *v58 = WordClassIndex;
                    BOOL v61 = v58 + 1;
                  }
                  uint64_t v17 = v39;
                  *int64_t v59 = v61;
                }
              }
              else
              {
                int v43 = OutputCluster::getWordClassIndex(*(OutputCluster **)(a1 + 496), v41);
                int v44 = v43;
                uint64_t v45 = v148;
                if ((unint64_t)v148 >= v149)
                {
                  uint64_t v48 = (char *)v147;
                  uint64_t v49 = (v148 - (unsigned char *)v147) >> 2;
                  unint64_t v50 = v49 + 1;
                  if ((unint64_t)(v49 + 1) >> 62) {
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v17 = v39;
                  uint64_t v51 = v149 - (void)v147;
                  if ((uint64_t)(v149 - (void)v147) >> 1 > v50) {
                    unint64_t v50 = v51 >> 1;
                  }
                  BOOL v52 = (unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL;
                  unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
                  if (!v52) {
                    unint64_t v53 = v50;
                  }
                  if (v53)
                  {
                    unint64_t v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v53);
                    uint64_t v48 = (char *)v147;
                    uint64_t v45 = v148;
                  }
                  else
                  {
                    uint64_t v54 = 0;
                  }
                  uint64_t v62 = (char *)(v53 + 4 * v49);
                  *(_DWORD *)uint64_t v62 = v44;
                  uint64_t v46 = v62 + 4;
                  while (v45 != v48)
                  {
                    int v63 = *((_DWORD *)v45 - 1);
                    v45 -= 4;
                    *((_DWORD *)v62 - 1) = v63;
                    v62 -= 4;
                  }
                  float v147 = v62;
                  float v148 = v46;
                  unint64_t v149 = v53 + 4 * v54;
                  if (v48) {
                    operator delete(v48);
                  }
                }
                else
                {
                  *(_DWORD *)float v148 = v43;
                  uint64_t v46 = v45 + 4;
                  uint64_t v17 = v39;
                }
                float v148 = v46;
              }
              ++v38;
              float v33 = *a7;
            }
            while (v38 < a7[1] - *a7);
            float v36 = v140;
            int v37 = *v140;
          }
LABEL_85:
          v141 = v36;
          if (v37 == -1)
          {
            uint64_t v95 = *(void *)(a1 + 544);
            uint64_t v96 = *(void *)(a1 + 536);
            if (v95 != v96)
            {
              unint64_t v97 = 0;
              do
              {
                uint64_t v98 = *(void *)(v96 + 24 * v97);
                uint64_t v99 = *(void *)(v96 + 24 * v97++ + 8);
                if (v99 != v98)
                {
                  std::vector<int>::pointer v100 = v143.__end_;
                  if (v143.__end_ >= v143.__end_cap_.__value_)
                  {
                    std::vector<int>::pointer v102 = v143.__begin_;
                    int64_t v103 = v143.__end_ - v143.__begin_;
                    unint64_t v104 = v103 + 1;
                    if ((unint64_t)(v103 + 1) >> 62) {
                      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                    }
                    int64_t v105 = (char *)v143.__end_cap_.__value_ - (char *)v143.__begin_;
                    if (((char *)v143.__end_cap_.__value_ - (char *)v143.__begin_) >> 1 > v104) {
                      unint64_t v104 = v105 >> 1;
                    }
                    BOOL v52 = (unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL;
                    unint64_t v106 = 0x3FFFFFFFFFFFFFFFLL;
                    if (!v52) {
                      unint64_t v106 = v104;
                    }
                    if (v106)
                    {
                      unint64_t v106 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v106);
                      std::vector<int>::pointer v102 = v143.__begin_;
                      std::vector<int>::pointer v100 = v143.__end_;
                    }
                    else
                    {
                      uint64_t v107 = 0;
                    }
                    uint64_t v108 = (int *)(v106 + 4 * v103);
                    int *v108 = v97;
                    signed int v101 = v108 + 1;
                    while (v100 != v102)
                    {
                      int v109 = *--v100;
                      *--uint64_t v108 = v109;
                    }
                    v143.__begin_ = v108;
                    v143.__end_ = v101;
                    v143.__end_cap_.__value_ = (int *)(v106 + 4 * v107);
                    if (v102) {
                      operator delete(v102);
                    }
                  }
                  else
                  {
                    *v143.__end_ = v97;
                    signed int v101 = v100 + 1;
                  }
                  v143.__end_ = v101;
                  uint64_t v95 = *(void *)(a1 + 544);
                  uint64_t v96 = *(void *)(a1 + 536);
                }
              }
              while (0xAAAAAAAAAAAAAAABLL * ((v95 - v96) >> 3) > v97);
            }
          }
          else
          {
            if (v37 < 0
              || (int v90 = v37 + 1,
                  (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3 <= (unint64_t)(v37 + 1)))
            {
              exitFramework(45);
            }
            std::vector<int>::pointer v91 = v143.__end_;
            if (v143.__end_ >= v143.__end_cap_.__value_)
            {
              std::vector<int>::pointer v110 = v143.__begin_;
              int64_t v111 = v143.__end_ - v143.__begin_;
              unint64_t v112 = v111 + 1;
              if ((unint64_t)(v111 + 1) >> 62) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              int64_t v113 = (char *)v143.__end_cap_.__value_ - (char *)v143.__begin_;
              if (((char *)v143.__end_cap_.__value_ - (char *)v143.__begin_) >> 1 > v112) {
                unint64_t v112 = v113 >> 1;
              }
              BOOL v52 = (unint64_t)v113 >= 0x7FFFFFFFFFFFFFFCLL;
              unint64_t v114 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v52) {
                unint64_t v114 = v112;
              }
              if (v114)
              {
                unint64_t v114 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v114);
                std::vector<int>::pointer v110 = v143.__begin_;
                std::vector<int>::pointer v91 = v143.__end_;
              }
              else
              {
                uint64_t v115 = 0;
              }
              char v116 = (int *)(v114 + 4 * v111);
              int *v116 = v90;
              uint64_t v92 = v116 + 1;
              while (v91 != v110)
              {
                int v117 = *--v91;
                *--char v116 = v117;
              }
              v143.__begin_ = v116;
              v143.__end_ = v92;
              v143.__end_cap_.__value_ = (int *)(v114 + 4 * v115);
              if (v110) {
                operator delete(v110);
              }
            }
            else
            {
              *v143.__end_ = v90;
              uint64_t v92 = v91 + 1;
            }
            v143.__end_ = v92;
          }
          operator delete(v141);
        }
LABEL_133:
        uint64_t v34 = &v143;
      }
LABEL_134:
      bzero(*(void **)(*(void *)(a1 + 104) + 8 * v18), 4 * *(int *)(a1 + 348));
      std::vector<int>::pointer v118 = v34->__begin_;
      if (v34->__end_ != v34->__begin_)
      {
        unint64_t v119 = 0;
        while (1)
        {
          uint64_t v120 = v118[v119];
          uint64_t v121 = *(void *)(a1 + 304);
          if (!*(_DWORD *)(v121 + 4 * v120))
          {
            *(_DWORD *)(v121 + 4 * v120) = 1;
            uint64_t v122 = *(void *)(*(void *)(a1 + 80) + 8 * v120);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v122 + 256))(v122, v17);
          }
          uint64_t v123 = a7[1] != *a7 && **a7 == -1 ? (void **)(*(void *)(a1 + 536) + 24 * (int)v120 - 24) : &v147;
          uint64_t v124 = *(void *)(*(void *)(a1 + 80) + 8 * v120);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v124 + 224))(v124, a2, a3, v18, v123);
          uint64_t v125 = *(void *)(*(void *)(a1 + 80) + 8 * v120);
          long long v126 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v125 + 32))(v125);
          uint64_t v127 = *(void *)(a1 + 256);
          if ((*(_DWORD *)(a1 + 328) - 3) >= 2) {
            break;
          }
          uint64_t v128 = *(unsigned int *)(v127 + 4 * v120);
          if ((int)v128 >= 1)
          {
            float v129 = *(float *)(*(void *)(*v142 + 8 * v18) + 4 * ((int)v120 - 1));
            char v130 = *(float **)(*v126 + 8 * v18);
            uint64_t v131 = v128;
            do
            {
              *char v130 = v129 * *v130;
              ++v130;
              --v131;
            }
            while (v131);
LABEL_148:
            if ((int)v128 >= 1)
            {
              uint64_t v132 = *(int **)(*(void *)(*(void *)(a1 + 496) + 120) + 24 * ((int)v120 - 1));
              long long v133 = *(_DWORD **)(*v126 + 8 * v18);
              uint64_t v134 = *(void *)(*(void *)(a1 + 104) + 8 * v18);
              do
              {
                uint64_t v136 = *v132++;
                uint64_t v135 = v136;
                LODWORD(v136) = *v133++;
                *(_DWORD *)(v134 + 4 * v135) = v136;
                --v128;
              }
              while (v128);
            }
          }
          ++v119;
          std::vector<int>::pointer v118 = v34->__begin_;
          if (v119 >= v34->__end_ - v34->__begin_) {
            goto LABEL_152;
          }
        }
        uint64_t v128 = *(unsigned int *)(v127 + 4 * v120);
        goto LABEL_148;
      }
LABEL_152:
      uint64_t v137 = *(void *)(a1 + 104);
      vDSP_Length v138 = *(int *)(a1 + 348);
      float __C = 0.0;
      vDSP_sve(*(const float **)(v137 + 8 * v18), 1, &__C, v138);
      if (v143.__begin_)
      {
        v143.__end_ = v143.__begin_;
        operator delete(v143.__begin_);
      }
      if (__p)
      {
        v145 = __p;
        operator delete(__p);
      }
      if (++v18 == v17) {
        goto LABEL_157;
      }
    }
    int v79 = *(_DWORD *)(*(void *)(a1 + 400) + 4 * v18);
    uint64_t v80 = (int *)operator new(4uLL);
    *uint64_t v80 = v79;
    v143.__end_ = v80 + 1;
    v143.__end_cap_.__value_ = v80 + 1;
    v143.__begin_ = v80;
    goto LABEL_133;
  }
LABEL_157:
  if (v147)
  {
    float v148 = (char *)v147;
    operator delete(v147);
  }
}

void sub_192904D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  if (a21) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void ParallelSelector<signed char>::backward(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 8 * a5;
    uint64_t v9 = a5;
    do
    {
      uint64_t v10 = *(void *)(a1 + 504);
      int v11 = (*(uint64_t (**)(void))(***(void ***)(a1 + 80) + 264))(**(void **)(a1 + 80));
      bzero(*(void **)(v10 + v7), 4 * v11);
      v7 += 8;
    }
    while (v8 != v7);
    uint64_t v12 = 0;
    for (uint64_t i = 0; i != v9; ++i)
    {
      uint64_t v14 = *(int *)(a1 + 332);
      uint64_t v15 = *(void *)(*(void *)(a1 + 80) + 8 * v14);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v15 + 248))(v15, *(void *)(a1 + 472) + 24 * (int)v14, a3, i, *(unsigned int *)(*(void *)(a1 + 256) + 4 * v14), *(unsigned int *)(*(void *)(a1 + 256) + 4 * v14));
      uint64_t v16 = *(void *)(*(void *)(a1 + 80) + 8 * v14);
      uint64_t v17 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 48))(v16);
      memset(v31, 0, sizeof(v31));
      std::vector<VVector<float>>::__init_with_size[abi:ne180100]<VVector<float>*,VVector<float>*>(v31, *v17, v17[1], v17[1] - *v17);
      uint64_t v18 = *(void *)(a1 + 504);
      uint64_t v19 = (char *)v31[0];
      int v20 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 80) + 8 * v14) + 264))();
      float32_t v21 = VVector<float>::add<float>((float32x4_t **)(v18 + v12), (float32x4_t **)&v19[v12], v20);
      uint64_t v22 = *(int *)(*(void *)(a1 + 400) + 4 * i);
      uint64_t v23 = *(void *)(*(void *)(a1 + 80) + 8 * v22);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, float32_t))(*(void *)v23 + 248))(v23, *(void *)(a1 + 472) + 24 * *(int *)(a1 + 336), a3, i, *(unsigned int *)(a1 + 344), *(unsigned int *)(*(void *)(a1 + 256) + 4 * v22), v21);
      uint64_t v24 = *(void *)(*(void *)(a1 + 80) + 8 * v22);
      uint64_t v25 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(void *)v24 + 48))(v24);
      memset(v30, 0, sizeof(v30));
      std::vector<VVector<float>>::__init_with_size[abi:ne180100]<VVector<float>*,VVector<float>*>(v30, *v25, v25[1], v25[1] - *v25);
      uint64_t v26 = *(void *)(a1 + 504);
      float v27 = (char *)v30[0];
      uint64_t v28 = *(void *)(*(void *)(a1 + 80) + 8 * v22);
      int v29 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 264))(v28);
      VVector<float>::add<float>((float32x4_t **)(v26 + v12), (float32x4_t **)&v27[v12], v29);
      if (v27) {
        operator delete(v27);
      }
      if (v19) {
        operator delete(v19);
      }
      v12 += 8;
    }
  }
}

void sub_192905098(_Unwind_Exception *exception_object)
{
  if (v2) {
    operator delete(v2);
  }
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void ParallelSelector<signed char>::update()
{
}

uint64_t ParallelSelector<signed char>::setPredictionMode(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(result + 528) = a2;
  uint64_t v2 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      float result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 8 * v5) + 280))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 80);
    }
    while (v5 < (*(void *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t ParallelSelector<signed char>::noutputs(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  if ((unint64_t)(*(void *)(a1 + 88) - v1) < 9) {
    return 0;
  }
  LODWORD(v3) = 0;
  unint64_t v4 = 1;
  do
  {
    uint64_t v3 = (*(unsigned int (**)(void))(**(void **)(v1 + 8 * v4) + 272))(*(void *)(v1 + 8 * v4))
       + v3;
    ++v4;
    uint64_t v1 = *(void *)(a1 + 80);
  }
  while (v4 < (*(void *)(a1 + 88) - v1) >> 3);
  return v3;
}

void ParallelSelector<signed char>::rearrangeTargets(uint64_t a1, void *a2, void *a3, int a4, char a5)
{
  int v28 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1);
  unint64_t v26 = (a4 - 1);
  if (a4 >= 1)
  {
    unint64_t v9 = 0;
    uint64_t v10 = a4;
    do
    {
      if (a5)
      {
        if (a3[1] != *a3)
        {
          if (v9 >= v26) {
            int v11 = 2;
          }
          else {
            int v11 = **(_DWORD **)(*a3 + 24 * v9 + 24);
          }
          goto LABEL_21;
        }
        if (v28 >= 1)
        {
          int v11 = 0;
          uint64_t v15 = 0;
          float v17 = 1.1755e-38;
          do
          {
            uint64_t v16 = *(void *)(*a2 + 8 * v9);
            if (*(float *)(v16 + 4 * v15) > v17)
            {
              int v11 = v15;
              float v17 = *(float *)(v16 + 4 * v15);
            }
            ++v15;
          }
          while (v28 != v15);
          goto LABEL_21;
        }
      }
      else if (v28 >= 1)
      {
        int v11 = 0;
        uint64_t v12 = 0;
        float v14 = 1.1755e-38;
        do
        {
          uint64_t v13 = *(void *)(*a2 + 8 * v9);
          if (*(float *)(v13 + 4 * v12) > v14)
          {
            int v11 = v12;
            float v14 = *(float *)(v13 + 4 * v12);
          }
          ++v12;
        }
        while (v28 != v12);
        goto LABEL_21;
      }
      int v11 = 0;
LABEL_21:
      uint64_t v18 = *(void *)(a1 + 376);
      *(_DWORD *)(v18 + 4 * v9) = v11;
      uint64_t v19 = *(OutputCluster **)(a1 + 496);
      *(_DWORD *)(*(void *)(a1 + 400) + 4 * v9) = OutputCluster::getWordClass(v19, v11) + 1;
      *(_DWORD *)(*(void *)(a1 + 424) + 4 * v9) = OutputCluster::getWordClassIndex(v19, *(_DWORD *)(v18 + 4 * v9));
      uint64_t v20 = **(void **)(a1 + 200);
      int v21 = (*(uint64_t (**)(void))(***(void ***)(a1 + 80) + 272))();
      bzero(*(void **)(v20 + 8 * v9), 4 * v21);
      uint64_t v22 = *(void **)(a1 + 200);
      uint64_t v23 = *(int *)(*(void *)(a1 + 400) + 4 * v9);
      *(_DWORD *)(*(void *)(*v22 + 8 * v9) + 4 * v23 - 4) = 1065353216;
      uint64_t v24 = v22[3 * (int)v23];
      int v25 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 80) + 8 * v23) + 272))();
      bzero(*(void **)(v24 + 8 * v9), 4 * v25);
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 200) + 24 * *(int *)(*(void *)(a1 + 400) + 4 * v9))
                            + 8 * v9)
                + 4 * *(int *)(*(void *)(a1 + 424) + 4 * v9)) = 1065353216;
      ++v9;
    }
    while (v9 != v10);
  }
}

void ParallelSelector<signed char>::cleanupAllBuffers(void *a1)
{
  uint64_t v3 = a1[35];
  uint64_t v2 = a1[36];
  if (v2 == v3)
  {
    uint64_t v3 = a1[36];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      unint64_t v5 = *(void **)(v3 + 8 * v4);
      if (*v5)
      {
        MEMORY[0x192FF1690](*v5, 0x1000C8052888210);
        void *v5 = 0;
        uint64_t v3 = a1[35];
        uint64_t v2 = a1[36];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  a1[36] = v3;
  uint64_t v6 = a1[10];
  if (a1[11] != v6)
  {
    unint64_t v7 = 0;
    do
    {
      (*(void (**)(void))(**(void **)(v6 + 8 * v7) + 208))(*(void *)(v6 + 8 * v7));
      ++v7;
      uint64_t v6 = a1[10];
    }
    while (v7 < (a1[11] - v6) >> 3);
  }
  a1[14] = a1[13];
  a1[57] = a1[56];
  a1[64] = a1[63];
  std::vector<std::vector<int>>::__clear[abi:ne180100](a1 + 25);
  std::vector<std::vector<int>>::__clear[abi:ne180100](a1 + 59);
  a1[39] = a1[38];
}

void ParallelSelector<signed char>::allocAllBuffers(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  if (*(void *)(a1 + 88) != v2)
  {
    unint64_t v3 = 0;
    do
    {
      (*(void (**)(void))(**(void **)(v2 + 8 * v3) + 200))(*(void *)(v2 + 8 * v3));
      ++v3;
      uint64_t v2 = *(void *)(a1 + 80);
    }
    while (v3 < (*(void *)(a1 + 88) - v2) >> 3);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "From allocAllBuffers");
  ParallelSelector<float>::init(a1);
  if (v5 < 0) {
    operator delete(__p);
  }
}

void sub_192905630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ParallelSelector<signed char>::resetForNewBatch(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v1)
  {
    uint64_t v2 = result;
    unint64_t v3 = 0;
    do
    {
      float result = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 160))(*(void *)(v1 + 8 * v3));
      ++v3;
      uint64_t v1 = *(void *)(v2 + 80);
    }
    while (v3 < (*(void *)(v2 + 88) - v1) >> 3);
  }
  return result;
}

uint64_t ParallelSelector<signed char>::normalizeModel(uint64_t result, float a2)
{
  uint64_t v2 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      float result = (*(uint64_t (**)(void, float))(**(void **)(v2 + 8 * v5) + 120))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 80);
    }
    while (v5 < (*(void *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t ParallelSelector<signed char>::clipModel(uint64_t result, float a2)
{
  uint64_t v2 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      float result = (*(uint64_t (**)(void, float))(**(void **)(v2 + 8 * v5) + 112))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 80);
    }
    while (v5 < (*(void *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

void *ParallelSelector<signed char>::applyGradient(void *result, void *lpsrc)
{
  uint64_t v2 = (uint64_t)result;
  if (lpsrc)
  {
    uint64_t v3 = (uint64_t)result;
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(v2 + 80);
  if (*(void *)(v2 + 88) != v4)
  {
    unint64_t v5 = 0;
    do
    {
      float result = (void *)(*(uint64_t (**)(void, void))(**(void **)(v4 + 8 * v5) + 104))(*(void *)(v4 + 8 * v5), *(void *)(*(void *)(v3 + 80) + 8 * v5));
      ++v5;
      uint64_t v4 = *(void *)(v2 + 80);
    }
    while (v5 < (*(void *)(v2 + 88) - v4) >> 3);
  }
  return result;
}

void *ParallelSelector<signed char>::addGradient(void *result, void *lpsrc)
{
  uint64_t v2 = (uint64_t)result;
  if (lpsrc)
  {
    uint64_t v3 = (uint64_t)result;
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(v2 + 80);
  if (*(void *)(v2 + 88) != v4)
  {
    unint64_t v5 = 0;
    do
    {
      float result = (void *)(*(uint64_t (**)(void, void))(**(void **)(v4 + 8 * v5) + 96))(*(void *)(v4 + 8 * v5), *(void *)(*(void *)(v3 + 80) + 8 * v5));
      ++v5;
      uint64_t v4 = *(void *)(v2 + 80);
    }
    while (v5 < (*(void *)(v2 + 88) - v4) >> 3);
  }
  return result;
}

void *ParallelSelector<signed char>::compareModels(void *result, void *lpsrc, void *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = (uint64_t)result;
  if (lpsrc)
  {
    uint64_t v5 = (uint64_t)result;
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v5 = 0;
  if (a3)
  {
LABEL_3:
    uint64_t v3 = result;
  }
LABEL_4:
  uint64_t v6 = *(void *)(v4 + 80);
  if (*(void *)(v4 + 88) != v6)
  {
    unint64_t v7 = 0;
    do
    {
      float result = (void *)(*(uint64_t (**)(void, void, void))(**(void **)(v6 + 8 * v7) + 88))(*(void *)(v6 + 8 * v7), *(void *)(*(void *)(v5 + 80) + 8 * v7), *(void *)(v3[10] + 8 * v7));
      ++v7;
      uint64_t v6 = *(void *)(v4 + 80);
    }
    while (v7 < (*(void *)(v4 + 88) - v6) >> 3);
  }
  return result;
}

void *ParallelSelector<signed char>::subtractModels(void *result, void *lpsrc, void *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = (uint64_t)result;
  if (lpsrc)
  {
    uint64_t v5 = (uint64_t)result;
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v5 = 0;
  if (a3)
  {
LABEL_3:
    uint64_t v3 = result;
  }
LABEL_4:
  uint64_t v6 = *(void *)(v4 + 80);
  if (*(void *)(v4 + 88) != v6)
  {
    unint64_t v7 = 0;
    do
    {
      float result = (void *)(*(uint64_t (**)(void, void, void))(**(void **)(v6 + 8 * v7) + 80))(*(void *)(v6 + 8 * v7), *(void *)(*(void *)(v5 + 80) + 8 * v7), *(void *)(v3[10] + 8 * v7));
      ++v7;
      uint64_t v6 = *(void *)(v4 + 80);
    }
    while (v7 < (*(void *)(v4 + 88) - v6) >> 3);
  }
  return result;
}

uint64_t ParallelSelector<signed char>::write(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v5)
  {
    uint64_t v10 = result;
    unint64_t v11 = 0;
    do
    {
      float result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(v5 + 8 * v11) + 72))(*(void *)(v5 + 8 * v11), a2, a3, a4, a5);
      ++v11;
      uint64_t v5 = *(void *)(v10 + 80);
    }
    while (v11 < (*(void *)(v10 + 88) - v5) >> 3);
  }
  return result;
}

uint64_t ParallelSelector<signed char>::read(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v4)
  {
    uint64_t v8 = result;
    unint64_t v9 = 0;
    do
    {
      float result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v4 + 8 * v9) + 64))(*(void *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      uint64_t v4 = *(void *)(v8 + 80);
    }
    while (v9 < (*(void *)(v8 + 88) - v4) >> 3);
  }
  return result;
}

uint64_t ParallelSelector<signed char>::weightsAreNaN(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  if (*(void *)(a1 + 88) == v1) {
    return 0;
  }
  unint64_t v3 = 0;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 56))(*(void *)(v1 + 8 * v3));
    if (result) {
      break;
    }
    ++v3;
    uint64_t v1 = *(void *)(a1 + 80);
  }
  while (v3 < (*(void *)(a1 + 88) - v1) >> 3);
  return result;
}

uint64_t ParallelSelector<signed char>::inputDeltas(uint64_t a1)
{
  return a1 + 504;
}

uint64_t ParallelSelector<signed char>::deltas(uint64_t a1)
{
  return a1 + 448;
}

uint64_t ParallelSelector<signed char>::outputs(uint64_t a1)
{
  return a1 + 104;
}

void BatchNormalization<signed char>::~BatchNormalization(void *a1)
{
  BatchNormalization<signed char>::~BatchNormalization(a1);

  JUMPOUT(0x192FF16B0);
}

void *BatchNormalization<signed char>::~BatchNormalization(void *a1)
{
  *a1 = &unk_1EE3211B8;
  uint64_t v4 = a1 + 36;
  uint64_t v2 = (void *)a1[36];
  unint64_t v3 = (void *)v4[1];
  if (v3 == v2)
  {
    uint64_t v2 = v3;
    if (v3)
    {
LABEL_7:
      a1[37] = v2;
      operator delete(v2);
    }
  }
  else
  {
    unint64_t v5 = 0;
    do
    {
      if (*((void *)v2 + v5))
      {
        MEMORY[0x192FF1690](*((void *)v2 + v5), 0x1000C8052888210);
        uint64_t v2 = (void *)a1[36];
        unint64_t v3 = (void *)a1[37];
      }
      ++v5;
    }
    while (v5 < ((unsigned char *)v3 - (unsigned char *)v2) >> 3);
    if (v2) {
      goto LABEL_7;
    }
  }
  PTMutex::~PTMutex((PTMutex *)(a1 + 27));
  uint64_t v6 = (void *)a1[24];
  if (v6)
  {
    a1[25] = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)a1[21];
  if (v7)
  {
    a1[22] = v7;
    operator delete(v7);
  }
  *a1 = &unk_1EE3182B8;
  uint64_t v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

void BatchNormalization<signed char>::log2Probability()
{
}

void BatchNormalization<signed char>::computeError()
{
}

void *BatchNormalization<signed char>::setMaster(void *a1, void *lpsrc)
{
  if (!result) {
    __cxa_bad_cast();
  }
  a1[18] = result[18];
  a1[19] = result[19];
  a1[16] = result[16];
  a1[17] = result[17];
  return result;
}

int *BatchNormalization<signed char>::forward(int *result, void *a2, uint64_t a3, int a4)
{
  uint64_t v4 = a4 & 0xFFFFFF;
  if ((a4 & 0xFFFFFF) != 0)
  {
    uint64_t v6 = result;
    uint64_t v7 = 0;
    do
    {
      memmove(*(void **)(*((void *)v6 + 21) + 8 * v7), *(const void **)(*a2 + 8 * v7), 4 * v6[11]);
      int v8 = v6[11];
      unint64_t v9 = *(const void **)(*((void *)v6 + 21) + 8 * v7);
      if (v8 >= 1)
      {
        float v10 = *((float *)v6 + 12);
        unint64_t v11 = (float *)*((void *)v6 + 16);
        uint64_t v12 = (float *)*((void *)v6 + 17);
        uint64_t v13 = *(float **)(*((void *)v6 + 21) + 8 * v7);
        uint64_t v14 = v6[11];
        uint64_t v15 = (float *)*((void *)v6 + 18);
        uint64_t v16 = (float *)*((void *)v6 + 19);
        do
        {
          float v17 = *v11++;
          float v18 = v17;
          float v19 = *v12++;
          float v20 = sqrtf(v10 + v19);
          float v21 = *v15++;
          float v22 = v21;
          float v23 = *v16++;
          *uint64_t v13 = v23 + (float)((float)((float)(*v13 - v18) / v20) * v22);
          ++v13;
          --v14;
        }
        while (v14);
      }
      uint64_t result = (int *)memmove(*(void **)(*((void *)v6 + 24) + 8 * v7++), v9, 4 * v8);
    }
    while (v7 != v4);
  }
  return result;
}

void BatchNormalization<signed char>::backward()
{
}

uint64_t BatchNormalization<signed char>::noutputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t BatchNormalization<signed char>::ninputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t BatchNormalization<signed char>::cleanupAllBuffers(uint64_t result)
{
  uint64_t v1 = (void *)result;
  uint64_t v3 = *(void *)(result + 288);
  uint64_t v2 = *(void *)(result + 296);
  if (v2 == v3)
  {
    uint64_t v3 = *(void *)(result + 296);
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t result = *(void *)(v3 + 8 * v4);
      if (result)
      {
        uint64_t result = MEMORY[0x192FF1690](result, 0x1000C8052888210);
        uint64_t v3 = v1[36];
        uint64_t v2 = v1[37];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  v1[37] = v3;
  v1[22] = v1[21];
  v1[25] = v1[24];
  return result;
}

void BatchNormalization<signed char>::allocAllBuffers(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "BatchNormalization, from allocAll");
  std::vector<VVector<float>>::resize((char **)(a1 + 168), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 192), maxFeatureVectors);
  if (!*(unsigned char *)(a1 + 161)) {
    operator new[]();
  }
  if (maxFeatureVectors >= 1) {
    operator new[]();
  }
  if (v3 < 0) {
    operator delete(__p);
  }
}

void sub_192906788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float **BatchNormalization<signed char>::write(uint64_t a1, FILE *__stream, int *a3, uint64_t a4, unsigned int a5)
{
  int __ptr = *(_DWORD *)(a1 + 44);
  fwrite(&__ptr, 4uLL, 1uLL, __stream);
  *a3 += 4;
  VVector<float>::write((float **)(a1 + 128), __stream, a3, 8, a5, *(_DWORD *)(a1 + 44));
  VVector<float>::write((float **)(a1 + 136), __stream, a3, 8, a5, *(_DWORD *)(a1 + 44));
  VVector<float>::write((float **)(a1 + 144), __stream, a3, 8, a5, *(_DWORD *)(a1 + 44));
  int v9 = *(_DWORD *)(a1 + 44);

  return VVector<float>::write((float **)(a1 + 152), __stream, a3, 8, a5, v9);
}

uint64_t BatchNormalization<signed char>::read(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(int *)(a2 + 72);
  uint64_t v7 = (int *)(*(void *)a2 + v6);
  if ((unint64_t)v7 <= *(void *)a2 + *(void *)(a2 + 8) - 4)
  {
    int v8 = *v7;
    *(_DWORD *)(a2 + 72) = v6 + 4;
  }
  else
  {
    int v8 = 0;
  }
  if (*(_DWORD *)(a1 + 44) != v8) {
    exitFramework(3);
  }
  VVector<float>::read((signed __int8 **)(a1 + 128), a2, *a3, *(unsigned __int8 *)(a1 + 161), (signed __int8 **)8, v8);
  VVector<float>::read((signed __int8 **)(a1 + 136), a2, *a3, *(unsigned __int8 *)(a1 + 161), (signed __int8 **)8, *(_DWORD *)(a1 + 44));
  VVector<float>::read((signed __int8 **)(a1 + 144), a2, *a3, *(unsigned __int8 *)(a1 + 161), (signed __int8 **)8, *(_DWORD *)(a1 + 44));
  int v9 = *a3;
  int v10 = *(unsigned __int8 *)(a1 + 161);
  int v11 = *(_DWORD *)(a1 + 44);

  return VVector<float>::read((signed __int8 **)(a1 + 152), a2, v9, v10, (signed __int8 **)8, v11);
}

uint64_t BatchNormalization<signed char>::weightsAreNaN()
{
  return 0;
}

void BatchNormalization<signed char>::inputDeltas()
{
}

void BatchNormalization<signed char>::deltas()
{
}

uint64_t BatchNormalization<signed char>::outputs(uint64_t a1)
{
  return a1 + 192;
}

uint64_t BatchNormalization<signed char>::inputs(uint64_t a1)
{
  return a1 + 168;
}

void BatchNormalization<signed char>::targets()
{
}

void GRU<signed char>::init()
{
}

void sub_1929092AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  SparseMatrix<float>::~SparseMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void MMatrix<signed char>::MMatrix()
{
}

void VVector<signed char>::randomize(void *a1, int a2)
{
  if (a2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = a2;
    do
    {
      rgen();
      float v6 = (float)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v5);
      rgen();
      *(unsigned char *)(*a1 + v3++) = (int)(float)((float)((float)(v6 * 2.3283e-10) * 0.2) + -0.1);
    }
    while (v4 != v3);
  }
}

void GRU<signed char>::~GRU(uint64_t a1)
{
  GRU<signed char>::~GRU(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t GRU<signed char>::~GRU(uint64_t a1)
{
  *(void *)a1 = &unk_1EE322538;
  GRU<signed char>::cleanupAllBuffers((void *)a1);
  uint64_t v2 = *(void **)(a1 + 2064);
  if (v2)
  {
    *(void *)(a1 + 2072) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 2040);
  if (v3)
  {
    *(void *)(a1 + 2048) = v3;
    operator delete(v3);
  }
  PTMutex::~PTMutex((PTMutex *)(a1 + 1960));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1888));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1816));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1744));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1672));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1600));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1528));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1456));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1384));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1312));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1240));
  SparseMatrix<float>::~SparseMatrix(a1 + 1000);
  SparseMatrix<float>::~SparseMatrix(a1 + 880);
  SparseMatrix<float>::~SparseMatrix(a1 + 760);
  uint64_t v4 = *(void **)(a1 + 728);
  if (v4)
  {
    *(void *)(a1 + 736) = v4;
    operator delete(v4);
  }
  unint64_t v5 = *(void **)(a1 + 704);
  if (v5)
  {
    *(void *)(a1 + 712) = v5;
    operator delete(v5);
  }
  float v6 = *(void **)(a1 + 680);
  if (v6)
  {
    *(void *)(a1 + 688) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 656);
  if (v7)
  {
    *(void *)(a1 + 664) = v7;
    operator delete(v7);
  }
  int v8 = *(void **)(a1 + 632);
  if (v8)
  {
    *(void *)(a1 + 640) = v8;
    operator delete(v8);
  }
  int v9 = *(void **)(a1 + 608);
  if (v9)
  {
    *(void *)(a1 + 616) = v9;
    operator delete(v9);
  }
  int v10 = *(void **)(a1 + 544);
  if (v10)
  {
    *(void *)(a1 + 552) = v10;
    operator delete(v10);
  }
  int v11 = *(void **)(a1 + 520);
  if (v11)
  {
    *(void *)(a1 + 528) = v11;
    operator delete(v11);
  }
  uint64_t v12 = *(void **)(a1 + 496);
  if (v12)
  {
    *(void *)(a1 + 504) = v12;
    operator delete(v12);
  }
  uint64_t v13 = *(void **)(a1 + 472);
  if (v13)
  {
    *(void *)(a1 + 480) = v13;
    operator delete(v13);
  }
  uint64_t v14 = *(void **)(a1 + 448);
  if (v14)
  {
    *(void *)(a1 + 456) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void **)(a1 + 424);
  if (v15)
  {
    *(void *)(a1 + 432) = v15;
    operator delete(v15);
  }
  uint64_t v24 = (void **)(a1 + 208);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v24);
  uint64_t v16 = *(void **)(a1 + 184);
  if (v16)
  {
    *(void *)(a1 + 192) = v16;
    operator delete(v16);
  }
  float v17 = *(void **)(a1 + 160);
  if (v17)
  {
    *(void *)(a1 + 168) = v17;
    operator delete(v17);
  }
  float v18 = *(void **)(a1 + 136);
  if (v18)
  {
    *(void *)(a1 + 144) = v18;
    operator delete(v18);
  }
  float v19 = *(void **)(a1 + 112);
  if (v19)
  {
    *(void *)(a1 + 120) = v19;
    operator delete(v19);
  }
  float v20 = *(void **)(a1 + 88);
  if (v20)
  {
    *(void *)(a1 + 96) = v20;
    operator delete(v20);
  }
  float v21 = *(void **)(a1 + 64);
  if (v21)
  {
    *(void *)(a1 + 72) = v21;
    operator delete(v21);
  }
  *(void *)a1 = &unk_1EE3182B8;
  float v22 = *(void **)(a1 + 8);
  if (v22)
  {
    *(void *)(a1 + 16) = v22;
    operator delete(v22);
  }
  return a1;
}

uint64_t GRU<signed char>::cleanupAllBuffers(void *a1)
{
  uint64_t v2 = a1[256];
  uint64_t v3 = a1[255];
  if (v2 == v3)
  {
    uint64_t v3 = a1[256];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v3 + 8 * v4);
      if (v5)
      {
        MEMORY[0x192FF1690](v5, 0x1000C8052888210);
        uint64_t v2 = a1[256];
        uint64_t v3 = a1[255];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  uint64_t v6 = a1[259];
  uint64_t v7 = a1[258];
  if (v6 == v7)
  {
    uint64_t v7 = a1[259];
  }
  else
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(v7 + 8 * v8);
      if (v9)
      {
        MEMORY[0x192FF1690](v9, 0x1000C8077774924);
        uint64_t v6 = a1[259];
        uint64_t v7 = a1[258];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
    uint64_t v3 = a1[255];
  }
  a1[256] = v3;
  a1[259] = v7;
  SparseMatrix<float>::cleanupAllBuffers(a1 + 95);
  SparseMatrix<float>::cleanupAllBuffers(a1 + 125);

  return SparseMatrix<float>::cleanupAllBuffers(a1 + 110);
}

void GRU<signed char>::log2Probability()
{
}

void GRU<signed char>::computeError()
{
}

void GRU<signed char>::updateFrom(uint64_t a1, void *lpsrc)
{
  if (!*(_DWORD *)(a1 + 2036))
  {
    exitFramework(34);
  }
  exitFramework(1);
}

char *GRU<signed char>::setMaster(uint64_t a1, void *lpsrc)
{
  if (*(_DWORD *)(a1 + 2036) != 1) {
    exitFramework(1);
  }
  if (!result) {
    __cxa_bad_cast();
  }
  *(void *)(a1 + 328) = result + 232;
  *(void *)(a1 + 336) = result + 240;
  *(void *)(a1 + 344) = result + 248;
  *(void *)(a1 + 352) = result + 256;
  *(void *)(a1 + 360) = result + 264;
  *(void *)(a1 + 368) = result + 272;
  *(void *)(a1 + 376) = result + 280;
  *(void *)(a1 + 384) = result + 288;
  *(void *)(a1 + 392) = result + 296;
  *(void *)(a1 + 400) = result + 304;
  *(void *)(a1 + 408) = result + 312;
  *(void *)(a1 + 416) = result + 320;
  return result;
}

uint64_t GRU<signed char>::reverseBackward(unsigned char *a1)
{
  a1[2088] = 1;
  uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 296))(a1);
  a1[2088] = 0;
  return result;
}

uint64_t GRU<signed char>::reverseForward(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  a1[2088] = 1;
  {
    uint64_t v13 = a6;
    uint64_t v12 = a5;
    unsigned int v11 = a4;
    uint64_t v9 = a2;
    uint64_t v10 = a3;
    a2 = v9;
    a3 = v10;
    a4 = v11;
    a5 = v12;
    a6 = v13;
    if (v8)
    {
      GRU<signed char>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy = 0;
      unk_1E9307B80 = 0;
      qword_1E9307B88 = 0;
      __cxa_atexit((void (*)(void *))std::vector<int>::~vector[abi:ne180100], &GRU<signed char>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy, &dword_1920CB000);
      a2 = v9;
      a3 = v10;
      a4 = v11;
      a5 = v12;
      a6 = v13;
    }
  }
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 304))(a1, a2, a3, a4, a5, a6, &GRU<signed char>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy);
  a1[2088] = 0;
  return result;
}

void GRU<signed char>::forward(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5)
{
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  if (a3[1] == *a3 || *(int *)(a1 + 56) < 1) {
    int v107 = 0;
  }
  else {
    int v107 = (**(uint64_t (***)(uint64_t))a1)(a1);
  }
  uint64_t v8 = *(void *)(a1 + 2096);
  if (!v8 || (float v9 = *(float *)(v8 + 604), v9 <= 0.0)) {
    float v9 = 50.0;
  }
  std::string __p = 0;
  long long v122 = 0uLL;
  i2s(&v120);
  uint64_t v10 = std::string::insert(&v120, 0, "GRU Forward W_z[");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v124.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  uint64_t v12 = std::string::append(&v124, "] WGZ:");
  uint64_t v13 = (void *)v12->__r_.__value_.__r.__words[0];
  v123[0] = (void *)v12->__r_.__value_.__l.__size_;
  *(void **)((char *)v123 + 7) = *(void **)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
  char v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v122) < 0) {
    operator delete(__p);
  }
  std::string __p = v13;
  *(void **)&long long v122 = v123[0];
  *(void **)((char *)&v122 + 7) = *(void **)((char *)v123 + 7);
  HIBYTE(v122) = v14;
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v124.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v120.__r_.__value_.__l.__data_);
  }
  if (v122 >= 0) {
    p_p = (char *)&__p;
  }
  else {
    p_p = (char *)__p;
  }
  MMatrix<signed char>::print(*(char ***)(a1 + 328), p_p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 10);
  i2s(&v120);
  uint64_t v16 = std::string::insert(&v120, 0, "GRU Forward W_r[");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v124.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  float v18 = std::string::append(&v124, "] WGR:");
  float v19 = (void *)v18->__r_.__value_.__r.__words[0];
  v123[0] = (void *)v18->__r_.__value_.__l.__size_;
  *(void **)((char *)v123 + 7) = *(void **)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
  char v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v122) < 0) {
    operator delete(__p);
  }
  std::string __p = v19;
  *(void **)&long long v122 = v123[0];
  *(void **)((char *)&v122 + 7) = *(void **)((char *)v123 + 7);
  HIBYTE(v122) = v20;
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v124.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v120.__r_.__value_.__l.__data_);
  }
  if (v122 >= 0) {
    float v21 = (char *)&__p;
  }
  else {
    float v21 = (char *)__p;
  }
  MMatrix<signed char>::print(*(char ***)(a1 + 336), v21, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 10);
  i2s(&v120);
  float v22 = std::string::insert(&v120, 0, "GRU Forward W_o[");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v124.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  uint64_t v24 = std::string::append(&v124, "] WGO:");
  int v25 = (void *)v24->__r_.__value_.__r.__words[0];
  v123[0] = (void *)v24->__r_.__value_.__l.__size_;
  *(void **)((char *)v123 + 7) = *(void **)((char *)&v24->__r_.__value_.__r.__words[1] + 7);
  char v26 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v122) < 0) {
    operator delete(__p);
  }
  std::string __p = v25;
  *(void **)&long long v122 = v123[0];
  *(void **)((char *)&v122 + 7) = *(void **)((char *)v123 + 7);
  HIBYTE(v122) = v26;
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v124.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v120.__r_.__value_.__l.__data_);
  }
  if (v122 >= 0) {
    float v27 = (char *)&__p;
  }
  else {
    float v27 = (char *)__p;
  }
  MMatrix<signed char>::print(*(char ***)(a1 + 344), v27, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 10);
  i2s(&v120);
  int v28 = std::string::insert(&v120, 0, "GRU Forward R_z[");
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v124.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  unint64_t v30 = std::string::append(&v124, "] RGZ:");
  float v31 = (void *)v30->__r_.__value_.__r.__words[0];
  v123[0] = (void *)v30->__r_.__value_.__l.__size_;
  *(void **)((char *)v123 + 7) = *(void **)((char *)&v30->__r_.__value_.__r.__words[1] + 7);
  char v32 = HIBYTE(v30->__r_.__value_.__r.__words[2]);
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v122) < 0) {
    operator delete(__p);
  }
  std::string __p = v31;
  *(void **)&long long v122 = v123[0];
  *(void **)((char *)&v122 + 7) = *(void **)((char *)v123 + 7);
  HIBYTE(v122) = v32;
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v124.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v120.__r_.__value_.__l.__data_);
  }
  if (v122 >= 0) {
    float v33 = (char *)&__p;
  }
  else {
    float v33 = (char *)__p;
  }
  MMatrix<signed char>::print(*(char ***)(a1 + 352), v33, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 10);
  i2s(&v120);
  uint64_t v34 = std::string::insert(&v120, 0, "GRU Forward R_r[");
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v124.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  float v36 = std::string::append(&v124, "] RGR:");
  int v37 = (void *)v36->__r_.__value_.__r.__words[0];
  v123[0] = (void *)v36->__r_.__value_.__l.__size_;
  *(void **)((char *)v123 + 7) = *(void **)((char *)&v36->__r_.__value_.__r.__words[1] + 7);
  char v38 = HIBYTE(v36->__r_.__value_.__r.__words[2]);
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v122) < 0) {
    operator delete(__p);
  }
  std::string __p = v37;
  *(void **)&long long v122 = v123[0];
  *(void **)((char *)&v122 + 7) = *(void **)((char *)v123 + 7);
  HIBYTE(v122) = v38;
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v124.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v120.__r_.__value_.__l.__data_);
  }
  if (v122 >= 0) {
    uint64_t v39 = (char *)&__p;
  }
  else {
    uint64_t v39 = (char *)__p;
  }
  MMatrix<signed char>::print(*(char ***)(a1 + 360), v39, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 10);
  i2s(&v120);
  int v40 = std::string::insert(&v120, 0, "GRU Forward R_o[");
  long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v124.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  uint64_t v42 = std::string::append(&v124, "] RGO:");
  int v43 = (void *)v42->__r_.__value_.__r.__words[0];
  v123[0] = (void *)v42->__r_.__value_.__l.__size_;
  *(void **)((char *)v123 + 7) = *(void **)((char *)&v42->__r_.__value_.__r.__words[1] + 7);
  char v44 = HIBYTE(v42->__r_.__value_.__r.__words[2]);
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v122) < 0) {
    operator delete(__p);
  }
  std::string __p = v43;
  *(void **)&long long v122 = v123[0];
  *(void **)((char *)&v122 + 7) = *(void **)((char *)v123 + 7);
  HIBYTE(v122) = v44;
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v124.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v120.__r_.__value_.__l.__data_);
  }
  if (v122 >= 0) {
    uint64_t v45 = (char *)&__p;
  }
  else {
    uint64_t v45 = (char *)__p;
  }
  MMatrix<signed char>::print(*(char ***)(a1 + 368), v45, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 10);
  uint64_t v46 = *(void *)(a1 + 2096);
  if (v46 && *(unsigned char *)(v46 + 244))
  {
    i2s(&v120);
    int v47 = std::string::insert(&v120, 0, "GRU Forward B_z[");
    long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v124.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    uint64_t v49 = std::string::append(&v124, "] :");
    unint64_t v50 = (void *)v49->__r_.__value_.__r.__words[0];
    v123[0] = (void *)v49->__r_.__value_.__l.__size_;
    *(void **)((char *)v123 + 7) = *(void **)((char *)&v49->__r_.__value_.__r.__words[1] + 7);
    char v51 = HIBYTE(v49->__r_.__value_.__r.__words[2]);
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v122) < 0) {
      operator delete(__p);
    }
    std::string __p = v50;
    *(void **)&long long v122 = v123[0];
    *(void **)((char *)&v122 + 7) = *(void **)((char *)v123 + 7);
    HIBYTE(v122) = v51;
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v124.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v120.__r_.__value_.__l.__data_);
    }
    if (v122 >= 0) {
      BOOL v52 = (char *)&__p;
    }
    else {
      BOOL v52 = (char *)__p;
    }
    VVector<signed char>::print(*(char ***)(a1 + 376), v52, *(_DWORD *)(a1 + 52));
    i2s(&v120);
    unint64_t v53 = std::string::insert(&v120, 0, "GRU Forward B_r[");
    long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    v124.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    float v55 = std::string::append(&v124, "] :");
    float v56 = (void *)v55->__r_.__value_.__r.__words[0];
    v123[0] = (void *)v55->__r_.__value_.__l.__size_;
    *(void **)((char *)v123 + 7) = *(void **)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
    char v57 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v122) < 0) {
      operator delete(__p);
    }
    std::string __p = v56;
    *(void **)&long long v122 = v123[0];
    *(void **)((char *)&v122 + 7) = *(void **)((char *)v123 + 7);
    HIBYTE(v122) = v57;
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v124.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v120.__r_.__value_.__l.__data_);
    }
    if (v122 >= 0) {
      uint64_t v58 = (char *)&__p;
    }
    else {
      uint64_t v58 = (char *)__p;
    }
    VVector<signed char>::print(*(char ***)(a1 + 384), v58, *(_DWORD *)(a1 + 52));
    i2s(&v120);
    int64_t v59 = std::string::insert(&v120, 0, "GRU Forward B_o[");
    long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
    v124.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v60;
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    BOOL v61 = std::string::append(&v124, "] :");
    uint64_t v62 = (void *)v61->__r_.__value_.__r.__words[0];
    v123[0] = (void *)v61->__r_.__value_.__l.__size_;
    *(void **)((char *)v123 + 7) = *(void **)((char *)&v61->__r_.__value_.__r.__words[1] + 7);
    char v63 = HIBYTE(v61->__r_.__value_.__r.__words[2]);
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v122) < 0) {
      operator delete(__p);
    }
    std::string __p = v62;
    *(void **)&long long v122 = v123[0];
    *(void **)((char *)&v122 + 7) = *(void **)((char *)v123 + 7);
    HIBYTE(v122) = v63;
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v124.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v120.__r_.__value_.__l.__data_);
    }
    if (v122 >= 0) {
      float v64 = (char *)&__p;
    }
    else {
      float v64 = (char *)__p;
    }
    VVector<signed char>::print(*(char ***)(a1 + 392), v64, *(_DWORD *)(a1 + 52));
  }
  unsigned int v65 = a5 != 0;
  if ((a4 & 0xFFFFFFu) > v65)
  {
    float v66 = -v9;
    if (*(unsigned char *)(a1 + 2088)) {
      int v67 = (a4 & 0xFFFFFF) + ~v65;
    }
    else {
      int v67 = a5 != 0;
    }
    if (*(unsigned char *)(a1 + 2088)) {
      int v68 = 1;
    }
    else {
      int v68 = -1;
    }
    if (*(unsigned char *)(a1 + 2088)) {
      BOOL v69 = v67 < (a4 & 0xFFFFFF) - 1;
    }
    else {
      BOOL v69 = v67 > 0;
    }
    uint64_t v70 = v67;
    memmove(*(void **)(*(void *)(a1 + 64) + 8 * v67), *(const void **)(*a2 + 8 * v67), 4 * *(int *)(a1 + 44));
    if (*(unsigned char *)(a1 + 40)) {
      *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8 * v67) + 4 * *(int *)(a1 + 48) - 4) = 1065353216;
    }
    VVector<float>::print((float **)(*(void *)(a1 + 112) + 8 * (v67 + v68)), "GRU output t-1 : ", *(_DWORD *)(a1 + 52));
    VVector<float>::print((float **)(*(void *)(a1 + 64) + 8 * v67), "GRU input t: ", *(_DWORD *)(a1 + 44));
    if (v107)
    {
      int v71 = *(unsigned __int8 *)(a1 + 40);
      int v72 = *(_DWORD *)(a1 + 48);
      uint64_t v73 = *(_DWORD **)(*(void *)(a1 + 208) + 24 * v67);
      _DWORD *v73 = **(_DWORD **)(*a3 + 24 * v67);
      if (v71) {
        v73[1] = v72 - 1;
      }
    }
    bzero(*(void **)(*(void *)(a1 + 424) + 8 * v67), 4 * *(int *)(a1 + 52));
    bzero(*(void **)(*(void *)(a1 + 448) + 8 * v67), 4 * *(int *)(a1 + 52));
    bzero(*(void **)(*(void *)(a1 + 472) + 8 * v67), 4 * *(int *)(a1 + 52));
    uint64_t v74 = *(void *)(a1 + 2096);
    if (v74)
    {
      if (!*(unsigned char *)(v74 + 20))
      {
        int v103 = *(_DWORD *)(v74 + 40);
        if ((v103 == 4 || v103 == 2) && *(_DWORD *)(v74 + 44) == 3)
        {
          uint64_t v104 = *(void *)(a1 + 208) + 24 * v67;
          memset(&v120, 0, sizeof(v120));
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v120, *(const void **)v104, *(void *)(v104 + 8), (uint64_t)(*(void *)(v104 + 8) - *(void *)v104) >> 2);
          if (!*(void *)(a1 + 600)) {
            operator new[]();
          }
          VVector<float>::internalMul();
        }
      }
    }
    sprintf((char *)&v124, "GRU[t=%d] input/source forwardNew1() vec ", v67);
    VVector<float>::print((float **)(*(void *)(a1 + 64) + 8 * v67), (char *)&v124, *(_DWORD *)(a1 + 48));
    uint64_t v75 = *(void *)(a1 + 424);
    uint64_t v76 = *(void *)(a1 + 64);
    uint64_t v77 = *(uint64_t **)(a1 + 328);
    uint64_t v78 = *(void *)(a1 + 208) + 24 * (int)v70;
    memset(v123, 0, sizeof(v123));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v123, *(const void **)v78, *(void *)(v78 + 8), (uint64_t)(*(void *)(v78 + 8) - *(void *)v78) >> 2);
    GRU<signed char>::computeXTimesWSparseOrDense(a1, v107, (float32x4_t **)(v75 + 8 * v70), v76 + 8 * v70, v77, v123[0], (uint64_t)v123[1], *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
    if (v123[0])
    {
      v123[1] = v123[0];
      operator delete(v123[0]);
    }
    uint64_t v79 = *(void *)(a1 + 2096);
    std::string::basic_string[abi:ne180100]<0>(&v118, "gzx");
    if (!v79 || !*(unsigned char *)(v79 + 244))
    {
      if (v119 < 0) {
        operator delete(v118);
      }
      if (v69) {
        VVector<float>::internalMul();
      }
      uint64_t v80 = *(void *)(a1 + 424);
      int v81 = *(_DWORD *)(a1 + 52);
      float v82 = *(float **)(v80 + 8 * v70);
      if (v81 >= 1)
      {
        uint64_t v83 = *(unsigned int *)(a1 + 52);
        do
        {
          float v84 = -v9;
          if (*v82 < v66 || (float v84 = v9, *v82 > v9)) {
            *float v82 = v84;
          }
          ++v82;
          --v83;
        }
        while (v83);
        float v82 = *(float **)(v80 + 8 * v70);
      }
      VVector<float>::applyForwardActivation((float **)(*(void *)(a1 + 496) + 8 * v70), v82, v81, *(_DWORD *)(a1 + 568));
      uint64_t v85 = *(void *)(a1 + 448);
      uint64_t v86 = *(void *)(a1 + 64);
      int64_t v87 = *(uint64_t **)(a1 + 336);
      uint64_t v88 = *(void *)(a1 + 208) + 24 * (int)v70;
      char v116 = 0;
      uint64_t v117 = 0;
      uint64_t v115 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v115, *(const void **)v88, *(void *)(v88 + 8), (uint64_t)(*(void *)(v88 + 8) - *(void *)v88) >> 2);
      GRU<signed char>::computeXTimesWSparseOrDense(a1, v107, (float32x4_t **)(v85 + 8 * v70), v86 + 8 * v70, v87, v115, (uint64_t)v116, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
      if (v115)
      {
        char v116 = v115;
        operator delete(v115);
      }
      uint64_t v89 = *(void *)(a1 + 2096);
      std::string::basic_string[abi:ne180100]<0>(&v113, "grx");
      if (!v89 || !*(unsigned char *)(v89 + 244))
      {
        if (v114 < 0) {
          operator delete(v113);
        }
        uint64_t v90 = *(void *)(a1 + 448);
        int v91 = *(_DWORD *)(a1 + 52);
        uint64_t v92 = *(float **)(v90 + 8 * v70);
        if (v91 >= 1)
        {
          uint64_t v93 = *(unsigned int *)(a1 + 52);
          do
          {
            float v94 = -v9;
            if (*v92 < v66 || (float v94 = v9, *v92 > v9)) {
              *uint64_t v92 = v94;
            }
            ++v92;
            --v93;
          }
          while (v93);
          uint64_t v92 = *(float **)(v90 + 8 * v70);
        }
        VVector<float>::applyForwardActivation((float **)(*(void *)(a1 + 520) + 8 * v70), v92, v91, *(_DWORD *)(a1 + 572));
        bzero(*(void **)(*(void *)(a1 + 88) + 8 * v70), 4 * *(int *)(a1 + 52));
        uint64_t v95 = *(unsigned int *)(a1 + 52);
        if ((int)v95 >= 1)
        {
          uint64_t v96 = *(float **)(*(void *)(a1 + 88) + 8 * v70);
          do
          {
            float v97 = -v9;
            if (*v96 < v66 || (float v97 = v9, *v96 > v9)) {
              *uint64_t v96 = v97;
            }
            ++v96;
            --v95;
          }
          while (v95);
        }
        uint64_t v98 = *(void *)(a1 + 472);
        uint64_t v99 = *(void *)(a1 + 64);
        std::vector<int>::pointer v100 = *(uint64_t **)(a1 + 344);
        uint64_t v101 = *(void *)(a1 + 208) + 24 * (int)v70;
        int64_t v111 = 0;
        uint64_t v112 = 0;
        std::vector<int>::pointer v110 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v110, *(const void **)v101, *(void *)(v101 + 8), (uint64_t)(*(void *)(v101 + 8) - *(void *)v101) >> 2);
        GRU<signed char>::computeXTimesWSparseOrDense(a1, v107, (float32x4_t **)(v98 + 8 * v70), v99 + 8 * v70, v100, v110, (uint64_t)v111, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
        if (v110)
        {
          int64_t v111 = v110;
          operator delete(v110);
        }
        uint64_t v102 = *(void *)(a1 + 2096);
        std::string::basic_string[abi:ne180100]<0>(&v108, "gox");
        if (!v102 || !*(unsigned char *)(v102 + 244))
        {
          if (v109 < 0) {
            operator delete(v108);
          }
          VVector<float>::internalMul();
        }
        exitFramework(76);
      }
      exitFramework(76);
    }
    exitFramework(76);
  }
  if (SHIBYTE(v122) < 0) {
    operator delete(__p);
  }
}

void sub_19290AF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (__p) {
    operator delete(__p);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  _Unwind_Resume(a1);
}

void MMatrix<signed char>::print(char **a1, char *a2, int a3, int a4, int a5)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  sprintf(__s, "0x%lx", *a1);
  std::string::basic_string[abi:ne180100]<0>(&v51, __s);
  float v9 = std::string::insert(&v51, 0, " (");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  long long v11 = std::string::append(&v44, ") ");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  int64_t v53 = v11->__r_.__value_.__r.__words[2];
  long long v52 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (a4 * a3 >= a5) {
    uint64_t v13 = a5;
  }
  else {
    uint64_t v13 = (a4 * a3);
  }
  if ((int)v13 <= 0) {
    goto LABEL_12;
  }
  char v14 = *a1;
  LOBYTE(v15) = 1;
  uint64_t v16 = v13;
  do
  {
    char v17 = *v14++;
    int v15 = ((v17 + 1) < 3u) & v15;
    --v16;
  }
  while (v16);
  if (v15) {
LABEL_12:
  }
    float v18 = "yes";
  else {
    float v18 = "no";
  }
  std::string::basic_string[abi:ne180100]<0>(&v50, v18);
  float v19 = std::string::insert(&v50, 0, " (");
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  float v21 = std::string::append(&v44, ") ");
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v44);
  std::string::basic_string[abi:ne180100]<0>(&v41, a2);
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v23 = &v51;
  }
  else {
    long long v23 = (std::string *)v51.__r_.__value_.__r.__words[0];
  }
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v51.__r_.__value_.__l.__size_;
  }
  int v25 = std::string::append(&v41, (const std::string::value_type *)v23, size);
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if (v53 >= 0) {
    float v27 = (const std::string::value_type *)&v52;
  }
  else {
    float v27 = (const std::string::value_type *)v52;
  }
  if (v53 >= 0) {
    std::string::size_type v28 = HIBYTE(v53);
  }
  else {
    std::string::size_type v28 = *((void *)&v52 + 1);
  }
  long long v29 = std::string::append(&v42, v27, v28);
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  float v31 = std::string::append(&v43, "[");
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if ((int)v13 >= 1)
  {
    for (uint64_t i = 0; i != v13; ++i)
    {
      memset(&v43, 0, sizeof(v43));
      std::ios_base::clear((std::ios_base *)((char *)&v44 + *(void *)(v44.__r_.__value_.__r.__words[0] - 24)), 0);
      *(void *)&v46[*(void *)(v44.__r_.__value_.__r.__words[2] - 24)] = 6;
      std::ostream::operator<<();
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v44, (uint64_t)&v43);
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v34 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v34 = v43.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v42, v34 + 1);
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v35 = &v42;
      }
      else {
        long long v35 = (std::string *)v42.__r_.__value_.__r.__words[0];
      }
      if (v34)
      {
        if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          float v36 = &v43;
        }
        else {
          float v36 = (std::string *)v43.__r_.__value_.__r.__words[0];
        }
        memmove(v35, v36, v34);
      }
      *(_WORD *)((char *)&v35->__r_.__value_.__l.__data_ + v34) = 32;
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v37 = &v42;
      }
      else {
        int v37 = (std::string *)v42.__r_.__value_.__r.__words[0];
      }
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v38 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v38 = v42.__r_.__value_.__l.__size_;
      }
      std::string::append(&v50, (const std::string::value_type *)v37, v38);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v43.__r_.__value_.__l.__data_);
      }
    }
  }
  std::string::append(&v50, " ]");
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  v44.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA408];
  std::string::size_type v39 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(std::string::size_type *)((char *)v44.__r_.__value_.__r.__words + *(void *)(v44.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v44.__r_.__value_.__r.__words[2] = v39;
  uint64_t v45 = MEMORY[0x1E4FBA470] + 16;
  if (v48 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x192FF15B0](&v49);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v53) < 0) {
    operator delete((void *)v52);
  }
}

void sub_19290B618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a64 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a23);
  if (a71 < 0) {
    operator delete(a66);
  }
  if (*(char *)(v71 - 217) < 0) {
    operator delete(*(void **)(v71 - 240));
  }
  _Unwind_Resume(a1);
}

void VVector<signed char>::print(char **a1, char *a2, int a3)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  sprintf(v65, "0x%lx", *a1);
  std::string::basic_string[abi:ne180100]<0>(v63, "() ");
  if (a3 <= 0) {
    goto LABEL_5;
  }
  uint64_t v6 = *a1;
  uint64_t v7 = a3;
  LOBYTE(v8) = 1;
  do
  {
    char v9 = *v6++;
    int v8 = ((v9 + 1) < 3u) & v8;
    --v7;
  }
  while (v7);
  if (v8) {
LABEL_5:
  }
    long long v10 = "inRange:yes";
  else {
    long long v10 = "inRange:no";
  }
  std::string::basic_string[abi:ne180100]<0>(&v47, v10);
  long long v11 = std::string::insert(&v47, 0, " (");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  uint64_t v13 = std::string::append(&v56, ") ");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  int64_t v62 = v13->__r_.__value_.__r.__words[2];
  long long v61 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v56);
  v54[0] = 0;
  v54[1] = 0;
  uint64_t v55 = 0;
  std::ostream::operator<<();
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v56, (uint64_t)v54);
  std::operator+<char>();
  int v15 = std::string::append(&v47, "] ");
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  int64_t v53 = v15->__r_.__value_.__r.__words[2];
  long long v52 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v47);
  std::string::basic_string[abi:ne180100]<0>(&v42, a2);
  if (v62 >= 0) {
    char v17 = (const std::string::value_type *)&v61;
  }
  else {
    char v17 = (const std::string::value_type *)v61;
  }
  if (v62 >= 0) {
    std::string::size_type v18 = HIBYTE(v62);
  }
  else {
    std::string::size_type v18 = *((void *)&v61 + 1);
  }
  float v19 = std::string::append(&v42, v17, v18);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if ((v64 & 0x80u) == 0) {
    float v21 = (const std::string::value_type *)v63;
  }
  else {
    float v21 = (const std::string::value_type *)v63[0];
  }
  if ((v64 & 0x80u) == 0) {
    std::string::size_type v22 = v64;
  }
  else {
    std::string::size_type v22 = (std::string::size_type)v63[1];
  }
  long long v23 = std::string::append(&v43, v21, v22);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (v53 >= 0) {
    int v25 = (const std::string::value_type *)&v52;
  }
  else {
    int v25 = (const std::string::value_type *)v52;
  }
  if (v53 >= 0) {
    std::string::size_type v26 = HIBYTE(v53);
  }
  else {
    std::string::size_type v26 = *((void *)&v52 + 1);
  }
  float v27 = std::string::append(&v44, v25, v26);
  long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  long long v29 = std::string::append(&v45, "[ ");
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (a3 >= 1)
  {
    uint64_t v31 = 0;
    if (a3 >= 1000) {
      uint64_t v32 = 1000;
    }
    else {
      uint64_t v32 = a3;
    }
    do
    {
      memset(&v45, 0, sizeof(v45));
      std::ios_base::clear((std::ios_base *)((char *)&v47 + *(void *)(v47.__r_.__value_.__r.__words[0] - 24)), 0);
      std::ostream::operator<<();
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v47, (uint64_t)&v45);
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v45.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v44, size + 3);
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v34 = &v44;
      }
      else {
        size_t v34 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if (size)
      {
        if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v35 = &v45;
        }
        else {
          long long v35 = (std::string *)v45.__r_.__value_.__r.__words[0];
        }
        memmove(v34, v35, size);
      }
      *(_DWORD *)((char *)&v34->__r_.__value_.__l.__data_ + size) = 2108448;
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        float v36 = &v44;
      }
      else {
        float v36 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v37 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v37 = v44.__r_.__value_.__l.__size_;
      }
      std::string::append(&v46, (const std::string::value_type *)v36, v37);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v45.__r_.__value_.__l.__data_);
      }
      ++v31;
    }
    while (v32 != v31);
  }
  std::string::append(&v46, "]");
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  v47.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA408];
  std::string::size_type v38 = v47.__r_.__value_.__r.__words[0];
  std::string::size_type v39 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  std::string::size_type v40 = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(std::string::size_type *)((char *)v47.__r_.__value_.__r.__words + *(void *)(v47.__r_.__value_.__r.__words[0] - 24)) = v40;
  std::string::size_type v41 = v39;
  v47.__r_.__value_.__r.__words[2] = v39;
  uint64_t v48 = MEMORY[0x1E4FBA470] + 16;
  if (v50 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x192FF15B0](&v51);
  if (SHIBYTE(v53) < 0) {
    operator delete((void *)v52);
  }
  if (SHIBYTE(v55) < 0) {
    operator delete(v54[0]);
  }
  v56.__r_.__value_.__r.__words[0] = v38;
  *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + *(void *)(v38 - 24)) = v40;
  v56.__r_.__value_.__r.__words[2] = v41;
  uint64_t v57 = MEMORY[0x1E4FBA470] + 16;
  if (v59 < 0) {
    operator delete(v58);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x192FF15B0](&v60);
  if (SHIBYTE(v62) < 0) {
    operator delete((void *)v61);
  }
  if ((char)v64 < 0) {
    operator delete(v63[0]);
  }
}

void sub_19290BDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a33);
  if (a72 < 0) {
    operator delete(a68);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a75);
  if (*(char *)(v75 - 233) < 0) {
    operator delete(*(void **)(v75 - 256));
  }
  if (*(char *)(v75 - 209) < 0) {
    operator delete(*(void **)(v75 - 232));
  }
  _Unwind_Resume(a1);
}

float32_t GRU<signed char>::computeXTimesWSparseOrDense(uint64_t a1, int a2, float32x4_t **a3, uint64_t a4, uint64_t *a5, const void *a6, uint64_t a7, int a8, int a9)
{
  long long v12 = (float **)(a1 + 584);
  if (!a2) {
    VVector<float>::internalMul();
  }
  std::string __p = 0;
  int v15 = 0;
  uint64_t v16 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, a6, a7, (a7 - (uint64_t)a6) >> 2);
  VVector<float>::internalMul(v12, (int *)__p, v15, *a5, a8, a9);
  if (__p)
  {
    int v15 = (int *)__p;
    operator delete(__p);
  }
  return VVector<float>::add<float>(a3, (float32x4_t **)v12, a8);
}

void VVector<float>::internalMul()
{
}

{
  operator new[]();
}

uint64_t VVector<float>::dot(int8x16_t *a1, int8x16_t *a2, int a3)
{
  int v3 = a3 / 16;
  int32x4_t v4 = 0uLL;
  int32x4_t v5 = 0uLL;
  int32x4_t v6 = 0uLL;
  int32x4_t v7 = 0uLL;
  if (a3 >= 16)
  {
    int v8 = a1;
    char v9 = a2;
    uint64_t v10 = (a3 / 16);
    do
    {
      int8x16_t v11 = *v8++;
      int8x16_t v12 = v11;
      int8x16_t v13 = *v9++;
      int16x8_t v14 = vmovl_high_s8(v12);
      int16x8_t v15 = vmovl_high_s8(v13);
      int32x4_t v7 = vmlal_high_s16(v7, v14, v15);
      int32x4_t v6 = vmlal_s16(v6, *(int16x4_t *)v14.i8, *(int16x4_t *)v15.i8);
      int16x8_t v16 = vmovl_s8(*(int8x8_t *)v12.i8);
      int16x8_t v17 = vmovl_s8(*(int8x8_t *)v13.i8);
      int32x4_t v5 = vmlal_high_s16(v5, v16, v17);
      int32x4_t v4 = vmlal_s16(v4, *(int16x4_t *)v16.i8, *(int16x4_t *)v17.i8);
      --v10;
    }
    while (v10);
  }
  uint64_t v18 = (a3 % 16);
  if ((int)v18 < 1)
  {
    int v19 = 0;
  }
  else
  {
    int v19 = 0;
    int v20 = v3;
    float v21 = &a2[v3];
    std::string::size_type v22 = &a1[v20];
    do
    {
      int v24 = v22->i8[0];
      std::string::size_type v22 = (int8x16_t *)((char *)v22 + 1);
      int v23 = v24;
      int v25 = v21->i8[0];
      float v21 = (int8x16_t *)((char *)v21 + 1);
      v19 += v25 * v23;
      --v18;
    }
    while (v18);
  }
  int32x4_t v26 = vaddq_s32(vaddq_s32(v5, v4), vaddq_s32(v6, v7));
  return v19 + vpadalq_s32(vdupq_laneq_s64(vpaddlq_s32(v26), 1), v26).u32[0];
}

void GRU<signed char>::backward(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5)
{
  int v57 = a5 - 1;
  if (a5 >= 1)
  {
    uint64_t v55 = (void **)(a1 + 1232);
    int v6 = a5 - 1;
    do
    {
      if (*(unsigned char *)(a1 + 2088)) {
        int v7 = v57 - v6;
      }
      else {
        int v7 = v6;
      }
      if (*(unsigned char *)(a1 + 2088)) {
        BOOL v8 = v7 < v57;
      }
      else {
        BOOL v8 = v7 > 0;
      }
      if (*(unsigned char *)(a1 + 2088)) {
        BOOL v9 = v7 > 0;
      }
      else {
        BOOL v9 = v7 < v57;
      }
      if (*(unsigned char *)(a1 + 2088)) {
        int v10 = v7 + 1;
      }
      else {
        int v10 = v7 - 1;
      }
      int v56 = v10;
      memmove(*(void **)(*(void *)(a1 + 632) + 8 * v7), *(const void **)(*a4 + 8 * v7), 4 * *(int *)(a1 + 52));
      if (v9)
      {
        bzero(*(void **)(a1 + 752), 4 * *(int *)(a1 + 52));
        VVector<float>::internalMul();
      }
      VVector<float>::applyPrimeDerivative((void **)(a1 + 1216), *(float **)(*(void *)(a1 + 472) + 8 * v7), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 576));
      VVector<float>::applyPrimeDerivative(v55, *(float **)(*(void *)(a1 + 448) + 8 * v7), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 572));
      VVector<float>::applyPrimeDerivative((void **)(a1 + 1224), *(float **)(*(void *)(a1 + 424) + 8 * v7), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 568));
      bzero(*(void **)(*(void *)(a1 + 656) + 8 * v7), 4 * *(int *)(a1 + 52));
      int8x16_t v11 = (float32x4_t **)(*(void *)(a1 + 656) + 8 * v7);
      int v12 = *(_DWORD *)(a1 + 52);
      if (v12 >= 1)
      {
        int8x16_t v13 = *(float **)(*(void *)(a1 + 632) + 8 * v7);
        int16x8_t v14 = *(float **)(*(void *)(a1 + 496) + 8 * v7);
        int16x8_t v15 = *v11;
        uint64_t v16 = *(unsigned int *)(a1 + 52);
        do
        {
          float v17 = *v13++;
          float v18 = v17;
          float v19 = *v14++;
          v15->f32[0] = v15->f32[0] + (float)(v18 * (float)(1.0 - v19));
          int16x8_t v15 = (float32x4_t *)((char *)v15 + 4);
          --v16;
        }
        while (v16);
      }
      VVector<float>::mulV(v11, v11, (float32x4_t **)(a1 + 1216), v12);
      int v20 = (void **)(*(void *)(a1 + 680) + 8 * v7);
      if (v8)
      {
        int v21 = *(_DWORD *)(a1 + 52);
        if (v21 >= 1)
        {
          std::string::size_type v22 = *(float **)(*(void *)(a1 + 112) + 8 * v56);
          int v23 = *(float **)(*(void *)(a1 + 544) + 8 * v7);
          int v24 = (float *)*v20;
          uint64_t v25 = *(unsigned int *)(a1 + 52);
          do
          {
            float v26 = *v22++;
            float v27 = v26;
            float v28 = *v23++;
            *v24++ = v27 - v28;
            --v25;
          }
          while (v25);
        }
      }
      else
      {
        memmove(*v20, *(const void **)(*(void *)(a1 + 544) + 8 * v7), 4 * *(int *)(a1 + 52));
        int v20 = (void **)(*(void *)(a1 + 680) + 8 * v7);
        int v21 = *(_DWORD *)(a1 + 52);
        if (v21 >= 1)
        {
          long long v29 = (float *)*v20;
          uint64_t v30 = *(unsigned int *)(a1 + 52);
          do
          {
            float *v29 = -*v29;
            ++v29;
            --v30;
          }
          while (v30);
        }
      }
      VVector<float>::mulV((float32x4_t **)v20, (float32x4_t **)(*(void *)(a1 + 632) + 8 * v7), (float32x4_t **)v20, v21);
      uint64_t v31 = (float32x4_t **)(*(void *)(a1 + 680) + 8 * v7);
      VVector<float>::mulV(v31, v31, (float32x4_t **)(a1 + 1224), *(_DWORD *)(a1 + 52));
      if (v8) {
        VVector<float>::internalMul();
      }
      bzero(*(void **)(*(void *)(a1 + 704) + 8 * v7), 4 * *(int *)(a1 + 52));
      if (((**(uint64_t (***)(uint64_t, __n128))a1)(a1, v32) & 1) == 0)
      {
        bzero(*(void **)(*(void *)(a1 + 608) + 8 * v7), 4 * *(int *)(a1 + 48));
        VVector<float>::internalMul();
      }
    }
    while (v6-- > 0);
  }
  if (*(int *)(a1 + 56) > 0)
  {
    *(_DWORD *)(a1 + 776) = 0;
    *(_DWORD *)(a1 + 1016) = 0;
    *(_DWORD *)(a1 + 896) = 0;
  }
  if (a5 > 1)
  {
    int v34 = 1;
    int v35 = a5 - 2;
    do
    {
      if (*(unsigned char *)(a1 + 2088)) {
        int v36 = v35;
      }
      else {
        int v36 = v34;
      }
      if (*(unsigned char *)(a1 + 2088)) {
        int v37 = 1;
      }
      else {
        int v37 = -1;
      }
      int v38 = v36 + v37;
      if (*(unsigned char *)(a1 + 2088)) {
        int v39 = a5 - 2;
      }
      else {
        int v39 = 1;
      }
      BOOL v40 = v36 == v39;
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 680) + 8 * v36), (const float **)(*(void *)(a1 + 112) + 8 * v38), (void **)(a1 + 1152), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v40);
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 704) + 8 * v36), (const float **)(*(void *)(a1 + 112) + 8 * v38), (void **)(a1 + 1144), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v40);
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 656) + 8 * v36), (const float **)(*(void *)(a1 + 112) + 8 * v38), (void **)(a1 + 1160), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v40);
      ++v34;
      --v35;
    }
    while (v35 != -1);
  }
  if (a5 >= 1)
  {
    int v41 = 0;
    int v42 = v57;
    do
    {
      if (*(unsigned char *)(a1 + 2088)) {
        int v43 = v42;
      }
      else {
        int v43 = v41;
      }
      int v44 = v57;
      if (!*(unsigned char *)(a1 + 2088)) {
        int v44 = 0;
      }
      if (a3[1] == *a3 || *(int *)(a1 + 56) < 1)
      {
        BOOL v51 = v43 == v44;
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 704) + 8 * v43), (const float **)(*(void *)(a1 + 64) + 8 * v43), (void **)(a1 + 1120), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v51);
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 680) + 8 * v43), (const float **)(*(void *)(a1 + 64) + 8 * v43), (void **)(a1 + 1128), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v51);
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 656) + 8 * v43), (const float **)(*(void *)(a1 + 64) + 8 * v43), (void **)(a1 + 1136), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v51);
      }
      else
      {
        uint64_t v45 = *(void *)(a1 + 704);
        uint64_t v46 = *(void *)(a1 + 208) + 24 * v43;
        unsigned int v65 = 0;
        uint64_t v66 = 0;
        std::string __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v46, *(void *)(v46 + 8), (uint64_t)(*(void *)(v46 + 8) - *(void *)v46) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 760, *(int **)(v45 + 8 * v43), (uint64_t)__p, *(_DWORD *)(a1 + 52));
        if (__p)
        {
          unsigned int v65 = __p;
          operator delete(__p);
        }
        uint64_t v47 = *(void *)(a1 + 680);
        uint64_t v48 = *(void *)(a1 + 208) + 24 * v43;
        int64_t v62 = 0;
        uint64_t v63 = 0;
        long long v61 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v61, *(const void **)v48, *(void *)(v48 + 8), (uint64_t)(*(void *)(v48 + 8) - *(void *)v48) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 880, *(int **)(v47 + 8 * v43), (uint64_t)v61, *(_DWORD *)(a1 + 52));
        if (v61)
        {
          int64_t v62 = v61;
          operator delete(v61);
        }
        uint64_t v49 = *(void *)(a1 + 656);
        uint64_t v50 = *(void *)(a1 + 208) + 24 * v43;
        char v59 = 0;
        uint64_t v60 = 0;
        uint64_t v58 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v58, *(const void **)v50, *(void *)(v50 + 8), (uint64_t)(*(void *)(v50 + 8) - *(void *)v50) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 1000, *(int **)(v49 + 8 * v43), (uint64_t)v58, *(_DWORD *)(a1 + 52));
        if (v58)
        {
          char v59 = v58;
          operator delete(v58);
        }
      }
      ++v41;
      --v42;
    }
    while (v42 != -1);
  }
}

uint64_t GRU<signed char>::update(uint64_t result, float a2)
{
  uint64_t v2 = result;
  int v3 = (int)a2;
  int v4 = *(_DWORD *)(result + 52);
  if (*(int *)(result + 56) < 1)
  {
    uint64_t v5 = (v4 * *(_DWORD *)(result + 48));
    if ((int)v5 >= 1)
    {
      uint64_t v6 = 0;
      float v7 = (float)v3;
      do
      {
        *(unsigned char *)(*(void *)(result + 240) + v6) = (int)(float)((float)*(char *)(*(void *)(result + 240) + v6)
                                                                + (float)(*(float *)(*(void *)(result + 1120) + 4 * v6)
                                                                        * v7));
        ++v6;
      }
      while (v5 != v6);
      for (uint64_t i = 0; i != v5; ++i)
        *(unsigned char *)(*(void *)(result + 248) + i) = (int)(float)((float)*(char *)(*(void *)(result + 248) + i)
                                                               + (float)(*(float *)(*(void *)(result + 1136) + 4 * i)
                                                                       * v7));
      for (uint64_t j = 0; j != v5; ++j)
        *(unsigned char *)(*(void *)(result + 232) + j) = (int)(float)((float)*(char *)(*(void *)(result + 232) + j)
                                                               + (float)(*(float *)(*(void *)(result + 1128) + 4 * j)
                                                                       * v7));
    }
  }
  else
  {
    SparseMatrix<float>::add<signed char>(result + 760, v4, (float)v3);
    SparseMatrix<float>::add<signed char>(v2 + 1000, *(_DWORD *)(v2 + 52), (float)v3);
    uint64_t result = SparseMatrix<float>::add<signed char>(v2 + 880, *(_DWORD *)(v2 + 52), (float)v3);
  }
  if (v4)
  {
    uint64_t v10 = 0;
    uint64_t v11 = (v4 * v4);
    float v12 = (float)v3;
    do
    {
      *(unsigned char *)(*(void *)(v2 + 264) + v10) = (int)(float)((float)*(char *)(*(void *)(v2 + 264) + v10)
                                                           + (float)(*(float *)(*(void *)(v2 + 1144) + 4 * v10) * v12));
      ++v10;
    }
    while (v11 != v10);
    uint64_t v13 = 0;
    do
    {
      *(unsigned char *)(*(void *)(v2 + 272) + v13) = (int)(float)((float)*(char *)(*(void *)(v2 + 272) + v13)
                                                           + (float)(*(float *)(*(void *)(v2 + 1160) + 4 * v13) * v12));
      ++v13;
    }
    while (v11 != v13);
    uint64_t v14 = 0;
    do
    {
      *(unsigned char *)(*(void *)(v2 + 256) + v14) = (int)(float)((float)*(char *)(*(void *)(v2 + 256) + v14)
                                                           + (float)(*(float *)(*(void *)(v2 + 1152) + 4 * v14) * v12));
      ++v14;
    }
    while (v11 != v14);
  }
  return result;
}

uint64_t SparseMatrix<float>::add<signed char>(uint64_t result, int a2, float a3)
{
  uint64_t v3 = *(unsigned int *)(result + 16);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0;
    while (1)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = *(float **)(*(void *)(result + 24) + 8 * v4);
        uint64_t v6 = a2;
        do
        {
          float *v5 = *v5 * a3;
          ++v5;
          --v6;
        }
        while (v6);
      }
      if (++v4 == v3)
      {
        uint64_t v7 = *(void *)(result + 48);
        memset(v8, 0, sizeof(v8));
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v8, *(const void **)v7, *(void *)(v7 + 8), (uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 2);
        exitFramework(67);
      }
    }
  }
  return result;
}

void sub_19290CBE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t GRU<signed char>::noutputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t GRU<signed char>::ninputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

void GRU<signed char>::allocAllBuffers()
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "GRU alloc, from allocAll");
  GRU<signed char>::init();
}

void sub_19290CC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t GRU<signed char>::unsetSpecialBidir(uint64_t result)
{
  *(unsigned char *)(result + 42) = 0;
  return result;
}

uint64_t GRU<signed char>::setSpecialBidir(uint64_t result)
{
  *(unsigned char *)(result + 42) = 1;
  return result;
}

char *GRU<signed char>::getWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = **(void **)(a1 + 328);
  unsigned int v6 = *(_DWORD *)(a1 + 48);
  unsigned int v5 = *(_DWORD *)(a1 + 52);
  LODWORD(v7) = v5;
  double v8 = COERCE_DOUBLE(__PAIR64__(v6, v5));
  unint64_t v9 = *(void *)(a2 + 8);
  if (v9 >= *(void *)(a2 + 16))
  {
    uint64_t v10 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v4, COERCE_DOUBLE(__PAIR64__(v6, v5)));
    unsigned int v6 = *(_DWORD *)(a1 + 48);
    unsigned int v5 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v5;
    double v8 = COERCE_DOUBLE(__PAIR64__(v6, v5));
  }
  else
  {
    *(void *)unint64_t v9 = v4;
    uint64_t v10 = (char *)(v9 + 16);
    *(_DWORD *)(v9 + 8) = v5;
    *(_DWORD *)(v9 + 12) = v6;
  }
  *(void *)(a2 + 8) = v10;
  uint64_t v11 = **(void **)(a1 + 336);
  if ((unint64_t)v10 >= *(void *)(a2 + 16))
  {
    float v12 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v11, v8);
    unsigned int v6 = *(_DWORD *)(a1 + 48);
    unsigned int v5 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v5;
    double v8 = COERCE_DOUBLE(__PAIR64__(v6, v5));
  }
  else
  {
    *(void *)uint64_t v10 = v11;
    float v12 = v10 + 16;
    *((_DWORD *)v10 + 2) = v5;
    *((_DWORD *)v10 + 3) = v6;
  }
  *(void *)(a2 + 8) = v12;
  uint64_t v13 = **(void **)(a1 + 344);
  if ((unint64_t)v12 >= *(void *)(a2 + 16))
  {
    uint64_t v14 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v13, v8);
    unsigned int v5 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v5;
  }
  else
  {
    *(void *)float v12 = v13;
    uint64_t v14 = v12 + 16;
    *((_DWORD *)v12 + 2) = v5;
    *((_DWORD *)v12 + 3) = v6;
  }
  *(void *)(a2 + 8) = v14;
  uint64_t v15 = **(void **)(a1 + 352);
  HIDWORD(v7) = v5;
  if ((unint64_t)v14 >= *(void *)(a2 + 16))
  {
    uint64_t v16 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v15, v7);
    unsigned int v5 = *(_DWORD *)(a1 + 52);
    double v7 = COERCE_DOUBLE(vdup_n_s32(v5));
  }
  else
  {
    *(void *)uint64_t v14 = v15;
    uint64_t v16 = v14 + 16;
    *((_DWORD *)v14 + 2) = v5;
    *((_DWORD *)v14 + 3) = v5;
  }
  *(void *)(a2 + 8) = v16;
  uint64_t v17 = **(void **)(a1 + 360);
  if ((unint64_t)v16 >= *(void *)(a2 + 16))
  {
    uint64_t result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v17, v7);
    unsigned int v5 = *(_DWORD *)(a1 + 52);
    double v7 = COERCE_DOUBLE(vdup_n_s32(v5));
  }
  else
  {
    *(void *)uint64_t v16 = v17;
    uint64_t result = v16 + 16;
    *((_DWORD *)v16 + 2) = v5;
    *((_DWORD *)v16 + 3) = v5;
  }
  *(void *)(a2 + 8) = result;
  uint64_t v19 = **(void **)(a1 + 368);
  if ((unint64_t)result >= *(void *)(a2 + 16))
  {
    uint64_t result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v19, v7);
    int v20 = result;
  }
  else
  {
    *(void *)uint64_t result = v19;
    int v20 = result + 16;
    *((_DWORD *)result + 2) = v5;
    *((_DWORD *)result + 3) = v5;
  }
  *(void *)(a2 + 8) = v20;
  return result;
}

void GRU<signed char>::resetForNewBatch(void *a1)
{
  uint64_t v2 = a1[146];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v2 + 40))(v2, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v3 = a1[147];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v3 + 40))(v3, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v4 = a1[148];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v4 + 40))(v4, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = a1[149];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v5 + 40))(v5, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = a1[150];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v6 + 40))(v6, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = a1[151];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v7 + 40))(v7, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(void))(*(void *)a1[146] + 16))(a1[146]);
  (*(void (**)(void))(*(void *)a1[147] + 16))(a1[147]);
  (*(void (**)(void))(*(void *)a1[148] + 16))(a1[148]);
  (*(void (**)(void))(*(void *)a1[149] + 16))(a1[149]);
  (*(void (**)(void))(*(void *)a1[150] + 16))(a1[150]);
  (*(void (**)(void))(*(void *)a1[151] + 16))(a1[151]);
  uint64_t v8 = a1[146];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v8 + 40))(v8, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = a1[147];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v9 + 40))(v9, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v10 = a1[148];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v10 + 40))(v10, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v11 = a1[149];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v11 + 40))(v11, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v12 = a1[150];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v12 + 40))(v12, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v13 = a1[151];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v13 + 40))(v13, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
}

void sub_19290D318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void GRU<signed char>::clearState(uint64_t a1, void *a2, int *a3)
{
  uint64_t v5 = (int *)(*a2 + 16 * *a3);
  bzero(**((void ***)v5 + 1), 4 * *v5);
  uint64_t v6 = *a3 + 1;
  *a3 = v6;
  bzero(**(void ***)(*a2 + 16 * v6 + 8), 4 * *(int *)(*a2 + 16 * v6));
  ++*a3;
}

void *GRU<signed char>::restoreState(uint64_t a1, void *a2, int a3, int *a4)
{
  uint64_t v8 = *(void *)(a1 + 112);
  uint64_t v9 = *a4;
  *a4 = v9 + 1;
  memmove(*(void **)(v8 + 8 * a3), **(const void ***)(*a2 + 16 * v9 + 8), 4 * *(int *)(a1 + 52));
  uint64_t v10 = *(void *)(a1 + 88);
  uint64_t v11 = *a4;
  *a4 = v11 + 1;
  size_t v12 = 4 * *(int *)(a1 + 52);
  uint64_t v13 = *(void **)(v10 + 8 * a3);
  uint64_t v14 = **(const void ***)(*a2 + 16 * v11 + 8);

  return memmove(v13, v14, v12);
}

void *GRU<signed char>::saveState(uint64_t a1, uint64_t *a2, int a3, int *a4)
{
  uint64_t v8 = *(int *)(a1 + 52);
  uint64_t v9 = *a2;
  *(_DWORD *)(v9 + 16 * *a4) = v8;
  memmove(**(void ***)(v9 + 16 * *a4 + 8), *(const void **)(*(void *)(a1 + 112) + 8 * a3), 4 * v8);
  uint64_t v10 = *a4 + 1;
  *a4 = v10;
  uint64_t v11 = *(int *)(a1 + 52);
  uint64_t v12 = *a2;
  *(_DWORD *)(v12 + 16 * v10) = v11;
  uint64_t result = memmove(**(void ***)(v12 + 16 * *a4 + 8), *(const void **)(*(void *)(a1 + 88) + 8 * a3), 4 * v11);
  ++*a4;
  return result;
}

void GRU<signed char>::allocInitialState()
{
}

void sub_19290D728(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

uint64_t GRU<signed char>::normalizeModel(uint64_t result, float a2)
{
  int v2 = *(_DWORD *)(result + 52);
  uint64_t v3 = (*(_DWORD *)(result + 48) * v2);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void **)(result + 336);
    do
    {
      *(unsigned char *)(*v5 + v4) = (int)(float)((float)*(char *)(*v5 + v4) * a2);
      ++v4;
    }
    while (v3 != v4);
    int v2 = *(_DWORD *)(result + 52);
    uint64_t v6 = (*(_DWORD *)(result + 48) * v2);
    if ((int)v6 >= 1)
    {
      uint64_t v7 = 0;
      uint64_t v8 = *(void **)(result + 336);
      do
      {
        *(unsigned char *)(*v8 + v7) = (int)(float)((float)*(char *)(*v8 + v7) * a2);
        ++v7;
      }
      while (v6 != v7);
      int v2 = *(_DWORD *)(result + 52);
      uint64_t v9 = (*(_DWORD *)(result + 48) * v2);
      if ((int)v9 >= 1)
      {
        uint64_t v10 = 0;
        uint64_t v11 = *(void **)(result + 344);
        do
        {
          *(unsigned char *)(*v11 + v10) = (int)(float)((float)*(char *)(*v11 + v10) * a2);
          ++v10;
        }
        while (v9 != v10);
        int v2 = *(_DWORD *)(result + 52);
      }
    }
  }
  if (v2)
  {
    uint64_t v12 = 0;
    uint64_t v13 = *(void **)(result + 360);
    uint64_t v14 = (v2 * v2);
    do
    {
      *(unsigned char *)(*v13 + v12) = (int)(float)((float)*(char *)(*v13 + v12) * a2);
      ++v12;
    }
    while (v14 != v12);
    int v15 = *(_DWORD *)(result + 52);
    if (v15)
    {
      uint64_t v16 = 0;
      uint64_t v17 = *(void **)(result + 352);
      uint64_t v18 = (v15 * v15);
      do
      {
        *(unsigned char *)(*v17 + v16) = (int)(float)((float)*(char *)(*v17 + v16) * a2);
        ++v16;
      }
      while (v18 != v16);
      int v19 = *(_DWORD *)(result + 52);
      if (v19)
      {
        uint64_t v20 = 0;
        int v21 = *(void **)(result + 368);
        uint64_t v22 = (v19 * v19);
        do
        {
          *(unsigned char *)(*v21 + v20) = (int)(float)((float)*(char *)(*v21 + v20) * a2);
          ++v20;
        }
        while (v22 != v20);
      }
    }
  }
  return result;
}

uint64_t GRU<signed char>::clipModel(uint64_t result, float a2)
{
  float v2 = -a2;
  int v3 = *(_DWORD *)(result + 52);
  uint64_t v4 = (*(_DWORD *)(result + 48) * v3);
  if ((int)v4 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void **)(result + 336);
    do
    {
      float v7 = (float)*(char *)(*v6 + v5);
      float v8 = -a2;
      if (v7 < v2 || (float v8 = a2, v7 > a2)) {
        *(unsigned char *)(*v6 + v5) = (int)v8;
      }
      ++v5;
    }
    while (v4 != v5);
    int v3 = *(_DWORD *)(result + 52);
    uint64_t v9 = (*(_DWORD *)(result + 48) * v3);
    if ((int)v9 >= 1)
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(void **)(result + 328);
      do
      {
        float v12 = (float)*(char *)(*v11 + v10);
        float v13 = -a2;
        if (v12 < v2 || (float v13 = a2, v12 > a2)) {
          *(unsigned char *)(*v11 + v10) = (int)v13;
        }
        ++v10;
      }
      while (v9 != v10);
      int v3 = *(_DWORD *)(result + 52);
      uint64_t v14 = (*(_DWORD *)(result + 48) * v3);
      if ((int)v14 >= 1)
      {
        uint64_t v15 = 0;
        uint64_t v16 = *(void **)(result + 344);
        do
        {
          float v17 = (float)*(char *)(*v16 + v15);
          float v18 = -a2;
          if (v17 < v2 || (float v18 = a2, v17 > a2)) {
            *(unsigned char *)(*v16 + v15) = (int)v18;
          }
          ++v15;
        }
        while (v14 != v15);
        int v3 = *(_DWORD *)(result + 52);
      }
    }
  }
  if (v3)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *(void **)(result + 360);
    uint64_t v21 = (v3 * v3);
    do
    {
      float v22 = (float)*(char *)(*v20 + v19);
      float v23 = -a2;
      if (v22 < v2 || (float v23 = a2, v22 > a2)) {
        *(unsigned char *)(*v20 + v19) = (int)v23;
      }
      ++v19;
    }
    while (v21 != v19);
    int v24 = *(_DWORD *)(result + 52);
    if (v24)
    {
      uint64_t v25 = 0;
      float v26 = *(void **)(result + 352);
      uint64_t v27 = (v24 * v24);
      do
      {
        float v28 = (float)*(char *)(*v26 + v25);
        float v29 = -a2;
        if (v28 < v2 || (float v29 = a2, v28 > a2)) {
          *(unsigned char *)(*v26 + v25) = (int)v29;
        }
        ++v25;
      }
      while (v27 != v25);
      int v30 = *(_DWORD *)(result + 52);
      if (v30)
      {
        uint64_t v31 = 0;
        __n128 v32 = *(void **)(result + 368);
        uint64_t v33 = (v30 * v30);
        do
        {
          float v34 = (float)*(char *)(*v32 + v31);
          float v35 = -a2;
          if (v34 < v2 || (float v35 = a2, v34 > a2)) {
            *(unsigned char *)(*v32 + v31) = (int)v35;
          }
          ++v31;
        }
        while (v33 != v31);
      }
    }
  }
  return result;
}

void GRU<signed char>::applyGradient(uint64_t a1, void *lpsrc)
{
  if (lpsrc) {
  (*(void (**)(void))(**(void **)(a1 + 1176) + 64))(*(void *)(a1 + 1176));
  }
  exitFramework(23);
}

void *GRU<signed char>::addGradient(uint64_t a1, void *lpsrc)
{
  if (lpsrc) {
  else
  }
    uint64_t result = 0;
  int v4 = *(_DWORD *)(a1 + 52);
  uint64_t v5 = (*(_DWORD *)(a1 + 48) * v4);
  if ((int)v5 >= 1)
  {
    uint64_t v6 = 0;
    float v7 = *(void **)(a1 + 336);
    float v8 = (void *)result[42];
    do
    {
      *(unsigned char *)(*v7 + v6) += *(unsigned char *)(*v8 + v6);
      ++v6;
    }
    while (v5 != v6);
    int v4 = *(_DWORD *)(a1 + 52);
    uint64_t v9 = (*(_DWORD *)(a1 + 48) * v4);
    if ((int)v9 >= 1)
    {
      uint64_t v10 = 0;
      uint64_t v11 = *(void **)(a1 + 328);
      float v12 = (void *)result[41];
      do
      {
        *(unsigned char *)(*v11 + v10) += *(unsigned char *)(*v12 + v10);
        ++v10;
      }
      while (v9 != v10);
      int v4 = *(_DWORD *)(a1 + 52);
      uint64_t v13 = (*(_DWORD *)(a1 + 48) * v4);
      if ((int)v13 >= 1)
      {
        uint64_t v14 = 0;
        uint64_t v15 = *(void **)(a1 + 344);
        uint64_t v16 = (void *)result[43];
        do
        {
          *(unsigned char *)(*v15 + v14) += *(unsigned char *)(*v16 + v14);
          ++v14;
        }
        while (v13 != v14);
        int v4 = *(_DWORD *)(a1 + 52);
      }
    }
  }
  if (v4)
  {
    uint64_t v17 = 0;
    float v18 = *(void **)(a1 + 360);
    uint64_t v19 = (void *)result[45];
    uint64_t v20 = (v4 * v4);
    do
    {
      *(unsigned char *)(*v18 + v17) += *(unsigned char *)(*v19 + v17);
      ++v17;
    }
    while (v20 != v17);
    int v21 = *(_DWORD *)(a1 + 52);
    if (v21)
    {
      uint64_t v22 = 0;
      float v23 = *(void **)(a1 + 352);
      int v24 = (void *)result[44];
      uint64_t v25 = (v21 * v21);
      do
      {
        *(unsigned char *)(*v23 + v22) += *(unsigned char *)(*v24 + v22);
        ++v22;
      }
      while (v25 != v22);
      int v26 = *(_DWORD *)(a1 + 52);
      if (v26)
      {
        uint64_t v27 = 0;
        float v28 = *(void **)(a1 + 368);
        float v29 = (void *)result[46];
        uint64_t v30 = (v26 * v26);
        do
        {
          *(unsigned char *)(*v28 + v27) += *(unsigned char *)(*v29 + v27);
          ++v27;
        }
        while (v30 != v27);
      }
    }
  }
  return result;
}

void GRU<signed char>::compareModels(uint64_t a1, void *lpsrc, void **a3)
{
  int v3 = a3;
  if (lpsrc)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v5 = 0;
  if (a3) {
LABEL_3:
  }
LABEL_4:
  std::vector<BOOL>::vector(&__p, 4uLL);
  uint64_t v6 = (*(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52));
  if ((int)v6 <= 0)
  {
    uint64_t v11 = __p;
LABEL_15:
    unint64_t v12 = *v11 | 1;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = 1;
    do
    {
      while (!v8)
      {
        BOOL v8 = 0;
        if (++v7 == v6)
        {
          uint64_t v11 = __p;
          goto LABEL_16;
        }
      }
      int v9 = *(unsigned __int8 *)(*v3[42] + v7);
      int v10 = *(unsigned __int8 *)(*v5[42] + v7);
      BOOL v8 = v9 == v10;
      ++v7;
    }
    while (v7 != v6);
    uint64_t v11 = __p;
    if (v9 == v10) {
      goto LABEL_15;
    }
LABEL_16:
    unint64_t v12 = *v11 & 0xFFFFFFFFFFFFFFFELL;
  }
  void *v11 = v12;
  if ((int)v6 < 1)
  {
LABEL_25:
    unint64_t v17 = v12 | 2;
  }
  else
  {
    uint64_t v13 = 0;
    BOOL v14 = 1;
    do
    {
      while (!v14)
      {
        BOOL v14 = 0;
        if (++v13 == v6) {
          goto LABEL_26;
        }
      }
      int v15 = *(unsigned __int8 *)(*v3[43] + v13);
      int v16 = *(unsigned __int8 *)(*v5[43] + v13);
      BOOL v14 = v15 == v16;
      ++v13;
    }
    while (v13 != v6);
    if (v15 == v16) {
      goto LABEL_25;
    }
LABEL_26:
    unint64_t v17 = v12 & 0xFFFFFFFFFFFFFFFDLL;
  }
  void *v11 = v17;
  if ((int)v6 < 1)
  {
LABEL_35:
    unint64_t v22 = v17 | 4;
  }
  else
  {
    uint64_t v18 = 0;
    BOOL v19 = 1;
    do
    {
      while (!v19)
      {
        BOOL v19 = 0;
        if (++v18 == v6) {
          goto LABEL_36;
        }
      }
      int v20 = *(unsigned __int8 *)(*v3[41] + v18);
      int v21 = *(unsigned __int8 *)(*v5[41] + v18);
      BOOL v19 = v20 == v21;
      ++v18;
    }
    while (v18 != v6);
    if (v20 == v21) {
      goto LABEL_35;
    }
LABEL_36:
    unint64_t v22 = v17 & 0xFFFFFFFFFFFFFFFBLL;
  }
  void *v11 = v22;
  if ((int)v6 < 1)
  {
LABEL_45:
    unint64_t v27 = v22 | 1;
  }
  else
  {
    uint64_t v23 = 0;
    BOOL v24 = 1;
    do
    {
      while (!v24)
      {
        BOOL v24 = 0;
        if (++v23 == v6) {
          goto LABEL_46;
        }
      }
      int v25 = *(unsigned __int8 *)(*v3[45] + v23);
      int v26 = *(unsigned __int8 *)(*v5[45] + v23);
      BOOL v24 = v25 == v26;
      ++v23;
    }
    while (v23 != v6);
    if (v25 == v26) {
      goto LABEL_45;
    }
LABEL_46:
    unint64_t v27 = v22 & 0xFFFFFFFFFFFFFFFELL;
  }
  void *v11 = v27;
  if ((int)v6 >= 1)
  {
    uint64_t v28 = 0;
    BOOL v29 = 1;
    do
    {
      BOOL v29 = v29 && *(unsigned __int8 *)(*v3[46] + v28) == *(unsigned __int8 *)(*v5[46] + v28);
      ++v28;
    }
    while (v28 != v6);
  }
  operator delete(v11);
}

void *GRU<signed char>::subtractModels(uint64_t a1, void *lpsrc, const void *a3)
{
  if (!lpsrc)
  {
    uint64_t v5 = 0;
    if (a3) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t result = 0;
    goto LABEL_6;
  }
  if (!a3) {
    goto LABEL_5;
  }
LABEL_3:
LABEL_6:
  int v7 = *(_DWORD *)(a1 + 52);
  uint64_t v8 = (*(_DWORD *)(a1 + 48) * v7);
  if ((int)v8 >= 1)
  {
    uint64_t v9 = 0;
    int v10 = *(void **)(a1 + 336);
    uint64_t v11 = (void *)result[42];
    unint64_t v12 = (void *)v5[42];
    do
    {
      *(unsigned char *)(*v10 + v9) = *(unsigned char *)(*v11 + v9) - *(unsigned char *)(*v12 + v9);
      ++v9;
    }
    while (v8 != v9);
    int v7 = *(_DWORD *)(a1 + 52);
    uint64_t v13 = (*(_DWORD *)(a1 + 48) * v7);
    if ((int)v13 >= 1)
    {
      uint64_t v14 = 0;
      int v15 = *(void **)(a1 + 344);
      int v16 = (void *)result[43];
      unint64_t v17 = (void *)v5[43];
      do
      {
        *(unsigned char *)(*v15 + v14) = *(unsigned char *)(*v16 + v14) - *(unsigned char *)(*v17 + v14);
        ++v14;
      }
      while (v13 != v14);
      int v7 = *(_DWORD *)(a1 + 52);
      uint64_t v18 = (*(_DWORD *)(a1 + 48) * v7);
      if ((int)v18 >= 1)
      {
        uint64_t v19 = 0;
        int v20 = *(void **)(a1 + 328);
        int v21 = (void *)result[41];
        unint64_t v22 = (void *)v5[41];
        do
        {
          *(unsigned char *)(*v20 + v19) = *(unsigned char *)(*v21 + v19) - *(unsigned char *)(*v22 + v19);
          ++v19;
        }
        while (v18 != v19);
        int v7 = *(_DWORD *)(a1 + 52);
      }
    }
  }
  if (v7)
  {
    uint64_t v23 = 0;
    BOOL v24 = *(void **)(a1 + 360);
    int v25 = (void *)result[45];
    uint64_t v26 = (v7 * v7);
    unint64_t v27 = (void *)v5[45];
    do
    {
      *(unsigned char *)(*v24 + v23) = *(unsigned char *)(*v25 + v23) - *(unsigned char *)(*v27 + v23);
      ++v23;
    }
    while (v26 != v23);
    int v28 = *(_DWORD *)(a1 + 52);
    if (v28)
    {
      uint64_t v29 = 0;
      uint64_t v30 = *(void **)(a1 + 368);
      uint64_t v31 = (void *)result[46];
      uint64_t v32 = (v28 * v28);
      uint64_t v33 = (void *)v5[46];
      do
      {
        *(unsigned char *)(*v30 + v29) = *(unsigned char *)(*v31 + v29) - *(unsigned char *)(*v33 + v29);
        ++v29;
      }
      while (v32 != v29);
      int v34 = *(_DWORD *)(a1 + 52);
      if (v34)
      {
        uint64_t v35 = 0;
        int v36 = *(void **)(a1 + 352);
        int v37 = (void *)result[44];
        uint64_t v38 = (v34 * v34);
        int v39 = (void *)v5[44];
        do
        {
          *(unsigned char *)(*v36 + v35) = *(unsigned char *)(*v37 + v35) - *(unsigned char *)(*v39 + v35);
          ++v35;
        }
        while (v38 != v35);
      }
    }
  }
  return result;
}

void GRU<signed char>::write(uint64_t a1, FILE *__stream, __sFILE *a3, int a4, int a5)
{
  NeuralNetwork::writeDimensions(__stream, a3, (int *)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  if (a4 >= 1)
  {
    int __ptr = *(_DWORD *)(a1 + 568);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    int __ptr = *(_DWORD *)(a1 + 572);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    int __ptr = *(_DWORD *)(a1 + 576);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    LODWORD(a3->_p) += 12;
  }
  MMatrix<signed char>::write(*(void *)(a1 + 336), __stream, (int *)a3, a5);
}

void MMatrix<signed char>::write(int a1, FILE *__stream, int *a3, int a4)
{
  if (a4 == 32)
  {
    if (__stream)
    {
      int v6 = *a3 & 0xF;
      if (*a3 <= 0) {
        int v6 = -(-*a3 & 0xF);
      }
      if (v6 >= 15) {
        int v7 = 16;
      }
      else {
        int v7 = 15 - v6;
      }
      char __ptr = v7;
      fwrite(&__ptr, 1uLL, 1uLL, __stream);
      ++*a3;
      writeByteArray((size_t)__stream, a3, v7);
      if ((*(unsigned char *)a3 & 0xF) == 0) {
        operator new[]();
      }
      exitFramework(18);
    }
    exitFramework(9);
  }
  if (a4 == 8 || a4 == 16) {
    exitFramework(45);
  }
  exitFramework(23);
}

uint64_t GRU<signed char>::read(uint64_t a1, NeuralNetwork *this, int *a3, int *a4, int *a5)
{
  int v5 = (int)a4;
  *(void *)uint64_t v26 = 0;
  NeuralNetwork::readDimensions((uint64_t *)this, (ReadOnlyFile *)&v26[4], v26, a4, a5);
  if (v5 >= 1)
  {
    int v9 = *((_DWORD *)this + 18);
    uint64_t v10 = *(void *)this;
    uint64_t v11 = (int *)(*(void *)this + v9);
    unint64_t v12 = *(void *)this + *((void *)this + 1) - 4;
    if ((unint64_t)v11 <= v12)
    {
      int v13 = *v11;
      v9 += 4;
      *((_DWORD *)this + 18) = v9;
    }
    else
    {
      int v13 = 0;
    }
    uint64_t v14 = v9;
    *(_DWORD *)(a1 + 568) = v13;
    if (v10 + v9 <= v12)
    {
      int v15 = *(_DWORD *)(v10 + v9);
      v9 += 4;
      *((_DWORD *)this + 18) = v9;
      uint64_t v14 = v9;
    }
    else
    {
      int v15 = 0;
    }
    *(_DWORD *)(a1 + 572) = v15;
    int v16 = (int *)(v10 + v14);
    if ((unint64_t)v16 <= v12)
    {
      int v17 = *v16;
      *((_DWORD *)this + 18) = v9 + 4;
    }
    else
    {
      int v17 = 0;
    }
    *(_DWORD *)(a1 + 576) = v17;
  }
  uint64_t v18 = (signed __int8 **)*(unsigned int *)(a1 + 52);
  if (v18 != *(_DWORD *)&v26[4] || (int v19 = *(_DWORD *)(a1 + 48), v19 != *(_DWORD *)v26)) {
    exitFramework(3);
  }
  MMatrix<signed char>::read(*(char **)(a1 + 336), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 2033), v18, v19);
  MMatrix<signed char>::read(*(char **)(a1 + 328), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 2033), (signed __int8 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<signed char>::read(*(char **)(a1 + 344), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 2033), (signed __int8 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<signed char>::read(*(char **)(a1 + 360), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 2033), (signed __int8 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
  MMatrix<signed char>::read(*(char **)(a1 + 352), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 2033), (signed __int8 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
  int v20 = *(char **)(a1 + 368);
  int v21 = *a3;
  int v22 = *(unsigned __int8 *)(a1 + 2033);
  uint64_t v23 = (signed __int8 **)*(unsigned int *)(a1 + 52);
  int v24 = *(_DWORD *)(a1 + 52);

  return MMatrix<signed char>::read(v20, (uint64_t)this, v21, v22, v23, v24);
}

uint64_t MMatrix<signed char>::read(char *a1, uint64_t a2, int a3, BOOL a4, signed __int8 **a5, int a6)
{
  if (!a2) {
LABEL_11:
  }
    exitFramework(9);
  int v7 = (int)a5;
  if (a3 == 3)
  {
    readPadding((uint64_t *)a2);
    char v11 = *(unsigned char *)(a2 + 72);
  }
  else
  {
    char v11 = *a1;
  }
  if ((v11 & 0xF) != 0) {
    exitFramework(18);
  }
  if (a4)
  {
    uint64_t v12 = *(int *)(a2 + 72);
    uint64_t v13 = *(void *)a2 + v12;
    *(void *)a1 = v13;
    *(_DWORD *)(a2 + 72) = v12 + a6 * v7;
    uint64_t result = a6 * v7;
    if (!v13) {
      goto LABEL_11;
    }
  }
  else
  {
    int v15 = *(signed __int8 **)a1;
    int v16 = a6 * v7;
    uint64_t result = ReadOnlyFile::readInt8Array((ReadOnlyFile *)a2, v15, &v16, a4, a5);
    if (!*(void *)a1) {
      goto LABEL_11;
    }
  }
  if (!result) {
    goto LABEL_11;
  }
  return result;
}

uint64_t GRU<signed char>::weightsAreNaN()
{
  return 0;
}

uint64_t GRU<signed char>::inputDeltas(uint64_t a1)
{
  return a1 + 608;
}

void GRU<signed char>::deltas()
{
}

uint64_t GRU<signed char>::outputs(uint64_t a1)
{
  return a1 + 112;
}

uint64_t GRU<signed char>::inputs(uint64_t a1)
{
  return a1 + 64;
}

void GRU<signed char>::targets()
{
}

void FullLayer<signed char>::init(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 528);
  if (v4) {
    int v5 = *(unsigned __int8 *)(v4 + 512);
  }
  else {
    int v5 = 0;
  }
  if (*(unsigned char *)(a1 + 40)) {
    int v6 = *(_DWORD *)(a1 + 96) + (v5 ^ 1);
  }
  else {
    int v6 = *(_DWORD *)(a1 + 96);
  }
  int v7 = *(_DWORD *)(a1 + 100);
  *(_DWORD *)(a1 + 104) = v6;
  *(_DWORD *)(a1 + 108) = v7 * v6;
  if (!*(_DWORD *)(a1 + 504))
  {
    if (!*(unsigned char *)(a1 + 117))
    {
      if (!v4 || *(_DWORD *)(v4 + 40) != 1) {
        MMatrix<signed char>::MMatrix();
      }
      *(void *)(a1 + 128) = *(void *)(v4 + 112);
    }
    *(void *)(a1 + 512) = a1 + 128;
  }
  if (!*(unsigned char *)(a1 + 116)) {
    operator new[]();
  }
  if (!*(_DWORD *)(a1 + 504))
  {
    int v9 = (void *)(a1 + 128);
    if (*(void *)(a1 + 128))
    {
      std::string::basic_string[abi:ne180100]<0>(&v24, " constructt W=");
      int v10 = *(char *)(a2 + 23);
      if (v10 >= 0) {
        char v11 = (const std::string::value_type *)a2;
      }
      else {
        char v11 = *(const std::string::value_type **)a2;
      }
      if (v10 >= 0) {
        std::string::size_type v12 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        std::string::size_type v12 = *(void *)(a2 + 8);
      }
      uint64_t v13 = std::string::insert(&v24, 0, v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      int64_t v26 = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      if (v26 >= 0) {
        int v15 = (char *)__p;
      }
      else {
        int v15 = (char *)__p[0];
      }
      MMatrix<signed char>::print((char **)(a1 + 128), v15, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 10);
      if (SHIBYTE(v26) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      if (!*(_DWORD *)(a1 + 504) && *v9)
      {
        std::string::basic_string[abi:ne180100]<0>(&v24, " construct W=");
        int v16 = *(char *)(a2 + 23);
        if (v16 >= 0) {
          int v17 = (const std::string::value_type *)a2;
        }
        else {
          int v17 = *(const std::string::value_type **)a2;
        }
        if (v16 >= 0) {
          std::string::size_type v18 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          std::string::size_type v18 = *(void *)(a2 + 8);
        }
        int v19 = std::string::insert(&v24, 0, v17, v18);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        int64_t v26 = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        if (v26 >= 0) {
          int v21 = (char *)__p;
        }
        else {
          int v21 = (char *)__p[0];
        }
        MMatrix<signed char>::print((char **)(a1 + 128), v21, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 10);
        if (SHIBYTE(v26) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v24.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  if (*(int *)(a1 + 112) < 1) {
    unsigned __int8 v8 = 0;
  }
  else {
    unsigned __int8 v8 = (**(uint64_t (***)(uint64_t))a1)(a1);
  }
  if (*(unsigned char *)(a1 + 42)) {
    int v22 = 2;
  }
  else {
    int v22 = maxFeatureVectors;
  }
  if (((*(unsigned char *)(a1 + 42) != 0) & v8) != 0) {
    int v23 = 2;
  }
  else {
    int v23 = maxFeatureVectors;
  }
  std::vector<VVector<float>>::resize((char **)(a1 + 264), v23);
  std::vector<VVector<float>>::resize((char **)(a1 + 384), v22);
  std::vector<VVector<float>>::resize((char **)(a1 + 288), maxFeatureVectors);
  if (!*(unsigned char *)(a1 + 116))
  {
    std::vector<VVector<float>>::resize((char **)(a1 + 312), maxFeatureVectors);
    std::vector<VVector<float>>::resize((char **)(a1 + 336), maxFeatureVectors);
  }
  std::vector<std::vector<int>>::resize((uint64_t *)(a1 + 360), maxFeatureVectors);
  if (v23 >= 1) {
    operator new[]();
  }
  if (v22 >= 1) {
    operator new[]();
  }
  if (maxFeatureVectors >= 1)
  {
    if (!*(unsigned char *)(a1 + 116)) {
      operator new[]();
    }
    operator new[]();
  }
}

void sub_19290F30C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FullLayer<signed char>::~FullLayer(uint64_t a1)
{
  *(void *)a1 = &unk_1EE3239B0;
  FullLayer<signed char>::cleanupAllBuffers(a1);
  uint64_t v2 = *(void *)(a1 + 424);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 80))(v2);
    *(void *)(a1 + 424) = 0;
  }
  PTMutex::~PTMutex((PTMutex *)(a1 + 432));
  int v3 = *(void **)(a1 + 384);
  if (v3)
  {
    *(void *)(a1 + 392) = v3;
    operator delete(v3);
  }
  std::string::size_type v12 = (void **)(a1 + 360);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v4 = *(void **)(a1 + 336);
  if (v4)
  {
    *(void *)(a1 + 344) = v4;
    operator delete(v4);
  }
  int v5 = *(void **)(a1 + 312);
  if (v5)
  {
    *(void *)(a1 + 320) = v5;
    operator delete(v5);
  }
  int v6 = *(void **)(a1 + 288);
  if (v6)
  {
    *(void *)(a1 + 296) = v6;
    operator delete(v6);
  }
  int v7 = *(void **)(a1 + 264);
  if (v7)
  {
    *(void *)(a1 + 272) = v7;
    operator delete(v7);
  }
  SparseMatrix<float>::~SparseMatrix(a1 + 144);
  unsigned __int8 v8 = *(void **)(a1 + 72);
  if (v8)
  {
    *(void *)(a1 + 80) = v8;
    operator delete(v8);
  }
  int v9 = *(void **)(a1 + 48);
  if (v9)
  {
    *(void *)(a1 + 56) = v9;
    operator delete(v9);
  }
  *(void *)a1 = &unk_1EE3182B8;
  int v10 = *(void **)(a1 + 8);
  if (v10)
  {
    *(void *)(a1 + 16) = v10;
    operator delete(v10);
  }
  return a1;
}

void FullLayer<signed char>::cleanupAllBuffers(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  if (v3 == v2)
  {
    uint64_t v2 = *(void *)(a1 + 56);
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v2 + 8 * v4);
      if (v5)
      {
        MEMORY[0x192FF1690](v5, 0x1000C8052888210);
        uint64_t v2 = *(void *)(a1 + 48);
        uint64_t v3 = *(void *)(a1 + 56);
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
  }
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 80);
  if (v7 == v6)
  {
    uint64_t v6 = *(void *)(a1 + 80);
  }
  else
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(v6 + 8 * v8);
      if (v9)
      {
        MEMORY[0x192FF1690](v9, 0x1000C8077774924);
        uint64_t v6 = *(void *)(a1 + 72);
        uint64_t v7 = *(void *)(a1 + 80);
      }
      ++v8;
    }
    while (v8 < (v7 - v6) >> 3);
    uint64_t v2 = *(void *)(a1 + 48);
  }
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 80) = v6;
  SparseMatrix<float>::cleanupAllBuffers((void *)(a1 + 144));
  *(void *)(a1 + 272) = *(void *)(a1 + 264);
  *(void *)(a1 + 296) = *(void *)(a1 + 288);
  *(void *)(a1 + 392) = *(void *)(a1 + 384);
  std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)(a1 + 360));
  if (!*(unsigned char *)(a1 + 116))
  {
    *(void *)(a1 + 320) = *(void *)(a1 + 312);
    *(void *)(a1 + 344) = *(void *)(a1 + 336);
  }
}

void FullLayer<signed char>::computeErrorRMSE(uint64_t a1, void *a2, void *a3, int a4, _DWORD *a5)
{
  if (a4 >= 1)
  {
    uint64_t v9 = a4;
    do
    {
      uint64_t v10 = (v9 - 1);
      uint64_t v11 = *(unsigned int *)(a1 + 100);
      if ((int)v11 >= 1)
      {
        int v12 = 0;
        uint64_t v13 = 0;
        long long v14 = *(float **)(*(void *)(a1 + 288) + 8 * v10);
        float v15 = 1.1755e-38;
        do
        {
          if (v14[v13] > v15)
          {
            int v12 = v13;
            float v15 = v14[v13];
          }
          ++v13;
        }
        while (v11 != v13);
        int v16 = 0;
        uint64_t v17 = 0;
        std::string::size_type v18 = *(float **)(*a2 + 8 * v10);
        float v19 = 1.1755e-38;
        do
        {
          if (v18[v17] > v19)
          {
            int v16 = v17;
            float v19 = v18[v17];
          }
          ++v17;
        }
        while (v11 != v17);
        if (v12 != v16)
        {
          ++*a5;
          uint64_t v11 = *(unsigned int *)(a1 + 100);
        }
        if ((int)v11 >= 1)
        {
          long long v20 = *(float **)(*a3 + 8 * v10);
          do
          {
            float v21 = *v18++;
            float v22 = v21;
            float v23 = *v14++;
            *v20++ = v22 - v23;
            --v11;
          }
          while (v11);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v34, "SoftMax ComputerError::targets t=");
      i2s(__p);
      if ((v33 & 0x80u) == 0) {
        std::string v24 = __p;
      }
      else {
        std::string v24 = (void **)__p[0];
      }
      if ((v33 & 0x80u) == 0) {
        std::string::size_type v25 = v33;
      }
      else {
        std::string::size_type v25 = (std::string::size_type)__p[1];
      }
      int64_t v26 = std::string::append(&v34, (const std::string::value_type *)v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      int64_t v36 = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)uint64_t v35 = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      if ((char)v33 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      if (v36 >= 0) {
        int v28 = (char *)v35;
      }
      else {
        int v28 = (char *)v35[0];
      }
      VVector<float>::print((float **)(*a2 + 8 * v10), v28, *(_DWORD *)(a1 + 100));
      VVector<float>::print((float **)(*(void *)(a1 + 288) + 8 * v10), "SoftMax ComputerError::output ", *(_DWORD *)(a1 + 100));
      VVector<float>::print((float **)(*a3 + 8 * v10), "SoftMax ComputerError::deltas ", *(_DWORD *)(a1 + 100));
      if (SHIBYTE(v36) < 0) {
        operator delete(v35[0]);
      }
      BOOL v31 = __OFSUB__(v9, 1);
      BOOL v29 = v9 == 1;
      BOOL v30 = --v9 < 0;
    }
    while (!(v30 ^ v31 | v29));
  }
}

void sub_19290F798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

float FullLayer<signed char>::probability(uint64_t a1, int a2, int a3)
{
  return *(float *)(*(void *)(*(void *)(a1 + 288) + 8 * a2) + 4 * a3);
}

uint64_t FullLayer<signed char>::outputDeltas(uint64_t a1)
{
  return a1 + 336;
}

void FullLayer<signed char>::~FullLayer(uint64_t a1)
{
  FullLayer<signed char>::~FullLayer(a1);

  JUMPOUT(0x192FF16B0);
}

float FullLayer<signed char>::log2Probability(uint64_t a1, uint64_t *a2, int a3)
{
  if (a3 < 1) {
    return 0.0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = *(unsigned int *)(a1 + 100);
  uint64_t v5 = *a2;
  uint64_t v6 = *(void *)(a1 + 288);
  uint64_t v7 = a3;
  float v8 = 0.0;
  do
  {
    if ((int)v4 < 1)
    {
      int v9 = 0;
    }
    else
    {
      int v9 = 0;
      uint64_t v10 = 0;
      float v12 = 1.1755e-38;
      do
      {
        uint64_t v11 = *(void *)(v5 + 8 * v3);
        if (*(float *)(v11 + 4 * v10) > v12)
        {
          int v9 = v10;
          float v12 = *(float *)(v11 + 4 * v10);
        }
        ++v10;
      }
      while (v4 != v10);
    }
    float v13 = *(float *)(*(void *)(v6 + 8 * v3) + 4 * v9);
    if (v13 <= 1.0e-10) {
      float v14 = 99.0;
    }
    else {
      float v14 = -log2f(v13);
    }
    float v8 = v8 + v14;
    ++v3;
  }
  while (v3 != v7);
  return v8;
}

_DWORD *FullLayer<signed char>::computeError(_DWORD *result)
{
  if (!result[30]) {
    return (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 392))();
  }
  return result;
}

void FullLayer<signed char>::updateFrom(uint64_t a1, void *lpsrc)
{
  if (!*(_DWORD *)(a1 + 504))
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 440));
    if (!*(_DWORD *)(a1 + 112)) {
      exitFramework(23);
    }
    exitFramework(33);
  }
  exitFramework(1);
}

char *FullLayer<signed char>::setMaster(uint64_t a1, void *lpsrc)
{
  if (*(_DWORD *)(a1 + 504) != 1) {
    exitFramework(1);
  }
  if (!result) {
    __cxa_bad_cast();
  }
  *(void *)(a1 + 512) = result + 128;
  return result;
}

uint64_t FullLayer<signed char>::reverseBackward(unsigned char *a1)
{
  a1[520] = 1;
  uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 296))(a1);
  a1[520] = 0;
  return result;
}

uint64_t FullLayer<signed char>::reverseForward(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  a1[520] = 1;
  {
    uint64_t v13 = a6;
    uint64_t v12 = a5;
    unsigned int v11 = a4;
    uint64_t v9 = a2;
    uint64_t v10 = a3;
    a2 = v9;
    a3 = v10;
    a4 = v11;
    a5 = v12;
    a6 = v13;
    if (v8)
    {
      FullLayer<signed char>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy = 0;
      unk_1E9307B50 = 0;
      qword_1E9307B58 = 0;
      __cxa_atexit((void (*)(void *))std::vector<int>::~vector[abi:ne180100], &FullLayer<signed char>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy, &dword_1920CB000);
      a2 = v9;
      a3 = v10;
      a4 = v11;
      a5 = v12;
      a6 = v13;
    }
  }
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 304))(a1, a2, a3, a4, a5, a6, &FullLayer<signed char>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy);
  a1[520] = 0;
  return result;
}

void FullLayer<signed char>::forward(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5)
{
  if (a3[1] == *a3 || *(int *)(a1 + 112) < 1) {
    int v9 = 0;
  }
  else {
    int v9 = (**(uint64_t (***)(uint64_t))a1)(a1);
  }
  int v10 = *(unsigned __int8 *)(a1 + 520);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Fulllayer");
  if (a5 && v10) {
    exitFramework(34);
  }
  unsigned int v11 = a4 & 0xFFFFFF;
  unsigned int v12 = a5 != 0;
  if (v36 < 0) {
    operator delete(__p);
  }
  if (v11 > v12)
  {
    do
    {
      if (*(unsigned char *)(a1 + 520)) {
        int v13 = v11 + ~v12;
      }
      else {
        int v13 = v12;
      }
      uint64_t v14 = v13;
      if (*(unsigned char *)(a1 + 42)) {
        int v15 = 1;
      }
      else {
        int v15 = v13;
      }
      if (((*(unsigned char *)(a1 + 42) != 0) & v9) != 0) {
        uint64_t v16 = 1;
      }
      else {
        uint64_t v16 = v13;
      }
      uint64_t v17 = *(void *)(a1 + 264);
      if (v9)
      {
        bzero(*(void **)(v17 + 8 * v16), 4 * *(int *)(a1 + 104));
        uint64_t v18 = *(void *)(a1 + 264);
        *(_DWORD *)(*(void *)(v18 + 8 * v16) + 4 * **(int **)(*a3 + 24 * (int)v14)) = 1065353216;
      }
      else
      {
        memmove(*(void **)(v17 + 8 * v16), *(const void **)(*a2 + 8 * v16), 4 * *(int *)(a1 + 96));
        uint64_t v18 = *(void *)(a1 + 264);
      }
      int v19 = *(_DWORD *)(a1 + 104);
      if (*(unsigned char *)(a1 + 40)) {
        *(_DWORD *)(*(void *)(v18 + 8 * v16) + 4 * (v19 - 1)) = 1065353216;
      }
      VVector<float>::print((float **)(v18 + 8 * v16), "FullLayer input: ", v19);
      MMatrix<signed char>::print(*(char ***)(a1 + 512), "FullLayer weights: ", *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 10);
      if (!v9) {
        VVector<float>::internalMul();
      }
      uint64_t v20 = *(void *)(a1 + 360);
      float v21 = (const void **)(v20 + 24 * v14);
      float v22 = *v21;
      *(_DWORD *)*float v21 = **(_DWORD **)(*a3 + 24 * v14);
      if (*(unsigned char *)(a1 + 40)) {
        v22[1] = *(_DWORD *)(a1 + 104) - 1;
      }
      uint64_t v23 = v15;
      std::string v24 = (float **)(*(void *)(a1 + 384) + 8 * v15);
      unsigned __int8 v33 = 0;
      uint64_t v34 = 0;
      uint64_t v32 = 0;
      uint64_t v25 = *(void *)(v20 + 24 * (int)v14 + 8);
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v32, *v21, v25, (v25 - (uint64_t)*v21) >> 2);
      VVector<float>::internalMul(v24, (int *)v32, v33, **(void **)(a1 + 512), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104));
      if (v32)
      {
        unsigned __int8 v33 = (int *)v32;
        operator delete(v32);
      }
      uint64_t v26 = *(void *)(a1 + 384);
      int v27 = *(_DWORD *)(a1 + 100);
      int v28 = *(float **)(v26 + 8 * v23);
      if (v27 >= 1)
      {
        uint64_t v29 = *(unsigned int *)(a1 + 100);
        do
        {
          int v30 = -1035468800;
          if (*v28 < -50.0 || (int v30 = 1112014848, *v28 > 50.0)) {
            *(_DWORD *)int v28 = v30;
          }
          ++v28;
          --v29;
        }
        while (v29);
        int v28 = *(float **)(v26 + 8 * v23);
      }
      VVector<float>::applyForwardActivation((float **)(*(void *)(a1 + 288) + 8 * v14), v28, v27, *(_DWORD *)(a1 + 408));
      ++v12;
    }
    while (v12 != v11);
  }
}

void sub_19290FEA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void FullLayer<signed char>::backward(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (*(int *)(a1 + 112) < 1) {
    bzero(*(void **)(a1 + 136), 4 * *(int *)(a1 + 108));
  }
  else {
    *(_DWORD *)(a1 + 160) = 0;
  }
  BOOL v9 = __OFSUB__(a5, 1);
  int v10 = a5 - 1;
  if (v10 < 0 == v9)
  {
    unsigned int v11 = 0;
    do
    {
      if (*(unsigned char *)(a1 + 520)) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v10;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 248))(a1, a4, a3, v12, 0xFFFFFFFFLL, 0xFFFFFFFFLL);
      --v10;
      ++v11;
    }
    while (v10 != -1);
  }
}

void FullLayer<signed char>::update(uint64_t a1)
{
  if (*(int *)(a1 + 112) >= 1) {
    exitFramework(33);
  }
  exitFramework(23);
}

uint64_t FullLayer<signed char>::noutputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 100);
}

uint64_t FullLayer<signed char>::ninputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

void FullLayer<signed char>::initDW(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 116))
  {
    if (*(_DWORD *)(a1 + 112)) {
      *(_DWORD *)(a1 + 160) = 0;
    }
    else {
      bzero(*(void **)(a1 + 136), 4 * *(int *)(a1 + 108));
    }
  }
  uint64_t v4 = *(void *)(a1 + 264);
  if (*(void *)(a1 + 272) != v4)
  {
    unint64_t v5 = 0;
    do
    {
      bzero(*(void **)(v4 + 8 * v5++), 4 * *(int *)(a1 + 104));
      uint64_t v4 = *(void *)(a1 + 264);
    }
    while (v5 < (*(void *)(a1 + 272) - v4) >> 3);
  }
  uint64_t v6 = *(void *)(a1 + 288);
  if (*(void *)(a1 + 296) != v6)
  {
    unint64_t v7 = 0;
    do
    {
      bzero(*(void **)(v6 + 8 * v7++), 4 * *(int *)(a1 + 100));
      uint64_t v6 = *(void *)(a1 + 288);
    }
    while (v7 < (*(void *)(a1 + 296) - v6) >> 3);
  }
  if (a2 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 8 * a2;
    do
    {
      if (!*(unsigned char *)(a1 + 116))
      {
        bzero(*(void **)(*(void *)(a1 + 312) + v8), 4 * *(int *)(a1 + 104));
        bzero(*(void **)(*(void *)(a1 + 336) + v8), 4 * *(int *)(a1 + 100));
      }
      v8 += 8;
    }
    while (v9 != v8);
  }
}

void FullLayer<signed char>::backwardForSingleFeatureVector(uint64_t a1, uint64_t *a2, void *a3, int a4)
{
  if (((**(uint64_t (***)(uint64_t))a1)(a1) & 1) == 0)
  {
    VVector<float>::applyBackwardActivationDerivative((void **)(a1 + 416), *(float **)(*(void *)(a1 + 384) + 8 * a4), *(float **)(*a2 + 8 * a4), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 408));
    VVector<float>::internalMul();
  }
  if (a3[1] == *a3 || *(int *)(a1 + 112) < 1 || !(**(unsigned int (***)(uint64_t))a1)(a1))
  {
    uint64_t v10 = *(void *)(a1 + 264) + 8 * a4;
    int v11 = *(_DWORD *)(a1 + 100);
    int v12 = *(_DWORD *)(a1 + 104);
    uint64_t v13 = *(void *)(a1 + 136);
    VVector<float>::sumOuterProd(a1 + 416, v10, v13, v11, v12);
  }
  else
  {
    uint64_t v8 = *a2;
    uint64_t v9 = *(void *)(a1 + 360) + 24 * a4;
    int v15 = 0;
    uint64_t v16 = 0;
    std::string __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 2);
    SparseMatrix<float>::sum<float>(a1 + 144, *(int **)(v8 + 8 * a4), (uint64_t)__p, *(_DWORD *)(a1 + 100));
    if (__p)
    {
      int v15 = __p;
      operator delete(__p);
    }
  }
}

float FullLayer<signed char>::computeErrorForSingleFeatureVector(uint64_t a1, uint64_t *a2, void *a3, int a4, _DWORD *a5, float result)
{
  uint64_t v6 = *(void *)(a1 + 288);
  uint64_t v7 = *(unsigned int *)(a1 + 100);
  if ((int)v7 <= 0)
  {
    uint64_t v14 = *a2;
    int v15 = (float **)(*a2 + 8 * a4);
  }
  else
  {
    int v8 = 0;
    uint64_t v9 = 0;
    float v11 = 1.1755e-38;
    do
    {
      uint64_t v10 = *(void *)(v6 + 8 * a4);
      if (*(float *)(v10 + 4 * v9) > v11)
      {
        int v8 = v9;
        float v11 = *(float *)(v10 + 4 * v9);
      }
      ++v9;
    }
    while (v7 != v9);
    int v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = *a2;
    int v15 = (float **)(*a2 + 8 * a4);
    uint64_t result = 1.1755e-38;
    do
    {
      if ((*v15)[v13] > result)
      {
        int v12 = v13;
        uint64_t result = (*v15)[v13];
      }
      ++v13;
    }
    while (v7 != v13);
    if (v8 != v12) {
      ++*a5;
    }
  }
  if (a4 < (unint64_t)((uint64_t)(a3[1] - *a3) >> 3)
    && a4 < (unint64_t)((a2[1] - v14) >> 3)
    && a4 < (unint64_t)((*(void *)(a1 + 296) - v6) >> 3))
  {
    uint64_t v16 = *(unsigned int *)(a1 + 100);
    if ((int)v16 >= 1)
    {
      uint64_t v17 = *v15;
      uint64_t v18 = *(float **)(v6 + 8 * a4);
      int v19 = *(float **)(*a3 + 8 * a4);
      do
      {
        float v20 = *v17++;
        float v21 = v20;
        float v22 = *v18++;
        uint64_t result = v21 - v22;
        *v19++ = result;
        --v16;
      }
      while (v16);
    }
  }
  return result;
}

void FullLayer<signed char>::log2ProbabilityForSingleFeatureVector(uint64_t a1, void *a2, float *a3, int a4)
{
  uint64_t v5 = *(unsigned int *)(a1 + 100);
  if ((int)v5 < 1)
  {
    uint64_t v10 = 0;
  }
  else
  {
    int v6 = 0;
    uint64_t v7 = 0;
    float v9 = 1.1755e-38;
    do
    {
      uint64_t v8 = *(void *)(*a2 + 8 * a4);
      if (*(float *)(v8 + 4 * v7) > v9)
      {
        int v6 = v7;
        float v9 = *(float *)(v8 + 4 * v7);
      }
      ++v7;
    }
    while (v5 != v7);
    uint64_t v10 = v6;
  }
  float v11 = *(float *)(*(void *)(*(void *)(a1 + 288) + 8 * a4) + 4 * v10);
  if (v11 <= 1.0e-10) {
    float v12 = 99.0;
  }
  else {
    float v12 = 0.0 - log2f(v11);
  }
  *a3 = v12;
}

void FullLayer<signed char>::allocAllBuffers(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "FullLayer, from allocAll");
  (*(void (**)(uint64_t, void **, void, float))(*(void *)a1 + 400))(a1, __p, 0, -0.44);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1929104BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FullLayer<signed char>::unsetSpecialBidir(uint64_t result)
{
  *(unsigned char *)(result + 42) = 0;
  return result;
}

uint64_t FullLayer<signed char>::setSpecialBidir(uint64_t result)
{
  *(unsigned char *)(result + 42) = 1;
  return result;
}

uint64_t FullLayer<signed char>::setWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(v2 - 16);
  *(void *)(a2 + 8) = v2 - 16;
  *(void *)(a1 + 128) = v3;
  uint64_t result = a1 + 128;
  *(void *)(result + 384) = result;
  return result;
}

char *FullLayer<signed char>::getWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = **(void **)(a1 + 512);
  double v4 = *(double *)(a1 + 100);
  uint64_t v5 = *(uint64_t **)(a2 + 8);
  if ((unint64_t)v5 >= *(void *)(a2 + 16))
  {
    uint64_t result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v3, v4);
  }
  else
  {
    uint64_t *v5 = v3;
    *((double *)v5 + 1) = v4;
    uint64_t result = (char *)(v5 + 2);
  }
  *(void *)(a2 + 8) = result;
  return result;
}

void FullLayer<signed char>::resetForNewBatch(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 424);
  std::string::basic_string[abi:ne180100]<0>(__p, "FULLLAYER - Print before reset");
  (*(void (**)(uint64_t, void **))(*(void *)v2 + 40))(v2, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(void))(**(void **)(a1 + 424) + 16))(*(void *)(a1 + 424));
  uint64_t v3 = *(void *)(a1 + 424);
  std::string::basic_string[abi:ne180100]<0>(__p, "FULLLAYER - Print AFTER reset");
  (*(void (**)(uint64_t, void **))(*(void *)v3 + 40))(v3, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_192910648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FullLayer<signed char>::normalizeModel(uint64_t result, float a2)
{
  uint64_t v2 = *(unsigned int *)(result + 108);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0;
    double v4 = *(void **)(result + 512);
    do
    {
      *(unsigned char *)(*v4 + v3) = (int)(float)((float)*(char *)(*v4 + v3) * a2);
      ++v3;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t FullLayer<signed char>::clipModel(uint64_t result, float a2)
{
  uint64_t v2 = *(unsigned int *)(result + 108);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0;
    double v4 = *(void **)(result + 512);
    do
    {
      float v5 = (float)*(char *)(*v4 + v3);
      float v6 = -a2;
      if (v5 < (float)-a2 || (float v6 = a2, v5 > a2)) {
        *(unsigned char *)(*v4 + v3) = (int)v6;
      }
      ++v3;
    }
    while (v2 != v3);
  }
  return result;
}

void FullLayer<signed char>::applyGradient(uint64_t a1, void *lpsrc)
{
  if (lpsrc) {
  (*(void (**)(void))(**(void **)(a1 + 424) + 64))(*(void *)(a1 + 424));
  }
  exitFramework(23);
}

void *FullLayer<signed char>::addGradient(uint64_t a1, void *lpsrc)
{
  if (lpsrc) {
  else
  }
    uint64_t result = 0;
  uint64_t v4 = (*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100));
  if ((int)v4 >= 1)
  {
    uint64_t v5 = 0;
    float v6 = *(void **)(a1 + 512);
    do
    {
      *(unsigned char *)(*v6 + v5) += *(unsigned char *)(result[16] + v5);
      ++v5;
    }
    while (v4 != v5);
  }
  return result;
}

void FullLayer<signed char>::compareModels(int a1, void *lpsrc, const void *a3)
{
  if (lpsrc) {
  if (a3)
  }
  {
  }
}

void *FullLayer<signed char>::subtractModels(uint64_t a1, void *lpsrc, const void *a3)
{
  if (lpsrc)
  {
    if (a3)
    {
LABEL_3:
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v5 = 0;
    if (a3) {
      goto LABEL_3;
    }
  }
  uint64_t result = 0;
LABEL_6:
  uint64_t v7 = (*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100));
  if ((int)v7 >= 1)
  {
    uint64_t v8 = 0;
    float v9 = *(void **)(a1 + 512);
    do
    {
      *(unsigned char *)(*v9 + v8) = *(unsigned char *)(result[16] + v8) - *(unsigned char *)(v5[16] + v8);
      ++v8;
    }
    while (v7 != v8);
  }
  return result;
}

void FullLayer<signed char>::write(uint64_t a1, FILE *__stream, __sFILE *a3, int a4, int a5)
{
  NeuralNetwork::writeDimensions(__stream, a3, (int *)*(unsigned int *)(a1 + 100), *(_DWORD *)(a1 + 104));
  if (a4 >= 1)
  {
    int __ptr = *(_DWORD *)(a1 + 408);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    LODWORD(a3->_p) += 4;
  }
  uint64_t v10 = *(void *)(a1 + 512);

  MMatrix<signed char>::write(v10, __stream, (int *)a3, a5);
}

uint64_t FullLayer<signed char>::read(uint64_t a1, NeuralNetwork *this, int *a3, int *a4, int *a5)
{
  int v5 = (int)a4;
  *(void *)uint64_t v18 = 0;
  NeuralNetwork::readDimensions((uint64_t *)this, (ReadOnlyFile *)&v18[4], v18, a4, a5);
  if (v5 >= 1)
  {
    uint64_t v9 = *((int *)this + 18);
    uint64_t v10 = (int *)(*(void *)this + v9);
    if ((unint64_t)v10 <= *(void *)this + *((void *)this + 1) - 4)
    {
      int v11 = *v10;
      *((_DWORD *)this + 18) = v9 + 4;
    }
    else
    {
      int v11 = 0;
    }
    *(_DWORD *)(a1 + 408) = v11;
  }
  float v12 = (signed __int8 **)*(unsigned int *)(a1 + 100);
  if (v12 != *(_DWORD *)&v18[4] || (int v13 = *(_DWORD *)(a1 + 104), v13 != *(_DWORD *)v18)) {
    exitFramework(3);
  }
  uint64_t v14 = *(char **)(a1 + 512);
  int v15 = *a3;
  int v16 = *(unsigned __int8 *)(a1 + 117);

  return MMatrix<signed char>::read(v14, (uint64_t)this, v15, v16, v12, v13);
}

uint64_t FullLayer<signed char>::weightsAreNaN()
{
  return 0;
}

uint64_t FullLayer<signed char>::inputDeltas(uint64_t a1)
{
  return a1 + 312;
}

uint64_t FullLayer<signed char>::deltas(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 376))();
}

uint64_t FullLayer<signed char>::outputs(uint64_t a1)
{
  return a1 + 288;
}

uint64_t FullLayer<signed char>::inputs(uint64_t a1)
{
  return a1 + 264;
}

void FullLayer<signed char>::targets()
{
}

void SoftMax<signed char>::~SoftMax(uint64_t a1)
{
  FullLayer<signed char>::~FullLayer(a1);

  JUMPOUT(0x192FF16B0);
}

void SoftMax<signed char>::forward(unsigned __int8 *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v13 = a1[520];
  std::string::basic_string[abi:ne180100]<0>(&__p, "Softmax");
  if (a5 && v13) {
    exitFramework(34);
  }
  unsigned int v14 = a4 & 0xFFFFFF;
  uint64_t v15 = a5 != 0;
  if (v17 < 0) {
    operator delete(__p);
  }
  if (v14 > v15)
  {
    do
    {
      (*(void (**)(unsigned __int8 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 224))(a1, a2, a3, v15, a7);
      uint64_t v15 = (v15 + 1);
    }
    while (v14 != v15);
  }
}

void sub_192910D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SoftMax<signed char>::forwardForSingleFeatureVector(uint64_t a1, void *a2, uint64_t a3, int a4, const void **a5)
{
  int v9 = *(unsigned __int8 *)(a1 + 42);
  uint64_t v10 = a4;
  uint64_t v11 = *(int *)(a1 + 96);
  uint64_t v43 = *(int *)(a1 + 100);
  uint64_t v12 = *(unsigned int *)(a1 + 100);
  int v42 = *(uint64_t **)(a1 + 512);
  size_t v13 = *(int *)(a1 + 104);
  uint64_t v14 = *(unsigned int *)(a1 + 104);
  uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  memmove(*(void **)(*v15 + 8 * a4), *(const void **)(*a2 + 8 * a4), 4 * v11);
  if (*(unsigned char *)(a1 + 40)) {
    *(_DWORD *)(*(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) + 8 * v10)
  }
              + 4 * ((int)v13 - 1)) = 1065353216;
  int v44 = a5;
  uint64_t v18 = a5;
  char v17 = *a5;
  int v16 = v18[1];
  if (v9) {
    uint64_t v19 = 1;
  }
  else {
    uint64_t v19 = v10;
  }
  float v20 = (void **)(*(void *)(a1 + 384) + 8 * v19);
  float v21 = (void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) + 8 * v10);
  if (v16 == v17) {
    VVector<float>::internalMul();
  }
  bzero(*v20, 4 * v43);
  {
    VVector<float>::computeXTimesW(VVector<float>&,std::vector<int> const&,VVector<float> const&,MMatrix<signed char> const&,int,int)::scale = 986185728;
  }
  std::vector<signed char>::vector(__p, v13);
  if ((int)v13 >= 1)
  {
    uint64_t v25 = 0;
    v22.n128_u32[0] = -5.0;
    v23.n128_u32[0] = 5.0;
    v24.n128_u32[0] = 1103940813;
    do
    {
      float v26 = *(float *)(*v21 + 4 * v25);
      if (v26 <= -5.0)
      {
        LOBYTE(v27) = -127;
      }
      else if (v26 < 5.0 && (int v27 = llroundf(v26 * 25.6), v27 <= 127))
      {
        if (v27 <= -127) {
          LOBYTE(v27) = -127;
        }
      }
      else
      {
        LOBYTE(v27) = 127;
      }
      *((unsigned char *)__p[0] + v25++) = v27;
    }
    while (v14 != v25);
  }
  uint64_t v41 = v19;
  int v28 = (int *)*v44;
  uint64_t v29 = (int8x16_t *)__p[0];
  uint64_t v30 = (unsigned char *)v44[1] - (unsigned char *)*v44;
  if (v30)
  {
    uint64_t v31 = *v42;
    float v32 = *(float *)&VVector<float>::computeXTimesW(VVector<float>&,std::vector<int> const&,VVector<float> const&,MMatrix<signed char> const&,int,int)::scale;
    unsigned __int8 v33 = *v20;
    unint64_t v34 = v30 >> 2;
    if (v34 <= 1) {
      uint64_t v35 = 1;
    }
    else {
      uint64_t v35 = v34;
    }
    do
    {
      uint64_t v36 = *v28++;
      v22.n128_f32[0] = v32
                      * (float)(int)VVector<float>::dot((int8x16_t *)(v31 + (int)v36 * (uint64_t)(int)v14), v29, v14);
      v33[v36] = v22.n128_u32[0];
      --v35;
    }
    while (v35);
  }
  if (v29)
  {
    __p[1] = v29;
    operator delete(v29);
  }
  if ((int)v43 >= 1)
  {
    int v37 = *(unsigned __int32 **)(*(void *)(a1 + 384) + 8 * v41);
    uint64_t v38 = v12;
    do
    {
      v23.n128_u32[0] = *v37;
      v22.n128_u32[0] = -1035468800;
      if (*(float *)v37 < -50.0 || (v22.n128_u32[0] = 1112014848, v23.n128_f32[0] > 50.0)) {
        unsigned __int32 *v37 = v22.n128_u32[0];
      }
      ++v37;
      --v38;
    }
    while (v38);
  }
  int v39 = (void **)(*(void *)(*(uint64_t (**)(uint64_t, __n128, __n128, __n128))(*(void *)a1 + 32))(a1, v22, v23, v24)+ 8 * v10);
  BOOL v40 = (uint64_t *)(*(void *)(a1 + 384) + 8 * v41);
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v45 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v45, *v44, (uint64_t)v44[1], ((unsigned char *)v44[1] - (unsigned char *)*v44) >> 2);
  VVector<float>::outputExpNormalized(v39, v40, (int **)&v45, v12);
  if (v45)
  {
    uint64_t v46 = v45;
    operator delete(v45);
  }
}

void *std::vector<signed char>::vector(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    int v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_192911204(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void SoftMax<signed char>::allocAllBuffers(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "SoftMax, from allocAll");
  FullLayer<signed char>::init(a1, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_192911280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SoftMax<signed char>::outputs(uint64_t a1)
{
  return a1 + 288;
}

uint64_t SoftMax<signed char>::inputs(uint64_t a1)
{
  return a1 + 264;
}

void SoftMax<signed char>::targets()
{
}

void RecurrentLayer<signed char>::init(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 240);
  if (v1) {
    BOOL v2 = !*(unsigned char *)(v1 + 20) && *(_DWORD *)(v1 + 40) == 1 && *(_DWORD *)(v1 + 44) == 1;
  }
  else {
    BOOL v2 = 1;
  }
  int v3 = *(_DWORD *)(a1 + 48);
  int v4 = *(_DWORD *)(a1 + 44) + *(unsigned __int8 *)(a1 + 40);
  *(_DWORD *)(a1 + 52) = v4;
  if (v2)
  {
    v4 += v3;
    *(_DWORD *)(a1 + 52) = v4;
  }
  *(_DWORD *)(a1 + 56) = v3 * v4;
  operator new[]();
}

void sub_192911C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

float RecurrentLayer<signed char>::probability(uint64_t a1, int a2, int a3)
{
  return *(float *)(*(void *)(*(void *)(a1 + 112) + 8 * a2) + 4 * a3);
}

uint64_t RecurrentLayer<signed char>::outputDeltas(uint64_t a1)
{
  return a1 + 160;
}

void RecurrentLayer<signed char>::~RecurrentLayer(void *a1)
{
  RecurrentLayer<signed char>::~RecurrentLayer(a1);

  JUMPOUT(0x192FF16B0);
}

void *RecurrentLayer<signed char>::~RecurrentLayer(void *a1)
{
  *a1 = &unk_1EE318468;
  RecurrentLayer<signed char>::cleanupAllBuffers((uint64_t)a1);
  PTMutex::~PTMutex((PTMutex *)(a1 + 37));
  BOOL v2 = (void *)a1[34];
  if (v2)
  {
    a1[35] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[31];
  if (v3)
  {
    a1[32] = v3;
    operator delete(v3);
  }
  int v4 = (void *)a1[23];
  if (v4)
  {
    a1[24] = v4;
    operator delete(v4);
  }
  int v5 = (void *)a1[20];
  if (v5)
  {
    a1[21] = v5;
    operator delete(v5);
  }
  float v6 = (void *)a1[17];
  if (v6)
  {
    a1[18] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[14];
  if (v7)
  {
    a1[15] = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)a1[11];
  if (v8)
  {
    a1[12] = v8;
    operator delete(v8);
  }
  *a1 = &unk_1EE3182B8;
  int v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t RecurrentLayer<signed char>::cleanupAllBuffers(uint64_t result)
{
  uint64_t v1 = (void *)result;
  uint64_t v2 = *(void *)(result + 248);
  uint64_t v3 = *(void *)(result + 256);
  if (v3 == v2)
  {
    uint64_t v2 = *(void *)(result + 256);
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t result = *(void *)(v2 + 8 * v4);
      if (result)
      {
        uint64_t result = MEMORY[0x192FF1690](result, 0x1000C8052888210);
        uint64_t v2 = v1[31];
        uint64_t v3 = v1[32];
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
  }
  uint64_t v5 = v1[34];
  uint64_t v6 = v1[35];
  if (v6 == v5)
  {
    uint64_t v5 = v1[35];
  }
  else
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t result = *(void *)(v5 + 8 * v7);
      if (result)
      {
        uint64_t result = MEMORY[0x192FF1690](result, 0x1000C8077774924);
        uint64_t v5 = v1[34];
        uint64_t v6 = v1[35];
      }
      ++v7;
    }
    while (v7 < (v6 - v5) >> 3);
    uint64_t v2 = v1[31];
  }
  v1[32] = v2;
  v1[35] = v5;
  return result;
}

float RecurrentLayer<signed char>::log2Probability(uint64_t a1, uint64_t *a2, int a3)
{
  if (a3 < 1) {
    return 0.0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  uint64_t v5 = *a2;
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v7 = a3;
  float v8 = 0.0;
  do
  {
    if ((int)v4 < 1)
    {
      int v9 = 0;
    }
    else
    {
      int v9 = 0;
      uint64_t v10 = 0;
      float v12 = 1.1755e-38;
      do
      {
        uint64_t v11 = *(void *)(v5 + 8 * v3);
        if (*(float *)(v11 + 4 * v10) > v12)
        {
          int v9 = v10;
          float v12 = *(float *)(v11 + 4 * v10);
        }
        ++v10;
      }
      while (v4 != v10);
    }
    float v13 = *(float *)(*(void *)(v6 + 8 * v3) + 4 * v9);
    if (v13 <= 1.0e-10) {
      float v14 = 99.0;
    }
    else {
      float v14 = -log2f(v13);
    }
    float v8 = v8 + v14;
    ++v3;
  }
  while (v3 != v7);
  return v8;
}

uint64_t RecurrentLayer<signed char>::computeError(uint64_t result, uint64_t *a2, uint64_t *a3, int a4, int *a5)
{
  if (a4 >= 1)
  {
    int v5 = *a5;
    uint64_t v6 = *(void *)(result + 112);
    uint64_t v7 = *a2;
    uint64_t v8 = *a3;
    uint64_t v9 = a4;
    uint64_t v10 = *(unsigned int *)(result + 48);
    do
    {
      if ((int)v10 >= 1)
      {
        int v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = (v9 - 1);
        float v14 = *(float **)(v6 + 8 * v13);
        float v15 = 1.1755e-38;
        do
        {
          if (v14[v12] > v15)
          {
            int v11 = v12;
            float v15 = v14[v12];
          }
          ++v12;
        }
        while (v10 != v12);
        int v16 = 0;
        uint64_t v17 = 0;
        uint64_t v18 = *(float **)(v7 + 8 * v13);
        float v19 = 1.1755e-38;
        do
        {
          if (v18[v17] > v19)
          {
            int v16 = v17;
            float v19 = v18[v17];
          }
          ++v17;
        }
        while (v10 != v17);
        if (v11 == v16)
        {
          uint64_t v10 = v10;
        }
        else
        {
          *a5 = ++v5;
          uint64_t v10 = *(unsigned int *)(result + 48);
        }
        if ((int)v10 >= 1)
        {
          float v20 = *(float **)(v8 + 8 * v13);
          uint64_t v21 = v10;
          do
          {
            float v22 = *v18++;
            float v23 = v22;
            float v24 = *v14++;
            *v20++ = v23 - v24;
            --v21;
          }
          while (v21);
        }
      }
    }
    while (v9-- > 1);
  }
  return result;
}

uint64_t RecurrentLayer<signed char>::updateFrom(uint64_t a1, void *lpsrc, float a3)
{
  if (*(_DWORD *)(a1 + 368)) {
    exitFramework(1);
  }
  if (!v5) {
    __cxa_bad_cast();
  }
  uint64_t v6 = v5;
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 304));
  uint64_t v7 = *(unsigned int *)(a1 + 56);
  if ((int)v7 >= 1)
  {
    for (uint64_t i = 0; i != v7; ++i)
      *(unsigned char *)(*(void *)(a1 + 64) + i) = (int)(float)((float)*(char *)(*(void *)(a1 + 64) + i)
                                                        + (float)(*(float *)(v6[10] + 4 * i) * (float)(int)a3));
  }

  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 304));
}

char *RecurrentLayer<signed char>::setMaster(uint64_t a1, void *lpsrc)
{
  if (*(_DWORD *)(a1 + 368) != 1) {
    exitFramework(1);
  }
  if (!result) {
    __cxa_bad_cast();
  }
  *(void *)(a1 + 376) = result + 64;
  return result;
}

void RecurrentLayer<signed char>::forward(uint64_t a1, void *a2, uint64_t a3, int a4, uint64_t a5)
{
  id v47[2] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(a1 + 240);
  if (v9) {
    BOOL v10 = !*(unsigned char *)(v9 + 20) && *(_DWORD *)(v9 + 40) == 1 && *(_DWORD *)(v9 + 44) == 1;
  }
  else {
    BOOL v10 = 1;
  }
  BOOL v11 = *(unsigned char *)(a1 + 232) != 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Recurrent");
  char v12 = !v11;
  if (!a5) {
    char v12 = 1;
  }
  if ((v12 & 1) == 0) {
    exitFramework(34);
  }
  signed int v13 = a5 != 0;
  if (SHIBYTE(v46) < 0) {
    operator delete(__p);
  }
  std::string __p = 0;
  long long v46 = 0uLL;
  i2s(&v43);
  float v14 = std::string::insert(&v43, 0, "RNN Forward W_i[");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  int v16 = std::string::append(&v44, "] W:");
  uint64_t v17 = (void *)v16->__r_.__value_.__r.__words[0];
  v47[0] = v16->__r_.__value_.__l.__size_;
  *(void *)((char *)v47 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
  char v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46) < 0) {
    operator delete(__p);
  }
  std::string __p = v17;
  *(void *)&long long v46 = v47[0];
  *(void *)((char *)&v46 + 7) = *(void *)((char *)v47 + 7);
  HIBYTE(v46) = v18;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (v46 >= 0) {
    p_p = (char *)&__p;
  }
  else {
    p_p = (char *)__p;
  }
  MMatrix<signed char>::print(*(char ***)(a1 + 376), p_p, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
  i2s(&v43);
  float v20 = std::string::insert(&v43, 0, "RNN Forward R_i[");
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  float v22 = std::string::append(&v44, "] R:");
  float v23 = (void *)v22->__r_.__value_.__r.__words[0];
  v47[0] = v22->__r_.__value_.__l.__size_;
  *(void *)((char *)v47 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
  char v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46) < 0) {
    operator delete(__p);
  }
  std::string __p = v23;
  *(void *)&long long v46 = v47[0];
  *(void *)((char *)&v46 + 7) = *(void *)((char *)v47 + 7);
  HIBYTE(v46) = v24;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  uint64_t v25 = *(char ***)(a1 + 384);
  if (v25)
  {
    if (v46 >= 0) {
      float v26 = (char *)&__p;
    }
    else {
      float v26 = (char *)__p;
    }
    MMatrix<signed char>::print(v25, v26, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 48));
  }
  int v27 = a4 & 0xFFFFFF;
  if ((a4 & 0xFFFFFFu) > v13)
  {
    if (*(unsigned char *)(a1 + 232)) {
      signed int v13 = v27 + ~v13;
    }
    BOOL v28 = v13 < v27 - 1;
    if (*(unsigned char *)(a1 + 232)) {
      int v29 = 1;
    }
    else {
      int v29 = -1;
    }
    if (*(unsigned char *)(a1 + 232)) {
      BOOL v30 = v28;
    }
    else {
      BOOL v30 = a5 != 0;
    }
    uint64_t v31 = v13;
    bzero(*(void **)(*(void *)(a1 + 88) + 8 * v13), 4 * *(int *)(a1 + 52));
    uint64_t v32 = *(void *)(a1 + 88);
    int v33 = *(_DWORD *)(a1 + 44);
    if (v33 >= 1)
    {
      unint64_t v34 = *(int **)(*a2 + 8 * v13);
      uint64_t v35 = *(_DWORD **)(v32 + 8 * v13);
      uint64_t v36 = *(unsigned int *)(a1 + 44);
      do
      {
        int v37 = *v34++;
        *v35++ = v37;
        --v36;
      }
      while (v36);
    }
    int v38 = v13 + v29;
    if (v10 && v30)
    {
      uint64_t v39 = *(unsigned int *)(a1 + 48);
      if ((int)v39 >= 1)
      {
        BOOL v40 = *(int **)(*(void *)(a1 + 112) + 8 * v38);
        uint64_t v41 = (_DWORD *)(*(void *)(v32 + 8 * v31) + 4 * v33);
        do
        {
          int v42 = *v40++;
          *v41++ = v42;
          --v39;
        }
        while (v39);
      }
    }
    if (*(unsigned char *)(a1 + 40)) {
      *(_DWORD *)(*(void *)(v32 + 8 * v31) + 4 * *(int *)(a1 + 52) - 4) = 1065353216;
    }
    VVector<float>::print((float **)(*(void *)(a1 + 112) + 8 * v38), "RNN output t-1 : ", *(_DWORD *)(a1 + 48));
    VVector<float>::print((float **)(*(void *)(a1 + 88) + 8 * v31), "RNN input t: ", *(_DWORD *)(a1 + 52));
    MMatrix<signed char>::print((char **)(a1 + 64), "RNN weights: ", *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 10);
    VVector<float>::internalMul();
  }
  if (SHIBYTE(v46) < 0) {
    operator delete(__p);
  }
}

void sub_192912674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

void RecurrentLayer<signed char>::backward(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5)
{
  if ((**(uint64_t (***)(uint64_t))a1)(a1))
  {
    bzero(*(void **)(a1 + 80), 4 * *(int *)(a1 + 56));
    if (a5 >= 1)
    {
      int v9 = 0;
      do
      {
        --a5;
        if (*(unsigned char *)(a1 + 232)) {
          int v10 = v9;
        }
        else {
          int v10 = a5;
        }
        uint64_t v11 = v10;
        VVector<float>::sumOuterProd(*a4 + 8 * v10, *(void *)(a1 + 88) + 8 * v10, *(void *)(a1 + 80), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52));
        if (*(unsigned char *)(a1 + 40)) {
          *(_DWORD *)(*(void *)(*(void *)(a1 + 136) + 8 * v11) + 4 * *(int *)(a1 + 52) - 4) = 1065353216;
        }
        std::string::basic_string[abi:ne180100]<0>(&v27, "FullLayer DW: t[");
        i2s(v25);
        if ((v26 & 0x80u) == 0) {
          char v12 = v25;
        }
        else {
          char v12 = (void **)v25[0];
        }
        if ((v26 & 0x80u) == 0) {
          std::string::size_type v13 = v26;
        }
        else {
          std::string::size_type v13 = (std::string::size_type)v25[1];
        }
        float v14 = std::string::append(&v27, (const std::string::value_type *)v12, v13);
        long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v28.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(__p, "] ");
        if ((v24 & 0x80u) == 0) {
          int v16 = __p;
        }
        else {
          int v16 = (void **)__p[0];
        }
        if ((v24 & 0x80u) == 0) {
          std::string::size_type v17 = v24;
        }
        else {
          std::string::size_type v17 = (std::string::size_type)__p[1];
        }
        char v18 = std::string::append(&v28, (const std::string::value_type *)v16, v17);
        long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        int64_t v30 = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)int v29 = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        if ((char)v24 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v28.__r_.__value_.__l.__data_);
        }
        if ((char)v26 < 0) {
          operator delete(v25[0]);
        }
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v27.__r_.__value_.__l.__data_);
        }
        if (v30 >= 0) {
          float v20 = (char *)v29;
        }
        else {
          float v20 = (char *)v29[0];
        }
        MMatrix<float>::print((float **)(a1 + 80), v20, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), 10);
        if (SHIBYTE(v30) < 0) {
          operator delete(v29[0]);
        }
        ++v9;
      }
      while (a5 > 0);
    }
  }
  else
  {
    if (a5 > 0)
    {
      if (*(unsigned char *)(a1 + 232)) {
        int v8 = 0;
      }
      else {
        int v8 = a5 - 1;
      }
      VVector<float>::applyBackwardActivationDerivative((void **)(a1 + 216), *(float **)(*(void *)(a1 + 184) + 8 * v8), *(float **)(*a4 + 8 * v8), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 208));
      VVector<float>::internalMul();
    }
    long long v21 = *(void **)(a1 + 80);
    size_t v22 = 4 * *(int *)(a1 + 56);
    bzero(v21, v22);
  }
}

void sub_1929129FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void RecurrentLayer<signed char>::update()
{
}

uint64_t RecurrentLayer<signed char>::noutputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t RecurrentLayer<signed char>::ninputs(uint64_t a1)
{
  return *(_DWORD *)(a1 + 44) + *(unsigned __int8 *)(a1 + 40);
}

void RecurrentLayer<signed char>::allocAllBuffers(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "RecurrentLayer from allocAll");
  (*(void (**)(uint64_t, void **, void, float))(*(void *)a1 + 392))(a1, __p, 0, -0.44);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_192912BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RecurrentLayer<signed char>::unsetSpecialBidir(uint64_t result)
{
  *(unsigned char *)(result + 42) = 0;
  return result;
}

uint64_t RecurrentLayer<signed char>::setSpecialBidir(uint64_t result)
{
  *(unsigned char *)(result + 42) = 1;
  return result;
}

uint64_t RecurrentLayer<signed char>::setWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(v2 - 16);
  *(void *)(a2 + 8) = v2 - 16;
  *(void *)(a1 + 64) = v3;
  uint64_t result = a1 + 64;
  *(void *)(result + 312) = result;
  return result;
}

char *RecurrentLayer<signed char>::getWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = **(void **)(a1 + 376);
  double v4 = *(double *)(a1 + 48);
  int v5 = *(uint64_t **)(a2 + 8);
  if ((unint64_t)v5 >= *(void *)(a2 + 16))
  {
    uint64_t result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v3, v4);
  }
  else
  {
    uint64_t *v5 = v3;
    *((double *)v5 + 1) = v4;
    uint64_t result = (char *)(v5 + 2);
  }
  *(void *)(a2 + 8) = result;
  return result;
}

void RecurrentLayer<signed char>::clearState(uint64_t a1, void *a2, int *a3)
{
  double v4 = (int *)(*a2 + 16 * *a3);
  bzero(**((void ***)v4 + 1), 4 * *v4);
  ++*a3;
}

void RecurrentLayer<signed char>::restoreState(uint64_t a1, void *a2, int a3, int *a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v7 = *a4;
  *a4 = v7 + 1;
  memmove(*(void **)(v6 + 8 * a3), **(const void ***)(*a2 + 16 * v7 + 8), 4 * *(int *)(a1 + 48));
  sprintf(v8, "RNN restore startTimIdx = %d", a3);
  VVector<float>::print((float **)(*(void *)(a1 + 112) + 8 * a3), v8, *(_DWORD *)(a1 + 48));
}

void *RecurrentLayer<signed char>::saveState(uint64_t a1, uint64_t *a2, int a3, int *a4)
{
  uint64_t v5 = *(int *)(a1 + 48);
  uint64_t v6 = *a2;
  *(_DWORD *)(v6 + 16 * *a4) = v5;
  uint64_t result = memmove(**(void ***)(v6 + 16 * *a4 + 8), *(const void **)(*(void *)(a1 + 112) + 8 * a3), 4 * v5);
  ++*a4;
  return result;
}

void RecurrentLayer<signed char>::allocInitialState()
{
}

void sub_192912ED8(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

void *RecurrentLayer<signed char>::addGradient(uint64_t a1, void *lpsrc)
{
  if (lpsrc) {
  else
  }
    uint64_t result = 0;
  uint64_t v4 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
  if ((int)v4 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void **)(a1 + 376);
    do
    {
      *(unsigned char *)(*v6 + v5) += *(unsigned char *)(result[8] + v5);
      ++v5;
    }
    while (v4 != v5);
  }
  return result;
}

void RecurrentLayer<signed char>::compareModels(int a1, void *lpsrc, const void *a3)
{
  if (lpsrc) {
  if (a3)
  }
  {
  }
}

void *RecurrentLayer<signed char>::subtractModels(uint64_t a1, void *lpsrc, const void *a3)
{
  if (lpsrc)
  {
    if (a3)
    {
LABEL_3:
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v5 = 0;
    if (a3) {
      goto LABEL_3;
    }
  }
  uint64_t result = 0;
LABEL_6:
  uint64_t v7 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
  if ((int)v7 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(void **)(a1 + 376);
    do
    {
      *(unsigned char *)(*v9 + v8) = *(unsigned char *)(result[8] + v8) - *(unsigned char *)(v5[8] + v8);
      ++v8;
    }
    while (v7 != v8);
  }
  return result;
}

void RecurrentLayer<signed char>::write(uint64_t a1, FILE *__stream, __sFILE *a3, int a4, int a5)
{
  NeuralNetwork::writeDimensions(__stream, a3, (int *)*(unsigned int *)(a1 + 48), *(_DWORD *)(a1 + 52));
  if (a4 >= 1)
  {
    int __ptr = *(_DWORD *)(a1 + 208);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    LODWORD(a3->_p) += 4;
  }
  uint64_t v10 = *(void *)(a1 + 376);

  MMatrix<signed char>::write(v10, __stream, (int *)a3, a5);
}

uint64_t RecurrentLayer<signed char>::read(uint64_t a1, NeuralNetwork *this, int *a3, int *a4, int *a5)
{
  int v5 = (int)a4;
  *(void *)char v18 = 0;
  NeuralNetwork::readDimensions((uint64_t *)this, (ReadOnlyFile *)&v18[4], v18, a4, a5);
  if (v5 >= 1)
  {
    uint64_t v9 = *((int *)this + 18);
    uint64_t v10 = (int *)(*(void *)this + v9);
    if ((unint64_t)v10 <= *(void *)this + *((void *)this + 1) - 4)
    {
      int v11 = *v10;
      *((_DWORD *)this + 18) = v9 + 4;
    }
    else
    {
      int v11 = 0;
    }
    *(_DWORD *)(a1 + 208) = v11;
  }
  char v12 = (signed __int8 **)*(unsigned int *)(a1 + 48);
  if (v12 != *(_DWORD *)&v18[4] || (int v13 = *(_DWORD *)(a1 + 52), v13 != *(_DWORD *)v18)) {
    exitFramework(3);
  }
  float v14 = *(char **)(a1 + 376);
  int v15 = *a3;
  int v16 = *(unsigned __int8 *)(a1 + 61);

  return MMatrix<signed char>::read(v14, (uint64_t)this, v15, v16, v12, v13);
}

uint64_t RecurrentLayer<signed char>::weightsAreNaN()
{
  return 0;
}

uint64_t RecurrentLayer<signed char>::inputDeltas(uint64_t a1)
{
  return a1 + 136;
}

uint64_t RecurrentLayer<signed char>::deltas(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 376))();
}

uint64_t RecurrentLayer<signed char>::outputs(uint64_t a1)
{
  return a1 + 112;
}

uint64_t RecurrentLayer<signed char>::inputs(uint64_t a1)
{
  return a1 + 88;
}

void RecurrentLayer<signed char>::targets()
{
}

void LSTM<signed char>::init()
{
}

void sub_19291774C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  SparseMatrix<float>::~SparseMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void LSTM<signed char>::~LSTM(uint64_t a1)
{
  LSTM<signed char>::~LSTM(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t LSTM<signed char>::~LSTM(uint64_t a1)
{
  *(void *)a1 = &unk_1EE3229D0;
  LSTM<signed char>::cleanupAllBuffers((void *)a1);
  uint64_t v2 = *(void *)(a1 + 1552);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 80))(v2);
    *(void *)(a1 + 1552) = 0;
    uint64_t v3 = *(void *)(a1 + 1560);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 80))(v3);
    }
    *(void *)(a1 + 1560) = 0;
    uint64_t v4 = *(void *)(a1 + 1568);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 80))(v4);
    }
    *(void *)(a1 + 1568) = 0;
    uint64_t v5 = *(void *)(a1 + 1576);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 80))(v5);
    }
    *(void *)(a1 + 1576) = 0;
    uint64_t v6 = *(void *)(a1 + 1584);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 80))(v6);
    }
    *(void *)(a1 + 1584) = 0;
    uint64_t v7 = *(void *)(a1 + 1592);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 80))(v7);
    }
    *(void *)(a1 + 1592) = 0;
    uint64_t v8 = *(void *)(a1 + 1600);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 80))(v8);
    }
    *(void *)(a1 + 1600) = 0;
    uint64_t v9 = *(void *)(a1 + 1608);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 80))(v9);
    }
    *(void *)(a1 + 1608) = 0;
  }
  uint64_t v10 = *(void **)(a1 + 2648);
  if (v10)
  {
    *(void *)(a1 + 2656) = v10;
    operator delete(v10);
  }
  int v11 = *(void **)(a1 + 2624);
  if (v11)
  {
    *(void *)(a1 + 2632) = v11;
    operator delete(v11);
  }
  PTMutex::~PTMutex((PTMutex *)(a1 + 2424));
  PTMutex::~PTMutex((PTMutex *)(a1 + 2352));
  PTMutex::~PTMutex((PTMutex *)(a1 + 2280));
  PTMutex::~PTMutex((PTMutex *)(a1 + 2208));
  PTMutex::~PTMutex((PTMutex *)(a1 + 2136));
  PTMutex::~PTMutex((PTMutex *)(a1 + 2064));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1992));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1920));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1848));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1776));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1704));
  SparseMatrix<float>::~SparseMatrix(a1 + 1344);
  SparseMatrix<float>::~SparseMatrix(a1 + 1224);
  SparseMatrix<float>::~SparseMatrix(a1 + 1104);
  SparseMatrix<float>::~SparseMatrix(a1 + 984);
  char v12 = *(void **)(a1 + 960);
  if (v12)
  {
    *(void *)(a1 + 968) = v12;
    operator delete(v12);
  }
  int v13 = *(void **)(a1 + 936);
  if (v13)
  {
    *(void *)(a1 + 944) = v13;
    operator delete(v13);
  }
  float v14 = *(void **)(a1 + 912);
  if (v14)
  {
    *(void *)(a1 + 920) = v14;
    operator delete(v14);
  }
  int v15 = *(void **)(a1 + 888);
  if (v15)
  {
    *(void *)(a1 + 896) = v15;
    operator delete(v15);
  }
  int v16 = *(void **)(a1 + 864);
  if (v16)
  {
    *(void *)(a1 + 872) = v16;
    operator delete(v16);
  }
  std::string::size_type v17 = *(void **)(a1 + 840);
  if (v17)
  {
    *(void *)(a1 + 848) = v17;
    operator delete(v17);
  }
  char v18 = *(void **)(a1 + 816);
  if (v18)
  {
    *(void *)(a1 + 824) = v18;
    operator delete(v18);
  }
  long long v19 = *(void **)(a1 + 792);
  if (v19)
  {
    *(void *)(a1 + 800) = v19;
    operator delete(v19);
  }
  float v20 = *(void **)(a1 + 712);
  if (v20)
  {
    *(void *)(a1 + 720) = v20;
    operator delete(v20);
  }
  long long v21 = *(void **)(a1 + 688);
  if (v21)
  {
    *(void *)(a1 + 696) = v21;
    operator delete(v21);
  }
  size_t v22 = *(void **)(a1 + 664);
  if (v22)
  {
    *(void *)(a1 + 672) = v22;
    operator delete(v22);
  }
  float v23 = *(void **)(a1 + 640);
  if (v23)
  {
    *(void *)(a1 + 648) = v23;
    operator delete(v23);
  }
  unsigned __int8 v24 = *(void **)(a1 + 616);
  if (v24)
  {
    *(void *)(a1 + 624) = v24;
    operator delete(v24);
  }
  uint64_t v25 = *(void **)(a1 + 592);
  if (v25)
  {
    *(void *)(a1 + 600) = v25;
    operator delete(v25);
  }
  unsigned __int8 v26 = *(void **)(a1 + 568);
  if (v26)
  {
    *(void *)(a1 + 576) = v26;
    operator delete(v26);
  }
  std::string v27 = *(void **)(a1 + 544);
  if (v27)
  {
    *(void *)(a1 + 552) = v27;
    operator delete(v27);
  }
  std::string v28 = *(void **)(a1 + 520);
  if (v28)
  {
    *(void *)(a1 + 528) = v28;
    operator delete(v28);
  }
  int v29 = *(void **)(a1 + 496);
  if (v29)
  {
    *(void *)(a1 + 504) = v29;
    operator delete(v29);
  }
  int64_t v30 = *(void **)(a1 + 472);
  if (v30)
  {
    *(void *)(a1 + 480) = v30;
    operator delete(v30);
  }
  uint64_t v31 = *(void **)(a1 + 448);
  if (v31)
  {
    *(void *)(a1 + 456) = v31;
    operator delete(v31);
  }
  uint64_t v32 = *(void **)(a1 + 424);
  if (v32)
  {
    *(void *)(a1 + 432) = v32;
    operator delete(v32);
  }
  int v33 = *(void **)(a1 + 400);
  if (v33)
  {
    *(void *)(a1 + 408) = v33;
    operator delete(v33);
  }
  unint64_t v34 = *(void **)(a1 + 376);
  if (v34)
  {
    *(void *)(a1 + 384) = v34;
    operator delete(v34);
  }
  uint64_t v35 = *(void **)(a1 + 352);
  if (v35)
  {
    *(void *)(a1 + 360) = v35;
    operator delete(v35);
  }
  std::string v44 = (void **)(a1 + 208);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v44);
  uint64_t v36 = *(void **)(a1 + 184);
  if (v36)
  {
    *(void *)(a1 + 192) = v36;
    operator delete(v36);
  }
  int v37 = *(void **)(a1 + 160);
  if (v37)
  {
    *(void *)(a1 + 168) = v37;
    operator delete(v37);
  }
  int v38 = *(void **)(a1 + 136);
  if (v38)
  {
    *(void *)(a1 + 144) = v38;
    operator delete(v38);
  }
  uint64_t v39 = *(void **)(a1 + 112);
  if (v39)
  {
    *(void *)(a1 + 120) = v39;
    operator delete(v39);
  }
  BOOL v40 = *(void **)(a1 + 88);
  if (v40)
  {
    *(void *)(a1 + 96) = v40;
    operator delete(v40);
  }
  uint64_t v41 = *(void **)(a1 + 64);
  if (v41)
  {
    *(void *)(a1 + 72) = v41;
    operator delete(v41);
  }
  *(void *)a1 = &unk_1EE3182B8;
  int v42 = *(void **)(a1 + 8);
  if (v42)
  {
    *(void *)(a1 + 16) = v42;
    operator delete(v42);
  }
  return a1;
}

uint64_t LSTM<signed char>::cleanupAllBuffers(void *a1)
{
  uint64_t v2 = a1[329];
  uint64_t v3 = a1[328];
  if (v2 == v3)
  {
    uint64_t v3 = a1[329];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v3 + 8 * v4);
      if (v5)
      {
        MEMORY[0x192FF1690](v5, 0x1000C8052888210);
        uint64_t v2 = a1[329];
        uint64_t v3 = a1[328];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  uint64_t v6 = a1[332];
  uint64_t v7 = a1[331];
  if (v6 == v7)
  {
    uint64_t v7 = a1[332];
  }
  else
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(v7 + 8 * v8);
      if (v9)
      {
        MEMORY[0x192FF1690](v9, 0x1000C8077774924);
        uint64_t v6 = a1[332];
        uint64_t v7 = a1[331];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
    uint64_t v3 = a1[328];
  }
  a1[329] = v3;
  a1[332] = v7;
  SparseMatrix<float>::cleanupAllBuffers(a1 + 123);
  SparseMatrix<float>::cleanupAllBuffers(a1 + 153);
  SparseMatrix<float>::cleanupAllBuffers(a1 + 138);

  return SparseMatrix<float>::cleanupAllBuffers(a1 + 168);
}

void LSTM<signed char>::log2Probability()
{
}

void LSTM<signed char>::computeError()
{
}

void LSTM<signed char>::updateFrom(uint64_t a1, void *lpsrc)
{
  if (!*(_DWORD *)(a1 + 2496))
  {
    exitFramework(34);
  }
  exitFramework(1);
}

char *LSTM<signed char>::setMaster(uint64_t a1, void *lpsrc)
{
  if (*(_DWORD *)(a1 + 2496) != 1) {
    exitFramework(1);
  }
  if (!result) {
    __cxa_bad_cast();
  }
  *(void *)(a1 + 2504) = result + 232;
  *(void *)(a1 + 2520) = result + 248;
  *(void *)(a1 + 2512) = result + 240;
  *(void *)(a1 + 2528) = result + 256;
  *(void *)(a1 + 2536) = result + 264;
  *(void *)(a1 + 2552) = result + 280;
  *(void *)(a1 + 2544) = result + 272;
  *(void *)(a1 + 2560) = result + 288;
  *(void *)(a1 + 2568) = result + 296;
  *(void *)(a1 + 2576) = result + 304;
  *(void *)(a1 + 2584) = result + 312;
  *(void *)(a1 + 2592) = result + 320;
  *(void *)(a1 + 2600) = result + 328;
  *(void *)(a1 + 2608) = result + 336;
  *(void *)(a1 + 2616) = result + 344;
  return result;
}

uint64_t LSTM<signed char>::reverseBackward(unsigned char *a1)
{
  a1[2672] = 1;
  uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 296))(a1);
  a1[2672] = 0;
  return result;
}

uint64_t LSTM<signed char>::reverseForward(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  a1[2672] = 1;
  {
    uint64_t v13 = a6;
    uint64_t v12 = a5;
    unsigned int v11 = a4;
    uint64_t v9 = a2;
    uint64_t v10 = a3;
    a2 = v9;
    a3 = v10;
    a4 = v11;
    a5 = v12;
    a6 = v13;
    if (v8)
    {
      LSTM<signed char>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy = 0;
      unk_1E9307B30 = 0;
      qword_1E9307B38 = 0;
      __cxa_atexit((void (*)(void *))std::vector<int>::~vector[abi:ne180100], &LSTM<signed char>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy, &dword_1920CB000);
      a2 = v9;
      a3 = v10;
      a4 = v11;
      a5 = v12;
      a6 = v13;
    }
  }
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 304))(a1, a2, a3, a4, a5, a6, &LSTM<signed char>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy);
  a1[2672] = 0;
  return result;
}

void LSTM<signed char>::forward(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5)
{
  if (a4 < 0x2000000) {
    int v8 = 1;
  }
  else {
    int v8 = HIBYTE(a4);
  }
  uint64_t v9 = *(void *)(a1 + 2680);
  if (v9) {
    BOOL v95 = *(unsigned char *)(v9 + 600) != 0;
  }
  else {
    BOOL v95 = 0;
  }
  if (a3[1] == *a3 || *(int *)(a1 + 56) < 1)
  {
    int v10 = 0;
  }
  else
  {
    int v10 = (**(uint64_t (***)(uint64_t))a1)(a1);
    uint64_t v9 = *(void *)(a1 + 2680);
  }
  int v102 = v10;
  if (!v9 || (float v11 = *(float *)(v9 + 604), v11 <= 0.0)) {
    float v11 = 50.0;
  }
  int v12 = *(unsigned __int8 *)(a1 + 2672);
  std::string::basic_string[abi:ne180100]<0>(v116, "LSTMv2");
  if (a5 && v12) {
    exitFramework(34);
  }
  unsigned int v13 = a4 & 0xFFFFFF;
  if (v117 < 0) {
    operator delete(v116[0]);
  }
  if (a5) {
    BOOL v14 = *(unsigned char *)(a1 + 42) == 0;
  }
  else {
    BOOL v14 = 0;
  }
  unsigned int v15 = v14;
  int v16 = v102;
  if (v13 > v15)
  {
    int v98 = v8;
    signed int v99 = v13 - 1;
    uint64_t v96 = (uint64_t *)(a1 + 752);
    int v97 = a4 & 0xFFFFFF;
    do
    {
      if (*(unsigned char *)(a1 + 2672)) {
        signed int v17 = v13 + ~v15;
      }
      else {
        signed int v17 = v15;
      }
      if (*(unsigned char *)(a1 + 2672)) {
        int v18 = 1;
      }
      else {
        int v18 = -1;
      }
      if (*(unsigned char *)(a1 + 2672)) {
        BOOL v19 = v17 < v99;
      }
      else {
        BOOL v19 = v17 > 0;
      }
      BOOL v103 = v19;
      int v20 = *(unsigned __int8 *)(a1 + 42);
      uint64_t v21 = v17;
      if (((*(unsigned char *)(a1 + 42) != 0) & v16) != 0) {
        uint64_t v22 = 1;
      }
      else {
        uint64_t v22 = v17;
      }
      uint64_t v23 = *(void *)(a1 + 64);
      if (v16)
      {
        bzero(*(void **)(v23 + 8 * v22), 4 * *(int *)(a1 + 48));
        *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8 * v22) + 4 * **(int **)(*a3 + 24 * v17)) = 1065353216;
      }
      else
      {
        memmove(*(void **)(v23 + 8 * v22), *(const void **)(*a2 + 8 * v22), 4 * *(int *)(a1 + 44));
      }
      int v24 = *(unsigned __int8 *)(a1 + 40);
      if (*(unsigned char *)(a1 + 40)) {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8 * v22) + 4 * *(int *)(a1 + 48) - 4) = 1065353216;
      }
      if (v16)
      {
        int v25 = *(_DWORD *)(a1 + 48);
        unsigned __int8 v26 = *(_DWORD **)(*(void *)(a1 + 208) + 24 * v17);
        _DWORD *v26 = **(_DWORD **)(*a3 + 24 * v17);
        if (v24) {
          v26[1] = v25 - 1;
        }
      }
      uint64_t v27 = *(void *)(a1 + 136);
      if (v8 == 1) {
        memcpy(*(void **)(v27 + 8 * v22), *(const void **)(*(void *)(a1 + 64) + 8 * v22), 4 * *(int *)(a1 + 48));
      }
      else {
        memmove(*(void **)(v27 + 8 * v22), *(const void **)(*a2 + 8 * v22), 4 * *(_DWORD *)(a1 + 44) * v8);
      }
      if (v8 > *(_DWORD *)(a1 + 2688)) {
        exitFramework(83724);
      }
      if (v20) {
        uint64_t v28 = 1;
      }
      else {
        uint64_t v28 = v17;
      }
      if (*(unsigned char *)(a1 + 2692))
      {
        bzero(*(void **)(*(void *)(a1 + 544) + 8 * v28), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(void *)(a1 + 568) + 8 * v28), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(void *)(a1 + 616) + 8 * v28), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(void *)(a1 + 592) + 8 * v28), 4 * *(int *)(a1 + 52));
      }
      bzero(*(void **)(*(void *)(a1 + 352) + 8 * v28), 4 * *(_DWORD *)(a1 + 52) * v8);
      bzero(*(void **)(*(void *)(a1 + 376) + 8 * v28), 4 * *(_DWORD *)(a1 + 52) * v8);
      bzero(*(void **)(*(void *)(a1 + 400) + 8 * v28), 4 * *(_DWORD *)(a1 + 52) * v8);
      bzero(*(void **)(*(void *)(a1 + 424) + 8 * v28), 4 * *(_DWORD *)(a1 + 52) * v8);
      uint64_t v29 = *(void *)(a1 + 2680);
      if (v29)
      {
        int v30 = *(_DWORD *)(v29 + 40);
        BOOL v31 = !*(unsigned char *)(v29 + 20) && (v30 == 5 || v30 == 2) && *(_DWORD *)(v29 + 44) == 6;
        if (v30 == 5 || v30 == 2)
        {
          if (v31) {
            goto LABEL_148;
          }
          BOOL v14 = *(_DWORD *)(v29 + 60) == 22;
          char v32 = v14;
          BOOL v33 = v103;
          if (!v14) {
            BOOL v33 = 0;
          }
          if (v33) {
LABEL_148:
          }
            LSTM<signed char>::computeXTimesWSparseOrDenseCombined(a1);
          goto LABEL_70;
        }
        if (v31) {
          goto LABEL_148;
        }
      }
      char v32 = 0;
LABEL_70:
      uint64_t v34 = *(void *)(a1 + 208) + 24 * v17;
      LSTM<signed char>::computeXTimesWSparseOrDense(a1, v16, (const float **)(*(void *)(a1 + 424) + 8 * v28), *(uint64_t **)(a1 + 2528), *(const void **)v34, *(void *)(v34 + 8), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
      if (v103 && (v32 & 1) == 0) {
LABEL_147:
      }
        exitFramework(353);
      uint64_t v35 = *(void *)(a1 + 2680);
      std::string::basic_string[abi:ne180100]<0>(v116, "cix");
      if (v35 && *(unsigned char *)(v35 + 244)) {
        exitFramework(200);
      }
      if (v117 < 0) {
        operator delete(v116[0]);
      }
      uint64_t v36 = (uint64_t *)(*(void *)(a1 + 424) + 8 * v28);
      int v37 = *(_DWORD *)(a1 + 52);
      uint64_t v38 = (v37 * v8);
      if ((int)v38 >= 1)
      {
        uint64_t v39 = (float *)*v36;
        do
        {
          int v40 = -1035468800;
          if (*v39 < -50.0 || (int v40 = 1112014848, *v39 > 50.0)) {
            *(_DWORD *)uint64_t v39 = v40;
          }
          ++v39;
          --v38;
        }
        while (v38);
      }
      applyForwardActivation((uint64_t *)(*(void *)(a1 + 520) + 8 * v28), v36, v8, v37, *(_DWORD *)(a1 + 740));
      uint64_t v41 = *(void *)(a1 + 208) + 24 * v17;
      LSTM<signed char>::computeXTimesWSparseOrDense(a1, v16, (const float **)(*(void *)(a1 + 352) + 8 * v28), *(uint64_t **)(a1 + 2504), *(const void **)v41, *(void *)(v41 + 8), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
      uint64_t v42 = *(void *)(a1 + 2680);
      std::string::basic_string[abi:ne180100]<0>(&v114, "gix");
      if (v42 && *(unsigned char *)(v42 + 244)) {
        exitFramework(200);
      }
      if (v115 < 0) {
        operator delete(v114);
      }
      int v43 = v17 + v18;
      if (v103)
      {
        if ((v32 & 1) == 0) {
          goto LABEL_147;
        }
        uint64_t v44 = *(void *)(a1 + 2680);
        uint64_t v45 = *(void *)(a1 + 352);
        long long v46 = *(char ***)(a1 + 2568);
        uint64_t v47 = *(void *)(a1 + 184);
        int v48 = *(_DWORD *)(a1 + 52);
        std::string::basic_string[abi:ne180100]<0>(&__p, "gix");
        uint64_t v49 = *(float **)(v45 + 8 * v28);
        int v8 = v98;
        LSTM<signed char>::addOptionalPeepholeVector(a1, v44, v49, v46, *(float **)(v47 + 8 * v43), v98, v48);
        if (v113 < 0) {
          operator delete(__p);
        }
        char v32 = 1;
        int v16 = v102;
      }
      uint64_t v50 = (uint64_t *)(*(void *)(a1 + 352) + 8 * v28);
      int v51 = *(_DWORD *)(a1 + 52);
      uint64_t v52 = (v51 * v8);
      if ((int)v52 >= 1)
      {
        int64_t v53 = (float *)*v50;
        do
        {
          int v54 = -1035468800;
          if (*v53 < -50.0 || (int v54 = 1112014848, *v53 > 50.0)) {
            *(_DWORD *)int64_t v53 = v54;
          }
          ++v53;
          --v52;
        }
        while (v52);
      }
      applyForwardActivation((uint64_t *)(*(void *)(a1 + 448) + 8 * v28), v50, v8, v51, *(_DWORD *)(a1 + 736));
      uint64_t v55 = *(void *)(a1 + 208) + 24 * (int)v21;
      LSTM<signed char>::computeXTimesWSparseOrDense(a1, v16, (const float **)(*(void *)(a1 + 376) + 8 * v28), *(uint64_t **)(a1 + 2512), *(const void **)v55, *(void *)(v55 + 8), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
      uint64_t v56 = *(void *)(a1 + 2680);
      std::string::basic_string[abi:ne180100]<0>(&v110, "gfx");
      if (v56 && *(unsigned char *)(v56 + 244)) {
        exitFramework(200);
      }
      if (v111 < 0) {
        operator delete(v110);
      }
      if (v103)
      {
        if ((v32 & 1) == 0) {
          goto LABEL_147;
        }
        uint64_t v57 = *(void *)(a1 + 2680);
        uint64_t v58 = *(void *)(a1 + 376);
        char v59 = *(char ***)(a1 + 2576);
        uint64_t v60 = *(void *)(a1 + 184);
        int v61 = *(_DWORD *)(a1 + 52);
        std::string::basic_string[abi:ne180100]<0>(&v108, "gfx");
        int64_t v62 = *(float **)(v60 + 8 * v43);
        int v8 = v98;
        LSTM<signed char>::addOptionalPeepholeVector(a1, v57, *(float **)(v58 + 8 * v28), v59, v62, v98, v61);
        int v16 = v102;
        if (v109 < 0) {
          operator delete(v108);
        }
      }
      uint64_t v63 = *(void *)(a1 + 2680);
      if (v63)
      {
        int v64 = *(_DWORD *)(a1 + 52);
        if (*(unsigned char *)(v63 + 601))
        {
          uint64_t v65 = (v64 * v8);
          if ((int)v65 >= 1)
          {
            uint64_t v66 = *(float **)(*(void *)(a1 + 376) + 8 * v28);
            do
            {
              *uint64_t v66 = *v66 + 1.0;
              ++v66;
              --v65;
            }
            while (v65);
          }
        }
      }
      else
      {
        int v64 = *(_DWORD *)(a1 + 52);
      }
      int v67 = (uint64_t *)(*(void *)(a1 + 376) + 8 * v28);
      uint64_t v68 = (v64 * v8);
      if ((int)v68 >= 1)
      {
        BOOL v69 = (float *)*v67;
        do
        {
          int v70 = -1035468800;
          if (*v69 < -50.0 || (int v70 = 1112014848, *v69 > 50.0)) {
            *(_DWORD *)BOOL v69 = v70;
          }
          ++v69;
          --v68;
        }
        while (v68);
      }
      applyForwardActivation((uint64_t *)(*(void *)(a1 + 472) + 8 * v28), v67, v8, v64, *(_DWORD *)(a1 + 736));
      VVector<float>::mulV((float32x4_t **)(*(void *)(a1 + 184) + 8 * v21), (float32x4_t **)(*(void *)(a1 + 520) + 8 * v28), (float32x4_t **)(*(void *)(a1 + 448) + 8 * v28), *(_DWORD *)(a1 + 52) * v8);
      if (v103)
      {
        if (v95)
        {
          uint64_t v71 = (*(_DWORD *)(a1 + 52) * v8);
          if ((int)v71 >= 1)
          {
            uint64_t v72 = *(void *)(a1 + 184);
            uint64_t v73 = *(float **)(v72 + 8 * v43);
            uint64_t v74 = *(float **)(*(void *)(a1 + 448) + 8 * v28);
            uint64_t v75 = *(float **)(v72 + 8 * v21);
            do
            {
              float v76 = *v73++;
              float v77 = v76;
              float v78 = *v74++;
              *uint64_t v75 = *v75 + (float)(v77 * (float)(1.0 - v78));
              ++v75;
              --v71;
            }
            while (v71);
          }
        }
        else
        {
          VVector<float>::mulAddV((float32x4_t **)(*(void *)(a1 + 184) + 8 * v21), (float32x4_t **)(*(void *)(a1 + 472) + 8 * v28), (float32x4_t **)(*(void *)(a1 + 184) + 8 * v43), *(_DWORD *)(a1 + 52) * v8);
        }
      }
      int v79 = *(_DWORD *)(a1 + 52);
      uint64_t v80 = (v79 * v8);
      if ((int)v80 >= 1)
      {
        int v81 = *(float **)(*(void *)(a1 + 184) + 8 * v21);
        do
        {
          float v82 = -v11;
          if (*v81 < (float)-v11 || (float v82 = v11, *v81 > v11)) {
            *int v81 = v82;
          }
          ++v81;
          --v80;
        }
        while (v80);
      }
      uint64_t v83 = *(void *)(a1 + 208) + 24 * (int)v21;
      LSTM<signed char>::computeXTimesWSparseOrDense(a1, v16, (const float **)(*(void *)(a1 + 400) + 8 * v28), *(uint64_t **)(a1 + 2520), *(const void **)v83, *(void *)(v83 + 8), v8, v79, *(_DWORD *)(a1 + 48));
      uint64_t v84 = *(void *)(a1 + 2680);
      std::string::basic_string[abi:ne180100]<0>(&v106, "gox");
      if (v84 && *(unsigned char *)(v84 + 244)) {
        exitFramework(200);
      }
      if (v107 < 0) {
        operator delete(v106);
      }
      uint64_t v85 = *(void *)(a1 + 2680);
      uint64_t v86 = *(void *)(a1 + 400);
      int64_t v87 = *(char ***)(a1 + 2584);
      uint64_t v88 = *(void *)(a1 + 184);
      int v89 = *(_DWORD *)(a1 + 52);
      std::string::basic_string[abi:ne180100]<0>(&v104, "gox");
      LSTM<signed char>::addOptionalPeepholeVector(a1, v85, *(float **)(v86 + 8 * v28), v87, *(float **)(v88 + 8 * v21), v8, v89);
      if (v105 < 0) {
        operator delete(v104);
      }
      uint64_t v90 = (uint64_t *)(*(void *)(a1 + 400) + 8 * v28);
      int v91 = *(_DWORD *)(a1 + 52);
      uint64_t v92 = (v91 * v8);
      int v16 = v102;
      unsigned int v13 = v97;
      if ((int)v92 >= 1)
      {
        uint64_t v93 = (float *)*v90;
        do
        {
          int v94 = -1035468800;
          if (*v93 < -50.0 || (int v94 = 1112014848, *v93 > 50.0)) {
            *(_DWORD *)uint64_t v93 = v94;
          }
          ++v93;
          --v92;
        }
        while (v92);
      }
      applyForwardActivation((uint64_t *)(*(void *)(a1 + 496) + 8 * v28), v90, v8, v91, *(_DWORD *)(a1 + 736));
      applyForwardActivation(v96, (uint64_t *)(*(void *)(a1 + 184) + 8 * v21), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 744));
      VVector<float>::mulV((float32x4_t **)(*(void *)(a1 + 160) + 8 * v21), (float32x4_t **)v96, (float32x4_t **)(*(void *)(a1 + 496) + 8 * v28), *(_DWORD *)(a1 + 52) * v8);
      if (*(unsigned char *)(a1 + 2692))
      {
        memcpy(*(void **)(*(void *)(a1 + 112) + 8 * v21), *(const void **)(*(void *)(a1 + 160) + 8 * v21), 4 * *(int *)(a1 + 52));
        memcpy(*(void **)(*(void *)(a1 + 88) + 8 * v21), *(const void **)(*(void *)(a1 + 184) + 8 * v21), 4 * *(int *)(a1 + 52));
      }
      ++v15;
    }
    while (v15 != v97);
  }
}

void sub_192918A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (*(char *)(v34 - 121) < 0) {
    operator delete(*(void **)(v34 - 144));
  }
  _Unwind_Resume(exception_object);
}

void LSTM<signed char>::computeXTimesWSparseOrDenseCombined(uint64_t a1)
{
  if (!*(void *)(a1 + 784)) {
    operator new[]();
  }
  exitFramework(353);
}

void LSTM<signed char>::computeXTimesWSparseOrDense(uint64_t a1, int a2, const float **a3, uint64_t *a4, const void *a5, uint64_t a6, int a7, int a8, int a9)
{
  if (!a2) {
    exitFramework(353);
  }
  if (a7 != 1) {
    exitFramework(502);
  }
  int v12 = (float **)(a1 + 760);
  std::string __p = 0;
  BOOL v14 = 0;
  uint64_t v15 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, a5, a6, (a6 - (uint64_t)a5) >> 2);
  VVector<float>::internalMul(v12, (int *)__p, v14, *a4, a8, a9);
  if (__p)
  {
    BOOL v14 = (int *)__p;
    operator delete(__p);
  }
  vDSP_vadd(*v12, 1, *a3, 1, (float *)*a3, 1, a8);
}

uint64_t LSTM<signed char>::addOptionalPeepholeVector(uint64_t result, uint64_t a2, float *a3, char **a4, float *a5, int a6, int a7)
{
  if (a2)
  {
    if (*(unsigned char *)(a2 + 520)) {
      BOOL v7 = a6 <= 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7) {
      return result;
    }
  }
  else if (a6 < 1)
  {
    return result;
  }
  uint64_t v8 = 0;
  uint64_t v9 = *(unsigned int *)(result + 52);
  uint64_t v10 = 4 * a7;
  do
  {
    if ((int)v9 >= 1)
    {
      float v11 = *a4;
      int v12 = a5;
      unsigned int v13 = a3;
      uint64_t v14 = v9;
      do
      {
        int v16 = *v11++;
        int v15 = v16;
        float v17 = -5.0;
        if (v16 >= -126)
        {
          float v17 = 5.0;
          if (v15 != 127) {
            float v17 = (float)v15 * 0.039062;
          }
        }
        float v18 = *v12++;
        *unsigned int v13 = *v13 + (float)(v17 * v18);
        ++v13;
        --v14;
      }
      while (v14);
    }
    ++v8;
    a3 = (float *)((char *)a3 + v10);
    a5 = (float *)((char *)a5 + v10);
  }
  while (v8 != a6);
  return result;
}

void LSTM<signed char>::backward(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5)
{
  int v89 = a5 - 1;
  if (a5 >= 1)
  {
    uint64_t v85 = (void **)(a1 + 1648);
    uint64_t v6 = (void **)(a1 + 1656);
    BOOL v7 = (float **)(a1 + 1672);
    uint64_t v80 = (void **)(a1 + 1688);
    int v81 = (float **)(a1 + 1680);
    int v8 = a5 - 1;
    float v82 = (void **)(a1 + 1664);
    do
    {
      uint64_t v9 = v7;
      uint64_t v10 = v6;
      int v11 = v89 - v8;
      if (*(unsigned char *)(a1 + 2672))
      {
        BOOL v12 = v11 < v89;
      }
      else
      {
        int v11 = v8;
        BOOL v12 = v8 > 0;
      }
      BOOL v86 = v12;
      if (*(unsigned char *)(a1 + 2672)) {
        BOOL v13 = v11 > 0;
      }
      else {
        BOOL v13 = v11 < v89;
      }
      if (*(unsigned char *)(a1 + 2672)) {
        int v14 = v11 - 1;
      }
      else {
        int v14 = v11 + 1;
      }
      if (*(unsigned char *)(a1 + 2672)) {
        int v15 = v11 + 1;
      }
      else {
        int v15 = v11 - 1;
      }
      int v84 = v15;
      uint64_t v16 = v11;
      memmove(*(void **)(*(void *)(a1 + 840) + 8 * v11), *(const void **)(*a4 + 8 * v11), 4 * *(int *)(a1 + 52));
      BOOL v87 = v13;
      if (v13) {
        VVector<float>::internalMul();
      }
      float v17 = *(float **)(*(void *)(a1 + 352) + 8 * v16);
      float v18 = *(float **)(*(void *)(a1 + 376) + 8 * v16);
      BOOL v19 = *(float **)(*(void *)(a1 + 424) + 8 * v16);
      int v20 = *(float **)(*(void *)(a1 + 400) + 8 * v16);
      uint64_t v21 = *(float32x4_t **)(*(void *)(a1 + 448) + 8 * v16);
      BOOL v103 = *(float32x4_t **)(*(void *)(a1 + 496) + 8 * v16);
      uint64_t v104 = v21;
      VVector<float>::applyPrimeDerivative((void **)(a1 + 1640), v20, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      VVector<float>::applyPrimeDerivative(v85, v18, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      uint64_t v6 = v10;
      VVector<float>::applyPrimeDerivative(v10, v17, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      BOOL v7 = v9;
      VVector<float>::applyForwardActivation(v9, v19, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 740));
      VVector<float>::applyPrimeDerivative(v82, v19, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 740));
      VVector<float>::applyForwardActivation(v81, *(float **)(*(void *)(a1 + 88) + 8 * v16), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 744));
      VVector<float>::applyPrimeDerivative(v80, *(float **)(*(void *)(a1 + 88) + 8 * v16), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 744));
      VVector<float>::mul((void **)(*(void *)(a1 + 864) + 8 * v16), (float32x4_t **)(a1 + 1640), (float32x4_t **)v81, (float32x4_t **)(*(void *)(a1 + 840) + 8 * v16), *(_DWORD *)(a1 + 52));
      VVector<float>::mul((void **)(*(void *)(a1 + 960) + 8 * v16), (float32x4_t **)v80, &v103, (float32x4_t **)(*(void *)(a1 + 840) + 8 * v16), *(_DWORD *)(a1 + 52));
      uint64_t v22 = *(void *)(a1 + 960);
      uint64_t v23 = (float32x4_t **)(v22 + 8 * v16);
      uint64_t v24 = *(unsigned int *)(a1 + 52);
      if ((int)v24 < 1)
      {
        if (!v87)
        {
          BOOL v33 = v86;
          goto LABEL_30;
        }
        uint64_t v34 = v14;
        int v102 = *(float32x4_t **)(*(void *)(a1 + 472) + 8 * v14);
        BOOL v33 = v86;
      }
      else
      {
        int v25 = *(float **)(*(void *)(a1 + 864) + 8 * v16);
        unsigned __int8 v26 = **(char ***)(a1 + 2584);
        uint64_t v27 = *v23;
        uint64_t v28 = (float *)*v23;
        uint64_t v29 = *(unsigned int *)(a1 + 52);
        do
        {
          float v30 = *v25++;
          float v31 = v30;
          int v32 = *v26++;
          *uint64_t v28 = *v28 + (float)(v31 * (float)v32);
          ++v28;
          --v29;
        }
        while (v29);
        BOOL v33 = v86;
        if (!v87) {
          goto LABEL_30;
        }
        uint64_t v34 = v14;
        int v102 = *(float32x4_t **)(*(void *)(a1 + 472) + 8 * v14);
        uint64_t v35 = *(float **)(*(void *)(a1 + 888) + 8 * v14);
        uint64_t v36 = **(char ***)(a1 + 2576);
        int v37 = (float *)v27;
        uint64_t v38 = v24;
        do
        {
          float v39 = *v35++;
          float v40 = v39;
          int v41 = *v36++;
          float *v37 = *v37 + (float)(v40 * (float)v41);
          ++v37;
          --v38;
        }
        while (v38);
        uint64_t v42 = *(float **)(*(void *)(a1 + 912) + 8 * v14);
        int v43 = **(char ***)(a1 + 2568);
        uint64_t v44 = v24;
        do
        {
          float v45 = *v42++;
          float v46 = v45;
          int v47 = *v43++;
          v27->f32[0] = v27->f32[0] + (float)(v46 * (float)v47);
          uint64_t v27 = (float32x4_t *)((char *)v27 + 4);
          --v44;
        }
        while (v44);
      }
      VVector<float>::mulAddV(v23, (float32x4_t **)(v22 + 8 * v34), &v102, v24);
      uint64_t v22 = *(void *)(a1 + 960);
      LODWORD(v24) = *(_DWORD *)(a1 + 52);
LABEL_30:
      VVector<float>::mul((void **)(*(void *)(a1 + 936) + 8 * v16), (float32x4_t **)v82, (float32x4_t **)(v22 + 8 * v16), &v104, v24);
      if (v33) {
        VVector<float>::mul((void **)(*(void *)(a1 + 888) + 8 * v16), (float32x4_t **)v85, (float32x4_t **)(*(void *)(a1 + 960) + 8 * v16), (float32x4_t **)(*(void *)(a1 + 88) + 8 * v84), *(_DWORD *)(a1 + 52));
      }
      v48.n128_f32[0] = VVector<float>::mul((void **)(*(void *)(a1 + 912) + 8 * v16), (float32x4_t **)v10, (float32x4_t **)(*(void *)(a1 + 960) + 8 * v16), (float32x4_t **)v9, *(_DWORD *)(a1 + 52));
      if (((**(uint64_t (***)(uint64_t, __n128))a1)(a1, v48) & 1) == 0)
      {
        bzero(*(void **)(*(void *)(a1 + 816) + 8 * v16), 4 * *(int *)(a1 + 48));
        VVector<float>::internalMul();
      }
    }
    while (v8-- > 0);
  }
  uint64_t v50 = *(unsigned int *)(a1 + 52);
  if ((int)v50 <= 0)
  {
    uint64_t v52 = (float32x4_t **)(a1 + 1536);
    uint64_t v88 = (float32x4_t **)(a1 + 1544);
  }
  else
  {
    size_t v51 = 4 * v50;
    bzero(*(void **)(a1 + 1528), 4 * v50);
    uint64_t v52 = (float32x4_t **)(a1 + 1536);
    bzero(*(void **)(a1 + 1536), v51);
    uint64_t v88 = (float32x4_t **)(a1 + 1544);
    bzero(*(void **)(a1 + 1544), v51);
  }
  if (*(int *)(a1 + 56) > 0)
  {
    *(_DWORD *)(a1 + 1000) = 0;
    *(_DWORD *)(a1 + 1240) = 0;
    *(_DWORD *)(a1 + 1120) = 0;
    *(_DWORD *)(a1 + 1360) = 0;
  }
  if (a5 > 1)
  {
    int v53 = 1;
    int v54 = a5 - 2;
    do
    {
      if (*(unsigned char *)(a1 + 2672)) {
        int v55 = v54;
      }
      else {
        int v55 = v53;
      }
      if (*(unsigned char *)(a1 + 2672)) {
        int v56 = 1;
      }
      else {
        int v56 = -1;
      }
      int v57 = v55 + v56;
      if (*(unsigned char *)(a1 + 2672)) {
        int v58 = a5 - 2;
      }
      else {
        int v58 = 1;
      }
      BOOL v59 = v55 == v58;
      VVector<float>::mulAddV((float32x4_t **)(a1 + 1528), (float32x4_t **)(*(void *)(a1 + 912) + 8 * v55), (float32x4_t **)(*(void *)(a1 + 88) + 8 * v57), *(_DWORD *)(a1 + 52));
      VVector<float>::mulAddV(v52, (float32x4_t **)(*(void *)(a1 + 888) + 8 * v55), (float32x4_t **)(*(void *)(a1 + 88) + 8 * v57), *(_DWORD *)(a1 + 52));
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 912) + 8 * v55), (const float **)(*(void *)(a1 + 112) + 8 * v57), (void **)(a1 + 1496), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v59);
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 888) + 8 * v55), (const float **)(*(void *)(a1 + 112) + 8 * v57), (void **)(a1 + 1504), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v59);
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 864) + 8 * v55), (const float **)(*(void *)(a1 + 112) + 8 * v57), (void **)(a1 + 1512), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v59);
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 936) + 8 * v55), (const float **)(*(void *)(a1 + 112) + 8 * v57), (void **)(a1 + 1520), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v59);
      ++v53;
      --v54;
    }
    while (v54 != -1);
    int v60 = 1;
    int v61 = a5 - 2;
    do
    {
      if (*(unsigned char *)(a1 + 2672)) {
        int v62 = v61;
      }
      else {
        int v62 = v60;
      }
      if (*(unsigned char *)(a1 + 2672)) {
        int v63 = a5 - 2;
      }
      else {
        int v63 = 1;
      }
      if (a3[1] == *a3 || *(int *)(a1 + 56) < 1 || !(**(unsigned int (***)(uint64_t))a1)(a1))
      {
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 888) + 8 * v62), (const float **)(*(void *)(a1 + 64) + 8 * v62), (void **)(a1 + 1472), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v62 == v63);
      }
      else
      {
        uint64_t v64 = *(void *)(a1 + 888);
        uint64_t v65 = *(void *)(a1 + 208) + 24 * v62;
        std::vector<int>::pointer v100 = 0;
        uint64_t v101 = 0;
        signed int v99 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v99, *(const void **)v65, *(void *)(v65 + 8), (uint64_t)(*(void *)(v65 + 8) - *(void *)v65) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 1104, *(int **)(v64 + 8 * v62), (uint64_t)v99, *(_DWORD *)(a1 + 52));
        if (v99)
        {
          std::vector<int>::pointer v100 = v99;
          operator delete(v99);
        }
      }
      ++v60;
      --v61;
    }
    while (v61 != -1);
  }
  if (a5 >= 1)
  {
    int v66 = 0;
    int v67 = v89;
    do
    {
      if (*(unsigned char *)(a1 + 2672)) {
        int v68 = v67;
      }
      else {
        int v68 = v66;
      }
      if (*(unsigned char *)(a1 + 2672)) {
        int v69 = v89;
      }
      else {
        int v69 = 0;
      }
      uint64_t v70 = v68;
      VVector<float>::mulAddV(v88, (float32x4_t **)(*(void *)(a1 + 864) + 8 * v68), (float32x4_t **)(*(void *)(a1 + 88) + 8 * v68), *(_DWORD *)(a1 + 52));
      if (a3[1] == *a3 || *(int *)(a1 + 56) < 1)
      {
        BOOL v77 = v70 == v69;
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 912) + 8 * v70), (const float **)(*(void *)(a1 + 64) + 8 * v70), (void **)(a1 + 1464), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v77);
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 864) + 8 * v70), (const float **)(*(void *)(a1 + 64) + 8 * v70), (void **)(a1 + 1480), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v77);
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 936) + 8 * v70), (const float **)(*(void *)(a1 + 64) + 8 * v70), (void **)(a1 + 1488), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v77);
      }
      else
      {
        uint64_t v71 = *(void *)(a1 + 912);
        uint64_t v72 = *(void *)(a1 + 208) + 24 * (int)v70;
        int v97 = 0;
        uint64_t v98 = 0;
        std::string __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v72, *(void *)(v72 + 8), (uint64_t)(*(void *)(v72 + 8) - *(void *)v72) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 984, *(int **)(v71 + 8 * v70), (uint64_t)__p, *(_DWORD *)(a1 + 52));
        if (__p)
        {
          int v97 = __p;
          operator delete(__p);
        }
        uint64_t v73 = *(void *)(a1 + 864);
        uint64_t v74 = *(void *)(a1 + 208) + 24 * (int)v70;
        int v94 = 0;
        uint64_t v95 = 0;
        uint64_t v93 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v93, *(const void **)v74, *(void *)(v74 + 8), (uint64_t)(*(void *)(v74 + 8) - *(void *)v74) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 1224, *(int **)(v73 + 8 * v70), (uint64_t)v93, *(_DWORD *)(a1 + 52));
        if (v93)
        {
          int v94 = v93;
          operator delete(v93);
        }
        uint64_t v75 = *(void *)(a1 + 936);
        uint64_t v76 = *(void *)(a1 + 208) + 24 * (int)v70;
        int v91 = 0;
        uint64_t v92 = 0;
        uint64_t v90 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v90, *(const void **)v76, *(void *)(v76 + 8), (uint64_t)(*(void *)(v76 + 8) - *(void *)v76) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 1344, *(int **)(v75 + 8 * v70), (uint64_t)v90, *(_DWORD *)(a1 + 52));
        if (v90)
        {
          int v91 = v90;
          operator delete(v90);
        }
      }
      ++v66;
      --v67;
    }
    while (v67 != -1);
  }
}

uint64_t LSTM<signed char>::update(uint64_t result, float a2)
{
  uint64_t v2 = result;
  int v3 = (int)a2;
  int v4 = *(_DWORD *)(result + 52);
  if (*(int *)(result + 56) < 1)
  {
    uint64_t v5 = (v4 * *(_DWORD *)(result + 48));
    if ((int)v5 >= 1)
    {
      uint64_t v6 = 0;
      float v7 = (float)v3;
      do
      {
        *(unsigned char *)(*(void *)(result + 232) + v6) = (int)(float)((float)*(char *)(*(void *)(result + 232) + v6)
                                                                + (float)(*(float *)(*(void *)(result + 1464) + 4 * v6)
                                                                        * v7));
        ++v6;
      }
      while (v5 != v6);
      for (uint64_t i = 0; i != v5; ++i)
        *(unsigned char *)(*(void *)(result + 248) + i) = (int)(float)((float)*(char *)(*(void *)(result + 248) + i)
                                                               + (float)(*(float *)(*(void *)(result + 1480) + 4 * i)
                                                                       * v7));
      for (uint64_t j = 0; j != v5; ++j)
        *(unsigned char *)(*(void *)(result + 240) + j) = (int)(float)((float)*(char *)(*(void *)(result + 240) + j)
                                                               + (float)(*(float *)(*(void *)(result + 1472) + 4 * j)
                                                                       * v7));
      for (uint64_t k = 0; k != v5; ++k)
        *(unsigned char *)(*(void *)(result + 256) + k) = (int)(float)((float)*(char *)(*(void *)(result + 256) + k)
                                                               + (float)(*(float *)(*(void *)(result + 1488) + 4 * k)
                                                                       * v7));
    }
  }
  else
  {
    SparseMatrix<float>::add<signed char>(result + 984, v4, (float)v3);
    SparseMatrix<float>::add<signed char>(v2 + 1224, *(_DWORD *)(v2 + 52), (float)v3);
    SparseMatrix<float>::add<signed char>(v2 + 1104, *(_DWORD *)(v2 + 52), (float)v3);
    uint64_t result = SparseMatrix<float>::add<signed char>(v2 + 1344, *(_DWORD *)(v2 + 52), (float)v3);
  }
  if (v4)
  {
    uint64_t v11 = 0;
    uint64_t v12 = (v4 * v4);
    float v13 = (float)v3;
    do
    {
      *(unsigned char *)(*(void *)(v2 + 264) + v11) = (int)(float)((float)*(char *)(*(void *)(v2 + 264) + v11)
                                                           + (float)(*(float *)(*(void *)(v2 + 1496) + 4 * v11) * v13));
      ++v11;
    }
    while (v12 != v11);
    uint64_t v14 = 0;
    do
    {
      *(unsigned char *)(*(void *)(v2 + 280) + v14) = (int)(float)((float)*(char *)(*(void *)(v2 + 280) + v14)
                                                           + (float)(*(float *)(*(void *)(v2 + 1512) + 4 * v14) * v13));
      ++v14;
    }
    while (v12 != v14);
    uint64_t v15 = 0;
    do
    {
      *(unsigned char *)(*(void *)(v2 + 272) + v15) = (int)(float)((float)*(char *)(*(void *)(v2 + 272) + v15)
                                                           + (float)(*(float *)(*(void *)(v2 + 1504) + 4 * v15) * v13));
      ++v15;
    }
    while (v12 != v15);
    uint64_t v16 = 0;
    do
    {
      *(unsigned char *)(*(void *)(v2 + 288) + v16) = (int)(float)((float)*(char *)(*(void *)(v2 + 288) + v16)
                                                           + (float)(*(float *)(*(void *)(v2 + 1520) + 4 * v16) * v13));
      ++v16;
    }
    while (v12 != v16);
  }
  else
  {
    float v13 = (float)v3;
  }
  uint64_t v17 = *(unsigned int *)(v2 + 52);
  if ((int)v17 >= 1)
  {
    for (uint64_t m = 0; m != v17; ++m)
      *(unsigned char *)(*(void *)(v2 + 296) + m) += (int)(float)(*(float *)(*(void *)(v2 + 1528) + 4 * m) * v13);
    uint64_t v19 = *(unsigned int *)(v2 + 52);
    if ((int)v19 >= 1)
    {
      for (uint64_t n = 0; n != v19; ++n)
        *(unsigned char *)(*(void *)(v2 + 312) + n) += (int)(float)(*(float *)(*(void *)(v2 + 1544) + 4 * n) * v13);
      uint64_t v21 = *(unsigned int *)(v2 + 52);
      if ((int)v21 >= 1)
      {
        for (iuint64_t i = 0; ii != v21; ++ii)
          *(unsigned char *)(*(void *)(v2 + 304) + ii) += (int)(float)(*(float *)(*(void *)(v2 + 1536) + 4 * ii) * v13);
      }
    }
  }
  return result;
}

uint64_t LSTM<signed char>::noutputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t LSTM<signed char>::ninputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

void LSTM<signed char>::allocAllBuffers()
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "LSTM alloc, from allocAll");
  LSTM<signed char>::init();
}

void sub_192919A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LSTM<signed char>::unsetSpecialBidir(uint64_t result)
{
  *(unsigned char *)(result + 42) = 0;
  return result;
}

uint64_t LSTM<signed char>::setSpecialBidir(uint64_t result)
{
  *(unsigned char *)(result + 42) = 1;
  return result;
}

__n128 LSTM<signed char>::setWeightMatrices(void *a1, uint64_t a2)
{
  uint64_t v2 = *(_OWORD **)(a2 + 8);
  uint64_t v3 = *((void *)v2-- - 2);
  a1[29] = v3;
  a1[313] = a1 + 29;
  *(void *)(a2 + 8) = v2;
  *uint64_t v2 = *(v2 - 1);
  a1[30] = *(void *)v2;
  a1[314] = a1 + 30;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v4 - 16;
  *uint64_t v2 = *(_OWORD *)(v4 - 32);
  a1[32] = *(void *)v2;
  a1[316] = a1 + 32;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v5 - 16;
  *uint64_t v2 = *(_OWORD *)(v5 - 32);
  a1[31] = *(void *)v2;
  uint64_t v6 = a1 + 31;
  v6[284] = v6;
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v7 - 16;
  *uint64_t v2 = *(_OWORD *)(v7 - 32);
  v6[2] = *(void *)v2;
  v6[286] = v6 + 2;
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v8 - 16;
  *uint64_t v2 = *(_OWORD *)(v8 - 32);
  v6[3] = *(void *)v2;
  v6[287] = v6 + 3;
  uint64_t v9 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v9 - 16;
  *uint64_t v2 = *(_OWORD *)(v9 - 32);
  v6[5] = *(void *)v2;
  v6[289] = v6 + 5;
  uint64_t v10 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v10 - 16;
  *uint64_t v2 = *(_OWORD *)(v10 - 32);
  v6[4] = *(void *)v2;
  v6[288] = v6 + 4;
  uint64_t v11 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v11 - 16;
  *uint64_t v2 = *(_OWORD *)(v11 - 32);
  v6[6] = *(void *)v2;
  v6[290] = v6 + 6;
  uint64_t v12 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v12 - 16;
  *uint64_t v2 = *(_OWORD *)(v12 - 32);
  v6[7] = *(void *)v2;
  v6[291] = v6 + 7;
  uint64_t v13 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v13 - 16;
  __n128 result = *(__n128 *)(v13 - 32);
  *uint64_t v2 = result;
  v6[8] = *(void *)v2;
  v6[292] = v6 + 8;
  *(void *)(a2 + 8) -= 16;
  return result;
}

char *LSTM<signed char>::getWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = **(void **)(a1 + 2504);
  unsigned int v5 = *(_DWORD *)(a1 + 48);
  unsigned int v6 = *(_DWORD *)(a1 + 52);
  LODWORD(v7) = v6;
  double v8 = COERCE_DOUBLE(__PAIR64__(v5, v6));
  unint64_t v9 = *(void *)(a2 + 8);
  if (v9 >= *(void *)(a2 + 16))
  {
    uint64_t v10 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v4, COERCE_DOUBLE(__PAIR64__(v5, v6)));
    unsigned int v5 = *(_DWORD *)(a1 + 48);
    unsigned int v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    double v8 = COERCE_DOUBLE(__PAIR64__(v5, v6));
  }
  else
  {
    *(void *)unint64_t v9 = v4;
    uint64_t v10 = (char *)(v9 + 16);
    *(_DWORD *)(v9 + 8) = v6;
    *(_DWORD *)(v9 + 12) = v5;
  }
  *(void *)(a2 + 8) = v10;
  uint64_t v11 = **(void **)(a1 + 2512);
  if ((unint64_t)v10 >= *(void *)(a2 + 16))
  {
    uint64_t v12 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v11, v8);
    unsigned int v5 = *(_DWORD *)(a1 + 48);
    unsigned int v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    double v8 = COERCE_DOUBLE(__PAIR64__(v5, v6));
  }
  else
  {
    *(void *)uint64_t v10 = v11;
    uint64_t v12 = v10 + 16;
    *((_DWORD *)v10 + 2) = v6;
    *((_DWORD *)v10 + 3) = v5;
  }
  *(void *)(a2 + 8) = v12;
  uint64_t v13 = **(void **)(a1 + 2528);
  if ((unint64_t)v12 >= *(void *)(a2 + 16))
  {
    uint64_t v14 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v13, v8);
    unsigned int v5 = *(_DWORD *)(a1 + 48);
    unsigned int v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    double v8 = COERCE_DOUBLE(__PAIR64__(v5, v6));
  }
  else
  {
    *(void *)uint64_t v12 = v13;
    uint64_t v14 = v12 + 16;
    *((_DWORD *)v12 + 2) = v6;
    *((_DWORD *)v12 + 3) = v5;
  }
  *(void *)(a2 + 8) = v14;
  uint64_t v15 = **(void **)(a1 + 2520);
  if ((unint64_t)v14 >= *(void *)(a2 + 16))
  {
    uint64_t v16 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v15, v8);
    unsigned int v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
  }
  else
  {
    *(void *)uint64_t v14 = v15;
    uint64_t v16 = v14 + 16;
    *((_DWORD *)v14 + 2) = v6;
    *((_DWORD *)v14 + 3) = v5;
  }
  *(void *)(a2 + 8) = v16;
  uint64_t v17 = **(void **)(a1 + 2536);
  unint64_t v18 = __PAIR64__(v6, LODWORD(v7));
  if ((unint64_t)v16 >= *(void *)(a2 + 16))
  {
    uint64_t v19 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v17, COERCE_DOUBLE(__PAIR64__(v6, LODWORD(v7))));
    unsigned int v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    unint64_t v18 = (unint64_t)vdup_n_s32(v6);
  }
  else
  {
    *(void *)uint64_t v16 = v17;
    uint64_t v19 = v16 + 16;
    *((_DWORD *)v16 + 2) = v6;
    *((_DWORD *)v16 + 3) = v6;
  }
  *(void *)(a2 + 8) = v19;
  uint64_t v20 = **(void **)(a1 + 2544);
  if ((unint64_t)v19 >= *(void *)(a2 + 16))
  {
    uint64_t v21 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v20, *(double *)&v18);
    unsigned int v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    unint64_t v18 = (unint64_t)vdup_n_s32(v6);
  }
  else
  {
    *(void *)uint64_t v19 = v20;
    uint64_t v21 = v19 + 16;
    *((_DWORD *)v19 + 2) = v6;
    *((_DWORD *)v19 + 3) = v6;
  }
  *(void *)(a2 + 8) = v21;
  uint64_t v22 = **(void **)(a1 + 2560);
  if ((unint64_t)v21 >= *(void *)(a2 + 16))
  {
    uint64_t v23 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v22, *(double *)&v18);
    unsigned int v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    unint64_t v18 = (unint64_t)vdup_n_s32(v6);
  }
  else
  {
    *(void *)uint64_t v21 = v22;
    uint64_t v23 = v21 + 16;
    *((_DWORD *)v21 + 2) = v6;
    *((_DWORD *)v21 + 3) = v6;
  }
  *(void *)(a2 + 8) = v23;
  uint64_t v24 = **(void **)(a1 + 2552);
  if ((unint64_t)v23 >= *(void *)(a2 + 16))
  {
    int v25 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v24, *(double *)&v18);
    unsigned int v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
  }
  else
  {
    *(void *)uint64_t v23 = v24;
    int v25 = v23 + 16;
    *((_DWORD *)v23 + 2) = v6;
    *((_DWORD *)v23 + 3) = v6;
  }
  *(void *)(a2 + 8) = v25;
  uint64_t v26 = **(void **)(a1 + 2568);
  HIDWORD(v7) = 0;
  if ((unint64_t)v25 >= *(void *)(a2 + 16))
  {
    uint64_t v27 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v26, v7);
    unsigned int v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
  }
  else
  {
    *(void *)int v25 = v26;
    uint64_t v27 = v25 + 16;
    *((_DWORD *)v25 + 2) = v6;
    *((_DWORD *)v25 + 3) = 0;
  }
  *(void *)(a2 + 8) = v27;
  uint64_t v28 = **(void **)(a1 + 2576);
  if ((unint64_t)v27 >= *(void *)(a2 + 16))
  {
    __n128 result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v28, COERCE_DOUBLE((unint64_t)LODWORD(v7)));
    unsigned int v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
  }
  else
  {
    *(void *)uint64_t v27 = v28;
    __n128 result = v27 + 16;
    *((_DWORD *)v27 + 2) = v6;
    *((_DWORD *)v27 + 3) = 0;
  }
  *(void *)(a2 + 8) = result;
  uint64_t v30 = **(void **)(a1 + 2584);
  if ((unint64_t)result >= *(void *)(a2 + 16))
  {
    __n128 result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v30, COERCE_DOUBLE((unint64_t)LODWORD(v7)));
    float v31 = result;
  }
  else
  {
    *(void *)__n128 result = v30;
    float v31 = result + 16;
    *((_DWORD *)result + 2) = v6;
    *((_DWORD *)result + 3) = 0;
  }
  *(void *)(a2 + 8) = v31;
  return result;
}

void LSTM<signed char>::resetForNewBatch(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 2692))
  {
    uint64_t v2 = *(void *)(a1 + 1552);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v2 + 40))(v2, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v3 = *(void *)(a1 + 1560);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v3 + 40))(v3, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v4 = *(void *)(a1 + 1568);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v4 + 40))(v4, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v5 = *(void *)(a1 + 1576);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v5 + 40))(v5, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v6 = *(void *)(a1 + 1584);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v6 + 40))(v6, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = *(void *)(a1 + 1592);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v7 + 40))(v7, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = *(void *)(a1 + 1600);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v8 + 40))(v8, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v9 = *(void *)(a1 + 1608);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v9 + 40))(v9, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    (*(void (**)(void))(**(void **)(a1 + 1552) + 16))(*(void *)(a1 + 1552));
    (*(void (**)(void))(**(void **)(a1 + 1560) + 16))(*(void *)(a1 + 1560));
    (*(void (**)(void))(**(void **)(a1 + 1568) + 16))(*(void *)(a1 + 1568));
    (*(void (**)(void))(**(void **)(a1 + 1576) + 16))(*(void *)(a1 + 1576));
    (*(void (**)(void))(**(void **)(a1 + 1584) + 16))(*(void *)(a1 + 1584));
    (*(void (**)(void))(**(void **)(a1 + 1592) + 16))(*(void *)(a1 + 1592));
    (*(void (**)(void))(**(void **)(a1 + 1600) + 16))(*(void *)(a1 + 1600));
    (*(void (**)(void))(**(void **)(a1 + 1608) + 16))(*(void *)(a1 + 1608));
    uint64_t v10 = *(void *)(a1 + 1552);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v10 + 40))(v10, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v11 = *(void *)(a1 + 1560);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v11 + 40))(v11, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v12 = *(void *)(a1 + 1568);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v12 + 40))(v12, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v13 = *(void *)(a1 + 1576);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v13 + 40))(v13, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v14 = *(void *)(a1 + 1584);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v14 + 40))(v14, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v15 = *(void *)(a1 + 1592);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v15 + 40))(v15, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v16 = *(void *)(a1 + 1600);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v16 + 40))(v16, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v17 = *(void *)(a1 + 1608);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v17 + 40))(v17, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_19291A564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void LSTM<signed char>::clearState(uint64_t a1, void *a2, int *a3)
{
  if (*(int *)(a1 + 2688) >= 1)
  {
    int v6 = 0;
    int v7 = *a3;
    do
    {
      bzero(**(void ***)(*a2 + 16 * v7 + 8), 4 * *(int *)(*a2 + 16 * v7));
      uint64_t v8 = *a3 + 1;
      *a3 = v8;
      bzero(**(void ***)(*a2 + 16 * v8 + 8), 4 * *(int *)(*a2 + 16 * v8));
      int v7 = *a3 + 1;
      *a3 = v7;
      ++v6;
    }
    while (v6 < *(_DWORD *)(a1 + 2688));
  }
}

int *LSTM<signed char>::restoreState(int *result, void *a2, int a3, int *a4)
{
  if (result[672] >= 1)
  {
    int v6 = result;
    int v7 = 0;
    uint64_t v8 = a3;
    do
    {
      int v9 = v6[13] * v7;
      uint64_t v10 = (void *)(*(void *)(*((void *)v6 + 20) + 8 * v8) + 4 * v9);
      uint64_t v11 = (void *)(*(void *)(*((void *)v6 + 23) + 8 * v8) + 4 * v9);
      uint64_t v12 = *a4;
      *a4 = v12 + 1;
      memmove(v10, **(const void ***)(*a2 + 16 * v12 + 8), 4 * v6[13]);
      uint64_t v13 = *a4;
      *a4 = v13 + 1;
      __n128 result = (int *)memmove(v11, **(const void ***)(*a2 + 16 * v13 + 8), 4 * v6[13]);
      ++v7;
    }
    while (v7 < v6[672]);
  }
  return result;
}

int *LSTM<signed char>::saveState(int *result, uint64_t *a2, int a3, int *a4)
{
  if (result[672] >= 1)
  {
    int v6 = result;
    int v7 = 0;
    uint64_t v8 = a3;
    int v9 = *a4;
    do
    {
      uint64_t v10 = v6[13];
      int v11 = v10 * v7;
      uint64_t v12 = *(void *)(*((void *)v6 + 20) + 8 * v8);
      uint64_t v13 = *a2;
      *(_DWORD *)(v13 + 16 * v9) = v10;
      memmove(**(void ***)(v13 + 16 * *a4 + 8), (const void *)(v12 + 4 * (int)v10 * v7), 4 * v10);
      uint64_t v14 = *a4 + 1;
      *a4 = v14;
      uint64_t v15 = v6[13];
      uint64_t v16 = *a2;
      *(_DWORD *)(v16 + 16 * v14) = v15;
      __n128 result = (int *)memmove(**(void ***)(v16 + 16 * *a4 + 8), (const void *)(*(void *)(*((void *)v6 + 23) + 8 * v8) + 4 * v11), 4 * v15);
      int v9 = *a4 + 1;
      *a4 = v9;
      ++v7;
    }
    while (v7 < v6[672]);
  }
  return result;
}

uint64_t LSTM<signed char>::allocInitialState(uint64_t result)
{
  if (*(int *)(result + 2688) >= 1) {
    operator new();
  }
  return result;
}

void sub_19291AA44(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

uint64_t LSTM<signed char>::normalizeModel(uint64_t result, float a2)
{
  uint64_t v2 = *(unsigned int *)(result + 52);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void **)(result + 2568);
    do
    {
      *(unsigned char *)(*v4 + v3) = (int)(float)((float)*(char *)(*v4 + v3) * a2);
      ++v3;
    }
    while (v2 != v3);
    uint64_t v2 = *(unsigned int *)(result + 52);
    if ((int)v2 >= 1)
    {
      uint64_t v5 = 0;
      int v6 = *(void **)(result + 2576);
      do
      {
        *(unsigned char *)(*v6 + v5) = (int)(float)((float)*(char *)(*v6 + v5) * a2);
        ++v5;
      }
      while (v2 != v5);
      uint64_t v2 = *(unsigned int *)(result + 52);
      if ((int)v2 >= 1)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void **)(result + 2584);
        do
        {
          *(unsigned char *)(*v8 + v7) = (int)(float)((float)*(char *)(*v8 + v7) * a2);
          ++v7;
        }
        while (v2 != v7);
        LODWORD(v2) = *(_DWORD *)(result + 52);
      }
    }
  }
  uint64_t v9 = (*(_DWORD *)(result + 48) * v2);
  if ((int)v9 >= 1)
  {
    uint64_t v10 = 0;
    int v11 = *(void **)(result + 2504);
    do
    {
      *(unsigned char *)(*v11 + v10) = (int)(float)((float)*(char *)(*v11 + v10) * a2);
      ++v10;
    }
    while (v9 != v10);
    LODWORD(v2) = *(_DWORD *)(result + 52);
    uint64_t v12 = (*(_DWORD *)(result + 48) * v2);
    if ((int)v12 >= 1)
    {
      uint64_t v13 = 0;
      uint64_t v14 = *(void **)(result + 2512);
      do
      {
        *(unsigned char *)(*v14 + v13) = (int)(float)((float)*(char *)(*v14 + v13) * a2);
        ++v13;
      }
      while (v12 != v13);
      LODWORD(v2) = *(_DWORD *)(result + 52);
      uint64_t v15 = (*(_DWORD *)(result + 48) * v2);
      if ((int)v15 >= 1)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *(void **)(result + 2520);
        do
        {
          *(unsigned char *)(*v17 + v16) = (int)(float)((float)*(char *)(*v17 + v16) * a2);
          ++v16;
        }
        while (v15 != v16);
        LODWORD(v2) = *(_DWORD *)(result + 52);
        uint64_t v18 = (*(_DWORD *)(result + 48) * v2);
        if ((int)v18 >= 1)
        {
          uint64_t v19 = 0;
          uint64_t v20 = *(void **)(result + 2528);
          do
          {
            *(unsigned char *)(*v20 + v19) = (int)(float)((float)*(char *)(*v20 + v19) * a2);
            ++v19;
          }
          while (v18 != v19);
          LODWORD(v2) = *(_DWORD *)(result + 52);
        }
      }
    }
  }
  if (v2)
  {
    uint64_t v21 = 0;
    uint64_t v22 = *(void **)(result + 2536);
    uint64_t v23 = (v2 * v2);
    do
    {
      *(unsigned char *)(*v22 + v21) = (int)(float)((float)*(char *)(*v22 + v21) * a2);
      ++v21;
    }
    while (v23 != v21);
    int v24 = *(_DWORD *)(result + 52);
    if (v24)
    {
      uint64_t v25 = 0;
      uint64_t v26 = *(void **)(result + 2544);
      uint64_t v27 = (v24 * v24);
      do
      {
        *(unsigned char *)(*v26 + v25) = (int)(float)((float)*(char *)(*v26 + v25) * a2);
        ++v25;
      }
      while (v27 != v25);
      int v28 = *(_DWORD *)(result + 52);
      if (v28)
      {
        uint64_t v29 = 0;
        uint64_t v30 = *(void **)(result + 2552);
        uint64_t v31 = (v28 * v28);
        do
        {
          *(unsigned char *)(*v30 + v29) = (int)(float)((float)*(char *)(*v30 + v29) * a2);
          ++v29;
        }
        while (v31 != v29);
        int v32 = *(_DWORD *)(result + 52);
        if (v32)
        {
          uint64_t v33 = 0;
          uint64_t v34 = *(void **)(result + 2560);
          uint64_t v35 = (v32 * v32);
          do
          {
            *(unsigned char *)(*v34 + v33) = (int)(float)((float)*(char *)(*v34 + v33) * a2);
            ++v33;
          }
          while (v35 != v33);
        }
      }
    }
  }
  return result;
}

uint64_t LSTM<signed char>::clipModel(uint64_t result, float a2)
{
  float v2 = -a2;
  uint64_t v3 = *(unsigned int *)(result + 52);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void **)(result + 2568);
    do
    {
      float v6 = (float)*(char *)(*v5 + v4);
      float v7 = -a2;
      if (v6 < v2 || (float v7 = a2, v6 > a2)) {
        *(unsigned char *)(*v5 + v4) = (int)v7;
      }
      ++v4;
    }
    while (v3 != v4);
    uint64_t v3 = *(unsigned int *)(result + 52);
    if ((int)v3 >= 1)
    {
      uint64_t v8 = 0;
      uint64_t v9 = *(void **)(result + 2576);
      do
      {
        float v10 = (float)*(char *)(*v9 + v8);
        float v11 = -a2;
        if (v10 < v2 || (float v11 = a2, v10 > a2)) {
          *(unsigned char *)(*v9 + v8) = (int)v11;
        }
        ++v8;
      }
      while (v3 != v8);
      uint64_t v3 = *(unsigned int *)(result + 52);
      if ((int)v3 >= 1)
      {
        uint64_t v12 = 0;
        uint64_t v13 = *(void **)(result + 2584);
        do
        {
          float v14 = (float)*(char *)(*v13 + v12);
          float v15 = -a2;
          if (v14 < v2 || (float v15 = a2, v14 > a2)) {
            *(unsigned char *)(*v13 + v12) = (int)v15;
          }
          ++v12;
        }
        while (v3 != v12);
        LODWORD(v3) = *(_DWORD *)(result + 52);
      }
    }
  }
  uint64_t v16 = (*(_DWORD *)(result + 48) * v3);
  if ((int)v16 >= 1)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *(void **)(result + 2504);
    do
    {
      float v19 = (float)*(char *)(*v18 + v17);
      float v20 = -a2;
      if (v19 < v2 || (float v20 = a2, v19 > a2)) {
        *(unsigned char *)(*v18 + v17) = (int)v20;
      }
      ++v17;
    }
    while (v16 != v17);
    LODWORD(v3) = *(_DWORD *)(result + 52);
    uint64_t v21 = (*(_DWORD *)(result + 48) * v3);
    if ((int)v21 >= 1)
    {
      uint64_t v22 = 0;
      uint64_t v23 = *(void **)(result + 2512);
      do
      {
        float v24 = (float)*(char *)(*v23 + v22);
        float v25 = -a2;
        if (v24 < v2 || (float v25 = a2, v24 > a2)) {
          *(unsigned char *)(*v23 + v22) = (int)v25;
        }
        ++v22;
      }
      while (v21 != v22);
      LODWORD(v3) = *(_DWORD *)(result + 52);
      uint64_t v26 = (*(_DWORD *)(result + 48) * v3);
      if ((int)v26 >= 1)
      {
        uint64_t v27 = 0;
        int v28 = *(void **)(result + 2520);
        do
        {
          float v29 = (float)*(char *)(*v28 + v27);
          float v30 = -a2;
          if (v29 < v2 || (float v30 = a2, v29 > a2)) {
            *(unsigned char *)(*v28 + v27) = (int)v30;
          }
          ++v27;
        }
        while (v26 != v27);
        LODWORD(v3) = *(_DWORD *)(result + 52);
        uint64_t v31 = (*(_DWORD *)(result + 48) * v3);
        if ((int)v31 >= 1)
        {
          uint64_t v32 = 0;
          uint64_t v33 = *(void **)(result + 2528);
          do
          {
            float v34 = (float)*(char *)(*v33 + v32);
            float v35 = -a2;
            if (v34 < v2 || (float v35 = a2, v34 > a2)) {
              *(unsigned char *)(*v33 + v32) = (int)v35;
            }
            ++v32;
          }
          while (v31 != v32);
          LODWORD(v3) = *(_DWORD *)(result + 52);
        }
      }
    }
  }
  if (v3)
  {
    uint64_t v36 = 0;
    int v37 = *(void **)(result + 2536);
    uint64_t v38 = (v3 * v3);
    do
    {
      float v39 = (float)*(char *)(*v37 + v36);
      float v40 = -a2;
      if (v39 < v2 || (float v40 = a2, v39 > a2)) {
        *(unsigned char *)(*v37 + v36) = (int)v40;
      }
      ++v36;
    }
    while (v38 != v36);
    int v41 = *(_DWORD *)(result + 52);
    if (v41)
    {
      uint64_t v42 = 0;
      int v43 = *(void **)(result + 2544);
      uint64_t v44 = (v41 * v41);
      do
      {
        float v45 = (float)*(char *)(*v43 + v42);
        float v46 = -a2;
        if (v45 < v2 || (float v46 = a2, v45 > a2)) {
          *(unsigned char *)(*v43 + v42) = (int)v46;
        }
        ++v42;
      }
      while (v44 != v42);
      int v47 = *(_DWORD *)(result + 52);
      if (v47)
      {
        uint64_t v48 = 0;
        uint64_t v49 = *(void **)(result + 2552);
        uint64_t v50 = (v47 * v47);
        do
        {
          float v51 = (float)*(char *)(*v49 + v48);
          float v52 = -a2;
          if (v51 < v2 || (float v52 = a2, v51 > a2)) {
            *(unsigned char *)(*v49 + v48) = (int)v52;
          }
          ++v48;
        }
        while (v50 != v48);
        int v53 = *(_DWORD *)(result + 52);
        if (v53)
        {
          uint64_t v54 = 0;
          int v55 = *(void **)(result + 2560);
          uint64_t v56 = (v53 * v53);
          do
          {
            float v57 = (float)*(char *)(*v55 + v54);
            float v58 = -a2;
            if (v57 < v2 || (float v58 = a2, v57 > a2)) {
              *(unsigned char *)(*v55 + v54) = (int)v58;
            }
            ++v54;
          }
          while (v56 != v54);
        }
      }
    }
  }
  return result;
}

void LSTM<signed char>::applyGradient(uint64_t a1, void *lpsrc)
{
  if (lpsrc) {
  (*(void (**)(void))(**(void **)(a1 + 1552) + 64))(*(void *)(a1 + 1552));
  }
  (*(void (**)(void))(**(void **)(a1 + 1552) + 64))(*(void *)(a1 + 1552));
  exitFramework(23);
}

float32x4_t **LSTM<signed char>::addGradient(uint64_t a1, void *lpsrc)
{
  if (lpsrc) {
  else
  }
    uint64_t v3 = 0;
  VVector<signed char>::add<signed char>(*(float32x4_t ***)(a1 + 2568), v3[321], *(_DWORD *)(a1 + 52));
  VVector<signed char>::add<signed char>(*(float32x4_t ***)(a1 + 2576), v3[322], *(_DWORD *)(a1 + 52));
  __n128 result = VVector<signed char>::add<signed char>(*(float32x4_t ***)(a1 + 2584), v3[323], *(_DWORD *)(a1 + 52));
  int v5 = *(_DWORD *)(a1 + 52);
  uint64_t v6 = (*(_DWORD *)(a1 + 48) * v5);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void **)(a1 + 2504);
    uint64_t v9 = v3[313];
    do
    {
      *(unsigned char *)(*v8 + v7) += (*v9)->i8[v7];
      ++v7;
    }
    while (v6 != v7);
    int v5 = *(_DWORD *)(a1 + 52);
    uint64_t v10 = (*(_DWORD *)(a1 + 48) * v5);
    if ((int)v10 >= 1)
    {
      uint64_t v11 = 0;
      uint64_t v12 = *(void **)(a1 + 2512);
      uint64_t v13 = v3[314];
      do
      {
        *(unsigned char *)(*v12 + v11) += (*v13)->i8[v11];
        ++v11;
      }
      while (v10 != v11);
      int v5 = *(_DWORD *)(a1 + 52);
      uint64_t v14 = (*(_DWORD *)(a1 + 48) * v5);
      if ((int)v14 >= 1)
      {
        uint64_t v15 = 0;
        uint64_t v16 = *(void **)(a1 + 2520);
        uint64_t v17 = v3[315];
        do
        {
          *(unsigned char *)(*v16 + v15) += (*v17)->i8[v15];
          ++v15;
        }
        while (v14 != v15);
        int v5 = *(_DWORD *)(a1 + 52);
        uint64_t v18 = (*(_DWORD *)(a1 + 48) * v5);
        if ((int)v18 >= 1)
        {
          uint64_t v19 = 0;
          float v20 = *(void **)(a1 + 2528);
          uint64_t v21 = v3[316];
          do
          {
            *(unsigned char *)(*v20 + v19) += (*v21)->i8[v19];
            ++v19;
          }
          while (v18 != v19);
          int v5 = *(_DWORD *)(a1 + 52);
        }
      }
    }
  }
  if (v5)
  {
    uint64_t v22 = 0;
    uint64_t v23 = *(void **)(a1 + 2536);
    float v24 = v3[317];
    uint64_t v25 = (v5 * v5);
    do
    {
      *(unsigned char *)(*v23 + v22) += (*v24)->i8[v22];
      ++v22;
    }
    while (v25 != v22);
    int v26 = *(_DWORD *)(a1 + 52);
    if (v26)
    {
      uint64_t v27 = 0;
      int v28 = *(void **)(a1 + 2544);
      float v29 = v3[318];
      uint64_t v30 = (v26 * v26);
      do
      {
        *(unsigned char *)(*v28 + v27) += (*v29)->i8[v27];
        ++v27;
      }
      while (v30 != v27);
      int v31 = *(_DWORD *)(a1 + 52);
      if (v31)
      {
        uint64_t v32 = 0;
        uint64_t v33 = *(void **)(a1 + 2552);
        float v34 = v3[319];
        uint64_t v35 = (v31 * v31);
        do
        {
          *(unsigned char *)(*v33 + v32) += (*v34)->i8[v32];
          ++v32;
        }
        while (v35 != v32);
        int v36 = *(_DWORD *)(a1 + 52);
        if (v36)
        {
          uint64_t v37 = 0;
          uint64_t v38 = *(void **)(a1 + 2560);
          float v39 = v3[320];
          uint64_t v40 = (v36 * v36);
          do
          {
            *(unsigned char *)(*v38 + v37) += (*v39)->i8[v37];
            ++v37;
          }
          while (v40 != v37);
        }
      }
    }
  }
  return result;
}

float32x4_t **VVector<signed char>::add<signed char>(float32x4_t **result, float32x4_t **a2, int a3)
{
  if (a3 >= 8)
  {
    uint64_t v3 = *result;
    uint64_t v4 = *a2;
    int v5 = a3 / 8;
    do
    {
      float32x4_t v6 = *v4;
      float32x4_t v7 = v4[1];
      v4 += 2;
      float32x4_t v8 = vaddq_f32(v7, v3[1]);
      float32x4_t *v3 = vaddq_f32(v6, *v3);
      v3[1] = v8;
      v3 += 2;
      --v5;
    }
    while (v5);
  }
  LODWORD(v9) = 8 * (a3 / 8);
  if ((int)v9 < a3)
  {
    uint64_t v9 = (int)v9;
    do
    {
      (*result)->i8[v9] += (*a2)->i8[v9];
      ++v9;
    }
    while (a3 != v9);
  }
  return result;
}

void LSTM<signed char>::compareModels(uint64_t a1, void *lpsrc, void **a3)
{
  uint64_t v3 = a3;
  if (lpsrc)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  int v5 = 0;
  if (a3) {
LABEL_3:
  }
LABEL_4:
  std::vector<BOOL>::vector(&__p, 4uLL);
  uint64_t v6 = *(unsigned int *)(a1 + 52);
  if ((int)v6 <= 0)
  {
    uint64_t v11 = __p;
LABEL_15:
    unint64_t v12 = *v11 | 1;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = 1;
    do
    {
      while (!v8)
      {
        BOOL v8 = 0;
        if (++v7 == v6)
        {
          uint64_t v11 = __p;
          goto LABEL_16;
        }
      }
      int v9 = *(unsigned __int8 *)(*v3[321] + v7);
      int v10 = *(unsigned __int8 *)(*v5[321] + v7);
      BOOL v8 = v9 == v10;
      ++v7;
    }
    while (v7 != v6);
    uint64_t v11 = __p;
    if (v9 == v10) {
      goto LABEL_15;
    }
LABEL_16:
    unint64_t v12 = *v11 & 0xFFFFFFFFFFFFFFFELL;
  }
  void *v11 = v12;
  if ((int)v6 < 1)
  {
LABEL_25:
    unint64_t v17 = v12 | 2;
  }
  else
  {
    uint64_t v13 = 0;
    BOOL v14 = 1;
    do
    {
      while (!v14)
      {
        BOOL v14 = 0;
        if (++v13 == v6) {
          goto LABEL_26;
        }
      }
      int v15 = *(unsigned __int8 *)(*v3[322] + v13);
      int v16 = *(unsigned __int8 *)(*v5[322] + v13);
      BOOL v14 = v15 == v16;
      ++v13;
    }
    while (v13 != v6);
    if (v15 == v16) {
      goto LABEL_25;
    }
LABEL_26:
    unint64_t v17 = v12 & 0xFFFFFFFFFFFFFFFDLL;
  }
  void *v11 = v17;
  if ((int)v6 < 1)
  {
LABEL_35:
    unint64_t v22 = v17 | 4;
  }
  else
  {
    uint64_t v18 = 0;
    BOOL v19 = 1;
    do
    {
      while (!v19)
      {
        BOOL v19 = 0;
        if (++v18 == v6) {
          goto LABEL_36;
        }
      }
      int v20 = *(unsigned __int8 *)(*v3[323] + v18);
      int v21 = *(unsigned __int8 *)(*v5[323] + v18);
      BOOL v19 = v20 == v21;
      ++v18;
    }
    while (v18 != v6);
    if (v20 == v21) {
      goto LABEL_35;
    }
LABEL_36:
    unint64_t v22 = v17 & 0xFFFFFFFFFFFFFFFBLL;
  }
  void *v11 = v22;
  uint64_t v23 = (*(_DWORD *)(a1 + 48) * v6);
  if ((int)v23 < 1)
  {
LABEL_45:
    unint64_t v28 = v22 | 1;
  }
  else
  {
    uint64_t v24 = 0;
    BOOL v25 = 1;
    do
    {
      while (!v25)
      {
        BOOL v25 = 0;
        if (++v24 == v23) {
          goto LABEL_46;
        }
      }
      int v26 = *(unsigned __int8 *)(*v3[313] + v24);
      int v27 = *(unsigned __int8 *)(*v5[313] + v24);
      BOOL v25 = v26 == v27;
      ++v24;
    }
    while (v24 != v23);
    if (v26 == v27) {
      goto LABEL_45;
    }
LABEL_46:
    unint64_t v28 = v22 & 0xFFFFFFFFFFFFFFFELL;
  }
  void *v11 = v28;
  if ((int)v23 < 1)
  {
LABEL_55:
    unint64_t v33 = v28 | 2;
  }
  else
  {
    uint64_t v29 = 0;
    BOOL v30 = 1;
    do
    {
      while (!v30)
      {
        BOOL v30 = 0;
        if (++v29 == v23) {
          goto LABEL_56;
        }
      }
      int v31 = *(unsigned __int8 *)(*v3[315] + v29);
      int v32 = *(unsigned __int8 *)(*v5[315] + v29);
      BOOL v30 = v31 == v32;
      ++v29;
    }
    while (v29 != v23);
    if (v31 == v32) {
      goto LABEL_55;
    }
LABEL_56:
    unint64_t v33 = v28 & 0xFFFFFFFFFFFFFFFDLL;
  }
  void *v11 = v33;
  if ((int)v23 < 1)
  {
LABEL_65:
    unint64_t v38 = v33 | 4;
  }
  else
  {
    uint64_t v34 = 0;
    BOOL v35 = 1;
    do
    {
      while (!v35)
      {
        BOOL v35 = 0;
        if (++v34 == v23) {
          goto LABEL_66;
        }
      }
      int v36 = *(unsigned __int8 *)(*v3[314] + v34);
      int v37 = *(unsigned __int8 *)(*v5[314] + v34);
      BOOL v35 = v36 == v37;
      ++v34;
    }
    while (v34 != v23);
    if (v36 == v37) {
      goto LABEL_65;
    }
LABEL_66:
    unint64_t v38 = v33 & 0xFFFFFFFFFFFFFFFBLL;
  }
  void *v11 = v38;
  if ((int)v23 < 1)
  {
LABEL_75:
    unint64_t v43 = v38 | 8;
  }
  else
  {
    uint64_t v39 = 0;
    BOOL v40 = 1;
    do
    {
      while (!v40)
      {
        BOOL v40 = 0;
        if (++v39 == v23) {
          goto LABEL_76;
        }
      }
      int v41 = *(unsigned __int8 *)(*v3[316] + v39);
      int v42 = *(unsigned __int8 *)(*v5[316] + v39);
      BOOL v40 = v41 == v42;
      ++v39;
    }
    while (v39 != v23);
    if (v41 == v42) {
      goto LABEL_75;
    }
LABEL_76:
    unint64_t v43 = v38 & 0xFFFFFFFFFFFFFFF7;
  }
  void *v11 = v43;
  uint64_t v44 = (v6 * v6);
  if (v6)
  {
    uint64_t v45 = 0;
    BOOL v46 = 1;
    do
    {
      while (!v46)
      {
        BOOL v46 = 0;
        if (++v45 == v44) {
          goto LABEL_86;
        }
      }
      int v47 = *(unsigned __int8 *)(*v3[317] + v45);
      int v48 = *(unsigned __int8 *)(*v5[317] + v45);
      BOOL v46 = v47 == v48;
      ++v45;
    }
    while (v45 != v44);
    if (v47 == v48) {
      goto LABEL_85;
    }
LABEL_86:
    unint64_t v49 = v43 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
LABEL_85:
    unint64_t v49 = v43 | 1;
  }
  void *v11 = v49;
  if (v6)
  {
    uint64_t v50 = 0;
    BOOL v51 = 1;
    do
    {
      while (!v51)
      {
        BOOL v51 = 0;
        if (++v50 == v44) {
          goto LABEL_96;
        }
      }
      int v52 = *(unsigned __int8 *)(*v3[319] + v50);
      int v53 = *(unsigned __int8 *)(*v5[319] + v50);
      BOOL v51 = v52 == v53;
      ++v50;
    }
    while (v50 != v44);
    if (v52 == v53) {
      goto LABEL_95;
    }
LABEL_96:
    unint64_t v54 = v49 & 0xFFFFFFFFFFFFFFFDLL;
  }
  else
  {
LABEL_95:
    unint64_t v54 = v49 | 2;
  }
  void *v11 = v54;
  if (v6)
  {
    uint64_t v55 = 0;
    BOOL v56 = 1;
    do
    {
      BOOL v56 = v56 && *(unsigned __int8 *)(*v3[318] + v55) == *(unsigned __int8 *)(*v5[318] + v55);
      ++v55;
    }
    while (v55 != v44);
  }
  operator delete(v11);
}

void *LSTM<signed char>::subtractModels(uint64_t a1, void *lpsrc, const void *a3)
{
  if (!lpsrc)
  {
    int v5 = 0;
    if (a3) {
      goto LABEL_3;
    }
LABEL_5:
    __n128 result = 0;
    goto LABEL_6;
  }
  if (!a3) {
    goto LABEL_5;
  }
LABEL_3:
LABEL_6:
  uint64_t v7 = *(unsigned int *)(a1 + 52);
  if ((int)v7 >= 1)
  {
    uint64_t v8 = 0;
    int v9 = *(void **)(a1 + 2568);
    int v10 = (void *)result[321];
    uint64_t v11 = (void *)v5[321];
    do
    {
      *(unsigned char *)(*v9 + v8) = *(unsigned char *)(*v10 + v8) - *(unsigned char *)(*v11 + v8);
      ++v8;
    }
    while (v7 != v8);
    uint64_t v7 = *(unsigned int *)(a1 + 52);
    if ((int)v7 >= 1)
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(void **)(a1 + 2576);
      BOOL v14 = (void *)result[322];
      int v15 = (void *)v5[322];
      do
      {
        *(unsigned char *)(*v13 + v12) = *(unsigned char *)(*v14 + v12) - *(unsigned char *)(*v15 + v12);
        ++v12;
      }
      while (v7 != v12);
      uint64_t v7 = *(unsigned int *)(a1 + 52);
      if ((int)v7 >= 1)
      {
        uint64_t v16 = 0;
        unint64_t v17 = *(void **)(a1 + 2584);
        uint64_t v18 = (void *)result[323];
        BOOL v19 = (void *)v5[323];
        do
        {
          *(unsigned char *)(*v17 + v16) = *(unsigned char *)(*v18 + v16) - *(unsigned char *)(*v19 + v16);
          ++v16;
        }
        while (v7 != v16);
        LODWORD(v7) = *(_DWORD *)(a1 + 52);
      }
    }
  }
  uint64_t v20 = (*(_DWORD *)(a1 + 48) * v7);
  if ((int)v20 >= 1)
  {
    uint64_t v21 = 0;
    unint64_t v22 = *(void **)(a1 + 2504);
    uint64_t v23 = (void *)result[313];
    uint64_t v24 = (void *)v5[313];
    do
    {
      *(unsigned char *)(*v22 + v21) = *(unsigned char *)(*v23 + v21) - *(unsigned char *)(*v24 + v21);
      ++v21;
    }
    while (v20 != v21);
    LODWORD(v7) = *(_DWORD *)(a1 + 52);
    uint64_t v25 = (*(_DWORD *)(a1 + 48) * v7);
    if ((int)v25 >= 1)
    {
      uint64_t v26 = 0;
      int v27 = *(void **)(a1 + 2520);
      unint64_t v28 = (void *)result[315];
      uint64_t v29 = (void *)v5[315];
      do
      {
        *(unsigned char *)(*v27 + v26) = *(unsigned char *)(*v28 + v26) - *(unsigned char *)(*v29 + v26);
        ++v26;
      }
      while (v25 != v26);
      LODWORD(v7) = *(_DWORD *)(a1 + 52);
      uint64_t v30 = (*(_DWORD *)(a1 + 48) * v7);
      if ((int)v30 >= 1)
      {
        uint64_t v31 = 0;
        int v32 = *(void **)(a1 + 2512);
        unint64_t v33 = (void *)result[314];
        uint64_t v34 = (void *)v5[314];
        do
        {
          *(unsigned char *)(*v32 + v31) = *(unsigned char *)(*v33 + v31) - *(unsigned char *)(*v34 + v31);
          ++v31;
        }
        while (v30 != v31);
        LODWORD(v7) = *(_DWORD *)(a1 + 52);
        uint64_t v35 = (*(_DWORD *)(a1 + 48) * v7);
        if ((int)v35 >= 1)
        {
          uint64_t v36 = 0;
          int v37 = *(void **)(a1 + 2528);
          unint64_t v38 = (void *)result[316];
          uint64_t v39 = (void *)v5[316];
          do
          {
            *(unsigned char *)(*v37 + v36) = *(unsigned char *)(*v38 + v36) - *(unsigned char *)(*v39 + v36);
            ++v36;
          }
          while (v35 != v36);
          LODWORD(v7) = *(_DWORD *)(a1 + 52);
        }
      }
    }
  }
  if (v7)
  {
    uint64_t v40 = 0;
    int v41 = *(void **)(a1 + 2536);
    int v42 = (void *)result[317];
    uint64_t v43 = (v7 * v7);
    uint64_t v44 = (void *)v5[317];
    do
    {
      *(unsigned char *)(*v41 + v40) = *(unsigned char *)(*v42 + v40) - *(unsigned char *)(*v44 + v40);
      ++v40;
    }
    while (v43 != v40);
    int v45 = *(_DWORD *)(a1 + 52);
    if (v45)
    {
      uint64_t v46 = 0;
      int v47 = *(void **)(a1 + 2552);
      int v48 = (void *)result[319];
      uint64_t v49 = (v45 * v45);
      uint64_t v50 = (void *)v5[319];
      do
      {
        *(unsigned char *)(*v47 + v46) = *(unsigned char *)(*v48 + v46) - *(unsigned char *)(*v50 + v46);
        ++v46;
      }
      while (v49 != v46);
      int v51 = *(_DWORD *)(a1 + 52);
      if (v51)
      {
        uint64_t v52 = 0;
        int v53 = *(void **)(a1 + 2544);
        unint64_t v54 = (void *)result[318];
        uint64_t v55 = (v51 * v51);
        BOOL v56 = (void *)v5[318];
        do
        {
          *(unsigned char *)(*v53 + v52) = *(unsigned char *)(*v54 + v52) - *(unsigned char *)(*v56 + v52);
          ++v52;
        }
        while (v55 != v52);
        int v57 = *(_DWORD *)(a1 + 52);
        if (v57)
        {
          uint64_t v58 = 0;
          BOOL v59 = *(void **)(a1 + 2560);
          int v60 = (void *)result[320];
          uint64_t v61 = (v57 * v57);
          int v62 = (void *)v5[320];
          do
          {
            *(unsigned char *)(*v59 + v58) = *(unsigned char *)(*v60 + v58) - *(unsigned char *)(*v62 + v58);
            ++v58;
          }
          while (v61 != v58);
        }
      }
    }
  }
  return result;
}

void LSTM<signed char>::write(uint64_t a1, FILE *__stream, __sFILE *a3, int a4, int a5)
{
  NeuralNetwork::writeDimensions(__stream, a3, (int *)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  if (a4 >= 1)
  {
    int __ptr = *(_DWORD *)(a1 + 736);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    int __ptr = *(_DWORD *)(a1 + 740);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    int __ptr = *(_DWORD *)(a1 + 744);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    LODWORD(a3->_p) += 12;
  }
  VVector<signed char>::write(*(void *)(a1 + 2568), __stream, (int *)a3, a5);
}

void VVector<signed char>::write(int a1, FILE *__stream, int *a3, int a4)
{
  if (a4 == 32)
  {
    if (__stream)
    {
      int v6 = *a3 & 0xF;
      if (*a3 <= 0) {
        int v6 = -(-*a3 & 0xF);
      }
      if (v6 >= 15) {
        int v7 = 16;
      }
      else {
        int v7 = 15 - v6;
      }
      LOBYTE(__ptr[0]) = v7;
      fwrite(__ptr, 1uLL, 1uLL, __stream);
      ++*a3;
      writeByteArray((size_t)__stream, a3, v7);
      if ((*(unsigned char *)a3 & 0xF) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__ptr, "write(fp)");
        std::string::basic_string[abi:ne180100]<0>(&__p, "VVector");
        if (v9 < 0) {
          operator delete(__p);
        }
        if (v11 < 0) {
          operator delete(__ptr[0]);
        }
        operator new[]();
      }
      exitFramework(17);
    }
    exitFramework(9);
  }
  if (a4 == 8 || a4 == 16) {
    exitFramework(45);
  }
  exitFramework(23);
}

void sub_19291C0C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LSTM<signed char>::read(uint64_t a1, NeuralNetwork *this, int *a3, int *a4, int *a5)
{
  int v5 = (int)a4;
  *(void *)uint64_t v24 = 0;
  NeuralNetwork::readDimensions((uint64_t *)this, (ReadOnlyFile *)&v24[4], v24, a4, a5);
  if (v5 >= 1)
  {
    int v9 = *((_DWORD *)this + 18);
    uint64_t v10 = *(void *)this;
    char v11 = (int *)(*(void *)this + v9);
    unint64_t v12 = *(void *)this + *((void *)this + 1) - 4;
    if ((unint64_t)v11 <= v12)
    {
      int v13 = *v11;
      v9 += 4;
      *((_DWORD *)this + 18) = v9;
    }
    else
    {
      int v13 = 0;
    }
    uint64_t v14 = v9;
    *(_DWORD *)(a1 + 736) = v13;
    if (v10 + v9 <= v12)
    {
      int v15 = *(_DWORD *)(v10 + v9);
      v9 += 4;
      *((_DWORD *)this + 18) = v9;
      uint64_t v14 = v9;
    }
    else
    {
      int v15 = 0;
    }
    *(_DWORD *)(a1 + 740) = v15;
    uint64_t v16 = (int *)(v10 + v14);
    if ((unint64_t)v16 <= v12)
    {
      int v17 = *v16;
      *((_DWORD *)this + 18) = v9 + 4;
    }
    else
    {
      int v17 = 0;
    }
    *(_DWORD *)(a1 + 744) = v17;
  }
  if (*(void *)(a1 + 48) != *(void *)v24) {
    exitFramework(3);
  }
  VVector<signed char>::read(*(signed __int8 ***)(a1 + 2568), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (signed __int8 **)*(unsigned int *)(a1 + 52));
  VVector<signed char>::read(*(signed __int8 ***)(a1 + 2576), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (signed __int8 **)*(unsigned int *)(a1 + 52));
  VVector<signed char>::read(*(signed __int8 ***)(a1 + 2584), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (signed __int8 **)*(unsigned int *)(a1 + 52));
  MMatrix<signed char>::read(*(char **)(a1 + 2504), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (signed __int8 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<signed char>::read(*(char **)(a1 + 2512), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (signed __int8 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<signed char>::read(*(char **)(a1 + 2520), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (signed __int8 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<signed char>::read(*(char **)(a1 + 2528), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (signed __int8 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<signed char>::read(*(char **)(a1 + 2536), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (signed __int8 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
  MMatrix<signed char>::read(*(char **)(a1 + 2544), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (signed __int8 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
  MMatrix<signed char>::read(*(char **)(a1 + 2552), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (signed __int8 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
  uint64_t v18 = *(char **)(a1 + 2560);
  int v19 = *a3;
  int v20 = *(unsigned __int8 *)(a1 + 1697);
  uint64_t v21 = (signed __int8 **)*(unsigned int *)(a1 + 52);
  int v22 = *(_DWORD *)(a1 + 52);

  return MMatrix<signed char>::read(v18, (uint64_t)this, v19, v20, v21, v22);
}

uint64_t VVector<signed char>::read(signed __int8 **a1, uint64_t a2, int a3, BOOL a4, signed __int8 **a5)
{
  int v13 = (int)a5;
  if (!a2) {
LABEL_11:
  }
    exitFramework(9);
  int v5 = (int)a5;
  if (a3 == 3)
  {
    readPadding((uint64_t *)a2);
    char v9 = *(unsigned char *)(a2 + 72);
  }
  else
  {
    char v9 = *(unsigned char *)a1;
  }
  if ((v9 & 0xF) != 0) {
    exitFramework(19);
  }
  if (a4)
  {
    uint64_t v10 = *(int *)(a2 + 72);
    char v11 = (signed __int8 *)(*(void *)a2 + v10);
    *a1 = v11;
    *(_DWORD *)(a2 + 72) = v10 + v5;
    uint64_t result = v5;
    if (!v11) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t result = ReadOnlyFile::readInt8Array((ReadOnlyFile *)a2, *a1, &v13, a4, a5);
    if (!*a1) {
      goto LABEL_11;
    }
  }
  if (!result) {
    goto LABEL_11;
  }
  return result;
}

uint64_t LSTM<signed char>::weightsAreNaN()
{
  return 0;
}

uint64_t LSTM<signed char>::inputDeltas(uint64_t a1)
{
  return a1 + 816;
}

void LSTM<signed char>::deltas()
{
}

void **LSTM<signed char>::outputs(uint64_t a1)
{
  float v2 = (void **)(a1 + 792);
  std::vector<VVector<float>>::resize((char **)(a1 + 792), (uint64_t)(*(void *)(a1 + 168) - *(void *)(a1 + 160)) >> 3);
  uint64_t v3 = *(uint64_t **)(a1 + 160);
  uint64_t v4 = *(void *)(a1 + 168) - (void)v3;
  if (v4)
  {
    unint64_t v5 = v4 >> 3;
    int v6 = *v2;
    if (v5 <= 1) {
      unint64_t v5 = 1;
    }
    do
    {
      uint64_t v7 = *v3++;
      *v6++ = v7;
      --v5;
    }
    while (v5);
  }
  return v2;
}

uint64_t LSTM<signed char>::inputs(uint64_t a1)
{
  return a1 + 64;
}

void LSTM<signed char>::targets()
{
}

void LSTM<short>::LSTM(uint64_t a1, int a2, int a3, _DWORD **a4, int a5, uint64_t a6, int a7, uint64_t a8, char a9)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EE322CE0;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 52) = a3;
  *(_DWORD *)(a1 + 56) = a5;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(unsigned char *)(a1 + 1072) = 0;
  *(unsigned char *)(a1 + 1192) = 0;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(unsigned char *)(a1 + 1312) = 0;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  int v13 = (_OWORD *)(a1 + 1640);
  *(unsigned char *)(a1 + 1432) = 0;
  bzero((void *)(a1 + 64), 0x2A0uLL);
  *(_OWORD *)(a1 + 988) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1108) = 0u;
  *(_OWORD *)(a1 + 1228) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1348) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *int v13 = 0u;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(void *)(a1 + 1688) = 0;
  *(void *)(a1 + 1704) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1712), 0);
  *(void *)(a1 + 1776) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1784), 0);
  *(void *)(a1 + 1848) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1856), 0);
  *(void *)(a1 + 1920) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1928), 0);
  *(void *)(a1 + 1992) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2000), 0);
  *(void *)(a1 + 2064) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2072), 0);
  *(void *)(a1 + 2136) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2144), 0);
  *(void *)(a1 + 2208) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2216), 0);
  *(void *)(a1 + 2280) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2288), 0);
  *(void *)(a1 + 2352) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2360), 0);
  *(void *)(a1 + 2424) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2432), 0);
  *(_DWORD *)(a1 + 2496) = 0;
  *(_OWORD *)(a1 + 2624) = 0u;
  *(_OWORD *)(a1 + 2640) = 0u;
  *(_OWORD *)(a1 + 2656) = 0u;
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  int v14 = 1;
  *(unsigned char *)(a1 + 2692) = 1;
  *(unsigned char *)(a1 + 2672) = 0;
  *(unsigned char *)(a1 + 41) = 0;
  *(void *)(a1 + 2680) = a8;
  if (a8)
  {
    a7 = *(unsigned __int8 *)(a8 + 512);
    int v14 = *(_DWORD *)(a8 + 28);
    int v15 = a7 ^ 1;
  }
  else
  {
    int v15 = 1;
  }
  *(_DWORD *)(a1 + 2688) = v14;
  *(unsigned char *)(a1 + 40) = a7;
  int v16 = *(unsigned __int8 *)(a6 + 45);
  *(unsigned char *)(a1 + 1696) = v16;
  *(unsigned char *)(a1 + 1697) = *(unsigned char *)(a6 + 46);
  int v17 = *a4;
  *(_DWORD *)(a1 + 736) = **a4;
  *(_DWORD *)(a1 + 740) = v17[1];
  *(_DWORD *)(a1 + 744) = v17[2];
  if (!a7) {
    int v15 = 0;
  }
  *(_DWORD *)(a1 + 48) = v15 + *(_DWORD *)(a1 + 44);
  if (a9)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
    *(unsigned char *)(a1 + 2672) = 1;
    int v16 = *(unsigned __int8 *)(a1 + 1696);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a6 + 16);
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(void *)(a1 + 1632) = 0;
  if (!v16)
  {
    int v18 = *(_DWORD *)(a6 + 32);
    switch(v18)
    {
      case 2:
        operator new();
      case 1:
        operator new();
      case 0:
        operator new();
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "LSTM alloc, from constructor");
  LSTM<short>::init();
}

void sub_19291D1E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PTMutex *a10, PTMutex *a11, PTMutex *a12, PTMutex *a13, PTMutex *a14, PTMutex *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  MEMORY[0x192FF16B0](v53, 0x10B3C408D47FFFCLL);
  int v60 = (void **)(v52 + 328);
  uint64_t v61 = (void *)v52[331];
  if (v61)
  {
    v52[332] = v61;
    operator delete(v61);
  }
  int v62 = *v60;
  if (*v60)
  {
    v52[329] = v62;
    operator delete(v62);
  }
  PTMutex::~PTMutex(v58);
  PTMutex::~PTMutex(v54);
  PTMutex::~PTMutex(a10);
  PTMutex::~PTMutex(a11);
  PTMutex::~PTMutex(a12);
  PTMutex::~PTMutex(a13);
  PTMutex::~PTMutex(a14);
  PTMutex::~PTMutex(v57);
  PTMutex::~PTMutex(v56);
  PTMutex::~PTMutex(v55);
  PTMutex::~PTMutex(a15);
  SparseMatrix<float>::~SparseMatrix(a17);
  SparseMatrix<float>::~SparseMatrix(a18);
  SparseMatrix<float>::~SparseMatrix(a16);
  SparseMatrix<float>::~SparseMatrix(a19);
  int v63 = (void *)v52[120];
  if (v63)
  {
    v52[121] = v63;
    operator delete(v63);
  }
  uint64_t v64 = (void *)v52[117];
  if (v64)
  {
    v52[118] = v64;
    operator delete(v64);
  }
  uint64_t v65 = (void *)v52[114];
  if (v65)
  {
    v52[115] = v65;
    operator delete(v65);
  }
  int v66 = (void *)v52[111];
  if (v66)
  {
    v52[112] = v66;
    operator delete(v66);
  }
  int v67 = (void *)v52[108];
  if (v67)
  {
    v52[109] = v67;
    operator delete(v67);
  }
  int v68 = (void *)v52[105];
  if (v68)
  {
    v52[106] = v68;
    operator delete(v68);
  }
  int v69 = (void *)v52[102];
  if (v69)
  {
    v52[103] = v69;
    operator delete(v69);
  }
  uint64_t v70 = (void *)v52[99];
  if (v70)
  {
    v52[100] = v70;
    operator delete(v70);
  }
  uint64_t v71 = (void *)v52[89];
  if (v71)
  {
    v52[90] = v71;
    operator delete(v71);
  }
  uint64_t v72 = (void *)v52[86];
  if (v72)
  {
    v52[87] = v72;
    operator delete(v72);
  }
  uint64_t v73 = (void *)v52[83];
  if (v73)
  {
    v52[84] = v73;
    operator delete(v73);
  }
  uint64_t v74 = (void *)v52[80];
  if (v74)
  {
    v52[81] = v74;
    operator delete(v74);
  }
  uint64_t v75 = (void *)v52[77];
  if (v75)
  {
    v52[78] = v75;
    operator delete(v75);
  }
  uint64_t v76 = (void *)v52[74];
  if (v76)
  {
    v52[75] = v76;
    operator delete(v76);
  }
  BOOL v77 = (void *)v52[71];
  if (v77)
  {
    v52[72] = v77;
    operator delete(v77);
  }
  float v78 = (void *)v52[68];
  if (v78)
  {
    v52[69] = v78;
    operator delete(v78);
  }
  int v79 = (void *)v52[65];
  if (v79)
  {
    v52[66] = v79;
    operator delete(v79);
  }
  uint64_t v80 = (void *)v52[62];
  if (v80)
  {
    v52[63] = v80;
    operator delete(v80);
  }
  int v81 = (void *)v52[59];
  if (v81)
  {
    v52[60] = v81;
    operator delete(v81);
  }
  float v82 = (void *)v52[56];
  if (v82)
  {
    v52[57] = v82;
    operator delete(v82);
  }
  uint64_t v83 = (void *)v52[53];
  if (v83)
  {
    v52[54] = v83;
    operator delete(v83);
  }
  int v84 = (void *)v52[50];
  if (v84)
  {
    v52[51] = v84;
    operator delete(v84);
  }
  uint64_t v85 = (void *)v52[47];
  if (v85)
  {
    v52[48] = v85;
    operator delete(v85);
  }
  BOOL v86 = (void *)v52[44];
  if (v86)
  {
    v52[45] = v86;
    operator delete(v86);
  }
  a23 = v52 + 26;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  BOOL v87 = (void *)v52[23];
  if (v87)
  {
    v52[24] = v87;
    operator delete(v87);
  }
  uint64_t v88 = (void *)v52[20];
  if (v88)
  {
    v52[21] = v88;
    operator delete(v88);
  }
  int v89 = (void *)v52[17];
  if (v89)
  {
    v52[18] = v89;
    operator delete(v89);
  }
  uint64_t v90 = (void *)v52[14];
  if (v90)
  {
    v52[15] = v90;
    operator delete(v90);
  }
  int v91 = (void *)v52[11];
  if (v91)
  {
    v52[12] = v91;
    operator delete(v91);
  }
  uint64_t v92 = *a20;
  if (*a20)
  {
    v52[9] = v92;
    operator delete(v92);
  }
  *uint64_t v52 = a21;
  uint64_t v93 = (void *)v52[1];
  if (v93)
  {
    v52[2] = v93;
    operator delete(v93);
  }
  _Unwind_Resume(a1);
}

uint64_t FullLayer<short>::FullLayer(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, char a7, uint64_t a8)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EE323D00;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = a2;
  *(_DWORD *)(a1 + 100) = a3;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(unsigned char *)(a1 + 232) = 0;
  *(void *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(void *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 432) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 440), 0);
  *(_DWORD *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 112) = a5;
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  *(unsigned char *)(a1 + 41) = 0;
  *(_DWORD *)(a1 + 408) = a4;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a6 + 68);
  *(void *)(a1 + 528) = a8;
  if (a8) {
    a7 = *(unsigned char *)(a8 + 512);
  }
  *(unsigned char *)(a1 + 40) = a7;
  *(unsigned char *)(a1 + 520) = 0;
  *(_WORD *)(a1 + 116) = *(_WORD *)(a6 + 45);
  std::string::basic_string[abi:ne180100]<0>(__p, "FullLayer");
  (*(void (**)(uint64_t, void **, void, float))(*(void *)a1 + 400))(a1, __p, 0, -0.44);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a6 + 16);
  *(void *)(a1 + 424) = 0;
  if (!*(unsigned char *)(a1 + 116))
  {
    int v15 = *(_DWORD *)(a6 + 32);
    switch(v15)
    {
      case 2:
        operator new();
      case 1:
        operator new();
      case 0:
        operator new();
    }
  }
  return a1;
}

void sub_19291D9D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x192FF16B0](v24, 0x10B3C408D47FFFCLL);
  PTMutex::~PTMutex(v23);
  int v27 = (void *)v20[48];
  if (v27)
  {
    v20[49] = v27;
    operator delete(v27);
  }
  a15 = v20 + 45;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  unint64_t v28 = (void *)v20[42];
  if (v28)
  {
    v20[43] = v28;
    operator delete(v28);
  }
  uint64_t v29 = (void *)v20[39];
  if (v29)
  {
    v20[40] = v29;
    operator delete(v29);
  }
  uint64_t v30 = (void *)v20[36];
  if (v30)
  {
    v20[37] = v30;
    operator delete(v30);
  }
  uint64_t v31 = (void *)v20[33];
  if (v31)
  {
    v20[34] = v31;
    operator delete(v31);
  }
  SparseMatrix<float>::~SparseMatrix(v22);
  int v32 = (void *)v20[9];
  if (v32)
  {
    v20[10] = v32;
    operator delete(v32);
  }
  unint64_t v33 = *v25;
  if (*v25)
  {
    v20[7] = v33;
    operator delete(v33);
  }
  *int v20 = v21;
  uint64_t v34 = (void *)v20[1];
  if (v34)
  {
    void v20[2] = v34;
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

uint64_t RecurrentLayer<short>::RecurrentLayer(uint64_t a1, int a2, int a3, int a4, char a5, char a6, char a7, uint64_t a8)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EE3187A8;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 48) = a3;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(void *)(a1 + 296) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 304), 0);
  *(_DWORD *)(a1 + 368) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 376) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  *(unsigned char *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 41) = 0;
  *(_DWORD *)(a1 + 208) = a4;
  *(void *)(a1 + 240) = a8;
  *(unsigned char *)(a1 + 40) = a7;
  *(unsigned char *)(a1 + 60) = a5;
  *(unsigned char *)(a1 + 61) = a6;
  std::string::basic_string[abi:ne180100]<0>(__p, "RecurrentLayer from Constructor");
  (*(void (**)(uint64_t, void **, void, float))(*(void *)a1 + 392))(a1, __p, 0, -0.44);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_19291DCE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  PTMutex::~PTMutex(v17);
  int v20 = (void *)v15[34];
  if (v20)
  {
    v15[35] = v20;
    operator delete(v20);
  }
  uint64_t v21 = *v18;
  if (*v18)
  {
    v15[32] = v21;
    operator delete(v21);
  }
  uint64_t v22 = (void *)v15[23];
  if (v22)
  {
    v15[24] = v22;
    operator delete(v22);
  }
  uint64_t v23 = (void *)v15[20];
  if (v23)
  {
    v15[21] = v23;
    operator delete(v23);
  }
  uint64_t v24 = (void *)v15[17];
  if (v24)
  {
    v15[18] = v24;
    operator delete(v24);
  }
  uint64_t v25 = (void *)v15[14];
  if (v25)
  {
    v15[15] = v25;
    operator delete(v25);
  }
  uint64_t v26 = (void *)v15[11];
  if (v26)
  {
    v15[12] = v26;
    operator delete(v26);
  }
  void *v15 = v16;
  int v27 = (void *)v15[1];
  if (v27)
  {
    v15[2] = v27;
    operator delete(v27);
  }
  _Unwind_Resume(a1);
}

uint64_t SoftMax<short>::SoftMax(uint64_t a1, int a2, int a3, uint64_t a4, char a5, uint64_t a6)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)a1 = &unk_1EE323D00;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(unsigned char *)(a1 + 232) = 0;
  *(void *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 432) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 440), 0);
  *(_DWORD *)(a1 + 504) = 0;
  *(_WORD *)(a1 + 40) = 0;
  *(void *)(a1 + 424) = 0;
  *(unsigned char *)(a1 + 520) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 110) = 0;
  *(_DWORD *)(a1 + 408) = 1;
  *(void *)(a1 + 528) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  *(void *)a1 = &unk_1EE3234F0;
  *(_WORD *)(a1 + 41) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 408) = 0;
  *(void *)(a1 + 528) = a6;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a4 + 68);
  if (a6) {
    a5 = *(unsigned char *)(a6 + 512);
  }
  *(unsigned char *)(a1 + 40) = a5;
  *(_DWORD *)(a1 + 96) = a2;
  *(_DWORD *)(a1 + 100) = a3;
  *(void *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 116) = *(_WORD *)(a4 + 45);
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 528) = a6;
  if (a2 < 1 || a3 <= 0) {
    exitFramework(34);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "SoftMax");
  FullLayer<short>::init(a1, (uint64_t)__p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a4 + 16);
  *(void *)(a1 + 424) = 0;
  if (!*(unsigned char *)(a1 + 116))
  {
    int v13 = *(_DWORD *)(a4 + 32);
    switch(v13)
    {
      case 2:
        operator new();
      case 1:
        operator new();
      case 0:
        operator new();
    }
  }
  return a1;
}

void sub_19291E0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x192FF16B0](v21, 0x10B3C408D47FFFCLL);
  FullLayer<short>::~FullLayer(v20);
  _Unwind_Resume(a1);
}

void GRU<short>::GRU(uint64_t a1, int a2, int a3, _DWORD **a4, int a5, uint64_t a6, int a7, uint64_t a8)
{
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_1EE322848;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 52) = a3;
  *(_DWORD *)(a1 + 56) = a5;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(unsigned char *)(a1 + 848) = 0;
  *(unsigned char *)(a1 + 968) = 0;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(unsigned char *)(a1 + 1088) = 0;
  *(void *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_DWORD *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 884) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 1004) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(void *)(a1 + 1160) = 0;
  *(void *)(a1 + 1232) = 0;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(void *)(a1 + 1240) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1248), 0);
  *(void *)(a1 + 1312) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1320), 0);
  *(void *)(a1 + 1384) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1392), 0);
  *(void *)(a1 + 1456) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1464), 0);
  *(void *)(a1 + 1528) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1536), 0);
  *(void *)(a1 + 1600) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1608), 0);
  *(void *)(a1 + 1672) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1680), 0);
  *(void *)(a1 + 1744) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1752), 0);
  *(void *)(a1 + 1816) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1824), 0);
  *(void *)(a1 + 1888) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1896), 0);
  *(void *)(a1 + 1960) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1968), 0);
  *(_DWORD *)(a1 + 2084) = 0;
  *(_OWORD *)(a1 + 2052) = 0u;
  *(_OWORD *)(a1 + 2068) = 0u;
  *(_OWORD *)(a1 + 2036) = 0u;
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  *(unsigned char *)(a1 + 2088) = 0;
  *(unsigned char *)(a1 + 41) = 0;
  *(void *)(a1 + 2096) = a8;
  if (a8)
  {
    a7 = *(unsigned __int8 *)(a8 + 512);
    int v13 = a7 ^ 1;
  }
  else
  {
    int v13 = 1;
  }
  *(unsigned char *)(a1 + 40) = a7;
  int v14 = *(unsigned __int8 *)(a6 + 45);
  *(unsigned char *)(a1 + 2032) = v14;
  *(unsigned char *)(a1 + 2033) = *(unsigned char *)(a6 + 46);
  char v15 = *a4;
  *(_DWORD *)(a1 + 568) = **a4;
  *(_DWORD *)(a1 + 572) = v15[1];
  *(_DWORD *)(a1 + 576) = v15[2];
  if (!a7) {
    int v13 = 0;
  }
  *(_DWORD *)(a1 + 48) = v13 + *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a6 + 16);
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  if (!v14)
  {
    int v16 = *(_DWORD *)(a6 + 32);
    switch(v16)
    {
      case 2:
        operator new();
      case 1:
        operator new();
      case 0:
        operator new();
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "GRU alloc, from constructor");
  GRU<short>::init();
}

void sub_19291ED6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PTMutex *a10, PTMutex *a11, PTMutex *a12, PTMutex *a13, PTMutex *a14, PTMutex *a15, PTMutex *a16, PTMutex *a17, PTMutex *a18, PTMutex *a19, PTMutex *a20,void **a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  MEMORY[0x192FF16B0](v47, 0x10B3C40C37BAA31);
  uint64_t v53 = (void *)v46[258];
  if (v53)
  {
    v46[259] = v53;
    operator delete(v53);
  }
  unint64_t v54 = (void *)v46[255];
  if (v54)
  {
    v46[256] = v54;
    operator delete(v54);
  }
  PTMutex::~PTMutex(a10);
  PTMutex::~PTMutex(a11);
  PTMutex::~PTMutex(a12);
  PTMutex::~PTMutex(a13);
  PTMutex::~PTMutex(a14);
  PTMutex::~PTMutex(a15);
  PTMutex::~PTMutex(a16);
  PTMutex::~PTMutex(a17);
  PTMutex::~PTMutex(a18);
  PTMutex::~PTMutex(a19);
  PTMutex::~PTMutex(a20);
  SparseMatrix<float>::~SparseMatrix(v50);
  SparseMatrix<float>::~SparseMatrix(v48);
  SparseMatrix<float>::~SparseMatrix(v49);
  uint64_t v55 = (void *)v46[91];
  if (v55)
  {
    v46[92] = v55;
    operator delete(v55);
  }
  BOOL v56 = (void *)v46[88];
  if (v56)
  {
    v46[89] = v56;
    operator delete(v56);
  }
  int v57 = (void *)v46[85];
  if (v57)
  {
    v46[86] = v57;
    operator delete(v57);
  }
  uint64_t v58 = (void *)v46[82];
  if (v58)
  {
    v46[83] = v58;
    operator delete(v58);
  }
  BOOL v59 = (void *)v46[79];
  if (v59)
  {
    v46[80] = v59;
    operator delete(v59);
  }
  int v60 = (void *)v46[76];
  if (v60)
  {
    v46[77] = v60;
    operator delete(v60);
  }
  uint64_t v61 = (void *)v46[68];
  if (v61)
  {
    v46[69] = v61;
    operator delete(v61);
  }
  int v62 = (void *)v46[65];
  if (v62)
  {
    v46[66] = v62;
    operator delete(v62);
  }
  int v63 = (void *)v46[62];
  if (v63)
  {
    v46[63] = v63;
    operator delete(v63);
  }
  uint64_t v64 = (void *)v46[59];
  if (v64)
  {
    v46[60] = v64;
    operator delete(v64);
  }
  uint64_t v65 = (void *)v46[56];
  if (v65)
  {
    v46[57] = v65;
    operator delete(v65);
  }
  int v66 = *v51;
  if (*v51)
  {
    v46[54] = v66;
    operator delete(v66);
  }
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  int v67 = (void *)v46[23];
  if (v67)
  {
    v46[24] = v67;
    operator delete(v67);
  }
  int v68 = (void *)v46[20];
  if (v68)
  {
    v46[21] = v68;
    operator delete(v68);
  }
  int v69 = (void *)v46[17];
  if (v69)
  {
    v46[18] = v69;
    operator delete(v69);
  }
  uint64_t v70 = (void *)v46[14];
  if (v70)
  {
    v46[15] = v70;
    operator delete(v70);
  }
  uint64_t v71 = (void *)v46[11];
  if (v71)
  {
    v46[12] = v71;
    operator delete(v71);
  }
  uint64_t v72 = *a21;
  if (*a21)
  {
    v46[9] = v72;
    operator delete(v72);
  }
  *uint64_t v46 = a22;
  uint64_t v73 = (void *)v46[1];
  if (v73)
  {
    v46[2] = v73;
    operator delete(v73);
  }
  _Unwind_Resume(a1);
}

uint64_t BatchNormalization<short>::BatchNormalization(uint64_t a1, int a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EE3214C8;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 48) = 925353388;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  long long v5 = *(_OWORD *)(a3 + 32);
  long long v6 = *(_OWORD *)(a3 + 48);
  *(void *)(a1 + 120) = *(void *)(a3 + 64);
  *(_OWORD *)(a1 + 104) = v6;
  *(_OWORD *)(a1 + 88) = v5;
  *(_OWORD *)(a1 + 72) = v4;
  *(_OWORD *)(a1 + 168) = 0u;
  uint64_t v7 = (char **)(a1 + 168);
  uint64_t v8 = (char **)(a1 + 192);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = &unk_1EE322FF8;
  pthread_mutex_init((pthread_mutex_t *)(a1 + 224), 0);
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 41) = 0;
  std::vector<VVector<float>>::resize(v7, maxFeatureVectors);
  std::vector<VVector<float>>::resize(v8, maxFeatureVectors);
  *(_WORD *)(a1 + 160) = *(_WORD *)(a1 + 101);
  if (maxFeatureVectors >= 1) {
    operator new[]();
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 200))(a1);
  return a1;
}

void sub_19291F4B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, PTMutex *a9, uint64_t a10)
{
  int v14 = *v12;
  if (*v12)
  {
    v10[25] = v14;
    operator delete(v14);
  }
  char v15 = *v11;
  if (*v11)
  {
    v10[22] = v15;
    operator delete(v15);
  }
  void *v10 = a10;
  int v16 = (void *)v10[1];
  if (v16)
  {
    v10[2] = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void ParallelSelector<short>::~ParallelSelector(uint64_t a1)
{
  ParallelSelector<short>::~ParallelSelector(a1);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void **v14;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE320C38;
  uint64_t v3 = *(void *)(a1 + 280);
  float v2 = *(void *)(a1 + 288);
  if (v2 == v3)
  {
    uint64_t v3 = *(void *)(a1 + 288);
  }
  else
  {
    long long v4 = 0;
    do
    {
      long long v5 = *(void **)(v3 + 8 * v4);
      if (*v5)
      {
        MEMORY[0x192FF1690](*v5, 0x1000C8052888210);
        void *v5 = 0;
        uint64_t v3 = *(void *)(a1 + 280);
        float v2 = *(void *)(a1 + 288);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  *(void *)(a1 + 288) = v3;
  int v14 = (void **)(a1 + 536);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v14);
  long long v6 = *(void **)(a1 + 504);
  if (v6)
  {
    *(void *)(a1 + 512) = v6;
    operator delete(v6);
  }
  int v14 = (void **)(a1 + 472);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v14);
  uint64_t v7 = *(void **)(a1 + 448);
  if (v7)
  {
    *(void *)(a1 + 456) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(a1 + 424);
  if (v8)
  {
    *(void *)(a1 + 432) = v8;
    operator delete(v8);
  }
  char v9 = *(void **)(a1 + 400);
  if (v9)
  {
    *(void *)(a1 + 408) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *(void **)(a1 + 376);
  if (v10)
  {
    *(void *)(a1 + 384) = v10;
    operator delete(v10);
  }
  char v11 = *(void **)(a1 + 352);
  if (v11)
  {
    *(void *)(a1 + 360) = v11;
    operator delete(v11);
  }
  unint64_t v12 = *(void **)(a1 + 304);
  if (v12)
  {
    *(void *)(a1 + 312) = v12;
    operator delete(v12);
  }
  int v13 = *(void **)(a1 + 280);
  if (v13)
  {
    *(void *)(a1 + 288) = v13;
    operator delete(v13);
  }

  Parallel::~Parallel((Parallel *)a1);
}

float ParallelSelector<short>::log2Probability(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v13 = 0;
  if (a3 < 1) {
    return 0.0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = a3;
  float v6 = 0.0;
  do
  {
    uint64_t v7 = *(int *)(a1 + 332);
    uint64_t v8 = *(void *)(*(void *)(a1 + 80) + 8 * v7);
    (*(void (**)(uint64_t, uint64_t, char *, uint64_t))(*(void *)v8 + 232))(v8, *(void *)(a1 + 200) + 24 * (int)v7, (char *)&v13 + 4, v4);
    uint64_t v9 = *(int *)(*(void *)(a1 + 400) + 4 * v4);
    uint64_t v10 = *(void *)(*(void *)(a1 + 80) + 8 * v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v10 + 232))(v10, *(void *)(a1 + 200) + 24 * (int)v9, &v13, v4);
    float v11 = *((float *)&v13 + 1);
    if ((*(_DWORD *)(a1 + 328) - 3) < 2) {
      float v11 = -0.0;
    }
    float v6 = v6 + (float)(*(float *)&v13 + v11);
    ++v4;
  }
  while (v5 != v4);
  return v6;
}

uint64_t ParallelSelector<short>::computeError(uint64_t result, uint64_t a2, uint64_t a3, int a4, _DWORD *a5, uint64_t a6)
{
  if (a4 >= 1)
  {
    uint64_t v19 = v6;
    uint64_t v20 = v7;
    uint64_t v10 = result;
    uint64_t v11 = 0;
    uint64_t v12 = a4;
    do
    {
      int v18 = 0;
      uint64_t v13 = *(int *)(v10 + 332);
      uint64_t v14 = *(void *)(*(void *)(v10 + 80) + 8 * v13);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(void *)v14 + 240))(v14, *(void *)(v10 + 200) + 24 * v13, *(void *)(v10 + 472) + 24 * v13, v11, &v18, a6);
      int v17 = 0;
      uint64_t v15 = *(int *)(*(void *)(v10 + 400) + 4 * v11);
      uint64_t v16 = *(void *)(*(void *)(v10 + 80) + 8 * v15);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, uint64_t))(*(void *)v16 + 240))(v16, *(void *)(v10 + 200) + 24 * (int)v15, *(void *)(v10 + 472) + 24 * *(int *)(v10 + 336), v11, &v17, a6);
      if (v18 == 1 || v17 == 1) {
        ++*a5;
      }
      ++v11;
    }
    while (v12 != v11);
  }
  return result;
}

void *ParallelSelector<short>::updateFrom(uint64_t a1, void *lpsrc, uint64_t a3, float a4, float a5)
{
  if (!result) {
    __cxa_bad_cast();
  }
  int v10 = *(_DWORD *)(a1 + 340);
  if ((v10 & 0x80000000) == 0)
  {
    uint64_t v11 = (uint64_t)result;
    uint64_t v12 = 0;
    do
    {
      if (*(int *)(*(void *)(v11 + 304) + 4 * v12) >= 1)
      {
        uint64_t v13 = *(void *)(*(void *)(a1 + 80) + 8 * v12);
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void, uint64_t, float, float))(*(void *)v13 + 336))(v13, *(void *)(*(void *)(v11 + 80) + 8 * v12), a3, a4, a5);
        int v10 = *(_DWORD *)(a1 + 340);
      }
    }
    while (v12++ < v10);
  }
  return result;
}

void ParallelSelector<short>::forward(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int **a7)
{
  float v147 = 0;
  float v148 = 0;
  unint64_t v149 = 0;
  if ((*(_DWORD *)(a1 + 340) & 0x80000000) == 0)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *(void *)(a1 + 304);
    do
      *(_DWORD *)(v14 + 4 * v13) = 0;
    while (v13++ < *(int *)(a1 + 340));
  }
  uint64_t v16 = *(void *)(a1 + 224);
  if (v16) {
    a2 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 32))(v16);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "ParallelSelector");
  uint64_t v17 = a4 & 0xFFFFFF;
  if (SHIBYTE(v146) < 0) {
    operator delete(__p);
  }
  if (v17 > (a5 != 0))
  {
    uint64_t v18 = a5 != 0;
    while (1)
    {
      uint64_t v19 = *(int *)(a1 + 332);
      uint64_t v20 = *(void *)(*(void *)(a1 + 80) + 8 * v19);
      (*(void (**)(uint64_t))(*(void *)v20 + 272))(v20);
      uint64_t v21 = *(void *)(*(void *)(a1 + 80) + 8 * v19);
      (*(void (**)(uint64_t))(*(void *)v21 + 264))(v21);
      uint64_t v22 = *(void *)(a1 + 304);
      if (!*(_DWORD *)(v22 + 4 * v19))
      {
        *(_DWORD *)(v22 + 4 * v19) = 1;
        uint64_t v23 = *(void *)(*(void *)(a1 + 80) + 8 * v19);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 256))(v23, v17);
      }
      std::string __p = 0;
      v145 = 0;
      uint64_t v146 = 0;
      uint64_t v24 = *(void *)(*(void *)(a1 + 80) + 8 * v19);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v24 + 224))(v24, a2, a3, v18, &__p);
      uint64_t v25 = *(void *)(*(void *)(a1 + 80) + 8 * v19);
      int v142 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v25 + 32))(v25);
      memset(&v143, 0, sizeof(v143));
      int v26 = *(_DWORD *)(a1 + 328);
      if (v26 == 1) {
        break;
      }
      if (v26 == 2)
      {
        uint64_t v72 = *v142;
        uint64_t v73 = *(void *)(*(void *)(a1 + 80) + 8 * *(int *)(a1 + 332));
        int v74 = (*(uint64_t (**)(uint64_t))(*(void *)v73 + 272))(v73);
        if (v74 < 1)
        {
          int v75 = 0;
        }
        else
        {
          int v75 = 0;
          uint64_t v76 = 0;
          float v78 = 1.1755e-38;
          do
          {
            uint64_t v77 = *(void *)(v72 + 8 * v18);
            if (*(float *)(v77 + 4 * v76) > v78)
            {
              int v75 = v76;
              float v78 = *(float *)(v77 + 4 * v76);
            }
            ++v76;
          }
          while (v74 != v76);
        }
        int v81 = v75 + 1;
        std::vector<int>::pointer end = v143.__end_;
        if (v143.__end_ >= v143.__end_cap_.__value_)
        {
          std::vector<int>::pointer begin = v143.__begin_;
          int64_t v85 = v143.__end_ - v143.__begin_;
          unint64_t v86 = v85 + 1;
          if ((unint64_t)(v85 + 1) >> 62) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          int64_t v87 = (char *)v143.__end_cap_.__value_ - (char *)v143.__begin_;
          if (((char *)v143.__end_cap_.__value_ - (char *)v143.__begin_) >> 1 > v86) {
            unint64_t v86 = v87 >> 1;
          }
          BOOL v52 = (unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v88 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v52) {
            unint64_t v88 = v86;
          }
          if (v88)
          {
            unint64_t v88 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v88);
            std::vector<int>::pointer begin = v143.__begin_;
            std::vector<int>::pointer end = v143.__end_;
          }
          else
          {
            uint64_t v89 = 0;
          }
          uint64_t v93 = (int *)(v88 + 4 * v85);
          *uint64_t v93 = v81;
          uint64_t v83 = v93 + 1;
          while (end != begin)
          {
            int v94 = *--end;
            *--uint64_t v93 = v94;
          }
          v143.__begin_ = v93;
          v143.__end_ = v83;
          v143.__end_cap_.__value_ = (int *)(v88 + 4 * v89);
          if (begin) {
            operator delete(begin);
          }
        }
        else
        {
          *v143.__end_ = v81;
          uint64_t v83 = end + 1;
        }
        v143.__end_ = v83;
        goto LABEL_133;
      }
      if (v26 != 4)
      {
        uint64_t v34 = &v143;
        VVector<float>::getTopNIndices((uint64_t *)(*v142 + 8 * v18), *(_DWORD *)(a1 + 340), &v143, *(_DWORD *)(*(void *)(a1 + 496) + 8));
        goto LABEL_134;
      }
      int v27 = (char *)v147;
      float v148 = (char *)v147;
      uint64_t v28 = *(void *)(a1 + 536);
      uint64_t v29 = *(void *)(a1 + 544) - v28;
      if (v29)
      {
        unint64_t v30 = v29 / 24;
        if (v30 <= 1) {
          unint64_t v30 = 1;
        }
        uint64_t v31 = (void *)(v28 + 8);
        do
        {
          void *v31 = *(v31 - 1);
          v31 += 3;
          --v30;
        }
        while (v30);
      }
      unint64_t v33 = *a7;
      int v32 = a7[1];
      uint64_t v34 = (std::vector<int> *)(a1 + 352);
      unint64_t v35 = (char *)v32 - (char *)*a7;
      if (v32 != *a7)
      {
        if (v35 < 5)
        {
          float v148 = v27;
          if (v35 == 4)
          {
            uint64_t v36 = operator new(4uLL);
            int v37 = *v33;
            *uint64_t v36 = *v33;
            goto LABEL_85;
          }
        }
        else
        {
          uint64_t v36 = operator new(4uLL);
          int v37 = *v33;
          *uint64_t v36 = *v33;
          if (v33[1] != -1) {
            exitFramework(900);
          }
          if (v35 >= 9)
          {
            uint64_t v140 = v36;
            unint64_t v38 = 2;
            do
            {
              uint64_t v39 = v17;
              int v40 = *v33;
              int v41 = v33[v38];
              uint64_t v42 = *(void *)(a1 + 496);
              if (v40 == -1)
              {
                if (*(void *)(v42 + 104)) {
                  int v47 = *(_DWORD *)(v42 + 112);
                }
                else {
                  int v47 = *(_DWORD *)(v42 + 96);
                }
                if (v41 >= v47)
                {
                  fprintf((FILE *)*MEMORY[0x1E4F143D8], "WARNING: Invalid (too large) Montreal id (%d) - IGNORE\n", v41);
                  uint64_t v17 = v39;
                }
                else
                {
                  int WordClass = OutputCluster::getWordClass(*(OutputCluster **)(a1 + 496), v41);
                  int WordClassIndex = OutputCluster::getWordClassIndex((OutputCluster *)v42, v41);
                  uint64_t v57 = *(void *)(a1 + 536) + 24 * WordClass;
                  BOOL v59 = (_DWORD **)(v57 + 8);
                  uint64_t v58 = *(_DWORD **)(v57 + 8);
                  unint64_t v60 = *(void *)(v57 + 16);
                  if ((unint64_t)v58 >= v60)
                  {
                    int v139 = WordClassIndex;
                    uint64_t v64 = *(_DWORD **)v57;
                    uint64_t v65 = ((uint64_t)v58 - *(void *)v57) >> 2;
                    unint64_t v66 = v65 + 1;
                    if ((unint64_t)(v65 + 1) >> 62) {
                      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v67 = v60 - (void)v64;
                    if (v67 >> 1 > v66) {
                      unint64_t v66 = v67 >> 1;
                    }
                    BOOL v52 = (unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL;
                    unint64_t v68 = 0x3FFFFFFFFFFFFFFFLL;
                    if (!v52) {
                      unint64_t v68 = v66;
                    }
                    if (v68)
                    {
                      unint64_t v68 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v68);
                      uint64_t v58 = *v59;
                      uint64_t v64 = *(_DWORD **)v57;
                    }
                    else
                    {
                      uint64_t v69 = 0;
                    }
                    uint64_t v70 = (_DWORD *)(v68 + 4 * v65);
                    *uint64_t v70 = v139;
                    uint64_t v61 = v70 + 1;
                    while (v58 != v64)
                    {
                      int v71 = *--v58;
                      *--uint64_t v70 = v71;
                    }
                    *(void *)uint64_t v57 = v70;
                    *BOOL v59 = v61;
                    *(void *)(v57 + 16) = v68 + 4 * v69;
                    if (v64) {
                      operator delete(v64);
                    }
                  }
                  else
                  {
                    _DWORD *v58 = WordClassIndex;
                    uint64_t v61 = v58 + 1;
                  }
                  uint64_t v17 = v39;
                  *BOOL v59 = v61;
                }
              }
              else
              {
                int v43 = OutputCluster::getWordClassIndex(*(OutputCluster **)(a1 + 496), v41);
                int v44 = v43;
                int v45 = v148;
                if ((unint64_t)v148 >= v149)
                {
                  uint64_t v48 = (char *)v147;
                  uint64_t v49 = (v148 - (unsigned char *)v147) >> 2;
                  unint64_t v50 = v49 + 1;
                  if ((unint64_t)(v49 + 1) >> 62) {
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v17 = v39;
                  uint64_t v51 = v149 - (void)v147;
                  if ((uint64_t)(v149 - (void)v147) >> 1 > v50) {
                    unint64_t v50 = v51 >> 1;
                  }
                  BOOL v52 = (unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL;
                  unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
                  if (!v52) {
                    unint64_t v53 = v50;
                  }
                  if (v53)
                  {
                    unint64_t v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v53);
                    uint64_t v48 = (char *)v147;
                    int v45 = v148;
                  }
                  else
                  {
                    uint64_t v54 = 0;
                  }
                  int v62 = (char *)(v53 + 4 * v49);
                  *(_DWORD *)int v62 = v44;
                  uint64_t v46 = v62 + 4;
                  while (v45 != v48)
                  {
                    int v63 = *((_DWORD *)v45 - 1);
                    v45 -= 4;
                    *((_DWORD *)v62 - 1) = v63;
                    v62 -= 4;
                  }
                  float v147 = v62;
                  float v148 = v46;
                  unint64_t v149 = v53 + 4 * v54;
                  if (v48) {
                    operator delete(v48);
                  }
                }
                else
                {
                  *(_DWORD *)float v148 = v43;
                  uint64_t v46 = v45 + 4;
                  uint64_t v17 = v39;
                }
                float v148 = v46;
              }
              ++v38;
              unint64_t v33 = *a7;
            }
            while (v38 < a7[1] - *a7);
            uint64_t v36 = v140;
            int v37 = *v140;
          }
LABEL_85:
          v141 = v36;
          if (v37 == -1)
          {
            uint64_t v95 = *(void *)(a1 + 544);
            uint64_t v96 = *(void *)(a1 + 536);
            if (v95 != v96)
            {
              unint64_t v97 = 0;
              do
              {
                uint64_t v98 = *(void *)(v96 + 24 * v97);
                uint64_t v99 = *(void *)(v96 + 24 * v97++ + 8);
                if (v99 != v98)
                {
                  std::vector<int>::pointer v100 = v143.__end_;
                  if (v143.__end_ >= v143.__end_cap_.__value_)
                  {
                    std::vector<int>::pointer v102 = v143.__begin_;
                    int64_t v103 = v143.__end_ - v143.__begin_;
                    unint64_t v104 = v103 + 1;
                    if ((unint64_t)(v103 + 1) >> 62) {
                      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                    }
                    int64_t v105 = (char *)v143.__end_cap_.__value_ - (char *)v143.__begin_;
                    if (((char *)v143.__end_cap_.__value_ - (char *)v143.__begin_) >> 1 > v104) {
                      unint64_t v104 = v105 >> 1;
                    }
                    BOOL v52 = (unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL;
                    unint64_t v106 = 0x3FFFFFFFFFFFFFFFLL;
                    if (!v52) {
                      unint64_t v106 = v104;
                    }
                    if (v106)
                    {
                      unint64_t v106 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v106);
                      std::vector<int>::pointer v102 = v143.__begin_;
                      std::vector<int>::pointer v100 = v143.__end_;
                    }
                    else
                    {
                      uint64_t v107 = 0;
                    }
                    uint64_t v108 = (int *)(v106 + 4 * v103);
                    int *v108 = v97;
                    uint64_t v101 = v108 + 1;
                    while (v100 != v102)
                    {
                      int v109 = *--v100;
                      *--uint64_t v108 = v109;
                    }
                    v143.__begin_ = v108;
                    v143.__end_ = v101;
                    v143.__end_cap_.__value_ = (int *)(v106 + 4 * v107);
                    if (v102) {
                      operator delete(v102);
                    }
                  }
                  else
                  {
                    *v143.__end_ = v97;
                    uint64_t v101 = v100 + 1;
                  }
                  v143.__end_ = v101;
                  uint64_t v95 = *(void *)(a1 + 544);
                  uint64_t v96 = *(void *)(a1 + 536);
                }
              }
              while (0xAAAAAAAAAAAAAAABLL * ((v95 - v96) >> 3) > v97);
            }
          }
          else
          {
            if (v37 < 0
              || (int v90 = v37 + 1,
                  (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 3 <= (unint64_t)(v37 + 1)))
            {
              exitFramework(45);
            }
            std::vector<int>::pointer v91 = v143.__end_;
            if (v143.__end_ >= v143.__end_cap_.__value_)
            {
              std::vector<int>::pointer v110 = v143.__begin_;
              int64_t v111 = v143.__end_ - v143.__begin_;
              unint64_t v112 = v111 + 1;
              if ((unint64_t)(v111 + 1) >> 62) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              int64_t v113 = (char *)v143.__end_cap_.__value_ - (char *)v143.__begin_;
              if (((char *)v143.__end_cap_.__value_ - (char *)v143.__begin_) >> 1 > v112) {
                unint64_t v112 = v113 >> 1;
              }
              BOOL v52 = (unint64_t)v113 >= 0x7FFFFFFFFFFFFFFCLL;
              unint64_t v114 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v52) {
                unint64_t v114 = v112;
              }
              if (v114)
              {
                unint64_t v114 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v114);
                std::vector<int>::pointer v110 = v143.__begin_;
                std::vector<int>::pointer v91 = v143.__end_;
              }
              else
              {
                uint64_t v115 = 0;
              }
              char v116 = (int *)(v114 + 4 * v111);
              int *v116 = v90;
              uint64_t v92 = v116 + 1;
              while (v91 != v110)
              {
                int v117 = *--v91;
                *--char v116 = v117;
              }
              v143.__begin_ = v116;
              v143.__end_ = v92;
              v143.__end_cap_.__value_ = (int *)(v114 + 4 * v115);
              if (v110) {
                operator delete(v110);
              }
            }
            else
            {
              *v143.__end_ = v90;
              uint64_t v92 = v91 + 1;
            }
            v143.__end_ = v92;
          }
          operator delete(v141);
        }
LABEL_133:
        uint64_t v34 = &v143;
      }
LABEL_134:
      bzero(*(void **)(*(void *)(a1 + 104) + 8 * v18), 4 * *(int *)(a1 + 348));
      std::vector<int>::pointer v118 = v34->__begin_;
      if (v34->__end_ != v34->__begin_)
      {
        unint64_t v119 = 0;
        while (1)
        {
          uint64_t v120 = v118[v119];
          uint64_t v121 = *(void *)(a1 + 304);
          if (!*(_DWORD *)(v121 + 4 * v120))
          {
            *(_DWORD *)(v121 + 4 * v120) = 1;
            uint64_t v122 = *(void *)(*(void *)(a1 + 80) + 8 * v120);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v122 + 256))(v122, v17);
          }
          uint64_t v123 = a7[1] != *a7 && **a7 == -1 ? (void **)(*(void *)(a1 + 536) + 24 * (int)v120 - 24) : &v147;
          uint64_t v124 = *(void *)(*(void *)(a1 + 80) + 8 * v120);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v124 + 224))(v124, a2, a3, v18, v123);
          uint64_t v125 = *(void *)(*(void *)(a1 + 80) + 8 * v120);
          long long v126 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v125 + 32))(v125);
          uint64_t v127 = *(void *)(a1 + 256);
          if ((*(_DWORD *)(a1 + 328) - 3) >= 2) {
            break;
          }
          uint64_t v128 = *(unsigned int *)(v127 + 4 * v120);
          if ((int)v128 >= 1)
          {
            float v129 = *(float *)(*(void *)(*v142 + 8 * v18) + 4 * ((int)v120 - 1));
            char v130 = *(float **)(*v126 + 8 * v18);
            uint64_t v131 = v128;
            do
            {
              *char v130 = v129 * *v130;
              ++v130;
              --v131;
            }
            while (v131);
LABEL_148:
            if ((int)v128 >= 1)
            {
              uint64_t v132 = *(int **)(*(void *)(*(void *)(a1 + 496) + 120) + 24 * ((int)v120 - 1));
              long long v133 = *(_DWORD **)(*v126 + 8 * v18);
              uint64_t v134 = *(void *)(*(void *)(a1 + 104) + 8 * v18);
              do
              {
                uint64_t v136 = *v132++;
                uint64_t v135 = v136;
                LODWORD(v136) = *v133++;
                *(_DWORD *)(v134 + 4 * v135) = v136;
                --v128;
              }
              while (v128);
            }
          }
          ++v119;
          std::vector<int>::pointer v118 = v34->__begin_;
          if (v119 >= v34->__end_ - v34->__begin_) {
            goto LABEL_152;
          }
        }
        uint64_t v128 = *(unsigned int *)(v127 + 4 * v120);
        goto LABEL_148;
      }
LABEL_152:
      uint64_t v137 = *(void *)(a1 + 104);
      vDSP_Length v138 = *(int *)(a1 + 348);
      float __C = 0.0;
      vDSP_sve(*(const float **)(v137 + 8 * v18), 1, &__C, v138);
      if (v143.__begin_)
      {
        v143.__end_ = v143.__begin_;
        operator delete(v143.__begin_);
      }
      if (__p)
      {
        v145 = __p;
        operator delete(__p);
      }
      if (++v18 == v17) {
        goto LABEL_157;
      }
    }
    int v79 = *(_DWORD *)(*(void *)(a1 + 400) + 4 * v18);
    uint64_t v80 = (int *)operator new(4uLL);
    *uint64_t v80 = v79;
    v143.__end_ = v80 + 1;
    v143.__end_cap_.__value_ = v80 + 1;
    v143.__begin_ = v80;
    goto LABEL_133;
  }
LABEL_157:
  if (v147)
  {
    float v148 = (char *)v147;
    operator delete(v147);
  }
}

void sub_1929204F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  if (a21) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void ParallelSelector<short>::backward(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 8 * a5;
    uint64_t v9 = a5;
    do
    {
      uint64_t v10 = *(void *)(a1 + 504);
      int v11 = (*(uint64_t (**)(void))(***(void ***)(a1 + 80) + 264))(**(void **)(a1 + 80));
      bzero(*(void **)(v10 + v7), 4 * v11);
      v7 += 8;
    }
    while (v8 != v7);
    uint64_t v12 = 0;
    for (uint64_t i = 0; i != v9; ++i)
    {
      uint64_t v14 = *(int *)(a1 + 332);
      uint64_t v15 = *(void *)(*(void *)(a1 + 80) + 8 * v14);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v15 + 248))(v15, *(void *)(a1 + 472) + 24 * (int)v14, a3, i, *(unsigned int *)(*(void *)(a1 + 256) + 4 * v14), *(unsigned int *)(*(void *)(a1 + 256) + 4 * v14));
      uint64_t v16 = *(void *)(*(void *)(a1 + 80) + 8 * v14);
      uint64_t v17 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 48))(v16);
      memset(v31, 0, sizeof(v31));
      std::vector<VVector<float>>::__init_with_size[abi:ne180100]<VVector<float>*,VVector<float>*>(v31, *v17, v17[1], v17[1] - *v17);
      uint64_t v18 = *(void *)(a1 + 504);
      uint64_t v19 = (char *)v31[0];
      int v20 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 80) + 8 * v14) + 264))();
      float32_t v21 = VVector<float>::add<float>((float32x4_t **)(v18 + v12), (float32x4_t **)&v19[v12], v20);
      uint64_t v22 = *(int *)(*(void *)(a1 + 400) + 4 * i);
      uint64_t v23 = *(void *)(*(void *)(a1 + 80) + 8 * v22);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, float32_t))(*(void *)v23 + 248))(v23, *(void *)(a1 + 472) + 24 * *(int *)(a1 + 336), a3, i, *(unsigned int *)(a1 + 344), *(unsigned int *)(*(void *)(a1 + 256) + 4 * v22), v21);
      uint64_t v24 = *(void *)(*(void *)(a1 + 80) + 8 * v22);
      uint64_t v25 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(void *)v24 + 48))(v24);
      memset(v30, 0, sizeof(v30));
      std::vector<VVector<float>>::__init_with_size[abi:ne180100]<VVector<float>*,VVector<float>*>(v30, *v25, v25[1], v25[1] - *v25);
      uint64_t v26 = *(void *)(a1 + 504);
      int v27 = (char *)v30[0];
      uint64_t v28 = *(void *)(*(void *)(a1 + 80) + 8 * v22);
      int v29 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 264))(v28);
      VVector<float>::add<float>((float32x4_t **)(v26 + v12), (float32x4_t **)&v27[v12], v29);
      if (v27) {
        operator delete(v27);
      }
      if (v19) {
        operator delete(v19);
      }
      v12 += 8;
    }
  }
}

void sub_19292084C(_Unwind_Exception *exception_object)
{
  if (v2) {
    operator delete(v2);
  }
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void ParallelSelector<short>::update()
{
}

uint64_t ParallelSelector<short>::setPredictionMode(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(result + 528) = a2;
  uint64_t v2 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 8 * v5) + 280))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 80);
    }
    while (v5 < (*(void *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t ParallelSelector<short>::noutputs(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  if ((unint64_t)(*(void *)(a1 + 88) - v1) < 9) {
    return 0;
  }
  LODWORD(v3) = 0;
  unint64_t v4 = 1;
  do
  {
    uint64_t v3 = (*(unsigned int (**)(void))(**(void **)(v1 + 8 * v4) + 272))(*(void *)(v1 + 8 * v4))
       + v3;
    ++v4;
    uint64_t v1 = *(void *)(a1 + 80);
  }
  while (v4 < (*(void *)(a1 + 88) - v1) >> 3);
  return v3;
}

void ParallelSelector<short>::rearrangeTargets(uint64_t a1, void *a2, void *a3, int a4, char a5)
{
  int v28 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1);
  unint64_t v26 = (a4 - 1);
  if (a4 >= 1)
  {
    unint64_t v9 = 0;
    uint64_t v10 = a4;
    do
    {
      if (a5)
      {
        if (a3[1] != *a3)
        {
          if (v9 >= v26) {
            int v11 = 2;
          }
          else {
            int v11 = **(_DWORD **)(*a3 + 24 * v9 + 24);
          }
          goto LABEL_21;
        }
        if (v28 >= 1)
        {
          int v11 = 0;
          uint64_t v15 = 0;
          float v17 = 1.1755e-38;
          do
          {
            uint64_t v16 = *(void *)(*a2 + 8 * v9);
            if (*(float *)(v16 + 4 * v15) > v17)
            {
              int v11 = v15;
              float v17 = *(float *)(v16 + 4 * v15);
            }
            ++v15;
          }
          while (v28 != v15);
          goto LABEL_21;
        }
      }
      else if (v28 >= 1)
      {
        int v11 = 0;
        uint64_t v12 = 0;
        float v14 = 1.1755e-38;
        do
        {
          uint64_t v13 = *(void *)(*a2 + 8 * v9);
          if (*(float *)(v13 + 4 * v12) > v14)
          {
            int v11 = v12;
            float v14 = *(float *)(v13 + 4 * v12);
          }
          ++v12;
        }
        while (v28 != v12);
        goto LABEL_21;
      }
      int v11 = 0;
LABEL_21:
      uint64_t v18 = *(void *)(a1 + 376);
      *(_DWORD *)(v18 + 4 * v9) = v11;
      uint64_t v19 = *(OutputCluster **)(a1 + 496);
      *(_DWORD *)(*(void *)(a1 + 400) + 4 * v9) = OutputCluster::getWordClass(v19, v11) + 1;
      *(_DWORD *)(*(void *)(a1 + 424) + 4 * v9) = OutputCluster::getWordClassIndex(v19, *(_DWORD *)(v18 + 4 * v9));
      uint64_t v20 = **(void **)(a1 + 200);
      int v21 = (*(uint64_t (**)(void))(***(void ***)(a1 + 80) + 272))();
      bzero(*(void **)(v20 + 8 * v9), 4 * v21);
      uint64_t v22 = *(void **)(a1 + 200);
      uint64_t v23 = *(int *)(*(void *)(a1 + 400) + 4 * v9);
      *(_DWORD *)(*(void *)(*v22 + 8 * v9) + 4 * v23 - 4) = 1065353216;
      uint64_t v24 = v22[3 * (int)v23];
      int v25 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 80) + 8 * v23) + 272))();
      bzero(*(void **)(v24 + 8 * v9), 4 * v25);
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 200) + 24 * *(int *)(*(void *)(a1 + 400) + 4 * v9))
                            + 8 * v9)
                + 4 * *(int *)(*(void *)(a1 + 424) + 4 * v9)) = 1065353216;
      ++v9;
    }
    while (v9 != v10);
  }
}

void ParallelSelector<short>::cleanupAllBuffers(void *a1)
{
  uint64_t v3 = a1[35];
  uint64_t v2 = a1[36];
  if (v2 == v3)
  {
    uint64_t v3 = a1[36];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      unint64_t v5 = *(void **)(v3 + 8 * v4);
      if (*v5)
      {
        MEMORY[0x192FF1690](*v5, 0x1000C8052888210);
        void *v5 = 0;
        uint64_t v3 = a1[35];
        uint64_t v2 = a1[36];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  a1[36] = v3;
  uint64_t v6 = a1[10];
  if (a1[11] != v6)
  {
    unint64_t v7 = 0;
    do
    {
      (*(void (**)(void))(**(void **)(v6 + 8 * v7) + 208))(*(void *)(v6 + 8 * v7));
      ++v7;
      uint64_t v6 = a1[10];
    }
    while (v7 < (a1[11] - v6) >> 3);
  }
  a1[14] = a1[13];
  a1[57] = a1[56];
  a1[64] = a1[63];
  std::vector<std::vector<int>>::__clear[abi:ne180100](a1 + 25);
  std::vector<std::vector<int>>::__clear[abi:ne180100](a1 + 59);
  a1[39] = a1[38];
}

void ParallelSelector<short>::allocAllBuffers(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  if (*(void *)(a1 + 88) != v2)
  {
    unint64_t v3 = 0;
    do
    {
      (*(void (**)(void))(**(void **)(v2 + 8 * v3) + 200))(*(void *)(v2 + 8 * v3));
      ++v3;
      uint64_t v2 = *(void *)(a1 + 80);
    }
    while (v3 < (*(void *)(a1 + 88) - v2) >> 3);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "From allocAllBuffers");
  ParallelSelector<float>::init(a1);
  if (v5 < 0) {
    operator delete(__p);
  }
}

void sub_192920DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ParallelSelector<short>::resetForNewBatch(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v1)
  {
    uint64_t v2 = result;
    unint64_t v3 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 160))(*(void *)(v1 + 8 * v3));
      ++v3;
      uint64_t v1 = *(void *)(v2 + 80);
    }
    while (v3 < (*(void *)(v2 + 88) - v1) >> 3);
  }
  return result;
}

uint64_t ParallelSelector<short>::normalizeModel(uint64_t result, float a2)
{
  uint64_t v2 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, float))(**(void **)(v2 + 8 * v5) + 120))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 80);
    }
    while (v5 < (*(void *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

uint64_t ParallelSelector<short>::clipModel(uint64_t result, float a2)
{
  uint64_t v2 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v2)
  {
    uint64_t v4 = result;
    unint64_t v5 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, float))(**(void **)(v2 + 8 * v5) + 112))(*(void *)(v2 + 8 * v5), a2);
      ++v5;
      uint64_t v2 = *(void *)(v4 + 80);
    }
    while (v5 < (*(void *)(v4 + 88) - v2) >> 3);
  }
  return result;
}

void *ParallelSelector<short>::applyGradient(void *result, void *lpsrc)
{
  uint64_t v2 = (uint64_t)result;
  if (lpsrc)
  {
    uint64_t v3 = (uint64_t)result;
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(v2 + 80);
  if (*(void *)(v2 + 88) != v4)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t result = (void *)(*(uint64_t (**)(void, void))(**(void **)(v4 + 8 * v5) + 104))(*(void *)(v4 + 8 * v5), *(void *)(*(void *)(v3 + 80) + 8 * v5));
      ++v5;
      uint64_t v4 = *(void *)(v2 + 80);
    }
    while (v5 < (*(void *)(v2 + 88) - v4) >> 3);
  }
  return result;
}

void *ParallelSelector<short>::addGradient(void *result, void *lpsrc)
{
  uint64_t v2 = (uint64_t)result;
  if (lpsrc)
  {
    uint64_t v3 = (uint64_t)result;
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(v2 + 80);
  if (*(void *)(v2 + 88) != v4)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t result = (void *)(*(uint64_t (**)(void, void))(**(void **)(v4 + 8 * v5) + 96))(*(void *)(v4 + 8 * v5), *(void *)(*(void *)(v3 + 80) + 8 * v5));
      ++v5;
      uint64_t v4 = *(void *)(v2 + 80);
    }
    while (v5 < (*(void *)(v2 + 88) - v4) >> 3);
  }
  return result;
}

void *ParallelSelector<short>::compareModels(void *result, void *lpsrc, void *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = (uint64_t)result;
  if (lpsrc)
  {
    uint64_t v5 = (uint64_t)result;
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v5 = 0;
  if (a3)
  {
LABEL_3:
    uint64_t v3 = result;
  }
LABEL_4:
  uint64_t v6 = *(void *)(v4 + 80);
  if (*(void *)(v4 + 88) != v6)
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t result = (void *)(*(uint64_t (**)(void, void, void))(**(void **)(v6 + 8 * v7) + 88))(*(void *)(v6 + 8 * v7), *(void *)(*(void *)(v5 + 80) + 8 * v7), *(void *)(v3[10] + 8 * v7));
      ++v7;
      uint64_t v6 = *(void *)(v4 + 80);
    }
    while (v7 < (*(void *)(v4 + 88) - v6) >> 3);
  }
  return result;
}

void *ParallelSelector<short>::subtractModels(void *result, void *lpsrc, void *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = (uint64_t)result;
  if (lpsrc)
  {
    uint64_t v5 = (uint64_t)result;
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v5 = 0;
  if (a3)
  {
LABEL_3:
    uint64_t v3 = result;
  }
LABEL_4:
  uint64_t v6 = *(void *)(v4 + 80);
  if (*(void *)(v4 + 88) != v6)
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t result = (void *)(*(uint64_t (**)(void, void, void))(**(void **)(v6 + 8 * v7) + 80))(*(void *)(v6 + 8 * v7), *(void *)(*(void *)(v5 + 80) + 8 * v7), *(void *)(v3[10] + 8 * v7));
      ++v7;
      uint64_t v6 = *(void *)(v4 + 80);
    }
    while (v7 < (*(void *)(v4 + 88) - v6) >> 3);
  }
  return result;
}

uint64_t ParallelSelector<short>::write(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v5)
  {
    uint64_t v10 = result;
    unint64_t v11 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(v5 + 8 * v11) + 72))(*(void *)(v5 + 8 * v11), a2, a3, a4, a5);
      ++v11;
      uint64_t v5 = *(void *)(v10 + 80);
    }
    while (v11 < (*(void *)(v10 + 88) - v5) >> 3);
  }
  return result;
}

uint64_t ParallelSelector<short>::read(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 80);
  if (*(void *)(result + 88) != v4)
  {
    uint64_t v8 = result;
    unint64_t v9 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v4 + 8 * v9) + 64))(*(void *)(v4 + 8 * v9), a2, a3, a4);
      ++v9;
      uint64_t v4 = *(void *)(v8 + 80);
    }
    while (v9 < (*(void *)(v8 + 88) - v4) >> 3);
  }
  return result;
}

uint64_t ParallelSelector<short>::weightsAreNaN(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  if (*(void *)(a1 + 88) == v1) {
    return 0;
  }
  unint64_t v3 = 0;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v1 + 8 * v3) + 56))(*(void *)(v1 + 8 * v3));
    if (result) {
      break;
    }
    ++v3;
    uint64_t v1 = *(void *)(a1 + 80);
  }
  while (v3 < (*(void *)(a1 + 88) - v1) >> 3);
  return result;
}

uint64_t ParallelSelector<short>::inputDeltas(uint64_t a1)
{
  return a1 + 504;
}

uint64_t ParallelSelector<short>::deltas(uint64_t a1)
{
  return a1 + 448;
}

uint64_t ParallelSelector<short>::outputs(uint64_t a1)
{
  return a1 + 104;
}

void BatchNormalization<short>::~BatchNormalization(void *a1)
{
  BatchNormalization<short>::~BatchNormalization(a1);

  JUMPOUT(0x192FF16B0);
}

void *BatchNormalization<short>::~BatchNormalization(void *a1)
{
  *a1 = &unk_1EE3214C8;
  uint64_t v4 = a1 + 36;
  uint64_t v2 = (void *)a1[36];
  unint64_t v3 = (void *)v4[1];
  if (v3 == v2)
  {
    uint64_t v2 = v3;
    if (v3)
    {
LABEL_7:
      a1[37] = v2;
      operator delete(v2);
    }
  }
  else
  {
    unint64_t v5 = 0;
    do
    {
      if (*((void *)v2 + v5))
      {
        MEMORY[0x192FF1690](*((void *)v2 + v5), 0x1000C8052888210);
        uint64_t v2 = (void *)a1[36];
        unint64_t v3 = (void *)a1[37];
      }
      ++v5;
    }
    while (v5 < ((unsigned char *)v3 - (unsigned char *)v2) >> 3);
    if (v2) {
      goto LABEL_7;
    }
  }
  PTMutex::~PTMutex((PTMutex *)(a1 + 27));
  uint64_t v6 = (void *)a1[24];
  if (v6)
  {
    a1[25] = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)a1[21];
  if (v7)
  {
    a1[22] = v7;
    operator delete(v7);
  }
  *a1 = &unk_1EE3182B8;
  uint64_t v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

void BatchNormalization<short>::log2Probability()
{
}

void BatchNormalization<short>::computeError()
{
}

void *BatchNormalization<short>::setMaster(void *a1, void *lpsrc)
{
  if (!result) {
    __cxa_bad_cast();
  }
  a1[18] = result[18];
  a1[19] = result[19];
  a1[16] = result[16];
  a1[17] = result[17];
  return result;
}

int *BatchNormalization<short>::forward(int *result, void *a2, uint64_t a3, int a4)
{
  uint64_t v4 = a4 & 0xFFFFFF;
  if ((a4 & 0xFFFFFF) != 0)
  {
    uint64_t v6 = result;
    uint64_t v7 = 0;
    do
    {
      memmove(*(void **)(*((void *)v6 + 21) + 8 * v7), *(const void **)(*a2 + 8 * v7), 4 * v6[11]);
      int v8 = v6[11];
      unint64_t v9 = *(const void **)(*((void *)v6 + 21) + 8 * v7);
      if (v8 >= 1)
      {
        float v10 = *((float *)v6 + 12);
        unint64_t v11 = (float *)*((void *)v6 + 16);
        uint64_t v12 = (float *)*((void *)v6 + 17);
        uint64_t v13 = *(float **)(*((void *)v6 + 21) + 8 * v7);
        uint64_t v14 = v6[11];
        uint64_t v15 = (float *)*((void *)v6 + 18);
        uint64_t v16 = (float *)*((void *)v6 + 19);
        do
        {
          float v17 = *v11++;
          float v18 = v17;
          float v19 = *v12++;
          float v20 = sqrtf(v10 + v19);
          float v21 = *v15++;
          float v22 = v21;
          float v23 = *v16++;
          *uint64_t v13 = v23 + (float)((float)((float)(*v13 - v18) / v20) * v22);
          ++v13;
          --v14;
        }
        while (v14);
      }
      uint64_t result = (int *)memmove(*(void **)(*((void *)v6 + 24) + 8 * v7++), v9, 4 * v8);
    }
    while (v7 != v4);
  }
  return result;
}

void BatchNormalization<short>::backward()
{
}

uint64_t BatchNormalization<short>::noutputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t BatchNormalization<short>::ninputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t BatchNormalization<short>::cleanupAllBuffers(uint64_t result)
{
  uint64_t v1 = (void *)result;
  uint64_t v3 = *(void *)(result + 288);
  uint64_t v2 = *(void *)(result + 296);
  if (v2 == v3)
  {
    uint64_t v3 = *(void *)(result + 296);
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t result = *(void *)(v3 + 8 * v4);
      if (result)
      {
        uint64_t result = MEMORY[0x192FF1690](result, 0x1000C8052888210);
        uint64_t v3 = v1[36];
        uint64_t v2 = v1[37];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  v1[37] = v3;
  v1[22] = v1[21];
  v1[25] = v1[24];
  return result;
}

void BatchNormalization<short>::allocAllBuffers(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "BatchNormalization, from allocAll");
  std::vector<VVector<float>>::resize((char **)(a1 + 168), maxFeatureVectors);
  std::vector<VVector<float>>::resize((char **)(a1 + 192), maxFeatureVectors);
  if (!*(unsigned char *)(a1 + 161)) {
    operator new[]();
  }
  if (maxFeatureVectors >= 1) {
    operator new[]();
  }
  if (v3 < 0) {
    operator delete(__p);
  }
}

void sub_192921F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float **BatchNormalization<short>::write(uint64_t a1, FILE *__stream, int *a3, uint64_t a4, unsigned int a5)
{
  int __ptr = *(_DWORD *)(a1 + 44);
  fwrite(&__ptr, 4uLL, 1uLL, __stream);
  *a3 += 4;
  VVector<float>::write((float **)(a1 + 128), __stream, a3, 16, a5, *(_DWORD *)(a1 + 44));
  VVector<float>::write((float **)(a1 + 136), __stream, a3, 16, a5, *(_DWORD *)(a1 + 44));
  VVector<float>::write((float **)(a1 + 144), __stream, a3, 16, a5, *(_DWORD *)(a1 + 44));
  int v9 = *(_DWORD *)(a1 + 44);

  return VVector<float>::write((float **)(a1 + 152), __stream, a3, 16, a5, v9);
}

uint64_t BatchNormalization<short>::read(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(int *)(a2 + 72);
  uint64_t v7 = (int *)(*(void *)a2 + v6);
  if ((unint64_t)v7 <= *(void *)a2 + *(void *)(a2 + 8) - 4)
  {
    int v8 = *v7;
    *(_DWORD *)(a2 + 72) = v6 + 4;
  }
  else
  {
    int v8 = 0;
  }
  if (*(_DWORD *)(a1 + 44) != v8) {
    exitFramework(3);
  }
  VVector<float>::read((signed __int8 **)(a1 + 128), a2, *a3, *(unsigned __int8 *)(a1 + 161), (signed __int8 **)0x10, v8);
  VVector<float>::read((signed __int8 **)(a1 + 136), a2, *a3, *(unsigned __int8 *)(a1 + 161), (signed __int8 **)0x10, *(_DWORD *)(a1 + 44));
  VVector<float>::read((signed __int8 **)(a1 + 144), a2, *a3, *(unsigned __int8 *)(a1 + 161), (signed __int8 **)0x10, *(_DWORD *)(a1 + 44));
  int v9 = *a3;
  int v10 = *(unsigned __int8 *)(a1 + 161);
  int v11 = *(_DWORD *)(a1 + 44);

  return VVector<float>::read((signed __int8 **)(a1 + 152), a2, v9, v10, (signed __int8 **)0x10, v11);
}

uint64_t BatchNormalization<short>::weightsAreNaN()
{
  return 0;
}

void BatchNormalization<short>::inputDeltas()
{
}

void BatchNormalization<short>::deltas()
{
}

uint64_t BatchNormalization<short>::outputs(uint64_t a1)
{
  return a1 + 192;
}

uint64_t BatchNormalization<short>::inputs(uint64_t a1)
{
  return a1 + 168;
}

void BatchNormalization<short>::targets()
{
}

void GRU<short>::init()
{
}

void sub_192924928(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  SparseMatrix<float>::~SparseMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void MMatrix<short>::MMatrix()
{
}

void VVector<short>::VVector()
{
}

void GRU<short>::~GRU(uint64_t a1)
{
  GRU<short>::~GRU(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t GRU<short>::~GRU(uint64_t a1)
{
  *(void *)a1 = &unk_1EE322848;
  GRU<short>::cleanupAllBuffers((void *)a1);
  uint64_t v2 = *(void **)(a1 + 2064);
  if (v2)
  {
    *(void *)(a1 + 2072) = v2;
    operator delete(v2);
  }
  char v3 = *(void **)(a1 + 2040);
  if (v3)
  {
    *(void *)(a1 + 2048) = v3;
    operator delete(v3);
  }
  PTMutex::~PTMutex((PTMutex *)(a1 + 1960));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1888));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1816));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1744));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1672));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1600));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1528));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1456));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1384));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1312));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1240));
  SparseMatrix<float>::~SparseMatrix(a1 + 1000);
  SparseMatrix<float>::~SparseMatrix(a1 + 880);
  SparseMatrix<float>::~SparseMatrix(a1 + 760);
  unint64_t v4 = *(void **)(a1 + 728);
  if (v4)
  {
    *(void *)(a1 + 736) = v4;
    operator delete(v4);
  }
  unint64_t v5 = *(void **)(a1 + 704);
  if (v5)
  {
    *(void *)(a1 + 712) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 680);
  if (v6)
  {
    *(void *)(a1 + 688) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 656);
  if (v7)
  {
    *(void *)(a1 + 664) = v7;
    operator delete(v7);
  }
  int v8 = *(void **)(a1 + 632);
  if (v8)
  {
    *(void *)(a1 + 640) = v8;
    operator delete(v8);
  }
  int v9 = *(void **)(a1 + 608);
  if (v9)
  {
    *(void *)(a1 + 616) = v9;
    operator delete(v9);
  }
  int v10 = *(void **)(a1 + 544);
  if (v10)
  {
    *(void *)(a1 + 552) = v10;
    operator delete(v10);
  }
  int v11 = *(void **)(a1 + 520);
  if (v11)
  {
    *(void *)(a1 + 528) = v11;
    operator delete(v11);
  }
  uint64_t v12 = *(void **)(a1 + 496);
  if (v12)
  {
    *(void *)(a1 + 504) = v12;
    operator delete(v12);
  }
  uint64_t v13 = *(void **)(a1 + 472);
  if (v13)
  {
    *(void *)(a1 + 480) = v13;
    operator delete(v13);
  }
  uint64_t v14 = *(void **)(a1 + 448);
  if (v14)
  {
    *(void *)(a1 + 456) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void **)(a1 + 424);
  if (v15)
  {
    *(void *)(a1 + 432) = v15;
    operator delete(v15);
  }
  uint64_t v24 = (void **)(a1 + 208);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v24);
  uint64_t v16 = *(void **)(a1 + 184);
  if (v16)
  {
    *(void *)(a1 + 192) = v16;
    operator delete(v16);
  }
  float v17 = *(void **)(a1 + 160);
  if (v17)
  {
    *(void *)(a1 + 168) = v17;
    operator delete(v17);
  }
  float v18 = *(void **)(a1 + 136);
  if (v18)
  {
    *(void *)(a1 + 144) = v18;
    operator delete(v18);
  }
  float v19 = *(void **)(a1 + 112);
  if (v19)
  {
    *(void *)(a1 + 120) = v19;
    operator delete(v19);
  }
  float v20 = *(void **)(a1 + 88);
  if (v20)
  {
    *(void *)(a1 + 96) = v20;
    operator delete(v20);
  }
  float v21 = *(void **)(a1 + 64);
  if (v21)
  {
    *(void *)(a1 + 72) = v21;
    operator delete(v21);
  }
  *(void *)a1 = &unk_1EE3182B8;
  float v22 = *(void **)(a1 + 8);
  if (v22)
  {
    *(void *)(a1 + 16) = v22;
    operator delete(v22);
  }
  return a1;
}

uint64_t GRU<short>::cleanupAllBuffers(void *a1)
{
  uint64_t v2 = a1[256];
  uint64_t v3 = a1[255];
  if (v2 == v3)
  {
    uint64_t v3 = a1[256];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v3 + 8 * v4);
      if (v5)
      {
        MEMORY[0x192FF1690](v5, 0x1000C8052888210);
        uint64_t v2 = a1[256];
        uint64_t v3 = a1[255];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  uint64_t v6 = a1[259];
  uint64_t v7 = a1[258];
  if (v6 == v7)
  {
    uint64_t v7 = a1[259];
  }
  else
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(v7 + 8 * v8);
      if (v9)
      {
        MEMORY[0x192FF1690](v9, 0x1000C80BDFB0063);
        uint64_t v6 = a1[259];
        uint64_t v7 = a1[258];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
    uint64_t v3 = a1[255];
  }
  a1[256] = v3;
  a1[259] = v7;
  SparseMatrix<float>::cleanupAllBuffers(a1 + 95);
  SparseMatrix<float>::cleanupAllBuffers(a1 + 125);

  return SparseMatrix<float>::cleanupAllBuffers(a1 + 110);
}

void GRU<short>::log2Probability()
{
}

void GRU<short>::computeError()
{
}

void GRU<short>::updateFrom(uint64_t a1, void *lpsrc)
{
  if (!*(_DWORD *)(a1 + 2036))
  {
    exitFramework(34);
  }
  exitFramework(1);
}

char *GRU<short>::setMaster(uint64_t a1, void *lpsrc)
{
  if (*(_DWORD *)(a1 + 2036) != 1) {
    exitFramework(1);
  }
  if (!result) {
    __cxa_bad_cast();
  }
  *(void *)(a1 + 328) = result + 232;
  *(void *)(a1 + 336) = result + 240;
  *(void *)(a1 + 344) = result + 248;
  *(void *)(a1 + 352) = result + 256;
  *(void *)(a1 + 360) = result + 264;
  *(void *)(a1 + 368) = result + 272;
  *(void *)(a1 + 376) = result + 280;
  *(void *)(a1 + 384) = result + 288;
  *(void *)(a1 + 392) = result + 296;
  *(void *)(a1 + 400) = result + 304;
  *(void *)(a1 + 408) = result + 312;
  *(void *)(a1 + 416) = result + 320;
  return result;
}

uint64_t GRU<short>::reverseBackward(unsigned char *a1)
{
  a1[2088] = 1;
  uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 296))(a1);
  a1[2088] = 0;
  return result;
}

uint64_t GRU<short>::reverseForward(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  a1[2088] = 1;
  {
    uint64_t v13 = a6;
    uint64_t v12 = a5;
    unsigned int v11 = a4;
    uint64_t v9 = a2;
    uint64_t v10 = a3;
    a2 = v9;
    a3 = v10;
    a4 = v11;
    a5 = v12;
    a6 = v13;
    if (v8)
    {
      GRU<short>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy = 0;
      unk_1E9307B10 = 0;
      qword_1E9307B18 = 0;
      __cxa_atexit((void (*)(void *))std::vector<int>::~vector[abi:ne180100], &GRU<short>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy, &dword_1920CB000);
      a2 = v9;
      a3 = v10;
      a4 = v11;
      a5 = v12;
      a6 = v13;
    }
  }
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 304))(a1, a2, a3, a4, a5, a6, &GRU<short>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy);
  a1[2088] = 0;
  return result;
}

void GRU<short>::forward(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5)
{
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  if (a3[1] == *a3 || *(int *)(a1 + 56) < 1) {
    int v107 = 0;
  }
  else {
    int v107 = (**(uint64_t (***)(uint64_t))a1)(a1);
  }
  uint64_t v8 = *(void *)(a1 + 2096);
  if (!v8 || (float v9 = *(float *)(v8 + 604), v9 <= 0.0)) {
    float v9 = 50.0;
  }
  std::string __p = 0;
  long long v122 = 0uLL;
  i2s(&v120);
  uint64_t v10 = std::string::insert(&v120, 0, "GRU Forward W_z[");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v124.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  uint64_t v12 = std::string::append(&v124, "] WGZ:");
  uint64_t v13 = (void *)v12->__r_.__value_.__r.__words[0];
  v123[0] = (void *)v12->__r_.__value_.__l.__size_;
  *(void **)((char *)v123 + 7) = *(void **)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
  char v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v122) < 0) {
    operator delete(__p);
  }
  std::string __p = v13;
  *(void **)&long long v122 = v123[0];
  *(void **)((char *)&v122 + 7) = *(void **)((char *)v123 + 7);
  HIBYTE(v122) = v14;
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v124.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v120.__r_.__value_.__l.__data_);
  }
  if (v122 >= 0) {
    p_p = (char *)&__p;
  }
  else {
    p_p = (char *)__p;
  }
  MMatrix<short>::print(*(__int16 ***)(a1 + 328), p_p, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 10);
  i2s(&v120);
  uint64_t v16 = std::string::insert(&v120, 0, "GRU Forward W_r[");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v124.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  float v18 = std::string::append(&v124, "] WGR:");
  float v19 = (void *)v18->__r_.__value_.__r.__words[0];
  v123[0] = (void *)v18->__r_.__value_.__l.__size_;
  *(void **)((char *)v123 + 7) = *(void **)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
  char v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v122) < 0) {
    operator delete(__p);
  }
  std::string __p = v19;
  *(void **)&long long v122 = v123[0];
  *(void **)((char *)&v122 + 7) = *(void **)((char *)v123 + 7);
  HIBYTE(v122) = v20;
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v124.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v120.__r_.__value_.__l.__data_);
  }
  if (v122 >= 0) {
    float v21 = (char *)&__p;
  }
  else {
    float v21 = (char *)__p;
  }
  MMatrix<short>::print(*(__int16 ***)(a1 + 336), v21, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 10);
  i2s(&v120);
  float v22 = std::string::insert(&v120, 0, "GRU Forward W_o[");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v124.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  uint64_t v24 = std::string::append(&v124, "] WGO:");
  int v25 = (void *)v24->__r_.__value_.__r.__words[0];
  v123[0] = (void *)v24->__r_.__value_.__l.__size_;
  *(void **)((char *)v123 + 7) = *(void **)((char *)&v24->__r_.__value_.__r.__words[1] + 7);
  char v26 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v122) < 0) {
    operator delete(__p);
  }
  std::string __p = v25;
  *(void **)&long long v122 = v123[0];
  *(void **)((char *)&v122 + 7) = *(void **)((char *)v123 + 7);
  HIBYTE(v122) = v26;
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v124.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v120.__r_.__value_.__l.__data_);
  }
  if (v122 >= 0) {
    int v27 = (char *)&__p;
  }
  else {
    int v27 = (char *)__p;
  }
  MMatrix<short>::print(*(__int16 ***)(a1 + 344), v27, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 10);
  i2s(&v120);
  int v28 = std::string::insert(&v120, 0, "GRU Forward R_z[");
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v124.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  unint64_t v30 = std::string::append(&v124, "] RGZ:");
  uint64_t v31 = (void *)v30->__r_.__value_.__r.__words[0];
  v123[0] = (void *)v30->__r_.__value_.__l.__size_;
  *(void **)((char *)v123 + 7) = *(void **)((char *)&v30->__r_.__value_.__r.__words[1] + 7);
  char v32 = HIBYTE(v30->__r_.__value_.__r.__words[2]);
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v122) < 0) {
    operator delete(__p);
  }
  std::string __p = v31;
  *(void **)&long long v122 = v123[0];
  *(void **)((char *)&v122 + 7) = *(void **)((char *)v123 + 7);
  HIBYTE(v122) = v32;
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v124.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v120.__r_.__value_.__l.__data_);
  }
  if (v122 >= 0) {
    unint64_t v33 = (char *)&__p;
  }
  else {
    unint64_t v33 = (char *)__p;
  }
  MMatrix<short>::print(*(__int16 ***)(a1 + 352), v33, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 10);
  i2s(&v120);
  uint64_t v34 = std::string::insert(&v120, 0, "GRU Forward R_r[");
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v124.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  uint64_t v36 = std::string::append(&v124, "] RGR:");
  int v37 = (void *)v36->__r_.__value_.__r.__words[0];
  v123[0] = (void *)v36->__r_.__value_.__l.__size_;
  *(void **)((char *)v123 + 7) = *(void **)((char *)&v36->__r_.__value_.__r.__words[1] + 7);
  char v38 = HIBYTE(v36->__r_.__value_.__r.__words[2]);
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v122) < 0) {
    operator delete(__p);
  }
  std::string __p = v37;
  *(void **)&long long v122 = v123[0];
  *(void **)((char *)&v122 + 7) = *(void **)((char *)v123 + 7);
  HIBYTE(v122) = v38;
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v124.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v120.__r_.__value_.__l.__data_);
  }
  if (v122 >= 0) {
    uint64_t v39 = (char *)&__p;
  }
  else {
    uint64_t v39 = (char *)__p;
  }
  MMatrix<short>::print(*(__int16 ***)(a1 + 360), v39, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 10);
  i2s(&v120);
  int v40 = std::string::insert(&v120, 0, "GRU Forward R_o[");
  long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v124.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  uint64_t v42 = std::string::append(&v124, "] RGO:");
  int v43 = (void *)v42->__r_.__value_.__r.__words[0];
  v123[0] = (void *)v42->__r_.__value_.__l.__size_;
  *(void **)((char *)v123 + 7) = *(void **)((char *)&v42->__r_.__value_.__r.__words[1] + 7);
  char v44 = HIBYTE(v42->__r_.__value_.__r.__words[2]);
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v122) < 0) {
    operator delete(__p);
  }
  std::string __p = v43;
  *(void **)&long long v122 = v123[0];
  *(void **)((char *)&v122 + 7) = *(void **)((char *)v123 + 7);
  HIBYTE(v122) = v44;
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v124.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v120.__r_.__value_.__l.__data_);
  }
  if (v122 >= 0) {
    int v45 = (char *)&__p;
  }
  else {
    int v45 = (char *)__p;
  }
  MMatrix<short>::print(*(__int16 ***)(a1 + 368), v45, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), 10);
  uint64_t v46 = *(void *)(a1 + 2096);
  if (v46 && *(unsigned char *)(v46 + 244))
  {
    i2s(&v120);
    int v47 = std::string::insert(&v120, 0, "GRU Forward B_z[");
    long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v124.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    uint64_t v49 = std::string::append(&v124, "] :");
    unint64_t v50 = (void *)v49->__r_.__value_.__r.__words[0];
    v123[0] = (void *)v49->__r_.__value_.__l.__size_;
    *(void **)((char *)v123 + 7) = *(void **)((char *)&v49->__r_.__value_.__r.__words[1] + 7);
    char v51 = HIBYTE(v49->__r_.__value_.__r.__words[2]);
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v122) < 0) {
      operator delete(__p);
    }
    std::string __p = v50;
    *(void **)&long long v122 = v123[0];
    *(void **)((char *)&v122 + 7) = *(void **)((char *)v123 + 7);
    HIBYTE(v122) = v51;
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v124.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v120.__r_.__value_.__l.__data_);
    }
    if (v122 >= 0) {
      BOOL v52 = (char *)&__p;
    }
    else {
      BOOL v52 = (char *)__p;
    }
    VVector<short>::print(*(__int16 ***)(a1 + 376), v52, *(_DWORD *)(a1 + 52));
    i2s(&v120);
    unint64_t v53 = std::string::insert(&v120, 0, "GRU Forward B_r[");
    long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    v124.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    uint64_t v55 = std::string::append(&v124, "] :");
    BOOL v56 = (void *)v55->__r_.__value_.__r.__words[0];
    v123[0] = (void *)v55->__r_.__value_.__l.__size_;
    *(void **)((char *)v123 + 7) = *(void **)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
    char v57 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v122) < 0) {
      operator delete(__p);
    }
    std::string __p = v56;
    *(void **)&long long v122 = v123[0];
    *(void **)((char *)&v122 + 7) = *(void **)((char *)v123 + 7);
    HIBYTE(v122) = v57;
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v124.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v120.__r_.__value_.__l.__data_);
    }
    if (v122 >= 0) {
      uint64_t v58 = (char *)&__p;
    }
    else {
      uint64_t v58 = (char *)__p;
    }
    VVector<short>::print(*(__int16 ***)(a1 + 384), v58, *(_DWORD *)(a1 + 52));
    i2s(&v120);
    BOOL v59 = std::string::insert(&v120, 0, "GRU Forward B_o[");
    long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
    v124.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v60;
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    uint64_t v61 = std::string::append(&v124, "] :");
    int v62 = (void *)v61->__r_.__value_.__r.__words[0];
    v123[0] = (void *)v61->__r_.__value_.__l.__size_;
    *(void **)((char *)v123 + 7) = *(void **)((char *)&v61->__r_.__value_.__r.__words[1] + 7);
    char v63 = HIBYTE(v61->__r_.__value_.__r.__words[2]);
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v122) < 0) {
      operator delete(__p);
    }
    std::string __p = v62;
    *(void **)&long long v122 = v123[0];
    *(void **)((char *)&v122 + 7) = *(void **)((char *)v123 + 7);
    HIBYTE(v122) = v63;
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v124.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v120.__r_.__value_.__l.__data_);
    }
    if (v122 >= 0) {
      uint64_t v64 = (char *)&__p;
    }
    else {
      uint64_t v64 = (char *)__p;
    }
    VVector<short>::print(*(__int16 ***)(a1 + 392), v64, *(_DWORD *)(a1 + 52));
  }
  unsigned int v65 = a5 != 0;
  if ((a4 & 0xFFFFFFu) > v65)
  {
    float v66 = -v9;
    if (*(unsigned char *)(a1 + 2088)) {
      int v67 = (a4 & 0xFFFFFF) + ~v65;
    }
    else {
      int v67 = a5 != 0;
    }
    if (*(unsigned char *)(a1 + 2088)) {
      int v68 = 1;
    }
    else {
      int v68 = -1;
    }
    if (*(unsigned char *)(a1 + 2088)) {
      BOOL v69 = v67 < (a4 & 0xFFFFFF) - 1;
    }
    else {
      BOOL v69 = v67 > 0;
    }
    uint64_t v70 = v67;
    memmove(*(void **)(*(void *)(a1 + 64) + 8 * v67), *(const void **)(*a2 + 8 * v67), 4 * *(int *)(a1 + 44));
    if (*(unsigned char *)(a1 + 40)) {
      *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8 * v67) + 4 * *(int *)(a1 + 48) - 4) = 1065353216;
    }
    VVector<float>::print((float **)(*(void *)(a1 + 112) + 8 * (v67 + v68)), "GRU output t-1 : ", *(_DWORD *)(a1 + 52));
    VVector<float>::print((float **)(*(void *)(a1 + 64) + 8 * v67), "GRU input t: ", *(_DWORD *)(a1 + 44));
    if (v107)
    {
      int v71 = *(unsigned __int8 *)(a1 + 40);
      int v72 = *(_DWORD *)(a1 + 48);
      uint64_t v73 = *(_DWORD **)(*(void *)(a1 + 208) + 24 * v67);
      _DWORD *v73 = **(_DWORD **)(*a3 + 24 * v67);
      if (v71) {
        v73[1] = v72 - 1;
      }
    }
    bzero(*(void **)(*(void *)(a1 + 424) + 8 * v67), 4 * *(int *)(a1 + 52));
    bzero(*(void **)(*(void *)(a1 + 448) + 8 * v67), 4 * *(int *)(a1 + 52));
    bzero(*(void **)(*(void *)(a1 + 472) + 8 * v67), 4 * *(int *)(a1 + 52));
    uint64_t v74 = *(void *)(a1 + 2096);
    if (v74)
    {
      if (!*(unsigned char *)(v74 + 20))
      {
        int v103 = *(_DWORD *)(v74 + 40);
        if ((v103 == 4 || v103 == 2) && *(_DWORD *)(v74 + 44) == 3)
        {
          uint64_t v104 = *(void *)(a1 + 208) + 24 * v67;
          memset(&v120, 0, sizeof(v120));
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v120, *(const void **)v104, *(void *)(v104 + 8), (uint64_t)(*(void *)(v104 + 8) - *(void *)v104) >> 2);
          if (!*(void *)(a1 + 600)) {
            operator new[]();
          }
          VVector<float>::internalMul();
        }
      }
    }
    sprintf((char *)&v124, "GRU[t=%d] input/source forwardNew1() vec ", v67);
    VVector<float>::print((float **)(*(void *)(a1 + 64) + 8 * v67), (char *)&v124, *(_DWORD *)(a1 + 48));
    uint64_t v75 = *(void *)(a1 + 424);
    uint64_t v76 = *(void *)(a1 + 64);
    uint64_t v77 = *(uint64_t **)(a1 + 328);
    uint64_t v78 = *(void *)(a1 + 208) + 24 * (int)v70;
    memset(v123, 0, sizeof(v123));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v123, *(const void **)v78, *(void *)(v78 + 8), (uint64_t)(*(void *)(v78 + 8) - *(void *)v78) >> 2);
    GRU<short>::computeXTimesWSparseOrDense(a1, v107, (float32x4_t **)(v75 + 8 * v70), v76 + 8 * v70, v77, v123[0], (uint64_t)v123[1], *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
    if (v123[0])
    {
      v123[1] = v123[0];
      operator delete(v123[0]);
    }
    uint64_t v79 = *(void *)(a1 + 2096);
    std::string::basic_string[abi:ne180100]<0>(&v118, "gzx");
    if (!v79 || !*(unsigned char *)(v79 + 244))
    {
      if (v119 < 0) {
        operator delete(v118);
      }
      if (v69) {
        VVector<float>::internalMul();
      }
      uint64_t v80 = *(void *)(a1 + 424);
      int v81 = *(_DWORD *)(a1 + 52);
      float v82 = *(float **)(v80 + 8 * v70);
      if (v81 >= 1)
      {
        uint64_t v83 = *(unsigned int *)(a1 + 52);
        do
        {
          float v84 = -v9;
          if (*v82 < v66 || (float v84 = v9, *v82 > v9)) {
            *float v82 = v84;
          }
          ++v82;
          --v83;
        }
        while (v83);
        float v82 = *(float **)(v80 + 8 * v70);
      }
      VVector<float>::applyForwardActivation((float **)(*(void *)(a1 + 496) + 8 * v70), v82, v81, *(_DWORD *)(a1 + 568));
      uint64_t v85 = *(void *)(a1 + 448);
      uint64_t v86 = *(void *)(a1 + 64);
      int64_t v87 = *(uint64_t **)(a1 + 336);
      uint64_t v88 = *(void *)(a1 + 208) + 24 * (int)v70;
      char v116 = 0;
      uint64_t v117 = 0;
      uint64_t v115 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v115, *(const void **)v88, *(void *)(v88 + 8), (uint64_t)(*(void *)(v88 + 8) - *(void *)v88) >> 2);
      GRU<short>::computeXTimesWSparseOrDense(a1, v107, (float32x4_t **)(v85 + 8 * v70), v86 + 8 * v70, v87, v115, (uint64_t)v116, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
      if (v115)
      {
        char v116 = v115;
        operator delete(v115);
      }
      uint64_t v89 = *(void *)(a1 + 2096);
      std::string::basic_string[abi:ne180100]<0>(&v113, "grx");
      if (!v89 || !*(unsigned char *)(v89 + 244))
      {
        if (v114 < 0) {
          operator delete(v113);
        }
        uint64_t v90 = *(void *)(a1 + 448);
        int v91 = *(_DWORD *)(a1 + 52);
        uint64_t v92 = *(float **)(v90 + 8 * v70);
        if (v91 >= 1)
        {
          uint64_t v93 = *(unsigned int *)(a1 + 52);
          do
          {
            float v94 = -v9;
            if (*v92 < v66 || (float v94 = v9, *v92 > v9)) {
              *uint64_t v92 = v94;
            }
            ++v92;
            --v93;
          }
          while (v93);
          uint64_t v92 = *(float **)(v90 + 8 * v70);
        }
        VVector<float>::applyForwardActivation((float **)(*(void *)(a1 + 520) + 8 * v70), v92, v91, *(_DWORD *)(a1 + 572));
        bzero(*(void **)(*(void *)(a1 + 88) + 8 * v70), 4 * *(int *)(a1 + 52));
        uint64_t v95 = *(unsigned int *)(a1 + 52);
        if ((int)v95 >= 1)
        {
          uint64_t v96 = *(float **)(*(void *)(a1 + 88) + 8 * v70);
          do
          {
            float v97 = -v9;
            if (*v96 < v66 || (float v97 = v9, *v96 > v9)) {
              *uint64_t v96 = v97;
            }
            ++v96;
            --v95;
          }
          while (v95);
        }
        uint64_t v98 = *(void *)(a1 + 472);
        uint64_t v99 = *(void *)(a1 + 64);
        std::vector<int>::pointer v100 = *(uint64_t **)(a1 + 344);
        uint64_t v101 = *(void *)(a1 + 208) + 24 * (int)v70;
        int64_t v111 = 0;
        uint64_t v112 = 0;
        std::vector<int>::pointer v110 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v110, *(const void **)v101, *(void *)(v101 + 8), (uint64_t)(*(void *)(v101 + 8) - *(void *)v101) >> 2);
        GRU<short>::computeXTimesWSparseOrDense(a1, v107, (float32x4_t **)(v98 + 8 * v70), v99 + 8 * v70, v100, v110, (uint64_t)v111, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
        if (v110)
        {
          int64_t v111 = v110;
          operator delete(v110);
        }
        uint64_t v102 = *(void *)(a1 + 2096);
        std::string::basic_string[abi:ne180100]<0>(&v108, "gox");
        if (!v102 || !*(unsigned char *)(v102 + 244))
        {
          if (v109 < 0) {
            operator delete(v108);
          }
          VVector<float>::internalMul();
        }
        exitFramework(76);
      }
      exitFramework(76);
    }
    exitFramework(76);
  }
  if (SHIBYTE(v122) < 0) {
    operator delete(__p);
  }
}

void sub_1929265D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (__p) {
    operator delete(__p);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  _Unwind_Resume(a1);
}

void MMatrix<short>::print(__int16 **a1, char *a2, int a3, int a4, int a5)
{
  LODWORD(v5) = a5;
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  sprintf(__s, "0x%lx", *a1);
  std::string::basic_string[abi:ne180100]<0>(&v51, __s);
  float v9 = std::string::insert(&v51, 0, " (");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  long long v11 = std::string::append(&v44, ") ");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  int64_t v53 = v11->__r_.__value_.__r.__words[2];
  long long v52 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (a4 * a3 >= (int)v5) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = (a4 * a3);
  }
  if ((int)v5 <= 0) {
    goto LABEL_12;
  }
  uint64_t v13 = *a1;
  LOBYTE(v14) = 1;
  uint64_t v15 = v5;
  do
  {
    __int16 v16 = *v13++;
    int v14 = ((unsigned __int16)(v16 + 1) < 3u) & v14;
    --v15;
  }
  while (v15);
  if (v14) {
LABEL_12:
  }
    long long v17 = "yes";
  else {
    long long v17 = "no";
  }
  std::string::basic_string[abi:ne180100]<0>(&v50, v17);
  float v18 = std::string::insert(&v50, 0, " (");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  char v20 = std::string::append(&v44, ") ");
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v44);
  std::string::basic_string[abi:ne180100]<0>(&v41, a2);
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v22 = &v51;
  }
  else {
    float v22 = (std::string *)v51.__r_.__value_.__r.__words[0];
  }
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v51.__r_.__value_.__l.__size_;
  }
  uint64_t v24 = std::string::append(&v41, (const std::string::value_type *)v22, size);
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (v53 >= 0) {
    char v26 = (const std::string::value_type *)&v52;
  }
  else {
    char v26 = (const std::string::value_type *)v52;
  }
  if (v53 >= 0) {
    std::string::size_type v27 = HIBYTE(v53);
  }
  else {
    std::string::size_type v27 = *((void *)&v52 + 1);
  }
  int v28 = std::string::append(&v42, v26, v27);
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  unint64_t v30 = std::string::append(&v43, "[");
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v32 = 0;
    uint64_t v33 = 2 * v5;
    do
    {
      memset(&v43, 0, sizeof(v43));
      std::ios_base::clear((std::ios_base *)((char *)&v44 + *(void *)(v44.__r_.__value_.__r.__words[0] - 24)), 0);
      *(void *)&v46[*(void *)(v44.__r_.__value_.__r.__words[2] - 24)] = 6;
      std::ostream::operator<<();
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v44, (uint64_t)&v43);
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v34 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v34 = v43.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v42, v34 + 1);
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v35 = &v42;
      }
      else {
        long long v35 = (std::string *)v42.__r_.__value_.__r.__words[0];
      }
      if (v34)
      {
        if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v36 = &v43;
        }
        else {
          uint64_t v36 = (std::string *)v43.__r_.__value_.__r.__words[0];
        }
        memmove(v35, v36, v34);
      }
      *(_WORD *)((char *)&v35->__r_.__value_.__l.__data_ + v34) = 32;
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v37 = &v42;
      }
      else {
        int v37 = (std::string *)v42.__r_.__value_.__r.__words[0];
      }
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v38 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v38 = v42.__r_.__value_.__l.__size_;
      }
      std::string::append(&v50, (const std::string::value_type *)v37, v38);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v43.__r_.__value_.__l.__data_);
      }
      v32 += 2;
    }
    while (v33 != v32);
  }
  std::string::append(&v50, " ]");
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  v44.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA408];
  std::string::size_type v39 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(std::string::size_type *)((char *)v44.__r_.__value_.__r.__words + *(void *)(v44.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v44.__r_.__value_.__r.__words[2] = v39;
  uint64_t v45 = MEMORY[0x1E4FBA470] + 16;
  if (v48 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x192FF15B0](&v49);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v53) < 0) {
    operator delete((void *)v52);
  }
}

void sub_192926CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a64 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a23);
  if (a71 < 0) {
    operator delete(a66);
  }
  if (*(char *)(v71 - 217) < 0) {
    operator delete(*(void **)(v71 - 240));
  }
  _Unwind_Resume(a1);
}

void VVector<short>::print(__int16 **a1, char *a2, int a3)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  sprintf(v66, "0x%lx", *a1);
  std::string::basic_string[abi:ne180100]<0>(v64, "() ");
  if (a3 <= 0) {
    goto LABEL_5;
  }
  uint64_t v6 = *a1;
  uint64_t v7 = a3;
  LOBYTE(v8) = 1;
  do
  {
    __int16 v9 = *v6++;
    int v8 = ((unsigned __int16)(v9 + 1) < 3u) & v8;
    --v7;
  }
  while (v7);
  if (v8) {
LABEL_5:
  }
    long long v10 = "inRange:yes";
  else {
    long long v10 = "inRange:no";
  }
  std::string::basic_string[abi:ne180100]<0>(&v48, v10);
  long long v11 = std::string::insert(&v48, 0, " (");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  uint64_t v13 = std::string::append(&v57, ") ");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  int64_t v63 = v13->__r_.__value_.__r.__words[2];
  long long v62 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v57);
  v55[0] = 0;
  v55[1] = 0;
  uint64_t v56 = 0;
  std::ostream::operator<<();
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v57, (uint64_t)v55);
  std::operator+<char>();
  uint64_t v15 = std::string::append(&v48, "] ");
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  int64_t v54 = v15->__r_.__value_.__r.__words[2];
  long long v53 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v48);
  std::string::basic_string[abi:ne180100]<0>(&v43, a2);
  if (v63 >= 0) {
    long long v17 = (const std::string::value_type *)&v62;
  }
  else {
    long long v17 = (const std::string::value_type *)v62;
  }
  if (v63 >= 0) {
    std::string::size_type v18 = HIBYTE(v63);
  }
  else {
    std::string::size_type v18 = *((void *)&v62 + 1);
  }
  long long v19 = std::string::append(&v43, v17, v18);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if ((v65 & 0x80u) == 0) {
    long long v21 = (const std::string::value_type *)v64;
  }
  else {
    long long v21 = (const std::string::value_type *)v64[0];
  }
  if ((v65 & 0x80u) == 0) {
    std::string::size_type v22 = v65;
  }
  else {
    std::string::size_type v22 = (std::string::size_type)v64[1];
  }
  long long v23 = std::string::append(&v44, v21, v22);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (v54 >= 0) {
    long long v25 = (const std::string::value_type *)&v53;
  }
  else {
    long long v25 = (const std::string::value_type *)v53;
  }
  if (v54 >= 0) {
    std::string::size_type v26 = HIBYTE(v54);
  }
  else {
    std::string::size_type v26 = *((void *)&v53 + 1);
  }
  std::string::size_type v27 = std::string::append(&v45, v25, v26);
  long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  long long v29 = std::string::append(&v46, "[ ");
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (a3 >= 1)
  {
    uint64_t v31 = 0;
    if (a3 >= 1000) {
      unsigned int v32 = 1000;
    }
    else {
      unsigned int v32 = a3;
    }
    uint64_t v33 = 2 * v32;
    do
    {
      memset(&v46, 0, sizeof(v46));
      std::ios_base::clear((std::ios_base *)((char *)&v48 + *(void *)(v48.__r_.__value_.__r.__words[0] - 24)), 0);
      std::ostream::operator<<();
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v48, (uint64_t)&v46);
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v46.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v45, size + 3);
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v35 = &v45;
      }
      else {
        long long v35 = (std::string *)v45.__r_.__value_.__r.__words[0];
      }
      if (size)
      {
        if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v36 = &v46;
        }
        else {
          uint64_t v36 = (std::string *)v46.__r_.__value_.__r.__words[0];
        }
        memmove(v35, v36, size);
      }
      *(_DWORD *)((char *)&v35->__r_.__value_.__l.__data_ + size) = 2108448;
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v37 = &v45;
      }
      else {
        int v37 = (std::string *)v45.__r_.__value_.__r.__words[0];
      }
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v38 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v38 = v45.__r_.__value_.__l.__size_;
      }
      std::string::append(&v47, (const std::string::value_type *)v37, v38);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v45.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }
      v31 += 2;
    }
    while (v33 != v31);
  }
  std::string::append(&v47, "]");
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  v48.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA408];
  std::string::size_type v39 = v48.__r_.__value_.__r.__words[0];
  std::string::size_type v40 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  std::string::size_type v41 = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + *(void *)(v48.__r_.__value_.__r.__words[0] - 24)) = v41;
  std::string::size_type v42 = v40;
  v48.__r_.__value_.__r.__words[2] = v40;
  uint64_t v49 = MEMORY[0x1E4FBA470] + 16;
  if (v51 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x192FF15B0](&v52);
  if (SHIBYTE(v54) < 0) {
    operator delete((void *)v53);
  }
  if (SHIBYTE(v56) < 0) {
    operator delete(v55[0]);
  }
  v57.__r_.__value_.__r.__words[0] = v39;
  *(std::string::size_type *)((char *)v57.__r_.__value_.__r.__words + *(void *)(v39 - 24)) = v41;
  v57.__r_.__value_.__r.__words[2] = v42;
  uint64_t v58 = MEMORY[0x1E4FBA470] + 16;
  if (v60 < 0) {
    operator delete(v59);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x192FF15B0](&v61);
  if (SHIBYTE(v63) < 0) {
    operator delete((void *)v62);
  }
  if ((char)v65 < 0) {
    operator delete(v64[0]);
  }
}

void sub_19292746C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a33);
  if (a72 < 0) {
    operator delete(a68);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a75);
  if (*(char *)(v75 - 233) < 0) {
    operator delete(*(void **)(v75 - 256));
  }
  if (*(char *)(v75 - 209) < 0) {
    operator delete(*(void **)(v75 - 232));
  }
  _Unwind_Resume(a1);
}

float32_t GRU<short>::computeXTimesWSparseOrDense(uint64_t a1, int a2, float32x4_t **a3, uint64_t a4, uint64_t *a5, const void *a6, uint64_t a7, int a8, int a9)
{
  long long v12 = (float **)(a1 + 584);
  if (!a2) {
    VVector<float>::internalMul();
  }
  std::string __p = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, a6, a7, (a7 - (uint64_t)a6) >> 2);
  VVector<float>::internalMul(v12, (int *)__p, v15, *a5, a8, a9);
  if (__p)
  {
    uint64_t v15 = (int *)__p;
    operator delete(__p);
  }
  return VVector<float>::add<float>(a3, (float32x4_t **)v12, a8);
}

void GRU<short>::backward(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5)
{
  int v57 = a5 - 1;
  if (a5 >= 1)
  {
    uint64_t v55 = (void **)(a1 + 1232);
    int v6 = a5 - 1;
    do
    {
      if (*(unsigned char *)(a1 + 2088)) {
        int v7 = v57 - v6;
      }
      else {
        int v7 = v6;
      }
      if (*(unsigned char *)(a1 + 2088)) {
        BOOL v8 = v7 < v57;
      }
      else {
        BOOL v8 = v7 > 0;
      }
      if (*(unsigned char *)(a1 + 2088)) {
        BOOL v9 = v7 > 0;
      }
      else {
        BOOL v9 = v7 < v57;
      }
      if (*(unsigned char *)(a1 + 2088)) {
        int v10 = v7 + 1;
      }
      else {
        int v10 = v7 - 1;
      }
      int v56 = v10;
      memmove(*(void **)(*(void *)(a1 + 632) + 8 * v7), *(const void **)(*a4 + 8 * v7), 4 * *(int *)(a1 + 52));
      if (v9)
      {
        bzero(*(void **)(a1 + 752), 4 * *(int *)(a1 + 52));
        VVector<float>::internalMul();
      }
      VVector<float>::applyPrimeDerivative((void **)(a1 + 1216), *(float **)(*(void *)(a1 + 472) + 8 * v7), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 576));
      VVector<float>::applyPrimeDerivative(v55, *(float **)(*(void *)(a1 + 448) + 8 * v7), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 572));
      VVector<float>::applyPrimeDerivative((void **)(a1 + 1224), *(float **)(*(void *)(a1 + 424) + 8 * v7), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 568));
      bzero(*(void **)(*(void *)(a1 + 656) + 8 * v7), 4 * *(int *)(a1 + 52));
      long long v11 = (float32x4_t **)(*(void *)(a1 + 656) + 8 * v7);
      int v12 = *(_DWORD *)(a1 + 52);
      if (v12 >= 1)
      {
        uint64_t v13 = *(float **)(*(void *)(a1 + 632) + 8 * v7);
        long long v14 = *(float **)(*(void *)(a1 + 496) + 8 * v7);
        uint64_t v15 = *v11;
        uint64_t v16 = *(unsigned int *)(a1 + 52);
        do
        {
          float v17 = *v13++;
          float v18 = v17;
          float v19 = *v14++;
          v15->f32[0] = v15->f32[0] + (float)(v18 * (float)(1.0 - v19));
          uint64_t v15 = (float32x4_t *)((char *)v15 + 4);
          --v16;
        }
        while (v16);
      }
      VVector<float>::mulV(v11, v11, (float32x4_t **)(a1 + 1216), v12);
      long long v20 = (void **)(*(void *)(a1 + 680) + 8 * v7);
      if (v8)
      {
        int v21 = *(_DWORD *)(a1 + 52);
        if (v21 >= 1)
        {
          std::string::size_type v22 = *(float **)(*(void *)(a1 + 112) + 8 * v56);
          long long v23 = *(float **)(*(void *)(a1 + 544) + 8 * v7);
          long long v24 = (float *)*v20;
          uint64_t v25 = *(unsigned int *)(a1 + 52);
          do
          {
            float v26 = *v22++;
            float v27 = v26;
            float v28 = *v23++;
            *v24++ = v27 - v28;
            --v25;
          }
          while (v25);
        }
      }
      else
      {
        memmove(*v20, *(const void **)(*(void *)(a1 + 544) + 8 * v7), 4 * *(int *)(a1 + 52));
        long long v20 = (void **)(*(void *)(a1 + 680) + 8 * v7);
        int v21 = *(_DWORD *)(a1 + 52);
        if (v21 >= 1)
        {
          long long v29 = (float *)*v20;
          uint64_t v30 = *(unsigned int *)(a1 + 52);
          do
          {
            float *v29 = -*v29;
            ++v29;
            --v30;
          }
          while (v30);
        }
      }
      VVector<float>::mulV((float32x4_t **)v20, (float32x4_t **)(*(void *)(a1 + 632) + 8 * v7), (float32x4_t **)v20, v21);
      uint64_t v31 = (float32x4_t **)(*(void *)(a1 + 680) + 8 * v7);
      VVector<float>::mulV(v31, v31, (float32x4_t **)(a1 + 1224), *(_DWORD *)(a1 + 52));
      if (v8) {
        VVector<float>::internalMul();
      }
      bzero(*(void **)(*(void *)(a1 + 704) + 8 * v7), 4 * *(int *)(a1 + 52));
      if (((**(uint64_t (***)(uint64_t, __n128))a1)(a1, v32) & 1) == 0)
      {
        bzero(*(void **)(*(void *)(a1 + 608) + 8 * v7), 4 * *(int *)(a1 + 48));
        VVector<float>::internalMul();
      }
    }
    while (v6-- > 0);
  }
  if (*(int *)(a1 + 56) > 0)
  {
    *(_DWORD *)(a1 + 776) = 0;
    *(_DWORD *)(a1 + 1016) = 0;
    *(_DWORD *)(a1 + 896) = 0;
  }
  if (a5 > 1)
  {
    int v34 = 1;
    int v35 = a5 - 2;
    do
    {
      if (*(unsigned char *)(a1 + 2088)) {
        int v36 = v35;
      }
      else {
        int v36 = v34;
      }
      if (*(unsigned char *)(a1 + 2088)) {
        int v37 = 1;
      }
      else {
        int v37 = -1;
      }
      int v38 = v36 + v37;
      if (*(unsigned char *)(a1 + 2088)) {
        int v39 = a5 - 2;
      }
      else {
        int v39 = 1;
      }
      BOOL v40 = v36 == v39;
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 680) + 8 * v36), (const float **)(*(void *)(a1 + 112) + 8 * v38), (void **)(a1 + 1152), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v40);
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 704) + 8 * v36), (const float **)(*(void *)(a1 + 112) + 8 * v38), (void **)(a1 + 1144), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v40);
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 656) + 8 * v36), (const float **)(*(void *)(a1 + 112) + 8 * v38), (void **)(a1 + 1160), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v40);
      ++v34;
      --v35;
    }
    while (v35 != -1);
  }
  if (a5 >= 1)
  {
    int v41 = 0;
    int v42 = v57;
    do
    {
      if (*(unsigned char *)(a1 + 2088)) {
        int v43 = v42;
      }
      else {
        int v43 = v41;
      }
      int v44 = v57;
      if (!*(unsigned char *)(a1 + 2088)) {
        int v44 = 0;
      }
      if (a3[1] == *a3 || *(int *)(a1 + 56) < 1)
      {
        BOOL v51 = v43 == v44;
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 704) + 8 * v43), (const float **)(*(void *)(a1 + 64) + 8 * v43), (void **)(a1 + 1120), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v51);
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 680) + 8 * v43), (const float **)(*(void *)(a1 + 64) + 8 * v43), (void **)(a1 + 1128), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v51);
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 656) + 8 * v43), (const float **)(*(void *)(a1 + 64) + 8 * v43), (void **)(a1 + 1136), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v51);
      }
      else
      {
        uint64_t v45 = *(void *)(a1 + 704);
        uint64_t v46 = *(void *)(a1 + 208) + 24 * v43;
        unsigned __int8 v65 = 0;
        uint64_t v66 = 0;
        std::string __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v46, *(void *)(v46 + 8), (uint64_t)(*(void *)(v46 + 8) - *(void *)v46) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 760, *(int **)(v45 + 8 * v43), (uint64_t)__p, *(_DWORD *)(a1 + 52));
        if (__p)
        {
          unsigned __int8 v65 = __p;
          operator delete(__p);
        }
        uint64_t v47 = *(void *)(a1 + 680);
        uint64_t v48 = *(void *)(a1 + 208) + 24 * v43;
        long long v62 = 0;
        uint64_t v63 = 0;
        uint64_t v61 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v61, *(const void **)v48, *(void *)(v48 + 8), (uint64_t)(*(void *)(v48 + 8) - *(void *)v48) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 880, *(int **)(v47 + 8 * v43), (uint64_t)v61, *(_DWORD *)(a1 + 52));
        if (v61)
        {
          long long v62 = v61;
          operator delete(v61);
        }
        uint64_t v49 = *(void *)(a1 + 656);
        uint64_t v50 = *(void *)(a1 + 208) + 24 * v43;
        BOOL v59 = 0;
        uint64_t v60 = 0;
        uint64_t v58 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v58, *(const void **)v50, *(void *)(v50 + 8), (uint64_t)(*(void *)(v50 + 8) - *(void *)v50) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 1000, *(int **)(v49 + 8 * v43), (uint64_t)v58, *(_DWORD *)(a1 + 52));
        if (v58)
        {
          BOOL v59 = v58;
          operator delete(v58);
        }
      }
      ++v41;
      --v42;
    }
    while (v42 != -1);
  }
}

uint64_t GRU<short>::update(uint64_t result, float a2)
{
  uint64_t v2 = result;
  int v3 = (int)a2;
  int v4 = *(_DWORD *)(result + 52);
  if (*(int *)(result + 56) < 1)
  {
    uint64_t v5 = (v4 * *(_DWORD *)(result + 48));
    if ((int)v5 >= 1)
    {
      int v6 = *(__int16 **)(result + 240);
      int v7 = *(float **)(result + 1120);
      uint64_t v8 = (v4 * *(_DWORD *)(result + 48));
      float v9 = (float)v3;
      do
      {
        float v10 = *v7++;
        *int v6 = (int)(float)((float)*v6 + (float)(v10 * v9));
        ++v6;
        --v8;
      }
      while (v8);
      long long v11 = *(__int16 **)(result + 248);
      int v12 = *(float **)(result + 1136);
      uint64_t v13 = v5;
      do
      {
        float v14 = *v12++;
        __int16 *v11 = (int)(float)((float)*v11 + (float)(v14 * v9));
        ++v11;
        --v13;
      }
      while (v13);
      uint64_t v15 = *(__int16 **)(result + 232);
      uint64_t v16 = *(float **)(result + 1128);
      do
      {
        float v17 = *v16++;
        __int16 *v15 = (int)(float)((float)*v15 + (float)(v17 * v9));
        ++v15;
        --v5;
      }
      while (v5);
    }
  }
  else
  {
    SparseMatrix<float>::add<short>(result + 760, v4, (float)v3);
    SparseMatrix<float>::add<short>(v2 + 1000, *(_DWORD *)(v2 + 52), (float)v3);
    uint64_t result = SparseMatrix<float>::add<short>(v2 + 880, *(_DWORD *)(v2 + 52), (float)v3);
  }
  if (v4)
  {
    uint64_t v18 = (v4 * v4);
    float v19 = *(__int16 **)(v2 + 264);
    long long v20 = *(float **)(v2 + 1144);
    float v21 = (float)v3;
    uint64_t v22 = v18;
    do
    {
      float v23 = *v20++;
      *float v19 = (int)(float)((float)*v19 + (float)(v23 * v21));
      ++v19;
      --v22;
    }
    while (v22);
    long long v24 = *(__int16 **)(v2 + 272);
    uint64_t v25 = *(float **)(v2 + 1160);
    uint64_t v26 = (v4 * v4);
    do
    {
      float v27 = *v25++;
      __int16 *v24 = (int)(float)((float)*v24 + (float)(v27 * v21));
      ++v24;
      --v26;
    }
    while (v26);
    float v28 = *(__int16 **)(v2 + 256);
    long long v29 = *(float **)(v2 + 1152);
    do
    {
      float v30 = *v29++;
      *float v28 = (int)(float)((float)*v28 + (float)(v30 * v21));
      ++v28;
      --v18;
    }
    while (v18);
  }
  return result;
}

uint64_t SparseMatrix<float>::add<short>(uint64_t result, int a2, float a3)
{
  uint64_t v3 = *(unsigned int *)(result + 16);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0;
    while (1)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = *(float **)(*(void *)(result + 24) + 8 * v4);
        uint64_t v6 = a2;
        do
        {
          float *v5 = *v5 * a3;
          ++v5;
          --v6;
        }
        while (v6);
      }
      if (++v4 == v3)
      {
        uint64_t v7 = *(void *)(result + 48);
        memset(v8, 0, sizeof(v8));
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v8, *(const void **)v7, *(void *)(v7 + 8), (uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 2);
        exitFramework(67);
      }
    }
  }
  return result;
}

void sub_192928240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t GRU<short>::noutputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t GRU<short>::ninputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

void GRU<short>::allocAllBuffers()
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "GRU alloc, from allocAll");
  GRU<short>::init();
}

void sub_1929282C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t GRU<short>::unsetSpecialBidir(uint64_t result)
{
  *(unsigned char *)(result + 42) = 0;
  return result;
}

uint64_t GRU<short>::setSpecialBidir(uint64_t result)
{
  *(unsigned char *)(result + 42) = 1;
  return result;
}

char *GRU<short>::getWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = **(void **)(a1 + 328);
  unsigned int v6 = *(_DWORD *)(a1 + 48);
  unsigned int v5 = *(_DWORD *)(a1 + 52);
  LODWORD(v7) = v5;
  double v8 = COERCE_DOUBLE(__PAIR64__(v6, v5));
  unint64_t v9 = *(void *)(a2 + 8);
  if (v9 >= *(void *)(a2 + 16))
  {
    float v10 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v4, COERCE_DOUBLE(__PAIR64__(v6, v5)));
    unsigned int v6 = *(_DWORD *)(a1 + 48);
    unsigned int v5 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v5;
    double v8 = COERCE_DOUBLE(__PAIR64__(v6, v5));
  }
  else
  {
    *(void *)unint64_t v9 = v4;
    float v10 = (char *)(v9 + 16);
    *(_DWORD *)(v9 + 8) = v5;
    *(_DWORD *)(v9 + 12) = v6;
  }
  *(void *)(a2 + 8) = v10;
  uint64_t v11 = **(void **)(a1 + 336);
  if ((unint64_t)v10 >= *(void *)(a2 + 16))
  {
    int v12 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v11, v8);
    unsigned int v6 = *(_DWORD *)(a1 + 48);
    unsigned int v5 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v5;
    double v8 = COERCE_DOUBLE(__PAIR64__(v6, v5));
  }
  else
  {
    *(void *)float v10 = v11;
    int v12 = v10 + 16;
    *((_DWORD *)v10 + 2) = v5;
    *((_DWORD *)v10 + 3) = v6;
  }
  *(void *)(a2 + 8) = v12;
  uint64_t v13 = **(void **)(a1 + 344);
  if ((unint64_t)v12 >= *(void *)(a2 + 16))
  {
    float v14 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v13, v8);
    unsigned int v5 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v5;
  }
  else
  {
    *(void *)int v12 = v13;
    float v14 = v12 + 16;
    *((_DWORD *)v12 + 2) = v5;
    *((_DWORD *)v12 + 3) = v6;
  }
  *(void *)(a2 + 8) = v14;
  uint64_t v15 = **(void **)(a1 + 352);
  HIDWORD(v7) = v5;
  if ((unint64_t)v14 >= *(void *)(a2 + 16))
  {
    uint64_t v16 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v15, v7);
    unsigned int v5 = *(_DWORD *)(a1 + 52);
    double v7 = COERCE_DOUBLE(vdup_n_s32(v5));
  }
  else
  {
    *(void *)float v14 = v15;
    uint64_t v16 = v14 + 16;
    *((_DWORD *)v14 + 2) = v5;
    *((_DWORD *)v14 + 3) = v5;
  }
  *(void *)(a2 + 8) = v16;
  uint64_t v17 = **(void **)(a1 + 360);
  if ((unint64_t)v16 >= *(void *)(a2 + 16))
  {
    uint64_t result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v17, v7);
    unsigned int v5 = *(_DWORD *)(a1 + 52);
    double v7 = COERCE_DOUBLE(vdup_n_s32(v5));
  }
  else
  {
    *(void *)uint64_t v16 = v17;
    uint64_t result = v16 + 16;
    *((_DWORD *)v16 + 2) = v5;
    *((_DWORD *)v16 + 3) = v5;
  }
  *(void *)(a2 + 8) = result;
  uint64_t v19 = **(void **)(a1 + 368);
  if ((unint64_t)result >= *(void *)(a2 + 16))
  {
    uint64_t result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v19, v7);
    long long v20 = result;
  }
  else
  {
    *(void *)uint64_t result = v19;
    long long v20 = result + 16;
    *((_DWORD *)result + 2) = v5;
    *((_DWORD *)result + 3) = v5;
  }
  *(void *)(a2 + 8) = v20;
  return result;
}

void GRU<short>::resetForNewBatch(void *a1)
{
  uint64_t v2 = a1[146];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v2 + 40))(v2, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v3 = a1[147];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v3 + 40))(v3, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v4 = a1[148];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v4 + 40))(v4, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = a1[149];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v5 + 40))(v5, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = a1[150];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v6 + 40))(v6, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = a1[151];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU before reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v7 + 40))(v7, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(void))(*(void *)a1[146] + 16))(a1[146]);
  (*(void (**)(void))(*(void *)a1[147] + 16))(a1[147]);
  (*(void (**)(void))(*(void *)a1[148] + 16))(a1[148]);
  (*(void (**)(void))(*(void *)a1[149] + 16))(a1[149]);
  (*(void (**)(void))(*(void *)a1[150] + 16))(a1[150]);
  (*(void (**)(void))(*(void *)a1[151] + 16))(a1[151]);
  uint64_t v8 = a1[146];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v8 + 40))(v8, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = a1[147];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v9 + 40))(v9, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v10 = a1[148];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v10 + 40))(v10, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v11 = a1[149];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v11 + 40))(v11, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v12 = a1[150];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v12 + 40))(v12, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v13 = a1[151];
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU AFTER reset ");
  (*(void (**)(uint64_t, void **))(*(void *)v13 + 40))(v13, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
}

void sub_192928970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void GRU<short>::clearState(uint64_t a1, void *a2, int *a3)
{
  uint64_t v5 = (int *)(*a2 + 16 * *a3);
  bzero(**((void ***)v5 + 1), 4 * *v5);
  uint64_t v6 = *a3 + 1;
  *a3 = v6;
  bzero(**(void ***)(*a2 + 16 * v6 + 8), 4 * *(int *)(*a2 + 16 * v6));
  ++*a3;
}

void *GRU<short>::restoreState(uint64_t a1, void *a2, int a3, int *a4)
{
  uint64_t v8 = *(void *)(a1 + 112);
  uint64_t v9 = *a4;
  *a4 = v9 + 1;
  memmove(*(void **)(v8 + 8 * a3), **(const void ***)(*a2 + 16 * v9 + 8), 4 * *(int *)(a1 + 52));
  uint64_t v10 = *(void *)(a1 + 88);
  uint64_t v11 = *a4;
  *a4 = v11 + 1;
  size_t v12 = 4 * *(int *)(a1 + 52);
  uint64_t v13 = *(void **)(v10 + 8 * a3);
  float v14 = **(const void ***)(*a2 + 16 * v11 + 8);

  return memmove(v13, v14, v12);
}

void *GRU<short>::saveState(uint64_t a1, uint64_t *a2, int a3, int *a4)
{
  uint64_t v8 = *(int *)(a1 + 52);
  uint64_t v9 = *a2;
  *(_DWORD *)(v9 + 16 * *a4) = v8;
  memmove(**(void ***)(v9 + 16 * *a4 + 8), *(const void **)(*(void *)(a1 + 112) + 8 * a3), 4 * v8);
  uint64_t v10 = *a4 + 1;
  *a4 = v10;
  uint64_t v11 = *(int *)(a1 + 52);
  uint64_t v12 = *a2;
  *(_DWORD *)(v12 + 16 * v10) = v11;
  uint64_t result = memmove(**(void ***)(v12 + 16 * *a4 + 8), *(const void **)(*(void *)(a1 + 88) + 8 * a3), 4 * v11);
  ++*a4;
  return result;
}

void GRU<short>::allocInitialState()
{
}

void sub_192928D80(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

uint64_t GRU<short>::normalizeModel(uint64_t result, float a2)
{
  int v2 = *(_DWORD *)(result + 52);
  uint64_t v3 = (*(_DWORD *)(result + 48) * v2);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = **(__int16 ***)(result + 336);
    uint64_t v5 = v4;
    uint64_t v6 = (*(_DWORD *)(result + 48) * v2);
    do
    {
      __int16 *v5 = (int)(float)((float)*v5 * a2);
      ++v5;
      --v6;
    }
    while (v6);
    uint64_t v7 = v3;
    do
    {
      *uint64_t v4 = (int)(float)((float)*v4 * a2);
      ++v4;
      --v7;
    }
    while (v7);
    uint64_t v8 = **(__int16 ***)(result + 344);
    do
    {
      *uint64_t v8 = (int)(float)((float)*v8 * a2);
      ++v8;
      --v3;
    }
    while (v3);
  }
  if (v2)
  {
    uint64_t v9 = (v2 * v2);
    uint64_t v10 = **(__int16 ***)(result + 360);
    uint64_t v11 = v9;
    do
    {
      __int16 *v10 = (int)(float)((float)*v10 * a2);
      ++v10;
      --v11;
    }
    while (v11);
    uint64_t v12 = **(__int16 ***)(result + 352);
    uint64_t v13 = v9;
    do
    {
      __int16 *v12 = (int)(float)((float)*v12 * a2);
      ++v12;
      --v13;
    }
    while (v13);
    float v14 = **(__int16 ***)(result + 368);
    do
    {
      __int16 *v14 = (int)(float)((float)*v14 * a2);
      ++v14;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t GRU<short>::clipModel(uint64_t result, float a2)
{
  float v2 = -a2;
  int v3 = *(_DWORD *)(result + 52);
  uint64_t v4 = (*(_DWORD *)(result + 48) * v3);
  if ((int)v4 >= 1)
  {
    uint64_t v5 = **(__int16 ***)(result + 336);
    uint64_t v6 = (*(_DWORD *)(result + 48) * v3);
    do
    {
      float v7 = (float)*v5;
      float v8 = -a2;
      if (v7 < v2 || (float v8 = a2, v7 > a2)) {
        __int16 *v5 = (int)v8;
      }
      ++v5;
      --v6;
    }
    while (v6);
    uint64_t v9 = **(__int16 ***)(result + 328);
    uint64_t v10 = v4;
    do
    {
      float v11 = (float)*v9;
      float v12 = -a2;
      if (v11 < v2 || (float v12 = a2, v11 > a2)) {
        *uint64_t v9 = (int)v12;
      }
      ++v9;
      --v10;
    }
    while (v10);
    uint64_t v13 = **(__int16 ***)(result + 344);
    do
    {
      float v14 = (float)*v13;
      float v15 = -a2;
      if (v14 < v2 || (float v15 = a2, v14 > a2)) {
        *uint64_t v13 = (int)v15;
      }
      ++v13;
      --v4;
    }
    while (v4);
  }
  if (v3)
  {
    uint64_t v16 = (v3 * v3);
    uint64_t v17 = **(__int16 ***)(result + 360);
    uint64_t v18 = v16;
    do
    {
      float v19 = (float)*v17;
      float v20 = -a2;
      if (v19 < v2 || (float v20 = a2, v19 > a2)) {
        *uint64_t v17 = (int)v20;
      }
      ++v17;
      --v18;
    }
    while (v18);
    float v21 = **(__int16 ***)(result + 352);
    uint64_t v22 = v16;
    do
    {
      float v23 = (float)*v21;
      float v24 = -a2;
      if (v23 < v2 || (float v24 = a2, v23 > a2)) {
        *float v21 = (int)v24;
      }
      ++v21;
      --v22;
    }
    while (v22);
    uint64_t v25 = **(__int16 ***)(result + 368);
    do
    {
      float v26 = (float)*v25;
      float v27 = -a2;
      if (v26 < v2 || (float v27 = a2, v26 > a2)) {
        *uint64_t v25 = (int)v27;
      }
      ++v25;
      --v16;
    }
    while (v16);
  }
  return result;
}

void GRU<short>::applyGradient(uint64_t a1, void *lpsrc)
{
  if (lpsrc) {
  (*(void (**)(void))(**(void **)(a1 + 1176) + 64))(*(void *)(a1 + 1176));
  }
  exitFramework(23);
}

void **GRU<short>::addGradient(uint64_t a1, void *lpsrc)
{
  if (lpsrc) {
  else
  }
    uint64_t result = 0;
  int v4 = *(_DWORD *)(a1 + 52);
  uint64_t v5 = (*(_DWORD *)(a1 + 48) * v4);
  if ((int)v5 >= 1)
  {
    uint64_t v6 = **(_WORD ***)(a1 + 336);
    float v7 = (__int16 *)*result[42];
    uint64_t v8 = (*(_DWORD *)(a1 + 48) * v4);
    do
    {
      __int16 v9 = *v7++;
      *v6++ += v9;
      --v8;
    }
    while (v8);
    uint64_t v10 = **(_WORD ***)(a1 + 328);
    float v11 = (__int16 *)*result[41];
    uint64_t v12 = v5;
    do
    {
      __int16 v13 = *v11++;
      *v10++ += v13;
      --v12;
    }
    while (v12);
    float v14 = **(_WORD ***)(a1 + 344);
    float v15 = (__int16 *)*result[43];
    do
    {
      __int16 v16 = *v15++;
      *v14++ += v16;
      --v5;
    }
    while (v5);
  }
  if (v4)
  {
    uint64_t v17 = (v4 * v4);
    uint64_t v18 = **(_WORD ***)(a1 + 360);
    float v19 = (__int16 *)*result[45];
    uint64_t v20 = v17;
    do
    {
      __int16 v21 = *v19++;
      *v18++ += v21;
      --v20;
    }
    while (v20);
    uint64_t v22 = **(_WORD ***)(a1 + 352);
    float v23 = (__int16 *)*result[44];
    uint64_t v24 = v17;
    do
    {
      __int16 v25 = *v23++;
      *v22++ += v25;
      --v24;
    }
    while (v24);
    float v26 = **(_WORD ***)(a1 + 368);
    float v27 = (__int16 *)*result[46];
    do
    {
      __int16 v28 = *v27++;
      *v26++ += v28;
      --v17;
    }
    while (v17);
  }
  return result;
}

void GRU<short>::compareModels(uint64_t a1, void *lpsrc, void **a3)
{
  int v3 = a3;
  if (lpsrc)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v5 = 0;
  if (a3) {
LABEL_3:
  }
LABEL_4:
  std::vector<BOOL>::vector(&__p, 4uLL);
  uint64_t v6 = (*(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 52));
  if ((int)v6 <= 0)
  {
    float v11 = __p;
LABEL_15:
    unint64_t v12 = *v11 | 1;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = 1;
    do
    {
      while (!v8)
      {
        BOOL v8 = 0;
        if (++v7 == v6)
        {
          float v11 = __p;
          goto LABEL_16;
        }
      }
      int v9 = *(unsigned __int16 *)(*v3[42] + 2 * v7);
      int v10 = *(unsigned __int16 *)(*v5[42] + 2 * v7);
      BOOL v8 = v9 == v10;
      ++v7;
    }
    while (v7 != v6);
    float v11 = __p;
    if (v9 == v10) {
      goto LABEL_15;
    }
LABEL_16:
    unint64_t v12 = *v11 & 0xFFFFFFFFFFFFFFFELL;
  }
  void *v11 = v12;
  if ((int)v6 < 1)
  {
LABEL_25:
    unint64_t v17 = v12 | 2;
  }
  else
  {
    uint64_t v13 = 0;
    BOOL v14 = 1;
    do
    {
      while (!v14)
      {
        BOOL v14 = 0;
        if (++v13 == v6) {
          goto LABEL_26;
        }
      }
      int v15 = *(unsigned __int16 *)(*v3[43] + 2 * v13);
      int v16 = *(unsigned __int16 *)(*v5[43] + 2 * v13);
      BOOL v14 = v15 == v16;
      ++v13;
    }
    while (v13 != v6);
    if (v15 == v16) {
      goto LABEL_25;
    }
LABEL_26:
    unint64_t v17 = v12 & 0xFFFFFFFFFFFFFFFDLL;
  }
  void *v11 = v17;
  if ((int)v6 < 1)
  {
LABEL_35:
    unint64_t v22 = v17 | 4;
  }
  else
  {
    uint64_t v18 = 0;
    BOOL v19 = 1;
    do
    {
      while (!v19)
      {
        BOOL v19 = 0;
        if (++v18 == v6) {
          goto LABEL_36;
        }
      }
      int v20 = *(unsigned __int16 *)(*v3[41] + 2 * v18);
      int v21 = *(unsigned __int16 *)(*v5[41] + 2 * v18);
      BOOL v19 = v20 == v21;
      ++v18;
    }
    while (v18 != v6);
    if (v20 == v21) {
      goto LABEL_35;
    }
LABEL_36:
    unint64_t v22 = v17 & 0xFFFFFFFFFFFFFFFBLL;
  }
  void *v11 = v22;
  if ((int)v6 < 1)
  {
LABEL_45:
    unint64_t v27 = v22 | 1;
  }
  else
  {
    uint64_t v23 = 0;
    BOOL v24 = 1;
    do
    {
      while (!v24)
      {
        BOOL v24 = 0;
        if (++v23 == v6) {
          goto LABEL_46;
        }
      }
      int v25 = *(unsigned __int16 *)(*v3[45] + 2 * v23);
      int v26 = *(unsigned __int16 *)(*v5[45] + 2 * v23);
      BOOL v24 = v25 == v26;
      ++v23;
    }
    while (v23 != v6);
    if (v25 == v26) {
      goto LABEL_45;
    }
LABEL_46:
    unint64_t v27 = v22 & 0xFFFFFFFFFFFFFFFELL;
  }
  void *v11 = v27;
  if ((int)v6 >= 1)
  {
    uint64_t v28 = 0;
    BOOL v29 = 1;
    do
    {
      BOOL v29 = v29 && *(unsigned __int16 *)(*v3[46] + 2 * v28) == *(unsigned __int16 *)(*v5[46] + 2 * v28);
      ++v28;
    }
    while (v28 != v6);
  }
  operator delete(v11);
}

void **GRU<short>::subtractModels(uint64_t a1, void *lpsrc, const void *a3)
{
  if (lpsrc)
  {
    if (a3)
    {
LABEL_3:
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v5 = 0;
    if (a3) {
      goto LABEL_3;
    }
  }
  uint64_t result = 0;
LABEL_6:
  int v7 = *(_DWORD *)(a1 + 52);
  uint64_t v8 = (*(_DWORD *)(a1 + 48) * v7);
  if ((int)v8 >= 1)
  {
    int v9 = (__int16 *)*result[42];
    int v10 = (__int16 *)*v5[42];
    float v11 = **(_WORD ***)(a1 + 336);
    uint64_t v12 = (*(_DWORD *)(a1 + 48) * v7);
    do
    {
      __int16 v14 = *v9++;
      __int16 v13 = v14;
      __int16 v15 = *v10++;
      *v11++ = v13 - v15;
      --v12;
    }
    while (v12);
    int v16 = (__int16 *)*result[43];
    unint64_t v17 = (__int16 *)*v5[43];
    uint64_t v18 = **(_WORD ***)(a1 + 344);
    uint64_t v19 = v8;
    do
    {
      __int16 v21 = *v16++;
      __int16 v20 = v21;
      __int16 v22 = *v17++;
      *v18++ = v20 - v22;
      --v19;
    }
    while (v19);
    uint64_t v23 = (__int16 *)*result[41];
    BOOL v24 = (__int16 *)*v5[41];
    int v25 = **(_WORD ***)(a1 + 328);
    do
    {
      __int16 v27 = *v23++;
      __int16 v26 = v27;
      __int16 v28 = *v24++;
      *v25++ = v26 - v28;
      --v8;
    }
    while (v8);
  }
  if (v7)
  {
    uint64_t v29 = (v7 * v7);
    float v30 = (__int16 *)*result[45];
    uint64_t v31 = (__int16 *)*v5[45];
    __n128 v32 = **(_WORD ***)(a1 + 360);
    uint64_t v33 = v29;
    do
    {
      __int16 v35 = *v30++;
      __int16 v34 = v35;
      __int16 v36 = *v31++;
      *v32++ = v34 - v36;
      --v33;
    }
    while (v33);
    int v37 = (__int16 *)*result[46];
    int v38 = (__int16 *)*v5[46];
    int v39 = **(_WORD ***)(a1 + 368);
    uint64_t v40 = v29;
    do
    {
      __int16 v42 = *v37++;
      __int16 v41 = v42;
      __int16 v43 = *v38++;
      *v39++ = v41 - v43;
      --v40;
    }
    while (v40);
    int v44 = (__int16 *)*result[44];
    uint64_t v45 = (__int16 *)*v5[44];
    uint64_t v46 = **(_WORD ***)(a1 + 352);
    do
    {
      __int16 v48 = *v44++;
      __int16 v47 = v48;
      __int16 v49 = *v45++;
      *v46++ = v47 - v49;
      --v29;
    }
    while (v29);
  }
  return result;
}

void GRU<short>::write(uint64_t a1, FILE *__stream, __sFILE *a3, int a4, int a5)
{
  NeuralNetwork::writeDimensions(__stream, a3, (int *)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  if (a4 >= 1)
  {
    int __ptr = *(_DWORD *)(a1 + 568);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    int __ptr = *(_DWORD *)(a1 + 572);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    int __ptr = *(_DWORD *)(a1 + 576);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    LODWORD(a3->_p) += 12;
  }
  MMatrix<short>::write(*(void *)(a1 + 336), __stream, (int *)a3, a5);
}

void MMatrix<short>::write(int a1, FILE *__stream, int *a3, int a4)
{
  if (a4 == 32)
  {
    if (__stream)
    {
      int v6 = *a3 & 0xF;
      if (*a3 <= 0) {
        int v6 = -(-*a3 & 0xF);
      }
      if (v6 >= 15) {
        int v7 = 16;
      }
      else {
        int v7 = 15 - v6;
      }
      char __ptr = v7;
      fwrite(&__ptr, 1uLL, 1uLL, __stream);
      ++*a3;
      writeByteArray((size_t)__stream, a3, v7);
      if ((*(unsigned char *)a3 & 0xF) == 0) {
        operator new[]();
      }
      exitFramework(18);
    }
    exitFramework(9);
  }
  if (a4 == 8 || a4 == 16) {
    exitFramework(45);
  }
  exitFramework(23);
}

uint64_t GRU<short>::read(uint64_t a1, NeuralNetwork *this, int *a3, int *a4, int *a5)
{
  int v5 = (int)a4;
  *(void *)__int16 v26 = 0;
  NeuralNetwork::readDimensions((uint64_t *)this, (ReadOnlyFile *)&v26[4], v26, a4, a5);
  if (v5 >= 1)
  {
    int v9 = *((_DWORD *)this + 18);
    uint64_t v10 = *(void *)this;
    float v11 = (int *)(*(void *)this + v9);
    unint64_t v12 = *(void *)this + *((void *)this + 1) - 4;
    if ((unint64_t)v11 <= v12)
    {
      int v13 = *v11;
      v9 += 4;
      *((_DWORD *)this + 18) = v9;
    }
    else
    {
      int v13 = 0;
    }
    uint64_t v14 = v9;
    *(_DWORD *)(a1 + 568) = v13;
    if (v10 + v9 <= v12)
    {
      int v15 = *(_DWORD *)(v10 + v9);
      v9 += 4;
      *((_DWORD *)this + 18) = v9;
      uint64_t v14 = v9;
    }
    else
    {
      int v15 = 0;
    }
    *(_DWORD *)(a1 + 572) = v15;
    int v16 = (int *)(v10 + v14);
    if ((unint64_t)v16 <= v12)
    {
      int v17 = *v16;
      *((_DWORD *)this + 18) = v9 + 4;
    }
    else
    {
      int v17 = 0;
    }
    *(_DWORD *)(a1 + 576) = v17;
  }
  uint64_t v18 = (__int16 **)*(unsigned int *)(a1 + 52);
  if (v18 != *(_DWORD *)&v26[4] || (int v19 = *(_DWORD *)(a1 + 48), v19 != *(_DWORD *)v26)) {
    exitFramework(3);
  }
  MMatrix<short>::read(*(char **)(a1 + 336), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 2033), v18, v19);
  MMatrix<short>::read(*(char **)(a1 + 328), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 2033), (__int16 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<short>::read(*(char **)(a1 + 344), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 2033), (__int16 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<short>::read(*(char **)(a1 + 360), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 2033), (__int16 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
  MMatrix<short>::read(*(char **)(a1 + 352), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 2033), (__int16 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
  __int16 v20 = *(char **)(a1 + 368);
  int v21 = *a3;
  int v22 = *(unsigned __int8 *)(a1 + 2033);
  uint64_t v23 = (__int16 **)*(unsigned int *)(a1 + 52);
  int v24 = *(_DWORD *)(a1 + 52);

  return MMatrix<short>::read(v20, (uint64_t)this, v21, v22, v23, v24);
}

uint64_t MMatrix<short>::read(char *a1, uint64_t a2, int a3, BOOL a4, __int16 **a5, int a6)
{
  if (!a2) {
LABEL_11:
  }
    exitFramework(9);
  int v7 = (int)a5;
  if (a3 == 3)
  {
    readPadding((uint64_t *)a2);
    char v11 = *(unsigned char *)(a2 + 72);
  }
  else
  {
    char v11 = *a1;
  }
  if ((v11 & 0xF) != 0) {
    exitFramework(18);
  }
  if (a4)
  {
    uint64_t v12 = *(int *)(a2 + 72);
    uint64_t v13 = *(void *)a2 + v12;
    *(void *)a1 = v13;
    *(_DWORD *)(a2 + 72) = v12 + 2 * a6 * v7;
    uint64_t result = 2 * a6 * v7;
    if (!v13) {
      goto LABEL_11;
    }
  }
  else
  {
    int v15 = *(__int16 **)a1;
    int v16 = a6 * v7;
    uint64_t result = ReadOnlyFile::readInt16Array((ReadOnlyFile *)a2, v15, &v16, a4, a5);
    if (!*(void *)a1) {
      goto LABEL_11;
    }
  }
  if (!result) {
    goto LABEL_11;
  }
  return result;
}

uint64_t GRU<short>::weightsAreNaN()
{
  return 0;
}

uint64_t GRU<short>::inputDeltas(uint64_t a1)
{
  return a1 + 608;
}

void GRU<short>::deltas()
{
}

uint64_t GRU<short>::outputs(uint64_t a1)
{
  return a1 + 112;
}

uint64_t GRU<short>::inputs(uint64_t a1)
{
  return a1 + 64;
}

void GRU<short>::targets()
{
}

void FullLayer<short>::init(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 528);
  if (v4) {
    int v5 = *(unsigned __int8 *)(v4 + 512);
  }
  else {
    int v5 = 0;
  }
  if (*(unsigned char *)(a1 + 40)) {
    int v6 = *(_DWORD *)(a1 + 96) + (v5 ^ 1);
  }
  else {
    int v6 = *(_DWORD *)(a1 + 96);
  }
  int v7 = *(_DWORD *)(a1 + 100);
  *(_DWORD *)(a1 + 104) = v6;
  *(_DWORD *)(a1 + 108) = v7 * v6;
  if (!*(_DWORD *)(a1 + 504))
  {
    if (!*(unsigned char *)(a1 + 117))
    {
      if (!v4 || *(_DWORD *)(v4 + 40) != 1) {
        MMatrix<short>::MMatrix();
      }
      *(void *)(a1 + 128) = *(void *)(v4 + 112);
    }
    *(void *)(a1 + 512) = a1 + 128;
  }
  if (!*(unsigned char *)(a1 + 116)) {
    operator new[]();
  }
  if (!*(_DWORD *)(a1 + 504))
  {
    int v9 = (void *)(a1 + 128);
    if (*(void *)(a1 + 128))
    {
      std::string::basic_string[abi:ne180100]<0>(&v24, " constructt W=");
      int v10 = *(char *)(a2 + 23);
      if (v10 >= 0) {
        char v11 = (const std::string::value_type *)a2;
      }
      else {
        char v11 = *(const std::string::value_type **)a2;
      }
      if (v10 >= 0) {
        std::string::size_type v12 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        std::string::size_type v12 = *(void *)(a2 + 8);
      }
      uint64_t v13 = std::string::insert(&v24, 0, v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      int64_t v26 = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      if (v26 >= 0) {
        int v15 = (char *)__p;
      }
      else {
        int v15 = (char *)__p[0];
      }
      MMatrix<short>::print((__int16 **)(a1 + 128), v15, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 10);
      if (SHIBYTE(v26) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      if (!*(_DWORD *)(a1 + 504) && *v9)
      {
        std::string::basic_string[abi:ne180100]<0>(&v24, " construct W=");
        int v16 = *(char *)(a2 + 23);
        if (v16 >= 0) {
          int v17 = (const std::string::value_type *)a2;
        }
        else {
          int v17 = *(const std::string::value_type **)a2;
        }
        if (v16 >= 0) {
          std::string::size_type v18 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          std::string::size_type v18 = *(void *)(a2 + 8);
        }
        int v19 = std::string::insert(&v24, 0, v17, v18);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        int64_t v26 = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        if (v26 >= 0) {
          int v21 = (char *)__p;
        }
        else {
          int v21 = (char *)__p[0];
        }
        MMatrix<short>::print((__int16 **)(a1 + 128), v21, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 10);
        if (SHIBYTE(v26) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v24.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  if (*(int *)(a1 + 112) < 1) {
    unsigned __int8 v8 = 0;
  }
  else {
    unsigned __int8 v8 = (**(uint64_t (***)(uint64_t))a1)(a1);
  }
  if (*(unsigned char *)(a1 + 42)) {
    int v22 = 2;
  }
  else {
    int v22 = maxFeatureVectors;
  }
  if (((*(unsigned char *)(a1 + 42) != 0) & v8) != 0) {
    int v23 = 2;
  }
  else {
    int v23 = maxFeatureVectors;
  }
  std::vector<VVector<float>>::resize((char **)(a1 + 264), v23);
  std::vector<VVector<float>>::resize((char **)(a1 + 384), v22);
  std::vector<VVector<float>>::resize((char **)(a1 + 288), maxFeatureVectors);
  if (!*(unsigned char *)(a1 + 116))
  {
    std::vector<VVector<float>>::resize((char **)(a1 + 312), maxFeatureVectors);
    std::vector<VVector<float>>::resize((char **)(a1 + 336), maxFeatureVectors);
  }
  std::vector<std::vector<int>>::resize((uint64_t *)(a1 + 360), maxFeatureVectors);
  if (v23 >= 1) {
    operator new[]();
  }
  if (v22 >= 1) {
    operator new[]();
  }
  if (maxFeatureVectors >= 1)
  {
    if (!*(unsigned char *)(a1 + 116)) {
      operator new[]();
    }
    operator new[]();
  }
}

void sub_19292A80C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FullLayer<short>::~FullLayer(uint64_t a1)
{
  *(void *)a1 = &unk_1EE323D00;
  FullLayer<short>::cleanupAllBuffers(a1);
  uint64_t v2 = *(void *)(a1 + 424);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 80))(v2);
    *(void *)(a1 + 424) = 0;
  }
  PTMutex::~PTMutex((PTMutex *)(a1 + 432));
  int v3 = *(void **)(a1 + 384);
  if (v3)
  {
    *(void *)(a1 + 392) = v3;
    operator delete(v3);
  }
  std::string::size_type v12 = (void **)(a1 + 360);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v4 = *(void **)(a1 + 336);
  if (v4)
  {
    *(void *)(a1 + 344) = v4;
    operator delete(v4);
  }
  int v5 = *(void **)(a1 + 312);
  if (v5)
  {
    *(void *)(a1 + 320) = v5;
    operator delete(v5);
  }
  int v6 = *(void **)(a1 + 288);
  if (v6)
  {
    *(void *)(a1 + 296) = v6;
    operator delete(v6);
  }
  int v7 = *(void **)(a1 + 264);
  if (v7)
  {
    *(void *)(a1 + 272) = v7;
    operator delete(v7);
  }
  SparseMatrix<float>::~SparseMatrix(a1 + 144);
  unsigned __int8 v8 = *(void **)(a1 + 72);
  if (v8)
  {
    *(void *)(a1 + 80) = v8;
    operator delete(v8);
  }
  int v9 = *(void **)(a1 + 48);
  if (v9)
  {
    *(void *)(a1 + 56) = v9;
    operator delete(v9);
  }
  *(void *)a1 = &unk_1EE3182B8;
  int v10 = *(void **)(a1 + 8);
  if (v10)
  {
    *(void *)(a1 + 16) = v10;
    operator delete(v10);
  }
  return a1;
}

void FullLayer<short>::cleanupAllBuffers(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  if (v3 == v2)
  {
    uint64_t v2 = *(void *)(a1 + 56);
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v2 + 8 * v4);
      if (v5)
      {
        MEMORY[0x192FF1690](v5, 0x1000C8052888210);
        uint64_t v2 = *(void *)(a1 + 48);
        uint64_t v3 = *(void *)(a1 + 56);
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
  }
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 80);
  if (v7 == v6)
  {
    uint64_t v6 = *(void *)(a1 + 80);
  }
  else
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(v6 + 8 * v8);
      if (v9)
      {
        MEMORY[0x192FF1690](v9, 0x1000C80BDFB0063);
        uint64_t v6 = *(void *)(a1 + 72);
        uint64_t v7 = *(void *)(a1 + 80);
      }
      ++v8;
    }
    while (v8 < (v7 - v6) >> 3);
    uint64_t v2 = *(void *)(a1 + 48);
  }
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 80) = v6;
  SparseMatrix<float>::cleanupAllBuffers((void *)(a1 + 144));
  *(void *)(a1 + 272) = *(void *)(a1 + 264);
  *(void *)(a1 + 296) = *(void *)(a1 + 288);
  *(void *)(a1 + 392) = *(void *)(a1 + 384);
  std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)(a1 + 360));
  if (!*(unsigned char *)(a1 + 116))
  {
    *(void *)(a1 + 320) = *(void *)(a1 + 312);
    *(void *)(a1 + 344) = *(void *)(a1 + 336);
  }
}

void FullLayer<short>::computeErrorRMSE(uint64_t a1, void *a2, void *a3, int a4, _DWORD *a5)
{
  if (a4 >= 1)
  {
    uint64_t v9 = a4;
    do
    {
      uint64_t v10 = (v9 - 1);
      uint64_t v11 = *(unsigned int *)(a1 + 100);
      if ((int)v11 >= 1)
      {
        int v12 = 0;
        uint64_t v13 = 0;
        long long v14 = *(float **)(*(void *)(a1 + 288) + 8 * v10);
        float v15 = 1.1755e-38;
        do
        {
          if (v14[v13] > v15)
          {
            int v12 = v13;
            float v15 = v14[v13];
          }
          ++v13;
        }
        while (v11 != v13);
        int v16 = 0;
        uint64_t v17 = 0;
        std::string::size_type v18 = *(float **)(*a2 + 8 * v10);
        float v19 = 1.1755e-38;
        do
        {
          if (v18[v17] > v19)
          {
            int v16 = v17;
            float v19 = v18[v17];
          }
          ++v17;
        }
        while (v11 != v17);
        if (v12 != v16)
        {
          ++*a5;
          uint64_t v11 = *(unsigned int *)(a1 + 100);
        }
        if ((int)v11 >= 1)
        {
          long long v20 = *(float **)(*a3 + 8 * v10);
          do
          {
            float v21 = *v18++;
            float v22 = v21;
            float v23 = *v14++;
            *v20++ = v22 - v23;
            --v11;
          }
          while (v11);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v34, "SoftMax ComputerError::targets t=");
      i2s(__p);
      if ((v33 & 0x80u) == 0) {
        std::string v24 = __p;
      }
      else {
        std::string v24 = (void **)__p[0];
      }
      if ((v33 & 0x80u) == 0) {
        std::string::size_type v25 = v33;
      }
      else {
        std::string::size_type v25 = (std::string::size_type)__p[1];
      }
      int64_t v26 = std::string::append(&v34, (const std::string::value_type *)v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      int64_t v36 = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)__int16 v35 = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      if ((char)v33 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      if (v36 >= 0) {
        __int16 v28 = (char *)v35;
      }
      else {
        __int16 v28 = (char *)v35[0];
      }
      VVector<float>::print((float **)(*a2 + 8 * v10), v28, *(_DWORD *)(a1 + 100));
      VVector<float>::print((float **)(*(void *)(a1 + 288) + 8 * v10), "SoftMax ComputerError::output ", *(_DWORD *)(a1 + 100));
      VVector<float>::print((float **)(*a3 + 8 * v10), "SoftMax ComputerError::deltas ", *(_DWORD *)(a1 + 100));
      if (SHIBYTE(v36) < 0) {
        operator delete(v35[0]);
      }
      BOOL v31 = __OFSUB__(v9, 1);
      BOOL v29 = v9 == 1;
      BOOL v30 = --v9 < 0;
    }
    while (!(v30 ^ v31 | v29));
  }
}

void sub_19292AC98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

float FullLayer<short>::probability(uint64_t a1, int a2, int a3)
{
  return *(float *)(*(void *)(*(void *)(a1 + 288) + 8 * a2) + 4 * a3);
}

uint64_t FullLayer<short>::outputDeltas(uint64_t a1)
{
  return a1 + 336;
}

void FullLayer<short>::~FullLayer(uint64_t a1)
{
  FullLayer<short>::~FullLayer(a1);

  JUMPOUT(0x192FF16B0);
}

float FullLayer<short>::log2Probability(uint64_t a1, uint64_t *a2, int a3)
{
  if (a3 < 1) {
    return 0.0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = *(unsigned int *)(a1 + 100);
  uint64_t v5 = *a2;
  uint64_t v6 = *(void *)(a1 + 288);
  uint64_t v7 = a3;
  float v8 = 0.0;
  do
  {
    if ((int)v4 < 1)
    {
      int v9 = 0;
    }
    else
    {
      int v9 = 0;
      uint64_t v10 = 0;
      float v12 = 1.1755e-38;
      do
      {
        uint64_t v11 = *(void *)(v5 + 8 * v3);
        if (*(float *)(v11 + 4 * v10) > v12)
        {
          int v9 = v10;
          float v12 = *(float *)(v11 + 4 * v10);
        }
        ++v10;
      }
      while (v4 != v10);
    }
    float v13 = *(float *)(*(void *)(v6 + 8 * v3) + 4 * v9);
    if (v13 <= 1.0e-10) {
      float v14 = 99.0;
    }
    else {
      float v14 = -log2f(v13);
    }
    float v8 = v8 + v14;
    ++v3;
  }
  while (v3 != v7);
  return v8;
}

_DWORD *FullLayer<short>::computeError(_DWORD *result)
{
  if (!result[30]) {
    return (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 392))();
  }
  return result;
}

void FullLayer<short>::updateFrom(uint64_t a1, void *lpsrc)
{
  if (!*(_DWORD *)(a1 + 504))
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 440));
    if (!*(_DWORD *)(a1 + 112)) {
      exitFramework(23);
    }
    exitFramework(33);
  }
  exitFramework(1);
}

char *FullLayer<short>::setMaster(uint64_t a1, void *lpsrc)
{
  if (*(_DWORD *)(a1 + 504) != 1) {
    exitFramework(1);
  }
  if (!result) {
    __cxa_bad_cast();
  }
  *(void *)(a1 + 512) = result + 128;
  return result;
}

uint64_t FullLayer<short>::reverseBackward(unsigned char *a1)
{
  a1[520] = 1;
  uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 296))(a1);
  a1[520] = 0;
  return result;
}

uint64_t FullLayer<short>::reverseForward(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  a1[520] = 1;
  {
    uint64_t v13 = a6;
    uint64_t v12 = a5;
    unsigned int v11 = a4;
    uint64_t v9 = a2;
    uint64_t v10 = a3;
    a2 = v9;
    a3 = v10;
    a4 = v11;
    a5 = v12;
    a6 = v13;
    if (v8)
    {
      FullLayer<short>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy = 0;
      unk_1E9307AF0 = 0;
      qword_1E9307AF8 = 0;
      __cxa_atexit((void (*)(void *))std::vector<int>::~vector[abi:ne180100], &FullLayer<short>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy, &dword_1920CB000);
      a2 = v9;
      a3 = v10;
      a4 = v11;
      a5 = v12;
      a6 = v13;
    }
  }
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 304))(a1, a2, a3, a4, a5, a6, &FullLayer<short>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy);
  a1[520] = 0;
  return result;
}

void FullLayer<short>::forward(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5)
{
  if (a3[1] == *a3 || *(int *)(a1 + 112) < 1) {
    int v9 = 0;
  }
  else {
    int v9 = (**(uint64_t (***)(uint64_t))a1)(a1);
  }
  int v10 = *(unsigned __int8 *)(a1 + 520);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Fulllayer");
  if (a5 && v10) {
    exitFramework(34);
  }
  unsigned int v11 = a4 & 0xFFFFFF;
  unsigned int v12 = a5 != 0;
  if (v36 < 0) {
    operator delete(__p);
  }
  if (v11 > v12)
  {
    do
    {
      if (*(unsigned char *)(a1 + 520)) {
        int v13 = v11 + ~v12;
      }
      else {
        int v13 = v12;
      }
      uint64_t v14 = v13;
      if (*(unsigned char *)(a1 + 42)) {
        int v15 = 1;
      }
      else {
        int v15 = v13;
      }
      if (((*(unsigned char *)(a1 + 42) != 0) & v9) != 0) {
        uint64_t v16 = 1;
      }
      else {
        uint64_t v16 = v13;
      }
      uint64_t v17 = *(void *)(a1 + 264);
      if (v9)
      {
        bzero(*(void **)(v17 + 8 * v16), 4 * *(int *)(a1 + 104));
        uint64_t v18 = *(void *)(a1 + 264);
        *(_DWORD *)(*(void *)(v18 + 8 * v16) + 4 * **(int **)(*a3 + 24 * (int)v14)) = 1065353216;
      }
      else
      {
        memmove(*(void **)(v17 + 8 * v16), *(const void **)(*a2 + 8 * v16), 4 * *(int *)(a1 + 96));
        uint64_t v18 = *(void *)(a1 + 264);
      }
      int v19 = *(_DWORD *)(a1 + 104);
      if (*(unsigned char *)(a1 + 40)) {
        *(_DWORD *)(*(void *)(v18 + 8 * v16) + 4 * (v19 - 1)) = 1065353216;
      }
      VVector<float>::print((float **)(v18 + 8 * v16), "FullLayer input: ", v19);
      MMatrix<short>::print(*(__int16 ***)(a1 + 512), "FullLayer weights: ", *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), 10);
      if (!v9) {
        VVector<float>::internalMul();
      }
      uint64_t v20 = *(void *)(a1 + 360);
      float v21 = (const void **)(v20 + 24 * v14);
      float v22 = *v21;
      *(_DWORD *)*float v21 = **(_DWORD **)(*a3 + 24 * v14);
      if (*(unsigned char *)(a1 + 40)) {
        v22[1] = *(_DWORD *)(a1 + 104) - 1;
      }
      uint64_t v23 = v15;
      std::string v24 = (float **)(*(void *)(a1 + 384) + 8 * v15);
      unsigned __int8 v33 = 0;
      uint64_t v34 = 0;
      __n128 v32 = 0;
      uint64_t v25 = *(void *)(v20 + 24 * (int)v14 + 8);
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v32, *v21, v25, (v25 - (uint64_t)*v21) >> 2);
      VVector<float>::internalMul(v24, (int *)v32, v33, **(void **)(a1 + 512), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104));
      if (v32)
      {
        unsigned __int8 v33 = (int *)v32;
        operator delete(v32);
      }
      uint64_t v26 = *(void *)(a1 + 384);
      int v27 = *(_DWORD *)(a1 + 100);
      __int16 v28 = *(float **)(v26 + 8 * v23);
      if (v27 >= 1)
      {
        uint64_t v29 = *(unsigned int *)(a1 + 100);
        do
        {
          int v30 = -1035468800;
          if (*v28 < -50.0 || (int v30 = 1112014848, *v28 > 50.0)) {
            *(_DWORD *)__int16 v28 = v30;
          }
          ++v28;
          --v29;
        }
        while (v29);
        __int16 v28 = *(float **)(v26 + 8 * v23);
      }
      VVector<float>::applyForwardActivation((float **)(*(void *)(a1 + 288) + 8 * v14), v28, v27, *(_DWORD *)(a1 + 408));
      ++v12;
    }
    while (v12 != v11);
  }
}

void sub_19292B3A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void FullLayer<short>::backward(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (*(int *)(a1 + 112) < 1) {
    bzero(*(void **)(a1 + 136), 4 * *(int *)(a1 + 108));
  }
  else {
    *(_DWORD *)(a1 + 160) = 0;
  }
  BOOL v9 = __OFSUB__(a5, 1);
  int v10 = a5 - 1;
  if (v10 < 0 == v9)
  {
    unsigned int v11 = 0;
    do
    {
      if (*(unsigned char *)(a1 + 520)) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v10;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 248))(a1, a4, a3, v12, 0xFFFFFFFFLL, 0xFFFFFFFFLL);
      --v10;
      ++v11;
    }
    while (v10 != -1);
  }
}

void FullLayer<short>::update(uint64_t a1)
{
  if (*(int *)(a1 + 112) >= 1) {
    exitFramework(33);
  }
  exitFramework(23);
}

uint64_t FullLayer<short>::noutputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 100);
}

uint64_t FullLayer<short>::ninputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

void FullLayer<short>::initDW(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 116))
  {
    if (*(_DWORD *)(a1 + 112)) {
      *(_DWORD *)(a1 + 160) = 0;
    }
    else {
      bzero(*(void **)(a1 + 136), 4 * *(int *)(a1 + 108));
    }
  }
  uint64_t v4 = *(void *)(a1 + 264);
  if (*(void *)(a1 + 272) != v4)
  {
    unint64_t v5 = 0;
    do
    {
      bzero(*(void **)(v4 + 8 * v5++), 4 * *(int *)(a1 + 104));
      uint64_t v4 = *(void *)(a1 + 264);
    }
    while (v5 < (*(void *)(a1 + 272) - v4) >> 3);
  }
  uint64_t v6 = *(void *)(a1 + 288);
  if (*(void *)(a1 + 296) != v6)
  {
    unint64_t v7 = 0;
    do
    {
      bzero(*(void **)(v6 + 8 * v7++), 4 * *(int *)(a1 + 100));
      uint64_t v6 = *(void *)(a1 + 288);
    }
    while (v7 < (*(void *)(a1 + 296) - v6) >> 3);
  }
  if (a2 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 8 * a2;
    do
    {
      if (!*(unsigned char *)(a1 + 116))
      {
        bzero(*(void **)(*(void *)(a1 + 312) + v8), 4 * *(int *)(a1 + 104));
        bzero(*(void **)(*(void *)(a1 + 336) + v8), 4 * *(int *)(a1 + 100));
      }
      v8 += 8;
    }
    while (v9 != v8);
  }
}

void FullLayer<short>::backwardForSingleFeatureVector(uint64_t a1, uint64_t *a2, void *a3, int a4)
{
  if (((**(uint64_t (***)(uint64_t))a1)(a1) & 1) == 0)
  {
    VVector<float>::applyBackwardActivationDerivative((void **)(a1 + 416), *(float **)(*(void *)(a1 + 384) + 8 * a4), *(float **)(*a2 + 8 * a4), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 408));
    VVector<float>::internalMul();
  }
  if (a3[1] == *a3 || *(int *)(a1 + 112) < 1 || !(**(unsigned int (***)(uint64_t))a1)(a1))
  {
    uint64_t v10 = *(void *)(a1 + 264) + 8 * a4;
    int v11 = *(_DWORD *)(a1 + 100);
    int v12 = *(_DWORD *)(a1 + 104);
    uint64_t v13 = *(void *)(a1 + 136);
    VVector<float>::sumOuterProd(a1 + 416, v10, v13, v11, v12);
  }
  else
  {
    uint64_t v8 = *a2;
    uint64_t v9 = *(void *)(a1 + 360) + 24 * a4;
    int v15 = 0;
    uint64_t v16 = 0;
    std::string __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 2);
    SparseMatrix<float>::sum<float>(a1 + 144, *(int **)(v8 + 8 * a4), (uint64_t)__p, *(_DWORD *)(a1 + 100));
    if (__p)
    {
      int v15 = __p;
      operator delete(__p);
    }
  }
}

float FullLayer<short>::computeErrorForSingleFeatureVector(uint64_t a1, uint64_t *a2, void *a3, int a4, _DWORD *a5, float result)
{
  uint64_t v6 = *(void *)(a1 + 288);
  uint64_t v7 = *(unsigned int *)(a1 + 100);
  if ((int)v7 <= 0)
  {
    uint64_t v14 = *a2;
    int v15 = (float **)(*a2 + 8 * a4);
  }
  else
  {
    int v8 = 0;
    uint64_t v9 = 0;
    float v11 = 1.1755e-38;
    do
    {
      uint64_t v10 = *(void *)(v6 + 8 * a4);
      if (*(float *)(v10 + 4 * v9) > v11)
      {
        int v8 = v9;
        float v11 = *(float *)(v10 + 4 * v9);
      }
      ++v9;
    }
    while (v7 != v9);
    int v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = *a2;
    int v15 = (float **)(*a2 + 8 * a4);
    uint64_t result = 1.1755e-38;
    do
    {
      if ((*v15)[v13] > result)
      {
        int v12 = v13;
        uint64_t result = (*v15)[v13];
      }
      ++v13;
    }
    while (v7 != v13);
    if (v8 != v12) {
      ++*a5;
    }
  }
  if (a4 < (unint64_t)((uint64_t)(a3[1] - *a3) >> 3)
    && a4 < (unint64_t)((a2[1] - v14) >> 3)
    && a4 < (unint64_t)((*(void *)(a1 + 296) - v6) >> 3))
  {
    uint64_t v16 = *(unsigned int *)(a1 + 100);
    if ((int)v16 >= 1)
    {
      uint64_t v17 = *v15;
      uint64_t v18 = *(float **)(v6 + 8 * a4);
      int v19 = *(float **)(*a3 + 8 * a4);
      do
      {
        float v20 = *v17++;
        float v21 = v20;
        float v22 = *v18++;
        uint64_t result = v21 - v22;
        *v19++ = result;
        --v16;
      }
      while (v16);
    }
  }
  return result;
}

void FullLayer<short>::log2ProbabilityForSingleFeatureVector(uint64_t a1, void *a2, float *a3, int a4)
{
  uint64_t v5 = *(unsigned int *)(a1 + 100);
  if ((int)v5 < 1)
  {
    uint64_t v10 = 0;
  }
  else
  {
    int v6 = 0;
    uint64_t v7 = 0;
    float v9 = 1.1755e-38;
    do
    {
      uint64_t v8 = *(void *)(*a2 + 8 * a4);
      if (*(float *)(v8 + 4 * v7) > v9)
      {
        int v6 = v7;
        float v9 = *(float *)(v8 + 4 * v7);
      }
      ++v7;
    }
    while (v5 != v7);
    uint64_t v10 = v6;
  }
  float v11 = *(float *)(*(void *)(*(void *)(a1 + 288) + 8 * a4) + 4 * v10);
  if (v11 <= 1.0e-10) {
    float v12 = 99.0;
  }
  else {
    float v12 = 0.0 - log2f(v11);
  }
  *a3 = v12;
}

void FullLayer<short>::allocAllBuffers(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "FullLayer, from allocAll");
  (*(void (**)(uint64_t, void **, void, float))(*(void *)a1 + 400))(a1, __p, 0, -0.44);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_19292B9BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FullLayer<short>::unsetSpecialBidir(uint64_t result)
{
  *(unsigned char *)(result + 42) = 0;
  return result;
}

uint64_t FullLayer<short>::setSpecialBidir(uint64_t result)
{
  *(unsigned char *)(result + 42) = 1;
  return result;
}

uint64_t FullLayer<short>::setWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(v2 - 16);
  *(void *)(a2 + 8) = v2 - 16;
  *(void *)(a1 + 128) = v3;
  uint64_t result = a1 + 128;
  *(void *)(result + 384) = result;
  return result;
}

char *FullLayer<short>::getWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = **(void **)(a1 + 512);
  double v4 = *(double *)(a1 + 100);
  uint64_t v5 = *(uint64_t **)(a2 + 8);
  if ((unint64_t)v5 >= *(void *)(a2 + 16))
  {
    uint64_t result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v3, v4);
  }
  else
  {
    uint64_t *v5 = v3;
    *((double *)v5 + 1) = v4;
    uint64_t result = (char *)(v5 + 2);
  }
  *(void *)(a2 + 8) = result;
  return result;
}

void FullLayer<short>::resetForNewBatch(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 424);
  std::string::basic_string[abi:ne180100]<0>(__p, "FULLLAYER - Print before reset");
  (*(void (**)(uint64_t, void **))(*(void *)v2 + 40))(v2, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(void))(**(void **)(a1 + 424) + 16))(*(void *)(a1 + 424));
  uint64_t v3 = *(void *)(a1 + 424);
  std::string::basic_string[abi:ne180100]<0>(__p, "FULLLAYER - Print AFTER reset");
  (*(void (**)(uint64_t, void **))(*(void *)v3 + 40))(v3, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_19292BB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t FullLayer<short>::normalizeModel(uint64_t result, float a2)
{
  uint64_t v2 = *(unsigned int *)(result + 108);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = **(__int16 ***)(result + 512);
    do
    {
      __int16 *v3 = (int)(float)((float)*v3 * a2);
      ++v3;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t FullLayer<short>::clipModel(uint64_t result, float a2)
{
  uint64_t v2 = *(unsigned int *)(result + 108);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = **(__int16 ***)(result + 512);
    do
    {
      float v4 = (float)*v3;
      float v5 = -a2;
      if (v4 < (float)-a2 || (float v5 = a2, v4 > a2)) {
        __int16 *v3 = (int)v5;
      }
      ++v3;
      --v2;
    }
    while (v2);
  }
  return result;
}

void FullLayer<short>::applyGradient(uint64_t a1, void *lpsrc)
{
  if (lpsrc) {
  (*(void (**)(void))(**(void **)(a1 + 424) + 64))(*(void *)(a1 + 424));
  }
  exitFramework(23);
}

void *FullLayer<short>::addGradient(uint64_t a1, void *lpsrc)
{
  if (lpsrc) {
  else
  }
    uint64_t result = 0;
  uint64_t v4 = (*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100));
  if ((int)v4 >= 1)
  {
    float v5 = **(_WORD ***)(a1 + 512);
    int v6 = (__int16 *)result[16];
    do
    {
      __int16 v7 = *v6++;
      *v5++ += v7;
      --v4;
    }
    while (v4);
  }
  return result;
}

void FullLayer<short>::compareModels(int a1, void *lpsrc, const void *a3)
{
  if (lpsrc) {
  if (a3)
  }
  {
  }
}

void *FullLayer<short>::subtractModels(uint64_t a1, void *lpsrc, const void *a3)
{
  if (lpsrc)
  {
    if (a3)
    {
LABEL_3:
      goto LABEL_6;
    }
  }
  else
  {
    float v5 = 0;
    if (a3) {
      goto LABEL_3;
    }
  }
  uint64_t result = 0;
LABEL_6:
  uint64_t v7 = (*(_DWORD *)(a1 + 104) * *(_DWORD *)(a1 + 100));
  if ((int)v7 >= 1)
  {
    uint64_t v8 = (__int16 *)result[16];
    float v9 = (__int16 *)v5[16];
    uint64_t v10 = **(_WORD ***)(a1 + 512);
    do
    {
      __int16 v12 = *v8++;
      __int16 v11 = v12;
      __int16 v13 = *v9++;
      *v10++ = v11 - v13;
      --v7;
    }
    while (v7);
  }
  return result;
}

void FullLayer<short>::write(uint64_t a1, FILE *__stream, __sFILE *a3, int a4, int a5)
{
  NeuralNetwork::writeDimensions(__stream, a3, (int *)*(unsigned int *)(a1 + 100), *(_DWORD *)(a1 + 104));
  if (a4 >= 1)
  {
    int __ptr = *(_DWORD *)(a1 + 408);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    LODWORD(a3->_p) += 4;
  }
  uint64_t v10 = *(void *)(a1 + 512);

  MMatrix<short>::write(v10, __stream, (int *)a3, a5);
}

uint64_t FullLayer<short>::read(uint64_t a1, NeuralNetwork *this, int *a3, int *a4, int *a5)
{
  int v5 = (int)a4;
  *(void *)uint64_t v18 = 0;
  NeuralNetwork::readDimensions((uint64_t *)this, (ReadOnlyFile *)&v18[4], v18, a4, a5);
  if (v5 >= 1)
  {
    uint64_t v9 = *((int *)this + 18);
    uint64_t v10 = (int *)(*(void *)this + v9);
    if ((unint64_t)v10 <= *(void *)this + *((void *)this + 1) - 4)
    {
      int v11 = *v10;
      *((_DWORD *)this + 18) = v9 + 4;
    }
    else
    {
      int v11 = 0;
    }
    *(_DWORD *)(a1 + 408) = v11;
  }
  __int16 v12 = (__int16 **)*(unsigned int *)(a1 + 100);
  if (v12 != *(_DWORD *)&v18[4] || (int v13 = *(_DWORD *)(a1 + 104), v13 != *(_DWORD *)v18)) {
    exitFramework(3);
  }
  uint64_t v14 = *(char **)(a1 + 512);
  int v15 = *a3;
  int v16 = *(unsigned __int8 *)(a1 + 117);

  return MMatrix<short>::read(v14, (uint64_t)this, v15, v16, v12, v13);
}

uint64_t FullLayer<short>::weightsAreNaN()
{
  return 0;
}

uint64_t FullLayer<short>::inputDeltas(uint64_t a1)
{
  return a1 + 312;
}

uint64_t FullLayer<short>::deltas(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 376))();
}

uint64_t FullLayer<short>::outputs(uint64_t a1)
{
  return a1 + 288;
}

uint64_t FullLayer<short>::inputs(uint64_t a1)
{
  return a1 + 264;
}

void FullLayer<short>::targets()
{
}

void SoftMax<short>::~SoftMax(uint64_t a1)
{
  FullLayer<short>::~FullLayer(a1);

  JUMPOUT(0x192FF16B0);
}

void SoftMax<short>::forward(unsigned __int8 *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v13 = a1[520];
  std::string::basic_string[abi:ne180100]<0>(&__p, "Softmax");
  if (a5 && v13) {
    exitFramework(34);
  }
  unsigned int v14 = a4 & 0xFFFFFF;
  uint64_t v15 = a5 != 0;
  if (v17 < 0) {
    operator delete(__p);
  }
  if (v14 > v15)
  {
    do
    {
      (*(void (**)(unsigned __int8 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 224))(a1, a2, a3, v15, a7);
      uint64_t v15 = (v15 + 1);
    }
    while (v14 != v15);
  }
}

void sub_19292C20C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SoftMax<short>::forwardForSingleFeatureVector(uint64_t a1, void *a2, uint64_t a3, int a4, void *a5)
{
  uint64_t v9 = a4;
  uint64_t v10 = *(int *)(a1 + 96);
  int v11 = *(_DWORD *)(a1 + 104);
  __int16 v12 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  memmove(*(void **)(*v12 + 8 * a4), *(const void **)(*a2 + 8 * a4), 4 * v10);
  if (*(unsigned char *)(a1 + 40)) {
    *(_DWORD *)(*(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) + 8 * v9)
  }
              + 4 * (v11 - 1)) = 1065353216;
  if (a5[1] == *a5)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
    VVector<float>::internalMul();
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  exitFramework(65);
}

void SoftMax<short>::allocAllBuffers(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "SoftMax, from allocAll");
  FullLayer<short>::init(a1, (uint64_t)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_19292C4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SoftMax<short>::outputs(uint64_t a1)
{
  return a1 + 288;
}

uint64_t SoftMax<short>::inputs(uint64_t a1)
{
  return a1 + 264;
}

void SoftMax<short>::targets()
{
}

void RecurrentLayer<short>::init(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 240);
  if (v1) {
    BOOL v2 = !*(unsigned char *)(v1 + 20) && *(_DWORD *)(v1 + 40) == 1 && *(_DWORD *)(v1 + 44) == 1;
  }
  else {
    BOOL v2 = 1;
  }
  int v3 = *(_DWORD *)(a1 + 48);
  int v4 = *(_DWORD *)(a1 + 44) + *(unsigned __int8 *)(a1 + 40);
  *(_DWORD *)(a1 + 52) = v4;
  if (v2)
  {
    v4 += v3;
    *(_DWORD *)(a1 + 52) = v4;
  }
  *(_DWORD *)(a1 + 56) = v3 * v4;
  operator new[]();
}

void sub_19292CEF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

float RecurrentLayer<short>::probability(uint64_t a1, int a2, int a3)
{
  return *(float *)(*(void *)(*(void *)(a1 + 112) + 8 * a2) + 4 * a3);
}

uint64_t RecurrentLayer<short>::outputDeltas(uint64_t a1)
{
  return a1 + 160;
}

void RecurrentLayer<short>::~RecurrentLayer(void *a1)
{
  RecurrentLayer<short>::~RecurrentLayer(a1);

  JUMPOUT(0x192FF16B0);
}

void *RecurrentLayer<short>::~RecurrentLayer(void *a1)
{
  *a1 = &unk_1EE3187A8;
  RecurrentLayer<short>::cleanupAllBuffers((uint64_t)a1);
  PTMutex::~PTMutex((PTMutex *)(a1 + 37));
  BOOL v2 = (void *)a1[34];
  if (v2)
  {
    a1[35] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[31];
  if (v3)
  {
    a1[32] = v3;
    operator delete(v3);
  }
  int v4 = (void *)a1[23];
  if (v4)
  {
    a1[24] = v4;
    operator delete(v4);
  }
  int v5 = (void *)a1[20];
  if (v5)
  {
    a1[21] = v5;
    operator delete(v5);
  }
  int v6 = (void *)a1[17];
  if (v6)
  {
    a1[18] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[14];
  if (v7)
  {
    a1[15] = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)a1[11];
  if (v8)
  {
    a1[12] = v8;
    operator delete(v8);
  }
  *a1 = &unk_1EE3182B8;
  uint64_t v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

uint64_t RecurrentLayer<short>::cleanupAllBuffers(uint64_t result)
{
  uint64_t v1 = (void *)result;
  uint64_t v2 = *(void *)(result + 248);
  uint64_t v3 = *(void *)(result + 256);
  if (v3 == v2)
  {
    uint64_t v2 = *(void *)(result + 256);
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t result = *(void *)(v2 + 8 * v4);
      if (result)
      {
        uint64_t result = MEMORY[0x192FF1690](result, 0x1000C8052888210);
        uint64_t v2 = v1[31];
        uint64_t v3 = v1[32];
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
  }
  uint64_t v5 = v1[34];
  uint64_t v6 = v1[35];
  if (v6 == v5)
  {
    uint64_t v5 = v1[35];
  }
  else
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t result = *(void *)(v5 + 8 * v7);
      if (result)
      {
        uint64_t result = MEMORY[0x192FF1690](result, 0x1000C80BDFB0063);
        uint64_t v5 = v1[34];
        uint64_t v6 = v1[35];
      }
      ++v7;
    }
    while (v7 < (v6 - v5) >> 3);
    uint64_t v2 = v1[31];
  }
  v1[32] = v2;
  v1[35] = v5;
  return result;
}

float RecurrentLayer<short>::log2Probability(uint64_t a1, uint64_t *a2, int a3)
{
  if (a3 < 1) {
    return 0.0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  uint64_t v5 = *a2;
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v7 = a3;
  float v8 = 0.0;
  do
  {
    if ((int)v4 < 1)
    {
      int v9 = 0;
    }
    else
    {
      int v9 = 0;
      uint64_t v10 = 0;
      float v12 = 1.1755e-38;
      do
      {
        uint64_t v11 = *(void *)(v5 + 8 * v3);
        if (*(float *)(v11 + 4 * v10) > v12)
        {
          int v9 = v10;
          float v12 = *(float *)(v11 + 4 * v10);
        }
        ++v10;
      }
      while (v4 != v10);
    }
    float v13 = *(float *)(*(void *)(v6 + 8 * v3) + 4 * v9);
    if (v13 <= 1.0e-10) {
      float v14 = 99.0;
    }
    else {
      float v14 = -log2f(v13);
    }
    float v8 = v8 + v14;
    ++v3;
  }
  while (v3 != v7);
  return v8;
}

uint64_t RecurrentLayer<short>::computeError(uint64_t result, uint64_t *a2, uint64_t *a3, int a4, int *a5)
{
  if (a4 >= 1)
  {
    int v5 = *a5;
    uint64_t v6 = *(void *)(result + 112);
    uint64_t v7 = *a2;
    uint64_t v8 = *a3;
    uint64_t v9 = a4;
    uint64_t v10 = *(unsigned int *)(result + 48);
    do
    {
      if ((int)v10 >= 1)
      {
        int v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = (v9 - 1);
        float v14 = *(float **)(v6 + 8 * v13);
        float v15 = 1.1755e-38;
        do
        {
          if (v14[v12] > v15)
          {
            int v11 = v12;
            float v15 = v14[v12];
          }
          ++v12;
        }
        while (v10 != v12);
        int v16 = 0;
        uint64_t v17 = 0;
        uint64_t v18 = *(float **)(v7 + 8 * v13);
        float v19 = 1.1755e-38;
        do
        {
          if (v18[v17] > v19)
          {
            int v16 = v17;
            float v19 = v18[v17];
          }
          ++v17;
        }
        while (v10 != v17);
        if (v11 == v16)
        {
          uint64_t v10 = v10;
        }
        else
        {
          *a5 = ++v5;
          uint64_t v10 = *(unsigned int *)(result + 48);
        }
        if ((int)v10 >= 1)
        {
          float v20 = *(float **)(v8 + 8 * v13);
          uint64_t v21 = v10;
          do
          {
            float v22 = *v18++;
            float v23 = v22;
            float v24 = *v14++;
            *v20++ = v23 - v24;
            --v21;
          }
          while (v21);
        }
      }
    }
    while (v9-- > 1);
  }
  return result;
}

uint64_t RecurrentLayer<short>::updateFrom(uint64_t a1, void *lpsrc, float a3)
{
  if (*(_DWORD *)(a1 + 368)) {
    exitFramework(1);
  }
  if (!v5) {
    __cxa_bad_cast();
  }
  uint64_t v6 = v5;
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 304));
  uint64_t v7 = *(unsigned int *)(a1 + 56);
  if ((int)v7 >= 1)
  {
    uint64_t v8 = *(__int16 **)(a1 + 64);
    uint64_t v9 = (float *)*((void *)v6 + 10);
    do
    {
      float v10 = *v9++;
      *uint64_t v8 = (int)(float)((float)*v8 + (float)(v10 * (float)(int)a3));
      ++v8;
      --v7;
    }
    while (v7);
  }

  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 304));
}

char *RecurrentLayer<short>::setMaster(uint64_t a1, void *lpsrc)
{
  if (*(_DWORD *)(a1 + 368) != 1) {
    exitFramework(1);
  }
  if (!result) {
    __cxa_bad_cast();
  }
  *(void *)(a1 + 376) = result + 64;
  return result;
}

void RecurrentLayer<short>::forward(uint64_t a1, void *a2, uint64_t a3, int a4, uint64_t a5)
{
  id v47[2] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(a1 + 240);
  if (v9) {
    BOOL v10 = !*(unsigned char *)(v9 + 20) && *(_DWORD *)(v9 + 40) == 1 && *(_DWORD *)(v9 + 44) == 1;
  }
  else {
    BOOL v10 = 1;
  }
  BOOL v11 = *(unsigned char *)(a1 + 232) != 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Recurrent");
  char v12 = !v11;
  if (!a5) {
    char v12 = 1;
  }
  if ((v12 & 1) == 0) {
    exitFramework(34);
  }
  signed int v13 = a5 != 0;
  if (SHIBYTE(v46) < 0) {
    operator delete(__p);
  }
  std::string __p = 0;
  long long v46 = 0uLL;
  i2s(&v43);
  float v14 = std::string::insert(&v43, 0, "RNN Forward W_i[");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  int v16 = std::string::append(&v44, "] W:");
  uint64_t v17 = (void *)v16->__r_.__value_.__r.__words[0];
  v47[0] = v16->__r_.__value_.__l.__size_;
  *(void *)((char *)v47 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
  char v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46) < 0) {
    operator delete(__p);
  }
  std::string __p = v17;
  *(void *)&long long v46 = v47[0];
  *(void *)((char *)&v46 + 7) = *(void *)((char *)v47 + 7);
  HIBYTE(v46) = v18;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (v46 >= 0) {
    p_p = (char *)&__p;
  }
  else {
    p_p = (char *)__p;
  }
  MMatrix<short>::print(*(__int16 ***)(a1 + 376), p_p, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
  i2s(&v43);
  float v20 = std::string::insert(&v43, 0, "RNN Forward R_i[");
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  float v22 = std::string::append(&v44, "] R:");
  float v23 = (void *)v22->__r_.__value_.__r.__words[0];
  v47[0] = v22->__r_.__value_.__l.__size_;
  *(void *)((char *)v47 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
  char v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46) < 0) {
    operator delete(__p);
  }
  std::string __p = v23;
  *(void *)&long long v46 = v47[0];
  *(void *)((char *)&v46 + 7) = *(void *)((char *)v47 + 7);
  HIBYTE(v46) = v24;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  uint64_t v25 = *(__int16 ***)(a1 + 384);
  if (v25)
  {
    if (v46 >= 0) {
      uint64_t v26 = (char *)&__p;
    }
    else {
      uint64_t v26 = (char *)__p;
    }
    MMatrix<short>::print(v25, v26, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 48) * *(_DWORD *)(a1 + 48));
  }
  int v27 = a4 & 0xFFFFFF;
  if ((a4 & 0xFFFFFFu) > v13)
  {
    if (*(unsigned char *)(a1 + 232)) {
      signed int v13 = v27 + ~v13;
    }
    BOOL v28 = v13 < v27 - 1;
    if (*(unsigned char *)(a1 + 232)) {
      int v29 = 1;
    }
    else {
      int v29 = -1;
    }
    if (*(unsigned char *)(a1 + 232)) {
      BOOL v30 = v28;
    }
    else {
      BOOL v30 = a5 != 0;
    }
    uint64_t v31 = v13;
    bzero(*(void **)(*(void *)(a1 + 88) + 8 * v13), 4 * *(int *)(a1 + 52));
    uint64_t v32 = *(void *)(a1 + 88);
    int v33 = *(_DWORD *)(a1 + 44);
    if (v33 >= 1)
    {
      uint64_t v34 = *(int **)(*a2 + 8 * v13);
      __int16 v35 = *(_DWORD **)(v32 + 8 * v13);
      uint64_t v36 = *(unsigned int *)(a1 + 44);
      do
      {
        int v37 = *v34++;
        *v35++ = v37;
        --v36;
      }
      while (v36);
    }
    int v38 = v13 + v29;
    if (v10 && v30)
    {
      uint64_t v39 = *(unsigned int *)(a1 + 48);
      if ((int)v39 >= 1)
      {
        uint64_t v40 = *(int **)(*(void *)(a1 + 112) + 8 * v38);
        __int16 v41 = (_DWORD *)(*(void *)(v32 + 8 * v31) + 4 * v33);
        do
        {
          int v42 = *v40++;
          *v41++ = v42;
          --v39;
        }
        while (v39);
      }
    }
    if (*(unsigned char *)(a1 + 40)) {
      *(_DWORD *)(*(void *)(v32 + 8 * v31) + 4 * *(int *)(a1 + 52) - 4) = 1065353216;
    }
    VVector<float>::print((float **)(*(void *)(a1 + 112) + 8 * v38), "RNN output t-1 : ", *(_DWORD *)(a1 + 48));
    VVector<float>::print((float **)(*(void *)(a1 + 88) + 8 * v31), "RNN input t: ", *(_DWORD *)(a1 + 52));
    MMatrix<short>::print((__int16 **)(a1 + 64), "RNN weights: ", *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 10);
    VVector<float>::internalMul();
  }
  if (SHIBYTE(v46) < 0) {
    operator delete(__p);
  }
}

void sub_19292D8D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

void RecurrentLayer<short>::backward(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5)
{
  if ((**(uint64_t (***)(uint64_t))a1)(a1))
  {
    bzero(*(void **)(a1 + 80), 4 * *(int *)(a1 + 56));
    if (a5 >= 1)
    {
      int v9 = 0;
      do
      {
        --a5;
        if (*(unsigned char *)(a1 + 232)) {
          int v10 = v9;
        }
        else {
          int v10 = a5;
        }
        uint64_t v11 = v10;
        VVector<float>::sumOuterProd(*a4 + 8 * v10, *(void *)(a1 + 88) + 8 * v10, *(void *)(a1 + 80), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52));
        if (*(unsigned char *)(a1 + 40)) {
          *(_DWORD *)(*(void *)(*(void *)(a1 + 136) + 8 * v11) + 4 * *(int *)(a1 + 52) - 4) = 1065353216;
        }
        std::string::basic_string[abi:ne180100]<0>(&v27, "FullLayer DW: t[");
        i2s(v25);
        if ((v26 & 0x80u) == 0) {
          char v12 = v25;
        }
        else {
          char v12 = (void **)v25[0];
        }
        if ((v26 & 0x80u) == 0) {
          std::string::size_type v13 = v26;
        }
        else {
          std::string::size_type v13 = (std::string::size_type)v25[1];
        }
        float v14 = std::string::append(&v27, (const std::string::value_type *)v12, v13);
        long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v28.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(__p, "] ");
        if ((v24 & 0x80u) == 0) {
          int v16 = __p;
        }
        else {
          int v16 = (void **)__p[0];
        }
        if ((v24 & 0x80u) == 0) {
          std::string::size_type v17 = v24;
        }
        else {
          std::string::size_type v17 = (std::string::size_type)__p[1];
        }
        char v18 = std::string::append(&v28, (const std::string::value_type *)v16, v17);
        long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        int64_t v30 = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)int v29 = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        if ((char)v24 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v28.__r_.__value_.__l.__data_);
        }
        if ((char)v26 < 0) {
          operator delete(v25[0]);
        }
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v27.__r_.__value_.__l.__data_);
        }
        if (v30 >= 0) {
          float v20 = (char *)v29;
        }
        else {
          float v20 = (char *)v29[0];
        }
        MMatrix<float>::print((float **)(a1 + 80), v20, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), 10);
        if (SHIBYTE(v30) < 0) {
          operator delete(v29[0]);
        }
        ++v9;
      }
      while (a5 > 0);
    }
  }
  else
  {
    if (a5 > 0)
    {
      if (*(unsigned char *)(a1 + 232)) {
        int v8 = 0;
      }
      else {
        int v8 = a5 - 1;
      }
      VVector<float>::applyBackwardActivationDerivative((void **)(a1 + 216), *(float **)(*(void *)(a1 + 184) + 8 * v8), *(float **)(*a4 + 8 * v8), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 208));
      VVector<float>::internalMul();
    }
    long long v21 = *(void **)(a1 + 80);
    size_t v22 = 4 * *(int *)(a1 + 56);
    bzero(v21, v22);
  }
}

void sub_19292DC60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void RecurrentLayer<short>::update()
{
}

uint64_t RecurrentLayer<short>::noutputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t RecurrentLayer<short>::ninputs(uint64_t a1)
{
  return *(_DWORD *)(a1 + 44) + *(unsigned __int8 *)(a1 + 40);
}

void RecurrentLayer<short>::allocAllBuffers(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "RecurrentLayer from allocAll");
  (*(void (**)(uint64_t, void **, void, float))(*(void *)a1 + 392))(a1, __p, 0, -0.44);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_19292DE20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RecurrentLayer<short>::unsetSpecialBidir(uint64_t result)
{
  *(unsigned char *)(result + 42) = 0;
  return result;
}

uint64_t RecurrentLayer<short>::setSpecialBidir(uint64_t result)
{
  *(unsigned char *)(result + 42) = 1;
  return result;
}

uint64_t RecurrentLayer<short>::setWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(v2 - 16);
  *(void *)(a2 + 8) = v2 - 16;
  *(void *)(a1 + 64) = v3;
  uint64_t result = a1 + 64;
  *(void *)(result + 312) = result;
  return result;
}

char *RecurrentLayer<short>::getWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = **(void **)(a1 + 376);
  double v4 = *(double *)(a1 + 48);
  int v5 = *(uint64_t **)(a2 + 8);
  if ((unint64_t)v5 >= *(void *)(a2 + 16))
  {
    uint64_t result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v3, v4);
  }
  else
  {
    uint64_t *v5 = v3;
    *((double *)v5 + 1) = v4;
    uint64_t result = (char *)(v5 + 2);
  }
  *(void *)(a2 + 8) = result;
  return result;
}

void RecurrentLayer<short>::clearState(uint64_t a1, void *a2, int *a3)
{
  double v4 = (int *)(*a2 + 16 * *a3);
  bzero(**((void ***)v4 + 1), 4 * *v4);
  ++*a3;
}

void RecurrentLayer<short>::restoreState(uint64_t a1, void *a2, int a3, int *a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 112);
  uint64_t v7 = *a4;
  *a4 = v7 + 1;
  memmove(*(void **)(v6 + 8 * a3), **(const void ***)(*a2 + 16 * v7 + 8), 4 * *(int *)(a1 + 48));
  sprintf(v8, "RNN restore startTimIdx = %d", a3);
  VVector<float>::print((float **)(*(void *)(a1 + 112) + 8 * a3), v8, *(_DWORD *)(a1 + 48));
}

void *RecurrentLayer<short>::saveState(uint64_t a1, uint64_t *a2, int a3, int *a4)
{
  uint64_t v5 = *(int *)(a1 + 48);
  uint64_t v6 = *a2;
  *(_DWORD *)(v6 + 16 * *a4) = v5;
  uint64_t result = memmove(**(void ***)(v6 + 16 * *a4 + 8), *(const void **)(*(void *)(a1 + 112) + 8 * a3), 4 * v5);
  ++*a4;
  return result;
}

void RecurrentLayer<short>::allocInitialState()
{
}

void sub_19292E13C(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

void *RecurrentLayer<short>::addGradient(uint64_t a1, void *lpsrc)
{
  if (lpsrc) {
  else
  }
    uint64_t result = 0;
  uint64_t v4 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
  if ((int)v4 >= 1)
  {
    uint64_t v5 = **(_WORD ***)(a1 + 376);
    uint64_t v6 = (__int16 *)result[8];
    do
    {
      __int16 v7 = *v6++;
      *v5++ += v7;
      --v4;
    }
    while (v4);
  }
  return result;
}

void RecurrentLayer<short>::compareModels(int a1, void *lpsrc, const void *a3)
{
  if (lpsrc) {
  if (a3)
  }
  {
  }
}

void *RecurrentLayer<short>::subtractModels(uint64_t a1, void *lpsrc, const void *a3)
{
  if (lpsrc)
  {
    if (a3)
    {
LABEL_3:
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v5 = 0;
    if (a3) {
      goto LABEL_3;
    }
  }
  uint64_t result = 0;
LABEL_6:
  uint64_t v7 = (*(_DWORD *)(a1 + 52) * *(_DWORD *)(a1 + 48));
  if ((int)v7 >= 1)
  {
    int v8 = (__int16 *)result[8];
    uint64_t v9 = (__int16 *)v5[8];
    int v10 = **(_WORD ***)(a1 + 376);
    do
    {
      __int16 v12 = *v8++;
      __int16 v11 = v12;
      __int16 v13 = *v9++;
      *v10++ = v11 - v13;
      --v7;
    }
    while (v7);
  }
  return result;
}

void RecurrentLayer<short>::write(uint64_t a1, FILE *__stream, __sFILE *a3, int a4, int a5)
{
  NeuralNetwork::writeDimensions(__stream, a3, (int *)*(unsigned int *)(a1 + 48), *(_DWORD *)(a1 + 52));
  if (a4 >= 1)
  {
    int __ptr = *(_DWORD *)(a1 + 208);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    LODWORD(a3->_p) += 4;
  }
  uint64_t v10 = *(void *)(a1 + 376);

  MMatrix<short>::write(v10, __stream, (int *)a3, a5);
}

uint64_t RecurrentLayer<short>::read(uint64_t a1, NeuralNetwork *this, int *a3, int *a4, int *a5)
{
  int v5 = (int)a4;
  *(void *)char v18 = 0;
  NeuralNetwork::readDimensions((uint64_t *)this, (ReadOnlyFile *)&v18[4], v18, a4, a5);
  if (v5 >= 1)
  {
    uint64_t v9 = *((int *)this + 18);
    uint64_t v10 = (int *)(*(void *)this + v9);
    if ((unint64_t)v10 <= *(void *)this + *((void *)this + 1) - 4)
    {
      int v11 = *v10;
      *((_DWORD *)this + 18) = v9 + 4;
    }
    else
    {
      int v11 = 0;
    }
    *(_DWORD *)(a1 + 208) = v11;
  }
  __int16 v12 = (__int16 **)*(unsigned int *)(a1 + 48);
  if (v12 != *(_DWORD *)&v18[4] || (int v13 = *(_DWORD *)(a1 + 52), v13 != *(_DWORD *)v18)) {
    exitFramework(3);
  }
  float v14 = *(char **)(a1 + 376);
  int v15 = *a3;
  int v16 = *(unsigned __int8 *)(a1 + 61);

  return MMatrix<short>::read(v14, (uint64_t)this, v15, v16, v12, v13);
}

uint64_t RecurrentLayer<short>::weightsAreNaN()
{
  return 0;
}

uint64_t RecurrentLayer<short>::inputDeltas(uint64_t a1)
{
  return a1 + 136;
}

uint64_t RecurrentLayer<short>::deltas(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 376))();
}

uint64_t RecurrentLayer<short>::outputs(uint64_t a1)
{
  return a1 + 112;
}

uint64_t RecurrentLayer<short>::inputs(uint64_t a1)
{
  return a1 + 88;
}

void RecurrentLayer<short>::targets()
{
}

void LSTM<short>::init()
{
}

void sub_192932834(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  SparseMatrix<float>::~SparseMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void LSTM<short>::~LSTM(uint64_t a1)
{
  LSTM<short>::~LSTM(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t LSTM<short>::~LSTM(uint64_t a1)
{
  *(void *)a1 = &unk_1EE322CE0;
  LSTM<short>::cleanupAllBuffers((void *)a1);
  uint64_t v2 = *(void *)(a1 + 1552);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 80))(v2);
    *(void *)(a1 + 1552) = 0;
    uint64_t v3 = *(void *)(a1 + 1560);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 80))(v3);
    }
    *(void *)(a1 + 1560) = 0;
    uint64_t v4 = *(void *)(a1 + 1568);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 80))(v4);
    }
    *(void *)(a1 + 1568) = 0;
    uint64_t v5 = *(void *)(a1 + 1576);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 80))(v5);
    }
    *(void *)(a1 + 1576) = 0;
    uint64_t v6 = *(void *)(a1 + 1584);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 80))(v6);
    }
    *(void *)(a1 + 1584) = 0;
    uint64_t v7 = *(void *)(a1 + 1592);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 80))(v7);
    }
    *(void *)(a1 + 1592) = 0;
    uint64_t v8 = *(void *)(a1 + 1600);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 80))(v8);
    }
    *(void *)(a1 + 1600) = 0;
    uint64_t v9 = *(void *)(a1 + 1608);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 80))(v9);
    }
    *(void *)(a1 + 1608) = 0;
  }
  uint64_t v10 = *(void **)(a1 + 2648);
  if (v10)
  {
    *(void *)(a1 + 2656) = v10;
    operator delete(v10);
  }
  int v11 = *(void **)(a1 + 2624);
  if (v11)
  {
    *(void *)(a1 + 2632) = v11;
    operator delete(v11);
  }
  PTMutex::~PTMutex((PTMutex *)(a1 + 2424));
  PTMutex::~PTMutex((PTMutex *)(a1 + 2352));
  PTMutex::~PTMutex((PTMutex *)(a1 + 2280));
  PTMutex::~PTMutex((PTMutex *)(a1 + 2208));
  PTMutex::~PTMutex((PTMutex *)(a1 + 2136));
  PTMutex::~PTMutex((PTMutex *)(a1 + 2064));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1992));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1920));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1848));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1776));
  PTMutex::~PTMutex((PTMutex *)(a1 + 1704));
  SparseMatrix<float>::~SparseMatrix(a1 + 1344);
  SparseMatrix<float>::~SparseMatrix(a1 + 1224);
  SparseMatrix<float>::~SparseMatrix(a1 + 1104);
  SparseMatrix<float>::~SparseMatrix(a1 + 984);
  __int16 v12 = *(void **)(a1 + 960);
  if (v12)
  {
    *(void *)(a1 + 968) = v12;
    operator delete(v12);
  }
  int v13 = *(void **)(a1 + 936);
  if (v13)
  {
    *(void *)(a1 + 944) = v13;
    operator delete(v13);
  }
  float v14 = *(void **)(a1 + 912);
  if (v14)
  {
    *(void *)(a1 + 920) = v14;
    operator delete(v14);
  }
  int v15 = *(void **)(a1 + 888);
  if (v15)
  {
    *(void *)(a1 + 896) = v15;
    operator delete(v15);
  }
  int v16 = *(void **)(a1 + 864);
  if (v16)
  {
    *(void *)(a1 + 872) = v16;
    operator delete(v16);
  }
  std::string::size_type v17 = *(void **)(a1 + 840);
  if (v17)
  {
    *(void *)(a1 + 848) = v17;
    operator delete(v17);
  }
  char v18 = *(void **)(a1 + 816);
  if (v18)
  {
    *(void *)(a1 + 824) = v18;
    operator delete(v18);
  }
  long long v19 = *(void **)(a1 + 792);
  if (v19)
  {
    *(void *)(a1 + 800) = v19;
    operator delete(v19);
  }
  float v20 = *(void **)(a1 + 712);
  if (v20)
  {
    *(void *)(a1 + 720) = v20;
    operator delete(v20);
  }
  long long v21 = *(void **)(a1 + 688);
  if (v21)
  {
    *(void *)(a1 + 696) = v21;
    operator delete(v21);
  }
  size_t v22 = *(void **)(a1 + 664);
  if (v22)
  {
    *(void *)(a1 + 672) = v22;
    operator delete(v22);
  }
  float v23 = *(void **)(a1 + 640);
  if (v23)
  {
    *(void *)(a1 + 648) = v23;
    operator delete(v23);
  }
  unsigned __int8 v24 = *(void **)(a1 + 616);
  if (v24)
  {
    *(void *)(a1 + 624) = v24;
    operator delete(v24);
  }
  uint64_t v25 = *(void **)(a1 + 592);
  if (v25)
  {
    *(void *)(a1 + 600) = v25;
    operator delete(v25);
  }
  unsigned __int8 v26 = *(void **)(a1 + 568);
  if (v26)
  {
    *(void *)(a1 + 576) = v26;
    operator delete(v26);
  }
  std::string v27 = *(void **)(a1 + 544);
  if (v27)
  {
    *(void *)(a1 + 552) = v27;
    operator delete(v27);
  }
  std::string v28 = *(void **)(a1 + 520);
  if (v28)
  {
    *(void *)(a1 + 528) = v28;
    operator delete(v28);
  }
  int v29 = *(void **)(a1 + 496);
  if (v29)
  {
    *(void *)(a1 + 504) = v29;
    operator delete(v29);
  }
  int64_t v30 = *(void **)(a1 + 472);
  if (v30)
  {
    *(void *)(a1 + 480) = v30;
    operator delete(v30);
  }
  uint64_t v31 = *(void **)(a1 + 448);
  if (v31)
  {
    *(void *)(a1 + 456) = v31;
    operator delete(v31);
  }
  uint64_t v32 = *(void **)(a1 + 424);
  if (v32)
  {
    *(void *)(a1 + 432) = v32;
    operator delete(v32);
  }
  int v33 = *(void **)(a1 + 400);
  if (v33)
  {
    *(void *)(a1 + 408) = v33;
    operator delete(v33);
  }
  uint64_t v34 = *(void **)(a1 + 376);
  if (v34)
  {
    *(void *)(a1 + 384) = v34;
    operator delete(v34);
  }
  __int16 v35 = *(void **)(a1 + 352);
  if (v35)
  {
    *(void *)(a1 + 360) = v35;
    operator delete(v35);
  }
  std::string v44 = (void **)(a1 + 208);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v44);
  uint64_t v36 = *(void **)(a1 + 184);
  if (v36)
  {
    *(void *)(a1 + 192) = v36;
    operator delete(v36);
  }
  int v37 = *(void **)(a1 + 160);
  if (v37)
  {
    *(void *)(a1 + 168) = v37;
    operator delete(v37);
  }
  int v38 = *(void **)(a1 + 136);
  if (v38)
  {
    *(void *)(a1 + 144) = v38;
    operator delete(v38);
  }
  uint64_t v39 = *(void **)(a1 + 112);
  if (v39)
  {
    *(void *)(a1 + 120) = v39;
    operator delete(v39);
  }
  uint64_t v40 = *(void **)(a1 + 88);
  if (v40)
  {
    *(void *)(a1 + 96) = v40;
    operator delete(v40);
  }
  __int16 v41 = *(void **)(a1 + 64);
  if (v41)
  {
    *(void *)(a1 + 72) = v41;
    operator delete(v41);
  }
  *(void *)a1 = &unk_1EE3182B8;
  int v42 = *(void **)(a1 + 8);
  if (v42)
  {
    *(void *)(a1 + 16) = v42;
    operator delete(v42);
  }
  return a1;
}

uint64_t LSTM<short>::cleanupAllBuffers(void *a1)
{
  uint64_t v2 = a1[329];
  uint64_t v3 = a1[328];
  if (v2 == v3)
  {
    uint64_t v3 = a1[329];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v3 + 8 * v4);
      if (v5)
      {
        MEMORY[0x192FF1690](v5, 0x1000C8052888210);
        uint64_t v2 = a1[329];
        uint64_t v3 = a1[328];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  uint64_t v6 = a1[332];
  uint64_t v7 = a1[331];
  if (v6 == v7)
  {
    uint64_t v7 = a1[332];
  }
  else
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(v7 + 8 * v8);
      if (v9)
      {
        MEMORY[0x192FF1690](v9, 0x1000C80BDFB0063);
        uint64_t v6 = a1[332];
        uint64_t v7 = a1[331];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
    uint64_t v3 = a1[328];
  }
  a1[329] = v3;
  a1[332] = v7;
  SparseMatrix<float>::cleanupAllBuffers(a1 + 123);
  SparseMatrix<float>::cleanupAllBuffers(a1 + 153);
  SparseMatrix<float>::cleanupAllBuffers(a1 + 138);

  return SparseMatrix<float>::cleanupAllBuffers(a1 + 168);
}

void LSTM<short>::log2Probability()
{
}

void LSTM<short>::computeError()
{
}

void LSTM<short>::updateFrom(uint64_t a1, void *lpsrc)
{
  if (!*(_DWORD *)(a1 + 2496))
  {
    exitFramework(34);
  }
  exitFramework(1);
}

char *LSTM<short>::setMaster(uint64_t a1, void *lpsrc)
{
  if (*(_DWORD *)(a1 + 2496) != 1) {
    exitFramework(1);
  }
  if (!result) {
    __cxa_bad_cast();
  }
  *(void *)(a1 + 2504) = result + 232;
  *(void *)(a1 + 2520) = result + 248;
  *(void *)(a1 + 2512) = result + 240;
  *(void *)(a1 + 2528) = result + 256;
  *(void *)(a1 + 2536) = result + 264;
  *(void *)(a1 + 2552) = result + 280;
  *(void *)(a1 + 2544) = result + 272;
  *(void *)(a1 + 2560) = result + 288;
  *(void *)(a1 + 2568) = result + 296;
  *(void *)(a1 + 2576) = result + 304;
  *(void *)(a1 + 2584) = result + 312;
  *(void *)(a1 + 2592) = result + 320;
  *(void *)(a1 + 2600) = result + 328;
  *(void *)(a1 + 2608) = result + 336;
  *(void *)(a1 + 2616) = result + 344;
  return result;
}

uint64_t LSTM<short>::reverseBackward(unsigned char *a1)
{
  a1[2672] = 1;
  uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 296))(a1);
  a1[2672] = 0;
  return result;
}

uint64_t LSTM<short>::reverseForward(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  a1[2672] = 1;
  {
    uint64_t v13 = a6;
    uint64_t v12 = a5;
    unsigned int v11 = a4;
    uint64_t v9 = a2;
    uint64_t v10 = a3;
    a2 = v9;
    a3 = v10;
    a4 = v11;
    a5 = v12;
    a6 = v13;
    if (v8)
    {
      LSTM<short>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy = 0;
      unk_1E9307AD0 = 0;
      qword_1E9307AD8 = 0;
      __cxa_atexit((void (*)(void *))std::vector<int>::~vector[abi:ne180100], &LSTM<short>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy, &dword_1920CB000);
      a2 = v9;
      a3 = v10;
      a4 = v11;
      a5 = v12;
      a6 = v13;
    }
  }
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 304))(a1, a2, a3, a4, a5, a6, &LSTM<short>::reverseForward(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,int,std::vector<std::pair<int,VVector<float>*>> *,int &)::dummy);
  a1[2672] = 0;
  return result;
}

void LSTM<short>::forward(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5)
{
  if (a4 < 0x2000000) {
    int v8 = 1;
  }
  else {
    int v8 = HIBYTE(a4);
  }
  uint64_t v9 = *(void *)(a1 + 2680);
  if (v9) {
    BOOL v95 = *(unsigned char *)(v9 + 600) != 0;
  }
  else {
    BOOL v95 = 0;
  }
  if (a3[1] == *a3 || *(int *)(a1 + 56) < 1)
  {
    int v10 = 0;
  }
  else
  {
    int v10 = (**(uint64_t (***)(uint64_t))a1)(a1);
    uint64_t v9 = *(void *)(a1 + 2680);
  }
  int v102 = v10;
  if (!v9 || (float v11 = *(float *)(v9 + 604), v11 <= 0.0)) {
    float v11 = 50.0;
  }
  int v12 = *(unsigned __int8 *)(a1 + 2672);
  std::string::basic_string[abi:ne180100]<0>(v116, "LSTMv2");
  if (a5 && v12) {
    exitFramework(34);
  }
  unsigned int v13 = a4 & 0xFFFFFF;
  if (v117 < 0) {
    operator delete(v116[0]);
  }
  if (a5) {
    BOOL v14 = *(unsigned char *)(a1 + 42) == 0;
  }
  else {
    BOOL v14 = 0;
  }
  unsigned int v15 = v14;
  int v16 = v102;
  if (v13 > v15)
  {
    int v98 = v8;
    signed int v99 = v13 - 1;
    uint64_t v96 = (uint64_t *)(a1 + 752);
    int v97 = a4 & 0xFFFFFF;
    do
    {
      if (*(unsigned char *)(a1 + 2672)) {
        signed int v17 = v13 + ~v15;
      }
      else {
        signed int v17 = v15;
      }
      if (*(unsigned char *)(a1 + 2672)) {
        int v18 = 1;
      }
      else {
        int v18 = -1;
      }
      if (*(unsigned char *)(a1 + 2672)) {
        BOOL v19 = v17 < v99;
      }
      else {
        BOOL v19 = v17 > 0;
      }
      BOOL v103 = v19;
      int v20 = *(unsigned __int8 *)(a1 + 42);
      uint64_t v21 = v17;
      if (((*(unsigned char *)(a1 + 42) != 0) & v16) != 0) {
        uint64_t v22 = 1;
      }
      else {
        uint64_t v22 = v17;
      }
      uint64_t v23 = *(void *)(a1 + 64);
      if (v16)
      {
        bzero(*(void **)(v23 + 8 * v22), 4 * *(int *)(a1 + 48));
        *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8 * v22) + 4 * **(int **)(*a3 + 24 * v17)) = 1065353216;
      }
      else
      {
        memmove(*(void **)(v23 + 8 * v22), *(const void **)(*a2 + 8 * v22), 4 * *(int *)(a1 + 44));
      }
      int v24 = *(unsigned __int8 *)(a1 + 40);
      if (*(unsigned char *)(a1 + 40)) {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 64) + 8 * v22) + 4 * *(int *)(a1 + 48) - 4) = 1065353216;
      }
      if (v16)
      {
        int v25 = *(_DWORD *)(a1 + 48);
        unsigned __int8 v26 = *(_DWORD **)(*(void *)(a1 + 208) + 24 * v17);
        _DWORD *v26 = **(_DWORD **)(*a3 + 24 * v17);
        if (v24) {
          v26[1] = v25 - 1;
        }
      }
      uint64_t v27 = *(void *)(a1 + 136);
      if (v8 == 1) {
        memcpy(*(void **)(v27 + 8 * v22), *(const void **)(*(void *)(a1 + 64) + 8 * v22), 4 * *(int *)(a1 + 48));
      }
      else {
        memmove(*(void **)(v27 + 8 * v22), *(const void **)(*a2 + 8 * v22), 4 * *(_DWORD *)(a1 + 44) * v8);
      }
      if (v8 > *(_DWORD *)(a1 + 2688)) {
        exitFramework(83724);
      }
      if (v20) {
        uint64_t v28 = 1;
      }
      else {
        uint64_t v28 = v17;
      }
      if (*(unsigned char *)(a1 + 2692))
      {
        bzero(*(void **)(*(void *)(a1 + 544) + 8 * v28), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(void *)(a1 + 568) + 8 * v28), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(void *)(a1 + 616) + 8 * v28), 4 * *(int *)(a1 + 52));
        bzero(*(void **)(*(void *)(a1 + 592) + 8 * v28), 4 * *(int *)(a1 + 52));
      }
      bzero(*(void **)(*(void *)(a1 + 352) + 8 * v28), 4 * *(_DWORD *)(a1 + 52) * v8);
      bzero(*(void **)(*(void *)(a1 + 376) + 8 * v28), 4 * *(_DWORD *)(a1 + 52) * v8);
      bzero(*(void **)(*(void *)(a1 + 400) + 8 * v28), 4 * *(_DWORD *)(a1 + 52) * v8);
      bzero(*(void **)(*(void *)(a1 + 424) + 8 * v28), 4 * *(_DWORD *)(a1 + 52) * v8);
      uint64_t v29 = *(void *)(a1 + 2680);
      if (v29)
      {
        int v30 = *(_DWORD *)(v29 + 40);
        BOOL v31 = !*(unsigned char *)(v29 + 20) && (v30 == 5 || v30 == 2) && *(_DWORD *)(v29 + 44) == 6;
        if (v30 == 5 || v30 == 2)
        {
          if (v31) {
            goto LABEL_148;
          }
          BOOL v14 = *(_DWORD *)(v29 + 60) == 22;
          char v32 = v14;
          BOOL v33 = v103;
          if (!v14) {
            BOOL v33 = 0;
          }
          if (v33) {
LABEL_148:
          }
            LSTM<short>::computeXTimesWSparseOrDenseCombined(a1);
          goto LABEL_70;
        }
        if (v31) {
          goto LABEL_148;
        }
      }
      char v32 = 0;
LABEL_70:
      uint64_t v34 = *(void *)(a1 + 208) + 24 * v17;
      LSTM<short>::computeXTimesWSparseOrDense(a1, v16, (const float **)(*(void *)(a1 + 424) + 8 * v28), *(uint64_t **)(a1 + 2528), *(const void **)v34, *(void *)(v34 + 8), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
      if (v103 && (v32 & 1) == 0) {
LABEL_147:
      }
        exitFramework(34);
      uint64_t v35 = *(void *)(a1 + 2680);
      std::string::basic_string[abi:ne180100]<0>(v116, "cix");
      if (v35 && *(unsigned char *)(v35 + 244)) {
        exitFramework(200);
      }
      if (v117 < 0) {
        operator delete(v116[0]);
      }
      uint64_t v36 = (uint64_t *)(*(void *)(a1 + 424) + 8 * v28);
      int v37 = *(_DWORD *)(a1 + 52);
      uint64_t v38 = (v37 * v8);
      if ((int)v38 >= 1)
      {
        uint64_t v39 = (float *)*v36;
        do
        {
          int v40 = -1035468800;
          if (*v39 < -50.0 || (int v40 = 1112014848, *v39 > 50.0)) {
            *(_DWORD *)uint64_t v39 = v40;
          }
          ++v39;
          --v38;
        }
        while (v38);
      }
      applyForwardActivation((uint64_t *)(*(void *)(a1 + 520) + 8 * v28), v36, v8, v37, *(_DWORD *)(a1 + 740));
      uint64_t v41 = *(void *)(a1 + 208) + 24 * v17;
      LSTM<short>::computeXTimesWSparseOrDense(a1, v16, (const float **)(*(void *)(a1 + 352) + 8 * v28), *(uint64_t **)(a1 + 2504), *(const void **)v41, *(void *)(v41 + 8), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
      uint64_t v42 = *(void *)(a1 + 2680);
      std::string::basic_string[abi:ne180100]<0>(&v114, "gix");
      if (v42 && *(unsigned char *)(v42 + 244)) {
        exitFramework(200);
      }
      if (v115 < 0) {
        operator delete(v114);
      }
      int v43 = v17 + v18;
      if (v103)
      {
        if ((v32 & 1) == 0) {
          goto LABEL_147;
        }
        uint64_t v44 = *(void *)(a1 + 2680);
        uint64_t v45 = *(void *)(a1 + 352);
        long long v46 = *(__int16 ***)(a1 + 2568);
        uint64_t v47 = *(void *)(a1 + 184);
        int v48 = *(_DWORD *)(a1 + 52);
        std::string::basic_string[abi:ne180100]<0>(&__p, "gix");
        __int16 v49 = *(float **)(v45 + 8 * v28);
        int v8 = v98;
        LSTM<short>::addOptionalPeepholeVector(a1, v44, v49, v46, *(float **)(v47 + 8 * v43), v98, v48);
        if (v113 < 0) {
          operator delete(__p);
        }
        char v32 = 1;
        int v16 = v102;
      }
      uint64_t v50 = (uint64_t *)(*(void *)(a1 + 352) + 8 * v28);
      int v51 = *(_DWORD *)(a1 + 52);
      uint64_t v52 = (v51 * v8);
      if ((int)v52 >= 1)
      {
        long long v53 = (float *)*v50;
        do
        {
          int v54 = -1035468800;
          if (*v53 < -50.0 || (int v54 = 1112014848, *v53 > 50.0)) {
            *(_DWORD *)long long v53 = v54;
          }
          ++v53;
          --v52;
        }
        while (v52);
      }
      applyForwardActivation((uint64_t *)(*(void *)(a1 + 448) + 8 * v28), v50, v8, v51, *(_DWORD *)(a1 + 736));
      uint64_t v55 = *(void *)(a1 + 208) + 24 * (int)v21;
      LSTM<short>::computeXTimesWSparseOrDense(a1, v16, (const float **)(*(void *)(a1 + 376) + 8 * v28), *(uint64_t **)(a1 + 2512), *(const void **)v55, *(void *)(v55 + 8), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48));
      uint64_t v56 = *(void *)(a1 + 2680);
      std::string::basic_string[abi:ne180100]<0>(&v110, "gfx");
      if (v56 && *(unsigned char *)(v56 + 244)) {
        exitFramework(200);
      }
      if (v111 < 0) {
        operator delete(v110);
      }
      if (v103)
      {
        if ((v32 & 1) == 0) {
          goto LABEL_147;
        }
        uint64_t v57 = *(void *)(a1 + 2680);
        uint64_t v58 = *(void *)(a1 + 376);
        BOOL v59 = *(__int16 ***)(a1 + 2576);
        uint64_t v60 = *(void *)(a1 + 184);
        int v61 = *(_DWORD *)(a1 + 52);
        std::string::basic_string[abi:ne180100]<0>(&v108, "gfx");
        long long v62 = *(float **)(v60 + 8 * v43);
        int v8 = v98;
        LSTM<short>::addOptionalPeepholeVector(a1, v57, *(float **)(v58 + 8 * v28), v59, v62, v98, v61);
        int v16 = v102;
        if (v109 < 0) {
          operator delete(v108);
        }
      }
      uint64_t v63 = *(void *)(a1 + 2680);
      if (v63)
      {
        int v64 = *(_DWORD *)(a1 + 52);
        if (*(unsigned char *)(v63 + 601))
        {
          uint64_t v65 = (v64 * v8);
          if ((int)v65 >= 1)
          {
            uint64_t v66 = *(float **)(*(void *)(a1 + 376) + 8 * v28);
            do
            {
              *uint64_t v66 = *v66 + 1.0;
              ++v66;
              --v65;
            }
            while (v65);
          }
        }
      }
      else
      {
        int v64 = *(_DWORD *)(a1 + 52);
      }
      uint64_t v67 = (uint64_t *)(*(void *)(a1 + 376) + 8 * v28);
      uint64_t v68 = (v64 * v8);
      if ((int)v68 >= 1)
      {
        BOOL v69 = (float *)*v67;
        do
        {
          int v70 = -1035468800;
          if (*v69 < -50.0 || (int v70 = 1112014848, *v69 > 50.0)) {
            *(_DWORD *)BOOL v69 = v70;
          }
          ++v69;
          --v68;
        }
        while (v68);
      }
      applyForwardActivation((uint64_t *)(*(void *)(a1 + 472) + 8 * v28), v67, v8, v64, *(_DWORD *)(a1 + 736));
      VVector<float>::mulV((float32x4_t **)(*(void *)(a1 + 184) + 8 * v21), (float32x4_t **)(*(void *)(a1 + 520) + 8 * v28), (float32x4_t **)(*(void *)(a1 + 448) + 8 * v28), *(_DWORD *)(a1 + 52) * v8);
      if (v103)
      {
        if (v95)
        {
          uint64_t v71 = (*(_DWORD *)(a1 + 52) * v8);
          if ((int)v71 >= 1)
          {
            uint64_t v72 = *(void *)(a1 + 184);
            uint64_t v73 = *(float **)(v72 + 8 * v43);
            uint64_t v74 = *(float **)(*(void *)(a1 + 448) + 8 * v28);
            uint64_t v75 = *(float **)(v72 + 8 * v21);
            do
            {
              float v76 = *v73++;
              float v77 = v76;
              float v78 = *v74++;
              *uint64_t v75 = *v75 + (float)(v77 * (float)(1.0 - v78));
              ++v75;
              --v71;
            }
            while (v71);
          }
        }
        else
        {
          VVector<float>::mulAddV((float32x4_t **)(*(void *)(a1 + 184) + 8 * v21), (float32x4_t **)(*(void *)(a1 + 472) + 8 * v28), (float32x4_t **)(*(void *)(a1 + 184) + 8 * v43), *(_DWORD *)(a1 + 52) * v8);
        }
      }
      int v79 = *(_DWORD *)(a1 + 52);
      uint64_t v80 = (v79 * v8);
      if ((int)v80 >= 1)
      {
        int v81 = *(float **)(*(void *)(a1 + 184) + 8 * v21);
        do
        {
          float v82 = -v11;
          if (*v81 < (float)-v11 || (float v82 = v11, *v81 > v11)) {
            *int v81 = v82;
          }
          ++v81;
          --v80;
        }
        while (v80);
      }
      uint64_t v83 = *(void *)(a1 + 208) + 24 * (int)v21;
      LSTM<short>::computeXTimesWSparseOrDense(a1, v16, (const float **)(*(void *)(a1 + 400) + 8 * v28), *(uint64_t **)(a1 + 2520), *(const void **)v83, *(void *)(v83 + 8), v8, v79, *(_DWORD *)(a1 + 48));
      uint64_t v84 = *(void *)(a1 + 2680);
      std::string::basic_string[abi:ne180100]<0>(&v106, "gox");
      if (v84 && *(unsigned char *)(v84 + 244)) {
        exitFramework(200);
      }
      if (v107 < 0) {
        operator delete(v106);
      }
      uint64_t v85 = *(void *)(a1 + 2680);
      uint64_t v86 = *(void *)(a1 + 400);
      int64_t v87 = *(__int16 ***)(a1 + 2584);
      uint64_t v88 = *(void *)(a1 + 184);
      int v89 = *(_DWORD *)(a1 + 52);
      std::string::basic_string[abi:ne180100]<0>(&v104, "gox");
      LSTM<short>::addOptionalPeepholeVector(a1, v85, *(float **)(v86 + 8 * v28), v87, *(float **)(v88 + 8 * v21), v8, v89);
      if (v105 < 0) {
        operator delete(v104);
      }
      uint64_t v90 = (uint64_t *)(*(void *)(a1 + 400) + 8 * v28);
      int v91 = *(_DWORD *)(a1 + 52);
      uint64_t v92 = (v91 * v8);
      int v16 = v102;
      unsigned int v13 = v97;
      if ((int)v92 >= 1)
      {
        uint64_t v93 = (float *)*v90;
        do
        {
          int v94 = -1035468800;
          if (*v93 < -50.0 || (int v94 = 1112014848, *v93 > 50.0)) {
            *(_DWORD *)uint64_t v93 = v94;
          }
          ++v93;
          --v92;
        }
        while (v92);
      }
      applyForwardActivation((uint64_t *)(*(void *)(a1 + 496) + 8 * v28), v90, v8, v91, *(_DWORD *)(a1 + 736));
      applyForwardActivation(v96, (uint64_t *)(*(void *)(a1 + 184) + 8 * v21), v8, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 744));
      VVector<float>::mulV((float32x4_t **)(*(void *)(a1 + 160) + 8 * v21), (float32x4_t **)v96, (float32x4_t **)(*(void *)(a1 + 496) + 8 * v28), *(_DWORD *)(a1 + 52) * v8);
      if (*(unsigned char *)(a1 + 2692))
      {
        memcpy(*(void **)(*(void *)(a1 + 112) + 8 * v21), *(const void **)(*(void *)(a1 + 160) + 8 * v21), 4 * *(int *)(a1 + 52));
        memcpy(*(void **)(*(void *)(a1 + 88) + 8 * v21), *(const void **)(*(void *)(a1 + 184) + 8 * v21), 4 * *(int *)(a1 + 52));
      }
      ++v15;
    }
    while (v15 != v97);
  }
}

void sub_192933B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (*(char *)(v34 - 121) < 0) {
    operator delete(*(void **)(v34 - 144));
  }
  _Unwind_Resume(exception_object);
}

void LSTM<short>::computeXTimesWSparseOrDenseCombined(uint64_t a1)
{
  if (!*(void *)(a1 + 784)) {
    operator new[]();
  }
  exitFramework(34);
}

void LSTM<short>::computeXTimesWSparseOrDense(uint64_t a1, int a2, const float **a3, uint64_t *a4, const void *a5, uint64_t a6, int a7, int a8, int a9)
{
  if (!a2) {
    exitFramework(34);
  }
  if (a7 != 1) {
    exitFramework(502);
  }
  int v12 = (float **)(a1 + 760);
  std::string __p = 0;
  BOOL v14 = 0;
  uint64_t v15 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, a5, a6, (a6 - (uint64_t)a5) >> 2);
  VVector<float>::internalMul(v12, (int *)__p, v14, *a4, a8, a9);
  if (__p)
  {
    BOOL v14 = (int *)__p;
    operator delete(__p);
  }
  vDSP_vadd(*v12, 1, *a3, 1, (float *)*a3, 1, a8);
}

uint64_t LSTM<short>::addOptionalPeepholeVector(uint64_t result, uint64_t a2, float *a3, __int16 **a4, float *a5, int a6, int a7)
{
  if (a2)
  {
    if (*(unsigned char *)(a2 + 520)) {
      BOOL v7 = a6 <= 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7) {
      return result;
    }
  }
  else if (a6 < 1)
  {
    return result;
  }
  uint64_t v8 = 0;
  uint64_t v9 = *(unsigned int *)(result + 52);
  uint64_t v10 = 4 * a7;
  do
  {
    if ((int)v9 >= 1)
    {
      float v11 = *a4;
      int v12 = a5;
      unsigned int v13 = a3;
      uint64_t result = v9;
      do
      {
        int v15 = *v11++;
        int v14 = v15;
        float v16 = -5.0;
        if (v15 >= -32766)
        {
          float v16 = 5.0;
          if (v14 != 0x7FFF) {
            float v16 = (float)v14 * 0.00015259;
          }
        }
        float v17 = *v12++;
        *unsigned int v13 = *v13 + (float)(v16 * v17);
        ++v13;
        --result;
      }
      while (result);
    }
    ++v8;
    a3 = (float *)((char *)a3 + v10);
    a5 = (float *)((char *)a5 + v10);
  }
  while (v8 != a6);
  return result;
}

void LSTM<short>::backward(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5)
{
  int v89 = a5 - 1;
  if (a5 >= 1)
  {
    uint64_t v85 = (void **)(a1 + 1648);
    uint64_t v6 = (void **)(a1 + 1656);
    BOOL v7 = (float **)(a1 + 1672);
    uint64_t v80 = (void **)(a1 + 1688);
    int v81 = (float **)(a1 + 1680);
    int v8 = a5 - 1;
    float v82 = (void **)(a1 + 1664);
    do
    {
      uint64_t v9 = v7;
      uint64_t v10 = v6;
      int v11 = v89 - v8;
      if (*(unsigned char *)(a1 + 2672))
      {
        BOOL v12 = v11 < v89;
      }
      else
      {
        int v11 = v8;
        BOOL v12 = v8 > 0;
      }
      BOOL v86 = v12;
      if (*(unsigned char *)(a1 + 2672)) {
        BOOL v13 = v11 > 0;
      }
      else {
        BOOL v13 = v11 < v89;
      }
      if (*(unsigned char *)(a1 + 2672)) {
        int v14 = v11 - 1;
      }
      else {
        int v14 = v11 + 1;
      }
      if (*(unsigned char *)(a1 + 2672)) {
        int v15 = v11 + 1;
      }
      else {
        int v15 = v11 - 1;
      }
      int v84 = v15;
      uint64_t v16 = v11;
      memmove(*(void **)(*(void *)(a1 + 840) + 8 * v11), *(const void **)(*a4 + 8 * v11), 4 * *(int *)(a1 + 52));
      BOOL v87 = v13;
      if (v13) {
        VVector<float>::internalMul();
      }
      float v17 = *(float **)(*(void *)(a1 + 352) + 8 * v16);
      int v18 = *(float **)(*(void *)(a1 + 376) + 8 * v16);
      BOOL v19 = *(float **)(*(void *)(a1 + 424) + 8 * v16);
      int v20 = *(float **)(*(void *)(a1 + 400) + 8 * v16);
      uint64_t v21 = *(float32x4_t **)(*(void *)(a1 + 448) + 8 * v16);
      BOOL v103 = *(float32x4_t **)(*(void *)(a1 + 496) + 8 * v16);
      uint64_t v104 = v21;
      VVector<float>::applyPrimeDerivative((void **)(a1 + 1640), v20, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      VVector<float>::applyPrimeDerivative(v85, v18, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      uint64_t v6 = v10;
      VVector<float>::applyPrimeDerivative(v10, v17, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 736));
      BOOL v7 = v9;
      VVector<float>::applyForwardActivation(v9, v19, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 740));
      VVector<float>::applyPrimeDerivative(v82, v19, *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 740));
      VVector<float>::applyForwardActivation(v81, *(float **)(*(void *)(a1 + 88) + 8 * v16), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 744));
      VVector<float>::applyPrimeDerivative(v80, *(float **)(*(void *)(a1 + 88) + 8 * v16), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 744));
      VVector<float>::mul((void **)(*(void *)(a1 + 864) + 8 * v16), (float32x4_t **)(a1 + 1640), (float32x4_t **)v81, (float32x4_t **)(*(void *)(a1 + 840) + 8 * v16), *(_DWORD *)(a1 + 52));
      VVector<float>::mul((void **)(*(void *)(a1 + 960) + 8 * v16), (float32x4_t **)v80, &v103, (float32x4_t **)(*(void *)(a1 + 840) + 8 * v16), *(_DWORD *)(a1 + 52));
      uint64_t v22 = *(void *)(a1 + 960);
      uint64_t v23 = (float32x4_t **)(v22 + 8 * v16);
      uint64_t v24 = *(unsigned int *)(a1 + 52);
      if ((int)v24 < 1)
      {
        if (!v87)
        {
          BOOL v33 = v86;
          goto LABEL_30;
        }
        uint64_t v34 = v14;
        int v102 = *(float32x4_t **)(*(void *)(a1 + 472) + 8 * v14);
        BOOL v33 = v86;
      }
      else
      {
        int v25 = *(float **)(*(void *)(a1 + 864) + 8 * v16);
        unsigned __int8 v26 = **(__int16 ***)(a1 + 2584);
        uint64_t v27 = *v23;
        uint64_t v28 = (float *)*v23;
        uint64_t v29 = *(unsigned int *)(a1 + 52);
        do
        {
          float v30 = *v25++;
          float v31 = v30;
          int v32 = *v26++;
          *uint64_t v28 = *v28 + (float)(v31 * (float)v32);
          ++v28;
          --v29;
        }
        while (v29);
        BOOL v33 = v86;
        if (!v87) {
          goto LABEL_30;
        }
        uint64_t v34 = v14;
        int v102 = *(float32x4_t **)(*(void *)(a1 + 472) + 8 * v14);
        uint64_t v35 = *(float **)(*(void *)(a1 + 888) + 8 * v14);
        uint64_t v36 = **(__int16 ***)(a1 + 2576);
        int v37 = (float *)v27;
        uint64_t v38 = v24;
        do
        {
          float v39 = *v35++;
          float v40 = v39;
          int v41 = *v36++;
          float *v37 = *v37 + (float)(v40 * (float)v41);
          ++v37;
          --v38;
        }
        while (v38);
        uint64_t v42 = *(float **)(*(void *)(a1 + 912) + 8 * v14);
        int v43 = **(__int16 ***)(a1 + 2568);
        uint64_t v44 = v24;
        do
        {
          float v45 = *v42++;
          float v46 = v45;
          int v47 = *v43++;
          v27->f32[0] = v27->f32[0] + (float)(v46 * (float)v47);
          uint64_t v27 = (float32x4_t *)((char *)v27 + 4);
          --v44;
        }
        while (v44);
      }
      VVector<float>::mulAddV(v23, (float32x4_t **)(v22 + 8 * v34), &v102, v24);
      uint64_t v22 = *(void *)(a1 + 960);
      LODWORD(v24) = *(_DWORD *)(a1 + 52);
LABEL_30:
      VVector<float>::mul((void **)(*(void *)(a1 + 936) + 8 * v16), (float32x4_t **)v82, (float32x4_t **)(v22 + 8 * v16), &v104, v24);
      if (v33) {
        VVector<float>::mul((void **)(*(void *)(a1 + 888) + 8 * v16), (float32x4_t **)v85, (float32x4_t **)(*(void *)(a1 + 960) + 8 * v16), (float32x4_t **)(*(void *)(a1 + 88) + 8 * v84), *(_DWORD *)(a1 + 52));
      }
      v48.n128_f32[0] = VVector<float>::mul((void **)(*(void *)(a1 + 912) + 8 * v16), (float32x4_t **)v10, (float32x4_t **)(*(void *)(a1 + 960) + 8 * v16), (float32x4_t **)v9, *(_DWORD *)(a1 + 52));
      if (((**(uint64_t (***)(uint64_t, __n128))a1)(a1, v48) & 1) == 0)
      {
        bzero(*(void **)(*(void *)(a1 + 816) + 8 * v16), 4 * *(int *)(a1 + 48));
        VVector<float>::internalMul();
      }
    }
    while (v8-- > 0);
  }
  uint64_t v50 = *(unsigned int *)(a1 + 52);
  if ((int)v50 <= 0)
  {
    uint64_t v52 = (float32x4_t **)(a1 + 1536);
    uint64_t v88 = (float32x4_t **)(a1 + 1544);
  }
  else
  {
    size_t v51 = 4 * v50;
    bzero(*(void **)(a1 + 1528), 4 * v50);
    uint64_t v52 = (float32x4_t **)(a1 + 1536);
    bzero(*(void **)(a1 + 1536), v51);
    uint64_t v88 = (float32x4_t **)(a1 + 1544);
    bzero(*(void **)(a1 + 1544), v51);
  }
  if (*(int *)(a1 + 56) > 0)
  {
    *(_DWORD *)(a1 + 1000) = 0;
    *(_DWORD *)(a1 + 1240) = 0;
    *(_DWORD *)(a1 + 1120) = 0;
    *(_DWORD *)(a1 + 1360) = 0;
  }
  if (a5 > 1)
  {
    int v53 = 1;
    int v54 = a5 - 2;
    do
    {
      if (*(unsigned char *)(a1 + 2672)) {
        int v55 = v54;
      }
      else {
        int v55 = v53;
      }
      if (*(unsigned char *)(a1 + 2672)) {
        int v56 = 1;
      }
      else {
        int v56 = -1;
      }
      int v57 = v55 + v56;
      if (*(unsigned char *)(a1 + 2672)) {
        int v58 = a5 - 2;
      }
      else {
        int v58 = 1;
      }
      BOOL v59 = v55 == v58;
      VVector<float>::mulAddV((float32x4_t **)(a1 + 1528), (float32x4_t **)(*(void *)(a1 + 912) + 8 * v55), (float32x4_t **)(*(void *)(a1 + 88) + 8 * v57), *(_DWORD *)(a1 + 52));
      VVector<float>::mulAddV(v52, (float32x4_t **)(*(void *)(a1 + 888) + 8 * v55), (float32x4_t **)(*(void *)(a1 + 88) + 8 * v57), *(_DWORD *)(a1 + 52));
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 912) + 8 * v55), (const float **)(*(void *)(a1 + 112) + 8 * v57), (void **)(a1 + 1496), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v59);
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 888) + 8 * v55), (const float **)(*(void *)(a1 + 112) + 8 * v57), (void **)(a1 + 1504), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v59);
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 864) + 8 * v55), (const float **)(*(void *)(a1 + 112) + 8 * v57), (void **)(a1 + 1512), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v59);
      VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 936) + 8 * v55), (const float **)(*(void *)(a1 + 112) + 8 * v57), (void **)(a1 + 1520), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 52), v59);
      ++v53;
      --v54;
    }
    while (v54 != -1);
    int v60 = 1;
    int v61 = a5 - 2;
    do
    {
      if (*(unsigned char *)(a1 + 2672)) {
        int v62 = v61;
      }
      else {
        int v62 = v60;
      }
      if (*(unsigned char *)(a1 + 2672)) {
        int v63 = a5 - 2;
      }
      else {
        int v63 = 1;
      }
      if (a3[1] == *a3 || *(int *)(a1 + 56) < 1 || !(**(unsigned int (***)(uint64_t))a1)(a1))
      {
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 888) + 8 * v62), (const float **)(*(void *)(a1 + 64) + 8 * v62), (void **)(a1 + 1472), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v62 == v63);
      }
      else
      {
        uint64_t v64 = *(void *)(a1 + 888);
        uint64_t v65 = *(void *)(a1 + 208) + 24 * v62;
        std::vector<int>::pointer v100 = 0;
        uint64_t v101 = 0;
        signed int v99 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v99, *(const void **)v65, *(void *)(v65 + 8), (uint64_t)(*(void *)(v65 + 8) - *(void *)v65) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 1104, *(int **)(v64 + 8 * v62), (uint64_t)v99, *(_DWORD *)(a1 + 52));
        if (v99)
        {
          std::vector<int>::pointer v100 = v99;
          operator delete(v99);
        }
      }
      ++v60;
      --v61;
    }
    while (v61 != -1);
  }
  if (a5 >= 1)
  {
    int v66 = 0;
    int v67 = v89;
    do
    {
      if (*(unsigned char *)(a1 + 2672)) {
        int v68 = v67;
      }
      else {
        int v68 = v66;
      }
      if (*(unsigned char *)(a1 + 2672)) {
        int v69 = v89;
      }
      else {
        int v69 = 0;
      }
      uint64_t v70 = v68;
      VVector<float>::mulAddV(v88, (float32x4_t **)(*(void *)(a1 + 864) + 8 * v68), (float32x4_t **)(*(void *)(a1 + 88) + 8 * v68), *(_DWORD *)(a1 + 52));
      if (a3[1] == *a3 || *(int *)(a1 + 56) < 1)
      {
        BOOL v77 = v70 == v69;
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 912) + 8 * v70), (const float **)(*(void *)(a1 + 64) + 8 * v70), (void **)(a1 + 1464), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v77);
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 864) + 8 * v70), (const float **)(*(void *)(a1 + 64) + 8 * v70), (void **)(a1 + 1480), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v77);
        VVector<float>::sumOuterProdWithInitFlag((const float **)(*(void *)(a1 + 936) + 8 * v70), (const float **)(*(void *)(a1 + 64) + 8 * v70), (void **)(a1 + 1488), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), v77);
      }
      else
      {
        uint64_t v71 = *(void *)(a1 + 912);
        uint64_t v72 = *(void *)(a1 + 208) + 24 * (int)v70;
        int v97 = 0;
        uint64_t v98 = 0;
        std::string __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)v72, *(void *)(v72 + 8), (uint64_t)(*(void *)(v72 + 8) - *(void *)v72) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 984, *(int **)(v71 + 8 * v70), (uint64_t)__p, *(_DWORD *)(a1 + 52));
        if (__p)
        {
          int v97 = __p;
          operator delete(__p);
        }
        uint64_t v73 = *(void *)(a1 + 864);
        uint64_t v74 = *(void *)(a1 + 208) + 24 * (int)v70;
        int v94 = 0;
        uint64_t v95 = 0;
        uint64_t v93 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v93, *(const void **)v74, *(void *)(v74 + 8), (uint64_t)(*(void *)(v74 + 8) - *(void *)v74) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 1224, *(int **)(v73 + 8 * v70), (uint64_t)v93, *(_DWORD *)(a1 + 52));
        if (v93)
        {
          int v94 = v93;
          operator delete(v93);
        }
        uint64_t v75 = *(void *)(a1 + 936);
        uint64_t v76 = *(void *)(a1 + 208) + 24 * (int)v70;
        int v91 = 0;
        uint64_t v92 = 0;
        uint64_t v90 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v90, *(const void **)v76, *(void *)(v76 + 8), (uint64_t)(*(void *)(v76 + 8) - *(void *)v76) >> 2);
        SparseMatrix<float>::sum<float>(a1 + 1344, *(int **)(v75 + 8 * v70), (uint64_t)v90, *(_DWORD *)(a1 + 52));
        if (v90)
        {
          int v91 = v90;
          operator delete(v90);
        }
      }
      ++v66;
      --v67;
    }
    while (v67 != -1);
  }
}

uint64_t LSTM<short>::update(uint64_t result, float a2)
{
  uint64_t v2 = result;
  int v3 = (int)a2;
  int v4 = *(_DWORD *)(result + 52);
  if (*(int *)(result + 56) < 1)
  {
    uint64_t v5 = (v4 * *(_DWORD *)(result + 48));
    if ((int)v5 >= 1)
    {
      uint64_t v6 = *(__int16 **)(result + 232);
      BOOL v7 = *(float **)(result + 1464);
      uint64_t v8 = (v4 * *(_DWORD *)(result + 48));
      float v9 = (float)v3;
      do
      {
        float v10 = *v7++;
        *uint64_t v6 = (int)(float)((float)*v6 + (float)(v10 * v9));
        ++v6;
        --v8;
      }
      while (v8);
      int v11 = *(__int16 **)(result + 248);
      BOOL v12 = *(float **)(result + 1480);
      uint64_t v13 = v5;
      do
      {
        float v14 = *v12++;
        __int16 *v11 = (int)(float)((float)*v11 + (float)(v14 * v9));
        ++v11;
        --v13;
      }
      while (v13);
      int v15 = *(__int16 **)(result + 240);
      uint64_t v16 = *(float **)(result + 1472);
      uint64_t v17 = v5;
      do
      {
        float v18 = *v16++;
        __int16 *v15 = (int)(float)((float)*v15 + (float)(v18 * v9));
        ++v15;
        --v17;
      }
      while (v17);
      BOOL v19 = *(__int16 **)(result + 256);
      int v20 = *(float **)(result + 1488);
      do
      {
        float v21 = *v20++;
        *BOOL v19 = (int)(float)((float)*v19 + (float)(v21 * v9));
        ++v19;
        --v5;
      }
      while (v5);
    }
  }
  else
  {
    SparseMatrix<float>::add<short>(result + 984, v4, (float)v3);
    SparseMatrix<float>::add<short>(v2 + 1224, *(_DWORD *)(v2 + 52), (float)v3);
    SparseMatrix<float>::add<short>(v2 + 1104, *(_DWORD *)(v2 + 52), (float)v3);
    uint64_t result = SparseMatrix<float>::add<short>(v2 + 1344, *(_DWORD *)(v2 + 52), (float)v3);
  }
  if (v4)
  {
    uint64_t v22 = (v4 * v4);
    uint64_t v23 = *(__int16 **)(v2 + 264);
    uint64_t v24 = *(float **)(v2 + 1496);
    float v25 = (float)v3;
    uint64_t v26 = v22;
    do
    {
      float v27 = *v24++;
      *uint64_t v23 = (int)(float)((float)*v23 + (float)(v27 * v25));
      ++v23;
      --v26;
    }
    while (v26);
    uint64_t v28 = *(__int16 **)(v2 + 280);
    uint64_t v29 = *(float **)(v2 + 1512);
    uint64_t v30 = (v4 * v4);
    do
    {
      float v31 = *v29++;
      *uint64_t v28 = (int)(float)((float)*v28 + (float)(v31 * v25));
      ++v28;
      --v30;
    }
    while (v30);
    int v32 = *(__int16 **)(v2 + 272);
    BOOL v33 = *(float **)(v2 + 1504);
    uint64_t v34 = (v4 * v4);
    do
    {
      float v35 = *v33++;
      __int16 *v32 = (int)(float)((float)*v32 + (float)(v35 * v25));
      ++v32;
      --v34;
    }
    while (v34);
    uint64_t v36 = *(__int16 **)(v2 + 288);
    int v37 = *(float **)(v2 + 1520);
    do
    {
      float v38 = *v37++;
      *uint64_t v36 = (int)(float)((float)*v36 + (float)(v38 * v25));
      ++v36;
      --v22;
    }
    while (v22);
  }
  else
  {
    float v25 = (float)v3;
  }
  uint64_t v39 = *(unsigned int *)(v2 + 52);
  if ((int)v39 >= 1)
  {
    float v40 = *(float **)(v2 + 1528);
    int v41 = *(_WORD **)(v2 + 296);
    uint64_t v42 = *(unsigned int *)(v2 + 52);
    do
    {
      float v43 = *v40++;
      *v41++ += (int)(float)(v43 * v25);
      --v42;
    }
    while (v42);
    uint64_t v44 = *(float **)(v2 + 1544);
    float v45 = *(_WORD **)(v2 + 312);
    uint64_t v46 = v39;
    do
    {
      float v47 = *v44++;
      *v45++ += (int)(float)(v47 * v25);
      --v46;
    }
    while (v46);
    __n128 v48 = *(float **)(v2 + 1536);
    __int16 v49 = *(_WORD **)(v2 + 304);
    do
    {
      float v50 = *v48++;
      *v49++ += (int)(float)(v50 * v25);
      --v39;
    }
    while (v39);
  }
  return result;
}

uint64_t LSTM<short>::noutputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t LSTM<short>::ninputs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

void LSTM<short>::allocAllBuffers()
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "LSTM alloc, from allocAll");
  LSTM<short>::init();
}

void sub_192934AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LSTM<short>::unsetSpecialBidir(uint64_t result)
{
  *(unsigned char *)(result + 42) = 0;
  return result;
}

uint64_t LSTM<short>::setSpecialBidir(uint64_t result)
{
  *(unsigned char *)(result + 42) = 1;
  return result;
}

__n128 LSTM<short>::setWeightMatrices(void *a1, uint64_t a2)
{
  uint64_t v2 = *(_OWORD **)(a2 + 8);
  uint64_t v3 = *((void *)v2-- - 2);
  a1[29] = v3;
  a1[313] = a1 + 29;
  *(void *)(a2 + 8) = v2;
  *uint64_t v2 = *(v2 - 1);
  a1[30] = *(void *)v2;
  a1[314] = a1 + 30;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v4 - 16;
  *uint64_t v2 = *(_OWORD *)(v4 - 32);
  a1[32] = *(void *)v2;
  a1[316] = a1 + 32;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v5 - 16;
  *uint64_t v2 = *(_OWORD *)(v5 - 32);
  a1[31] = *(void *)v2;
  uint64_t v6 = a1 + 31;
  v6[284] = v6;
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v7 - 16;
  *uint64_t v2 = *(_OWORD *)(v7 - 32);
  v6[2] = *(void *)v2;
  v6[286] = v6 + 2;
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v8 - 16;
  *uint64_t v2 = *(_OWORD *)(v8 - 32);
  v6[3] = *(void *)v2;
  v6[287] = v6 + 3;
  uint64_t v9 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v9 - 16;
  *uint64_t v2 = *(_OWORD *)(v9 - 32);
  v6[5] = *(void *)v2;
  v6[289] = v6 + 5;
  uint64_t v10 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v10 - 16;
  *uint64_t v2 = *(_OWORD *)(v10 - 32);
  v6[4] = *(void *)v2;
  v6[288] = v6 + 4;
  uint64_t v11 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v11 - 16;
  *uint64_t v2 = *(_OWORD *)(v11 - 32);
  v6[6] = *(void *)v2;
  v6[290] = v6 + 6;
  uint64_t v12 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v12 - 16;
  *uint64_t v2 = *(_OWORD *)(v12 - 32);
  v6[7] = *(void *)v2;
  v6[291] = v6 + 7;
  uint64_t v13 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v13 - 16;
  __n128 result = *(__n128 *)(v13 - 32);
  *uint64_t v2 = result;
  v6[8] = *(void *)v2;
  v6[292] = v6 + 8;
  *(void *)(a2 + 8) -= 16;
  return result;
}

char *LSTM<short>::getWeightMatrices(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = **(void **)(a1 + 2504);
  unsigned int v5 = *(_DWORD *)(a1 + 48);
  unsigned int v6 = *(_DWORD *)(a1 + 52);
  LODWORD(v7) = v6;
  double v8 = COERCE_DOUBLE(__PAIR64__(v5, v6));
  unint64_t v9 = *(void *)(a2 + 8);
  if (v9 >= *(void *)(a2 + 16))
  {
    uint64_t v10 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v4, COERCE_DOUBLE(__PAIR64__(v5, v6)));
    unsigned int v5 = *(_DWORD *)(a1 + 48);
    unsigned int v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    double v8 = COERCE_DOUBLE(__PAIR64__(v5, v6));
  }
  else
  {
    *(void *)unint64_t v9 = v4;
    uint64_t v10 = (char *)(v9 + 16);
    *(_DWORD *)(v9 + 8) = v6;
    *(_DWORD *)(v9 + 12) = v5;
  }
  *(void *)(a2 + 8) = v10;
  uint64_t v11 = **(void **)(a1 + 2512);
  if ((unint64_t)v10 >= *(void *)(a2 + 16))
  {
    uint64_t v12 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v11, v8);
    unsigned int v5 = *(_DWORD *)(a1 + 48);
    unsigned int v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    double v8 = COERCE_DOUBLE(__PAIR64__(v5, v6));
  }
  else
  {
    *(void *)uint64_t v10 = v11;
    uint64_t v12 = v10 + 16;
    *((_DWORD *)v10 + 2) = v6;
    *((_DWORD *)v10 + 3) = v5;
  }
  *(void *)(a2 + 8) = v12;
  uint64_t v13 = **(void **)(a1 + 2528);
  if ((unint64_t)v12 >= *(void *)(a2 + 16))
  {
    float v14 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v13, v8);
    unsigned int v5 = *(_DWORD *)(a1 + 48);
    unsigned int v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    double v8 = COERCE_DOUBLE(__PAIR64__(v5, v6));
  }
  else
  {
    *(void *)uint64_t v12 = v13;
    float v14 = v12 + 16;
    *((_DWORD *)v12 + 2) = v6;
    *((_DWORD *)v12 + 3) = v5;
  }
  *(void *)(a2 + 8) = v14;
  uint64_t v15 = **(void **)(a1 + 2520);
  if ((unint64_t)v14 >= *(void *)(a2 + 16))
  {
    uint64_t v16 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v15, v8);
    unsigned int v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
  }
  else
  {
    *(void *)float v14 = v15;
    uint64_t v16 = v14 + 16;
    *((_DWORD *)v14 + 2) = v6;
    *((_DWORD *)v14 + 3) = v5;
  }
  *(void *)(a2 + 8) = v16;
  uint64_t v17 = **(void **)(a1 + 2536);
  unint64_t v18 = __PAIR64__(v6, LODWORD(v7));
  if ((unint64_t)v16 >= *(void *)(a2 + 16))
  {
    BOOL v19 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v17, COERCE_DOUBLE(__PAIR64__(v6, LODWORD(v7))));
    unsigned int v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    unint64_t v18 = (unint64_t)vdup_n_s32(v6);
  }
  else
  {
    *(void *)uint64_t v16 = v17;
    BOOL v19 = v16 + 16;
    *((_DWORD *)v16 + 2) = v6;
    *((_DWORD *)v16 + 3) = v6;
  }
  *(void *)(a2 + 8) = v19;
  uint64_t v20 = **(void **)(a1 + 2544);
  if ((unint64_t)v19 >= *(void *)(a2 + 16))
  {
    float v21 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v20, *(double *)&v18);
    unsigned int v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    unint64_t v18 = (unint64_t)vdup_n_s32(v6);
  }
  else
  {
    *(void *)BOOL v19 = v20;
    float v21 = v19 + 16;
    *((_DWORD *)v19 + 2) = v6;
    *((_DWORD *)v19 + 3) = v6;
  }
  *(void *)(a2 + 8) = v21;
  uint64_t v22 = **(void **)(a1 + 2560);
  if ((unint64_t)v21 >= *(void *)(a2 + 16))
  {
    uint64_t v23 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v22, *(double *)&v18);
    unsigned int v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
    unint64_t v18 = (unint64_t)vdup_n_s32(v6);
  }
  else
  {
    *(void *)float v21 = v22;
    uint64_t v23 = v21 + 16;
    *((_DWORD *)v21 + 2) = v6;
    *((_DWORD *)v21 + 3) = v6;
  }
  *(void *)(a2 + 8) = v23;
  uint64_t v24 = **(void **)(a1 + 2552);
  if ((unint64_t)v23 >= *(void *)(a2 + 16))
  {
    float v25 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v24, *(double *)&v18);
    unsigned int v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
  }
  else
  {
    *(void *)uint64_t v23 = v24;
    float v25 = v23 + 16;
    *((_DWORD *)v23 + 2) = v6;
    *((_DWORD *)v23 + 3) = v6;
  }
  *(void *)(a2 + 8) = v25;
  uint64_t v26 = **(void **)(a1 + 2568);
  HIDWORD(v7) = 0;
  if ((unint64_t)v25 >= *(void *)(a2 + 16))
  {
    float v27 = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v26, v7);
    unsigned int v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
  }
  else
  {
    *(void *)float v25 = v26;
    float v27 = v25 + 16;
    *((_DWORD *)v25 + 2) = v6;
    *((_DWORD *)v25 + 3) = 0;
  }
  *(void *)(a2 + 8) = v27;
  uint64_t v28 = **(void **)(a1 + 2576);
  if ((unint64_t)v27 >= *(void *)(a2 + 16))
  {
    __n128 result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v28, COERCE_DOUBLE((unint64_t)LODWORD(v7)));
    unsigned int v6 = *(_DWORD *)(a1 + 52);
    LODWORD(v7) = v6;
  }
  else
  {
    *(void *)float v27 = v28;
    __n128 result = v27 + 16;
    *((_DWORD *)v27 + 2) = v6;
    *((_DWORD *)v27 + 3) = 0;
  }
  *(void *)(a2 + 8) = result;
  uint64_t v30 = **(void **)(a1 + 2584);
  if ((unint64_t)result >= *(void *)(a2 + 16))
  {
    __n128 result = std::vector<WeightTuple>::__push_back_slow_path<WeightTuple>(a2, v30, COERCE_DOUBLE((unint64_t)LODWORD(v7)));
    float v31 = result;
  }
  else
  {
    *(void *)__n128 result = v30;
    float v31 = result + 16;
    *((_DWORD *)result + 2) = v6;
    *((_DWORD *)result + 3) = 0;
  }
  *(void *)(a2 + 8) = v31;
  return result;
}

void LSTM<short>::resetForNewBatch(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 2692))
  {
    uint64_t v2 = *(void *)(a1 + 1552);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v2 + 40))(v2, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v3 = *(void *)(a1 + 1560);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v3 + 40))(v3, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v4 = *(void *)(a1 + 1568);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v4 + 40))(v4, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v5 = *(void *)(a1 + 1576);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v5 + 40))(v5, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v6 = *(void *)(a1 + 1584);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v6 + 40))(v6, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = *(void *)(a1 + 1592);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v7 + 40))(v7, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = *(void *)(a1 + 1600);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v8 + 40))(v8, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v9 = *(void *)(a1 + 1608);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM before reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v9 + 40))(v9, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    (*(void (**)(void))(**(void **)(a1 + 1552) + 16))(*(void *)(a1 + 1552));
    (*(void (**)(void))(**(void **)(a1 + 1560) + 16))(*(void *)(a1 + 1560));
    (*(void (**)(void))(**(void **)(a1 + 1568) + 16))(*(void *)(a1 + 1568));
    (*(void (**)(void))(**(void **)(a1 + 1576) + 16))(*(void *)(a1 + 1576));
    (*(void (**)(void))(**(void **)(a1 + 1584) + 16))(*(void *)(a1 + 1584));
    (*(void (**)(void))(**(void **)(a1 + 1592) + 16))(*(void *)(a1 + 1592));
    (*(void (**)(void))(**(void **)(a1 + 1600) + 16))(*(void *)(a1 + 1600));
    (*(void (**)(void))(**(void **)(a1 + 1608) + 16))(*(void *)(a1 + 1608));
    uint64_t v10 = *(void *)(a1 + 1552);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v10 + 40))(v10, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v11 = *(void *)(a1 + 1560);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v11 + 40))(v11, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v12 = *(void *)(a1 + 1568);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v12 + 40))(v12, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v13 = *(void *)(a1 + 1576);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v13 + 40))(v13, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v14 = *(void *)(a1 + 1584);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v14 + 40))(v14, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v15 = *(void *)(a1 + 1592);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v15 + 40))(v15, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v16 = *(void *)(a1 + 1600);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v16 + 40))(v16, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v17 = *(void *)(a1 + 1608);
    std::string::basic_string[abi:ne180100]<0>(__p, "LSTM AFTER reset ");
    (*(void (**)(uint64_t, void **))(*(void *)v17 + 40))(v17, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_192935604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void LSTM<short>::clearState(uint64_t a1, void *a2, int *a3)
{
  if (*(int *)(a1 + 2688) >= 1)
  {
    int v6 = 0;
    int v7 = *a3;
    do
    {
      bzero(**(void ***)(*a2 + 16 * v7 + 8), 4 * *(int *)(*a2 + 16 * v7));
      uint64_t v8 = *a3 + 1;
      *a3 = v8;
      bzero(**(void ***)(*a2 + 16 * v8 + 8), 4 * *(int *)(*a2 + 16 * v8));
      int v7 = *a3 + 1;
      *a3 = v7;
      ++v6;
    }
    while (v6 < *(_DWORD *)(a1 + 2688));
  }
}

int *LSTM<short>::restoreState(int *result, void *a2, int a3, int *a4)
{
  if (result[672] >= 1)
  {
    int v6 = result;
    int v7 = 0;
    uint64_t v8 = a3;
    do
    {
      int v9 = v6[13] * v7;
      uint64_t v10 = (void *)(*(void *)(*((void *)v6 + 20) + 8 * v8) + 4 * v9);
      uint64_t v11 = (void *)(*(void *)(*((void *)v6 + 23) + 8 * v8) + 4 * v9);
      uint64_t v12 = *a4;
      *a4 = v12 + 1;
      memmove(v10, **(const void ***)(*a2 + 16 * v12 + 8), 4 * v6[13]);
      uint64_t v13 = *a4;
      *a4 = v13 + 1;
      __n128 result = (int *)memmove(v11, **(const void ***)(*a2 + 16 * v13 + 8), 4 * v6[13]);
      ++v7;
    }
    while (v7 < v6[672]);
  }
  return result;
}

int *LSTM<short>::saveState(int *result, uint64_t *a2, int a3, int *a4)
{
  if (result[672] >= 1)
  {
    int v6 = result;
    int v7 = 0;
    uint64_t v8 = a3;
    int v9 = *a4;
    do
    {
      uint64_t v10 = v6[13];
      int v11 = v10 * v7;
      uint64_t v12 = *(void *)(*((void *)v6 + 20) + 8 * v8);
      uint64_t v13 = *a2;
      *(_DWORD *)(v13 + 16 * v9) = v10;
      memmove(**(void ***)(v13 + 16 * *a4 + 8), (const void *)(v12 + 4 * (int)v10 * v7), 4 * v10);
      uint64_t v14 = *a4 + 1;
      *a4 = v14;
      uint64_t v15 = v6[13];
      uint64_t v16 = *a2;
      *(_DWORD *)(v16 + 16 * v14) = v15;
      __n128 result = (int *)memmove(**(void ***)(v16 + 16 * *a4 + 8), (const void *)(*(void *)(*((void *)v6 + 23) + 8 * v8) + 4 * v11), 4 * v15);
      int v9 = *a4 + 1;
      *a4 = v9;
      ++v7;
    }
    while (v7 < v6[672]);
  }
  return result;
}

uint64_t LSTM<short>::allocInitialState(uint64_t result)
{
  if (*(int *)(result + 2688) >= 1) {
    operator new();
  }
  return result;
}

void sub_192935AE4(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

uint64_t LSTM<short>::normalizeModel(uint64_t result, float a2)
{
  uint64_t v2 = *(unsigned int *)(result + 52);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = **(__int16 ***)(result + 2568);
    uint64_t v4 = *(unsigned int *)(result + 52);
    do
    {
      __int16 *v3 = (int)(float)((float)*v3 * a2);
      ++v3;
      --v4;
    }
    while (v4);
    uint64_t v5 = **(__int16 ***)(result + 2576);
    uint64_t v6 = v2;
    do
    {
      __int16 *v5 = (int)(float)((float)*v5 * a2);
      ++v5;
      --v6;
    }
    while (v6);
    int v7 = **(__int16 ***)(result + 2584);
    uint64_t v8 = v2;
    do
    {
      __int16 *v7 = (int)(float)((float)*v7 * a2);
      ++v7;
      --v8;
    }
    while (v8);
  }
  uint64_t v9 = (*(_DWORD *)(result + 48) * v2);
  if ((int)v9 >= 1)
  {
    uint64_t v10 = **(__int16 ***)(result + 2504);
    uint64_t v11 = (*(_DWORD *)(result + 48) * v2);
    do
    {
      __int16 *v10 = (int)(float)((float)*v10 * a2);
      ++v10;
      --v11;
    }
    while (v11);
    uint64_t v12 = **(__int16 ***)(result + 2512);
    uint64_t v13 = v9;
    do
    {
      __int16 *v12 = (int)(float)((float)*v12 * a2);
      ++v12;
      --v13;
    }
    while (v13);
    uint64_t v14 = **(__int16 ***)(result + 2520);
    uint64_t v15 = v9;
    do
    {
      __int16 *v14 = (int)(float)((float)*v14 * a2);
      ++v14;
      --v15;
    }
    while (v15);
    uint64_t v16 = **(__int16 ***)(result + 2528);
    do
    {
      *uint64_t v16 = (int)(float)((float)*v16 * a2);
      ++v16;
      --v9;
    }
    while (v9);
  }
  if (v2)
  {
    uint64_t v17 = (v2 * v2);
    unint64_t v18 = **(__int16 ***)(result + 2536);
    uint64_t v19 = v17;
    do
    {
      *unint64_t v18 = (int)(float)((float)*v18 * a2);
      ++v18;
      --v19;
    }
    while (v19);
    uint64_t v20 = **(__int16 ***)(result + 2544);
    uint64_t v21 = v17;
    do
    {
      *uint64_t v20 = (int)(float)((float)*v20 * a2);
      ++v20;
      --v21;
    }
    while (v21);
    uint64_t v22 = **(__int16 ***)(result + 2552);
    uint64_t v23 = v17;
    do
    {
      *uint64_t v22 = (int)(float)((float)*v22 * a2);
      ++v22;
      --v23;
    }
    while (v23);
    uint64_t v24 = **(__int16 ***)(result + 2560);
    do
    {
      __int16 *v24 = (int)(float)((float)*v24 * a2);
      ++v24;
      --v17;
    }
    while (v17);
  }
  return result;
}

uint64_t LSTM<short>::clipModel(uint64_t result, float a2)
{
  float v2 = -a2;
  uint64_t v3 = *(unsigned int *)(result + 52);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = **(__int16 ***)(result + 2568);
    uint64_t v5 = *(unsigned int *)(result + 52);
    do
    {
      float v6 = (float)*v4;
      float v7 = -a2;
      if (v6 < v2 || (float v7 = a2, v6 > a2)) {
        *uint64_t v4 = (int)v7;
      }
      ++v4;
      --v5;
    }
    while (v5);
    uint64_t v8 = **(__int16 ***)(result + 2576);
    uint64_t v9 = v3;
    do
    {
      float v10 = (float)*v8;
      float v11 = -a2;
      if (v10 < v2 || (float v11 = a2, v10 > a2)) {
        *uint64_t v8 = (int)v11;
      }
      ++v8;
      --v9;
    }
    while (v9);
    uint64_t v12 = **(__int16 ***)(result + 2584);
    uint64_t v13 = v3;
    do
    {
      float v14 = (float)*v12;
      float v15 = -a2;
      if (v14 < v2 || (float v15 = a2, v14 > a2)) {
        __int16 *v12 = (int)v15;
      }
      ++v12;
      --v13;
    }
    while (v13);
  }
  uint64_t v16 = (*(_DWORD *)(result + 48) * v3);
  if ((int)v16 >= 1)
  {
    uint64_t v17 = **(__int16 ***)(result + 2504);
    uint64_t v18 = (*(_DWORD *)(result + 48) * v3);
    do
    {
      float v19 = (float)*v17;
      float v20 = -a2;
      if (v19 < v2 || (float v20 = a2, v19 > a2)) {
        *uint64_t v17 = (int)v20;
      }
      ++v17;
      --v18;
    }
    while (v18);
    uint64_t v21 = **(__int16 ***)(result + 2512);
    uint64_t v22 = v16;
    do
    {
      float v23 = (float)*v21;
      float v24 = -a2;
      if (v23 < v2 || (float v24 = a2, v23 > a2)) {
        *uint64_t v21 = (int)v24;
      }
      ++v21;
      --v22;
    }
    while (v22);
    float v25 = **(__int16 ***)(result + 2520);
    uint64_t v26 = v16;
    do
    {
      float v27 = (float)*v25;
      float v28 = -a2;
      if (v27 < v2 || (float v28 = a2, v27 > a2)) {
        *float v25 = (int)v28;
      }
      ++v25;
      --v26;
    }
    while (v26);
    uint64_t v29 = **(__int16 ***)(result + 2528);
    do
    {
      float v30 = (float)*v29;
      float v31 = -a2;
      if (v30 < v2 || (float v31 = a2, v30 > a2)) {
        __int16 *v29 = (int)v31;
      }
      ++v29;
      --v16;
    }
    while (v16);
  }
  if (v3)
  {
    uint64_t v32 = (v3 * v3);
    BOOL v33 = **(__int16 ***)(result + 2536);
    uint64_t v34 = v32;
    do
    {
      float v35 = (float)*v33;
      float v36 = -a2;
      if (v35 < v2 || (float v36 = a2, v35 > a2)) {
        __int16 *v33 = (int)v36;
      }
      ++v33;
      --v34;
    }
    while (v34);
    int v37 = **(__int16 ***)(result + 2544);
    uint64_t v38 = v32;
    do
    {
      float v39 = (float)*v37;
      float v40 = -a2;
      if (v39 < v2 || (float v40 = a2, v39 > a2)) {
        __int16 *v37 = (int)v40;
      }
      ++v37;
      --v38;
    }
    while (v38);
    int v41 = **(__int16 ***)(result + 2552);
    uint64_t v42 = v32;
    do
    {
      float v43 = (float)*v41;
      float v44 = -a2;
      if (v43 < v2 || (float v44 = a2, v43 > a2)) {
        *int v41 = (int)v44;
      }
      ++v41;
      --v42;
    }
    while (v42);
    float v45 = **(__int16 ***)(result + 2560);
    do
    {
      float v46 = (float)*v45;
      float v47 = -a2;
      if (v46 < v2 || (float v47 = a2, v46 > a2)) {
        __int16 *v45 = (int)v47;
      }
      ++v45;
      --v32;
    }
    while (v32);
  }
  return result;
}

void LSTM<short>::applyGradient(uint64_t a1, void *lpsrc)
{
  if (lpsrc) {
  (*(void (**)(void))(**(void **)(a1 + 1552) + 64))(*(void *)(a1 + 1552));
  }
  (*(void (**)(void))(**(void **)(a1 + 1552) + 64))(*(void *)(a1 + 1552));
  exitFramework(23);
}

float32x4_t **LSTM<short>::addGradient(uint64_t a1, void *lpsrc)
{
  if (lpsrc) {
  else
  }
    uint64_t v3 = 0;
  VVector<short>::add<short>(*(float32x4_t ***)(a1 + 2568), v3[321], *(_DWORD *)(a1 + 52));
  VVector<short>::add<short>(*(float32x4_t ***)(a1 + 2576), v3[322], *(_DWORD *)(a1 + 52));
  __n128 result = VVector<short>::add<short>(*(float32x4_t ***)(a1 + 2584), v3[323], *(_DWORD *)(a1 + 52));
  int v5 = *(_DWORD *)(a1 + 52);
  uint64_t v6 = (*(_DWORD *)(a1 + 48) * v5);
  if ((int)v6 >= 1)
  {
    float v7 = **(_WORD ***)(a1 + 2504);
    uint64_t v8 = (__int16 *)*v3[313];
    uint64_t v9 = (*(_DWORD *)(a1 + 48) * v5);
    do
    {
      __int16 v10 = *v8++;
      *v7++ += v10;
      --v9;
    }
    while (v9);
    float v11 = **(_WORD ***)(a1 + 2512);
    uint64_t v12 = (__int16 *)*v3[314];
    uint64_t v13 = v6;
    do
    {
      __int16 v14 = *v12++;
      *v11++ += v14;
      --v13;
    }
    while (v13);
    float v15 = **(_WORD ***)(a1 + 2520);
    uint64_t v16 = (__int16 *)*v3[315];
    uint64_t v17 = v6;
    do
    {
      __int16 v18 = *v16++;
      *v15++ += v18;
      --v17;
    }
    while (v17);
    float v19 = **(_WORD ***)(a1 + 2528);
    float v20 = (__int16 *)*v3[316];
    do
    {
      __int16 v21 = *v20++;
      *v19++ += v21;
      --v6;
    }
    while (v6);
  }
  if (v5)
  {
    uint64_t v22 = (v5 * v5);
    float v23 = **(_WORD ***)(a1 + 2536);
    float v24 = (__int16 *)*v3[317];
    uint64_t v25 = v22;
    do
    {
      __int16 v26 = *v24++;
      *v23++ += v26;
      --v25;
    }
    while (v25);
    float v27 = **(_WORD ***)(a1 + 2544);
    float v28 = (__int16 *)*v3[318];
    uint64_t v29 = v22;
    do
    {
      __int16 v30 = *v28++;
      *v27++ += v30;
      --v29;
    }
    while (v29);
    float v31 = **(_WORD ***)(a1 + 2552);
    uint64_t v32 = (__int16 *)*v3[319];
    uint64_t v33 = v22;
    do
    {
      __int16 v34 = *v32++;
      *v31++ += v34;
      --v33;
    }
    while (v33);
    float v35 = **(_WORD ***)(a1 + 2560);
    float v36 = (__int16 *)*v3[320];
    do
    {
      __int16 v37 = *v36++;
      *v35++ += v37;
      --v22;
    }
    while (v22);
  }
  return result;
}

float32x4_t **VVector<short>::add<short>(float32x4_t **result, float32x4_t **a2, int a3)
{
  int v3 = a3 / 8;
  if (a3 >= 8)
  {
    uint64_t v4 = *result;
    int v5 = *a2;
    int v6 = a3 / 8;
    do
    {
      float32x4_t v7 = *v5;
      float32x4_t v8 = v5[1];
      v5 += 2;
      float32x4_t v9 = vaddq_f32(v8, v4[1]);
      *uint64_t v4 = vaddq_f32(v7, *v4);
      v4[1] = v9;
      v4 += 2;
      --v6;
    }
    while (v6);
  }
  int v10 = v3;
  if (8 * v3 < a3)
  {
    uint64_t v11 = a3 - (uint64_t)(v10 * 8);
    uint64_t v12 = &(*result)[v10];
    uint64_t v13 = &(*a2)[v10];
    do
    {
      __int16 v14 = v13->i16[0];
      uint64_t v13 = (float32x4_t *)((char *)v13 + 2);
      v12->i16[0] += v14;
      uint64_t v12 = (float32x4_t *)((char *)v12 + 2);
      --v11;
    }
    while (v11);
  }
  return result;
}

void LSTM<short>::compareModels(uint64_t a1, void *lpsrc, void **a3)
{
  int v3 = a3;
  if (lpsrc)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  int v5 = 0;
  if (a3) {
LABEL_3:
  }
LABEL_4:
  std::vector<BOOL>::vector(&__p, 4uLL);
  uint64_t v6 = *(unsigned int *)(a1 + 52);
  if ((int)v6 <= 0)
  {
    uint64_t v11 = __p;
LABEL_15:
    unint64_t v12 = *v11 | 1;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = 1;
    do
    {
      while (!v8)
      {
        BOOL v8 = 0;
        if (++v7 == v6)
        {
          uint64_t v11 = __p;
          goto LABEL_16;
        }
      }
      int v9 = *(unsigned __int16 *)(*v3[321] + 2 * v7);
      int v10 = *(unsigned __int16 *)(*v5[321] + 2 * v7);
      BOOL v8 = v9 == v10;
      ++v7;
    }
    while (v7 != v6);
    uint64_t v11 = __p;
    if (v9 == v10) {
      goto LABEL_15;
    }
LABEL_16:
    unint64_t v12 = *v11 & 0xFFFFFFFFFFFFFFFELL;
  }
  void *v11 = v12;
  if ((int)v6 < 1)
  {
LABEL_25:
    unint64_t v17 = v12 | 2;
  }
  else
  {
    uint64_t v13 = 0;
    BOOL v14 = 1;
    do
    {
      while (!v14)
      {
        BOOL v14 = 0;
        if (++v13 == v6) {
          goto LABEL_26;
        }
      }
      int v15 = *(unsigned __int16 *)(*v3[322] + 2 * v13);
      int v16 = *(unsigned __int16 *)(*v5[322] + 2 * v13);
      BOOL v14 = v15 == v16;
      ++v13;
    }
    while (v13 != v6);
    if (v15 == v16) {
      goto LABEL_25;
    }
LABEL_26:
    unint64_t v17 = v12 & 0xFFFFFFFFFFFFFFFDLL;
  }
  void *v11 = v17;
  if ((int)v6 < 1)
  {
LABEL_35:
    unint64_t v22 = v17 | 4;
  }
  else
  {
    uint64_t v18 = 0;
    BOOL v19 = 1;
    do
    {
      while (!v19)
      {
        BOOL v19 = 0;
        if (++v18 == v6) {
          goto LABEL_36;
        }
      }
      int v20 = *(unsigned __int16 *)(*v3[323] + 2 * v18);
      int v21 = *(unsigned __int16 *)(*v5[323] + 2 * v18);
      BOOL v19 = v20 == v21;
      ++v18;
    }
    while (v18 != v6);
    if (v20 == v21) {
      goto LABEL_35;
    }
LABEL_36:
    unint64_t v22 = v17 & 0xFFFFFFFFFFFFFFFBLL;
  }
  void *v11 = v22;
  uint64_t v23 = (*(_DWORD *)(a1 + 48) * v6);
  if ((int)v23 < 1)
  {
LABEL_45:
    unint64_t v28 = v22 | 1;
  }
  else
  {
    uint64_t v24 = 0;
    BOOL v25 = 1;
    do
    {
      while (!v25)
      {
        BOOL v25 = 0;
        if (++v24 == v23) {
          goto LABEL_46;
        }
      }
      int v26 = *(unsigned __int16 *)(*v3[313] + 2 * v24);
      int v27 = *(unsigned __int16 *)(*v5[313] + 2 * v24);
      BOOL v25 = v26 == v27;
      ++v24;
    }
    while (v24 != v23);
    if (v26 == v27) {
      goto LABEL_45;
    }
LABEL_46:
    unint64_t v28 = v22 & 0xFFFFFFFFFFFFFFFELL;
  }
  void *v11 = v28;
  if ((int)v23 < 1)
  {
LABEL_55:
    unint64_t v33 = v28 | 2;
  }
  else
  {
    uint64_t v29 = 0;
    BOOL v30 = 1;
    do
    {
      while (!v30)
      {
        BOOL v30 = 0;
        if (++v29 == v23) {
          goto LABEL_56;
        }
      }
      int v31 = *(unsigned __int16 *)(*v3[315] + 2 * v29);
      int v32 = *(unsigned __int16 *)(*v5[315] + 2 * v29);
      BOOL v30 = v31 == v32;
      ++v29;
    }
    while (v29 != v23);
    if (v31 == v32) {
      goto LABEL_55;
    }
LABEL_56:
    unint64_t v33 = v28 & 0xFFFFFFFFFFFFFFFDLL;
  }
  void *v11 = v33;
  if ((int)v23 < 1)
  {
LABEL_65:
    unint64_t v38 = v33 | 4;
  }
  else
  {
    uint64_t v34 = 0;
    BOOL v35 = 1;
    do
    {
      while (!v35)
      {
        BOOL v35 = 0;
        if (++v34 == v23) {
          goto LABEL_66;
        }
      }
      int v36 = *(unsigned __int16 *)(*v3[314] + 2 * v34);
      int v37 = *(unsigned __int16 *)(*v5[314] + 2 * v34);
      BOOL v35 = v36 == v37;
      ++v34;
    }
    while (v34 != v23);
    if (v36 == v37) {
      goto LABEL_65;
    }
LABEL_66:
    unint64_t v38 = v33 & 0xFFFFFFFFFFFFFFFBLL;
  }
  void *v11 = v38;
  if ((int)v23 < 1)
  {
LABEL_75:
    unint64_t v43 = v38 | 8;
  }
  else
  {
    uint64_t v39 = 0;
    BOOL v40 = 1;
    do
    {
      while (!v40)
      {
        BOOL v40 = 0;
        if (++v39 == v23) {
          goto LABEL_76;
        }
      }
      int v41 = *(unsigned __int16 *)(*v3[316] + 2 * v39);
      int v42 = *(unsigned __int16 *)(*v5[316] + 2 * v39);
      BOOL v40 = v41 == v42;
      ++v39;
    }
    while (v39 != v23);
    if (v41 == v42) {
      goto LABEL_75;
    }
LABEL_76:
    unint64_t v43 = v38 & 0xFFFFFFFFFFFFFFF7;
  }
  void *v11 = v43;
  uint64_t v44 = (v6 * v6);
  if (v6)
  {
    uint64_t v45 = 0;
    BOOL v46 = 1;
    do
    {
      while (!v46)
      {
        BOOL v46 = 0;
        if (++v45 == v44) {
          goto LABEL_86;
        }
      }
      int v47 = *(unsigned __int16 *)(*v3[317] + 2 * v45);
      int v48 = *(unsigned __int16 *)(*v5[317] + 2 * v45);
      BOOL v46 = v47 == v48;
      ++v45;
    }
    while (v45 != v44);
    if (v47 == v48) {
      goto LABEL_85;
    }
LABEL_86:
    unint64_t v49 = v43 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
LABEL_85:
    unint64_t v49 = v43 | 1;
  }
  void *v11 = v49;
  if (v6)
  {
    uint64_t v50 = 0;
    BOOL v51 = 1;
    do
    {
      while (!v51)
      {
        BOOL v51 = 0;
        if (++v50 == v44) {
          goto LABEL_96;
        }
      }
      int v52 = *(unsigned __int16 *)(*v3[319] + 2 * v50);
      int v53 = *(unsigned __int16 *)(*v5[319] + 2 * v50);
      BOOL v51 = v52 == v53;
      ++v50;
    }
    while (v50 != v44);
    if (v52 == v53) {
      goto LABEL_95;
    }
LABEL_96:
    unint64_t v54 = v49 & 0xFFFFFFFFFFFFFFFDLL;
  }
  else
  {
LABEL_95:
    unint64_t v54 = v49 | 2;
  }
  void *v11 = v54;
  if (v6)
  {
    uint64_t v55 = 0;
    BOOL v56 = 1;
    do
    {
      BOOL v56 = v56 && *(unsigned __int16 *)(*v3[318] + 2 * v55) == *(unsigned __int16 *)(*v5[318] + 2 * v55);
      ++v55;
    }
    while (v55 != v44);
  }
  operator delete(v11);
}

void **LSTM<short>::subtractModels(uint64_t a1, void *lpsrc, const void *a3)
{
  if (lpsrc)
  {
    if (a3)
    {
LABEL_3:
      goto LABEL_6;
    }
  }
  else
  {
    int v5 = 0;
    if (a3) {
      goto LABEL_3;
    }
  }
  __n128 result = 0;
LABEL_6:
  uint64_t v7 = *(unsigned int *)(a1 + 52);
  if ((int)v7 >= 1)
  {
    BOOL v8 = (__int16 *)*result[321];
    int v9 = (__int16 *)*v5[321];
    int v10 = **(_WORD ***)(a1 + 2568);
    uint64_t v11 = *(unsigned int *)(a1 + 52);
    do
    {
      __int16 v13 = *v8++;
      __int16 v12 = v13;
      __int16 v14 = *v9++;
      *v10++ = v12 - v14;
      --v11;
    }
    while (v11);
    int v15 = (__int16 *)*result[322];
    int v16 = (__int16 *)*v5[322];
    unint64_t v17 = **(_WORD ***)(a1 + 2576);
    uint64_t v18 = v7;
    do
    {
      __int16 v20 = *v15++;
      __int16 v19 = v20;
      __int16 v21 = *v16++;
      *v17++ = v19 - v21;
      --v18;
    }
    while (v18);
    unint64_t v22 = (__int16 *)*result[323];
    uint64_t v23 = (__int16 *)*v5[323];
    uint64_t v24 = **(_WORD ***)(a1 + 2584);
    uint64_t v25 = v7;
    do
    {
      __int16 v27 = *v22++;
      __int16 v26 = v27;
      __int16 v28 = *v23++;
      *v24++ = v26 - v28;
      --v25;
    }
    while (v25);
  }
  uint64_t v29 = (*(_DWORD *)(a1 + 48) * v7);
  if ((int)v29 >= 1)
  {
    BOOL v30 = (__int16 *)*result[313];
    int v31 = (__int16 *)*v5[313];
    int v32 = **(_WORD ***)(a1 + 2504);
    uint64_t v33 = (*(_DWORD *)(a1 + 48) * v7);
    do
    {
      __int16 v35 = *v30++;
      __int16 v34 = v35;
      __int16 v36 = *v31++;
      *v32++ = v34 - v36;
      --v33;
    }
    while (v33);
    int v37 = (__int16 *)*result[315];
    unint64_t v38 = (__int16 *)*v5[315];
    uint64_t v39 = **(_WORD ***)(a1 + 2520);
    uint64_t v40 = v29;
    do
    {
      __int16 v42 = *v37++;
      __int16 v41 = v42;
      __int16 v43 = *v38++;
      *v39++ = v41 - v43;
      --v40;
    }
    while (v40);
    uint64_t v44 = (__int16 *)*result[314];
    uint64_t v45 = (__int16 *)*v5[314];
    BOOL v46 = **(_WORD ***)(a1 + 2512);
    uint64_t v47 = v29;
    do
    {
      __int16 v49 = *v44++;
      __int16 v48 = v49;
      __int16 v50 = *v45++;
      *v46++ = v48 - v50;
      --v47;
    }
    while (v47);
    BOOL v51 = (__int16 *)*result[316];
    int v52 = (__int16 *)*v5[316];
    int v53 = **(_WORD ***)(a1 + 2528);
    do
    {
      __int16 v55 = *v51++;
      __int16 v54 = v55;
      __int16 v56 = *v52++;
      *v53++ = v54 - v56;
      --v29;
    }
    while (v29);
  }
  if (v7)
  {
    uint64_t v57 = (v7 * v7);
    int v58 = (__int16 *)*result[317];
    BOOL v59 = (__int16 *)*v5[317];
    int v60 = **(_WORD ***)(a1 + 2536);
    uint64_t v61 = v57;
    do
    {
      __int16 v63 = *v58++;
      __int16 v62 = v63;
      __int16 v64 = *v59++;
      *v60++ = v62 - v64;
      --v61;
    }
    while (v61);
    uint64_t v65 = (__int16 *)*result[319];
    int v66 = (__int16 *)*v5[319];
    int v67 = **(_WORD ***)(a1 + 2552);
    uint64_t v68 = v57;
    do
    {
      __int16 v70 = *v65++;
      __int16 v69 = v70;
      __int16 v71 = *v66++;
      *v67++ = v69 - v71;
      --v68;
    }
    while (v68);
    uint64_t v72 = (__int16 *)*result[318];
    uint64_t v73 = (__int16 *)*v5[318];
    uint64_t v74 = **(_WORD ***)(a1 + 2544);
    uint64_t v75 = v57;
    do
    {
      __int16 v77 = *v72++;
      __int16 v76 = v77;
      __int16 v78 = *v73++;
      *v74++ = v76 - v78;
      --v75;
    }
    while (v75);
    int v79 = (__int16 *)*result[320];
    uint64_t v80 = (__int16 *)*v5[320];
    int v81 = **(_WORD ***)(a1 + 2560);
    do
    {
      __int16 v83 = *v79++;
      __int16 v82 = v83;
      __int16 v84 = *v80++;
      *v81++ = v82 - v84;
      --v57;
    }
    while (v57);
  }
  return result;
}

void LSTM<short>::write(uint64_t a1, FILE *__stream, __sFILE *a3, int a4, int a5)
{
  NeuralNetwork::writeDimensions(__stream, a3, (int *)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  if (a4 >= 1)
  {
    int __ptr = *(_DWORD *)(a1 + 736);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    int __ptr = *(_DWORD *)(a1 + 740);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    int __ptr = *(_DWORD *)(a1 + 744);
    fwrite(&__ptr, 4uLL, 1uLL, __stream);
    LODWORD(a3->_p) += 12;
  }
  VVector<short>::write(*(void *)(a1 + 2568), __stream, (int *)a3, a5);
}

void VVector<short>::write(int a1, FILE *__stream, int *a3, int a4)
{
  if (a4 == 32)
  {
    if (__stream)
    {
      int v6 = *a3 & 0xF;
      if (*a3 <= 0) {
        int v6 = -(-*a3 & 0xF);
      }
      if (v6 >= 15) {
        int v7 = 16;
      }
      else {
        int v7 = 15 - v6;
      }
      LOBYTE(__ptr[0]) = v7;
      fwrite(__ptr, 1uLL, 1uLL, __stream);
      ++*a3;
      writeByteArray((size_t)__stream, a3, v7);
      if ((*(unsigned char *)a3 & 0xF) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__ptr, "write(fp)");
        std::string::basic_string[abi:ne180100]<0>(&__p, "VVector");
        if (v9 < 0) {
          operator delete(__p);
        }
        if (v11 < 0) {
          operator delete(__ptr[0]);
        }
        operator new[]();
      }
      exitFramework(17);
    }
    exitFramework(9);
  }
  if (a4 == 8 || a4 == 16) {
    exitFramework(45);
  }
  exitFramework(23);
}

void sub_192936F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LSTM<short>::read(uint64_t a1, NeuralNetwork *this, int *a3, int *a4, int *a5)
{
  int v5 = (int)a4;
  *(void *)uint64_t v24 = 0;
  NeuralNetwork::readDimensions((uint64_t *)this, (ReadOnlyFile *)&v24[4], v24, a4, a5);
  if (v5 >= 1)
  {
    int v9 = *((_DWORD *)this + 18);
    uint64_t v10 = *(void *)this;
    char v11 = (int *)(*(void *)this + v9);
    unint64_t v12 = *(void *)this + *((void *)this + 1) - 4;
    if ((unint64_t)v11 <= v12)
    {
      int v13 = *v11;
      v9 += 4;
      *((_DWORD *)this + 18) = v9;
    }
    else
    {
      int v13 = 0;
    }
    uint64_t v14 = v9;
    *(_DWORD *)(a1 + 736) = v13;
    if (v10 + v9 <= v12)
    {
      int v15 = *(_DWORD *)(v10 + v9);
      v9 += 4;
      *((_DWORD *)this + 18) = v9;
      uint64_t v14 = v9;
    }
    else
    {
      int v15 = 0;
    }
    *(_DWORD *)(a1 + 740) = v15;
    int v16 = (int *)(v10 + v14);
    if ((unint64_t)v16 <= v12)
    {
      int v17 = *v16;
      *((_DWORD *)this + 18) = v9 + 4;
    }
    else
    {
      int v17 = 0;
    }
    *(_DWORD *)(a1 + 744) = v17;
  }
  if (*(void *)(a1 + 48) != *(void *)v24) {
    exitFramework(3);
  }
  VVector<short>::read(*(__int16 ***)(a1 + 2568), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (__int16 **)*(unsigned int *)(a1 + 52));
  VVector<short>::read(*(__int16 ***)(a1 + 2576), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (__int16 **)*(unsigned int *)(a1 + 52));
  VVector<short>::read(*(__int16 ***)(a1 + 2584), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (__int16 **)*(unsigned int *)(a1 + 52));
  MMatrix<short>::read(*(char **)(a1 + 2504), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (__int16 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<short>::read(*(char **)(a1 + 2512), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (__int16 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<short>::read(*(char **)(a1 + 2520), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (__int16 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<short>::read(*(char **)(a1 + 2528), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (__int16 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 48));
  MMatrix<short>::read(*(char **)(a1 + 2536), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (__int16 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
  MMatrix<short>::read(*(char **)(a1 + 2544), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (__int16 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
  MMatrix<short>::read(*(char **)(a1 + 2552), (uint64_t)this, *a3, *(unsigned __int8 *)(a1 + 1697), (__int16 **)*(unsigned int *)(a1 + 52), *(_DWORD *)(a1 + 52));
  uint64_t v18 = *(char **)(a1 + 2560);
  int v19 = *a3;
  int v20 = *(unsigned __int8 *)(a1 + 1697);
  __int16 v21 = (__int16 **)*(unsigned int *)(a1 + 52);
  int v22 = *(_DWORD *)(a1 + 52);

  return MMatrix<short>::read(v18, (uint64_t)this, v19, v20, v21, v22);
}

uint64_t VVector<short>::read(__int16 **a1, uint64_t a2, int a3, BOOL a4, __int16 **a5)
{
  int v13 = (int)a5;
  if (!a2) {
LABEL_11:
  }
    exitFramework(9);
  int v5 = (int)a5;
  if (a3 == 3)
  {
    readPadding((uint64_t *)a2);
    char v9 = *(unsigned char *)(a2 + 72);
  }
  else
  {
    char v9 = *(unsigned char *)a1;
  }
  if ((v9 & 0xF) != 0) {
    exitFramework(19);
  }
  if (a4)
  {
    uint64_t v10 = *(int *)(a2 + 72);
    char v11 = (__int16 *)(*(void *)a2 + v10);
    *a1 = v11;
    *(_DWORD *)(a2 + 72) = v10 + 2 * v5;
    uint64_t result = 2 * v5;
    if (!v11) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t result = ReadOnlyFile::readInt16Array((ReadOnlyFile *)a2, *a1, &v13, a4, a5);
    if (!*a1) {
      goto LABEL_11;
    }
  }
  if (!result) {
    goto LABEL_11;
  }
  return result;
}

uint64_t LSTM<short>::weightsAreNaN()
{
  return 0;
}

uint64_t LSTM<short>::inputDeltas(uint64_t a1)
{
  return a1 + 816;
}

void LSTM<short>::deltas()
{
}

void **LSTM<short>::outputs(uint64_t a1)
{
  float v2 = (void **)(a1 + 792);
  std::vector<VVector<float>>::resize((char **)(a1 + 792), (uint64_t)(*(void *)(a1 + 168) - *(void *)(a1 + 160)) >> 3);
  int v3 = *(uint64_t **)(a1 + 160);
  uint64_t v4 = *(void *)(a1 + 168) - (void)v3;
  if (v4)
  {
    unint64_t v5 = v4 >> 3;
    int v6 = *v2;
    if (v5 <= 1) {
      unint64_t v5 = 1;
    }
    do
    {
      uint64_t v7 = *v3++;
      *v6++ = v7;
      --v5;
    }
    while (v5);
  }
  return v2;
}

uint64_t LSTM<short>::inputs(uint64_t a1)
{
  return a1 + 64;
}

void LSTM<short>::targets()
{
}

uint64_t EncoderOneInN::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  }
  return result;
}

void EncoderOneInN::~EncoderOneInN(EncoderOneInN *this)
{
}

uint64_t EncoderOneInN::encodingType(EncoderOneInN *this)
{
  return 1;
}

uint64_t EncoderOneInN::maxOneBits(EncoderOneInN *this)
{
  return 1;
}

uint64_t EncoderOneInN::operator()(uint64_t a1, int a2, void **a3)
{
  *((_DWORD *)*a3 + a2) = 1065353216;
  return 0;
}

uint64_t EncoderOneInN::size(EncoderOneInN *this)
{
  return *((unsigned int *)this + 2);
}

void MRLModelWrapper::makeNewEncoder(MRLModelWrapper *this, int a2, int *a3, int *a4, int a5, int a6)
{
  switch(a2)
  {
    case 0:
      *a3 = 20;
      *a4 = a6;
      operator new();
    case 1:
      *a3 = a5;
      *a4 = a6;
      operator new();
    case 2:
      operator new();
    case 3:
      *a3 = 20;
      *a4 = a6;
      operator new();
    case 4:
      *a3 = a5;
      *a4 = a6;
      operator new();
    case 5:
      *a4 = a6;
      operator new();
    case 6:
      *a3 = a5;
      *a4 = a6;
      if (*((void *)this + 26)) {
        operator new();
      }
      int v6 = 100;
      break;
    default:
      int v6 = 46;
      break;
  }
  exitFramework(v6);
}

void sub_1929379A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  MEMORY[0x192FF16B0](v30, 0x10A1C405897D53FLL);
  _Unwind_Resume(a1);
}

void MRLModelWrapper::cleanupAllBuffers(MRLModelWrapper *this)
{
  uint64_t v1 = *((void *)this + 15);
  if (v1 && *((unsigned char *)this + 188))
  {
    (*(void (**)(void))(**(void **)(v1 + 40) + 208))(*(void *)(v1 + 40));
    int v3 = (void **)*((void *)this + 16);
    if (v3)
    {
      uint64_t v4 = *v3;
      uint64_t v5 = *(void *)*v3;
      if (*((void *)*v3 + 1) == v5) {
        goto LABEL_10;
      }
      unint64_t v6 = 0;
      do
      {
        uint64_t v7 = *(void *)(v5 + 8 * v6);
        if (v7)
        {
          MEMORY[0x192FF1690](v7, 0x1000C8052888210);
          uint64_t v4 = *v3;
          uint64_t v5 = *(void *)*v3;
        }
        ++v6;
      }
      while (v6 < (v4[1] - v5) >> 3);
      int v3 = (void **)*((void *)this + 16);
      if (v3)
      {
LABEL_10:
        unint64_t v12 = v3;
        std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v12);
        MEMORY[0x192FF16B0](v3, 0x20C40960023A9);
      }
      *((void *)this + 16) = 0;
    }
    uint64_t v8 = *((void *)this + 21);
    if (v8)
    {
      MEMORY[0x192FF1690](v8, 0x1000C8052888210);
      *((void *)this + 21) = 0;
    }
    char v9 = (char **)*((void *)this + 22);
    if (v9)
    {
      MRLModelWrapper::freeState(*((void *)this + 15), v9);
      *((void *)this + 22) = 0;
    }
    uint64_t v10 = *((void *)this + 20);
    if (v10)
    {
      char v11 = *(void **)v10;
      if (*(void *)v10)
      {
        *(void *)(v10 + 8) = v11;
        operator delete(v11);
      }
      MEMORY[0x192FF16B0](v10, 0x20C40960023A9);
      *((void *)this + 20) = 0;
    }
    *((unsigned char *)this + 188) = 0;
  }
}

void MRLModelWrapper::freeState(uint64_t a1, char **a2)
{
  if (a1)
  {
    int v3 = a2[1];
    if (v3 != *a2)
    {
      unint64_t v4 = 0;
      uint64_t v5 = 8;
      int v3 = *a2;
      do
      {
        unint64_t v6 = *(void **)&v3[v5];
        if (!*v6 || (MEMORY[0x192FF1690](*v6, 0x1000C8052888210), v3 = *a2, (unint64_t v6 = *(void **)&(*a2)[v5]) != 0))
        {
          MEMORY[0x192FF16B0](v6, 0x80C40B8603338);
          int v3 = *a2;
        }
        ++v4;
        v5 += 16;
      }
      while (v4 < (a2[1] - v3) >> 4);
    }
    if (v3)
    {
      a2[1] = v3;
      operator delete(v3);
    }
    JUMPOUT(0x192FF16B0);
  }
  exitFramework(40);
}

uint64_t EncoderCopy::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
    *(void *)(result + 16) = *(void *)(a2 + 16);
  }
  return result;
}

void EncoderCopy::~EncoderCopy(EncoderCopy *this)
{
}

uint64_t EncoderCopy::encodingType(EncoderCopy *this)
{
  return 6;
}

uint64_t EncoderCopy::maxOneBits(EncoderCopy *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t EncoderCopy::operator()(uint64_t a1, uint64_t a2, _DWORD **a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if ((int)v3 >= 1)
  {
    unint64_t v4 = ***(int ****)(a1 + 16);
    uint64_t v5 = *a3;
    do
    {
      int v6 = *v4++;
      *v5++ = v6;
      --v3;
    }
    while (v3);
  }
  return 0;
}

uint64_t EncoderCopy::size(EncoderCopy *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t EncoderMeta::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    std::vector<NeuralNetwork *>::__assign_with_size[abi:ne180100]<NeuralNetwork **,NeuralNetwork **>((char *)(a1 + 16), *(char **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
  }
  return a1;
}

void EncoderMeta::operator()()
{
}

{
  exitFramework(45);
}

void EncoderMeta::~EncoderMeta(EncoderMeta *this)
{
  *(void *)this = &unk_1EE3181A8;
  float v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x192FF16B0);
}

{
  void *v2;

  *(void *)this = &unk_1EE3181A8;
  float v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
}

uint64_t EncoderMeta::encodingType(EncoderMeta *this)
{
  return 5;
}

uint64_t EncoderMeta::maxOneBits(EncoderMeta *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t EncoderMeta::size(EncoderMeta *this)
{
  return *((unsigned int *)this + 2);
}

void EncoderBitsFromMap::parseLexiconMapFile(uint64_t a1, uint64_t a2, int *a3, char a4)
{
  v39[19] = *MEMORY[0x1E4F143B8];
  *a3 = 0x80000000;
  v28[0] = 0;
  v28[1] = 0;
  uint64_t v29 = 0;
  std::ifstream::basic_ifstream(v37);
  __int16 v21 = a3;
  if (!v38[15]) {
    exitFramework(3);
  }
  int v6 = (std::locale::__imp *)*MEMORY[0x1E4FBA408];
  uint64_t v7 = *(std::locale::__imp **)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v8 = *(void *)(MEMORY[0x1E4FBA408] + 72);
LABEL_3:
  std::ios_base::getloc((const std::ios_base *)((char *)v37 + *(void *)(v37[0] - 24)));
  char v9 = std::locale::use_facet(&v30, MEMORY[0x1E4FBA258]);
  unsigned __int8 v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
  std::locale::~locale(&v30);
  char v11 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v37, (uint64_t)v28, v10);
  if ((*((unsigned char *)v11 + *(void *)(*v11 - 24) + 32) & 5) == 0)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v25, (uint64_t)v28, 24);
    uint64_t v12 = 0;
    memset(&__s, 0, sizeof(__s));
    int v13 = -1;
    while (1)
    {
      while (1)
      {
        uint64_t v14 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v25, (uint64_t)&__s, 0x20u);
        if ((*((unsigned char *)v14 + *(void *)(*v14 - 24) + 32) & 5) != 0)
        {
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__s.__r_.__value_.__l.__data_);
          }
          v25[0] = v6;
          *(void *)((char *)v25 + *((void *)v6 - 3)) = v7;
          v25[2] = v8;
          v25[3] = MEMORY[0x1E4FBA470] + 16;
          if (v26 < 0) {
            operator delete((void *)v25[11]);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x192FF15B0](&v27);
          goto LABEL_3;
        }
        if (v12) {
          break;
        }
LABEL_40:
        ++v12;
      }
      if (v12 == 1)
      {
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v23, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else {
          std::string v23 = __s;
        }
        int v36 = 0;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v30);
        if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v18 = &v23;
        }
        else {
          uint64_t v18 = (std::string *)v23.__r_.__value_.__r.__words[0];
        }
        if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v23.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)v18, size);
        MEMORY[0x192FF10C0](&v30, &v36);
        int v13 = v36;
        v30.__locale_ = v6;
        *(std::locale::__imp **)((char *)&v30.__locale_ + *((void *)v6 - 3)) = v7;
        uint64_t v31 = v8;
        uint64_t v32 = MEMORY[0x1E4FBA470] + 16;
        if (v34 < 0) {
          operator delete(__p);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x192FF15B0](v35);
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v23.__r_.__value_.__l.__data_);
        }
        if (v13 > *v21) {
          *__int16 v21 = v13;
        }
        goto LABEL_40;
      }
      if ((a4 & 1) == 0)
      {
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        {
          if (__s.__r_.__value_.__l.__size_)
          {
            std::string::__init_copy_ctor_external(&v22, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            goto LABEL_14;
          }
        }
        else if (*((unsigned char *)&__s.__r_.__value_.__s + 23))
        {
          std::string v22 = __s;
LABEL_14:
          int v36 = 0;
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v30);
          if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v15 = &v22;
          }
          else {
            int v15 = (std::string *)v22.__r_.__value_.__r.__words[0];
          }
          if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v16 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v16 = v22.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)v15, v16);
          MEMORY[0x192FF10B0](&v30, &v36);
          int v17 = v36;
          v30.__locale_ = v6;
          *(std::locale::__imp **)((char *)&v30.__locale_ + *((void *)v6 - 3)) = v7;
          uint64_t v31 = v8;
          uint64_t v32 = MEMORY[0x1E4FBA470] + 16;
          if (v34 < 0) {
            operator delete(__p);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x192FF15B0](v35);
          if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v22.__r_.__value_.__l.__data_);
          }
          *(_DWORD *)(*(void *)(*(void *)(a1 + 16) + 8 * v13) + 4 * v12 - 8) = v17;
          goto LABEL_40;
        }
      }
    }
  }
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)v37 + *(void *)(v37[0] - 24)), *(_DWORD *)((char *)&v38[2] + *(void *)(v37[0] - 24)) | 4);
  }
  v37[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v37 + *(void *)(v37[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x192FF1040](v38);
  std::istream::~istream();
  MEMORY[0x192FF15B0](v39);
  if (SHIBYTE(v29) < 0) {
    operator delete(v28[0]);
  }
}

void sub_1929387DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  if (a67 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t EncoderBitsFromMap::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  }
  return result;
}

void EncoderBitsFromMap::~EncoderBitsFromMap(EncoderBitsFromMap *this)
{
  EncoderBitsFromMap::~EncoderBitsFromMap(this);

  JUMPOUT(0x192FF16B0);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;

  *(void *)this = &unk_1EE321650;
  float v2 = *((_DWORD *)this + 3);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      unint64_t v4 = *(void *)(*((void *)this + 2) + 8 * i);
      if (v4)
      {
        MEMORY[0x192FF1690](v4, 0x1000C8052888210);
        float v2 = *((_DWORD *)this + 3);
      }
    }
  }
  uint64_t v5 = (void *)*((void *)this + 2);
  if (v5)
  {
    *((void *)this + 3) = v5;
    operator delete(v5);
  }
}

uint64_t EncoderBitsFromMap::encodingType(EncoderBitsFromMap *this)
{
  return 4;
}

uint64_t EncoderBitsFromMap::maxOneBits(EncoderBitsFromMap *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t EncoderBitsFromMap::operator()(uint64_t a1, int a2, void **a3)
{
  return 0;
}

uint64_t EncoderBitsFromMap::size(EncoderBitsFromMap *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t EncoderGray::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  }
  return result;
}

uint64_t EncoderBits::operator=(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  }
  return result;
}

void EncoderGray::~EncoderGray(EncoderGray *this)
{
}

uint64_t EncoderGray::encodingType(EncoderGray *this)
{
  return 3;
}

uint64_t EncoderBits::maxOneBits(EncoderBits *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t EncoderGray::operator()(uint64_t a1, unsigned int a2, float **a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if ((int)v3 >= 1)
  {
    unsigned int v4 = 1 << (v3 - 1);
    uint64_t v5 = *a3;
    do
    {
      if ((v4 & (a2 ^ (a2 >> 1))) != 0) {
        float v6 = 1.0;
      }
      else {
        float v6 = 0.0;
      }
      *v5++ = v6;
      v4 >>= 1;
      --v3;
    }
    while (v3);
  }
  return 0;
}

uint64_t EncoderBits::size(EncoderBits *this)
{
  return *((unsigned int *)this + 2);
}

__n128 EncoderOneInNTwoParts::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    __n128 result = *(__n128 *)(a2 + 24);
    *(__n128 *)(a1 + 24) = result;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  }
  return result;
}

void EncoderOneInNTwoParts::~EncoderOneInNTwoParts(EncoderOneInNTwoParts *this)
{
}

uint64_t EncoderOneInNTwoParts::encodingType(EncoderOneInNTwoParts *this)
{
  return 2;
}

uint64_t EncoderOneInNTwoParts::maxOneBits(EncoderOneInNTwoParts *this)
{
  return 2;
}

uint64_t EncoderOneInNTwoParts::operator()(uint64_t a1, int a2, void **a3)
{
  bzero(*a3, 4 * *(int *)(a1 + 28));
  int v6 = *(_DWORD *)(a1 + 12);
  uint64_t v7 = *a3;
  *((_DWORD *)*a3 + a2 % v6) = 1065353216;
  v7[a2 / v6 + v6] = 1065353216;
  return 0;
}

uint64_t EncoderOneInNTwoParts::size(EncoderOneInNTwoParts *this)
{
  return *((unsigned int *)this + 7);
}

void EncoderBits::~EncoderBits(EncoderBits *this)
{
}

uint64_t EncoderBits::encodingType(EncoderBits *this)
{
  return 0;
}

uint64_t EncoderBits::operator()(uint64_t a1, int a2, float **a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if ((int)v3 >= 1)
  {
    unsigned int v4 = 1 << (v3 - 1);
    uint64_t v5 = *a3;
    do
    {
      if ((v4 & a2) != 0) {
        float v6 = 1.0;
      }
      else {
        float v6 = 0.0;
      }
      *v5++ = v6;
      v4 >>= 1;
      --v3;
    }
    while (v3);
  }
  return 0;
}

void OutputCluster::read(OutputCluster *this, ReadOnlyFile *a2)
{
  *((_DWORD *)this + 2) = -1;
  uint64_t v3 = (int *)((char *)this + 8);
  unsigned int v4 = (int *)(*(void *)a2 + *((int *)a2 + 18));
  if ((unint64_t)v4 <= *(void *)a2 + *((void *)a2 + 1) - 4)
  {
    int v5 = *v4;
    int *v3 = *v4;
    *((_DWORD *)a2 + 18) += 4;
  }
  else
  {
    int v5 = 0;
    int *v3 = 0;
  }
  OutputCluster::init(this, v5);
  operator new[]();
}

void OutputCluster::init(OutputCluster *this, int a2)
{
  if (!a2) {
    exitFramework(42);
  }
  unsigned int v4 = (void **)((char *)this + 16);
  unint64_t v5 = a2;
  std::vector<int>::resize((std::vector<int> *)((char *)this + 16), a2);
  std::vector<std::vector<int>>::resize((uint64_t *)this + 15, v5);
  if (a2 >= 1)
  {
    float v6 = *v4;
    bzero(v6, 4 * a2);
  }
}

uint64_t *ReadOnlyFile::readIntArray(uint64_t *this, int *a2, const int *a3)
{
  if (*a3 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *this;
    unint64_t v5 = *this + this[1] - 4;
    do
    {
      uint64_t v6 = *((int *)this + 18);
      if (v4 + v6 > v5) {
        exitFramework(25);
      }
      int v7 = *(_DWORD *)(v4 + v6);
      *((_DWORD *)this + 18) = v6 + 4;
      a2[v3++] = v7;
    }
    while (v3 < *a3);
  }
  return this;
}

uint64_t *OutputCluster::setWordClass(OutputCluster *this, int a2, unsigned int a3)
{
  if (*((void *)this + 8)) {
    exitFramework(90);
  }
  uint64_t v3 = (uint64_t *)((char *)this + 40);

  return std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::pair<int,int>>(v3, a2, COERCE_DOUBLE(__PAIR64__(a3, a2)));
}

void OutputCluster::insertInVector(std::vector<int> *a1, int a2, int a3)
{
  std::vector<int>::value_type __x = -1;
  std::vector<int>::pointer begin = a1->__begin_;
  uint64_t v5 = a2;
  if (a2 >= (unint64_t)(a1->__end_ - a1->__begin_))
  {
    std::vector<int>::resize(a1, a2 + 1, &__x);
    std::vector<int>::pointer begin = a1->__begin_;
  }
  begin[v5] = a3;
}

uint64_t *OutputCluster::setWordClassIndex(OutputCluster *this, int a2, unsigned int a3)
{
  if (*((void *)this + 13)) {
    exitFramework(91);
  }
  uint64_t v3 = (uint64_t *)((char *)this + 80);

  return std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,std::pair<int,int>>(v3, a2, COERCE_DOUBLE(__PAIR64__(a3, a2)));
}

uint64_t OutputCluster::checkPermutationsForSize(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 8);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = *(void *)(this + 120);
    do
    {
      uint64_t v4 = *(int **)(v3 + 24 * v2);
      uint64_t v5 = *(_DWORD **)(v3 + 24 * v2 + 8);
      unint64_t v6 = v5 - v4;
      if (v6 != *(_DWORD *)(*(void *)(this + 16) + 4 * v2)) {
        exitFramework(23);
      }
      if (v5 != v4)
      {
        if (v6 <= 1) {
          unint64_t v6 = 1;
        }
        do
        {
          int v7 = *v4++;
          if (v7 < 0) {
            exitFramework(45);
          }
          --v6;
        }
        while (v6);
      }
      ++v2;
    }
    while (v2 != v1);
  }
  return this;
}

void OutputCluster::read(OutputCluster *this, __sFILE *__stream)
{
  *((_DWORD *)this + 2) = -1;
  uint64_t v3 = (int *)((char *)this + 8);
  fread((char *)this + 8, 4uLL, 1uLL, __stream);
  OutputCluster::init(this, *v3);
  operator new[]();
}

void OutputCluster::write(OutputCluster *this, __sFILE *a2, int *a3)
{
}

void MRLModelWrapper::MRLModelInitialize(MRLModelWrapper *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *((unsigned char *)this + 188) = 0;
  *((_DWORD *)this + 46) = -1;
  *((_DWORD *)this + 5) = -1;
  *((unsigned char *)this + 152) = 0;
  uint64_t v2 = (const char **)((char *)this + 72);
  int v3 = *((char *)this + 95);
  uint64_t v4 = (char *)this + 72;
  if (v3 < 0) {
    uint64_t v4 = *v2;
  }
  uint64_t v5 = fopen(v4, "rb");
  if (!v5) {
    exitFramework(12);
  }
  unint64_t v6 = v5;
  int v7 = (_DWORD *)*((void *)this + 3);
  LODWORD(__ptr) = -1;
  fread(&__ptr, 4uLL, 1uLL, v5);
  int v8 = __ptr;
  if (__ptr > 1)
  {
    if ((__ptr & 0xFFFFFFFE) == 4)
    {
      long long __str = xmmword_192DCA5F0;
      *(void *)&long long __str_16 = 0x100000001;
      DWORD2(__str_16) = 32;
      SentenceFileHeader::read((SentenceFileHeader *)&__str, v6);
      int v9 = DWORD2(__str_16);
      *(_DWORD *)this = __str_16;
      unsigned int v12 = DWORD1(__str);
      *((_DWORD *)this + 46) = DWORD1(__str_16);
      *((void *)this + 2) = v12;
      if (v8 == 5)
      {
        (*(void (**)(_DWORD *, __sFILE *, uint64_t))(*(void *)v7 + 8))(v7, v6, 1);
        *((_DWORD *)this + 5) = v7[2];
      }
LABEL_8:
      fread((char *)this + 32, 4uLL, 1uLL, v6);
      fread((char *)this + 40, 4uLL, 1uLL, v6);
      fread((char *)this + 36, 4uLL, 1uLL, v6);
      {
        int v16 = 52;
        long long __str = xmmword_192DD9B84;
        long long __str_16 = unk_192DD9B94;
        std::unordered_set<int>::unordered_set((int *)&__str, 9);
        __cxa_atexit((void (*)(void *))std::unordered_set<int>::~unordered_set[abi:ne180100], &MRLModelWrapper::readHeaderMaps(__sFILE *,int &,int &)::kBidirectionalSet, &dword_1920CB000);
      }
      *((unsigned char *)this + 216) = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(&MRLModelWrapper::readHeaderMaps(__sFILE *,int &,int &)::kBidirectionalSet, *((_DWORD *)this + 4)) != 0;
      int v10 = *((_DWORD *)this + 46);
      *((unsigned char *)this + 152) = v10 != 1;
      *((void *)this + 18) = 0;
      if (v10 != 3)
      {
        if (v10 == 2) {
          operator new();
        }
        *((void *)this + 17) = v9;
        fclose(v6);
        maxFeatureVectors = 2;
        if (*((unsigned char *)this + 216)) {
          int v11 = 70;
        }
        else {
          int v11 = 2;
        }
        *((_DWORD *)this + 56) = v11;
        MRLModelWrapper::makeNewEncoder(this, *(_DWORD *)this, (int *)this + 8, (int *)this + 9, *((_DWORD *)this + 8), *((_DWORD *)this + 9));
      }
      operator new();
    }
    if ((__ptr & 0xFFFFFFFE) != 2) {
      exitFramework(38);
    }
    long long __str = xmmword_192DCA5F0;
    *(void *)&long long __str_16 = 0x100000001;
    DWORD2(__str_16) = 32;
    SentenceFileHeader::read((SentenceFileHeader *)&__str, v6);
    *(_DWORD *)this = __str_16;
    *((_DWORD *)this + 4) = DWORD1(__str);
    if (v8 == 3) {
      goto LABEL_6;
    }
  }
  else
  {
    *(_DWORD *)this = -1;
    *((_DWORD *)this + 4) = 4;
    if (*((int *)this + 5) >= 1)
    {
LABEL_6:
      (*(void (**)(_DWORD *, __sFILE *, uint64_t))(*(void *)v7 + 8))(v7, v6, 1);
      *((_DWORD *)this + 5) = v7[2];
    }
  }
  int v9 = 32;
  goto LABEL_8;
}

void sub_19293BFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
}

uint64_t ReadOnlyFile::ReadOnlyFile(uint64_t a1, long long *a2, const std::string::value_type *a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    *(void *)(a1 + 32) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v6;
  }
  if (a3[23] < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *(_OWORD *)a3;
    *(void *)(a1 + 56) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 40) = v7;
  }
  *(_DWORD *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 68) = 1;
  *(_DWORD *)(a1 + 72) = 0;
  if (a3[23] < 0)
  {
    uint64_t v9 = *((void *)a3 + 1);
    if (v9 != 1)
    {
      if (v9 != 2) {
        goto LABEL_33;
      }
      a3 = *(const std::string::value_type **)a3;
LABEL_14:
      if (*(_WORD *)a3 != 11122) {
        goto LABEL_33;
      }
      *(_DWORD *)(a1 + 64) = 514;
      if (*((char *)a2 + 23) >= 0) {
        int v10 = (const char *)a2;
      }
      else {
        int v10 = *(const char **)a2;
      }
      int v11 = open(v10, 514, 384);
      goto LABEL_26;
    }
    int v12 = **(unsigned __int8 **)a3;
  }
  else
  {
    int v8 = *((unsigned __int8 *)a3 + 23);
    if (v8 != 1)
    {
      if (v8 != 2) {
LABEL_33:
      }
        exitFramework(11);
      goto LABEL_14;
    }
    int v12 = *(unsigned __int8 *)a3;
  }
  if (v12 != 114) {
    goto LABEL_33;
  }
  *(_DWORD *)(a1 + 64) = 0;
  if (*((char *)a2 + 23) >= 0) {
    int v13 = (const char *)a2;
  }
  else {
    int v13 = *(const char **)a2;
  }
  int v11 = open(v13, 0);
LABEL_26:
  int v14 = v11;
  if (v11 < 0) {
    goto LABEL_33;
  }
  if (fstat(v11, &v19) < 0)
  {
    close(v14);
    goto LABEL_33;
  }
  st_std::string::size_type size = v19.st_size;
  *(void *)(a1 + 8) = v19.st_size;
  uint64_t v20 = 0;
  int v21 = st_size;
  fcntl(v14, 44, &v20);
  size_t v16 = *(void *)(a1 + 8);
  if (v16)
  {
    uint64_t v17 = mmap(0, v16, *(_DWORD *)(a1 + 64) & 2 | 1u, 1, v14, 0);
    if (v17 == (void *)-1)
    {
      close(v14);
      exitFramework(11);
    }
    *(void *)a1 = v17;
  }
  close(v14);
  return a1;
}

void sub_19293C374(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 39) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SentenceRecognizer::processReadDataFileHeader(uint64_t this, ReadOnlyFile *a2, uint64_t a3, SentenceFileHeader *a4, OutputCluster *a5)
{
  uint64_t v5 = *((int *)a2 + 18);
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *((void *)a2 + 1);
  int v8 = (unsigned int *)(*(void *)a2 + v5);
  unint64_t v9 = *(void *)a2 + v7 - 4;
  if ((unint64_t)v8 > v9)
  {
    int v10 = *(_DWORD *)(this + 24);
    *(_OWORD *)a3 = xmmword_192DCA610;
    *(_DWORD *)(a3 + 16) = v10;
    *(void *)(a3 + 20) = 0x2000000001;
    return this;
  }
  unsigned int v11 = *v8;
  int v12 = v5 + 4;
  *((_DWORD *)a2 + 18) = v5 + 4;
  if (v11 <= 1)
  {
    int v13 = *(_DWORD *)(this + 24);
    *(_OWORD *)a3 = xmmword_192DCA610;
    *(_DWORD *)(a3 + 16) = v13;
    *(void *)(a3 + 20) = 0x2000000001;
    if (!v11) {
      return this;
    }
    goto LABEL_37;
  }
  if (v11 - 2 > 3) {
    exitFramework(38);
  }
  if (v6 + v12 <= v9)
  {
    LODWORD(v14) = v5 + 8;
    *((_DWORD *)a2 + 18) = v14;
    uint64_t v14 = (int)v14;
  }
  else
  {
    uint64_t v14 = v12;
  }
  int v15 = (_DWORD *)(v6 + v14);
  if ((unint64_t)v15 <= v9)
  {
    *(_DWORD *)a3 = *v15;
    int v16 = *((_DWORD *)a2 + 18) + 4;
    *((_DWORD *)a2 + 18) = v16;
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = *((void *)a2 + 1);
  }
  else
  {
    *(_DWORD *)a3 = 0;
    int v16 = *((_DWORD *)a2 + 18);
  }
  uint64_t v17 = (_DWORD *)(v6 + v16);
  if ((unint64_t)v17 <= v6 + v7 - 4)
  {
    *(_DWORD *)(a3 + 4) = *v17;
    int v18 = *((_DWORD *)a2 + 18) + 4;
    *((_DWORD *)a2 + 18) = v18;
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = *((void *)a2 + 1);
  }
  else
  {
    *(_DWORD *)(a3 + 4) = 0;
    int v18 = *((_DWORD *)a2 + 18);
  }
  stat v19 = (_DWORD *)(v6 + v18);
  if ((unint64_t)v19 <= v6 + v7 - 4)
  {
    *(_DWORD *)(a3 + 8) = *v19;
    int v20 = *((_DWORD *)a2 + 18) + 4;
    *((_DWORD *)a2 + 18) = v20;
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = *((void *)a2 + 1);
  }
  else
  {
    *(_DWORD *)(a3 + 8) = 0;
    int v20 = *((_DWORD *)a2 + 18);
  }
  int v21 = (int *)(v6 + v20);
  if ((unint64_t)v21 <= v6 + v7 - 4)
  {
    int v22 = *v21;
    *(_DWORD *)(a3 + 12) = v22;
    int v23 = *((_DWORD *)a2 + 18) + 4;
    *((_DWORD *)a2 + 18) = v23;
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = *((void *)a2 + 1);
  }
  else
  {
    int v22 = 0;
    *(_DWORD *)(a3 + 12) = 0;
    int v23 = *((_DWORD *)a2 + 18);
  }
  uint64_t v24 = (_DWORD *)(v6 + v23);
  if ((unint64_t)v24 <= v6 + v7 - 4)
  {
    *(_DWORD *)(a3 + 16) = *v24;
    int v25 = *((_DWORD *)a2 + 18) + 4;
    *((_DWORD *)a2 + 18) = v25;
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = *((void *)a2 + 1);
  }
  else
  {
    *(_DWORD *)(a3 + 16) = 0;
    int v25 = *((_DWORD *)a2 + 18);
  }
  char v26 = (_DWORD *)(v6 + v25);
  if ((unint64_t)v26 <= v6 + v7 - 4)
  {
    *(_DWORD *)(a3 + 20) = *v26;
    *((_DWORD *)a2 + 18) += 4;
  }
  else
  {
    *(_DWORD *)(a3 + 20) = 0;
  }
  if ((v22 & 3) == 0) {
    goto LABEL_40;
  }
  unsigned int v27 = v22 & 0xFFFFFFFC;
  if ((v22 & 0xFFFFFFFC) == 0) {
    unsigned int v27 = 32;
  }
  *(_DWORD *)(a3 + 24) = v27;
  if (v27 > 0x20 || ((1 << v27) & 0x100010100) == 0) {
LABEL_40:
  }
    exitFramework(25);
  *(_DWORD *)(a3 + 12) = v22 & 3;
  if (*((_DWORD *)a2 + 18) != 32) {
    exitFramework(67);
  }
  if (v11 == 3 || v11 == 5)
  {
LABEL_37:
    __int16 v28 = *(uint64_t (**)(SentenceFileHeader *))(*(void *)a4 + 16);
    return v28(a4);
  }
  return this;
}

void std::unordered_set<int>::unordered_set(int *a1, uint64_t a2)
{
  MRLModelWrapper::readHeaderMaps(__sFILE *,int &,int &)::kBidirectionalSet = 0u;
  unk_1E9307058 = 0u;
  dword_1E9307068 = 1065353216;
  if (a2)
  {
    uint64_t v3 = 4 * a2;
    do
    {
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)&MRLModelWrapper::readHeaderMaps(__sFILE *,int &,int &)::kBidirectionalSet, *a1, *a1);
      ++a1;
      v3 -= 4;
    }
    while (v3);
  }
}

void sub_19293C6C4(_Unwind_Exception *a1)
{
}

MRLModelWrapper *MRLModelWrapper::optionalResizeRealloc(MRLModelWrapper *this, const char *a2)
{
  int v2 = (int)a2;
  uint64_t v3 = (uint64_t)this;
  if (maxFeatureVectors < (int)a2 || !*((unsigned char *)this + 188))
  {
    MRLModelWrapper::cleanupAllBuffers(this);
    *(unsigned char *)(v3 + 188) = 0;
    maxFeatureVectors = *(_DWORD *)(v3 + 220);
    *(_DWORD *)(v3 + 224) = v2;
    return (MRLModelWrapper *)MRLModelWrapper::allocAllBuffers(v3);
  }
  return this;
}

uint64_t MRLModelWrapper::allocAllBuffers(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 120);
  if (!v1) {
    exitFramework(37);
  }
  uint64_t v2 = this;
  if (!*(unsigned char *)(this + 188))
  {
    if (*(unsigned char *)(this + 216))
    {
      (*(void (**)(void))(**(void **)(v1 + 40) + 184))(*(void *)(v1 + 40));
      if (!*(void *)(v2 + 120)) {
        exitFramework(639);
      }
    }
    operator new();
  }
  return this;
}

void sub_19293C8B0(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

void MRLModelWrapper::resizeXs(MRLModelWrapper *this, int a2)
{
  uint64_t v4 = (char ***)*((void *)this + 16);
  uint64_t v5 = *v4;
  if (v4[1] != *v4)
  {
    uint64_t v6 = *v5;
    if (v5[1] != *v5)
    {
      unint64_t v7 = 0;
      do
      {
        uint64_t v8 = *(void *)&v6[8 * v7];
        if (v8)
        {
          MEMORY[0x192FF1690](v8, 0x1000C8052888210);
          uint64_t v5 = *v4;
          uint64_t v6 = **v4;
        }
        ++v7;
      }
      while (v7 < (v5[1] - v6) >> 3);
    }
  }
  std::vector<std::vector<VVector<float>>>::resize((uint64_t)v4, 1uLL);
  std::vector<VVector<float>>::resize(*v4, a2);
  if (a2 >= 1)
  {
    uint64_t v9 = **(void **)(*((void *)this + 15) + 104);
    (*(void (**)(uint64_t))(*(void *)v9 + 264))(v9);
    operator new[]();
  }
}

void MRLModelWrapper::allocInitialState(MRLModelWrapper *this)
{
  if (this) {
    operator new();
  }
  exitFramework(34);
}

uint64_t std::map<std::string,int>::map[abi:ne180100](uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      uint64_t v6 = *(void *)(a1 + 8);
      unint64_t v7 = (void *)v3;
      if (*(void *)a1 == v3) {
        goto LABEL_8;
      }
      uint64_t v8 = *(void **)(a1 + 8);
      uint64_t v9 = (void *)v3;
      if (v6)
      {
        do
        {
          unint64_t v7 = v8;
          uint64_t v8 = (void *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          unint64_t v7 = (void *)v9[2];
          BOOL v10 = *v7 == (void)v9;
          uint64_t v9 = v7;
        }
        while (v10);
      }
      if (std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7 + 4, v5 + 4))
      {
LABEL_8:
        if (!v6)
        {
          int v16 = (void *)v3;
          unsigned int v11 = (uint64_t **)v3;
LABEL_14:
          std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::pair<std::string const,int> const&>((uint64_t)&v15, a1, (uint64_t)(v5 + 4));
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v16, v11, v15);
          goto LABEL_15;
        }
        int v16 = v7;
        unsigned int v11 = (uint64_t **)(v7 + 1);
      }
      else
      {
        unsigned int v11 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(a1, &v16, v5 + 4);
      }
      if (!*v11) {
        goto LABEL_14;
      }
LABEL_15:
      int v12 = (void *)v5[1];
      if (v12)
      {
        do
        {
          int v13 = v12;
          int v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          int v13 = (void *)v5[2];
          BOOL v10 = *v13 == (void)v5;
          uint64_t v5 = v13;
        }
        while (!v10);
      }
      uint64_t v5 = v13;
    }
    while (v13 != v4);
  }
  return a1;
}

void sub_19293CC08(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__construct_node<std::pair<std::string const,int> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  unint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
  }
  *((_DWORD *)v6 + 14) = *(_DWORD *)(a3 + 24);
  *(unsigned char *)(a1 + 16) = 1;
}

void sub_19293CC9C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](0, v2);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<int>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<int>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_19293CD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void SentenceRecognizer::recognizeSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, float *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(_DWORD *)(a1 + 12) = a7;
  uint64_t v18 = *a4;
  uint64_t v19 = a4[1];
  if (*(unsigned char *)(a1 + 16)) {
    BOOL v20 = v19 == v18;
  }
  else {
    BOOL v20 = 1;
  }
  if (!v20)
  {
    (*(void (**)(void, uint64_t *, uint64_t, uint64_t, uint64_t))(**(void **)(*(void *)(a1 + 112) - 8)
                                                                         + 216))(*(void *)(*(void *)(a1 + 112) - 8), a4, a3, a7, a8);
    uint64_t v18 = *a4;
    uint64_t v19 = a4[1];
  }
  uint64_t v21 = *(void *)(a1 + 40);
  if (v19 == v18)
  {
    if ((int)a7 >= 0x2000000) {
      int v23 = a7 & 0xFF000000;
    }
    else {
      int v23 = 0x1000000;
    }
    uint64_t v24 = v23 & 0xFF000000 | a7 & 0xFFFFFF;
    int v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v21 + 304);
    v25(v21, a2, a3, v24, a9, a10, a11);
  }
  else
  {
    {
      {
        NeuralNetwork::recognize(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,std::vector<VVector<float>> const&,int,int &,float &,int,int &,std::vector<std::pair<int,VVector<float>*>> *,int &,int)::dummy2 = 0;
        unk_1E9307C00 = 0;
        qword_1E9307C08 = 0;
        __cxa_atexit((void (*)(void *))std::vector<int>::~vector[abi:ne180100], &NeuralNetwork::recognize(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,std::vector<VVector<float>> const&,int,int &,float &,int,int &,std::vector<std::pair<int,VVector<float>*>> *,int &,int)::dummy2, &dword_1920CB000);
      }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v21 + 304))(v21, a2, a3, a7, a9, a10, &NeuralNetwork::recognize(std::vector<VVector<float>> const&,std::vector<std::vector<int>> const&,std::vector<VVector<float>> const&,int,int &,float &,int,int &,std::vector<std::pair<int,VVector<float>*>> *,int &,int)::dummy2);
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 40))(v21);
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, void))(*(void *)v21 + 344))(v21, a4, v22, a7, a5, 0);
    *a6 = (*(float (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v21 + 352))(v21, a4, a7);
  }
}

uint64_t std::vector<VVector<float>>::~vector[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t MRLModelWrapper::clearState(uint64_t result, uint64_t a2)
{
  if (!result) {
    exitFramework(36);
  }
  if (a2)
  {
    int v2 = 0;
    return (*(uint64_t (**)(void, uint64_t, int *))(**(void **)(result + 40) + 152))(*(void *)(result + 40), a2, &v2);
  }
  return result;
}

uint64_t MRLModelWrapper::saveState(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    exitFramework(36);
  }
  if (!a2) {
    exitFramework(37);
  }
  int v3 = 0;
  return (*(uint64_t (**)(void, uint64_t, uint64_t, int *))(**(void **)(a1 + 40) + 136))(*(void *)(a1 + 40), a2, 1, &v3);
}

uint64_t MRLModelWrapper::restoreState(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    exitFramework(38);
  }
  if (!a2) {
    exitFramework(39);
  }
  int v3 = 0;
  return (*(uint64_t (**)(void, uint64_t, void, int *))(**(void **)(a1 + 40) + 144))(*(void *)(a1 + 40), a2, 0, &v3);
}

uint64_t Espresso::ANECompilerEngine::batch::sync_point(Espresso::ANECompilerEngine::batch *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 24))();
}

void Espresso::ANECompilerEngine::batch::~batch(Espresso::ANECompilerEngine::batch *this)
{
  Espresso::abstract_batch::~abstract_batch(this);

  JUMPOUT(0x192FF16B0);
}

void std::vector<unsigned long>::reserve(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a2);
    size_t v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v7 = &v4[8 * v6];
    uint64_t v8 = (char *)*a1;
    uint64_t v9 = (char *)a1[1];
    BOOL v10 = v5;
    if (v9 != *a1)
    {
      BOOL v10 = v5;
      do
      {
        uint64_t v11 = *((void *)v9 - 1);
        v9 -= 8;
        *((void *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void Espresso::ANECompilerEngine::context::create_compiler_for_network(uint64_t a1, uint64_t a2)
{
  unsigned int v11 = (***(uint64_t (****)(void))(a1 + 8))(*(void *)(a1 + 8));
  int64_t v3 = operator new(0x248uLL);
  uint64_t v4 = v3;
  v3[1] = 0;
  v3[2] = 0;
  void *v3 = &unk_1EE385828;
  size_t v5 = v3 + 3;
  uint64_t v6 = *(void *)(a2 + 8);
  v12[0] = *(_DWORD **)a2;
  v12[1] = (_DWORD *)v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::compiler::compiler((uint64_t)(v3 + 3), (const Espresso::net **)v12);
  if (v6) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v6);
  }
  uint64_t v7 = *(void *)a2 + 528;
  v12[0] = &v11;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v7, &v11, (uint64_t)&std::piecewise_construct, v12);
  *(void *)&long long v9 = v5;
  *((void *)&v9 + 1) = v4;
  BOOL v10 = (std::__shared_weak_count *)v8[4];
  *(_OWORD *)(v8 + 3) = v9;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_19293D380(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::compiler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::compiler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385828;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::compiler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE385828;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void ___ZN8Espresso17ANECompilerEngine7context21decompose_tile_kernelEPNS_3netEPS1__block_invoke(uint64_t a1, int64x2_t *a2)
{
  *(void *)&long long v64 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2->i64[0] + 8) == *(void *)(a1 + 32))
  {
    uint64_t v3 = a1;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v60 = 0u;
    LODWORD(v58) = a2[3].i32[2];
    long long v59 = 0uLL;
    unint64_t v4 = a2[2].u64[1];
    if (v4 >= a2[3].i64[0])
    {
      uint64_t v5 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)&v58);
    }
    else
    {
      std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(v4, (uint64_t)&v58);
      uint64_t v5 = v4 + 72;
      a2[2].i64[1] = v4 + 72;
    }
    a2[2].i64[1] = v5;
    v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
    v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
    if (*((void *)&v59 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v59 + 1));
    }
    uint64_t v6 = a2->i64[0] + 8;
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2->i64[0] + 320))(a2->i64[0]);
    long long v53 = *(_OWORD *)v7;
    uint64_t v8 = *(void *)(v3 + 40);
    int v54 = *(_DWORD *)(v7 + 16);
    unint64_t v9 = a2[3].i32[2];
    v57.__r_.__value_.__r.__words[0] = v9;
    int v58 = (std::string **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v8 + 56, v9, &v57)[3];
    BOOL v10 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v8 + 184), v58, (long long **)&v58);
    uint64_t v11 = *(void *)(v3 + 40) + 56;
    unint64_t v12 = a2[3].i32[2];
    int v58 = (std::string **)v12;
    uint64_t v13 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v11, v12, &v58)[3];
    uint64_t v14 = *(void *)(v3 + 40) + 96;
    unint64_t v15 = a2[3].i32[2];
    v52.__r_.__value_.__r.__words[0] = v15;
    int v16 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v14, v15, &v52);
    Espresso::ANECompilerEngine::tile_kernel::concat_decomposition((std::string::size_type)&v55, v6, (int *)&v53, (int *)v10 + 14, v13, v16[3], *(_DWORD *)(*(void *)(*(void *)(*(void *)(v3 + 40) + 32) + 16 * a2[3].i32[2]) + 12));
    uint64_t v17 = v55;
    uint64_t v45 = v56;
    if (v55 != v56)
    {
      int v18 = 0;
      while (1)
      {
        uint64_t v20 = *v17;
        uint64_t v19 = (std::__shared_weak_count *)v17[1];
        uint64_t v21 = *v17;
        if (v19)
        {
          atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v21 = *v17;
        }
        uint64_t v22 = v3;
        int v23 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v21 + 272))(v21);
        std::string::basic_string[abi:ne180100]<0>(&v52, v23);
        uint64_t v24 = a2[1].i64[0];
        if (*(char *)(v24 + 39) >= 0) {
          size_t v25 = *(unsigned __int8 *)(v24 + 39);
        }
        else {
          size_t v25 = *(void *)(v24 + 24);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v50, v25 + 3);
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v26 = &v50;
        }
        else {
          char v26 = (std::string *)v50.__r_.__value_.__r.__words[0];
        }
        if (v25)
        {
          if (*(char *)(v24 + 39) >= 0) {
            unsigned int v27 = (const void *)(v24 + 16);
          }
          else {
            unsigned int v27 = *(const void **)(v24 + 16);
          }
          memmove(v26, v27, v25);
        }
        *(_DWORD *)((char *)&v26->__r_.__value_.__l.__data_ + v25) = 4218719;
        std::to_string(&v49, v18);
        __int16 v28 = (v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v49
            : (std::string *)v49.__r_.__value_.__r.__words[0];
        std::string::size_type v29 = (v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(v49.__r_.__value_.__r.__words[2])
            : v49.__r_.__value_.__l.__size_;
        std::locale v30 = std::string::append(&v50, (const std::string::value_type *)v28, v29);
        uint64_t v3 = v22;
        long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        if (*((char *)v17 + 151) < 0)
        {
          std::string::__init_copy_ctor_external(&v63, (const std::string::value_type *)v17[16], v17[17]);
        }
        else
        {
          long long v32 = *((_OWORD *)v17 + 8);
          v63.__r_.__value_.__r.__words[2] = v17[18];
          *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v32;
        }
        BOOL v46 = 0;
        uint64_t v47 = 0;
        __int16 v48 = 0;
        int v58 = &v46;
        LOBYTE(v59) = 0;
        BOOL v46 = (std::string *)operator new(0x18uLL);
        uint64_t v47 = v46;
        __int16 v48 = v46 + 1;
        uint64_t v47 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v48, (long long *)&v63, &v64, v46);
        LODWORD(v58) = 0;
        long long v59 = 0u;
        long long v60 = 0u;
        long long v61 = 0u;
        long long v62 = 0u;
        uint64_t v33 = (char *)operator new(0xF8uLL);
        *((void *)v33 + 1) = 0;
        *((void *)v33 + 2) = 0;
        *(void *)uint64_t v33 = &unk_1EE389DF0;
        *((void *)v33 + 3) = &unk_1EE36C758;
        *(_OWORD *)(v33 + 40) = 0u;
        *(_OWORD *)(v33 + 56) = 0u;
        *(_OWORD *)(v33 + 72) = 0u;
        *(_OWORD *)(v33 + 88) = 0u;
        *(_OWORD *)(v33 + 104) = 0u;
        *(_OWORD *)(v33 + 120) = 0u;
        *(_OWORD *)(v33 + 136) = 0u;
        *(_OWORD *)(v33 + 152) = 0u;
        *(_OWORD *)(v33 + 161) = 0u;
        *((_OWORD *)v33 + 13) = 0u;
        *((_OWORD *)v33 + 14) = 0u;
        *((void *)v33 + 30) = 0;
        *(void *)&long long v59 = v33 + 24;
        *((void *)&v59 + 1) = v33;
        if (v19)
        {
          atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          char v34 = (std::__shared_weak_count *)*((void *)v33 + 12);
          *((void *)v33 + 11) = v20;
          *((void *)v33 + 12) = v19;
          if (v34) {
            nitro::nitro_function::nitro_function(v34);
          }
        }
        else
        {
          *((void *)v33 + 11) = v20;
          *((void *)v33 + 12) = 0;
        }
        std::string::operator=((std::string *)(v59 + 16), &__str);
        std::string::operator=((std::string *)(v59 + 40), &v52);
        int v35 = (***(uint64_t (****)(void))(*(void *)(v20 + 8) + 8))(*(void *)(*(void *)(v20 + 8) + 8));
        uint64_t v36 = v59;
        *(_DWORD *)(v59 + 8) = v35;
        uint64_t v37 = a2[1].i64[0];
        if (v37)
        {
          *(_DWORD *)(v36 + 12) = *(_DWORD *)(v37 + 12);
          if (*(char *)(v37 + 223) < 0) {
            std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)(v37 + 200), *(void *)(v37 + 208));
          }
          else {
            std::string v57 = *(std::string *)(v37 + 200);
          }
          std::string::operator=((std::string *)(v36 + 200), &v57);
          if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v57.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          uint64_t v38 = *(void *)(a2[4].i64[0] + 32);
          if (*(void *)(a2[4].i64[0] + 40) != v38) {
            *(_DWORD *)(v36 + 12) = *(_DWORD *)(*(void *)v38 + 12);
          }
        }
        if (v17 + 13 != (uint64_t *)&v60) {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v60, (std::string *)v17[13], (std::string *)v17[14], 0xAAAAAAAAAAAAAAABLL * ((v17[14] - v17[13]) >> 3));
        }
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v61 + 8, v46, v47, 0xAAAAAAAAAAAAAAABLL * (((char *)v47 - (char *)v46) >> 3));
        LODWORD(v58) = a2[3].i32[2];
        unint64_t v39 = a2[2].u64[1];
        if (v39 >= a2[3].i64[0])
        {
          uint64_t v40 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)&v58);
        }
        else
        {
          std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a2[2].i64[1], (uint64_t)&v58);
          uint64_t v40 = v39 + 72;
          a2[2].i64[1] = v39 + 72;
        }
        a2[2].i64[1] = v40;
        v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61 + 8;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
        v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
        if (*((void *)&v59 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v59 + 1));
        }
        int v58 = &v46;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v63.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v49.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v50.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
          break;
        }
        if (v19) {
          goto LABEL_60;
        }
LABEL_61:
        __int16 v41 = (uint64_t **)(*(void *)(v22 + 40) + 184);
        v57.__r_.__value_.__r.__words[0] = (std::string::size_type)(v17 + 16);
        __int16 v42 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v41, v17 + 16, (long long **)&v57);
        long long v43 = *(_OWORD *)(v17 + 5);
        long long v44 = *(_OWORD *)(v17 + 7);
        *((void *)v42 + 11) = v17[9];
        *(_OWORD *)(v42 + 72) = v44;
        *(_OWORD *)(v42 + 56) = v43;
        if (v17 + 5 != (uint64_t *)(v42 + 56)) {
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v42 + 96, (char *)v17[10], v17[11], (v17[11] - v17[10]) >> 2);
        }
        ++v18;
        v17 += 19;
        if (v17 == v45) {
          goto LABEL_67;
        }
      }
      operator delete(v52.__r_.__value_.__l.__data_);
      if (!v19) {
        goto LABEL_61;
      }
LABEL_60:
      nitro::nitro_function::nitro_function(v19);
      goto LABEL_61;
    }
LABEL_67:
    int v58 = (std::string **)&v55;
    std::vector<Espresso::ANECompilerEngine::decomposition_node>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  }
}

void sub_19293DB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)(v54 - 200));
  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine7context21decompose_fill_kernelEPNS_3netEPS1__block_invoke(uint64_t a1, int64x2_t *a2)
{
  *(void *)&long long v58 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2->i64[0] + 8) == *(void *)(a1 + 32))
  {
    long long v55 = 0u;
    long long v56 = 0u;
    long long v54 = 0u;
    LODWORD(v52) = a2[3].i32[2];
    long long v53 = 0uLL;
    unint64_t v4 = a2[2].u64[1];
    if (v4 >= a2[3].i64[0])
    {
      uint64_t v5 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)&v52);
    }
    else
    {
      std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(v4, (uint64_t)&v52);
      uint64_t v5 = v4 + 72;
      a2[2].i64[1] = v4 + 72;
    }
    a2[2].i64[1] = v5;
    v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
    v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
    if (*((void *)&v53 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v53 + 1));
    }
    uint64_t v6 = a2->i64[0] + 8;
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2->i64[0] + 320))(a2->i64[0]);
    long long v8 = *(_OWORD *)(v7 + 16);
    v47[0] = *(_OWORD *)v7;
    v47[1] = v8;
    uint64_t v9 = *(void *)(a1 + 40);
    int v48 = *(_DWORD *)(v7 + 32);
    unint64_t v10 = a2[3].i32[2];
    std::string v52 = (std::string **)v10;
    uint64_t v11 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9 + 96, v10, &v52);
    Espresso::ANECompilerEngine::fill_kernel::decomposition(&v49, v6, (uint64_t)v47, (const void **)v11[3], *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 32) + 16 * a2[3].i32[2]) + 12));
    unint64_t v12 = v49;
    unint64_t v39 = v50;
    if (v49 != v50)
    {
      int v13 = 0;
      while (1)
      {
        uint64_t v15 = *v12;
        uint64_t v14 = (std::__shared_weak_count *)v12[1];
        uint64_t v16 = *v12;
        if (v14)
        {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v16 = *v12;
        }
        uint64_t v17 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 272))(v16);
        std::string::basic_string[abi:ne180100]<0>(&v46, v17);
        uint64_t v18 = a2[1].i64[0];
        if (*(char *)(v18 + 39) >= 0) {
          size_t v19 = *(unsigned __int8 *)(v18 + 39);
        }
        else {
          size_t v19 = *(void *)(v18 + 24);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v44, v19 + 3);
        if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v20 = &v44;
        }
        else {
          uint64_t v20 = (std::string *)v44.__r_.__value_.__r.__words[0];
        }
        if (v19)
        {
          if (*(char *)(v18 + 39) >= 0) {
            uint64_t v21 = (const void *)(v18 + 16);
          }
          else {
            uint64_t v21 = *(const void **)(v18 + 16);
          }
          memmove(v20, v21, v19);
        }
        *(_DWORD *)((char *)&v20->__r_.__value_.__l.__data_ + v19) = 4218719;
        std::to_string(&v43, v13);
        uint64_t v22 = (v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v43
            : (std::string *)v43.__r_.__value_.__r.__words[0];
        std::string::size_type v23 = (v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(v43.__r_.__value_.__r.__words[2])
            : v43.__r_.__value_.__l.__size_;
        uint64_t v24 = std::string::append(&v44, (const std::string::value_type *)v22, v23);
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        if (*((char *)v12 + 151) < 0)
        {
          std::string::__init_copy_ctor_external(&v57, (const std::string::value_type *)v12[16], v12[17]);
        }
        else
        {
          long long v26 = *((_OWORD *)v12 + 8);
          v57.__r_.__value_.__r.__words[2] = v12[18];
          *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v26;
        }
        uint64_t v40 = 0;
        __int16 v41 = 0;
        __int16 v42 = 0;
        std::string v52 = &v40;
        LOBYTE(v53) = 0;
        uint64_t v40 = (std::string *)operator new(0x18uLL);
        __int16 v41 = v40;
        __int16 v42 = v40 + 1;
        __int16 v41 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v42, (long long *)&v57, &v58, v40);
        LODWORD(v52) = 0;
        long long v53 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        unsigned int v27 = (char *)operator new(0xF8uLL);
        *((void *)v27 + 1) = 0;
        *((void *)v27 + 2) = 0;
        *(void *)unsigned int v27 = &unk_1EE389DF0;
        *((void *)v27 + 3) = &unk_1EE36C758;
        *(_OWORD *)(v27 + 40) = 0u;
        *(_OWORD *)(v27 + 56) = 0u;
        *(_OWORD *)(v27 + 72) = 0u;
        *(_OWORD *)(v27 + 88) = 0u;
        *(_OWORD *)(v27 + 104) = 0u;
        *(_OWORD *)(v27 + 120) = 0u;
        *(_OWORD *)(v27 + 136) = 0u;
        *(_OWORD *)(v27 + 152) = 0u;
        *(_OWORD *)(v27 + 161) = 0u;
        *((_OWORD *)v27 + 13) = 0u;
        *((_OWORD *)v27 + 14) = 0u;
        *((void *)v27 + 30) = 0;
        *(void *)&long long v53 = v27 + 24;
        *((void *)&v53 + 1) = v27;
        if (v14)
        {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          __int16 v28 = (std::__shared_weak_count *)*((void *)v27 + 12);
          *((void *)v27 + 11) = v15;
          *((void *)v27 + 12) = v14;
          if (v28) {
            nitro::nitro_function::nitro_function(v28);
          }
        }
        else
        {
          *((void *)v27 + 11) = v15;
          *((void *)v27 + 12) = 0;
        }
        std::string::operator=((std::string *)(v53 + 16), &__str);
        std::string::operator=((std::string *)(v53 + 40), &v46);
        int v29 = (***(uint64_t (****)(void))(*(void *)(v15 + 8) + 8))(*(void *)(*(void *)(v15 + 8) + 8));
        uint64_t v30 = v53;
        *(_DWORD *)(v53 + 8) = v29;
        uint64_t v31 = a2[1].i64[0];
        if (v31)
        {
          *(_DWORD *)(v30 + 12) = *(_DWORD *)(v31 + 12);
          if (*(char *)(v31 + 223) < 0) {
            std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)(v31 + 200), *(void *)(v31 + 208));
          }
          else {
            std::string v51 = *(std::string *)(v31 + 200);
          }
          std::string::operator=((std::string *)(v30 + 200), &v51);
          if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v51.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          uint64_t v32 = *(void *)(a2[4].i64[0] + 32);
          if (*(void *)(a2[4].i64[0] + 40) != v32) {
            *(_DWORD *)(v30 + 12) = *(_DWORD *)(*(void *)v32 + 12);
          }
        }
        if (v12 + 13 != (uint64_t *)&v54) {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v54, (std::string *)v12[13], (std::string *)v12[14], 0xAAAAAAAAAAAAAAABLL * ((v12[14] - v12[13]) >> 3));
        }
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v55 + 8, v40, v41, 0xAAAAAAAAAAAAAAABLL * (((char *)v41 - (char *)v40) >> 3));
        LODWORD(v52) = a2[3].i32[2];
        unint64_t v33 = a2[2].u64[1];
        if (v33 >= a2[3].i64[0])
        {
          uint64_t v34 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)&v52);
        }
        else
        {
          std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a2[2].i64[1], (uint64_t)&v52);
          uint64_t v34 = v33 + 72;
          a2[2].i64[1] = v33 + 72;
        }
        a2[2].i64[1] = v34;
        v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55 + 8;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
        v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
        if (*((void *)&v53 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v53 + 1));
        }
        std::string v52 = &v40;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v57.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v43.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v44.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
          break;
        }
        if (v14) {
          goto LABEL_60;
        }
LABEL_61:
        int v35 = (uint64_t **)(*(void *)(a1 + 40) + 184);
        v51.__r_.__value_.__r.__words[0] = (std::string::size_type)(v12 + 16);
        uint64_t v36 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v35, v12 + 16, (long long **)&v51);
        long long v37 = *(_OWORD *)(v12 + 5);
        long long v38 = *(_OWORD *)(v12 + 7);
        *((void *)v36 + 11) = v12[9];
        *(_OWORD *)(v36 + 72) = v38;
        *(_OWORD *)(v36 + 56) = v37;
        if (v12 + 5 != (uint64_t *)(v36 + 56)) {
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v36 + 96, (char *)v12[10], v12[11], (v12[11] - v12[10]) >> 2);
        }
        ++v13;
        v12 += 19;
        if (v12 == v39) {
          goto LABEL_67;
        }
      }
      operator delete(v46.__r_.__value_.__l.__data_);
      if (!v14) {
        goto LABEL_61;
      }
LABEL_60:
      nitro::nitro_function::nitro_function(v14);
      goto LABEL_61;
    }
LABEL_67:
    std::string v52 = (std::string **)&v49;
    std::vector<Espresso::ANECompilerEngine::decomposition_node>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
  }
}

void sub_19293E2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)(v48 - 200));
  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine7context26transform_embedding_lookupEPNS_3netEPS1__block_invoke(uint64_t a1, int64x2_t *a2)
{
  *(void *)&long long v260 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a2->i64[0];
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(void *)(a2->i64[0] + 8) != v3 && v3 != 0) {
    return;
  }
  uint64_t v8 = *(void *)(v2 + 224);
  uint64_t v7 = *(std::__shared_weak_count **)(v2 + 232);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "weights");
  (*(void (**)(uint64_t *__return_ptr, uint64_t, vImage_Buffer *))(*(void *)v8 + 120))(&v224, v8, &__p);
  if (SHIBYTE(__p.width) < 0) {
    operator delete(__p.data);
  }
  uint64_t v9 = v224;
  if (v224)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "W_U8");
    if ((*(uint64_t (**)(uint64_t, vImage_Buffer *))(*(void *)v9 + 24))(v9, &__p))
    {
      LODWORD(v9) = 1;
    }
    else
    {
      uint64_t v9 = v224;
      std::string::basic_string[abi:ne180100]<0>(&dest, "W_u8");
      LODWORD(v9) = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)v9 + 24))(v9, &dest);
      if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(dest.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(__p.width) < 0) {
      operator delete(__p.data);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "blob_weights_f16");
  if ((*(uint64_t (**)(uint64_t, vImage_Buffer *))(*(void *)v8 + 24))(v8, &__p))
  {
    int v10 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&dest, "blob_weights_f16_t");
    int v10 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)v8 + 24))(v8, &dest);
    if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(dest.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(__p.width) < 0) {
    operator delete(__p.data);
  }
  if (((v9 | v10) & 1) == 0)
  {
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v12 = *(void *)(v11 + 16);
    int v13 = *(std::__shared_weak_count **)(v11 + 24);
    uint64_t v222 = v12;
    v223 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v221 = (***(uint64_t (****)(void))(v12 + 8))(*(void *)(v12 + 8));
    int v220 = *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 32) + 16 * a2[3].i32[2]) + 12);
    Espresso::abstract_engine_factory::shared(&v218);
    uint64_t v14 = (*(uint64_t (**)(void))(*(void *)a2->i64[0] + 384))();
    int32x2_t v151 = *(int32x2_t *)v14;
    int v15 = *(_DWORD *)(v14 + 32);
    int v16 = *(unsigned __int8 *)(v14 + 40);
    uint64_t v17 = *(void *)(a1 + 40);
    unint64_t v18 = a2[3].i32[2];
    dest.__r_.__value_.__r.__words[0] = v18;
    __p.data = (void *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v17 + 56, v18, &dest)[3];
    size_t v19 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v17 + 184), __p.data, (long long **)&__p);
    long long v20 = *(_OWORD *)(v19 + 72);
    *(_OWORD *)v213 = *(_OWORD *)(v19 + 56);
    *(_OWORD *)&v213[16] = v20;
    uint64_t v21 = (const void *)*((void *)v19 + 12);
    uint64_t v214 = *((void *)v19 + 11);
    v215 = 0;
    v216 = 0;
    uint64_t v217 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v215, v21, *((void *)v19 + 13), (uint64_t)(*((void *)v19 + 13) - (void)v21) >> 2);
    Espresso::ANECompilerEngine::ane_arch_allow_network_override(*(void *)(a1 + 40) + 472);
    uint64_t v22 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
    uint64_t v24 = v22;
    if (v15 != 1 || (Espresso::ANECompilerEngine::is_mix(v22, v23) & 1) != 0) {
      goto LABEL_608;
    }
    long long v25 = (void *)a2->i64[0];
    uint64_t v26 = *(void *)(a2->i64[0] + 808);
    unsigned int v27 = *(std::__shared_weak_count **)(a2->i64[0] + 816);
    if (v27)
    {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      long long v25 = (void *)a2->i64[0];
    }
    uint64_t v150 = v26;
    uint64_t v28 = v25[99];
    int v29 = (std::__shared_weak_count *)v25[100];
    if (v29)
    {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      long long v25 = (void *)a2->i64[0];
    }
    uint64_t v30 = v25[103];
    uint64_t v31 = (std::__shared_weak_count *)v25[104];
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    float v148 = v31;
    unint64_t v149 = v27;
    if (v150 && v28 && v30)
    {
      int v147 = 1;
      if (v16) {
        goto LABEL_71;
      }
    }
    else
    {
      uint64_t v32 = v28;
      uint64_t v33 = v224;
      if (!v224) {
        goto LABEL_66;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "W_t_int8");
      if ((*(unsigned int (**)(uint64_t, vImage_Buffer *))(*(void *)v33 + 24))(v33, &__p))
      {
        uint64_t v34 = v224;
        std::string::basic_string[abi:ne180100]<0>(&dest, "Q");
        if ((*(unsigned int (**)(uint64_t, std::string *))(*(void *)v34 + 24))(v34, &dest))
        {
          uint64_t v35 = v224;
          std::string::basic_string[abi:ne180100]<0>(&v212, "Qscale_t");
          char v36 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)v35 + 24))(v35, &v212);
          if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v212.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          char v36 = 0;
        }
        if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(dest.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        char v36 = 0;
      }
      if (SHIBYTE(__p.width) < 0) {
        operator delete(__p.data);
      }
      if (v36)
      {
        int v147 = 1;
      }
      else
      {
LABEL_66:
        if (v150 || v32 || v30) {
          goto LABEL_620;
        }
        uint64_t v37 = v224;
        if (v224)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "W_t_int8");
          if ((*(uint64_t (**)(uint64_t, vImage_Buffer *))(*(void *)v37 + 24))(v37, &__p))
          {
            int v38 = 1;
          }
          else
          {
            uint64_t v39 = v224;
            std::string::basic_string[abi:ne180100]<0>(&dest, "Q");
            if ((*(uint64_t (**)(uint64_t, std::string *))(*(void *)v39 + 24))(v39, &dest))
            {
              int v38 = 1;
            }
            else
            {
              uint64_t v40 = v224;
              std::string::basic_string[abi:ne180100]<0>(&v212, "Qscale_t");
              int v38 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)v40 + 24))(v40, &v212);
              if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v212.__r_.__value_.__l.__data_);
              }
            }
            if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(dest.__r_.__value_.__l.__data_);
            }
          }
          if (SHIBYTE(__p.width) < 0) {
            operator delete(__p.data);
          }
          if (v38) {
LABEL_620:
          }
            Espresso::throw_exception_selector<Espresso::invalid_argument_error>("is_valid_for_engine should prohibit non-tailor made style quantized embeddings.");
        }
        int v147 = 0;
      }
      uint64_t v28 = v32;
      unsigned int v27 = v149;
      if (v16) {
        goto LABEL_71;
      }
    }
    if (*(_DWORD *)&v213[20] == -1 || *(int *)&v213[20] >= 4)
    {
      if ((*(int *)&v213[16] >= 2 && *(void *)&v213[8] == 0x100000001 && *(_DWORD *)&v213[4] == 1
         || *(int *)&v213[16] <= 1 && *(int *)&v213[12] >= 1 && *(void *)&v213[4] == 0x100000001)
        && *(_DWORD *)v213 == 1)
      {
        int v51 = 1;
LABEL_119:
        uint64_t v52 = *(void *)(a1 + 40) + 96;
        unint64_t v53 = a2[3].i32[2];
        __p.data = (void *)v53;
        std::vector<int> v143 = v24;
        v145 = v29;
        long long v54 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v52, v53, &__p)[3];
        if (*((char *)v54 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v212, *(const std::string::value_type **)v54, *((void *)v54 + 1));
        }
        else
        {
          long long v55 = *v54;
          v212.__r_.__value_.__r.__words[2] = *((void *)v54 + 2);
          *(_OWORD *)&v212.__r_.__value_.__l.__data_ = v55;
        }
        uint64_t v56 = *(void *)(a1 + 40) + 56;
        unint64_t v57 = a2[3].i32[2];
        __p.data = (void *)v57;
        long long v58 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v56, v57, &__p)[3];
        if (*((char *)v58 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v211, *(const std::string::value_type **)v58, *((void *)v58 + 1));
        }
        else
        {
          long long v59 = *v58;
          v211.__r_.__value_.__r.__words[2] = *((void *)v58 + 2);
          *(_OWORD *)&v211.__r_.__value_.__l.__data_ = v59;
        }
        uint64_t v60 = a2[1].i64[0];
        uint64_t v142 = v28;
        if (*(char *)(v60 + 39) < 0) {
          std::string::__init_copy_ctor_external(&v210, *(const std::string::value_type **)(v60 + 16), *(void *)(v60 + 24));
        }
        else {
          std::string v210 = *(std::string *)(v60 + 16);
        }
        uint64_t v140 = v30;
        if ((v210.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = HIBYTE(v210.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t size = v210.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v207, size + 18);
        if ((v209 & 0x80u) == 0) {
          long long v62 = &v207;
        }
        else {
          long long v62 = v207;
        }
        if (size)
        {
          if ((v210.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string v63 = &v210;
          }
          else {
            std::string v63 = (std::string *)v210.__r_.__value_.__r.__words[0];
          }
          memmove(v62, v63, size);
        }
        strcpy((char *)v62 + size, "__@embedded_lookup");
        (*(void (**)(uint64_t *__return_ptr))(*(void *)a2->i64[0] + 408))(&v205);
        if (v147)
        {
          vImagePixelCount height = 0;
          uint64_t v65 = 0;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "blob_weights");
          int v66 = (*(uint64_t (**)(uint64_t, vImage_Buffer *))(*(void *)v8 + 24))(v8, &__p);
          if (SHIBYTE(__p.width) < 0) {
            operator delete(__p.data);
          }
          if (v66)
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, "blob_weights");
            int v67 = (*(uint64_t (**)(uint64_t, vImage_Buffer *))(*(void *)v8 + 40))(v8, &__p);
            if (SHIBYTE(__p.width) < 0) {
              operator delete(__p.data);
            }
            uint64_t v68 = *(void *)(a1 + 40);
            uint64_t v69 = *(void *)(v68 + 576);
            __int16 v70 = *(std::__shared_weak_count **)(v68 + 584);
            if (v70) {
              atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v71 = (*(uint64_t (**)(uint64_t, void))(*(void *)v69 + 80))(v69, v67);
            vImagePixelCount height = (vImagePixelCount)operator new(0x58uLL);
            *(void *)(height + 8) = 0;
            *(void *)(height + 16) = 0;
            *(void *)vImagePixelCount height = &unk_1EE389958;
            uint64_t v65 = (const void **)(height + 24);
            *(void *)(height + 24) = &unk_1EE36BED0;
            *(_OWORD *)(height + 56) = 0u;
            *(_OWORD *)(height + 72) = 0u;
            *(int32x2_t *)(height + 32) = vrev64_s32(v151);
            *(void *)(height + 40) = v71;
            *(unsigned char *)(height + 48) = 0;
            if (v70) {
              nitro::nitro_function::nitro_function(v70);
            }
          }
          else
          {
            (*(void (**)(vImage_Buffer *__return_ptr))(*(void *)a2->i64[0] + 416))(&__p);
            data = __p.data;
            if (__p.height) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p.height);
            }
            if (!data) {
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot find the weights");
            }
            (*(void (**)(vImage_Buffer *__return_ptr))(*(void *)a2->i64[0] + 416))(&__p);
            uint64_t v65 = (const void **)__p.data;
            vImagePixelCount height = __p.height;
          }
        }
        Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::remove_layer(a2);
        if ((v209 & 0x80u) == 0) {
          size_t v73 = v209;
        }
        else {
          size_t v73 = v208;
        }
        long long v144 = (std::__shared_weak_count *)height;
        std::string::basic_string[abi:ne180100]((uint64_t)&__sz, v73 + 23);
        int v141 = v51;
        if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_sz = &__sz;
        }
        else {
          p_sz = (std::string *)__sz.__r_.__value_.__r.__words[0];
        }
        if (v73)
        {
          if ((v209 & 0x80u) == 0) {
            uint64_t v75 = &v207;
          }
          else {
            uint64_t v75 = v207;
          }
          memmove(p_sz, v75, v73);
        }
        strcpy((char *)p_sz + v73, "__branch_a_reshaped_top");
        LOWORD(v176) = 1;
        HIDWORD(v176) = 1;
        *(_OWORD *)&__p.data = xmmword_192DCA4C0;
        *(_OWORD *)&__p.width = xmmword_192DCA380;
        uint64_t v76 = v218;
        std::string::basic_string[abi:ne180100]<0>(&dest, "reshape");
        Espresso::abstract_engine_factory::make_kernel_priv(v76, (uint64_t)&v222, (uint64_t)&dest, (uint64_t)&__p, &v221);
        int v139 = v65;
        if (lpsrc.__r_.__value_.__r.__words[0])
        {
          if (v77)
          {
            __int16 v78 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
            if (lpsrc.__r_.__value_.__l.__size_) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(lpsrc.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
            }
LABEL_171:
            if (lpsrc.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_);
            }
            uint64_t v146 = v76;
            if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(dest.__r_.__value_.__l.__data_);
            }
            if ((v209 & 0x80u) == 0) {
              size_t v79 = v209;
            }
            else {
              size_t v79 = v208;
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&dest, v79 + 19);
            if ((dest.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_std::string dest = &dest;
            }
            else {
              p_std::string dest = (std::string *)dest.__r_.__value_.__r.__words[0];
            }
            if (v79)
            {
              if ((v209 & 0x80u) == 0) {
                int v81 = &v207;
              }
              else {
                int v81 = v207;
              }
              memmove(p_dest, v81, v79);
            }
            strcpy((char *)p_dest + v79, "__branch_a_reshaped");
            if ((v209 & 0x80u) == 0) {
              size_t v82 = v209;
            }
            else {
              size_t v82 = v208;
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v82 + 23);
            if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_std::string lpsrc = &lpsrc;
            }
            else {
              p_std::string lpsrc = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
            }
            if (v82)
            {
              if ((v209 & 0x80u) == 0) {
                __int16 v84 = &v207;
              }
              else {
                __int16 v84 = v207;
              }
              memmove(p_lpsrc, v84, v82);
            }
            strcpy((char *)p_lpsrc + v82, "__branch_a_reshaped_top");
            uint64_t v85 = v151.u32[1];
            if (v151.i32[1] >= 0x801u) {
              v77[529] = 1;
            }
            v202[0] = v77;
            v202[1] = v78;
            if (v78) {
              atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(&v201, "reshape");
            if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&__str, v211.__r_.__value_.__l.__data_, v211.__r_.__value_.__l.__size_);
            }
            else {
              std::string __str = v211;
            }
            memset(&v200, 0, sizeof(v200));
            v257.__r_.__value_.__r.__words[0] = (std::string::size_type)&v200;
            v257.__r_.__value_.__s.__data_[8] = 0;
            v200.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
            v200.__r_.__value_.__l.__size_ = v200.__r_.__value_.__r.__words[0];
            v200.__r_.__value_.__r.__words[2] = v200.__r_.__value_.__r.__words[0] + 24;
            v200.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v200.__r_.__value_.__r.__words[2], (long long *)&__str, &v260, (std::string *)v200.__r_.__value_.__l.__data_);
            if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v255, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
            }
            else {
              std::string v255 = __sz;
            }
            memset(&v257, 0, sizeof(v257));
            v253.__r_.__value_.__r.__words[0] = (std::string::size_type)&v257;
            v253.__r_.__value_.__s.__data_[8] = 0;
            v257.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
            v257.__r_.__value_.__l.__size_ = v257.__r_.__value_.__r.__words[0];
            v257.__r_.__value_.__r.__words[2] = v257.__r_.__value_.__r.__words[0] + 24;
            v257.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v257.__r_.__value_.__r.__words[2], (long long *)&v255, (long long *)&v256, (std::string *)v257.__r_.__value_.__l.__data_);
            Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::add_kernel(a2, v202, &v201, &dest, (std::string **)&v200, (std::string **)&v257);
            v253.__r_.__value_.__r.__words[0] = (std::string::size_type)&v257;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v253);
            if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v255.__r_.__value_.__l.__data_);
            }
            v257.__r_.__value_.__r.__words[0] = (std::string::size_type)&v200;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v257);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v201.__r_.__value_.__l.__data_);
            }
            if (v78) {
              nitro::nitro_function::nitro_function(v78);
            }
            if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(lpsrc.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(dest.__r_.__value_.__l.__data_);
            }
            if (v78) {
              nitro::nitro_function::nitro_function(v78);
            }
            if ((v209 & 0x80u) == 0) {
              size_t v86 = v209;
            }
            else {
              size_t v86 = v208;
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v86 + 20);
            if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              BOOL v87 = &lpsrc;
            }
            else {
              BOOL v87 = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
            }
            if (v86)
            {
              if ((v209 & 0x80u) == 0) {
                uint64_t v88 = &v207;
              }
              else {
                uint64_t v88 = v207;
              }
              memmove(v87, v88, v86);
            }
            strcpy((char *)v87 + v86, "__branch_b_range_top");
            v201.__r_.__value_.__r.__words[0] = 0x100000001;
            HIDWORD(v201.__r_.__value_.__r.__words[2]) = -1;
            LODWORD(v201.__r_.__value_.__r.__words[1]) = v151.i32[1];
            *(std::string::size_type *)((char *)&v201.__r_.__value_.__r.__words[1] + 4) = 0x100000001;
            std::string::basic_string[abi:ne180100]<0>(&__p, "load_constant");
            Espresso::abstract_engine_factory::make_kernel_priv(v76, (uint64_t)&v222, (uint64_t)&__p, (uint64_t)&v201, &v221);
            if (dest.__r_.__value_.__r.__words[0])
            {
              if (v89)
              {
                uint64_t v90 = (std::__shared_weak_count *)dest.__r_.__value_.__l.__size_;
                if (dest.__r_.__value_.__l.__size_) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(dest.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                }
LABEL_238:
                if (dest.__r_.__value_.__l.__size_) {
                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)dest.__r_.__value_.__l.__size_);
                }
                if (SHIBYTE(__p.width) < 0) {
                  operator delete(__p.data);
                }
                if ((v209 & 0x80u) == 0) {
                  size_t v91 = v209;
                }
                else {
                  size_t v91 = v208;
                }
                std::string::basic_string[abi:ne180100]((uint64_t)&v200, v91 + 16);
                if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v92 = &v200;
                }
                else {
                  uint64_t v92 = (std::string *)v200.__r_.__value_.__r.__words[0];
                }
                if (v91)
                {
                  if ((v209 & 0x80u) == 0) {
                    uint64_t v93 = &v207;
                  }
                  else {
                    uint64_t v93 = v207;
                  }
                  memmove(v92, v93, v91);
                }
                strcpy((char *)v92 + v91, "__branch_b_range");
                int v94 = (std::__shared_weak_count *)operator new(0x60uLL);
                v94->__shared_owners_ = 0;
                v94->__shared_weak_owners_ = 0;
                v94->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3899C8;
                v94[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36BF10;
                *(_OWORD *)&v94[2].__shared_weak_owners_ = 0u;
                *(_OWORD *)&v94[3].__shared_owners_ = 0u;
                LODWORD(v94[1].__shared_owners_) = 1;
                HIDWORD(v94[1].__shared_owners_) = v151.i32[1];
                v94[1].__shared_weak_owners_ = 0x100000001;
                uint64_t v95 = (std::__shared_weak_count_vtbl *)Espresso::kern_alloc_uninitialized((Espresso *)(4 * v151.i32[1]));
                bzero(v95, 4 * v151.i32[1]);
                v94[2].__vftable = v95;
                LOBYTE(v94[2].__shared_owners_) = 1;
                if (v151.i32[1] > 0x800u)
                {
                  LOWORD(v257.__r_.__value_.__l.__data_) = 0;
                  int64x2_t v152 = vdupq_n_s64(1uLL);
                  do
                  {
                    LODWORD(__str.__r_.__value_.__l.__data_) = 0;
                    *(int64x2_t *)&__p.vImagePixelCount height = v152;
                    __p.data = &v257;
                    __p.rowBytes = 2;
                    *(int64x2_t *)&dest.__r_.__value_.__r.__words[1] = v152;
                    dest.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
                    dest_24.__r_.__value_.__r.__words[0] = 4;
                    vImageConvert_Planar16FtoPlanarF(&__p, (const vImage_Buffer *)&dest, 0);
                    __int16 v97 = (__int16)v257.__r_.__value_.__l.__data_;
                    *((_DWORD *)&v94[2].~__shared_weak_count + LOWORD(v257.__r_.__value_.__l.__data_)) = __str.__r_.__value_.__l.__data_;
                    LOWORD(v257.__r_.__value_.__l.__data_) = v97 + 1;
                  }
                  while (v151.i32[1] > (unsigned __int16)(v97 + 1));
                }
                else if (v151.i32[1])
                {
                  unint64_t v96 = 0;
                  do
                  {
                    *((float *)&v95->~__shared_weak_count + v96) = (float)v96;
                    ++v96;
                  }
                  while (v151.u32[1] != v96);
                }
                v199[0] = v94 + 1;
                v199[1] = v94;
                atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
                unsigned int v27 = v149;
                Espresso::generic_load_constant_kernel::set_constant_blob(v89, (uint64_t)v199);
                nitro::nitro_function::nitro_function(v94);
                v198[0] = v89;
                v198[1] = v90;
                if (v90) {
                  atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                std::string::basic_string[abi:ne180100]<0>(&__p, "load_constant");
                memset(&dest, 0, sizeof(dest));
                if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&v257, lpsrc.__r_.__value_.__l.__data_, lpsrc.__r_.__value_.__l.__size_);
                }
                else {
                  std::string v257 = lpsrc;
                }
                memset(&__str, 0, sizeof(__str));
                v255.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
                v255.__r_.__value_.__s.__data_[8] = 0;
                __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
                __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
                __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[0] + 24;
                __str.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__str.__r_.__value_.__r.__words[2], (long long *)&v257, (long long *)&v258, (std::string *)__str.__r_.__value_.__l.__data_);
                Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::add_kernel(a2, v198, (const std::string *)&__p, &v200, (std::string **)&dest, (std::string **)&__str);
                v255.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v255);
                if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v257.__r_.__value_.__l.__data_);
                }
                __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&dest;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
                if (SHIBYTE(__p.width) < 0) {
                  operator delete(__p.data);
                }
                if (v90) {
                  nitro::nitro_function::nitro_function(v90);
                }
                nitro::nitro_function::nitro_function(v94);
                if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v200.__r_.__value_.__l.__data_);
                }
                if (v90) {
                  nitro::nitro_function::nitro_function(v90);
                }
                if ((v209 & 0x80u) == 0) {
                  size_t v98 = v209;
                }
                else {
                  size_t v98 = v208;
                }
                std::string::basic_string[abi:ne180100]((uint64_t)&v201, v98 + 20);
                if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  signed int v99 = &v201;
                }
                else {
                  signed int v99 = (std::string *)v201.__r_.__value_.__r.__words[0];
                }
                if (v98)
                {
                  if ((v209 & 0x80u) == 0) {
                    std::vector<int>::pointer v100 = &v207;
                  }
                  else {
                    std::vector<int>::pointer v100 = v207;
                  }
                  memmove(v99, v100, v98);
                }
                strcpy((char *)v99 + v98, "__elementwise_eq_top");
                __p.width = 897988541;
                LOBYTE(__p.rowBytes) = 0;
                LODWORD(v178) = 0;
                v177.i32[1] = 0;
                __p.data = (void *)100;
                __p.vImagePixelCount height = 1065353216;
                std::string::basic_string[abi:ne180100]<0>(&dest, "elementwise");
                Espresso::abstract_engine_factory::make_kernel_priv(v76, (uint64_t)&v222, (uint64_t)&dest, (uint64_t)&__p, &v221);
                if (v200.__r_.__value_.__r.__words[0])
                {
                  if (v101)
                  {
                    int v102 = (std::__shared_weak_count *)v200.__r_.__value_.__l.__size_;
                    if (v200.__r_.__value_.__l.__size_) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(v200.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                    }
                    goto LABEL_292;
                  }
                }
                else
                {
                  uint64_t v101 = 0;
                }
                int v102 = 0;
LABEL_292:
                if (v200.__r_.__value_.__l.__size_) {
                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v200.__r_.__value_.__l.__size_);
                }
                if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(dest.__r_.__value_.__l.__data_);
                }
                if ((v209 & 0x80u) == 0) {
                  size_t v103 = v209;
                }
                else {
                  size_t v103 = v208;
                }
                std::string::basic_string[abi:ne180100]((uint64_t)&v200, v103 + 16);
                if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v104 = &v200;
                }
                else {
                  uint64_t v104 = (std::string *)v200.__r_.__value_.__r.__words[0];
                }
                if (v103)
                {
                  if ((v209 & 0x80u) == 0) {
                    char v105 = &v207;
                  }
                  else {
                    char v105 = v207;
                  }
                  memmove(v104, v105, v103);
                }
                strcpy((char *)v104 + v103, "__elementwise_eq");
                v197[0] = v101;
                v197[1] = v102;
                if (v102) {
                  atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                int v29 = v145;
                std::string::basic_string[abi:ne180100]<0>(&__str, "elementwise");
                if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&dest, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
                }
                else {
                  std::string dest = __sz;
                }
                if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&dest_24, lpsrc.__r_.__value_.__l.__data_, lpsrc.__r_.__value_.__l.__size_);
                }
                else {
                  std::string dest_24 = lpsrc;
                }
                memset(&v257, 0, sizeof(v257));
                v255.__r_.__value_.__r.__words[0] = (std::string::size_type)&v257;
                v255.__r_.__value_.__s.__data_[8] = 0;
                v257.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
                v257.__r_.__value_.__l.__size_ = v257.__r_.__value_.__r.__words[0];
                v257.__r_.__value_.__r.__words[2] = v257.__r_.__value_.__r.__words[0] + 48;
                v257.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v257.__r_.__value_.__r.__words[2], (long long *)&dest, &v231, (std::string *)v257.__r_.__value_.__l.__data_);
                if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&v253, v201.__r_.__value_.__l.__data_, v201.__r_.__value_.__l.__size_);
                }
                else {
                  std::string v253 = v201;
                }
                memset(&v255, 0, sizeof(v255));
                v252.__r_.__value_.__r.__words[0] = (std::string::size_type)&v255;
                v252.__r_.__value_.__s.__data_[8] = 0;
                v255.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
                v255.__r_.__value_.__l.__size_ = v255.__r_.__value_.__r.__words[0];
                v255.__r_.__value_.__r.__words[2] = v255.__r_.__value_.__r.__words[0] + 24;
                v255.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v255.__r_.__value_.__r.__words[2], (long long *)&v253, (long long *)&v254, (std::string *)v255.__r_.__value_.__l.__data_);
                Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::add_kernel(a2, v197, &__str, &v200, (std::string **)&v257, (std::string **)&v255);
                v252.__r_.__value_.__r.__words[0] = (std::string::size_type)&v255;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v252);
                if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v253.__r_.__value_.__l.__data_);
                }
                v255.__r_.__value_.__r.__words[0] = (std::string::size_type)&v257;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v255);
                for (uint64_t i = 0; i != -6; i -= 3)
                {
                  if (SHIBYTE(dest_24.__r_.__value_.__r.__words[i + 2]) < 0) {
                    operator delete(*(void **)((char *)&dest + i * 8 + 24));
                  }
                }
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                if (v102) {
                  nitro::nitro_function::nitro_function(v102);
                }
                if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v200.__r_.__value_.__l.__data_);
                }
                if (v102) {
                  nitro::nitro_function::nitro_function(v102);
                }
                memset(&v200, 0, sizeof(v200));
                if (v147)
                {
                  if (v142) {
                    float v107 = *(float *)(*(void *)(v142 + 16) + 4);
                  }
                  else {
                    float v107 = 128.0;
                  }
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__scale_onehot_float_to_int_top", (const void **)&v207, &__str);
                  *(vImagePixelCount *)((char *)&__p.height + 4) = 0x358637BD00000000;
                  HIDWORD(__p.width) = 0;
                  LOBYTE(__p.rowBytes) = 0;
                  LODWORD(v178) = 0;
                  v177.i32[1] = 0;
                  __p.data = (void *)1;
                  LODWORD(__p.height) = roundf(1.0 / (float)(v107 * 0.0078125));
                  std::string::basic_string[abi:ne180100]<0>(&dest, "elementwise");
                  Espresso::abstract_engine_factory::make_kernel_priv(v146, (uint64_t)&v222, (uint64_t)&dest, (uint64_t)&__p, &v221);
                  std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_elementwise_kernel,Espresso::base_kernel>(&v250, v257.__r_.__value_.__l.__data_, v257.__r_.__value_.__l.__size_);
                  if (v257.__r_.__value_.__l.__size_) {
                    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v257.__r_.__value_.__l.__size_);
                  }
                  if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(dest.__r_.__value_.__l.__data_);
                  }
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__scale_floattoint_onehot", (const void **)&v207, &dest);
                  char v117 = (std::__shared_weak_count *)v250.__r_.__value_.__l.__size_;
                  long long v196 = *(_OWORD *)&v250.__r_.__value_.__l.__data_;
                  if (v250.__r_.__value_.__l.__size_) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v250.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                  }
                  std::string::basic_string[abi:ne180100]<0>(&v257, "elementwise");
                  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v253, v201.__r_.__value_.__l.__data_, v201.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v253 = v201;
                  }
                  std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v255, (long long *)&v253, 1uLL);
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v251, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v251 = __str;
                  }
                  std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v252, (long long *)&v251, 1uLL);
                  Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::add_kernel(a2, &v196, &v257, &dest, (std::string **)&v255, (std::string **)&v252);
                  v249.__r_.__value_.__r.__words[0] = (std::string::size_type)&v252;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v249);
                  if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v251.__r_.__value_.__l.__data_);
                  }
                  v252.__r_.__value_.__r.__words[0] = (std::string::size_type)&v255;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v252);
                  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v253.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v257.__r_.__value_.__l.__data_);
                  }
                  if (v117) {
                    nitro::nitro_function::nitro_function(v117);
                  }
                  if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(dest.__r_.__value_.__l.__data_);
                  }
                  if (v117) {
                    nitro::nitro_function::nitro_function(v117);
                  }
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__conv_embed_top", (const void **)&v207, &v257);
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__conv_scale_top", (const void **)&v207, &v255);
                  __asm { FMOV            V11.2S, #1.0 }
                  uint64_t v179 = _D11;
                  uint64_t v182 = 0;
                  uint64_t v181 = 0;
                  __int16 v183 = 0;
                  int v185 = 0;
                  int v187 = 1;
                  int v194 = 0;
                  char v195 = 0;
                  uint64_t v191 = 0;
                  uint64_t v190 = 0;
                  memset(&__p, 0, sizeof(__p));
                  uint64_t v176 = 1;
                  long long v186 = xmmword_192DCA230;
                  uint64_t v188 = 0;
                  int v189 = 0x10000;
                  int v192 = 0;
                  __int16 v193 = 1;
                  int32x2_t v177 = v151;
                  long long v178 = xmmword_192DCA4A0;
                  uint64_t v184 = 0x1000100010001;
                  __int16 v180 = 2;
                  std::string::basic_string[abi:ne180100]<0>(&dest, "convolution");
                  Espresso::abstract_engine_factory::make_kernel_priv(v146, (uint64_t)&v222, (uint64_t)&dest, (uint64_t)&__p, &v221);
                  std::dynamic_pointer_cast[abi:ne180100]<Espresso::ANECompilerEngine::convolution_kernel,Espresso::base_kernel>(&v173, v253.__r_.__value_.__l.__data_, v253.__r_.__value_.__l.__size_);
                  if (v253.__r_.__value_.__l.__size_) {
                    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v253.__r_.__value_.__l.__size_);
                  }
                  if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(dest.__r_.__value_.__l.__data_);
                  }
                  Espresso::blob<unsigned char,4>::make(&v171, v177.i32[1], v177.i32[0]);
                  if (v150) {
                    memcpy(*(void **)(v171 + 24), *(const void **)(v150 + 16), (v151.i32[0] * v151.i32[1]));
                  }
                  uint64_t v169 = 0;
                  int v170 = 0;
                  char v119 = v173;
                  std::string::basic_string[abi:ne180100]<0>(&dest, "W_int8");
                  (*(void (**)(std::string *, uint64_t *, std::string *, void, void, void))(v119->__r_.__value_.__r.__words[0] + 160))(v119, &v169, &dest, *(void *)(v171 + 24), (v151.i32[0] * v151.i32[1]), 0);
                  if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(dest.__r_.__value_.__l.__data_);
                  }
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__conv", (const void **)&v207, &v253);
                  std::string v120 = v174;
                  v168[0] = v119;
                  v168[1] = v174;
                  if (v174) {
                    atomic_fetch_add_explicit(&v174->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  std::string::basic_string[abi:ne180100]<0>(&dest, "convolution");
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v251, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v251 = __str;
                  }
                  std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v252, (long long *)&v251, 1uLL);
                  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v249, v257.__r_.__value_.__l.__data_, v257.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v249 = v257;
                  }
                  std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v250, (long long *)&v249, 1uLL);
                  Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::add_kernel(a2, v168, &dest, &v253, (std::string **)&v252, (std::string **)&v250);
                  v228.__r_.__value_.__r.__words[0] = (std::string::size_type)&v250;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v228);
                  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v249.__r_.__value_.__l.__data_);
                  }
                  v250.__r_.__value_.__r.__words[0] = (std::string::size_type)&v252;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v250);
                  if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v251.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(dest.__r_.__value_.__l.__data_);
                  }
                  if (v120) {
                    nitro::nitro_function::nitro_function(v120);
                  }
                  uint64_t v232 = _D11;
                  uint64_t v235 = 0;
                  uint64_t v234 = 0;
                  __int16 v236 = 0;
                  int v238 = 0;
                  int v240 = 1;
                  int v247 = 0;
                  char v248 = 0;
                  uint64_t v244 = 0;
                  uint64_t v243 = 0;
                  memset(&dest, 0, sizeof(dest));
                  dest_24.__r_.__value_.__l.__size_ = 1;
                  long long v239 = xmmword_192DCA230;
                  uint64_t v241 = 0;
                  int v242 = 0x10000;
                  dest_24.__r_.__value_.__r.__words[0] = 0;
                  int v245 = 0;
                  __int16 v246 = 1;
                  HIDWORD(dest_24.__r_.__value_.__r.__words[2]) = v151.i32[1];
                  LODWORD(dest_24.__r_.__value_.__r.__words[2]) = 1;
                  long long v231 = xmmword_192DCA4A0;
                  uint64_t v237 = 0x1000100010001;
                  __int16 v233 = 2;
                  uint64_t v121 = v218;
                  std::string::basic_string[abi:ne180100]<0>(&v252, "convolution");
                  Espresso::abstract_engine_factory::make_kernel_priv(v121, (uint64_t)&v222, (uint64_t)&v252, (uint64_t)&dest, &v221);
                  std::dynamic_pointer_cast[abi:ne180100]<Espresso::ANECompilerEngine::convolution_kernel,Espresso::base_kernel>(&v166, v251.__r_.__value_.__l.__data_, v251.__r_.__value_.__l.__size_);
                  if (v251.__r_.__value_.__l.__size_) {
                    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v251.__r_.__value_.__l.__size_);
                  }
                  if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v252.__r_.__value_.__l.__data_);
                  }
                  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v164, SHIDWORD(dest_24.__r_.__value_.__r.__words[2]), dest_24.__r_.__value_.__r.__words[2], 1, 1);
                  if (v140)
                  {
                    uint64_t v122 = v164;
                    if (v151.i32[1])
                    {
                      uint64_t v123 = *(float **)(v140 + 16);
                      std::string v124 = *(float **)(v164 + 24);
                      do
                      {
                        float v125 = *v123++;
                        *v124++ = (float)((float)(v107 * 0.0078125) * (float)(v107 * 0.0078125)) * v125;
                        --v85;
                      }
                      while (v85);
                    }
                  }
                  else
                  {
                    uint64_t v122 = v164;
                  }
                  uint64_t v127 = v165;
                  uint64_t v126 = v166;
                  uint64_t v162 = v122;
                  uint64_t v163 = v165;
                  if (v165) {
                    atomic_fetch_add_explicit(&v165->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  (*(void (**)(uint64_t, uint64_t *))(*(void *)v126 + 400))(v126, &v162);
                  if (v163) {
                    nitro::nitro_function::nitro_function(v163);
                  }
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__conv_scales", (const void **)&v207, &v252);
                  uint64_t v128 = v167;
                  v161[0] = v126;
                  v161[1] = v167;
                  if (v167) {
                    atomic_fetch_add_explicit(&v167->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  std::string::basic_string[abi:ne180100]<0>(&v251, "convolution");
                  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v249, v201.__r_.__value_.__l.__data_, v201.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v249 = v201;
                  }
                  std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v250, (long long *)&v249, 1uLL);
                  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v227, v255.__r_.__value_.__l.__data_, v255.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v227 = v255;
                  }
                  std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v228, (long long *)&v227, 1uLL);
                  Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::add_kernel(a2, v161, &v251, &v252, (std::string **)&v250, (std::string **)&v228);
                  v226 = &v228;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v226);
                  if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v227.__r_.__value_.__l.__data_);
                  }
                  v228.__r_.__value_.__r.__words[0] = (std::string::size_type)&v250;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v228);
                  if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v249.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v251.__r_.__value_.__l.__data_);
                  }
                  if (v128) {
                    nitro::nitro_function::nitro_function(v128);
                  }
                  if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v252.__r_.__value_.__l.__data_);
                  }
                  if (v127) {
                    nitro::nitro_function::nitro_function(v127);
                  }
                  if (v128) {
                    nitro::nitro_function::nitro_function(v128);
                  }
                  int v29 = v145;
                  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v253.__r_.__value_.__l.__data_);
                  }
                  if (v170) {
                    nitro::nitro_function::nitro_function(v170);
                  }
                  if (v172) {
                    nitro::nitro_function::nitro_function(v172);
                  }
                  if (v120) {
                    nitro::nitro_function::nitro_function(v120);
                  }
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__mul_apply_scales_top", (const void **)&v207, &v253);
                  __p.width = 897988541;
                  LOBYTE(__p.rowBytes) = 0;
                  LODWORD(v178) = 0;
                  v177.i32[1] = 0;
                  __p.data = (void *)1;
                  __p.vImagePixelCount height = 1065353216;
                  std::string::basic_string[abi:ne180100]<0>(&dest, "elementwise");
                  Espresso::abstract_engine_factory::make_kernel_priv(v121, (uint64_t)&v222, (uint64_t)&dest, (uint64_t)&__p, &v221);
                  std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_elementwise_kernel,Espresso::base_kernel>(&v227, v252.__r_.__value_.__l.__data_, v252.__r_.__value_.__l.__size_);
                  if (v252.__r_.__value_.__l.__size_) {
                    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v252.__r_.__value_.__l.__size_);
                  }
                  if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(dest.__r_.__value_.__l.__data_);
                  }
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__apply_scales_to_embedding", (const void **)&v207, &v252);
                  float v129 = (std::__shared_weak_count *)v227.__r_.__value_.__l.__size_;
                  long long v160 = *(_OWORD *)&v227.__r_.__value_.__l.__data_;
                  if (v227.__r_.__value_.__l.__size_) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v227.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                  }
                  std::string::basic_string[abi:ne180100]<0>(&v251, "elementwise");
                  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&dest, v257.__r_.__value_.__l.__data_, v257.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string dest = v257;
                  }
                  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&dest_24, v255.__r_.__value_.__l.__data_, v255.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string dest_24 = v255;
                  }
                  std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v250, (long long *)&dest, 2uLL);
                  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v228, v253.__r_.__value_.__l.__data_, v253.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v228 = v253;
                  }
                  std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v249, (long long *)&v228, 1uLL);
                  Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::add_kernel(a2, &v160, &v251, &v252, (std::string **)&v250, (std::string **)&v249);
                  BOOL v173 = &v249;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v173);
                  if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v228.__r_.__value_.__l.__data_);
                  }
                  v249.__r_.__value_.__r.__words[0] = (std::string::size_type)&v250;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v249);
                  for (uint64_t j = 0; j != -6; j -= 3)
                  {
                    if (SHIBYTE(dest_24.__r_.__value_.__r.__words[j + 2]) < 0) {
                      operator delete(*(void **)((char *)&dest + j * 8 + 24));
                    }
                  }
                  if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v251.__r_.__value_.__l.__data_);
                  }
                  int v115 = v141;
                  if (v129) {
                    nitro::nitro_function::nitro_function(v129);
                  }
                  if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v252.__r_.__value_.__l.__data_);
                  }
                  if (v129) {
                    nitro::nitro_function::nitro_function(v129);
                  }
                  std::string::operator=(&v200, &v253);
                  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v253.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v255.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v257.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__str.__r_.__value_.__l.__data_);
                  }
                }
                else
                {
                  __asm { FMOV            V0.2S, #1.0 }
                  uint64_t v179 = _D0;
                  uint64_t v182 = 0;
                  uint64_t v181 = 0;
                  __int16 v183 = 0;
                  int v185 = 0;
                  int v187 = 1;
                  int v194 = 0;
                  char v195 = 0;
                  uint64_t v191 = 0;
                  uint64_t v190 = 0;
                  memset(&__p, 0, sizeof(__p));
                  uint64_t v176 = 1;
                  long long v186 = xmmword_192DCA230;
                  uint64_t v188 = 0;
                  int v189 = 0x10000;
                  int v192 = 0;
                  __int16 v193 = 1;
                  int32x2_t v177 = v151;
                  long long v178 = xmmword_192DCA4A0;
                  uint64_t v184 = 0x1000100010001;
                  __int16 v180 = 2;
                  std::string::basic_string[abi:ne180100]<0>(&dest, "convolution");
                  Espresso::abstract_engine_factory::make_kernel_priv(v146, (uint64_t)&v222, (uint64_t)&dest, (uint64_t)&__p, &v221);
                  std::dynamic_pointer_cast[abi:ne180100]<Espresso::ANECompilerEngine::convolution_kernel,Espresso::base_kernel>(&v250, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                  if (__str.__r_.__value_.__l.__size_) {
                    nitro::nitro_function::nitro_function((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
                  }
                  if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(dest.__r_.__value_.__l.__data_);
                  }
                  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v249, v177.i32[1], v177.i32[0], 1, 1);
                  std::string::size_type v112 = v249.__r_.__value_.__r.__words[0];
                  memcpy(*(void **)(v249.__r_.__value_.__r.__words[0] + 24), v139[2], 4 * (v151.i32[0] * v151.i32[1]));
                  std::string::size_type v113 = v250.__r_.__value_.__r.__words[0];
                  char v114 = (std::__shared_weak_count *)v249.__r_.__value_.__l.__size_;
                  unsigned long long v159 = __PAIR128__(v249.__r_.__value_.__l.__size_, v112);
                  if (v249.__r_.__value_.__l.__size_) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v249.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                  }
                  (*(void (**)(std::string::size_type, unsigned long long *))(*(void *)v113 + 400))(v113, &v159);
                  int v115 = v141;
                  if (*((void *)&v159 + 1)) {
                    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v159 + 1));
                  }
                  uint64_t v157 = v205;
                  int v158 = v206;
                  if (v206) {
                    atomic_fetch_add_explicit(&v206->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  (*(void (**)(std::string::size_type, uint64_t *))(*(void *)v113 + 392))(v113, &v157);
                  if (v158) {
                    nitro::nitro_function::nitro_function(v158);
                  }
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__conv", (const void **)&v207, &dest);
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__conv_top", (const void **)&v207, &__str);
                  char v116 = (std::__shared_weak_count *)v250.__r_.__value_.__l.__size_;
                  v156[0] = v113;
                  v156[1] = v250.__r_.__value_.__l.__size_;
                  if (v250.__r_.__value_.__l.__size_) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v250.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                  }
                  std::string::basic_string[abi:ne180100]<0>(&v257, "convolution");
                  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v253, v201.__r_.__value_.__l.__data_, v201.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v253 = v201;
                  }
                  std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v255, (long long *)&v253, 1uLL);
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v251, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v251 = __str;
                  }
                  std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v252, (long long *)&v251, 1uLL);
                  Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::add_kernel(a2, v156, &v257, &dest, (std::string **)&v255, (std::string **)&v252);
                  v228.__r_.__value_.__r.__words[0] = (std::string::size_type)&v252;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v228);
                  if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v251.__r_.__value_.__l.__data_);
                  }
                  v252.__r_.__value_.__r.__words[0] = (std::string::size_type)&v255;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v252);
                  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v253.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v257.__r_.__value_.__l.__data_);
                  }
                  if (v116) {
                    nitro::nitro_function::nitro_function(v116);
                  }
                  std::string::operator=(&v200, &__str);
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__str.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(dest.__r_.__value_.__l.__data_);
                  }
                  if (v114) {
                    nitro::nitro_function::nitro_function(v114);
                  }
                  if (v116) {
                    nitro::nitro_function::nitro_function(v116);
                  }
                }
                if (v115)
                {
                  LOWORD(v176) = 1;
                  HIDWORD(v176) = 1;
                  __p.data = (void *)0x100000001;
                  __p.vImagePixelCount height = __PAIR64__(*(unsigned int *)&v213[12], v151.u32[0]);
                  LODWORD(__p.width) = *(_DWORD *)&v213[16];
                  int v131 = *(_DWORD *)&v213[20];
                  if (*(_DWORD *)&v213[16] == 1) {
                    int v132 = 4;
                  }
                  else {
                    int v132 = 5;
                  }
                  if (*(_DWORD *)&v213[20] == -1) {
                    int v131 = v132;
                  }
                  HIDWORD(__p.width) = v131;
                  __p.rowBytes = 1;
                  uint64_t v133 = v218;
                  std::string::basic_string[abi:ne180100]<0>(&dest, "reshape");
                  Espresso::abstract_engine_factory::make_kernel_priv(v133, (uint64_t)&v222, (uint64_t)&dest, (uint64_t)&__p, &v221);
                  std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_reshape_kernel,Espresso::base_kernel>(&v251, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                  if (__str.__r_.__value_.__l.__size_) {
                    nitro::nitro_function::nitro_function((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
                  }
                  if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(dest.__r_.__value_.__l.__data_);
                  }
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__conv_reshaped", (const void **)&v207, &dest);
                  uint64_t v134 = (std::__shared_weak_count *)v251.__r_.__value_.__l.__size_;
                  long long v155 = *(_OWORD *)&v251.__r_.__value_.__l.__data_;
                  if (v251.__r_.__value_.__l.__size_) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v251.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                  }
                  std::string::basic_string[abi:ne180100]<0>(&__str, "reshape");
                  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v255, v200.__r_.__value_.__l.__data_, v200.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v255 = v200;
                  }
                  std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v257, (long long *)&v255, 1uLL);
                  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v252, v212.__r_.__value_.__l.__data_, v212.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v252 = v212;
                  }
                  std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v253, (long long *)&v252, 1uLL);
                  Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::add_kernel(a2, &v155, &__str, &dest, (std::string **)&v257, (std::string **)&v253);
                  v250.__r_.__value_.__r.__words[0] = (std::string::size_type)&v253;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v250);
                  if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v252.__r_.__value_.__l.__data_);
                  }
                  v253.__r_.__value_.__r.__words[0] = (std::string::size_type)&v257;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v253);
                  uint64_t v24 = v143;
                  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v255.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__str.__r_.__value_.__l.__data_);
                  }
                  if (v134) {
                    nitro::nitro_function::nitro_function(v134);
                  }
                }
                else
                {
                  *(_OWORD *)&v249.__r_.__value_.__l.__data_ = xmmword_192DCA530;
                  LODWORD(v249.__r_.__value_.__r.__words[2]) = 4;
                  uint64_t v135 = v218;
                  std::string::basic_string[abi:ne180100]<0>(&__p, "transpose");
                  Espresso::abstract_engine_factory::make_kernel_priv(v135, (uint64_t)&v222, (uint64_t)&__p, (uint64_t)&v249, &v221);
                  std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_transpose_kernel,Espresso::base_kernel>(&v228, dest.__r_.__value_.__l.__data_, dest.__r_.__value_.__l.__size_);
                  if (dest.__r_.__value_.__l.__size_) {
                    nitro::nitro_function::nitro_function((std::__shared_weak_count *)dest.__r_.__value_.__l.__size_);
                  }
                  if (SHIBYTE(__p.width) < 0) {
                    operator delete(__p.data);
                  }
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__conv_t", (const void **)&v207, &dest);
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__conv_t", (const void **)&v207, &__str);
                  uint64_t v134 = (std::__shared_weak_count *)v228.__r_.__value_.__l.__size_;
                  long long v154 = *(_OWORD *)&v228.__r_.__value_.__l.__data_;
                  if (v228.__r_.__value_.__l.__size_) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v228.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                  }
                  std::string::basic_string[abi:ne180100]<0>(&__p, "transpose");
                  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v255, v200.__r_.__value_.__l.__data_, v200.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v255 = v200;
                  }
                  std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v257, (long long *)&v255, 1uLL);
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v252, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v252 = __str;
                  }
                  std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v253, (long long *)&v252, 1uLL);
                  Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::add_kernel(a2, &v154, (const std::string *)&__p, &dest, (std::string **)&v257, (std::string **)&v253);
                  v251.__r_.__value_.__r.__words[0] = (std::string::size_type)&v253;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v251);
                  if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v252.__r_.__value_.__l.__data_);
                  }
                  v253.__r_.__value_.__r.__words[0] = (std::string::size_type)&v257;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v253);
                  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v255.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(__p.width) < 0) {
                    operator delete(__p.data);
                  }
                  if (v134) {
                    nitro::nitro_function::nitro_function(v134);
                  }
                  LOWORD(v176) = 1;
                  HIDWORD(v176) = 1;
                  LODWORD(__p.data) = v151.i32[0];
                  *(_OWORD *)((char *)&__p.data + 4) = *(_OWORD *)&v213[4];
                  int v136 = *(_DWORD *)&v213[20];
                  if (*(_DWORD *)&v213[16] == 1) {
                    int v137 = 4;
                  }
                  else {
                    int v137 = 5;
                  }
                  if (*(_DWORD *)&v213[20] == -1) {
                    int v136 = v137;
                  }
                  __p.rowBytes = 0;
                  HIDWORD(__p.width) = v136;
                  std::string::basic_string[abi:ne180100]<0>(&v257, "reshape");
                  Espresso::abstract_engine_factory::make_kernel_priv(v135, (uint64_t)&v222, (uint64_t)&v257, (uint64_t)&__p, &v221);
                  std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_reshape_kernel,Espresso::base_kernel>(&v227, v255.__r_.__value_.__l.__data_, v255.__r_.__value_.__l.__size_);
                  if (v255.__r_.__value_.__l.__size_) {
                    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v255.__r_.__value_.__l.__size_);
                  }
                  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v257.__r_.__value_.__l.__data_);
                  }
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__conv_t_reshaped", (const void **)&v207, &v257);
                  vDSP_Length v138 = (std::__shared_weak_count *)v227.__r_.__value_.__l.__size_;
                  long long v153 = *(_OWORD *)&v227.__r_.__value_.__l.__data_;
                  if (v227.__r_.__value_.__l.__size_) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v227.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                  }
                  std::string::basic_string[abi:ne180100]<0>(&v255, "reshape");
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v252, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v252 = __str;
                  }
                  std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v253, (long long *)&v252, 1uLL);
                  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v250, v212.__r_.__value_.__l.__data_, v212.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v250 = v212;
                  }
                  std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v251, (long long *)&v250, 1uLL);
                  Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::add_kernel(a2, &v153, &v255, &v257, (std::string **)&v253, (std::string **)&v251);
                  BOOL v173 = &v251;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v173);
                  if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v250.__r_.__value_.__l.__data_);
                  }
                  v251.__r_.__value_.__r.__words[0] = (std::string::size_type)&v253;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v251);
                  uint64_t v24 = v143;
                  if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v252.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v255.__r_.__value_.__l.__data_);
                  }
                  if (v138) {
                    nitro::nitro_function::nitro_function(v138);
                  }
                  if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v257.__r_.__value_.__l.__data_);
                  }
                  if (v138) {
                    nitro::nitro_function::nitro_function(v138);
                  }
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__str.__r_.__value_.__l.__data_);
                  }
                }
                if (SHIBYTE(dest.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(dest.__r_.__value_.__l.__data_);
                }
                if (v134) {
                  nitro::nitro_function::nitro_function(v134);
                }
                if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v200.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v201.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(lpsrc.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__sz.__r_.__value_.__l.__data_);
                }
                if (v206) {
                  nitro::nitro_function::nitro_function(v206);
                }
                if (v144) {
                  nitro::nitro_function::nitro_function(v144);
                }
                if ((char)v209 < 0) {
                  operator delete(v207);
                }
                if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v210.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v211.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v212.__r_.__value_.__l.__data_);
                }
                goto LABEL_602;
              }
            }
            else
            {
              int v89 = 0;
            }
            uint64_t v90 = 0;
            goto LABEL_238;
          }
        }
        else
        {
          __int16 v77 = 0;
        }
        __int16 v78 = 0;
        goto LABEL_171;
      }
LABEL_602:
      if (v148) {
        nitro::nitro_function::nitro_function(v148);
      }
      if (v29) {
        nitro::nitro_function::nitro_function(v29);
      }
      if (v27) {
        nitro::nitro_function::nitro_function(v27);
      }
LABEL_608:

      if (v215)
      {
        v216 = v215;
        operator delete(v215);
      }
      if (v219) {
        nitro::nitro_function::nitro_function(v219);
      }
      if (v223) {
        nitro::nitro_function::nitro_function(v223);
      }
      goto LABEL_614;
    }
LABEL_71:
    BOOL v43 = *(int *)&v213[16] > 1 && *(_DWORD *)&v213[12] == 1 && *(_DWORD *)&v213[8] == 1 && *(_DWORD *)&v213[4] == 1;
    int v44 = v43;
    if (v43)
    {
      BOOL v45 = 0;
      BOOL v46 = *(_DWORD *)v213 == 1;
    }
    else
    {
      if (*(int *)&v213[16] > 1 || *(int *)&v213[12] < 2 || *(void *)&v213[4] != 0x100000001)
      {
        BOOL v45 = 0;
        int v47 = *(int *)&v213[16] < 2 && *(_DWORD *)&v213[12] < 2;
        if (v47 == 1 && *(int *)&v213[8] >= 2)
        {
          BOOL v46 = 0;
          if (*(_DWORD *)&v213[4] == 1)
          {
            BOOL v46 = 0;
            BOOL v45 = 0;
            BOOL v49 = 0;
            BOOL v48 = *(_DWORD *)v213 == 1;
            goto LABEL_106;
          }
        }
        else
        {
          BOOL v46 = 0;
        }
LABEL_91:
        BOOL v48 = 0;
        if (v47 && *(int *)&v213[8] <= 1 && *(int *)&v213[4] >= 1)
        {
          BOOL v48 = 0;
          BOOL v49 = *(_DWORD *)v213 == 1;
        }
        else
        {
          BOOL v49 = 0;
        }
LABEL_106:
        int v51 = 0;
        if (v46 || v45 || v48 || v49) {
          goto LABEL_119;
        }
        goto LABEL_602;
      }
      BOOL v46 = 0;
      BOOL v45 = *(_DWORD *)v213 == 1;
    }
    int v47 = (*(_DWORD *)&v213[12] < 2u) & ~v44;
    goto LABEL_91;
  }
LABEL_614:
  if (v225) {
    nitro::nitro_function::nitro_function(v225);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
}

void sub_192941088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (SLOBYTE(STACK[0x367]) < 0) {
    operator delete((void *)STACK[0x350]);
  }
  if (SLOBYTE(STACK[0x447]) < 0) {
    operator delete((void *)STACK[0x430]);
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }
  if (v66) {
    nitro::nitro_function::nitro_function(v66);
  }
  if (a23) {
    nitro::nitro_function::nitro_function(a23);
  }

  uint64_t v68 = (void *)STACK[0x398];
  if (STACK[0x398])
  {
    STACK[0x3A0] = (unint64_t)v68;
    operator delete(v68);
  }
  if (STACK[0x3B8]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x3B8]);
  }
  if (STACK[0x3D0]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x3D0]);
  }
  if (STACK[0x3E0]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x3E0]);
  }
  if (v65) {
    nitro::nitro_function::nitro_function(v65);
  }
  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine7context21handle_elementwise_eqEPNS_3netEPNS_16abstract_contextE_block_invoke(uint64_t a1, int64x2_t *a2)
{
  *(void *)&long long v102 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2->i64[0] + 8) == *(void *)(a1 + 32)
    && *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)a2->i64[0] + 320))(a2->i64[0]) == 100)
  {
    uint64_t v4 = *(void *)(a1 + 40) + 56;
    *(void *)size_t v98 = a2[3].i32[2];
    uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v4, *(unint64_t *)v98, v98);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[4] - v5[3]) >> 3) >= 2)
    {
      uint64_t v6 = *(void *)(a1 + 40);
      *(void *)size_t v98 = a2[3].i32[2];
      uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6 + 56, *(unint64_t *)v98, v98);
      uint64_t v8 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v6 + 184, (void *)v7[3]);
      uint64_t v9 = *(void *)(a1 + 40);
      unint64_t v10 = a2[3].i32[2];
      v93.__r_.__value_.__r.__words[0] = v10;
      uint64_t v11 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9 + 56, v10, &v93);
      if (v8 != std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v9 + 184, (void *)(v11[3] + 24)))
      {
        *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)a2->i64[0] + 320))(a2->i64[0]) = 33;
        *(_DWORD *)size_t v98 = a2[3].i32[2];
        memset(&v98[8], 0, 64);
        unint64_t v12 = a2[2].u64[1];
        if (v12 >= a2[3].i64[0])
        {
          uint64_t v13 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)v98);
        }
        else
        {
          std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a2[2].i64[1], (uint64_t)v98);
          uint64_t v13 = v12 + 72;
          a2[2].i64[1] = v12 + 72;
        }
        a2[2].i64[1] = v13;
        v93.__r_.__value_.__r.__words[0] = (std::string::size_type)&v98[48];
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
        v93.__r_.__value_.__r.__words[0] = (std::string::size_type)&v98[24];
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
        if (*(void *)&v98[16]) {
          nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v98[16]);
        }
        uint64_t v14 = *(uint64_t (****)(void))(*(void *)(a2->i64[0] + 8) + 8);
        int v15 = (**v14)(v14);
        uint64_t v16 = *(void *)(a1 + 40);
        unint64_t v17 = a2[3].i32[2];
        int v94 = *(_DWORD *)(*(void *)(*(void *)(v16 + 32) + 16 * v17) + 12);
        int v95 = v15;
        *(void *)size_t v98 = v17;
        unint64_t v18 = (const void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v16 + 96, v17, v98)[3];
        if (*((char *)v18 + 23) >= 0) {
          size_t v19 = *((unsigned __int8 *)v18 + 23);
        }
        else {
          size_t v19 = (size_t)v18[1];
        }
        long long v20 = &v93;
        std::string::basic_string[abi:ne180100]((uint64_t)&v93, v19 + 6);
        if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v20 = (std::string *)v93.__r_.__value_.__r.__words[0];
        }
        if (v19)
        {
          if (*((char *)v18 + 23) >= 0) {
            uint64_t v21 = v18;
          }
          else {
            uint64_t v21 = *v18;
          }
          memmove(v20, v21, v19);
        }
        strcpy((char *)v20 + v19, "@__sub");
        uint64_t v22 = *(void *)(a1 + 40) + 96;
        unint64_t v23 = a2[3].i32[2];
        *(void *)size_t v98 = v23;
        uint64_t v24 = (const void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v22, v23, v98)[3];
        if (*((char *)v24 + 23) >= 0) {
          size_t v25 = *((unsigned __int8 *)v24 + 23);
        }
        else {
          size_t v25 = (size_t)v24[1];
        }
        uint64_t v26 = &v92;
        std::string::basic_string[abi:ne180100]((uint64_t)&v92, v25 + 6);
        if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v26 = (std::string *)v92.__r_.__value_.__r.__words[0];
        }
        if (v25)
        {
          if (*((char *)v24 + 23) >= 0) {
            unsigned int v27 = v24;
          }
          else {
            unsigned int v27 = *v24;
          }
          memmove(v26, v27, v25);
        }
        strcpy((char *)v26 + v25, "@__abs");
        uint64_t v28 = *(void *)(a1 + 40) + 96;
        unint64_t v29 = a2[3].i32[2];
        *(void *)size_t v98 = v29;
        uint64_t v30 = (const void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v28, v29, v98)[3];
        if (*((char *)v30 + 23) >= 0) {
          size_t v31 = *((unsigned __int8 *)v30 + 23);
        }
        else {
          size_t v31 = (size_t)v30[1];
        }
        uint64_t v32 = &v91;
        std::string::basic_string[abi:ne180100]((uint64_t)&v91, v31 + 6);
        if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v32 = (std::string *)v91.__r_.__value_.__r.__words[0];
        }
        if (v31)
        {
          if (*((char *)v30 + 23) >= 0) {
            uint64_t v33 = v30;
          }
          else {
            uint64_t v33 = *v30;
          }
          memmove(v32, v33, v31);
        }
        strcpy((char *)v32 + v31, "@__neg");
        uint64_t v34 = *(void *)(a1 + 40) + 96;
        unint64_t v35 = a2[3].i32[2];
        *(void *)size_t v98 = v35;
        char v36 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v34, v35, v98)[3];
        if (*((char *)v36 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v90, *(const std::string::value_type **)v36, *((void *)v36 + 1));
        }
        else
        {
          long long v37 = *v36;
          v90.__r_.__value_.__r.__words[2] = *((void *)v36 + 2);
          *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v37;
        }
        *(void *)&v98[16] = 897988541;
        v98[24] = 0;
        *(void *)&v98[44] = 0;
        *(void *)size_t v98 = 33;
        *(void *)&v98[8] = 1065353216;
        Espresso::abstract_engine_factory::shared(&v99);
        uint64_t v38 = v99.__r_.__value_.__r.__words[0];
        uint64_t v39 = a2->i64[0];
        std::string::basic_string[abi:ne180100]<0>(v86, "elementwise");
        Espresso::abstract_engine_factory::make_kernel_priv(v38, v39 + 8, (uint64_t)v86, (uint64_t)v98, &v95);
        std::string::basic_string[abi:ne180100]<0>(&v85, "elementwise");
        uint64_t v40 = a2[1].i64[0];
        if (*(char *)(v40 + 39) >= 0) {
          size_t v41 = *(unsigned __int8 *)(v40 + 39);
        }
        else {
          size_t v41 = *(void *)(v40 + 24);
        }
        p_p = &__p;
        std::string::basic_string[abi:ne180100]((uint64_t)&__p, v41 + 6);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if (v41)
        {
          if (*(char *)(v40 + 39) >= 0) {
            BOOL v43 = (const void *)(v40 + 16);
          }
          else {
            BOOL v43 = *(const void **)(v40 + 16);
          }
          memmove(p_p, v43, v41);
        }
        strcpy((char *)p_p + v41, "@__sub");
        uint64_t v44 = *(void *)(a1 + 40) + 56;
        unint64_t v45 = a2[3].i32[2];
        unint64_t v96 = (void ***)v45;
        BOOL v46 = (std::string **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v44, v45, &v96);
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v101, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
        }
        else {
          std::string v101 = v93;
        }
        int v81 = 0;
        size_t v82 = 0;
        __int16 v83 = 0;
        LOBYTE(v75) = 0;
        int v81 = (std::string *)operator new(0x18uLL);
        size_t v82 = v81;
        __int16 v83 = v81 + 1;
        size_t v82 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v83, (long long *)&v101, &v102, v81);
        Espresso::single_match_state<Espresso::generic_elementwise_kernel>::add_kernel(a2, &v88, &v85, &__p, v46 + 3, &v81);
        uint64_t v74 = (std::string *)&v81;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v101.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v85.__r_.__value_.__l.__data_);
        }
        if (v89) {
          nitro::nitro_function::nitro_function(v89);
        }
        if (v87 < 0) {
          operator delete(v86[0]);
        }
        if (v99.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v99.__r_.__value_.__l.__size_);
        }
        *(void *)&v98[16] = 897988541;
        v98[24] = 0;
        *(void *)&v98[44] = 0;
        *(void *)size_t v98 = 24;
        *(void *)&v98[8] = 1065353216;
        Espresso::abstract_engine_factory::shared(&v77);
        uint64_t v47 = v77;
        uint64_t v48 = a2->i64[0];
        std::string::basic_string[abi:ne180100]<0>(v86, "elementwise");
        Espresso::abstract_engine_factory::make_kernel_priv(v47, v48 + 8, (uint64_t)v86, (uint64_t)v98, &v95);
        std::string::basic_string[abi:ne180100]<0>(&v85, "elementwise");
        uint64_t v49 = a2[1].i64[0];
        if (*(char *)(v49 + 39) >= 0) {
          size_t v50 = *(unsigned __int8 *)(v49 + 39);
        }
        else {
          size_t v50 = *(void *)(v49 + 24);
        }
        int v51 = &__p;
        std::string::basic_string[abi:ne180100]((uint64_t)&__p, v50 + 6);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int v51 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if (v50)
        {
          if (*(char *)(v49 + 39) >= 0) {
            uint64_t v52 = (const void *)(v49 + 16);
          }
          else {
            uint64_t v52 = *(const void **)(v49 + 16);
          }
          memmove(v51, v52, v50);
        }
        strcpy((char *)v51 + v50, "@__abs");
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v101, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
        }
        else {
          std::string v101 = v93;
        }
        int v81 = 0;
        size_t v82 = 0;
        __int16 v83 = 0;
        uint64_t v74 = (std::string *)&v81;
        LOBYTE(v75) = 0;
        int v81 = (std::string *)operator new(0x18uLL);
        size_t v82 = v81;
        __int16 v83 = v81 + 1;
        size_t v82 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v83, (long long *)&v101, &v102, v81);
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v99, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
        }
        else {
          std::string v99 = v92;
        }
        uint64_t v74 = 0;
        uint64_t v75 = 0;
        p_data = 0;
        unint64_t v96 = (void ***)&v74;
        char v97 = 0;
        uint64_t v74 = (std::string *)operator new(0x18uLL);
        uint64_t v75 = v74;
        p_data = (void **)&v74[1].__r_.__value_.__l.__data_;
        uint64_t v75 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v99, (long long *)&v100, v74);
        Espresso::single_match_state<Espresso::generic_elementwise_kernel>::add_kernel(a2, &v79, &v85, &__p, &v81, &v74);
        unint64_t v96 = (void ***)&v74;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v99.__r_.__value_.__l.__data_);
        }
        uint64_t v74 = (std::string *)&v81;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v101.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v85.__r_.__value_.__l.__data_);
        }
        if (v80) {
          nitro::nitro_function::nitro_function(v80);
        }
        if (v87 < 0) {
          operator delete(v86[0]);
        }
        if (v78) {
          nitro::nitro_function::nitro_function(v78);
        }
        *(void *)&v98[16] = 897988541;
        v98[24] = 0;
        *(void *)&v98[44] = 0;
        *(void *)size_t v98 = 3;
        *(void *)&v98[8] = 3212836864;
        Espresso::abstract_engine_factory::shared(&v77);
        uint64_t v53 = v77;
        uint64_t v54 = a2->i64[0];
        std::string::basic_string[abi:ne180100]<0>(v86, "elementwise");
        Espresso::abstract_engine_factory::make_kernel_priv(v53, v54 + 8, (uint64_t)v86, (uint64_t)v98, &v95);
        std::string::basic_string[abi:ne180100]<0>(&v85, "elementwise");
        uint64_t v55 = a2[1].i64[0];
        if (*(char *)(v55 + 39) >= 0) {
          size_t v56 = *(unsigned __int8 *)(v55 + 39);
        }
        else {
          size_t v56 = *(void *)(v55 + 24);
        }
        unint64_t v57 = &__p;
        std::string::basic_string[abi:ne180100]((uint64_t)&__p, v56 + 6);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unint64_t v57 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if (v56)
        {
          if (*(char *)(v55 + 39) >= 0) {
            long long v58 = (const void *)(v55 + 16);
          }
          else {
            long long v58 = *(const void **)(v55 + 16);
          }
          memmove(v57, v58, v56);
        }
        strcpy((char *)v57 + v56, "@__neg");
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v101, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
        }
        else {
          std::string v101 = v92;
        }
        int v81 = 0;
        size_t v82 = 0;
        __int16 v83 = 0;
        uint64_t v74 = (std::string *)&v81;
        LOBYTE(v75) = 0;
        int v81 = (std::string *)operator new(0x18uLL);
        size_t v82 = v81;
        __int16 v83 = v81 + 1;
        size_t v82 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v83, (long long *)&v101, &v102, v81);
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v99, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
        }
        else {
          std::string v99 = v91;
        }
        uint64_t v74 = 0;
        uint64_t v75 = 0;
        p_data = 0;
        unint64_t v96 = (void ***)&v74;
        char v97 = 0;
        uint64_t v74 = (std::string *)operator new(0x18uLL);
        uint64_t v75 = v74;
        p_data = (void **)&v74[1].__r_.__value_.__l.__data_;
        uint64_t v75 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v99, (long long *)&v100, v74);
        Espresso::single_match_state<Espresso::generic_elementwise_kernel>::add_kernel(a2, &v72, &v85, &__p, &v81, &v74);
        unint64_t v96 = (void ***)&v74;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v99.__r_.__value_.__l.__data_);
        }
        uint64_t v74 = (std::string *)&v81;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v101.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v85.__r_.__value_.__l.__data_);
        }
        if (v73) {
          nitro::nitro_function::nitro_function(v73);
        }
        if (v87 < 0) {
          operator delete(v86[0]);
        }
        if (v78) {
          nitro::nitro_function::nitro_function(v78);
        }
        __asm { FMOV            V0.2S, #1.0 }
        *(_OWORD *)&v98[4] = _D0;
        *(void *)&v98[28] = 0;
        *(void *)&v98[20] = 0;
        *(_DWORD *)size_t v98 = 23;
        Espresso::abstract_engine_factory::shared(&v77);
        uint64_t v64 = v77;
        uint64_t v65 = a2->i64[0];
        std::string::basic_string[abi:ne180100]<0>(v86, "activation");
        Espresso::abstract_engine_factory::make_kernel_priv(v64, v65 + 8, (uint64_t)v86, (uint64_t)v98, &v95);
        std::string::basic_string[abi:ne180100]<0>(&v85, "activation");
        uint64_t v66 = a2[1].i64[0];
        if (*(char *)(v66 + 39) >= 0) {
          size_t v67 = *(unsigned __int8 *)(v66 + 39);
        }
        else {
          size_t v67 = *(void *)(v66 + 24);
        }
        uint64_t v68 = &__p;
        std::string::basic_string[abi:ne180100]((uint64_t)&__p, v67 + 7);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v68 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if (v67)
        {
          if (*(char *)(v66 + 39) >= 0) {
            uint64_t v69 = (const void *)(v66 + 16);
          }
          else {
            uint64_t v69 = *(const void **)(v66 + 16);
          }
          memmove(v68, v69, v67);
        }
        strcpy((char *)v68 + v67, "@__step");
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v101, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
        }
        else {
          std::string v101 = v91;
        }
        int v81 = 0;
        size_t v82 = 0;
        __int16 v83 = 0;
        uint64_t v74 = (std::string *)&v81;
        LOBYTE(v75) = 0;
        int v81 = (std::string *)operator new(0x18uLL);
        size_t v82 = v81;
        __int16 v83 = v81 + 1;
        size_t v82 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v83, (long long *)&v101, &v102, v81);
        if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v99, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
        }
        else {
          std::string v99 = v90;
        }
        uint64_t v74 = 0;
        uint64_t v75 = 0;
        p_data = 0;
        unint64_t v96 = (void ***)&v74;
        char v97 = 0;
        uint64_t v74 = (std::string *)operator new(0x18uLL);
        uint64_t v75 = v74;
        p_data = (void **)&v74[1].__r_.__value_.__l.__data_;
        uint64_t v75 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v99, (long long *)&v100, v74);
        Espresso::single_match_state<Espresso::generic_elementwise_kernel>::add_kernel(a2, &v70, &v85, &__p, &v81, &v74);
        unint64_t v96 = (void ***)&v74;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v96);
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v99.__r_.__value_.__l.__data_);
        }
        uint64_t v74 = (std::string *)&v81;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v101.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v85.__r_.__value_.__l.__data_);
        }
        if (v71) {
          nitro::nitro_function::nitro_function(v71);
        }
        if (v87 < 0) {
          operator delete(v86[0]);
        }
        if (v78) {
          nitro::nitro_function::nitro_function(v78);
        }
        if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v90.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v91.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v92.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v93.__r_.__value_.__l.__data_);
        }
      }
    }
  }
}

void sub_192942DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  a14 = (uint64_t)&a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  if (*(char *)(v67 - 89) < 0) {
    operator delete(*(void **)(v67 - 112));
  }
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (a18) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)a18);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  if (a61 < 0) {
    operator delete(a56);
  }
  if (a67 < 0) {
    operator delete(a62);
  }
  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *a2;
  if (*(void *)(*a2 + 8) == v2)
  {
    uint64_t v5 = (void *)a2[2];
    if (v5[1] == v2)
    {
      uint64_t v6 = (std::__shared_weak_count *)a2[1];
      if (v6)
      {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v5 = (void *)a2[2];
      }
      uint64_t v7 = (std::__shared_weak_count *)a2[3];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 320))(v3);
      uint64_t v9 = (*(uint64_t (**)(void *))(*v5 + 320))(v5);
      if (*(_DWORD *)(v9 + 4)) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = *(_DWORD *)v9 == 3;
      }
      BOOL v11 = v10 && *(_WORD *)(v8 + 2) == 0;
      if (v11 && fabsf(*(float *)(v8 + 4)) < 0.000001 && fabsf(*(float *)(v9 + 12)) < 0.000001)
      {
        uint64_t v12 = *(void *)(a2[15] + 32);
        uint64_t v13 = *((int *)a2 + 28);
        uint64_t v14 = *((int *)a2 + 29);
        long long v15 = *(_OWORD *)(v12 + 16 * v13);
        *(_OWORD *)(v12 + 16 * v13) = *(_OWORD *)(v12 + 16 * v14);
        *(_OWORD *)(v12 + 16 * v14) = v15;
      }
      if (v7) {
        nitro::nitro_function::nitro_function(v7);
      }
      if (v6)
      {
        nitro::nitro_function::nitro_function(v6);
      }
    }
  }
}

void sub_1929432D0(_Unwind_Exception *exception_object)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN8Espresso17ANECompilerEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_3(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((void *)*a2 + 1) == v2 && *((void *)a2[2] + 1) == v2 && *((void *)a2[4] + 1) == v2)
  {
    uint64_t v4 = (*(uint64_t (**)(void *))(*(void *)*a2 + 384))(*a2);
    uint64_t v5 = (*(uint64_t (**)(void))(*(void *)a2[2] + 320))();
    uint64_t v6 = (*(uint64_t (**)(void))(*(void *)a2[4] + 384))();
    if (fabsf(*(float *)(v6 + 8)) < 0.000001
      && *(_DWORD *)v6 == 6
      && fabsf(*(float *)(v5 + 12)) < 0.000001
      && *(_DWORD *)v5 == 25)
    {
      BOOL v9 = fabsf(*(float *)(v4 + 8)) < 0.000001 && *(_DWORD *)v4 == 6;
      if (v9 && fabsf(*(float *)(v4 + 4) + 1.0) < 0.000001 && fabsf(*(float *)(v6 + 4) + 1.0) < 0.000001)
      {
        *(void *)uint64_t v4 = 14;
        *(float *)(v4 + 8) = -*(float *)(v5 + 8);
        uint64_t v10 = *((void *)a2[17] + 4);
        BOOL v11 = *(char **)(*(void *)(v10 + 16 * *((int *)a2 + 30)) + 64);
        uint64_t v12 = *(void *)(*(void *)(v10 + 16 * *((int *)a2 + 32)) + 64);
        uint64_t v13 = *(void *)(*(void *)(v10 + 16 * *((int *)a2 + 31)) + 64);
        uint64_t v14 = operator new(0x10uLL);
        v45[1] = (uint64_t)(v14 + 2);
        v45[2] = (uint64_t)(v14 + 2);
        void *v14 = v12;
        v14[1] = v13;
        v45[0] = (uint64_t)v14;
        Espresso::merge_kernel_attributes(v11, v45);
        operator delete(v14);
        uint64_t v15 = (uint64_t)a2[17] + 96;
        unint64_t v16 = *((int *)a2 + 32);
        v45[0] = v16;
        unint64_t v17 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v15, v16, v45);
        uint64_t v18 = (uint64_t)a2[17] + 96;
        unint64_t v19 = *((int *)a2 + 30);
        unint64_t v44 = v19;
        long long v20 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v18, v19, &v44);
        if (v20 != v17) {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v20 + 3), (std::string *)v17[3], (std::string *)v17[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17[4] - v17[3]) >> 3));
        }
        uint64_t v21 = a2 + 12;
        unint64_t v23 = (char *)a2[13];
        unint64_t v22 = (unint64_t)a2[14];
        if ((unint64_t)v23 >= v22)
        {
          size_t v25 = (char *)*v21;
          uint64_t v26 = (v23 - (unsigned char *)*v21) >> 2;
          unint64_t v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 62) {
            goto LABEL_55;
          }
          uint64_t v28 = v22 - (void)v25;
          if (v28 >> 1 > v27) {
            unint64_t v27 = v28 >> 1;
          }
          BOOL v29 = (unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v29) {
            unint64_t v30 = v27;
          }
          if (v30)
          {
            unint64_t v30 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v30);
            size_t v25 = (char *)a2[12];
            unint64_t v23 = (char *)a2[13];
          }
          else
          {
            uint64_t v31 = 0;
          }
          uint64_t v32 = (char *)(v30 + 4 * v26);
          unint64_t v22 = v30 + 4 * v31;
          *(_DWORD *)uint64_t v32 = *((_DWORD *)a2 + 31);
          uint64_t v24 = v32 + 4;
          while (v23 != v25)
          {
            int v33 = *((_DWORD *)v23 - 1);
            v23 -= 4;
            *((_DWORD *)v32 - 1) = v33;
            v32 -= 4;
          }
          a2[12] = v32;
          a2[13] = v24;
          a2[14] = (void *)v22;
          if (v25)
          {
            operator delete(v25);
            unint64_t v22 = (unint64_t)a2[14];
          }
        }
        else
        {
          *(_DWORD *)unint64_t v23 = *((_DWORD *)a2 + 31);
          uint64_t v24 = v23 + 4;
        }
        a2[13] = v24;
        if ((unint64_t)v24 < v22)
        {
          *(_DWORD *)uint64_t v24 = *((_DWORD *)a2 + 32);
          uint64_t v34 = v24 + 4;
LABEL_53:
          a2[13] = v34;
          return;
        }
        unint64_t v35 = (char *)*v21;
        uint64_t v36 = (v24 - (unsigned char *)*v21) >> 2;
        unint64_t v37 = v36 + 1;
        if (!((unint64_t)(v36 + 1) >> 62))
        {
          uint64_t v38 = v22 - (void)v35;
          if (v38 >> 1 > v37) {
            unint64_t v37 = v38 >> 1;
          }
          BOOL v29 = (unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v29) {
            unint64_t v39 = v37;
          }
          if (v39)
          {
            unint64_t v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v39);
            unint64_t v35 = (char *)a2[12];
            uint64_t v24 = (char *)a2[13];
          }
          else
          {
            uint64_t v40 = 0;
          }
          size_t v41 = (_DWORD *)(v39 + 4 * v36);
          unint64_t v42 = v39 + 4 * v40;
          *size_t v41 = *((_DWORD *)a2 + 32);
          uint64_t v34 = v41 + 1;
          while (v24 != v35)
          {
            int v43 = *((_DWORD *)v24 - 1);
            v24 -= 4;
            *--size_t v41 = v43;
          }
          a2[12] = v41;
          a2[13] = v34;
          a2[14] = (void *)v42;
          if (v35) {
            operator delete(v35);
          }
          goto LABEL_53;
        }
LABEL_55:
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
    }
  }
}

void sub_1929436C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine7context44insert_broadcast_for_implicit_dual_source_ewEPNS_3netEPS1__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(void *)(*(void *)a2 + 8) == v4 || v4 == 0)
  {
    uint64_t v7 = (uint64_t *)(a1 + 40);
    if (v4) {
      BOOL v8 = *(void *)(*(void *)(a1 + 40) + 792) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      int v31 = (***(uint64_t (****)(void))(v4 + 8))(*(void *)(v4 + 8));
      if (v31 == 10007
        || (***(unsigned int (****)(void))(*(void *)(a1 + 32) + 8))(*(void *)(*(void *)(a1 + 32)
                                                                                               + 8)) == 10006)
      {
        return;
      }
      uint64_t v3 = *(void *)a2;
    }
    if (*(_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 320))(v3) <= 1u)
    {
      uint64_t v9 = *v7 + 96;
      *(void *)unint64_t v44 = *(int *)(a2 + 56);
      uint64_t v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, *(unint64_t *)v44, v44);
      if (v10[4] - v10[3] != 24) {
        Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("EW ADD cannot have more than one output.");
      }
      uint64_t v11 = *v7 + 56;
      *(void *)unint64_t v44 = *(int *)(a2 + 56);
      uint64_t v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v11, *(unint64_t *)v44, v44);
      if (v12[4] - v12[3] == 48)
      {
        uint64_t v13 = *v7;
        uint64_t v14 = *(std::__shared_weak_count **)(*v7 + 24);
        uint64_t v49 = *(void *)(*v7 + 16);
        size_t v50 = v14;
        if (v14)
        {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v13 = *v7;
        }
        unint64_t v15 = *(int *)(a2 + 56);
        *(void *)uint64_t v34 = v15;
        *(void *)unint64_t v39 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v13 + 56, v15, v34)[3];
        unint64_t v16 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v13 + 184), *(void **)v39, (long long **)v39);
        long long v17 = *(_OWORD *)(v16 + 72);
        *(_OWORD *)unint64_t v44 = *(_OWORD *)(v16 + 56);
        *(_OWORD *)&v44[16] = v17;
        uint64_t v18 = (const void *)*((void *)v16 + 12);
        uint64_t v45 = *((void *)v16 + 11);
        BOOL v46 = 0;
        uint64_t v47 = 0;
        uint64_t v48 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v46, v18, *((void *)v16 + 13), (uint64_t)(*((void *)v16 + 13) - (void)v18) >> 2);
        uint64_t v19 = *v7;
        uint64_t v20 = *v7 + 56;
        unint64_t v21 = *(int *)(a2 + 56);
        v32[0] = (uint64_t *)v21;
        *(void *)uint64_t v34 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v20, v21, v32)[3]+ 24;
        unint64_t v22 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v19 + 184), *(void **)v34, (long long **)v34);
        long long v23 = *(_OWORD *)(v22 + 72);
        *(_OWORD *)unint64_t v39 = *(_OWORD *)(v22 + 56);
        *(_OWORD *)&v39[16] = v23;
        uint64_t v24 = (const void *)*((void *)v22 + 12);
        uint64_t v40 = *((void *)v22 + 11);
        size_t v41 = 0;
        unint64_t v42 = 0;
        uint64_t v43 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v41, v24, *((void *)v22 + 13), (uint64_t)(*((void *)v22 + 13) - (void)v24) >> 2);
        uint64_t v25 = *v7;
        uint64_t v26 = *v7 + 96;
        unint64_t v27 = *(int *)(a2 + 56);
        unint64_t v33 = v27;
        v32[0] = *((uint64_t **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v26, v27, &v33)+ 3);
        uint64_t v28 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v25 + 184), v32[0], (long long **)v32);
        long long v29 = *(_OWORD *)(v28 + 72);
        *(_OWORD *)uint64_t v34 = *(_OWORD *)(v28 + 56);
        *(_OWORD *)&v34[16] = v29;
        unint64_t v30 = (const void *)*((void *)v28 + 12);
        uint64_t v35 = *((void *)v28 + 11);
        std::string __p = 0;
        unint64_t v37 = 0;
        uint64_t v38 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v30, *((void *)v28 + 13), (uint64_t)(*((void *)v28 + 13) - (void)v30) >> 2);
        v32[0] = (uint64_t *)v34;
        v32[1] = (uint64_t *)a2;
        void v32[2] = v7;
        v32[3] = &v49;
        if (!Espresso::layer_shape::operator==((uint64_t)v44, (uint64_t)v34))
        {
          if (*(void *)&v34[12] != *(void *)&v44[12]) {
            goto LABEL_35;
          }
          _ZZZN8Espresso17ANECompilerEngine7context44insert_broadcast_for_implicit_dual_source_ewEPNS_3netEPS1_EUb0_ENK3__2clEm(v32, 0);
        }
        if (Espresso::layer_shape::operator==((uint64_t)v39, (uint64_t)v34))
        {
LABEL_22:
          if (__p)
          {
            unint64_t v37 = __p;
            operator delete(__p);
          }
          if (v41)
          {
            unint64_t v42 = v41;
            operator delete(v41);
          }
          if (v46)
          {
            uint64_t v47 = v46;
            operator delete(v46);
          }
          if (v50) {
            nitro::nitro_function::nitro_function(v50);
          }
          return;
        }
        if (*(void *)&v34[12] == *(void *)&v39[12])
        {
          _ZZZN8Espresso17ANECompilerEngine7context44insert_broadcast_for_implicit_dual_source_ewEPNS_3netEPS1_EUb0_ENK3__2clEm(v32, 1uLL);
          goto LABEL_22;
        }
LABEL_35:
        Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Broadcast along N and Seq dims not supported.");
      }
    }
  }
}

void sub_192943A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  if (__p) {
    operator delete(__p);
  }
  if (a28) {
    operator delete(a28);
  }
  int v31 = *(void **)(v29 - 72);
  if (v31)
  {
    *(void *)(v29 - 64) = v31;
    operator delete(v31);
  }
  uint64_t v32 = *(std::__shared_weak_count **)(v29 - 40);
  if (v32) {
    nitro::nitro_function::nitro_function(v32);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN8Espresso17ANECompilerEngine7context19transform_broadcastEPNS_3netEPS1__block_invoke(uint64_t a1, int64x2_t *a2)
{
  *(void *)&long long v234 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(a2->i64[0] + 8) != v2 && v2 != 0) {
    return;
  }
  BOOL v6 = !v2 || *(void *)(*(void *)(a1 + 40) + 792) == 0;
  if (!v6
    && ((***(unsigned int (****)(void))(v2 + 8))(*(void *)(v2 + 8)) == 10007
     || (***(unsigned int (****)(void))(*(void *)(a1 + 32) + 8))(*(void *)(*(void *)(a1 + 32) + 8)) == 10006)
    && !*(unsigned char *)(*(void *)(a1 + 32) + 123))
  {
    return;
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2->i64[0] + 320))(a2->i64[0]);
  if (*(unsigned char *)(v7 + 32) || *(_DWORD *)(v7 + 28) != 0) {
    return;
  }
  uint64_t v9 = (void *)v7;
  uint64_t v10 = *(void *)(a1 + 40) + 96;
  unint64_t v11 = a2[3].i32[2];
  *(void *)int v220 = v11;
  uint64_t v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v10, v11, v220);
  if (v12[4] - v12[3] != 24) {
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Broadcast layer cannot have more than one output.");
  }
  uint64_t v13 = *(void *)(a1 + 40) + 56;
  unint64_t v14 = a2[3].i32[2];
  *(void *)int v220 = v14;
  unint64_t v15 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v13, v14, v220);
  if (v15[4] - v15[3] != 24) {
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Broadcast layer cannot have more than one input.");
  }
  uint64_t v16 = *(void *)(a1 + 40);
  long long v17 = *(std::__shared_weak_count **)(v16 + 24);
  uint64_t v216 = *(void *)(v16 + 16);
  uint64_t v217 = v17;
  if (v17)
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v16 = *(void *)(a1 + 40);
  }
  unint64_t v18 = a2[3].i32[2];
  *(void *)&long long v204 = v18;
  *(void *)int v220 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v16 + 56, v18, &v204)[3];
  uint64_t v19 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v16 + 184), *(void **)v220, (long long **)v220);
  long long v20 = *(_OWORD *)(v19 + 72);
  long long v210 = *(_OWORD *)(v19 + 56);
  long long v211 = v20;
  unint64_t v21 = (const void *)*((void *)v19 + 12);
  uint64_t v212 = *((void *)v19 + 11);
  v213 = 0;
  uint64_t v214 = 0;
  uint64_t v215 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v213, v21, *((void *)v19 + 13), (uint64_t)(*((void *)v19 + 13) - (void)v21) >> 2);
  uint64_t v22 = *(void *)(a1 + 40);
  unint64_t v23 = a2[3].i32[2];
  *(void *)long long v186 = v23;
  *(void *)int v220 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v22 + 96, v23, v186)[3];
  uint64_t v24 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v22 + 184), *(void **)v220, (long long **)v220);
  long long v25 = *(_OWORD *)(v24 + 72);
  long long v204 = *(_OWORD *)(v24 + 56);
  long long v205 = v25;
  uint64_t v26 = (const void *)*((void *)v24 + 12);
  uint64_t v206 = *((void *)v24 + 11);
  v207 = 0;
  size_t v208 = 0;
  uint64_t v209 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v207, v26, *((void *)v24 + 13), (uint64_t)(*((void *)v24 + 13) - (void)v26) >> 2);
  if ((void)v210 != (void)v204)
  {
    if (HIDWORD(v210) == HIDWORD(v204))
    {
      if (v211 == v205)
      {
        uint64_t v27 = *(void *)(a1 + 40) + 56;
        unint64_t v28 = a2[3].i32[2];
        *(void *)int v220 = v28;
        uint64_t v29 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v27, v28, v220)[3];
        if (*((char *)v29 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v203, *(const std::string::value_type **)v29, *((void *)v29 + 1));
        }
        else
        {
          long long v30 = *v29;
          v203.__r_.__value_.__r.__words[2] = *((void *)v29 + 2);
          *(_OWORD *)&v203.__r_.__value_.__l.__data_ = v30;
        }
        uint64_t v31 = *(void *)(a1 + 40) + 96;
        unint64_t v32 = a2[3].i32[2];
        *(void *)int v220 = v32;
        unint64_t v33 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v31, v32, v220)[3];
        if (*((char *)v33 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v33, *((void *)v33 + 1));
        }
        else
        {
          long long v34 = *v33;
          __str.__r_.__value_.__r.__words[2] = *((void *)v33 + 2);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v34;
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v201, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        }
        else {
          std::string v201 = __str;
        }
        int v35 = DWORD1(v210);
        int v36 = DWORD1(v204);
        if (v210 == v204) {
          int v37 = 1;
        }
        else {
          int v37 = v204;
        }
        _ZZZN8Espresso17ANECompilerEngine7context19transform_broadcastEPNS_3netEPS1_EUb_ENK3__1clEm(&v199, v37);
        if (v35 == v36) {
          int v38 = 1;
        }
        else {
          int v38 = v36;
        }
        _ZZZN8Espresso17ANECompilerEngine7context19transform_broadcastEPNS_3netEPS1_EUb_ENK3__1clEm(&v197, v38);
        int v177 = DWORD2(v204);
        int v178 = DWORD2(v210);
        uint64_t v179 = a2;
        if (DWORD2(v210) == DWORD2(v204))
        {
          long long v222 = 0u;
          long long v221 = 0u;
          *(_DWORD *)int v220 = a2[3].i32[2];
          memset(&v220[8], 0, 32);
          unint64_t v53 = a2[2].u64[1];
          if (v53 >= a2[3].i64[0])
          {
            uint64_t v54 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)v220);
          }
          else
          {
            std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a2[2].i64[1], (uint64_t)v220);
            uint64_t v54 = v53 + 72;
            a2[2].i64[1] = v53 + 72;
          }
          a2[2].i64[1] = v54;
          *(void *)long long v186 = (char *)&v221 + 8;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v186);
          *(void *)long long v186 = &v220[24];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v186);
          if (*(void *)&v220[16]) {
            nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v220[16]);
          }
        }
        else
        {
          *uint64_t v9 = 0;
          uint64_t v39 = *(void *)(a1 + 40) + 96;
          unint64_t v40 = a2[3].i32[2];
          *(void *)v223 = v40;
          size_t v41 = (const void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v39, v40, v223)[3];
          if (*((char *)v41 + 23) >= 0) {
            size_t v42 = *((unsigned __int8 *)v41 + 23);
          }
          else {
            size_t v42 = (size_t)v41[1];
          }
          uint64_t v43 = v220;
          std::string::basic_string[abi:ne180100]((uint64_t)v220, v42 + 21);
          if (v220[23] < 0) {
            uint64_t v43 = *(unsigned char **)v220;
          }
          if (v42)
          {
            if (*((char *)v41 + 23) >= 0) {
              unint64_t v44 = v41;
            }
            else {
              unint64_t v44 = *v41;
            }
            memmove(v43, v44, v42);
          }
          strcpy(&v43[v42], "_spatial_bcast_layer_");
          std::to_string((std::string *)v186, a2[3].i32[2]);
          if (v186[23] >= 0) {
            uint64_t v45 = v186;
          }
          else {
            uint64_t v45 = *(const std::string::value_type **)v186;
          }
          if (v186[23] >= 0) {
            std::string::size_type v46 = v186[23];
          }
          else {
            std::string::size_type v46 = *(void *)&v186[8];
          }
          uint64_t v47 = std::string::append((std::string *)v220, v45, v46);
          std::string::size_type v48 = v47->__r_.__value_.__r.__words[0];
          *(void *)std::string v228 = v47->__r_.__value_.__l.__size_;
          *(void *)&v228[7] = *(std::string::size_type *)((char *)&v47->__r_.__value_.__r.__words[1] + 7);
          char v49 = HIBYTE(v47->__r_.__value_.__r.__words[2]);
          v47->__r_.__value_.__l.__size_ = 0;
          v47->__r_.__value_.__r.__words[2] = 0;
          v47->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          __str.__r_.__value_.__r.__words[0] = v48;
          __str.__r_.__value_.__l.__size_ = *(void *)v228;
          *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(void *)&v228[7];
          *((unsigned char *)&__str.__r_.__value_.__s + 23) = v49;
          if ((v186[23] & 0x80000000) != 0) {
            operator delete(*(void **)v186);
          }
          if ((v220[23] & 0x80000000) != 0) {
            operator delete(*(void **)v220);
          }
          uint64_t v50 = *(void *)(a1 + 40) + 56;
          unint64_t v51 = a2[3].i32[2];
          *(void *)int v220 = v51;
          uint64_t v52 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v50, v51, v220);
          std::string::operator=((std::string *)v52[3], &__str);
          std::string::operator=(&v201, &__str);
        }
        size_t v56 = v199;
        uint64_t v55 = v200;
        unint64_t v57 = v197;
        long long v58 = v198;
        BOOL v59 = v198 != v197;
        BOOL v60 = v200 != v199;
        if (v200 == v199 && v198 == v197)
        {
          size_t v56 = v200;
          unint64_t v57 = v198;
LABEL_385:
          if (v57) {
            operator delete(v57);
          }
          if (v56) {
            operator delete(v56);
          }
          if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v201.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v203.__r_.__value_.__l.__data_);
          }
          goto LABEL_395;
        }
        uint64_t v181 = a1;
        unint64_t v61 = 0;
        unint64_t v62 = 0;
        unint64_t v63 = 0;
        unint64_t v64 = (v198 - v197) >> 4;
        unint64_t v65 = (v200 - v199) >> 4;
        __asm { FMOV            V9.2S, #1.0 }
        while (1)
        {
          unint64_t v180 = v64;
          uint64_t v70 = v55 - v56;
          int v71 = v55 != v56 && v60;
          if (v58 == v57) {
            break;
          }
          if ((v71 & v59) != 1 || v62 != v63) {
            goto LABEL_84;
          }
          size_t v73 = &v56[16 * v62];
          uint64_t v74 = &v57[16 * v62];
          int v75 = *(_DWORD *)v73;
          uint64_t v76 = *((void *)v73 + 1);
          if (*(_DWORD *)v73 != *(_DWORD *)v74 || v76 != *((void *)v74 + 1))
          {
            BOOL v59 = 1;
LABEL_84:
            if (v60)
            {
LABEL_85:
              BOOL v59 = 0;
              __int16 v78 = &v56[16 * v62++];
              goto LABEL_88;
            }
LABEL_87:
            int v71 = 0;
            __int16 v78 = &v57[16 * v63++];
LABEL_88:
            int v75 = *(_DWORD *)v78;
            uint64_t v76 = *((void *)v78 + 1);
            if (!*(_DWORD *)v78) {
              goto LABEL_119;
            }
            goto LABEL_89;
          }
          unint64_t v63 = v62 + 1;
          BOOL v59 = 1;
          int v71 = 1;
          ++v62;
          if (!v75)
          {
LABEL_119:
            *(void *)&v220[16] = 0x100000000;
            v220[24] = 0;
            *(void *)&v220[28] = _D9;
            v220[36] = 1;
            *(void *)&long long v222 = 0;
            long long v221 = 0uLL;
            *((void *)&v222 + 1) = _D9;
            *(_OWORD *)int v220 = xmmword_192DCA630;
            if (v59) {
              *(_DWORD *)&v220[8] = 2;
            }
            unint64_t v92 = v61;
            if (v71) {
              *(_DWORD *)&v220[4] = 2;
            }
            uint64_t v93 = *(void *)(*(void *)(*(void *)(v181 + 40) + 32) + 16 * v179[3].i32[2]);
            if (*(char *)(v93 + 39) >= 0) {
              size_t v94 = *(unsigned __int8 *)(v93 + 39);
            }
            else {
              size_t v94 = *(void *)(v93 + 24);
            }
            std::string::basic_string[abi:ne180100]((uint64_t)v186, v94 + 4);
            if (v186[23] >= 0) {
              int v95 = v186;
            }
            else {
              int v95 = *(unsigned char **)v186;
            }
            if (v94)
            {
              if (*(char *)(v93 + 39) >= 0) {
                unint64_t v96 = (const void *)(v93 + 16);
              }
              else {
                unint64_t v96 = *(const void **)(v93 + 16);
              }
              memmove(v95, v96, v94);
            }
            strcpy(&v95[v94], "_tmp");
            std::to_string((std::string *)v228, v61);
            if (v228[23] >= 0) {
              char v97 = v228;
            }
            else {
              char v97 = *(const std::string::value_type **)v228;
            }
            if (v228[23] >= 0) {
              std::string::size_type v98 = v228[23];
            }
            else {
              std::string::size_type v98 = *(void *)&v228[8];
            }
            std::string v99 = std::string::append((std::string *)v186, v97, v98);
            long long v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
            v196.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v196.__r_.__value_.__l.__data_ = v100;
            v99->__r_.__value_.__l.__size_ = 0;
            v99->__r_.__value_.__r.__words[2] = 0;
            v99->__r_.__value_.__r.__words[0] = 0;
            if ((v228[23] & 0x80000000) != 0) {
              operator delete(*(void **)v228);
            }
            if ((v186[23] & 0x80000000) != 0) {
              operator delete(*(void **)v186);
            }
            Espresso::abstract_engine_factory::shared(v223);
            uint64_t v101 = *(void *)v223;
            std::string::basic_string[abi:ne180100]<0>(v186, "upsample");
            LODWORD(v191) = (***(uint64_t (****)(void))(v216 + 8))(*(void *)(v216 + 8));
            Espresso::abstract_engine_factory::make_kernel_priv(v101, (uint64_t)&v216, (uint64_t)v186, (uint64_t)v220, (int *)&v191);
            if (*(void *)v228)
            {
              if (v102)
              {
                size_t v103 = *(std::__shared_weak_count **)&v228[8];
                if (*(void *)&v228[8])
                {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v228[8] + 8), 1uLL, memory_order_relaxed);
LABEL_150:
                  if (*(void *)&v228[8]) {
                    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v228[8]);
                  }
                }
                if ((v186[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v186);
                }
                if (*(void *)&v223[8]) {
                  nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v223[8]);
                }
                if (v62 == v70 >> 4 && v63 == v180)
                {
                  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external((std::string *)v186, v201.__r_.__value_.__l.__data_, v201.__r_.__value_.__l.__size_);
                  }
                  else {
                    *(std::string *)long long v186 = v201;
                  }
                  uint64_t v113 = v181;
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__str.__r_.__value_.__l.__data_);
                  }
                  std::string __str = *(std::string *)v186;
                }
                else
                {
                  uint64_t v104 = *(void *)(v181 + 40) + 96;
                  unint64_t v105 = v179[3].i32[2];
                  uint64_t v191 = (std::string *)v105;
                  unint64_t v106 = (const void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v104, v105, &v191)[3];
                  if (*((char *)v106 + 23) >= 0) {
                    size_t v107 = *((unsigned __int8 *)v106 + 23);
                  }
                  else {
                    size_t v107 = (size_t)v106[1];
                  }
                  std::string::basic_string[abi:ne180100]((uint64_t)v228, v107 + 4);
                  if (v228[23] >= 0) {
                    uint64_t v108 = v228;
                  }
                  else {
                    uint64_t v108 = *(unsigned char **)v228;
                  }
                  if (v107)
                  {
                    if (*((char *)v106 + 23) >= 0) {
                      char v109 = v106;
                    }
                    else {
                      char v109 = *v106;
                    }
                    memmove(v108, v109, v107);
                  }
                  strcpy(&v108[v107], "_tmp");
                  unint64_t v92 = v61;
                  std::to_string((std::string *)v223, v61);
                  if (v223[23] >= 0) {
                    std::vector<int>::pointer v110 = v223;
                  }
                  else {
                    std::vector<int>::pointer v110 = *(const std::string::value_type **)v223;
                  }
                  if (v223[23] >= 0) {
                    std::string::size_type v111 = v223[23];
                  }
                  else {
                    std::string::size_type v111 = *(void *)&v223[8];
                  }
                  std::string::size_type v112 = std::string::append((std::string *)v228, v110, v111);
                  uint64_t v113 = v181;
                  long long v114 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
                  *(void *)&v186[16] = *((void *)&v112->__r_.__value_.__l + 2);
                  *(_OWORD *)long long v186 = v114;
                  v112->__r_.__value_.__l.__size_ = 0;
                  v112->__r_.__value_.__r.__words[2] = 0;
                  v112->__r_.__value_.__r.__words[0] = 0;
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__str.__r_.__value_.__l.__data_);
                  }
                  std::string __str = *(std::string *)v186;
                  v186[23] = 0;
                  v186[0] = 0;
                  if ((v223[23] & 0x80000000) != 0) {
                    operator delete(*(void **)v223);
                  }
                  if ((v228[23] & 0x80000000) != 0) {
                    operator delete(*(void **)v228);
                  }
                }
                uint64_t v182 = v102;
                __int16 v183 = v103;
                if (v103) {
                  atomic_fetch_add_explicit(&v103->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                std::string::basic_string[abi:ne180100]<0>(v186, "upsample");
                if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external((std::string *)v223, v203.__r_.__value_.__l.__data_, v203.__r_.__value_.__l.__size_);
                }
                else {
                  *(std::string *)v223 = v203;
                }
                memset(v228, 0, 24);
                uint64_t v191 = (std::string *)v228;
                LOBYTE(v192) = 0;
                *(void *)std::string v228 = operator new(0x18uLL);
                *(void *)&v228[8] = *(void *)v228;
                *(void *)&v228[16] = *(void *)v228 + 24;
                *(void *)&v228[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v228[16], (long long *)v223, (long long *)&v223[24], *(std::string **)v228);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&v233, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                }
                else {
                  std::string v233 = __str;
                }
                uint64_t v191 = 0;
                int v192 = 0;
                p_data = 0;
                uint64_t v218 = (std::string *)&v191;
                char v219 = 0;
                uint64_t v191 = (std::string *)operator new(0x18uLL);
                int v192 = v191;
                p_data = (void **)&v191[1].__r_.__value_.__l.__data_;
                int v192 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v233, &v234, v191);
                Espresso::single_match_state<Espresso::ANECompilerEngine::broadcast_kernel>::add_kernel(v179, &v182, (const std::string *)v186, &v196, (std::string **)v228, &v191, v178 != v177);
                uint64_t v218 = (std::string *)&v191;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v218);
                if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v233.__r_.__value_.__l.__data_);
                }
                uint64_t v191 = (std::string *)v228;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v191);
                if ((v223[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v223);
                }
                if ((v186[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v186);
                }
                if (v183) {
                  nitro::nitro_function::nitro_function(v183);
                }
                uint64_t v128 = (uint64_t **)(*(void *)(v113 + 40) + 184);
                *(void *)std::string v228 = &v203;
                float v129 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v128, &v203, (long long **)v228);
                long long v130 = *(_OWORD *)(v129 + 72);
                *(_OWORD *)long long v186 = *(_OWORD *)(v129 + 56);
                *(_OWORD *)&v186[16] = v130;
                int v131 = (const void *)*((void *)v129 + 12);
                std::string::size_type v187 = *((void *)v129 + 11);
                uint64_t v188 = 0;
                int v189 = 0;
                uint64_t v190 = 0;
                std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v188, v131, *((void *)v129 + 13), (uint64_t)(*((void *)v129 + 13) - (void)v131) >> 2);
                *(_OWORD *)v223 = *(_OWORD *)v186;
                *(_OWORD *)&v223[16] = *(_OWORD *)&v186[16];
                std::string::size_type v224 = v187;
                v226 = 0;
                uint64_t v227 = 0;
                std::string __p = 0;
                std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v188, (uint64_t)v189, (v189 - (unsigned char *)v188) >> 2);
                memset(&v233, 0, sizeof(v233));
                uint64_t v218 = &v233;
                char v219 = 0;
                v233.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
                v233.__r_.__value_.__l.__size_ = v233.__r_.__value_.__r.__words[0];
                v233.__r_.__value_.__r.__words[2] = v233.__r_.__value_.__r.__words[0] + 64;
                v233.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v233.__r_.__value_.__r.__words[2], (long long *)v223, (long long *)v228, (uint64_t)v233.__r_.__value_.__l.__data_);
                (*(void (**)(std::string **__return_ptr, void *, std::string *))(*(void *)v102 + 64))(&v191, v102, &v233);
                std::string::size_type size = v191[1].__r_.__value_.__l.__size_;
                long long v133 = *(_OWORD *)&v191->__r_.__value_.__r.__words[2];
                *(_OWORD *)std::string v228 = *(_OWORD *)&v191->__r_.__value_.__l.__data_;
                *(_OWORD *)&v228[16] = v133;
                std::string::size_type v229 = size;
                long long v231 = 0;
                uint64_t v232 = 0;
                v230 = 0;
                std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v230, (const void *)v191[1].__r_.__value_.__r.__words[2], (uint64_t)v191[2].__r_.__value_.__l.__data_, (uint64_t)(v191[2].__r_.__value_.__r.__words[0] - v191[1].__r_.__value_.__r.__words[2]) >> 2);
                uint64_t v218 = (std::string *)&v191;
                std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v218);
                uint64_t v218 = &v233;
                std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v218);
                if (__p)
                {
                  v226 = __p;
                  operator delete(__p);
                }
                uint64_t v134 = (uint64_t **)(*(void *)(v113 + 40) + 184);
                *(void *)v223 = &__str;
                uint64_t v135 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v134, &__str, (long long **)v223);
                long long v136 = *(_OWORD *)&v228[16];
                *(_OWORD *)(v135 + 56) = *(_OWORD *)v228;
                *(_OWORD *)(v135 + 72) = v136;
                *((void *)v135 + 11) = v229;
                if (v135 + 56 != v228) {
                  std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v135 + 96, v230, (uint64_t)v231, (v231 - v230) >> 2);
                }
                std::string::operator=(&v203, &__str);
                if (v230)
                {
                  long long v231 = v230;
                  operator delete(v230);
                }
                if (v188)
                {
                  int v189 = v188;
                  operator delete(v188);
                }
                if (v103) {
                  nitro::nitro_function::nitro_function(v103);
                }
                if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v196.__r_.__value_.__l.__data_);
                }
                unint64_t v61 = v92 + 1;
                goto LABEL_383;
              }
            }
            else
            {
              long long v102 = 0;
            }
            size_t v103 = 0;
            goto LABEL_150;
          }
LABEL_89:
          if (v75 != 1) {
            goto LABEL_383;
          }
          *(void *)&v223[12] = 1;
          *(_DWORD *)&v223[4] = 0;
          *(_DWORD *)&v223[20] = 1;
          if (v71)
          {
            *(_DWORD *)v223 = 0;
            *(_DWORD *)&v223[8] = v76;
            uint64_t v79 = *(void *)(*(void *)(*(void *)(v181 + 40) + 32) + 16 * v179[3].i32[2]);
            if (*(char *)(v79 + 39) >= 0) {
              size_t v80 = *(unsigned __int8 *)(v79 + 39);
            }
            else {
              size_t v80 = *(void *)(v79 + 24);
            }
            std::string::basic_string[abi:ne180100]((uint64_t)v220, v80 + 4);
            if (v220[23] >= 0) {
              int v81 = v220;
            }
            else {
              int v81 = *(unsigned char **)v220;
            }
            if (v80)
            {
              if (*(char *)(v79 + 39) >= 0) {
                size_t v82 = (const void *)(v79 + 16);
              }
              else {
                size_t v82 = *(const void **)(v79 + 16);
              }
              memmove(v81, v82, v80);
            }
            strcpy(&v81[v80], "_tmp");
            std::to_string((std::string *)v186, v61);
            if (v186[23] >= 0) {
              __int16 v83 = v186;
            }
            else {
              __int16 v83 = *(const std::string::value_type **)v186;
            }
            if (v186[23] >= 0) {
              std::string::size_type v84 = v186[23];
            }
            else {
              std::string::size_type v84 = *(void *)&v186[8];
            }
            std::string v85 = std::string::append((std::string *)v220, v83, v84);
            long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
            v196.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v196.__r_.__value_.__l.__data_ = v86;
            v85->__r_.__value_.__l.__size_ = 0;
            v85->__r_.__value_.__r.__words[2] = 0;
            v85->__r_.__value_.__r.__words[0] = 0;
            if ((v186[23] & 0x80000000) != 0) {
              operator delete(*(void **)v186);
            }
            if ((v220[23] & 0x80000000) != 0) {
              operator delete(*(void **)v220);
            }
            Espresso::abstract_engine_factory::shared(v228);
            uint64_t v87 = *(void *)v228;
            std::string::basic_string[abi:ne180100]<0>(v220, "slice");
            LODWORD(v191) = (***(uint64_t (****)(void))(v216 + 8))(*(void *)(v216 + 8));
            Espresso::abstract_engine_factory::make_kernel_priv(v87, (uint64_t)&v216, (uint64_t)v220, (uint64_t)v223, (int *)&v191);
            if (*(void *)v186)
            {
              if (v88)
              {
                int v89 = *(std::__shared_weak_count **)&v186[8];
                if (*(void *)&v186[8])
                {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v186[8] + 8), 1uLL, memory_order_relaxed);
LABEL_185:
                  if (*(void *)&v186[8]) {
                    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v186[8]);
                  }
                }
                if ((v220[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v220);
                }
                if (*(void *)&v228[8]) {
                  nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v228[8]);
                }
                BOOL v116 = v62 != v65 || v63 != v180;
                if (v116 || v59)
                {
                  uint64_t v117 = *(void *)(v181 + 40) + 96;
                  unint64_t v118 = v179[3].i32[2];
                  uint64_t v191 = (std::string *)v118;
                  char v119 = (const void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v117, v118, &v191)[3];
                  if (*((char *)v119 + 23) >= 0) {
                    size_t v120 = *((unsigned __int8 *)v119 + 23);
                  }
                  else {
                    size_t v120 = (size_t)v119[1];
                  }
                  std::string::basic_string[abi:ne180100]((uint64_t)v186, v120 + 4);
                  if (v186[23] >= 0) {
                    uint64_t v121 = v186;
                  }
                  else {
                    uint64_t v121 = *(unsigned char **)v186;
                  }
                  if (v120)
                  {
                    if (*((char *)v119 + 23) >= 0) {
                      uint64_t v122 = v119;
                    }
                    else {
                      uint64_t v122 = *v119;
                    }
                    memmove(v121, v122, v120);
                  }
                  strcpy(&v121[v120], "_tmp");
                  unint64_t v123 = v61;
                  std::to_string((std::string *)v228, v61);
                  if (v228[23] >= 0) {
                    std::string v124 = v228;
                  }
                  else {
                    std::string v124 = *(const std::string::value_type **)v228;
                  }
                  if (v228[23] >= 0) {
                    std::string::size_type v125 = v228[23];
                  }
                  else {
                    std::string::size_type v125 = *(void *)&v228[8];
                  }
                  uint64_t v126 = std::string::append((std::string *)v186, v124, v125);
                  uint64_t v91 = v181;
                  long long v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
                  *(void *)&v220[16] = *((void *)&v126->__r_.__value_.__l + 2);
                  *(_OWORD *)int v220 = v127;
                  v126->__r_.__value_.__l.__size_ = 0;
                  v126->__r_.__value_.__r.__words[2] = 0;
                  v126->__r_.__value_.__r.__words[0] = 0;
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__str.__r_.__value_.__l.__data_);
                  }
                  std::string __str = *(std::string *)v220;
                  v220[23] = 0;
                  v220[0] = 0;
                  if ((v228[23] & 0x80000000) != 0) {
                    operator delete(*(void **)v228);
                  }
                  if ((v186[23] & 0x80000000) != 0) {
                    operator delete(*(void **)v186);
                  }
                }
                else
                {
                  unint64_t v123 = v61;
                  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external((std::string *)v220, v201.__r_.__value_.__l.__data_, v201.__r_.__value_.__l.__size_);
                  }
                  else {
                    *(std::string *)int v220 = v201;
                  }
                  uint64_t v91 = v181;
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__str.__r_.__value_.__l.__data_);
                  }
                  std::string __str = *(std::string *)v220;
                }
                int v194 = v88;
                char v195 = v89;
                if (v89) {
                  atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                std::string::basic_string[abi:ne180100]<0>(v220, "slice");
                if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external((std::string *)v228, v203.__r_.__value_.__l.__data_, v203.__r_.__value_.__l.__size_);
                }
                else {
                  *(std::string *)std::string v228 = v203;
                }
                memset(v186, 0, 24);
                uint64_t v191 = (std::string *)v186;
                LOBYTE(v192) = 0;
                *(void *)long long v186 = operator new(0x18uLL);
                *(void *)&v186[8] = *(void *)v186;
                *(void *)&v186[16] = *(void *)v186 + 24;
                *(void *)&v186[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v186[16], (long long *)v228, (long long *)&v228[24], *(std::string **)v186);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&v233, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                }
                else {
                  std::string v233 = __str;
                }
                uint64_t v191 = 0;
                int v192 = 0;
                p_data = 0;
                uint64_t v218 = (std::string *)&v191;
                char v219 = 0;
                uint64_t v191 = (std::string *)operator new(0x18uLL);
                int v192 = v191;
                p_data = (void **)&v191[1].__r_.__value_.__l.__data_;
                int v192 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v233, &v234, v191);
                Espresso::single_match_state<Espresso::ANECompilerEngine::broadcast_kernel>::add_kernel(v179, &v194, (const std::string *)v220, &v196, (std::string **)v186, &v191, v178 != v177);
                uint64_t v218 = (std::string *)&v191;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v218);
                if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v233.__r_.__value_.__l.__data_);
                }
                uint64_t v191 = (std::string *)v186;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v191);
                if ((v228[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v228);
                }
                if ((v220[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v220);
                }
                if (v195) {
                  nitro::nitro_function::nitro_function(v195);
                }
                int v137 = (uint64_t **)(*(void *)(v91 + 40) + 184);
                *(void *)long long v186 = &v203;
                vDSP_Length v138 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v137, &v203, (long long **)v186);
                long long v139 = *(_OWORD *)(v138 + 72);
                *(_OWORD *)int v220 = *(_OWORD *)(v138 + 56);
                *(_OWORD *)&v220[16] = v139;
                uint64_t v140 = (const void *)*((void *)v138 + 12);
                *(void *)&v220[32] = *((void *)v138 + 11);
                long long v221 = 0uLL;
                *(void *)&long long v222 = 0;
                std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v221, v140, *((void *)v138 + 13), (uint64_t)(*((void *)v138 + 13) - (void)v140) >> 2);
                *(_OWORD *)std::string v228 = *(_OWORD *)v220;
                *(_OWORD *)&v228[16] = *(_OWORD *)&v220[16];
                std::string::size_type v229 = *(void *)&v220[32];
                long long v231 = 0;
                uint64_t v232 = 0;
                v230 = 0;
                std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v230, (const void *)v221, *((uint64_t *)&v221 + 1), (uint64_t)(*((void *)&v221 + 1) - v221) >> 2);
                memset(&v233, 0, sizeof(v233));
                uint64_t v218 = &v233;
                char v219 = 0;
                v233.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
                v233.__r_.__value_.__l.__size_ = v233.__r_.__value_.__r.__words[0];
                v233.__r_.__value_.__r.__words[2] = v233.__r_.__value_.__r.__words[0] + 64;
                v233.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v233.__r_.__value_.__r.__words[2], (long long *)v228, (long long *)&v233, (uint64_t)v233.__r_.__value_.__l.__data_);
                (*(void (**)(std::string **__return_ptr, void *, std::string *))(*(void *)v88 + 64))(&v191, v88, &v233);
                std::string::size_type v141 = v191[1].__r_.__value_.__l.__size_;
                long long v142 = *(_OWORD *)&v191->__r_.__value_.__r.__words[2];
                *(_OWORD *)long long v186 = *(_OWORD *)&v191->__r_.__value_.__l.__data_;
                *(_OWORD *)&v186[16] = v142;
                std::string::size_type v187 = v141;
                int v189 = 0;
                uint64_t v190 = 0;
                uint64_t v188 = 0;
                std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v188, (const void *)v191[1].__r_.__value_.__r.__words[2], (uint64_t)v191[2].__r_.__value_.__l.__data_, (uint64_t)(v191[2].__r_.__value_.__r.__words[0] - v191[1].__r_.__value_.__r.__words[2]) >> 2);
                uint64_t v218 = (std::string *)&v191;
                std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v218);
                uint64_t v218 = &v233;
                std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v218);
                if (v230)
                {
                  long long v231 = v230;
                  operator delete(v230);
                }
                std::vector<int> v143 = (uint64_t **)(*(void *)(v91 + 40) + 184);
                *(void *)std::string v228 = &__str;
                long long v144 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v143, &__str, (long long **)v228);
                long long v145 = *(_OWORD *)&v186[16];
                *(_OWORD *)(v144 + 56) = *(_OWORD *)v186;
                *(_OWORD *)(v144 + 72) = v145;
                *((void *)v144 + 11) = v187;
                if (v144 + 56 != v186) {
                  std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v144 + 96, (char *)v188, (uint64_t)v189, (v189 - (unsigned char *)v188) >> 2);
                }
                std::string::operator=(&v203, &__str);
                if (v188)
                {
                  int v189 = v188;
                  operator delete(v188);
                }
                if ((void)v221)
                {
                  *((void *)&v221 + 1) = v221;
                  operator delete((void *)v221);
                }
                if (v89) {
                  nitro::nitro_function::nitro_function(v89);
                }
                if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v196.__r_.__value_.__l.__data_);
                }
                unint64_t v90 = v123 + 1;
                if (!v59) {
                  goto LABEL_382;
                }
LABEL_289:
                *(_DWORD *)v223 = 1;
                *(_DWORD *)&v223[8] = v76;
                uint64_t v146 = *(void *)(*(void *)(*(void *)(v91 + 40) + 32) + 16 * v179[3].i32[2]);
                if (*(char *)(v146 + 39) >= 0) {
                  size_t v147 = *(unsigned __int8 *)(v146 + 39);
                }
                else {
                  size_t v147 = *(void *)(v146 + 24);
                }
                std::string::basic_string[abi:ne180100]((uint64_t)v220, v147 + 4);
                if (v220[23] >= 0) {
                  float v148 = v220;
                }
                else {
                  float v148 = *(unsigned char **)v220;
                }
                if (v147)
                {
                  if (*(char *)(v146 + 39) >= 0) {
                    unint64_t v149 = (const void *)(v146 + 16);
                  }
                  else {
                    unint64_t v149 = *(const void **)(v146 + 16);
                  }
                  memmove(v148, v149, v147);
                }
                strcpy(&v148[v147], "_tmp");
                std::to_string((std::string *)v186, v90);
                if (v186[23] >= 0) {
                  uint64_t v150 = v186;
                }
                else {
                  uint64_t v150 = *(const std::string::value_type **)v186;
                }
                if (v186[23] >= 0) {
                  std::string::size_type v151 = v186[23];
                }
                else {
                  std::string::size_type v151 = *(void *)&v186[8];
                }
                int64x2_t v152 = std::string::append((std::string *)v220, v150, v151);
                long long v153 = *(_OWORD *)&v152->__r_.__value_.__l.__data_;
                v196.__r_.__value_.__r.__words[2] = v152->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v196.__r_.__value_.__l.__data_ = v153;
                v152->__r_.__value_.__l.__size_ = 0;
                v152->__r_.__value_.__r.__words[2] = 0;
                v152->__r_.__value_.__r.__words[0] = 0;
                if ((v186[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v186);
                }
                if ((v220[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v220);
                }
                Espresso::abstract_engine_factory::shared(v228);
                uint64_t v154 = *(void *)v228;
                std::string::basic_string[abi:ne180100]<0>(v220, "slice");
                LODWORD(v191) = (***(uint64_t (****)(void))(v216 + 8))(*(void *)(v216 + 8));
                Espresso::abstract_engine_factory::make_kernel_priv(v154, (uint64_t)&v216, (uint64_t)v220, (uint64_t)v223, (int *)&v191);
                if (*(void *)v186)
                {
                  if (v155)
                  {
                    uint64_t v156 = *(std::__shared_weak_count **)&v186[8];
                    if (*(void *)&v186[8])
                    {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v186[8] + 8), 1uLL, memory_order_relaxed);
LABEL_316:
                      if (*(void *)&v186[8]) {
                        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v186[8]);
                      }
                    }
                    if ((v220[23] & 0x80000000) != 0) {
                      operator delete(*(void **)v220);
                    }
                    if (*(void *)&v228[8]) {
                      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v228[8]);
                    }
                    if (v62 == (v200 - v199) >> 4 && v63 == v180)
                    {
                      if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
                        std::string::__init_copy_ctor_external((std::string *)v220, v201.__r_.__value_.__l.__data_, v201.__r_.__value_.__l.__size_);
                      }
                      else {
                        *(std::string *)int v220 = v201;
                      }
                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__str.__r_.__value_.__l.__data_);
                      }
                      std::string __str = *(std::string *)v220;
                    }
                    else
                    {
                      uint64_t v157 = *(void *)(v91 + 40) + 96;
                      unint64_t v158 = v179[3].i32[2];
                      uint64_t v191 = (std::string *)v158;
                      unsigned long long v159 = (const void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v157, v158, &v191)[3];
                      if (*((char *)v159 + 23) >= 0) {
                        size_t v160 = *((unsigned __int8 *)v159 + 23);
                      }
                      else {
                        size_t v160 = (size_t)v159[1];
                      }
                      std::string::basic_string[abi:ne180100]((uint64_t)v186, v160 + 4);
                      if (v186[23] >= 0) {
                        uint64_t v161 = v186;
                      }
                      else {
                        uint64_t v161 = *(unsigned char **)v186;
                      }
                      if (v160)
                      {
                        if (*((char *)v159 + 23) >= 0) {
                          uint64_t v162 = v159;
                        }
                        else {
                          uint64_t v162 = *v159;
                        }
                        memmove(v161, v162, v160);
                      }
                      strcpy(&v161[v160], "_tmp");
                      std::to_string((std::string *)v228, v90);
                      if (v228[23] >= 0) {
                        uint64_t v163 = v228;
                      }
                      else {
                        uint64_t v163 = *(const std::string::value_type **)v228;
                      }
                      if (v228[23] >= 0) {
                        std::string::size_type v164 = v228[23];
                      }
                      else {
                        std::string::size_type v164 = *(void *)&v228[8];
                      }
                      v165 = std::string::append((std::string *)v186, v163, v164);
                      long long v166 = *(_OWORD *)&v165->__r_.__value_.__l.__data_;
                      *(void *)&v220[16] = *((void *)&v165->__r_.__value_.__l + 2);
                      *(_OWORD *)int v220 = v166;
                      v165->__r_.__value_.__l.__size_ = 0;
                      v165->__r_.__value_.__r.__words[2] = 0;
                      v165->__r_.__value_.__r.__words[0] = 0;
                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__str.__r_.__value_.__l.__data_);
                      }
                      std::string __str = *(std::string *)v220;
                      v220[23] = 0;
                      v220[0] = 0;
                      if ((v228[23] & 0x80000000) != 0) {
                        operator delete(*(void **)v228);
                      }
                      if ((v186[23] & 0x80000000) != 0) {
                        operator delete(*(void **)v186);
                      }
                    }
                    uint64_t v184 = v155;
                    int v185 = v156;
                    if (v156) {
                      atomic_fetch_add_explicit(&v156->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    std::string::basic_string[abi:ne180100]<0>(v220, "slice");
                    if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0) {
                      std::string::__init_copy_ctor_external((std::string *)v228, v203.__r_.__value_.__l.__data_, v203.__r_.__value_.__l.__size_);
                    }
                    else {
                      *(std::string *)std::string v228 = v203;
                    }
                    memset(v186, 0, 24);
                    uint64_t v191 = (std::string *)v186;
                    LOBYTE(v192) = 0;
                    *(void *)long long v186 = operator new(0x18uLL);
                    *(void *)&v186[8] = *(void *)v186;
                    *(void *)&v186[16] = *(void *)v186 + 24;
                    *(void *)&v186[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v186[16], (long long *)v228, (long long *)&v228[24], *(std::string **)v186);
                    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                      std::string::__init_copy_ctor_external(&v233, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                    }
                    else {
                      std::string v233 = __str;
                    }
                    uint64_t v191 = 0;
                    int v192 = 0;
                    p_data = 0;
                    uint64_t v218 = (std::string *)&v191;
                    char v219 = 0;
                    uint64_t v191 = (std::string *)operator new(0x18uLL);
                    int v192 = v191;
                    p_data = (void **)&v191[1].__r_.__value_.__l.__data_;
                    int v192 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v233, &v234, v191);
                    Espresso::single_match_state<Espresso::ANECompilerEngine::broadcast_kernel>::add_kernel(v179, &v184, (const std::string *)v220, &v196, (std::string **)v186, &v191, v178 != v177);
                    uint64_t v218 = (std::string *)&v191;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v218);
                    if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v233.__r_.__value_.__l.__data_);
                    }
                    uint64_t v191 = (std::string *)v186;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v191);
                    if ((v228[23] & 0x80000000) != 0) {
                      operator delete(*(void **)v228);
                    }
                    if ((v220[23] & 0x80000000) != 0) {
                      operator delete(*(void **)v220);
                    }
                    if (v185) {
                      nitro::nitro_function::nitro_function(v185);
                    }
                    unsigned int v167 = (uint64_t **)(*(void *)(v91 + 40) + 184);
                    *(void *)long long v186 = &v203;
                    signed int v168 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v167, &v203, (long long **)v186);
                    long long v169 = *(_OWORD *)(v168 + 72);
                    *(_OWORD *)int v220 = *(_OWORD *)(v168 + 56);
                    *(_OWORD *)&v220[16] = v169;
                    int v170 = (const void *)*((void *)v168 + 12);
                    *(void *)&v220[32] = *((void *)v168 + 11);
                    long long v221 = 0uLL;
                    *(void *)&long long v222 = 0;
                    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v221, v170, *((void *)v168 + 13), (uint64_t)(*((void *)v168 + 13) - (void)v170) >> 2);
                    *(_OWORD *)std::string v228 = *(_OWORD *)v220;
                    *(_OWORD *)&v228[16] = *(_OWORD *)&v220[16];
                    std::string::size_type v229 = *(void *)&v220[32];
                    long long v231 = 0;
                    uint64_t v232 = 0;
                    v230 = 0;
                    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v230, (const void *)v221, *((uint64_t *)&v221 + 1), (uint64_t)(*((void *)&v221 + 1) - v221) >> 2);
                    memset(&v233, 0, sizeof(v233));
                    uint64_t v218 = &v233;
                    char v219 = 0;
                    v233.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
                    v233.__r_.__value_.__l.__size_ = v233.__r_.__value_.__r.__words[0];
                    v233.__r_.__value_.__r.__words[2] = v233.__r_.__value_.__r.__words[0] + 64;
                    v233.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v233.__r_.__value_.__r.__words[2], (long long *)v228, (long long *)&v233, (uint64_t)v233.__r_.__value_.__l.__data_);
                    (*(void (**)(std::string **__return_ptr, void *, std::string *))(*(void *)v155 + 64))(&v191, v155, &v233);
                    std::string::size_type v171 = v191[1].__r_.__value_.__l.__size_;
                    long long v172 = *(_OWORD *)&v191->__r_.__value_.__r.__words[2];
                    *(_OWORD *)long long v186 = *(_OWORD *)&v191->__r_.__value_.__l.__data_;
                    *(_OWORD *)&v186[16] = v172;
                    std::string::size_type v187 = v171;
                    int v189 = 0;
                    uint64_t v190 = 0;
                    uint64_t v188 = 0;
                    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v188, (const void *)v191[1].__r_.__value_.__r.__words[2], (uint64_t)v191[2].__r_.__value_.__l.__data_, (uint64_t)(v191[2].__r_.__value_.__r.__words[0] - v191[1].__r_.__value_.__r.__words[2]) >> 2);
                    uint64_t v218 = (std::string *)&v191;
                    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v218);
                    uint64_t v218 = &v233;
                    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v218);
                    if (v230)
                    {
                      long long v231 = v230;
                      operator delete(v230);
                    }
                    BOOL v173 = (uint64_t **)(*(void *)(v91 + 40) + 184);
                    *(void *)std::string v228 = &__str;
                    std::string v174 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v173, &__str, (long long **)v228);
                    long long v175 = *(_OWORD *)&v186[16];
                    *(_OWORD *)(v174 + 56) = *(_OWORD *)v186;
                    *(_OWORD *)(v174 + 72) = v175;
                    *((void *)v174 + 11) = v187;
                    if (v174 + 56 != v186) {
                      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v174 + 96, (char *)v188, (uint64_t)v189, (v189 - (unsigned char *)v188) >> 2);
                    }
                    std::string::operator=(&v203, &__str);
                    if (v188)
                    {
                      int v189 = v188;
                      operator delete(v188);
                    }
                    if ((void)v221)
                    {
                      *((void *)&v221 + 1) = v221;
                      operator delete((void *)v221);
                    }
                    if (v156) {
                      nitro::nitro_function::nitro_function(v156);
                    }
                    if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v196.__r_.__value_.__l.__data_);
                    }
                    ++v90;
                    goto LABEL_382;
                  }
                }
                else
                {
                  long long v155 = 0;
                }
                uint64_t v156 = 0;
                goto LABEL_316;
              }
            }
            else
            {
              uint64_t v88 = 0;
            }
            int v89 = 0;
            goto LABEL_185;
          }
          unint64_t v90 = v61;
          uint64_t v91 = v181;
          if (v59) {
            goto LABEL_289;
          }
LABEL_382:
          unint64_t v61 = v90;
LABEL_383:
          size_t v56 = v199;
          uint64_t v55 = v200;
          unint64_t v65 = (v200 - v199) >> 4;
          unint64_t v57 = v197;
          long long v58 = v198;
          BOOL v59 = v63 < (v198 - v197) >> 4;
          BOOL v60 = v62 < v65;
          unint64_t v64 = (v198 - v197) >> 4;
          if (v62 >= v65 && v63 >= v64) {
            goto LABEL_385;
          }
        }
        BOOL v59 = 0;
        if (v60) {
          goto LABEL_85;
        }
        goto LABEL_87;
      }
      uint64_t v176 = "Broadcast transform along Seq axis is not supported.";
    }
    else
    {
      uint64_t v176 = "Broadcast transform along Batch axis is not supported.";
    }
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>(v176);
  }
LABEL_395:
  if (v207)
  {
    size_t v208 = v207;
    operator delete(v207);
  }
  if (v213)
  {
    uint64_t v214 = v213;
    operator delete(v213);
  }
  if (v217) {
    nitro::nitro_function::nitro_function(v217);
  }
}

void sub_192945898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&STACK[0x280]);
  if (__p) {
    operator delete(__p);
  }
  if (a54) {
    operator delete(a54);
  }
  if (a62 < 0) {
    operator delete(a57);
  }
  if (a69 < 0) {
    operator delete(a64);
  }
  if (a72 < 0) {
    operator delete(a71);
  }
  size_t v73 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v73;
    operator delete(v73);
  }
  uint64_t v74 = (void *)STACK[0x248];
  if (STACK[0x248])
  {
    STACK[0x250] = (unint64_t)v74;
    operator delete(v74);
  }
  if (STACK[0x268]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x268]);
  }
  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine7context23transform_crop_to_sliceEPNS_3netEPS1__block_invoke(uint64_t a1, int64x2_t *a2)
{
  *(void *)&long long v119 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(void *)(a2->i64[0] + 8) != v3 && v3 != 0) {
    return;
  }
  BOOL v6 = (int *)(*(uint64_t (**)(uint64_t))(*(void *)a2->i64[0] + 320))(a2->i64[0]);
  int v7 = *v6;
  int v8 = v6[1];
  int v10 = v6[2];
  int v9 = v6[3];
  long long v112 = 0u;
  long long v111 = 0u;
  *(_DWORD *)std::vector<int>::pointer v110 = a2[3].i32[2];
  memset(&v110[8], 0, 32);
  unint64_t v11 = a2[2].u64[1];
  if (v11 >= a2[3].i64[0])
  {
    uint64_t v12 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)v110);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a2[2].i64[1], (uint64_t)v110);
    uint64_t v12 = v11 + 72;
    a2[2].i64[1] = v11 + 72;
  }
  a2[2].i64[1] = v12;
  __p[0] = (char *)&v111 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v110[24];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (*(void *)&v110[16]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v110[16]);
  }
  uint64_t v13 = *(void *)(a1 + 40) + 56;
  unint64_t v14 = a2[3].i32[2];
  *(void *)std::vector<int>::pointer v110 = v14;
  unint64_t v15 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v13, v14, v110);
  memset(&v107, 0, sizeof(v107));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v107, v15[3], v15[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15[4] - v15[3]) >> 3));
  uint64_t v16 = *(void *)(a1 + 40);
  *(void *)std::string __str = a2[3].i32[2];
  __p[0] = *((void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v16 + 56, *(unint64_t *)__str, __str)+ 3);
  long long v17 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v16 + 184), (void *)__p[0], (long long **)__p);
  long long v18 = *(_OWORD *)(v17 + 72);
  *(_OWORD *)std::vector<int>::pointer v110 = *(_OWORD *)(v17 + 56);
  *(_OWORD *)&v110[16] = v18;
  uint64_t v19 = (const void *)*((void *)v17 + 12);
  *(void *)&v110[32] = *((void *)v17 + 11);
  long long v111 = 0uLL;
  *(void *)&long long v112 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v111, v19, *((void *)v17 + 13), (uint64_t)(*((void *)v17 + 13) - (void)v19) >> 2);
  uint64_t v20 = *(void *)(a1 + 40) + 96;
  unint64_t v21 = a2[3].i32[2];
  __p[0] = (void *)v21;
  uint64_t v22 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v20, v21, __p)[3];
  if (*((char *)v22 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v106, *(const std::string::value_type **)v22, *((void *)v22 + 1));
  }
  else
  {
    long long v23 = *v22;
    v106.__r_.__value_.__r.__words[2] = *((void *)v22 + 2);
    *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v23;
  }
  int v85 = v7;
  BOOL v25 = v7 > 0 || v8 > 0;
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v105, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
  }
  else {
    std::string v105 = v106;
  }
  if (v10 <= 0 && v9 <= 0 && (v7 | v8 | v10 | v9) != 0) {
    goto LABEL_96;
  }
  if (v25)
  {
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v105.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v105.__r_.__value_.__l.__size_;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 10);
    if ((SBYTE7(v92) & 0x80u) == 0) {
      uint64_t v29 = __p;
    }
    else {
      uint64_t v29 = (void **)__p[0];
    }
    if (size)
    {
      if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v30 = &v105;
      }
      else {
        long long v30 = (std::string *)v105.__r_.__value_.__r.__words[0];
      }
      memmove(v29, v30, size);
    }
    strcpy((char *)v29 + size, "__@slice_y");
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v106.__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&v106.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v106.__r_.__value_.__r.__words[2] = v92;
  }
  uint64_t v31 = *(void *)(*(void *)(*(void *)(a1 + 40) + 32) + 16 * a2[3].i32[2]);
  if (*(char *)(v31 + 39) >= 0) {
    size_t v32 = *(unsigned __int8 *)(v31 + 39);
  }
  else {
    size_t v32 = *(void *)(v31 + 24);
  }
  unint64_t v33 = &v104;
  std::string::basic_string[abi:ne180100]((uint64_t)&v104, v32 + 8);
  if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v33 = (std::string *)v104.__r_.__value_.__r.__words[0];
  }
  if (v32)
  {
    if (*(char *)(v31 + 39) >= 0) {
      long long v34 = (const void *)(v31 + 16);
    }
    else {
      long long v34 = *(const void **)(v31 + 16);
    }
    memmove(v33, v34, v32);
  }
  strcpy((char *)v33 + v32, "_slice_y");
  uint64_t v102 = 1;
  LODWORD(v100) = 1;
  HIDWORD(v100) = v10;
  int v103 = 1;
  int v101 = *(_DWORD *)&v110[4] - v9;
  uint64_t v35 = *(void *)(a1 + 40);
  uint64_t v37 = *(void *)(v35 + 16);
  int v36 = *(std::__shared_weak_count **)(v35 + 24);
  uint64_t v98 = v37;
  std::string v99 = v36;
  if (v36) {
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::abstract_engine_factory::shared(&v118);
  uint64_t v38 = v118.__r_.__value_.__r.__words[0];
  std::string::basic_string[abi:ne180100]<0>(__p, "slice");
  LODWORD(v88) = (***(uint64_t (****)(void))(v98 + 8))(*(void *)(v98 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v38, (uint64_t)&v98, (uint64_t)__p, (uint64_t)&v100, (int *)&v88);
  if (!*(void *)__str)
  {
    uint64_t v39 = 0;
    goto LABEL_62;
  }
  if (!v39)
  {
LABEL_62:
    unint64_t v40 = 0;
    goto LABEL_63;
  }
  unint64_t v40 = *(std::__shared_weak_count **)&__str[8];
  if (*(void *)&__str[8]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&__str[8] + 8), 1uLL, memory_order_relaxed);
  }
LABEL_63:
  if (*(void *)&__str[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&__str[8]);
  }
  if (SBYTE7(v92) < 0) {
    operator delete(__p[0]);
  }
  if (v118.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v118.__r_.__value_.__l.__size_);
  }
  v97[0] = v39;
  v97[1] = v40;
  if (v40) {
    atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "slice");
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v118, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
  }
  else {
    std::string v118 = v106;
  }
  memset(__str, 0, 24);
  uint64_t v88 = (void **)__str;
  LOBYTE(v89) = 0;
  *(void *)std::string __str = operator new(0x18uLL);
  *(void *)&__str[8] = *(void *)__str;
  *(void *)&__str[16] = *(void *)__str + 24;
  *(void *)&__str[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__str[16], (long long *)&v118, &v119, *(std::string **)__str);
  Espresso::single_match_state<Espresso::generic_crop_kernel>::add_kernel(a2, v97, (const std::string *)__p, &v104, &v107.__begin_, (std::string **)__str);
  uint64_t v88 = (void **)__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v88);
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v118.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v92) < 0) {
    operator delete(__p[0]);
  }
  if (v40) {
    nitro::nitro_function::nitro_function(v40);
  }
  *(_OWORD *)std::string __str = *(_OWORD *)v110;
  *(_OWORD *)&__str[16] = *(_OWORD *)&v110[16];
  uint64_t v114 = *(void *)&v110[32];
  int v115 = 0;
  BOOL v116 = 0;
  uint64_t v117 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v115, (const void *)v111, *((uint64_t *)&v111 + 1), (uint64_t)(*((void *)&v111 + 1) - v111) >> 2);
  uint64_t v88 = 0;
  int v89 = 0;
  unint64_t v90 = 0;
  uint64_t v108 = (std::string *)&v88;
  char v109 = 0;
  uint64_t v88 = (void **)operator new(0x40uLL);
  int v89 = v88;
  unint64_t v90 = v88 + 8;
  int v89 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v90, (long long *)__str, (long long *)&v118, (uint64_t)v88);
  (*(void (**)(std::string *__return_ptr, void *, void ***))(*(void *)v39 + 64))(&v118, v39, &v88);
  uint64_t v41 = *(void *)(v118.__r_.__value_.__r.__words[0] + 32);
  long long v42 = *(_OWORD *)(v118.__r_.__value_.__r.__words[0] + 16);
  *(_OWORD *)std::string __p = *(_OWORD *)v118.__r_.__value_.__l.__data_;
  long long v92 = v42;
  uint64_t v93 = v41;
  size_t v94 = 0;
  int v95 = 0;
  uint64_t v96 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v94, *(const void **)(v118.__r_.__value_.__r.__words[0] + 40), *(void *)(v118.__r_.__value_.__r.__words[0] + 48), (uint64_t)(*(void *)(v118.__r_.__value_.__r.__words[0] + 48) - *(void *)(v118.__r_.__value_.__r.__words[0] + 40)) >> 2);
  uint64_t v108 = &v118;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  uint64_t v108 = (std::string *)&v88;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  if (v115)
  {
    BOOL v116 = v115;
    operator delete(v115);
  }
  uint64_t v43 = (uint64_t **)(*(void *)(a1 + 40) + 184);
  *(void *)std::string __str = &v106;
  unint64_t v44 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v43, &v106, (long long **)__str);
  long long v45 = v92;
  *(_OWORD *)(v44 + 56) = *(_OWORD *)__p;
  *(_OWORD *)(v44 + 72) = v45;
  *((void *)v44 + 11) = v93;
  if (v44 + 56 != (char *)__p) {
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v44 + 96, (char *)v94, (uint64_t)v95, (v95 - (unsigned char *)v94) >> 2);
  }
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)__str, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)std::string __str = v106;
  }
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v107, (std::string *)__str, (long long *)&__str[24], 1uLL);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  *(_OWORD *)std::vector<int>::pointer v110 = *(_OWORD *)__p;
  *(_OWORD *)&v110[16] = v92;
  *(void *)&v110[32] = v93;
  std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v111, (char *)v94, (uint64_t)v95, (v95 - (unsigned char *)v94) >> 2);
  uint64_t v46 = *(void *)(a1 + 40) + 96;
  unint64_t v47 = a2[3].i32[2];
  *(void *)std::string __str = v47;
  std::string::size_type v48 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v46, v47, __str);
  std::string::operator=(&v106, (const std::string *)v48[3]);
  if (v94)
  {
    int v95 = v94;
    operator delete(v94);
  }
  if (v40) {
    nitro::nitro_function::nitro_function(v40);
  }
  if (v99) {
    nitro::nitro_function::nitro_function(v99);
  }
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v104.__r_.__value_.__l.__data_);
    if (!v25) {
      goto LABEL_215;
    }
    goto LABEL_97;
  }
LABEL_96:
  if (!v25) {
    goto LABEL_215;
  }
LABEL_97:
  if (v8 < 1) {
    goto LABEL_167;
  }
  uint64_t v49 = *(void *)(*(void *)(*(void *)(a1 + 40) + 32) + 16 * a2[3].i32[2]);
  if (*(char *)(v49 + 39) >= 0) {
    size_t v50 = *(unsigned __int8 *)(v49 + 39);
  }
  else {
    size_t v50 = *(void *)(v49 + 24);
  }
  unint64_t v51 = &v104;
  std::string::basic_string[abi:ne180100]((uint64_t)&v104, v50 + 14);
  if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v51 = (std::string *)v104.__r_.__value_.__r.__words[0];
  }
  if (v50)
  {
    if (*(char *)(v49 + 39) >= 0) {
      uint64_t v52 = (const void *)(v49 + 16);
    }
    else {
      uint64_t v52 = *(const void **)(v49 + 16);
    }
    memmove(v51, v52, v50);
  }
  strcpy((char *)v51 + v50, "_slice_x_right");
  if (v85 >= 1)
  {
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v53 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v53 = v105.__r_.__value_.__l.__size_;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v53 + 16);
    if ((SBYTE7(v92) & 0x80u) == 0) {
      uint64_t v54 = __p;
    }
    else {
      uint64_t v54 = (void **)__p[0];
    }
    if (v53)
    {
      if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v55 = &v105;
      }
      else {
        uint64_t v55 = (std::string *)v105.__r_.__value_.__r.__words[0];
      }
      memmove(v54, v55, v53);
    }
    strcpy((char *)v54 + v53, "__@slice_x_right");
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v106.__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&v106.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v106.__r_.__value_.__r.__words[2] = v92;
  }
  uint64_t v102 = 1;
  int v103 = 1;
  int v101 = *(_DWORD *)v110 - v8;
  uint64_t v56 = *(void *)(a1 + 40);
  uint64_t v58 = *(void *)(v56 + 16);
  unint64_t v57 = *(std::__shared_weak_count **)(v56 + 24);
  uint64_t v98 = v58;
  std::string v99 = v57;
  uint64_t v100 = 0;
  if (v57) {
    atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::abstract_engine_factory::shared(&v118);
  uint64_t v59 = v118.__r_.__value_.__r.__words[0];
  std::string::basic_string[abi:ne180100]<0>(__p, "slice");
  LODWORD(v88) = (***(uint64_t (****)(void))(v98 + 8))(*(void *)(v98 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v59, (uint64_t)&v98, (uint64_t)__p, (uint64_t)&v100, (int *)&v88);
  if (*(void *)__str)
  {
    if (v60)
    {
      unint64_t v61 = *(std::__shared_weak_count **)&__str[8];
      if (*(void *)&__str[8]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&__str[8] + 8), 1uLL, memory_order_relaxed);
      }
      goto LABEL_133;
    }
  }
  else
  {
    BOOL v60 = 0;
  }
  unint64_t v61 = 0;
LABEL_133:
  if (*(void *)&__str[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&__str[8]);
  }
  if (SBYTE7(v92) < 0) {
    operator delete(__p[0]);
  }
  if (v118.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v118.__r_.__value_.__l.__size_);
  }
  v87[0] = v60;
  v87[1] = v61;
  if (v61) {
    atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "slice");
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v118, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
  }
  else {
    std::string v118 = v106;
  }
  memset(__str, 0, 24);
  uint64_t v88 = (void **)__str;
  LOBYTE(v89) = 0;
  *(void *)std::string __str = operator new(0x18uLL);
  *(void *)&__str[8] = *(void *)__str;
  *(void *)&__str[16] = *(void *)__str + 24;
  *(void *)&__str[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__str[16], (long long *)&v118, &v119, *(std::string **)__str);
  Espresso::single_match_state<Espresso::generic_crop_kernel>::add_kernel(a2, v87, (const std::string *)__p, &v104, &v107.__begin_, (std::string **)__str);
  uint64_t v88 = (void **)__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v88);
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v118.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v92) < 0) {
    operator delete(__p[0]);
  }
  if (v61) {
    nitro::nitro_function::nitro_function(v61);
  }
  *(_OWORD *)std::string __str = *(_OWORD *)v110;
  *(_OWORD *)&__str[16] = *(_OWORD *)&v110[16];
  uint64_t v114 = *(void *)&v110[32];
  int v115 = 0;
  BOOL v116 = 0;
  uint64_t v117 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v115, (const void *)v111, *((uint64_t *)&v111 + 1), (uint64_t)(*((void *)&v111 + 1) - v111) >> 2);
  uint64_t v88 = 0;
  int v89 = 0;
  unint64_t v90 = 0;
  uint64_t v108 = (std::string *)&v88;
  char v109 = 0;
  uint64_t v88 = (void **)operator new(0x40uLL);
  int v89 = v88;
  unint64_t v90 = v88 + 8;
  int v89 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v90, (long long *)__str, (long long *)&v118, (uint64_t)v88);
  (*(void (**)(std::string *__return_ptr, void *, void ***))(*(void *)v60 + 64))(&v118, v60, &v88);
  uint64_t v62 = *(void *)(v118.__r_.__value_.__r.__words[0] + 32);
  long long v63 = *(_OWORD *)(v118.__r_.__value_.__r.__words[0] + 16);
  *(_OWORD *)std::string __p = *(_OWORD *)v118.__r_.__value_.__l.__data_;
  long long v92 = v63;
  uint64_t v93 = v62;
  size_t v94 = 0;
  int v95 = 0;
  uint64_t v96 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v94, *(const void **)(v118.__r_.__value_.__r.__words[0] + 40), *(void *)(v118.__r_.__value_.__r.__words[0] + 48), (uint64_t)(*(void *)(v118.__r_.__value_.__r.__words[0] + 48) - *(void *)(v118.__r_.__value_.__r.__words[0] + 40)) >> 2);
  uint64_t v108 = &v118;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  uint64_t v108 = (std::string *)&v88;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  if (v115)
  {
    BOOL v116 = v115;
    operator delete(v115);
  }
  unint64_t v64 = (uint64_t **)(*(void *)(a1 + 40) + 184);
  *(void *)std::string __str = &v106;
  unint64_t v65 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v64, &v106, (long long **)__str);
  long long v66 = v92;
  *(_OWORD *)(v65 + 56) = *(_OWORD *)__p;
  *(_OWORD *)(v65 + 72) = v66;
  *((void *)v65 + 11) = v93;
  if (v65 + 56 != (char *)__p) {
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v65 + 96, (char *)v94, (uint64_t)v95, (v95 - (unsigned char *)v94) >> 2);
  }
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)__str, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)std::string __str = v106;
  }
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v107, (std::string *)__str, (long long *)&__str[24], 1uLL);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  *(_OWORD *)std::vector<int>::pointer v110 = *(_OWORD *)__p;
  *(_OWORD *)&v110[16] = v92;
  *(void *)&v110[32] = v93;
  std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&v111, (char *)v94, (uint64_t)v95, (v95 - (unsigned char *)v94) >> 2);
  uint64_t v67 = *(void *)(a1 + 40) + 96;
  unint64_t v68 = a2[3].i32[2];
  *(void *)std::string __str = v68;
  uint64_t v69 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v67, v68, __str);
  std::string::operator=(&v106, (const std::string *)v69[3]);
  if (v94)
  {
    int v95 = v94;
    operator delete(v94);
  }
  if (v61) {
    nitro::nitro_function::nitro_function(v61);
  }
  if (v99) {
    nitro::nitro_function::nitro_function(v99);
  }
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }
LABEL_167:
  if (v85 >= 1)
  {
    uint64_t v70 = *(void *)(*(void *)(*(void *)(a1 + 40) + 32) + 16 * a2[3].i32[2]);
    if (*(char *)(v70 + 39) >= 0) {
      size_t v71 = *(unsigned __int8 *)(v70 + 39);
    }
    else {
      size_t v71 = *(void *)(v70 + 24);
    }
    uint64_t v72 = &v104;
    std::string::basic_string[abi:ne180100]((uint64_t)&v104, v71 + 13);
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v72 = (std::string *)v104.__r_.__value_.__r.__words[0];
    }
    if (v71)
    {
      if (*(char *)(v70 + 39) >= 0) {
        size_t v73 = (const void *)(v70 + 16);
      }
      else {
        size_t v73 = *(const void **)(v70 + 16);
      }
      memmove(v72, v73, v71);
    }
    strcpy((char *)v72 + v71, "_slice_x_left");
    uint64_t v102 = 1;
    LODWORD(v100) = 0;
    HIDWORD(v100) = v85;
    int v103 = 1;
    int v101 = *(_DWORD *)v110;
    uint64_t v74 = *(void *)(a1 + 40);
    uint64_t v76 = *(void *)(v74 + 16);
    int v75 = *(std::__shared_weak_count **)(v74 + 24);
    uint64_t v98 = v76;
    std::string v99 = v75;
    if (v75) {
      atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::abstract_engine_factory::shared(&v118);
    uint64_t v77 = v118.__r_.__value_.__r.__words[0];
    std::string::basic_string[abi:ne180100]<0>(__p, "slice");
    LODWORD(v88) = (***(uint64_t (****)(void))(v98 + 8))(*(void *)(v98 + 8));
    Espresso::abstract_engine_factory::make_kernel_priv(v77, (uint64_t)&v98, (uint64_t)__p, (uint64_t)&v100, (int *)&v88);
    if (*(void *)__str)
    {
      if (v78)
      {
        uint64_t v79 = *(std::__shared_weak_count **)&__str[8];
        if (*(void *)&__str[8]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&__str[8] + 8), 1uLL, memory_order_relaxed);
        }
        goto LABEL_186;
      }
    }
    else
    {
      __int16 v78 = 0;
    }
    uint64_t v79 = 0;
LABEL_186:
    if (*(void *)&__str[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&__str[8]);
    }
    if (SBYTE7(v92) < 0) {
      operator delete(__p[0]);
    }
    if (v118.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v118.__r_.__value_.__l.__size_);
    }
    v86[0] = v78;
    v86[1] = v79;
    if (v79) {
      atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "slice");
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v118, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
    }
    else {
      std::string v118 = v106;
    }
    memset(__str, 0, 24);
    uint64_t v88 = (void **)__str;
    LOBYTE(v89) = 0;
    *(void *)std::string __str = operator new(0x18uLL);
    *(void *)&__str[8] = *(void *)__str;
    *(void *)&__str[16] = *(void *)__str + 24;
    *(void *)&__str[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__str[16], (long long *)&v118, &v119, *(std::string **)__str);
    Espresso::single_match_state<Espresso::generic_crop_kernel>::add_kernel(a2, v86, (const std::string *)__p, &v104, &v107.__begin_, (std::string **)__str);
    uint64_t v88 = (void **)__str;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v88);
    if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v118.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v92) < 0) {
      operator delete(__p[0]);
    }
    if (v79) {
      nitro::nitro_function::nitro_function(v79);
    }
    *(_OWORD *)std::string __str = *(_OWORD *)v110;
    *(_OWORD *)&__str[16] = *(_OWORD *)&v110[16];
    uint64_t v114 = *(void *)&v110[32];
    int v115 = 0;
    BOOL v116 = 0;
    uint64_t v117 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v115, (const void *)v111, *((uint64_t *)&v111 + 1), (uint64_t)(*((void *)&v111 + 1) - v111) >> 2);
    uint64_t v88 = 0;
    int v89 = 0;
    unint64_t v90 = 0;
    uint64_t v108 = (std::string *)&v88;
    char v109 = 0;
    uint64_t v88 = (void **)operator new(0x40uLL);
    int v89 = v88;
    unint64_t v90 = v88 + 8;
    int v89 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v90, (long long *)__str, (long long *)&v118, (uint64_t)v88);
    (*(void (**)(std::string *__return_ptr, void *, void ***))(*(void *)v78 + 64))(&v118, v78, &v88);
    uint64_t v80 = *(void *)(v118.__r_.__value_.__r.__words[0] + 32);
    long long v81 = *(_OWORD *)(v118.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)std::string __p = *(_OWORD *)v118.__r_.__value_.__l.__data_;
    long long v92 = v81;
    uint64_t v93 = v80;
    size_t v94 = 0;
    int v95 = 0;
    uint64_t v96 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v94, *(const void **)(v118.__r_.__value_.__r.__words[0] + 40), *(void *)(v118.__r_.__value_.__r.__words[0] + 48), (uint64_t)(*(void *)(v118.__r_.__value_.__r.__words[0] + 48) - *(void *)(v118.__r_.__value_.__r.__words[0] + 40)) >> 2);
    uint64_t v108 = &v118;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
    uint64_t v108 = (std::string *)&v88;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
    if (v115)
    {
      BOOL v116 = v115;
      operator delete(v115);
    }
    size_t v82 = (uint64_t **)(*(void *)(a1 + 40) + 184);
    *(void *)std::string __str = &v106;
    __int16 v83 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v82, &v106, (long long **)__str);
    long long v84 = v92;
    *(_OWORD *)(v83 + 56) = *(_OWORD *)__p;
    *(_OWORD *)(v83 + 72) = v84;
    *((void *)v83 + 11) = v93;
    if (v83 + 56 != (char *)__p) {
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v83 + 96, (char *)v94, (uint64_t)v95, (v95 - (unsigned char *)v94) >> 2);
    }
    if (v94)
    {
      int v95 = v94;
      operator delete(v94);
    }
    if (v79) {
      nitro::nitro_function::nitro_function(v79);
    }
    if (v99) {
      nitro::nitro_function::nitro_function(v99);
    }
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v104.__r_.__value_.__l.__data_);
    }
  }
LABEL_215:
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v105.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v106.__r_.__value_.__l.__data_);
  }
  if ((void)v111)
  {
    *((void *)&v111 + 1) = v111;
    operator delete((void *)v111);
  }
  *(void *)std::vector<int>::pointer v110 = &v107;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v110);
}

void sub_192947060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (v67)
  {
    nitro::nitro_function::nitro_function(v67);
    nitro::nitro_function::nitro_function(v67);
  }
  if (a33) {
    nitro::nitro_function::nitro_function(a33);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  if (a66)
  {
    a67 = (uint64_t)a66;
    operator delete(a66);
  }
  a61 = (uint64_t)&a56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a61);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine7context32handle_quantized_activation_lutsEPNS_3netEPS1__block_invoke(uint64_t a1, int64x2_t *a2)
{
  *(void *)&long long v85 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(void *)(a2->i64[0] + 8) == v3 || v3 == 0)
  {
    int v6 = *(_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)a2->i64[0] + 384))(a2->i64[0]);
    uint64_t v7 = *(void *)(a1 + 40) + 96;
    unint64_t v8 = a2[3].i32[2];
    __p[0] = (void *)v8;
    int v9 = (void *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v7, v8, __p)[3];
    uint64_t v10 = *(void *)(a1 + 40) + 56;
    unint64_t v11 = a2[3].i32[2];
    __p[0] = (void *)v11;
    uint64_t v12 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v10, v11, __p)[3];
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v74, *(const std::string::value_type **)v12, *((void *)v12 + 1));
    }
    else
    {
      long long v13 = *v12;
      v74.__r_.__value_.__r.__words[2] = *((void *)v12 + 2);
      *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v13;
    }
    if ((v6 & 0xFFFFFFFD) != 1)
    {
LABEL_90:
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v74.__r_.__value_.__l.__data_);
      }
      return;
    }
    unint64_t v14 = (uint64_t **)(*(void *)(a1 + 40) + 352);
    __p[0] = v9;
    unint64_t v15 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, v9, (uint64_t)&std::piecewise_construct, (long long **)__p);
    uint64_t v16 = (uint64_t **)(*(void *)(a1 + 40) + 352);
    __p[0] = &v74;
    long long v17 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v16, &v74, (uint64_t)&std::piecewise_construct, (long long **)__p);
    int v18 = *((_DWORD *)v17 + 16);
    float v19 = *((float *)v17 + 14);
    int v20 = *((_DWORD *)v15 + 16);
    int v21 = *((_DWORD *)v15 + 14);
    uint64_t v22 = *(void *)(*(void *)(*(void *)(a1 + 40) + 32) + 16 * a2[3].i32[2]);
    long long v23 = *(const void **)(v22 + 64);
    uint64_t v24 = *(std::__shared_weak_count **)(v22 + 72);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v23)
    {
      uint64_t v26 = v25;
      uint64_t v27 = 0;
      if (v24 && v25)
      {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v27 = v24;
      }
    }
    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = 0;
    }
    if (v18 != 2 && v18 != 4 && v20 != 2 && v20 != 4)
    {
LABEL_86:
      if (v27) {
        nitro::nitro_function::nitro_function(v27);
      }
      if (v24) {
        nitro::nitro_function::nitro_function(v24);
      }
      goto LABEL_90;
    }
    if (v20 == 4 || v20 == 2) {
      *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v26 + 104))(v26) + 48) = v21;
    }
    if (v18 != 4 && v18 != 2)
    {
      uint64_t v37 = (*(uint64_t (**)(void *))(*(void *)v26 + 104))(v26);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v37, (uint64_t)&v74, (uint64_t)&v74);
LABEL_85:
      *(unsigned char *)((*(uint64_t (**)(void *))(*(void *)v26 + 104))(v26) + 42) = 1;
      *(unsigned char *)((*(uint64_t (**)(void *))(*(void *)v26 + 104))(v26) + 40) = 1;
      goto LABEL_86;
    }
    uint64_t v69 = 0x358637BD00000000;
    int v70 = 0;
    char v71 = 0;
    int v72 = 0;
    int v73 = 0;
    uint64_t v67 = 1;
    float v68 = 1.0 / v19;
    uint64_t v28 = a2[1].i64[0];
    if (*(char *)(v28 + 39) >= 0) {
      size_t v29 = *(unsigned __int8 *)(v28 + 39);
    }
    else {
      size_t v29 = *(void *)(v28 + 24);
    }
    long long v30 = &v66;
    std::string::basic_string[abi:ne180100]((uint64_t)&v66, v29 + 27);
    if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v30 = (std::string *)v66.__r_.__value_.__r.__words[0];
    }
    if (v29)
    {
      if (*(char *)(v28 + 39) >= 0) {
        uint64_t v31 = (const void *)(v28 + 16);
      }
      else {
        uint64_t v31 = *(const void **)(v28 + 16);
      }
      memmove(v30, v31, v29);
    }
    strcpy((char *)v30 + v29, "__prescale_quantization_goc");
    uint64_t v32 = *(void *)(a1 + 40);
    int v33 = (***(uint64_t (****)(void))(*(void *)(v32 + 16) + 8))();
    int v64 = *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 32) + 16 * a2[3].i32[2]) + 12);
    int v65 = v33;
    Espresso::abstract_engine_factory::shared(&v84);
    uint64_t v34 = v84.__r_.__value_.__r.__words[0];
    std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
    Espresso::abstract_engine_factory::make_kernel_priv(v34, v32 + 16, (uint64_t)__p, (uint64_t)&v67, &v65);
    if (*(void *)__str)
    {
      if (v35)
      {
        int v36 = *(std::__shared_weak_count **)&__str[8];
        if (*(void *)&__str[8]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&__str[8] + 8), 1uLL, memory_order_relaxed);
        }
        goto LABEL_43;
      }
    }
    else
    {
      uint64_t v35 = 0;
    }
    int v36 = 0;
LABEL_43:
    if (*(void *)&__str[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&__str[8]);
    }
    if (SBYTE7(v55) < 0) {
      operator delete(__p[0]);
    }
    if (v84.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v84.__r_.__value_.__l.__size_);
    }
    v63[0] = v35;
    v63[1] = v36;
    if (v36) {
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v84, v74.__r_.__value_.__l.__data_, v74.__r_.__value_.__l.__size_);
    }
    else {
      std::string v84 = v74;
    }
    memset(__str, 0, 24);
    BOOL v60 = (std::string *)__str;
    LOBYTE(p_data) = 0;
    *(void *)std::string __str = operator new(0x18uLL);
    *(void *)&__str[8] = *(void *)__str;
    *(void *)&__str[16] = *(void *)__str + 24;
    *(void *)&__str[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__str[16], (long long *)&v84, &v85, *(std::string **)__str);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v82, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
    }
    else {
      std::string v82 = v66;
    }
    BOOL v60 = 0;
    p_data = 0;
    uint64_t v62 = 0;
    int v75 = (void ***)&v60;
    char v76 = 0;
    BOOL v60 = (std::string *)operator new(0x18uLL);
    p_data = (void **)&v60->__r_.__value_.__l.__data_;
    uint64_t v62 = (void **)&v60[1].__r_.__value_.__l.__data_;
    p_data = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v62, (long long *)&v82, (long long *)&v83, v60);
    Espresso::single_match_state<Espresso::generic_activation_kernel>::add_kernel(a2, v63, (const std::string *)__p, &v66, (std::string **)__str, &v60, 1);
    int v75 = (void ***)&v60;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v82.__r_.__value_.__l.__data_);
    }
    BOOL v60 = (std::string *)__str;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v84.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v55) < 0) {
      operator delete(__p[0]);
    }
    if (v36) {
      nitro::nitro_function::nitro_function(v36);
    }
    uint64_t v38 = (uint64_t **)(*(void *)(a1 + 40) + 184);
    v82.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74;
    uint64_t v39 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v38, &v74, (long long **)&v82);
    long long v40 = *(_OWORD *)(v39 + 72);
    *(_OWORD *)std::string __str = *(_OWORD *)(v39 + 56);
    *(_OWORD *)&__str[16] = v40;
    uint64_t v41 = (const void *)*((void *)v39 + 12);
    uint64_t v78 = *((void *)v39 + 11);
    uint64_t v79 = 0;
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v79, v41, *((void *)v39 + 13), (uint64_t)(*((void *)v39 + 13) - (void)v41) >> 2);
    BOOL v60 = 0;
    p_data = 0;
    uint64_t v62 = 0;
    v82.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60;
    v82.__r_.__value_.__s.__data_[8] = 0;
    BOOL v60 = (std::string *)operator new(0x40uLL);
    p_data = (void **)&v60->__r_.__value_.__l.__data_;
    uint64_t v62 = (void **)&v60[2].__r_.__value_.__r.__words[2];
    p_data = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v62, (long long *)__str, (long long *)&v82, (uint64_t)v60);
    (*(void (**)(std::string *__return_ptr, void *, std::string **))(*(void *)v35 + 64))(&v84, v35, &v60);
    uint64_t v42 = *(void *)(v84.__r_.__value_.__r.__words[0] + 32);
    long long v43 = *(_OWORD *)(v84.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)std::string __p = *(_OWORD *)v84.__r_.__value_.__l.__data_;
    long long v55 = v43;
    uint64_t v56 = v42;
    unint64_t v57 = 0;
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v57, *(const void **)(v84.__r_.__value_.__r.__words[0] + 40), *(void *)(v84.__r_.__value_.__r.__words[0] + 48), (uint64_t)(*(void *)(v84.__r_.__value_.__r.__words[0] + 48) - *(void *)(v84.__r_.__value_.__r.__words[0] + 40)) >> 2);
    v82.__r_.__value_.__r.__words[0] = (std::string::size_type)&v84;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
    v82.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
    if (v79)
    {
      uint64_t v80 = v79;
      operator delete(v79);
    }
    unint64_t v44 = (uint64_t **)(*(void *)(a1 + 40) + 184);
    *(void *)std::string __str = &v66;
    long long v45 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v44, &v66, (long long **)__str);
    long long v46 = v55;
    *(_OWORD *)(v45 + 56) = *(_OWORD *)__p;
    *(_OWORD *)(v45 + 72) = v46;
    *((void *)v45 + 11) = v56;
    if (v45 + 56 != (char *)__p) {
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v45 + 96, (char *)v57, (uint64_t)v58, (v58 - (unsigned char *)v57) >> 2);
    }
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external((std::string *)__str, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
    }
    else {
      *(std::string *)std::string __str = v66;
    }
    uint64_t v47 = *(void *)(a1 + 40) + 56;
    unint64_t v48 = a2[3].i32[2];
    v84.__r_.__value_.__r.__words[0] = v48;
    uint64_t v49 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v47, v48, &v84);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(v49 + 1, (std::string *)__str, (long long *)&__str[24], 1uLL);
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
    unint64_t v51 = 0;
    if (v36 && v50)
    {
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v51 = v36;
    }
    uint64_t v52 = (*(uint64_t (**)(void *))(*(void *)v50 + 104))(v50);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v52, (uint64_t)&v74, (uint64_t)&v74);
    uint64_t v53 = (*(uint64_t (**)(void *))(*(void *)v26 + 104))(v26);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v53, (uint64_t)&v66, (uint64_t)&v66);
    if (v51) {
      nitro::nitro_function::nitro_function(v51);
    }
    if (v57)
    {
      uint64_t v58 = v57;
      operator delete(v57);
    }
    if (v36) {
      nitro::nitro_function::nitro_function(v36);
    }
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
    goto LABEL_85;
  }
}

void sub_192947D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46)
{
  if (__p) {
    operator delete(__p);
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  if (a31 < 0)
  {
    operator delete(a26);
    if (v47) {
      goto LABEL_7;
    }
  }
  else if (v47)
  {
LABEL_7:
    nitro::nitro_function::nitro_function(v47);
    if (!v46)
    {
LABEL_12:
      if (a44 < 0) {
        operator delete(a39);
      }
      _Unwind_Resume(a1);
    }
LABEL_11:
    nitro::nitro_function::nitro_function(v46);
    goto LABEL_12;
  }
  if (!v46) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

void Espresso::single_match_state<Espresso::generic_convolution_kernel>::add_kernel(int64x2_t *a1, void *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6, int a7)
{
  int v25 = 0;
  memset(v28, 0, sizeof(v28));
  unint64_t v14 = (char *)operator new(0xF8uLL);
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 2) = 0;
  *(void *)unint64_t v14 = &unk_1EE389DF0;
  *((void *)v14 + 3) = &unk_1EE36C758;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 136) = 0u;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 161) = 0u;
  *((_OWORD *)v14 + 13) = 0u;
  *((_OWORD *)v14 + 14) = 0u;
  *((void *)v14 + 30) = 0;
  uint64_t v26 = v14 + 24;
  uint64_t v27 = (std::__shared_weak_count *)v14;
  uint64_t v15 = *a2;
  uint64_t v16 = a2[1];
  if (v16)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    long long v17 = (std::__shared_weak_count *)*((void *)v14 + 12);
    *((void *)v14 + 11) = v15;
    *((void *)v14 + 12) = v16;
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
  }
  else
  {
    *((void *)v14 + 11) = v15;
    *((void *)v14 + 12) = 0;
  }
  std::string::operator=((std::string *)(v26 + 16), a4);
  std::string::operator=((std::string *)(v26 + 40), a3);
  int v18 = *(uint64_t (****)(void))(*(void *)(*a2 + 8) + 8);
  float v19 = v26;
  *((_DWORD *)v26 + 2) = (**v18)(v18);
  uint64_t v20 = a1[1].i64[0];
  if (v20)
  {
    *((_DWORD *)v19 + 3) = *(_DWORD *)(v20 + 12);
    if (*(char *)(v20 + 223) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v20 + 200), *(void *)(v20 + 208));
    }
    else {
      std::string __p = *(std::string *)(v20 + 200);
    }
    std::string::operator=((std::string *)(v19 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v21 = *(void *)(a1[4].i64[0] + 32);
    if (*(void *)(a1[4].i64[0] + 40) != v21) {
      *((_DWORD *)v19 + 3) = *(_DWORD *)(*(void *)v21 + 12);
    }
  }
  if (v28 != (_OWORD *)a5) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v28, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  }
  if ((std::string **)((char *)&v28[1] + 8) != a6) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v28[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  }
  int v25 = a1[3].i32[2] - a7;
  unint64_t v22 = a1[2].u64[1];
  if (v22 >= a1[3].i64[0])
  {
    uint64_t v23 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v25);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v25);
    uint64_t v23 = v22 + 72;
    a1[2].i64[1] = v22 + 72;
  }
  a1[2].i64[1] = v23;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
}

void sub_192948188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void Espresso::single_match_state<Espresso::generic_activation_kernel>::add_kernel(int64x2_t *a1, void *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6, int a7)
{
  int v25 = 0;
  memset(v28, 0, sizeof(v28));
  unint64_t v14 = (char *)operator new(0xF8uLL);
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 2) = 0;
  *(void *)unint64_t v14 = &unk_1EE389DF0;
  *((void *)v14 + 3) = &unk_1EE36C758;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 136) = 0u;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 161) = 0u;
  *((_OWORD *)v14 + 13) = 0u;
  *((_OWORD *)v14 + 14) = 0u;
  *((void *)v14 + 30) = 0;
  uint64_t v26 = v14 + 24;
  uint64_t v27 = (std::__shared_weak_count *)v14;
  uint64_t v15 = *a2;
  uint64_t v16 = a2[1];
  if (v16)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    long long v17 = (std::__shared_weak_count *)*((void *)v14 + 12);
    *((void *)v14 + 11) = v15;
    *((void *)v14 + 12) = v16;
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
  }
  else
  {
    *((void *)v14 + 11) = v15;
    *((void *)v14 + 12) = 0;
  }
  std::string::operator=((std::string *)(v26 + 16), a4);
  std::string::operator=((std::string *)(v26 + 40), a3);
  int v18 = *(uint64_t (****)(void))(*(void *)(*a2 + 8) + 8);
  float v19 = v26;
  *((_DWORD *)v26 + 2) = (**v18)(v18);
  uint64_t v20 = a1[1].i64[0];
  if (v20)
  {
    *((_DWORD *)v19 + 3) = *(_DWORD *)(v20 + 12);
    if (*(char *)(v20 + 223) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v20 + 200), *(void *)(v20 + 208));
    }
    else {
      std::string __p = *(std::string *)(v20 + 200);
    }
    std::string::operator=((std::string *)(v19 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v21 = *(void *)(a1[4].i64[0] + 32);
    if (*(void *)(a1[4].i64[0] + 40) != v21) {
      *((_DWORD *)v19 + 3) = *(_DWORD *)(*(void *)v21 + 12);
    }
  }
  if (v28 != (_OWORD *)a5) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v28, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  }
  if ((std::string **)((char *)&v28[1] + 8) != a6) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v28[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  }
  int v25 = a1[3].i32[2] - a7;
  unint64_t v22 = a1[2].u64[1];
  if (v22 >= a1[3].i64[0])
  {
    uint64_t v23 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v25);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v25);
    uint64_t v23 = v22 + 72;
    a1[2].i64[1] = v22 + 72;
  }
  a1[2].i64[1] = v23;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
}

void sub_192948468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void Espresso::single_match_state<Espresso::generic_pool_kernel>::remove_layer(int64x2_t *a1)
{
  memset(v7, 0, sizeof(v7));
  __int32 v4 = a1[3].i32[2];
  uint64_t v5 = 0;
  int v6 = 0;
  unint64_t v2 = a1[2].u64[1];
  if (v2 >= a1[3].i64[0])
  {
    uint64_t v3 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v4);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v4);
    uint64_t v3 = v2 + 72;
    a1[2].i64[1] = v2 + 72;
  }
  a1[2].i64[1] = v3;
  unint64_t v8 = (void **)&v7[1] + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  unint64_t v8 = (void **)v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
}

void sub_19294855C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void Espresso::single_match_state<Espresso::generic_pool_kernel>::add_kernel(int64x2_t *a1, void *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6)
{
  __int32 v23 = 0;
  memset(v26, 0, sizeof(v26));
  uint64_t v12 = (char *)operator new(0xF8uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)uint64_t v12 = &unk_1EE389DF0;
  *((void *)v12 + 3) = &unk_1EE36C758;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 161) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((void *)v12 + 30) = 0;
  uint64_t v24 = v12 + 24;
  int v25 = (std::__shared_weak_count *)v12;
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  if (v14)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    uint64_t v15 = (std::__shared_weak_count *)*((void *)v12 + 12);
    *((void *)v12 + 11) = v13;
    *((void *)v12 + 12) = v14;
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
  }
  else
  {
    *((void *)v12 + 11) = v13;
    *((void *)v12 + 12) = 0;
  }
  std::string::operator=((std::string *)(v24 + 16), a4);
  std::string::operator=((std::string *)(v24 + 40), a3);
  uint64_t v16 = *(uint64_t (****)(void))(*(void *)(*a2 + 8) + 8);
  long long v17 = v24;
  *((_DWORD *)v24 + 2) = (**v16)(v16);
  uint64_t v18 = a1[1].i64[0];
  if (v18)
  {
    *((_DWORD *)v17 + 3) = *(_DWORD *)(v18 + 12);
    if (*(char *)(v18 + 223) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v18 + 200), *(void *)(v18 + 208));
    }
    else {
      std::string __p = *(std::string *)(v18 + 200);
    }
    std::string::operator=((std::string *)(v17 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v19 = *(void *)(a1[4].i64[0] + 32);
    if (*(void *)(a1[4].i64[0] + 40) != v19) {
      *((_DWORD *)v17 + 3) = *(_DWORD *)(*(void *)v19 + 12);
    }
  }
  if (v26 != (_OWORD *)a5) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v26, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  }
  if ((std::string **)((char *)&v26[1] + 8) != a6) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v26[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  }
  __int32 v23 = a1[3].i32[2];
  unint64_t v20 = a1[2].u64[1];
  if (v20 >= a1[3].i64[0])
  {
    uint64_t v21 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v23);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v23);
    uint64_t v21 = v20 + 72;
    a1[2].i64[1] = v20 + 72;
  }
  a1[2].i64[1] = v21;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
}

void sub_19294880C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t Espresso::ANECompilerEngine::prefer_ne(Espresso::ANECompilerEngine *this, NSString *a2)
{
  if (Espresso::ANECompilerEngine::is_mix(this, a2)) {
    return 1;
  }
  uint64_t v3 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  __int32 v4 = [v3 persistentDomainForName:*MEMORY[0x1E4F283E0]];

  uint64_t v5 = [v4 objectForKeyedSubscript:@"espresso.mix_ane.prefer_ne"];
  uint64_t v2 = [v5 BOOLValue];

  return v2;
}

void sub_1929488DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine7context32decompose_simple_crop_and_resizeEPNS_3netEPS1__block_invoke(uint64_t a1, int64x2_t *a2)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(void *)(a2->i64[0] + 8) == v3 || v3 == 0)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2->i64[0] + 320))(a2->i64[0]);
    int v7 = *(_DWORD *)(v6 + 20);
    if ((v7 - 1) <= 1 && *(_DWORD *)(v6 + 24) == 0)
    {
      uint64_t v9 = *(void *)(a1 + 40) + 56;
      unint64_t v10 = a2[3].i32[2];
      v74.__r_.__value_.__r.__words[0] = v10;
      unint64_t v11 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, v10, &v74);
      if (v11[4] - v11[3] == 24)
      {
        Espresso::ANECompilerEngine::ane_arch_allow_network_override(*(void *)(a1 + 40) + 472);
        uint64_t v12 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
        if ((Espresso::ANECompilerEngine::is_mix(v12, v13) & 1) == 0
          && Espresso::ANECompilerEngine::is_mix_e(v12, v14))
        {
          uint64_t v15 = *(void *)(a1 + 40);
          uint64_t v17 = *(void *)(v15 + 16);
          uint64_t v16 = *(std::__shared_weak_count **)(v15 + 24);
          uint64_t v112 = v17;
          uint64_t v113 = v16;
          if (v16) {
            atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v18 = *(uint64_t (****)(void))(*(void *)(a2->i64[0] + 8) + 8);
          int v111 = (**v18)(v18);
          int v110 = *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 32) + 16 * a2[3].i32[2]) + 12);
          Espresso::abstract_engine_factory::shared(&v108);
          uint64_t v19 = *(void *)(a1 + 40) + 96;
          unint64_t v20 = a2[3].i32[2];
          v74.__r_.__value_.__r.__words[0] = v20;
          uint64_t v21 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v19, v20, &v74)[3];
          if (*((char *)v21 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v107, *(const std::string::value_type **)v21, *((void *)v21 + 1));
          }
          else
          {
            long long v22 = *v21;
            v107.__r_.__value_.__r.__words[2] = *((void *)v21 + 2);
            *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v22;
          }
          uint64_t v23 = *(void *)(a1 + 40) + 56;
          unint64_t v24 = a2[3].i32[2];
          v74.__r_.__value_.__r.__words[0] = v24;
          int v25 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v23, v24, &v74)[3];
          if (*((char *)v25 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v106, *(const std::string::value_type **)v25, *((void *)v25 + 1));
          }
          else
          {
            long long v26 = *v25;
            v106.__r_.__value_.__r.__words[2] = *((void *)v25 + 2);
            *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v26;
          }
          uint64_t v27 = a2->i64[0];
          uint64_t v28 = *(void *)(a1 + 40);
          v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
          size_t v29 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v28 + 184), &v106, (long long **)&v74);
          long long v30 = *(_OWORD *)(v29 + 72);
          v101[0] = *(_OWORD *)(v29 + 56);
          v101[1] = v30;
          uint64_t v31 = (const void *)*((void *)v29 + 12);
          uint64_t v102 = *((void *)v29 + 11);
          std::string __p = 0;
          std::string v104 = 0;
          uint64_t v105 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v31, *((void *)v29 + 13), (uint64_t)(*((void *)v29 + 13) - (void)v31) >> 2);
          BOOL v32 = Espresso::ANECompilerEngine::mix_crop_and_resize_kernel::single_input_mode_supported_by_anec(v27, v28, (uint64_t)v101, (uint64_t)&v106);
          if (__p)
          {
            std::string v104 = __p;
            operator delete(__p);
          }
          if (!v32)
          {
            Espresso::single_match_state<Espresso::ANECompilerEngine::mix_crop_and_resize_kernel>::remove_layer(a2);
            int v33 = (uint64_t **)(*(void *)(a1 + 40) + 184);
            v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
            int v34 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v33, &v106, (long long **)&v74)+ 14);
            uint64_t v35 = (uint64_t **)(*(void *)(a1 + 40) + 184);
            v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
            int v36 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v35, &v106, (long long **)&v74)+ 15);
            uint64_t v37 = (uint64_t **)(*(void *)(a1 + 40) + 184);
            v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v107;
            int v38 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v37, &v107, (long long **)&v74)+ 14);
            uint64_t v39 = (uint64_t **)(*(void *)(a1 + 40) + 184);
            v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v107;
            int v55 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v39, &v107, (long long **)&v74)+ 15);
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__@transpose0", (const void **)&v107.__r_.__value_.__l.__data_, &__s);
            *(_OWORD *)&v118.__r_.__value_.__l.__data_ = xmmword_192DCA440;
            LODWORD(v118.__r_.__value_.__r.__words[2]) = 4;
            uint64_t v40 = v108;
            std::string::basic_string[abi:ne180100]<0>(&v74, "transpose");
            Espresso::abstract_engine_factory::make_kernel_priv(v40, (uint64_t)&v112, (uint64_t)&v74, (uint64_t)&v118, &v111);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_transpose_kernel,Espresso::base_kernel>(&v117, v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
            if (v98.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v98.__r_.__value_.__l.__size_);
            }
            if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v74.__r_.__value_.__l.__data_);
            }
            size_t size = (std::__shared_weak_count *)v117.__r_.__value_.__l.__size_;
            long long v99 = *(_OWORD *)&v117.__r_.__value_.__l.__data_;
            if (v117.__r_.__value_.__l.__size_) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v117.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(&v74, "transpose");
            if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v120, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
            }
            else {
              std::string v120 = v106;
            }
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v98, (long long *)&v120, 1uLL);
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v119, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            }
            else {
              std::string v119 = __s;
            }
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v97, (long long *)&v119, 1uLL);
            Espresso::single_match_state<Espresso::ANECompilerEngine::mix_crop_and_resize_kernel>::add_kernel(a2, &v99, &v74, &__s, (std::string **)&v98, (std::string **)&v97);
            v116.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v116);
            if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v119.__r_.__value_.__l.__data_);
            }
            v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&v98;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v97);
            if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v120.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v74.__r_.__value_.__l.__data_);
            }
            if (size)
            {
              nitro::nitro_function::nitro_function(size);
              nitro::nitro_function::nitro_function(size);
            }
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__@convolution_y", (const void **)&v107.__r_.__value_.__l.__data_, &v98);
            __asm { FMOV            V8.2S, #1.0 }
            uint64_t v80 = _D8;
            __int16 v81 = 1;
            uint64_t v83 = 0;
            uint64_t v82 = 0;
            __int16 v84 = 0;
            uint64_t v85 = 0x1000100010001;
            int v86 = 0;
            int v88 = 1;
            int v95 = 0;
            char v96 = 0;
            uint64_t v91 = 0;
            uint64_t v92 = 0;
            memset(&v74, 0, sizeof(v74));
            uint64_t v75 = 0;
            uint64_t v76 = 1;
            long long v87 = xmmword_192DCA230;
            uint64_t v89 = 0;
            int v90 = 0x10000;
            int v93 = 0;
            __int16 v94 = 1;
            int v78 = v34;
            int v77 = v38;
            long long v79 = xmmword_192DCA4A0;
            std::string::basic_string[abi:ne180100]<0>(&v120, "convolution");
            Espresso::abstract_engine_factory::make_kernel_priv(v40, (uint64_t)&v112, (uint64_t)&v120, (uint64_t)&v74, &v111);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::ANECompilerEngine::convolution_kernel,Espresso::base_kernel>(&v116, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
            if (v97.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v97.__r_.__value_.__l.__size_);
            }
            if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v120.__r_.__value_.__l.__data_);
            }
            std::string::size_type v46 = v116.__r_.__value_.__r.__words[0];
            *(unsigned char *)(v116.__r_.__value_.__r.__words[0] + 688) = 1;
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v59, 1, 1, v78, v77);
            _ZZZN8Espresso17ANECompilerEngine7context32decompose_simple_crop_and_resizeEPNS_3netEPS1_EUb1_ENK3__7clERKNSt3__110shared_ptrINS_4blobIfLi4EEEEEii(v7, (uint64_t *)&v59, v34, v38);
            Espresso::blob<float,1>::make(&v72, v77);
            (*(void (**)(std::string::size_type, uint64_t *))(*(void *)v46 + 392))(v46, &v72);
            if (v73) {
              nitro::nitro_function::nitro_function(v73);
            }
            uint64_t v47 = (std::__shared_weak_count *)*((void *)&v59 + 1);
            long long v71 = v59;
            if (*((void *)&v59 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v59 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            (*(void (**)(std::string::size_type, long long *))(*(void *)v46 + 400))(v46, &v71);
            if (*((void *)&v71 + 1)) {
              nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v71 + 1));
            }
            unint64_t v48 = (std::__shared_weak_count *)v116.__r_.__value_.__l.__size_;
            v70[0] = v46;
            v70[1] = v116.__r_.__value_.__l.__size_;
            if (v116.__r_.__value_.__l.__size_) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v116.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(&v120, "convolution");
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v119, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            }
            else {
              std::string v119 = __s;
            }
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v97, (long long *)&v119, 1uLL);
            if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v117, v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
            }
            else {
              std::string v117 = v98;
            }
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v118, (long long *)&v117, 1uLL);
            Espresso::single_match_state<Espresso::ANECompilerEngine::mix_crop_and_resize_kernel>::add_kernel(a2, v70, &v120, &v98, (std::string **)&v97, (std::string **)&v118);
            v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v118;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
            if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v117.__r_.__value_.__l.__data_);
            }
            v118.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
            if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v119.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v120.__r_.__value_.__l.__data_);
            }
            if (v48) {
              nitro::nitro_function::nitro_function(v48);
            }
            if (v47) {
              nitro::nitro_function::nitro_function(v47);
            }
            if (v48) {
              nitro::nitro_function::nitro_function(v48);
            }
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__@transpose1", (const void **)&v107.__r_.__value_.__l.__data_, &v120);
            *(_OWORD *)&v116.__r_.__value_.__l.__data_ = xmmword_192DCA440;
            LODWORD(v116.__r_.__value_.__r.__words[2]) = 4;
            std::string::basic_string[abi:ne180100]<0>(&v74, "transpose");
            Espresso::abstract_engine_factory::make_kernel_priv(v40, (uint64_t)&v112, (uint64_t)&v74, (uint64_t)&v116, &v111);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_transpose_kernel,Espresso::base_kernel>(&v59, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
            if (v97.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v97.__r_.__value_.__l.__size_);
            }
            if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v74.__r_.__value_.__l.__data_);
            }
            uint64_t v49 = (std::__shared_weak_count *)*((void *)&v59 + 1);
            long long v69 = v59;
            if (*((void *)&v59 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v59 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(&v74, "transpose");
            if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v119, v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
            }
            else {
              std::string v119 = v98;
            }
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v97, (long long *)&v119, 1uLL);
            if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v117, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
            }
            else {
              std::string v117 = v120;
            }
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v118, (long long *)&v117, 1uLL);
            Espresso::single_match_state<Espresso::ANECompilerEngine::mix_crop_and_resize_kernel>::add_kernel(a2, &v69, &v74, &v120, (std::string **)&v97, (std::string **)&v118);
            v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v118;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
            if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v117.__r_.__value_.__l.__data_);
            }
            v118.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
            if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v119.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v74.__r_.__value_.__l.__data_);
            }
            if (v49)
            {
              nitro::nitro_function::nitro_function(v49);
              nitro::nitro_function::nitro_function(v49);
            }
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__@transpose2", (const void **)&v107.__r_.__value_.__l.__data_, &v97);
            long long v59 = xmmword_192DCA410;
            int v60 = 4;
            std::string::basic_string[abi:ne180100]<0>(&v74, "transpose");
            Espresso::abstract_engine_factory::make_kernel_priv(v40, (uint64_t)&v112, (uint64_t)&v74, (uint64_t)&v59, &v111);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_transpose_kernel,Espresso::base_kernel>(&v115, v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_);
            if (v119.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v119.__r_.__value_.__l.__size_);
            }
            if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v74.__r_.__value_.__l.__data_);
            }
            size_t v50 = (std::__shared_weak_count *)v115.__r_.__value_.__l.__size_;
            long long v68 = *(_OWORD *)&v115.__r_.__value_.__l.__data_;
            if (v115.__r_.__value_.__l.__size_) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v115.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(&v74, "transpose");
            if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v118, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
            }
            else {
              std::string v118 = v120;
            }
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v119, (long long *)&v118, 1uLL);
            if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v116, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
            }
            else {
              std::string v116 = v97;
            }
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v117, (long long *)&v116, 1uLL);
            Espresso::single_match_state<Espresso::ANECompilerEngine::mix_crop_and_resize_kernel>::add_kernel(a2, &v68, &v74, &v97, (std::string **)&v119, (std::string **)&v117);
            *(void *)&long long v57 = &v117;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
            if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v116.__r_.__value_.__l.__data_);
            }
            v117.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
            if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v118.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v74.__r_.__value_.__l.__data_);
            }
            if (v50)
            {
              nitro::nitro_function::nitro_function(v50);
              nitro::nitro_function::nitro_function(v50);
            }
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__@convolution1", (const void **)&v107.__r_.__value_.__l.__data_, &v119);
            uint64_t v80 = _D8;
            __int16 v81 = 1;
            uint64_t v83 = 0;
            uint64_t v82 = 0;
            __int16 v84 = 0;
            uint64_t v85 = 0x1000100010001;
            int v86 = 0;
            int v88 = 1;
            int v95 = 0;
            char v96 = 0;
            uint64_t v91 = 0;
            uint64_t v92 = 0;
            memset(&v74, 0, sizeof(v74));
            uint64_t v75 = 0;
            uint64_t v76 = 1;
            long long v87 = xmmword_192DCA230;
            uint64_t v89 = 0;
            int v90 = 0x10000;
            int v93 = 0;
            __int16 v94 = 1;
            int v78 = v36;
            int v77 = v55;
            long long v79 = xmmword_192DCA4A0;
            std::string::basic_string[abi:ne180100]<0>(&v118, "convolution");
            Espresso::abstract_engine_factory::make_kernel_priv(v40, (uint64_t)&v112, (uint64_t)&v118, (uint64_t)&v74, &v111);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::ANECompilerEngine::convolution_kernel,Espresso::base_kernel>(&v57, v117.__r_.__value_.__l.__data_, v117.__r_.__value_.__l.__size_);
            if (v117.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v117.__r_.__value_.__l.__size_);
            }
            if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v118.__r_.__value_.__l.__data_);
            }
            uint64_t v51 = v57;
            *(unsigned char *)(v57 + 688) = 1;
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v66, 1, 1, v78, v77);
            _ZZZN8Espresso17ANECompilerEngine7context32decompose_simple_crop_and_resizeEPNS_3netEPS1_EUb1_ENK3__7clERKNSt3__110shared_ptrINS_4blobIfLi4EEEEEii(v7, &v66, v36, v55);
            Espresso::blob<float,1>::make(&v64, v77);
            (*(void (**)(uint64_t, uint64_t *))(*(void *)v51 + 392))(v51, &v64);
            if (v65) {
              nitro::nitro_function::nitro_function(v65);
            }
            uint64_t v52 = v67;
            uint64_t v62 = v66;
            long long v63 = v67;
            if (v67) {
              atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(uint64_t, uint64_t *))(*(void *)v51 + 400))(v51, &v62);
            if (v63) {
              nitro::nitro_function::nitro_function(v63);
            }
            uint64_t v53 = (std::__shared_weak_count *)*((void *)&v57 + 1);
            v61[0] = v51;
            v61[1] = *((void *)&v57 + 1);
            if (*((void *)&v57 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v57 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(&v118, "convolution");
            if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v116, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
            }
            else {
              std::string v116 = v97;
            }
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v117, (long long *)&v116, 1uLL);
            if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v115, v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_);
            }
            else {
              std::string v115 = v119;
            }
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v59, (long long *)&v115, 1uLL);
            Espresso::single_match_state<Espresso::ANECompilerEngine::mix_crop_and_resize_kernel>::add_kernel(a2, v61, &v118, &v119, (std::string **)&v117, (std::string **)&v59);
            uint64_t v114 = (void **)&v59;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v114);
            if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v115.__r_.__value_.__l.__data_);
            }
            *(void *)&long long v59 = &v117;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
            if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v116.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v118.__r_.__value_.__l.__data_);
            }
            if (v53) {
              nitro::nitro_function::nitro_function(v53);
            }
            if (v52) {
              nitro::nitro_function::nitro_function(v52);
            }
            if (v53) {
              nitro::nitro_function::nitro_function(v53);
            }
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__@transpose3", (const void **)&v107.__r_.__value_.__l.__data_, &v74);
            long long v57 = xmmword_192DCA410;
            int v58 = 4;
            std::string::basic_string[abi:ne180100]<0>(&v118, "transpose");
            Espresso::abstract_engine_factory::make_kernel_priv(v40, (uint64_t)&v112, (uint64_t)&v118, (uint64_t)&v57, &v111);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_transpose_kernel,Espresso::base_kernel>(&v66, v117.__r_.__value_.__l.__data_, v117.__r_.__value_.__l.__size_);
            if (v117.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v117.__r_.__value_.__l.__size_);
            }
            if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v118.__r_.__value_.__l.__data_);
            }
            uint64_t v54 = v67;
            v56[0] = v66;
            v56[1] = v67;
            if (v67) {
              atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(&v118, "transpose");
            if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v116, v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_);
            }
            else {
              std::string v116 = v119;
            }
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v117, (long long *)&v116, 1uLL);
            if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v115, v107.__r_.__value_.__l.__data_, v107.__r_.__value_.__l.__size_);
            }
            else {
              std::string v115 = v107;
            }
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v59, (long long *)&v115, 1uLL);
            Espresso::single_match_state<Espresso::ANECompilerEngine::mix_crop_and_resize_kernel>::add_kernel(a2, v56, &v118, &v74, (std::string **)&v117, (std::string **)&v59);
            uint64_t v114 = (void **)&v59;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v114);
            if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v115.__r_.__value_.__l.__data_);
            }
            *(void *)&long long v59 = &v117;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
            if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v116.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v118.__r_.__value_.__l.__data_);
            }
            if (v54)
            {
              nitro::nitro_function::nitro_function(v54);
              nitro::nitro_function::nitro_function(v54);
            }
            if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v74.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v119.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v97.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v120.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v98.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__s.__r_.__value_.__l.__data_);
            }
          }
          if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v106.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v107.__r_.__value_.__l.__data_);
          }
          if (v109) {
            nitro::nitro_function::nitro_function(v109);
          }
          if (v113) {
            nitro::nitro_function::nitro_function(v113);
          }
        }
      }
    }
  }
}

void sub_192949920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a23 = v76 - 240;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (SLOBYTE(STACK[0x307]) < 0) {
    operator delete((void *)STACK[0x2F0]);
  }
  if (*(char *)(v76 - 185) < 0) {
    operator delete(*(void **)(v76 - 208));
  }
  if (v75)
  {
    nitro::nitro_function::nitro_function(v75);
    nitro::nitro_function::nitro_function(v75);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (*(char *)(v76 - 153) < 0) {
    operator delete(*(void **)(v76 - 176));
  }
  if (a72 < 0) {
    operator delete(a69);
  }
  if (*(char *)(v76 - 121) < 0) {
    operator delete(*(void **)(v76 - 144));
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (SLOBYTE(STACK[0x21F]) < 0) {
    operator delete((void *)STACK[0x208]);
  }
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  if (SLOBYTE(STACK[0x297]) < 0) {
    operator delete((void *)STACK[0x280]);
  }
  if (STACK[0x2A8]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x2A8]);
  }
  if (STACK[0x2C0]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x2C0]);
  }

  _Unwind_Resume(a1);
}

void Espresso::single_match_state<Espresso::ANECompilerEngine::mix_crop_and_resize_kernel>::remove_layer(int64x2_t *a1)
{
  memset(v7, 0, sizeof(v7));
  __int32 v4 = a1[3].i32[2];
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  unint64_t v2 = a1[2].u64[1];
  if (v2 >= a1[3].i64[0])
  {
    uint64_t v3 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v4);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v4);
    uint64_t v3 = v2 + 72;
    a1[2].i64[1] = v2 + 72;
  }
  a1[2].i64[1] = v3;
  unint64_t v8 = (void **)&v7[1] + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  unint64_t v8 = (void **)v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
}

void sub_192949F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_transpose_kernel,Espresso::base_kernel>(void *result, void *lpsrc, uint64_t a3)
{
  uint64_t v3 = result;
  if (lpsrc
  {
    void *v3 = result;
    v3[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void Espresso::single_match_state<Espresso::ANECompilerEngine::mix_crop_and_resize_kernel>::add_kernel(int64x2_t *a1, void *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6)
{
  __int32 v23 = 0;
  memset(v26, 0, sizeof(v26));
  uint64_t v12 = (char *)operator new(0xF8uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)uint64_t v12 = &unk_1EE389DF0;
  *((void *)v12 + 3) = &unk_1EE36C758;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 161) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((void *)v12 + 30) = 0;
  unint64_t v24 = v12 + 24;
  int v25 = (std::__shared_weak_count *)v12;
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  if (v14)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    uint64_t v15 = (std::__shared_weak_count *)*((void *)v12 + 12);
    *((void *)v12 + 11) = v13;
    *((void *)v12 + 12) = v14;
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
  }
  else
  {
    *((void *)v12 + 11) = v13;
    *((void *)v12 + 12) = 0;
  }
  std::string::operator=((std::string *)(v24 + 16), a4);
  std::string::operator=((std::string *)(v24 + 40), a3);
  uint64_t v16 = *(uint64_t (****)(void))(*(void *)(*a2 + 8) + 8);
  uint64_t v17 = v24;
  *((_DWORD *)v24 + 2) = (**v16)(v16);
  uint64_t v18 = a1[1].i64[0];
  if (v18)
  {
    *((_DWORD *)v17 + 3) = *(_DWORD *)(v18 + 12);
    if (*(char *)(v18 + 223) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v18 + 200), *(void *)(v18 + 208));
    }
    else {
      std::string __p = *(std::string *)(v18 + 200);
    }
    std::string::operator=((std::string *)(v17 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v19 = *(void *)(a1[4].i64[0] + 32);
    if (*(void *)(a1[4].i64[0] + 40) != v19) {
      *((_DWORD *)v17 + 3) = *(_DWORD *)(*(void *)v19 + 12);
    }
  }
  if (v26 != (_OWORD *)a5) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v26, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  }
  if ((std::string **)((char *)&v26[1] + 8) != a6) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v26[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  }
  __int32 v23 = a1[3].i32[2];
  unint64_t v20 = a1[2].u64[1];
  if (v20 >= a1[3].i64[0])
  {
    uint64_t v21 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v23);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v23);
    uint64_t v21 = v20 + 72;
    a1[2].i64[1] = v20 + 72;
  }
  a1[2].i64[1] = v21;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
}

void sub_19294A29C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void *std::dynamic_pointer_cast[abi:ne180100]<Espresso::ANECompilerEngine::convolution_kernel,Espresso::base_kernel>(void *result, void *lpsrc, uint64_t a3)
{
  uint64_t v3 = result;
  if (lpsrc
  {
    void *v3 = result;
    v3[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void _ZZZN8Espresso17ANECompilerEngine7context32decompose_simple_crop_and_resizeEPNS_3netEPS1_EUb1_ENK3__7clERKNSt3__110shared_ptrINS_4blobIfLi4EEEEEii(int a1, uint64_t *a2, int a3, int a4)
{
  float v7 = (float)((float)a3 + -1.0) / (float)((float)a4 + -1.0);
  if (a4 <= 1) {
    float v7 = 1.0;
  }
  if (a1 == 1) {
    float v8 = v7;
  }
  else {
    float v8 = (float)a3 / (float)a4;
  }
  std::vector<float>::vector(__p, a4);
  uint64_t v9 = (float *)__p[0];
  if (a4 < 1)
  {
    if (!__p[0]) {
      return;
    }
  }
  else
  {
    uint64_t v10 = 0;
    do
    {
      v9[v10] = v8 * (float)(int)v10;
      if (a3 >= 1)
      {
        uint64_t v11 = *a2;
        int v12 = v10 * a3;
        int v13 = a3;
        do
        {
          float v14 = v9[v10];
          int v15 = (int)v14;
          if (a3 - 1 >= (int)v14 + 1) {
            int v16 = v15 + 1;
          }
          else {
            int v16 = a3 - 1;
          }
          if (v16 == v15)
          {
            uint64_t v17 = *(void *)(v11 + 24);
            int v18 = v12 + v15;
            float v19 = 1.0;
          }
          else
          {
            float v19 = v14 - (float)v15;
            uint64_t v17 = *(void *)(v11 + 24);
            *(float *)(v17 + 4 * (v12 + v15)) = 1.0 - v19;
            int v18 = v16 + v12;
          }
          *(float *)(v17 + 4 * v18) = v19;
          --v13;
        }
        while (v13);
      }
      ++v10;
    }
    while (v10 != a4);
  }
  __p[1] = v9;
  operator delete(v9);
}

void ___ZN8Espresso17ANECompilerEngine7context30transform_large_separated_poolEPNS_3netEPS1__block_invoke(uint64_t a1, int64x2_t *a2)
{
  *(void *)&long long v196 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(void *)(a2->i64[0] + 8) == v3 || v3 == 0)
  {
    uint64_t v5 = a2;
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2->i64[0] + 384))(a2->i64[0]);
    int v7 = *(_DWORD *)v6;
    int v8 = *(_DWORD *)(v6 + 4);
    uint64_t v9 = *(unsigned int *)(v6 + 8);
    long long v10 = *(_OWORD *)(v6 + 60);
    long long v11 = *(_OWORD *)(v6 + 92);
    long long v178 = *(_OWORD *)(v6 + 76);
    long long v179 = v11;
    int v180 = *(_DWORD *)(v6 + 108);
    long long v12 = *(_OWORD *)(v6 + 28);
    long long v174 = *(_OWORD *)(v6 + 12);
    long long v175 = v12;
    long long v176 = *(_OWORD *)(v6 + 44);
    long long v177 = v10;
    std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v172, **(void **)(a1 + 40), *(std::__shared_weak_count **)(*(void *)(a1 + 40) + 8));
    long long v168 = v177;
    long long v169 = v178;
    long long v170 = v179;
    long long v165 = v174;
    long long v166 = v175;
    v164[0] = v7;
    v164[1] = v8;
    v164[2] = v9;
    int v171 = v180;
    long long v167 = v176;
    BOOL v13 = Espresso::ANECompilerEngine::mix_pool_kernel::separated_pool_workaround_compatible(v172, (uint64_t)v164);
    if (v173) {
      nitro::nitro_function::nitro_function(v173);
    }
    if (v13)
    {
      uint64_t v14 = *(void *)(a1 + 40);
      uint64_t v16 = *(void *)(v14 + 16);
      int v15 = *(std::__shared_weak_count **)(v14 + 24);
      uint64_t v162 = v16;
      uint64_t v163 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = *(uint64_t (****)(void))(*(void *)(v5->i64[0] + 8) + 8);
      int v161 = (**v17)(v17);
      int v160 = *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 32) + 16 * v5[3].i32[2]) + 12);
      Espresso::abstract_engine_factory::shared(&v158);
      uint64_t v18 = *(void *)(a1 + 40) + 96;
      unint64_t v19 = v5[3].i32[2];
      *(void *)int v137 = v19;
      unint64_t v20 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v18, v19, v137)[3];
      if (*((char *)v20 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v157, *(const std::string::value_type **)v20, *((void *)v20 + 1));
      }
      else
      {
        long long v21 = *v20;
        v157.__r_.__value_.__r.__words[2] = *((void *)v20 + 2);
        *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v21;
      }
      uint64_t v22 = *(void *)(a1 + 40) + 56;
      unint64_t v23 = v5[3].i32[2];
      *(void *)int v137 = v23;
      unint64_t v24 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v22, v23, v137)[3];
      if (*((char *)v24 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v156, *(const std::string::value_type **)v24, *((void *)v24 + 1));
      }
      else
      {
        long long v25 = *v24;
        v156.__r_.__value_.__r.__words[2] = *((void *)v24 + 2);
        *(_OWORD *)&v156.__r_.__value_.__l.__data_ = v25;
      }
      long long v26 = (uint64_t **)(*(void *)(a1 + 40) + 184);
      *(void *)int v137 = &v156;
      int v128 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v26, &v156, (long long **)v137)+ 14);
      uint64_t v27 = (uint64_t **)(*(void *)(a1 + 40) + 184);
      *(void *)int v137 = &v156;
      int v126 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27, &v156, (long long **)v137)+ 15);
      uint64_t v28 = (uint64_t **)(*(void *)(a1 + 40) + 184);
      *(void *)int v137 = &v157;
      unsigned int v125 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v28, &v157, (long long **)v137)+ 14);
      size_t v29 = (uint64_t **)(*(void *)(a1 + 40) + 184);
      *(void *)int v137 = &v157;
      uint64_t v30 = *((int *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v29, &v157, (long long **)v137)+ 15);
      Espresso::single_match_state<Espresso::generic_pool_kernel>::remove_layer(v5);
      int v31 = v8 + v8 * ((v128 - 1) / v8);
      int v32 = v9 + v9 * ((v126 - 1) / (int)v9);
      BOOL v33 = __OFSUB__(v31, v128);
      int v34 = v31 - v128;
      if (v34 < 0 != v33) {
        ++v34;
      }
      BOOL v33 = __OFSUB__(v32, v126);
      int v35 = v32 - v126;
      if (v35 < 0 != v33) {
        ++v35;
      }
      long long v153 = 0;
      uint64_t v154 = 0;
      unint64_t v155 = 0;
      if (v30)
      {
        unint64_t v36 = 0;
        int v37 = v34 >> 1;
        int v124 = v35 >> 1;
        int v123 = v9 - (v35 >> 1);
        int v38 = v125;
        if (v125 <= 1) {
          int v38 = 1;
        }
        uint64_t v127 = v38;
        int v121 = -v37;
        uint64_t v122 = v30;
        while (1)
        {
          if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t size = HIBYTE(v157.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t size = v157.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)v137, size + 10);
          if (v137[23] >= 0) {
            uint64_t v40 = v137;
          }
          else {
            uint64_t v40 = *(unsigned char **)v137;
          }
          if (size)
          {
            if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v41 = &v157;
            }
            else {
              uint64_t v41 = (std::string *)v157.__r_.__value_.__r.__words[0];
            }
            memmove(v40, v41, size);
          }
          strcpy(&v40[size], "__@yslice_");
          std::to_string(&v151, v36);
          if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v42 = &v151;
          }
          else {
            uint64_t v42 = (std::string *)v151.__r_.__value_.__r.__words[0];
          }
          if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v43 = HIBYTE(v151.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v43 = v151.__r_.__value_.__l.__size_;
          }
          unint64_t v44 = std::string::append((std::string *)v137, (const std::string::value_type *)v42, v43);
          long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v45;
          v44->__r_.__value_.__l.__size_ = 0;
          v44->__r_.__value_.__r.__words[2] = 0;
          v44->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v151.__r_.__value_.__l.__data_);
          }
          if ((v137[23] & 0x80000000) != 0) {
            operator delete(*(void **)v137);
          }
          *(void *)&v137[12] = 1;
          *(_DWORD *)&v137[20] = 1;
          *(_DWORD *)int v137 = 1;
          *(_DWORD *)&v137[4] = (v9 * v36 - v124) & ~(((int)v9 * (int)v36 - v124) >> 31);
          int v46 = v123 + v9 * v36;
          if (v126 < v46) {
            int v46 = v126;
          }
          *(_DWORD *)&v137[8] = v46;
          if (((v9 * v36 - v124) & ~(((int)v9 * (int)v36 - v124) >> 31)) == v46) {
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid slice in pool decomposition");
          }
          uint64_t v47 = v158;
          std::string::basic_string[abi:ne180100]<0>(&v151, "slice");
          Espresso::abstract_engine_factory::make_kernel_priv(v47, (uint64_t)&v162, (uint64_t)&v151, (uint64_t)v137, &v161);
          if (v195.__r_.__value_.__r.__words[0])
          {
            if (v48)
            {
              uint64_t v49 = (std::__shared_weak_count *)v195.__r_.__value_.__l.__size_;
              if (!v195.__r_.__value_.__l.__size_) {
                goto LABEL_57;
              }
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v195.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
            }
            else
            {
              uint64_t v49 = 0;
            }
          }
          else
          {
            uint64_t v49 = 0;
            unint64_t v48 = 0;
          }
          if (v195.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v195.__r_.__value_.__l.__size_);
          }
LABEL_57:
          if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v151.__r_.__value_.__l.__data_);
          }
          unint64_t v149 = v48;
          uint64_t v150 = v49;
          if (v49) {
            atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(&v151, "slice");
          if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v193, v156.__r_.__value_.__l.__data_, v156.__r_.__value_.__l.__size_);
          }
          else {
            std::string v193 = v156;
          }
          memset(&v195, 0, sizeof(v195));
          v191.__r_.__value_.__r.__words[0] = (std::string::size_type)&v195;
          v191.__r_.__value_.__s.__data_[8] = 0;
          v195.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
          v195.__r_.__value_.__l.__size_ = v195.__r_.__value_.__r.__words[0];
          v195.__r_.__value_.__r.__words[2] = v195.__r_.__value_.__r.__words[0] + 24;
          v195.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v195.__r_.__value_.__r.__words[2], (long long *)&v193, (long long *)&v194, (std::string *)v195.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v189, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else {
            std::string v189 = __p;
          }
          memset(&v191, 0, sizeof(v191));
          v187.__r_.__value_.__r.__words[0] = (std::string::size_type)&v191;
          v187.__r_.__value_.__s.__data_[8] = 0;
          v191.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
          v191.__r_.__value_.__l.__size_ = v191.__r_.__value_.__r.__words[0];
          v191.__r_.__value_.__r.__words[2] = v191.__r_.__value_.__r.__words[0] + 24;
          v191.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v191.__r_.__value_.__r.__words[2], (long long *)&v189, (long long *)&v190, (std::string *)v191.__r_.__value_.__l.__data_);
          Espresso::single_match_state<Espresso::generic_pool_kernel>::add_kernel(v5, &v149, &v151, &__p, (std::string **)&v195, (std::string **)&v191);
          v187.__r_.__value_.__r.__words[0] = (std::string::size_type)&v191;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v187);
          if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v189.__r_.__value_.__l.__data_);
          }
          v191.__r_.__value_.__r.__words[0] = (std::string::size_type)&v195;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v191);
          if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v193.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v151.__r_.__value_.__l.__data_);
          }
          uint64_t v50 = v9;
          if (v150) {
            nitro::nitro_function::nitro_function(v150);
          }
          uint64_t v51 = v5;
          if (v49) {
            nitro::nitro_function::nitro_function(v49);
          }
          memset(&v151, 0, sizeof(v151));
          if (v125)
          {
            unint64_t v52 = 0;
            int v53 = v121;
            while (1)
            {
              if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                size_t v54 = HIBYTE(v157.__r_.__value_.__r.__words[2]);
              }
              else {
                size_t v54 = v157.__r_.__value_.__l.__size_;
              }
              std::string::basic_string[abi:ne180100]((uint64_t)&v191, v54 + 9);
              if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int v55 = &v191;
              }
              else {
                int v55 = (std::string *)v191.__r_.__value_.__r.__words[0];
              }
              if (v54)
              {
                if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v56 = &v157;
                }
                else {
                  uint64_t v56 = (std::string *)v157.__r_.__value_.__r.__words[0];
                }
                memmove(v55, v56, v54);
              }
              strcpy((char *)v55 + v54, "__@slice_");
              std::to_string(&v189, v52);
              if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                long long v57 = &v189;
              }
              else {
                long long v57 = (std::string *)v189.__r_.__value_.__r.__words[0];
              }
              if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v58 = HIBYTE(v189.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v58 = v189.__r_.__value_.__l.__size_;
              }
              long long v59 = std::string::append(&v191, (const std::string::value_type *)v57, v58);
              long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
              v193.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v193.__r_.__value_.__l.__data_ = v60;
              v59->__r_.__value_.__l.__size_ = 0;
              v59->__r_.__value_.__r.__words[2] = 0;
              v59->__r_.__value_.__r.__words[0] = 0;
              unint64_t v61 = std::string::append(&v193, "_");
              long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
              *(void *)&v137[16] = *((void *)&v61->__r_.__value_.__l + 2);
              *(_OWORD *)int v137 = v62;
              v61->__r_.__value_.__l.__size_ = 0;
              v61->__r_.__value_.__r.__words[2] = 0;
              v61->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v187, v36);
              if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                long long v63 = &v187;
              }
              else {
                long long v63 = (std::string *)v187.__r_.__value_.__r.__words[0];
              }
              if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v64 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v64 = v187.__r_.__value_.__l.__size_;
              }
              int v65 = std::string::append((std::string *)v137, (const std::string::value_type *)v63, v64);
              long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
              v195.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v195.__r_.__value_.__l.__data_ = v66;
              v65->__r_.__value_.__l.__size_ = 0;
              v65->__r_.__value_.__r.__words[2] = 0;
              v65->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v187.__r_.__value_.__l.__data_);
              }
              if ((v137[23] & 0x80000000) != 0) {
                operator delete(*(void **)v137);
              }
              if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v193.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v189.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v191.__r_.__value_.__l.__data_);
              }
              *(void *)&v137[12] = 1;
              *(_DWORD *)&v137[20] = 1;
              *(_DWORD *)int v137 = 0;
              *(_DWORD *)&v137[4] = v53 & ~(v53 >> 31);
              int v67 = v8 + v53;
              if (v128 < v8 + v53) {
                int v67 = v128;
              }
              *(_DWORD *)&v137[8] = v67;
              if ((v53 & ~(v53 >> 31)) == v67) {
                Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid slice in pool decomposition");
              }
              uint64_t v68 = v158;
              std::string::basic_string[abi:ne180100]<0>(&v193, "slice");
              Espresso::abstract_engine_factory::make_kernel_priv(v68, (uint64_t)&v162, (uint64_t)&v193, (uint64_t)v137, &v161);
              if (!v191.__r_.__value_.__r.__words[0]) {
                break;
              }
              if (!v69) {
                goto LABEL_120;
              }
              int v70 = (std::__shared_weak_count *)v191.__r_.__value_.__l.__size_;
              if (!v191.__r_.__value_.__l.__size_) {
                goto LABEL_123;
              }
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v191.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
LABEL_121:
              if (v191.__r_.__value_.__l.__size_) {
                nitro::nitro_function::nitro_function((std::__shared_weak_count *)v191.__r_.__value_.__l.__size_);
              }
LABEL_123:
              if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v193.__r_.__value_.__l.__data_);
              }
              size_t v147 = v69;
              float v148 = v70;
              if (v70) {
                atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              std::string::basic_string[abi:ne180100]<0>(&v193, "slice");
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&v189, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
              }
              else {
                std::string v189 = __p;
              }
              memset(&v191, 0, sizeof(v191));
              v187.__r_.__value_.__r.__words[0] = (std::string::size_type)&v191;
              v187.__r_.__value_.__s.__data_[8] = 0;
              v191.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
              v191.__r_.__value_.__l.__size_ = v191.__r_.__value_.__r.__words[0];
              v191.__r_.__value_.__r.__words[2] = v191.__r_.__value_.__r.__words[0] + 24;
              v191.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v191.__r_.__value_.__r.__words[2], (long long *)&v189, (long long *)&v190, (std::string *)v191.__r_.__value_.__l.__data_);
              if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&v185, v195.__r_.__value_.__l.__data_, v195.__r_.__value_.__l.__size_);
              }
              else {
                std::string v185 = v195;
              }
              memset(&v187, 0, sizeof(v187));
              v183.__r_.__value_.__r.__words[0] = (std::string::size_type)&v187;
              v183.__r_.__value_.__s.__data_[8] = 0;
              v187.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
              v187.__r_.__value_.__l.__size_ = v187.__r_.__value_.__r.__words[0];
              v187.__r_.__value_.__r.__words[2] = v187.__r_.__value_.__r.__words[0] + 24;
              v187.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v187.__r_.__value_.__r.__words[2], (long long *)&v185, (long long *)&v186, (std::string *)v187.__r_.__value_.__l.__data_);
              Espresso::single_match_state<Espresso::generic_pool_kernel>::add_kernel(v51, &v147, &v193, &v195, (std::string **)&v191, (std::string **)&v187);
              v183.__r_.__value_.__r.__words[0] = (std::string::size_type)&v187;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v183);
              if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v185.__r_.__value_.__l.__data_);
              }
              v187.__r_.__value_.__r.__words[0] = (std::string::size_type)&v191;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v187);
              if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v189.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v193.__r_.__value_.__l.__data_);
              }
              if (v148) {
                nitro::nitro_function::nitro_function(v148);
              }
              if (v70) {
                nitro::nitro_function::nitro_function(v70);
              }
              if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                size_t v71 = HIBYTE(v157.__r_.__value_.__r.__words[2]);
              }
              else {
                size_t v71 = v157.__r_.__value_.__l.__size_;
              }
              std::string::basic_string[abi:ne180100]((uint64_t)&v189, v71 + 8);
              if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v72 = &v189;
              }
              else {
                uint64_t v72 = (std::string *)v189.__r_.__value_.__r.__words[0];
              }
              if (v71)
              {
                if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  int v73 = &v157;
                }
                else {
                  int v73 = (std::string *)v157.__r_.__value_.__r.__words[0];
                }
                memmove(v72, v73, v71);
              }
              strcpy((char *)v72 + v71, "__@pool_");
              std::to_string(&v187, v52);
              if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string v74 = &v187;
              }
              else {
                std::string v74 = (std::string *)v187.__r_.__value_.__r.__words[0];
              }
              if ((v187.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v75 = HIBYTE(v187.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v75 = v187.__r_.__value_.__l.__size_;
              }
              uint64_t v76 = std::string::append(&v189, (const std::string::value_type *)v74, v75);
              long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
              v191.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v191.__r_.__value_.__l.__data_ = v77;
              v76->__r_.__value_.__l.__size_ = 0;
              v76->__r_.__value_.__r.__words[2] = 0;
              v76->__r_.__value_.__r.__words[0] = 0;
              int v78 = std::string::append(&v191, "_");
              long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
              *(void *)&v137[16] = *((void *)&v78->__r_.__value_.__l + 2);
              *(_OWORD *)int v137 = v79;
              v78->__r_.__value_.__l.__size_ = 0;
              v78->__r_.__value_.__r.__words[2] = 0;
              v78->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v185, v36);
              if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v80 = &v185;
              }
              else {
                uint64_t v80 = (std::string *)v185.__r_.__value_.__r.__words[0];
              }
              if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v81 = HIBYTE(v185.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v81 = v185.__r_.__value_.__l.__size_;
              }
              uint64_t v82 = std::string::append((std::string *)v137, (const std::string::value_type *)v80, v81);
              long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
              v193.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v193.__r_.__value_.__l.__data_ = v83;
              v82->__r_.__value_.__l.__size_ = 0;
              v82->__r_.__value_.__r.__words[2] = 0;
              v82->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v185.__r_.__value_.__l.__data_);
              }
              if ((v137[23] & 0x80000000) != 0) {
                operator delete(*(void **)v137);
              }
              if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v191.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v187.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v189.__r_.__value_.__l.__data_);
              }
              *(_OWORD *)&v137[12] = xmmword_192DC3600;
              uint64_t v138 = 0x200000000;
              __int16 v139 = 1;
              long long v140 = 0u;
              long long v141 = 0u;
              uint64_t v142 = 0;
              uint64_t v143 = 0;
              uint64_t v144 = 0x100000001;
              uint64_t v145 = 0;
              uint64_t v146 = 0;
              *(_DWORD *)((char *)&v141 + 2) = 1;
              *(_DWORD *)int v137 = 0;
              *(_DWORD *)&v137[4] = v8;
              *(_DWORD *)&v137[8] = v50;
              uint64_t v84 = v158;
              std::string::basic_string[abi:ne180100]<0>(&v191, "pool");
              Espresso::abstract_engine_factory::make_kernel_priv(v84, (uint64_t)&v162, (uint64_t)&v191, (uint64_t)v137, &v161);
              if (!v189.__r_.__value_.__r.__words[0])
              {
                uint64_t v85 = 0;
LABEL_181:
                int v86 = 0;
LABEL_182:
                if (v189.__r_.__value_.__l.__size_) {
                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v189.__r_.__value_.__l.__size_);
                }
                goto LABEL_184;
              }
              if (!v85) {
                goto LABEL_181;
              }
              int v86 = (std::__shared_weak_count *)v189.__r_.__value_.__l.__size_;
              if (v189.__r_.__value_.__l.__size_)
              {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v189.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                goto LABEL_182;
              }
LABEL_184:
              if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v191.__r_.__value_.__l.__data_);
              }
              uint64_t v135 = v85;
              long long v136 = v86;
              if (v86) {
                atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              std::string::basic_string[abi:ne180100]<0>(&v191, "pool");
              if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&v187, v195.__r_.__value_.__l.__data_, v195.__r_.__value_.__l.__size_);
              }
              else {
                std::string v187 = v195;
              }
              memset(&v189, 0, sizeof(v189));
              v185.__r_.__value_.__r.__words[0] = (std::string::size_type)&v189;
              v185.__r_.__value_.__s.__data_[8] = 0;
              v189.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
              v189.__r_.__value_.__l.__size_ = v189.__r_.__value_.__r.__words[0];
              v189.__r_.__value_.__r.__words[2] = v189.__r_.__value_.__r.__words[0] + 24;
              v189.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v189.__r_.__value_.__r.__words[2], (long long *)&v187, (long long *)&v188, (std::string *)v189.__r_.__value_.__l.__data_);
              if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&v183, v193.__r_.__value_.__l.__data_, v193.__r_.__value_.__l.__size_);
              }
              else {
                std::string v183 = v193;
              }
              memset(&v185, 0, sizeof(v185));
              uint64_t v181 = &v185;
              char v182 = 0;
              v185.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
              v185.__r_.__value_.__l.__size_ = v185.__r_.__value_.__r.__words[0];
              v185.__r_.__value_.__r.__words[2] = v185.__r_.__value_.__r.__words[0] + 24;
              v185.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v185.__r_.__value_.__r.__words[2], (long long *)&v183, (long long *)&v184, (std::string *)v185.__r_.__value_.__l.__data_);
              Espresso::single_match_state<Espresso::generic_pool_kernel>::add_kernel(v51, &v135, &v191, &v193, (std::string **)&v189, (std::string **)&v185);
              uint64_t v181 = &v185;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v181);
              if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v183.__r_.__value_.__l.__data_);
              }
              v185.__r_.__value_.__r.__words[0] = (std::string::size_type)&v189;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v185);
              if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v187.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v191.__r_.__value_.__l.__data_);
              }
              if (v136) {
                nitro::nitro_function::nitro_function(v136);
              }
              if (v86) {
                nitro::nitro_function::nitro_function(v86);
              }
              long long v87 = (_OWORD *)v151.__r_.__value_.__l.__size_;
              if (v151.__r_.__value_.__l.__size_ >= v151.__r_.__value_.__r.__words[2])
              {
                uint64_t v89 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v151.__r_.__value_.__l.__data_, (uint64_t)&v193);
              }
              else
              {
                if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v151.__r_.__value_.__l.__size_, v193.__r_.__value_.__l.__data_, v193.__r_.__value_.__l.__size_);
                }
                else
                {
                  long long v88 = *(_OWORD *)&v193.__r_.__value_.__l.__data_;
                  *(void *)(v151.__r_.__value_.__l.__size_ + 16) = *((void *)&v193.__r_.__value_.__l + 2);
                  _OWORD *v87 = v88;
                }
                uint64_t v89 = (std::string *)((char *)v87 + 24);
              }
              v151.__r_.__value_.__l.__size_ = (std::string::size_type)v89;
              if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v193.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v195.__r_.__value_.__l.__data_);
              }
              ++v52;
              v53 += v8;
              if (v127 == v52) {
                goto LABEL_215;
              }
            }
            long long v69 = 0;
LABEL_120:
            int v70 = 0;
            goto LABEL_121;
          }
LABEL_215:
          if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v90 = HIBYTE(v157.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v90 = v157.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v193, v90 + 9);
          if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v91 = &v193;
          }
          else {
            uint64_t v91 = (std::string *)v193.__r_.__value_.__r.__words[0];
          }
          if (v90)
          {
            if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v92 = &v157;
            }
            else {
              uint64_t v92 = (std::string *)v157.__r_.__value_.__r.__words[0];
            }
            memmove(v91, v92, v90);
          }
          strcpy((char *)v91 + v90, "__@concat");
          int v93 = std::string::append(&v193, "_");
          long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
          v195.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v195.__r_.__value_.__l.__data_ = v94;
          v93->__r_.__value_.__l.__size_ = 0;
          v93->__r_.__value_.__r.__words[2] = 0;
          v93->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v191, v36);
          uint64_t v5 = v51;
          if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v95 = &v191;
          }
          else {
            int v95 = (std::string *)v191.__r_.__value_.__r.__words[0];
          }
          if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v96 = HIBYTE(v191.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v96 = v191.__r_.__value_.__l.__size_;
          }
          std::string v97 = std::string::append(&v195, (const std::string::value_type *)v95, v96);
          uint64_t v9 = v50;
          long long v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
          *(void *)&v137[16] = *((void *)&v97->__r_.__value_.__l + 2);
          *(_OWORD *)int v137 = v98;
          v97->__r_.__value_.__l.__size_ = 0;
          v97->__r_.__value_.__r.__words[2] = 0;
          v97->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v191.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v195.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v193.__r_.__value_.__l.__data_);
          }
          if (v151.__r_.__value_.__l.__size_ - v151.__r_.__value_.__r.__words[0] == 24)
          {
            LODWORD(v187.__r_.__value_.__l.__data_) = 0;
            uint64_t v99 = v158;
            std::string::basic_string[abi:ne180100]<0>(&v195, "copy");
            Espresso::abstract_engine_factory::make_kernel_priv(v99, (uint64_t)&v162, (uint64_t)&v195, (uint64_t)&v187, &v161);
            if (v193.__r_.__value_.__r.__words[0])
            {
              if (v100)
              {
                int v101 = (std::__shared_weak_count *)v193.__r_.__value_.__l.__size_;
                if (v193.__r_.__value_.__l.__size_)
                {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v193.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
LABEL_249:
                  if (v193.__r_.__value_.__l.__size_) {
                    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v193.__r_.__value_.__l.__size_);
                  }
                }
                if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v195.__r_.__value_.__l.__data_);
                }
                long long v133 = v100;
                uint64_t v134 = v101;
                if (v101) {
                  atomic_fetch_add_explicit(&v101->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                std::string::basic_string[abi:ne180100]<0>(&v195, "copy");
                if ((v137[23] & 0x80000000) != 0) {
                  std::string::__init_copy_ctor_external(&v191, *(const std::string::value_type **)v137, *(std::string::size_type *)&v137[8]);
                }
                else {
                  std::string v191 = *(std::string *)v137;
                }
                memset(&v193, 0, sizeof(v193));
                v189.__r_.__value_.__r.__words[0] = (std::string::size_type)&v193;
                v189.__r_.__value_.__s.__data_[8] = 0;
                v193.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
                v193.__r_.__value_.__l.__size_ = v193.__r_.__value_.__r.__words[0];
                v193.__r_.__value_.__r.__words[2] = v193.__r_.__value_.__r.__words[0] + 24;
                v193.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v193.__r_.__value_.__r.__words[2], (long long *)&v191, (long long *)&v192, (std::string *)v193.__r_.__value_.__l.__data_);
                Espresso::single_match_state<Espresso::generic_pool_kernel>::add_kernel(v5, &v133, &v195, (const std::string *)v137, (std::string **)&v151, (std::string **)&v193);
                v189.__r_.__value_.__r.__words[0] = (std::string::size_type)&v193;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v189);
                if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v191.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v195.__r_.__value_.__l.__data_);
                }
                std::string v104 = v134;
                if (!v134) {
                  goto LABEL_274;
                }
                goto LABEL_273;
              }
            }
            else
            {
              uint64_t v100 = 0;
            }
            int v101 = 0;
            goto LABEL_249;
          }
          WORD2(v187.__r_.__value_.__r.__words[0]) = 0;
          LODWORD(v187.__r_.__value_.__l.__data_) = 0;
          uint64_t v102 = v158;
          std::string::basic_string[abi:ne180100]<0>(&v195, "general_concat");
          Espresso::abstract_engine_factory::make_kernel_priv(v102, (uint64_t)&v162, (uint64_t)&v195, (uint64_t)&v187, &v161);
          if (!v193.__r_.__value_.__r.__words[0])
          {
            int v103 = 0;
LABEL_258:
            int v101 = 0;
            goto LABEL_259;
          }
          if (!v103) {
            goto LABEL_258;
          }
          int v101 = (std::__shared_weak_count *)v193.__r_.__value_.__l.__size_;
          if (!v193.__r_.__value_.__l.__size_) {
            goto LABEL_261;
          }
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v193.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
LABEL_259:
          if (v193.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v193.__r_.__value_.__l.__size_);
          }
LABEL_261:
          if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v195.__r_.__value_.__l.__data_);
          }
          int v131 = v103;
          int v132 = v101;
          if (v101) {
            atomic_fetch_add_explicit(&v101->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(&v195, "general_concat");
          if ((v137[23] & 0x80000000) != 0) {
            std::string::__init_copy_ctor_external(&v191, *(const std::string::value_type **)v137, *(std::string::size_type *)&v137[8]);
          }
          else {
            std::string v191 = *(std::string *)v137;
          }
          memset(&v193, 0, sizeof(v193));
          v189.__r_.__value_.__r.__words[0] = (std::string::size_type)&v193;
          v189.__r_.__value_.__s.__data_[8] = 0;
          v193.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
          v193.__r_.__value_.__l.__size_ = v193.__r_.__value_.__r.__words[0];
          v193.__r_.__value_.__r.__words[2] = v193.__r_.__value_.__r.__words[0] + 24;
          v193.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v193.__r_.__value_.__r.__words[2], (long long *)&v191, (long long *)&v192, (std::string *)v193.__r_.__value_.__l.__data_);
          Espresso::single_match_state<Espresso::generic_pool_kernel>::add_kernel(v5, &v131, &v195, (const std::string *)v137, (std::string **)&v151, (std::string **)&v193);
          v189.__r_.__value_.__r.__words[0] = (std::string::size_type)&v193;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v189);
          if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v191.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v195.__r_.__value_.__l.__data_);
          }
          std::string v104 = v132;
          if (!v132) {
            goto LABEL_274;
          }
LABEL_273:
          nitro::nitro_function::nitro_function(v104);
LABEL_274:
          if (v101) {
            nitro::nitro_function::nitro_function(v101);
          }
          uint64_t v105 = v154;
          if ((unint64_t)v154 >= v155)
          {
            std::string v107 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v153, (uint64_t)v137);
          }
          else
          {
            if ((v137[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(v154, *(const std::string::value_type **)v137, *(std::string::size_type *)&v137[8]);
            }
            else
            {
              long long v106 = *(_OWORD *)v137;
              v154->__r_.__value_.__r.__words[2] = *(void *)&v137[16];
              *(_OWORD *)&v105->__r_.__value_.__l.__data_ = v106;
            }
            std::string v107 = v105 + 1;
          }
          uint64_t v154 = v107;
          if ((v137[23] & 0x80000000) != 0) {
            operator delete(*(void **)v137);
          }
          *(void *)int v137 = &v151;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v137);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (++v36 == v122)
          {
            uint64_t v108 = v153;
            char v109 = v154;
            goto LABEL_296;
          }
        }
      }
      uint64_t v108 = 0;
      char v109 = 0;
LABEL_296:
      if ((char *)v109 - v108 == 24)
      {
        LODWORD(v191.__r_.__value_.__l.__data_) = 0;
        uint64_t v110 = v158;
        std::string::basic_string[abi:ne180100]<0>(v137, "copy");
        Espresso::abstract_engine_factory::make_kernel_priv(v110, (uint64_t)&v162, (uint64_t)v137, (uint64_t)&v191, &v161);
        if (__p.__r_.__value_.__r.__words[0])
        {
          if (v111)
          {
            uint64_t v112 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
            }
            goto LABEL_307;
          }
        }
        else
        {
          int v111 = 0;
        }
        uint64_t v112 = 0;
LABEL_307:
        if (__p.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
        }
        if ((v137[23] & 0x80000000) != 0) {
          operator delete(*(void **)v137);
        }
        v130[0] = v111;
        v130[1] = v112;
        if (v112) {
          atomic_fetch_add_explicit(&v112->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v137, "copy");
        if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v115 = HIBYTE(v157.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v115 = v157.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&__p, v115 + 7);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if (v115)
        {
          if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string v117 = &v157;
          }
          else {
            std::string v117 = (std::string *)v157.__r_.__value_.__r.__words[0];
          }
          memmove(p_p, v117, v115);
        }
        strcpy((char *)p_p + v115, "__@copy");
        if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v195, v157.__r_.__value_.__l.__data_, v157.__r_.__value_.__l.__size_);
        }
        else {
          std::string v195 = v157;
        }
        memset(&v151, 0, sizeof(v151));
        v193.__r_.__value_.__r.__words[0] = (std::string::size_type)&v151;
        v193.__r_.__value_.__s.__data_[8] = 0;
        v151.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
        v151.__r_.__value_.__l.__size_ = v151.__r_.__value_.__r.__words[0];
        v151.__r_.__value_.__r.__words[2] = v151.__r_.__value_.__r.__words[0] + 24;
        v151.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v151.__r_.__value_.__r.__words[2], (long long *)&v195, &v196, (std::string *)v151.__r_.__value_.__l.__data_);
        Espresso::single_match_state<Espresso::generic_pool_kernel>::add_kernel(v5, v130, (const std::string *)v137, &__p, (std::string **)&v153, (std::string **)&v151);
LABEL_351:
        v193.__r_.__value_.__r.__words[0] = (std::string::size_type)&v151;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v193);
        if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v195.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if ((v137[23] & 0x80000000) != 0) {
          operator delete(*(void **)v137);
        }
        if (v112)
        {
          nitro::nitro_function::nitro_function(v112);
          nitro::nitro_function::nitro_function(v112);
        }
        *(void *)int v137 = &v153;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v137);
        if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v156.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v157.__r_.__value_.__l.__data_);
        }
        if (v159) {
          nitro::nitro_function::nitro_function(v159);
        }
        if (v163) {
          nitro::nitro_function::nitro_function(v163);
        }
        return;
      }
      WORD2(v191.__r_.__value_.__r.__words[0]) = 0;
      LODWORD(v191.__r_.__value_.__l.__data_) = 1;
      uint64_t v113 = v158;
      std::string::basic_string[abi:ne180100]<0>(v137, "general_concat");
      Espresso::abstract_engine_factory::make_kernel_priv(v113, (uint64_t)&v162, (uint64_t)v137, (uint64_t)&v191, &v161);
      if (__p.__r_.__value_.__r.__words[0])
      {
        if (v114)
        {
          uint64_t v112 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
          }
          goto LABEL_328;
        }
      }
      else
      {
        uint64_t v114 = 0;
      }
      uint64_t v112 = 0;
LABEL_328:
      if (__p.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
      }
      if ((v137[23] & 0x80000000) != 0) {
        operator delete(*(void **)v137);
      }
      v129[0] = v114;
      v129[1] = v112;
      if (v112) {
        atomic_fetch_add_explicit(&v112->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v137, "general_concat");
      if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v118 = HIBYTE(v157.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v118 = v157.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v118 + 9);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v119 = &__p;
      }
      else {
        std::string v119 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v118)
      {
        if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v120 = &v157;
        }
        else {
          std::string v120 = (std::string *)v157.__r_.__value_.__r.__words[0];
        }
        memmove(v119, v120, v118);
      }
      strcpy((char *)v119 + v118, "__@concat");
      if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v195, v157.__r_.__value_.__l.__data_, v157.__r_.__value_.__l.__size_);
      }
      else {
        std::string v195 = v157;
      }
      memset(&v151, 0, sizeof(v151));
      v193.__r_.__value_.__r.__words[0] = (std::string::size_type)&v151;
      v193.__r_.__value_.__s.__data_[8] = 0;
      v151.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v151.__r_.__value_.__l.__size_ = v151.__r_.__value_.__r.__words[0];
      v151.__r_.__value_.__r.__words[2] = v151.__r_.__value_.__r.__words[0] + 24;
      v151.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v151.__r_.__value_.__r.__words[2], (long long *)&v195, &v196, (std::string *)v151.__r_.__value_.__l.__data_);
      Espresso::single_match_state<Espresso::generic_pool_kernel>::add_kernel(v5, v129, (const std::string *)v137, &__p, (std::string **)&v153, (std::string **)&v151);
      goto LABEL_351;
    }
  }
}

void sub_19294BE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a72 < 0) {
    operator delete(__p);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  if (v74)
  {
    nitro::nitro_function::nitro_function(v74);
    nitro::nitro_function::nitro_function(v74);
  }
  a43 = &a73;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a74);
  }
  if (SLOBYTE(STACK[0x227]) < 0) {
    operator delete((void *)STACK[0x210]);
  }
  if (STACK[0x230]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x230]);
  }
  if (STACK[0x248]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x248]);
  }
  _Unwind_Resume(a1);
}

void ___Z31surround_kernel_with_transposesIN8Espresso23generic_split_nd_kernelELi2EEvPNS0_3netEPNS0_17ANECompilerEngine7contextENS0_18transpose_params_tES7_NSt3__18functionIFbRNS0_18single_match_stateIT_EEEEE_block_invoke(void *a1, int64x2_t *a2)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2->i64[0] + 8) == a1[4])
  {
    std::string::basic_string[abi:ne180100]<0>(v96, "__@transpose_transform");
    std::string::basic_string[abi:ne180100]<0>(v94, "__@transpose_transform_bottom");
    uint64_t v4 = a1[5];
    unint64_t v5 = a2[3].i32[2];
    uint64_t v6 = *(void *)(*(void *)(v4 + 32) + 16 * v5);
    if (*(char *)(v6 + 39) < 0)
    {
      std::string::__init_copy_ctor_external(&v93, *(const std::string::value_type **)(v6 + 16), *(void *)(v6 + 24));
      uint64_t v4 = a1[5];
      unint64_t v5 = a2[3].i32[2];
    }
    else
    {
      std::string v93 = *(std::string *)(v6 + 16);
    }
    *(void *)long long v106 = v5;
    int v7 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v4 + 56, v5, v106)[3];
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v92, *(const std::string::value_type **)v7, *((void *)v7 + 1));
    }
    else
    {
      long long v8 = *v7;
      v92.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
      *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v8;
    }
    uint64_t v9 = a1[5] + 96;
    *(void *)long long v106 = a2[3].i32[2];
    long long v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, *(unint64_t *)v106, v106);
    uint64_t v89 = 0;
    uint64_t v90 = 0;
    uint64_t v91 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v89, v10[3], v10[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10[4] - v10[3]) >> 3));
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v89, (const void **)v94, (uint64_t)&v88);
    uint64_t v85 = 0;
    int v86 = 0;
    uint64_t v87 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v85, (uint64_t)v89, v90, 0xAAAAAAAAAAAAAAABLL * ((v90 - (uint64_t)v89) >> 3));
    long long v12 = v85;
    for (uint64_t i = v86; v12 != i; ++v12)
    {
      if ((v97 & 0x80u) == 0) {
        BOOL v13 = v96;
      }
      else {
        BOOL v13 = (void **)v96[0];
      }
      if ((v97 & 0x80u) == 0) {
        std::string::size_type v14 = v97;
      }
      else {
        std::string::size_type v14 = (std::string::size_type)v96[1];
      }
      std::string::append(v12, (const std::string::value_type *)v13, v14);
    }
    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(a1[5] + 192), &v92))
    {
      uint64_t v15 = a1[9];
      if (!v15) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      if ((*(unsigned int (**)(uint64_t, int64x2_t *))(*(void *)v15 + 48))(v15, a2))
      {
        uint64_t v16 = a1[5];
        uint64_t v17 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v16 + 192), &v88);
        uint64_t v18 = *(std::__shared_weak_count **)(v16 + 24);
        uint64_t v83 = *(void *)(v16 + 16);
        uint64_t v84 = v18;
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::abstract_engine_factory::shared(&v77);
        unint64_t v19 = (long long *)v77;
        std::string::basic_string[abi:ne180100]<0>(v106, "transpose");
        LODWORD(__p.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v83 + 8))(*(void *)(v83 + 8));
        Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v19, (uint64_t)&v83, (uint64_t)v106, (uint64_t)(a1 + 10), (int *)&__p);
        if ((v106[23] & 0x80000000) != 0) {
          operator delete(*(void **)v106);
        }
        if (v78) {
          nitro::nitro_function::nitro_function(v78);
        }
        Espresso::abstract_engine_factory::shared(&v77);
        unint64_t v20 = (long long *)v77;
        std::string::basic_string[abi:ne180100]<0>(v106, "transpose");
        LODWORD(__p.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v83 + 8))(*(void *)(v83 + 8));
        Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v20, (uint64_t)&v83, (uint64_t)v106, (uint64_t)a1 + 100, (int *)&__p);
        if ((v106[23] & 0x80000000) != 0) {
          operator delete(*(void **)v106);
        }
        if (v78) {
          nitro::nitro_function::nitro_function(v78);
        }
        uint64_t v21 = v81;
        uint64_t v22 = (uint64_t **)(a1[5] + 184);
        v104.__r_.__value_.__r.__words[0] = (std::string::size_type)&v92;
        unint64_t v23 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22, &v92, (long long **)&v104);
        long long v24 = *(_OWORD *)(v23 + 72);
        *(_OWORD *)long long v106 = *(_OWORD *)(v23 + 56);
        *(_OWORD *)&v106[16] = v24;
        long long v25 = (const void *)*((void *)v23 + 12);
        *(void *)&v106[32] = *((void *)v23 + 11);
        long long v107 = 0uLL;
        *(void *)&long long v108 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v107, v25, *((void *)v23 + 13), (uint64_t)(*((void *)v23 + 13) - (void)v25) >> 2);
        memset(&__p, 0, sizeof(__p));
        v104.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        v104.__r_.__value_.__s.__data_[8] = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[0] + 64;
        __p.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&__p.__r_.__value_.__r.__words[2], (long long *)v106, (long long *)((char *)&v108 + 8), (uint64_t)__p.__r_.__value_.__l.__data_);
        (*(void (**)(std::string **__return_ptr, uint64_t, std::string *))(*(void *)v21 + 64))(&v77, v21, &__p);
        long long v26 = (long long *)v77;
        uint64_t v27 = (uint64_t **)(a1[5] + 184);
        p_p = &v88;
        uint64_t v28 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27, &v88, (long long **)&p_p);
        long long v29 = *v26;
        long long v30 = v26[1];
        *((void *)v28 + 11) = *((void *)v26 + 4);
        *(_OWORD *)(v28 + 72) = v30;
        *(_OWORD *)(v28 + 56) = v29;
        if (v28 + 56 != (char *)v26) {
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v28 + 96, *((char **)v26 + 5), *((void *)v26 + 6), (uint64_t)(*((void *)v26 + 6) - *((void *)v26 + 5)) >> 2);
        }
        v104.__r_.__value_.__r.__words[0] = (std::string::size_type)&v77;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
        v104.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
        if ((void)v107)
        {
          *((void *)&v107 + 1) = v107;
          operator delete((void *)v107);
        }
        int v31 = (uint64_t **)(a1[5] + 184);
        long long v77 = &v88;
        int v32 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v31, &v88, (long long **)&v77)+ 19);
        BOOL v33 = (uint64_t **)(a1[5] + 184);
        long long v77 = &v88;
        int v34 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v33, &v88, (long long **)&v77);
        if (v32 <= 2) {
          int v35 = 2;
        }
        else {
          int v35 = v32;
        }
        *((_DWORD *)v34 + 19) = v35;
        uint64_t v36 = a2->i64[0];
        int v37 = (uint64_t **)(a1[5] + 184);
        v104.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
        int v38 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v37, &v88, (long long **)&v104);
        long long v39 = *(_OWORD *)(v38 + 72);
        *(_OWORD *)long long v106 = *(_OWORD *)(v38 + 56);
        *(_OWORD *)&v106[16] = v39;
        uint64_t v40 = (const void *)*((void *)v38 + 12);
        *(void *)&v106[32] = *((void *)v38 + 11);
        long long v107 = 0uLL;
        *(void *)&long long v108 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v107, v40, *((void *)v38 + 13), (uint64_t)(*((void *)v38 + 13) - (void)v40) >> 2);
        memset(&__p, 0, sizeof(__p));
        v104.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        v104.__r_.__value_.__s.__data_[8] = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[0] + 64;
        __p.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&__p.__r_.__value_.__r.__words[2], (long long *)v106, (long long *)((char *)&v108 + 8), (uint64_t)__p.__r_.__value_.__l.__data_);
        (*(void (**)(std::string **__return_ptr, uint64_t, std::string *))(*(void *)v36 + 64))(&v77, v36, &__p);
        v104.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
        if ((void)v107)
        {
          *((void *)&v107 + 1) = v107;
          operator delete((void *)v107);
        }
        uint64_t v41 = v85;
        if (v86 != v85)
        {
          uint64_t v42 = 0;
          uint64_t v43 = 0;
          unint64_t v44 = 0;
          do
          {
            long long v45 = (long long *)v77;
            int v46 = (uint64_t **)(a1[5] + 184);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41[v42];
            uint64_t v47 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v46, v41[v42].__r_.__value_.__r.__words, (long long **)&__p);
            long long v48 = v45[v43];
            long long v49 = v45[v43 + 1];
            *((void *)v47 + 11) = *(void *)&v45[v43 + 2];
            *(_OWORD *)(v47 + 72) = v49;
            *(_OWORD *)(v47 + 56) = v48;
            if (&v45[v43] != (long long *)(v47 + 56)) {
              std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v47 + 96, *((char **)&v45[v43 + 2] + 1), *(void *)&v45[v43 + 3], (uint64_t)(*(void *)&v45[v43 + 3] - *((void *)&v45[v43 + 2] + 1)) >> 2);
            }
            ++v44;
            uint64_t v41 = v85;
            v43 += 4;
            ++v42;
          }
          while (v44 < 0xAAAAAAAAAAAAAAABLL * (((char *)v86 - (char *)v85) >> 3));
        }
        long long v108 = 0u;
        long long v107 = 0u;
        *(_DWORD *)long long v106 = a2[3].i32[2];
        memset(&v106[8], 0, 32);
        unint64_t v50 = a2[2].u64[1];
        if (v50 >= a2[3].i64[0])
        {
          uint64_t v51 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)v106);
        }
        else
        {
          std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a2[2].i64[1], (uint64_t)v106);
          uint64_t v51 = v50 + 72;
          a2[2].i64[1] = v50 + 72;
        }
        a2[2].i64[1] = v51;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v107 + 8;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106[24];
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        if (*(void *)&v106[16]) {
          nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v106[16]);
        }
        if (!v17)
        {
          unint64_t v52 = v82;
          v75[0] = v81;
          v75[1] = v82;
          if (v82) {
            atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(v106, "transpose");
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v93.__r_.__value_.__l.__data_, (const void **)v94, (uint64_t)&v104);
          int v53 = std::string::append(&v104, "__fwd");
          long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v54;
          v53->__r_.__value_.__l.__size_ = 0;
          v53->__r_.__value_.__r.__words[2] = 0;
          v53->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v102, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
          }
          else {
            std::string v102 = v92;
          }
          p_p = 0;
          int v73 = 0;
          std::string v74 = 0;
          p_p_p = (std::string *)&p_p;
          LOBYTE(v70) = 0;
          p_p = (std::string *)operator new(0x18uLL);
          int v73 = p_p;
          std::string v74 = p_p + 1;
          int v73 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v74, (long long *)&v102, (long long *)&v103, p_p);
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v100, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
          }
          else {
            std::string v100 = v88;
          }
          p_p_p = 0;
          int v70 = 0;
          p_data = 0;
          p_p_p_p = (void ***)&p_p_p;
          char v99 = 0;
          p_p_p = (std::string *)operator new(0x18uLL);
          int v70 = p_p_p;
          p_data = (void **)&p_p_p[1].__r_.__value_.__l.__data_;
          int v70 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v100, (long long *)&v101, p_p_p);
          Espresso::single_match_state<Espresso::generic_split_nd_kernel>::add_kernel(a2, v75, (const std::string *)v106, &__p, &p_p, &p_p_p);
          p_p_p_p = (void ***)&p_p_p;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_p_p);
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v100.__r_.__value_.__l.__data_);
          }
          p_p_p = (std::string *)&p_p;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_p);
          if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v102.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v104.__r_.__value_.__l.__data_);
          }
          if ((v106[23] & 0x80000000) != 0) {
            operator delete(*(void **)v106);
          }
          if (v52) {
            nitro::nitro_function::nitro_function(v52);
          }
        }
        int v55 = (std::__shared_weak_count *)a2->i64[1];
        v68[0] = a2->i64[0];
        v68[1] = v55;
        if (v55) {
          atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v106, "split_nd");
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v104, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
        }
        else {
          std::string v104 = v88;
        }
        memset(&__p, 0, sizeof(__p));
        p_p = &__p;
        LOBYTE(v73) = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[0] + 24;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__p.__r_.__value_.__r.__words[2], (long long *)&v104, (long long *)&v105, (std::string *)__p.__r_.__value_.__l.__data_);
        Espresso::single_match_state<Espresso::generic_split_nd_kernel>::add_kernel(a2, v68, (const std::string *)v106, &v93, (std::string **)&__p, &v85);
        p_p = &__p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v104.__r_.__value_.__l.__data_);
        }
        if ((v106[23] & 0x80000000) != 0) {
          operator delete(*(void **)v106);
        }
        if (v55) {
          nitro::nitro_function::nitro_function(v55);
        }
        if (Espresso::is_kernel_generating_output(*(Espresso **)(a2[1].i64[0] + 64), v56))
        {
          uint64_t v57 = *(void *)(a2[1].i64[0] + 64);
          std::string::basic_string[abi:ne180100]<0>(v106, "is_output");
          std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__erase_unique<std::string>((void *)(v57 + 240), v106);
          if ((v106[23] & 0x80000000) != 0) {
            operator delete(*(void **)v106);
          }
        }
        if (v86 != v85)
        {
          unint64_t v58 = 0;
          unint64_t v59 = 0;
          while (1)
          {
            long long v60 = v80;
            v67[0] = v79;
            v67[1] = v80;
            if (v80) {
              atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(v106, "transpose");
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v93.__r_.__value_.__l.__data_, (const void **)v96, (uint64_t)&v104);
            unint64_t v61 = std::string::append(&v104, "__bwd");
            long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v62;
            v61->__r_.__value_.__l.__size_ = 0;
            v61->__r_.__value_.__r.__words[2] = 0;
            v61->__r_.__value_.__r.__words[0] = 0;
            long long v63 = &v85[v58 / 3];
            if (SHIBYTE(v85[v58 / 3].__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(&v102, v63->__r_.__value_.__l.__data_, v63->__r_.__value_.__l.__size_);
            }
            else
            {
              long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
              v102.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v64;
            }
            p_p = 0;
            int v73 = 0;
            std::string v74 = 0;
            p_p_p = (std::string *)&p_p;
            LOBYTE(v70) = 0;
            p_p = (std::string *)operator new(0x18uLL);
            int v73 = p_p;
            std::string v74 = p_p + 1;
            int v73 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v74, (long long *)&v102, (long long *)&v103, p_p);
            int v65 = &v89[v58];
            if (SHIBYTE(v89[v58 + 2]) < 0)
            {
              std::string::__init_copy_ctor_external(&v100, (const std::string::value_type *)*v65, (std::string::size_type)v65[1]);
            }
            else
            {
              long long v66 = *(_OWORD *)v65;
              v100.__r_.__value_.__r.__words[2] = (std::string::size_type)v65[2];
              *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v66;
            }
            p_p_p = 0;
            int v70 = 0;
            p_data = 0;
            p_p_p_p = (void ***)&p_p_p;
            char v99 = 0;
            p_p_p = (std::string *)operator new(0x18uLL);
            int v70 = p_p_p;
            p_data = (void **)&p_p_p[1].__r_.__value_.__l.__data_;
            int v70 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v100, (long long *)&v101, p_p_p);
            Espresso::single_match_state<Espresso::generic_split_nd_kernel>::add_kernel(a2, v67, (const std::string *)v106, &__p, &p_p, &p_p_p);
            p_p_p_p = (void ***)&p_p_p;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_p_p);
            if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v100.__r_.__value_.__l.__data_);
            }
            p_p_p = (std::string *)&p_p;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_p);
            if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v102.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v104.__r_.__value_.__l.__data_);
            }
            if ((v106[23] & 0x80000000) != 0) {
              break;
            }
            if (v60) {
              goto LABEL_103;
            }
LABEL_104:
            ++v59;
            v58 += 3;
            if (v59 >= 0xAAAAAAAAAAAAAAABLL * (((char *)v86 - (char *)v85) >> 3)) {
              goto LABEL_108;
            }
          }
          operator delete(*(void **)v106);
          if (!v60) {
            goto LABEL_104;
          }
LABEL_103:
          nitro::nitro_function::nitro_function(v60);
          goto LABEL_104;
        }
LABEL_108:
        *(void *)long long v106 = &v77;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v106);
        if (v80) {
          nitro::nitro_function::nitro_function(v80);
        }
        if (v82) {
          nitro::nitro_function::nitro_function(v82);
        }
        if (v84) {
          nitro::nitro_function::nitro_function(v84);
        }
      }
    }
    *(void *)long long v106 = &v85;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v106);
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v88.__r_.__value_.__l.__data_);
    }
    *(void *)long long v106 = &v89;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v106);
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v92.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v93.__r_.__value_.__l.__data_);
    }
    if (v95 < 0) {
      operator delete(v94[0]);
    }
    if ((char)v97 < 0) {
      operator delete(v96[0]);
    }
  }
}

void sub_19294D1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,void *a63)
{
  a13 = (uint64_t)&a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (*(char *)(v73 - 217) < 0) {
    operator delete(*(void **)(v73 - 240));
  }
  if (a26 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v73 - 185) < 0) {
    operator delete(*(void **)(v73 - 208));
  }
  if (*(char *)(v73 - 153) < 0) {
    operator delete(*(void **)(v73 - 176));
  }
  if (v72) {
    nitro::nitro_function::nitro_function(v72);
  }
  *(void *)(v73 - 176) = &a28;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v73 - 176));
  if (a32) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)a32);
  }
  if (a34) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)a34);
  }
  if (a36) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)a36);
  }
  *(void *)(v73 - 176) = &a37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v73 - 176));
  if (a45 < 0) {
    operator delete(a40);
  }
  *(void *)(v73 - 176) = &a46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v73 - 176));
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a61 < 0) {
    operator delete(a56);
  }
  if (a68 < 0) {
    operator delete(a63);
  }
  if (a72 < 0) {
    operator delete(a69);
  }
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_ea8_48c90_ZTSNSt3__18functionIFbRN8Espresso18single_match_stateINS1_23generic_split_nd_kernelEEEEEE(uint64_t a1)
{
  return std::__function::__value_func<BOOL ()(Espresso::single_match_state<Espresso::generic_split_nd_kernel> &)>::~__value_func[abi:ne180100]((void *)(a1 + 48));
}

uint64_t __copy_helper_block_ea8_48c90_ZTSNSt3__18functionIFbRN8Espresso18single_match_stateINS1_23generic_split_nd_kernelEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<BOOL ()(Espresso::single_match_state<Espresso::generic_split_nd_kernel> &)>::__value_func[abi:ne180100](a1 + 48, a2 + 48);
}

void Espresso::single_match_state<Espresso::generic_split_nd_kernel>::add_kernel(int64x2_t *a1, void *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6)
{
  __int32 v23 = 0;
  memset(v26, 0, sizeof(v26));
  long long v12 = (char *)operator new(0xF8uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)long long v12 = &unk_1EE389DF0;
  *((void *)v12 + 3) = &unk_1EE36C758;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 161) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((void *)v12 + 30) = 0;
  long long v24 = v12 + 24;
  long long v25 = (std::__shared_weak_count *)v12;
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  if (v14)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    uint64_t v15 = (std::__shared_weak_count *)*((void *)v12 + 12);
    *((void *)v12 + 11) = v13;
    *((void *)v12 + 12) = v14;
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
  }
  else
  {
    *((void *)v12 + 11) = v13;
    *((void *)v12 + 12) = 0;
  }
  std::string::operator=((std::string *)(v24 + 16), a4);
  std::string::operator=((std::string *)(v24 + 40), a3);
  uint64_t v16 = *(uint64_t (****)(void))(*(void *)(*a2 + 8) + 8);
  uint64_t v17 = v24;
  *((_DWORD *)v24 + 2) = (**v16)(v16);
  uint64_t v18 = a1[1].i64[0];
  if (v18)
  {
    *((_DWORD *)v17 + 3) = *(_DWORD *)(v18 + 12);
    if (*(char *)(v18 + 223) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v18 + 200), *(void *)(v18 + 208));
    }
    else {
      std::string __p = *(std::string *)(v18 + 200);
    }
    std::string::operator=((std::string *)(v17 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v19 = *(void *)(a1[4].i64[0] + 32);
    if (*(void *)(a1[4].i64[0] + 40) != v19) {
      *((_DWORD *)v17 + 3) = *(_DWORD *)(*(void *)v19 + 12);
    }
  }
  if (v26 != (_OWORD *)a5) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v26, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  }
  if ((std::string **)((char *)&v26[1] + 8) != a6) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v26[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  }
  __int32 v23 = a1[3].i32[2];
  unint64_t v20 = a1[2].u64[1];
  if (v20 >= a1[3].i64[0])
  {
    uint64_t v21 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v23);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v23);
    uint64_t v21 = v20 + 72;
    a1[2].i64[1] = v20 + 72;
  }
  a1[2].i64[1] = v21;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
}

void sub_19294D7D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void *std::__function::__func<Espresso::ANECompilerEngine::context::workaround_split_restrictions_on_w_using_transpose(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0,std::allocator<Espresso::ANECompilerEngine::context::workaround_split_restrictions_on_w_using_transpose(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0>,BOOL ()(Espresso::single_match_state<Espresso::generic_split_nd_kernel> &)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::ANECompilerEngine::context::workaround_split_restrictions_on_w_using_transpose(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0,std::allocator<Espresso::ANECompilerEngine::context::workaround_split_restrictions_on_w_using_transpose(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0>,BOOL ()(Espresso::single_match_state<Espresso::generic_split_nd_kernel> &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso17ANECompilerEngine7context50workaround_split_restrictions_on_w_using_transposeEPNS_3netEPS1_E3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::ANECompilerEngine::context::workaround_split_restrictions_on_w_using_transpose(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0,std::allocator<Espresso::ANECompilerEngine::context::workaround_split_restrictions_on_w_using_transpose(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0>,BOOL ()(Espresso::single_match_state<Espresso::generic_split_nd_kernel> &)>::operator()(uint64_t a1, int *a2)
{
  uint64_t v4 = **(void **)(a1 + 8) + 56;
  *(void *)&long long v27 = a2[14];
  unint64_t v5 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v4, v27, &v27)[3];
  if (*((char *)v5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)v5, *((void *)v5 + 1));
  }
  else
  {
    long long v6 = *v5;
    v33.__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v6;
  }
  int v7 = *(uint64_t **)(a1 + 8);
  uint64_t v8 = *v7;
  if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(*v7 + 192), &v33))
  {
    uint64_t v25 = 0;
    goto LABEL_29;
  }
  int v34 = &v33;
  uint64_t v9 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v8 + 184), &v33, (long long **)&v34);
  long long v10 = *(_OWORD *)(v9 + 72);
  long long v27 = *(_OWORD *)(v9 + 56);
  long long v28 = v10;
  long long v11 = (const void *)*((void *)v9 + 12);
  uint64_t v29 = *((void *)v9 + 11);
  std::string __p = 0;
  int v31 = 0;
  uint64_t v32 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v11, *((void *)v9 + 13), (uint64_t)(*((void *)v9 + 13) - (void)v11) >> 2);
  uint64_t v12 = **(void **)(a1 + 8) + 96;
  unint64_t v13 = a2[14];
  int v34 = (std::string *)v13;
  uint64_t v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v12, v13, &v34);
  uint64_t v15 = (std::string *)v14[3];
  uint64_t v16 = (std::string *)v14[4];
  if (v15 == v16) {
    goto LABEL_25;
  }
  char v17 = 1;
  do
  {
    uint64_t v18 = **(void **)(a1 + 8);
    uint64_t v19 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v18 + 352, v15);
    if ((void *)(v18 + 360) == v19)
    {
      int v20 = 31;
    }
    else if (((*((_DWORD *)v19 + 16) - 2) & 0xFFFFFFFD) != 0)
    {
      int v20 = 31;
    }
    else
    {
      int v20 = 63;
    }
    int v34 = v15;
    v17 &= (*((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v18 + 184), v15++, (long long **)&v34)+ 14) & v20) == 0;
  }
  while (v15 != v16);
  if (v17) {
    goto LABEL_25;
  }
  if (*(_DWORD *)(*(uint64_t (**)(void))(**(void **)a2 + 320))(*(void *)a2) != -1)
  {
    int v21 = *(_DWORD *)(*(uint64_t (**)(void))(**(void **)a2 + 320))(*(void *)a2);
    int v22 = DWORD1(v28);
    if (v28 == 1) {
      int v23 = 4;
    }
    else {
      int v23 = 5;
    }
    if (DWORD1(v28) == -1) {
      int v22 = v23;
    }
    if (v21 != v22 - 1) {
      goto LABEL_25;
    }
  }
  if (*(int *)((*(uint64_t (**)(void))(**(void **)a2 + 320))(*(void *)a2) + 4) < 1)
  {
LABEL_25:
    uint64_t v25 = 0;
    goto LABEL_26;
  }
  int v24 = DWORD1(v28);
  if (DWORD1(v28) == -1)
  {
    if (v28 == 1) {
      int v24 = 4;
    }
    else {
      int v24 = 5;
    }
    goto LABEL_35;
  }
  if (SDWORD1(v28) > 1)
  {
LABEL_35:
    *(_DWORD *)(*(uint64_t (**)(void))(**(void **)a2 + 320))(*(void *)a2) = v24 - 2;
    goto LABEL_36;
  }
  *(_DWORD *)(*(uint64_t (**)(void))(**(void **)a2 + 320))(*(void *)a2) = 0;
LABEL_36:
  uint64_t v25 = 1;
LABEL_26:
  if (__p)
  {
    int v31 = __p;
    operator delete(__p);
  }
LABEL_29:
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  return v25;
}

void sub_19294DB8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<Espresso::ANECompilerEngine::context::workaround_split_restrictions_on_w_using_transpose(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0,std::allocator<Espresso::ANECompilerEngine::context::workaround_split_restrictions_on_w_using_transpose(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0>,BOOL ()(Espresso::single_match_state<Espresso::generic_split_nd_kernel> &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE37C4E0;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::ANECompilerEngine::context::workaround_split_restrictions_on_w_using_transpose(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0,std::allocator<Espresso::ANECompilerEngine::context::workaround_split_restrictions_on_w_using_transpose(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0>,BOOL ()(Espresso::single_match_state<Espresso::generic_split_nd_kernel> &)>::~__func()
{
}

void ___Z31surround_kernel_with_transposesIN8Espresso17ANECompilerEngine20inner_product_kernelELi4EEvPNS0_3netEPNS1_7contextENS0_18transpose_params_tES7_NSt3__18functionIFbRNS0_18single_match_stateIT_EEEEE_block_invoke(void *a1, int64x2_t *a2)
{
  *(void *)&long long v110 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2->i64[0] + 8) == a1[4])
  {
    std::string::basic_string[abi:ne180100]<0>(v94, "__@transpose_transform");
    std::string::basic_string[abi:ne180100]<0>(v92, "__@transpose_transform_bottom");
    uint64_t v4 = a1[5];
    unint64_t v5 = a2[3].i32[2];
    uint64_t v6 = *(void *)(*(void *)(v4 + 32) + 16 * v5);
    if (*(char *)(v6 + 39) < 0)
    {
      std::string::__init_copy_ctor_external(&v91, *(const std::string::value_type **)(v6 + 16), *(void *)(v6 + 24));
      uint64_t v4 = a1[5];
      unint64_t v5 = a2[3].i32[2];
    }
    else
    {
      std::string v91 = *(std::string *)(v6 + 16);
    }
    *(void *)&long long v104 = v5;
    int v7 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v4 + 56, v5, &v104)[3];
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v90, *(const std::string::value_type **)v7, *((void *)v7 + 1));
    }
    else
    {
      long long v8 = *v7;
      v90.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
      *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v8;
    }
    uint64_t v9 = a1[5] + 96;
    *(void *)&long long v104 = a2[3].i32[2];
    long long v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, v104, &v104);
    uint64_t v87 = 0;
    uint64_t v88 = 0;
    uint64_t v89 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v87, v10[3], v10[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10[4] - v10[3]) >> 3));
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v87, (const void **)v92, (uint64_t)&v86);
    uint64_t v83 = 0;
    uint64_t v84 = 0;
    uint64_t v85 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v83, (uint64_t)v87, v88, 0xAAAAAAAAAAAAAAABLL * ((v88 - (uint64_t)v87) >> 3));
    uint64_t v12 = v83;
    for (uint64_t i = v84; v12 != i; ++v12)
    {
      if ((v95 & 0x80u) == 0) {
        unint64_t v13 = v94;
      }
      else {
        unint64_t v13 = (void **)v94[0];
      }
      if ((v95 & 0x80u) == 0) {
        std::string::size_type v14 = v95;
      }
      else {
        std::string::size_type v14 = (std::string::size_type)v94[1];
      }
      std::string::append(v12, (const std::string::value_type *)v13, v14);
    }
    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(a1[5] + 192), &v90))
    {
      uint64_t v15 = a1[9];
      if (!v15) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      if ((*(unsigned int (**)(uint64_t, int64x2_t *))(*(void *)v15 + 48))(v15, a2))
      {
        uint64_t v16 = a1[5];
        uint64_t v17 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v16 + 192), &v86);
        uint64_t v18 = *(std::__shared_weak_count **)(v16 + 24);
        uint64_t v81 = *(void *)(v16 + 16);
        uint64_t v82 = v18;
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::abstract_engine_factory::shared(&v75);
        uint64_t v19 = (long long *)v75;
        std::string::basic_string[abi:ne180100]<0>(&v104, "transpose");
        LODWORD(__p.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v81 + 8))(*(void *)(v81 + 8));
        Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v19, (uint64_t)&v81, (uint64_t)&v104, (uint64_t)(a1 + 10), (int *)&__p);
        if (SBYTE7(v105) < 0) {
          operator delete((void *)v104);
        }
        if (v76) {
          nitro::nitro_function::nitro_function(v76);
        }
        Espresso::abstract_engine_factory::shared(&v75);
        int v20 = (long long *)v75;
        std::string::basic_string[abi:ne180100]<0>(&v104, "transpose");
        LODWORD(__p.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v81 + 8))(*(void *)(v81 + 8));
        Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v20, (uint64_t)&v81, (uint64_t)&v104, (uint64_t)a1 + 100, (int *)&__p);
        if (SBYTE7(v105) < 0) {
          operator delete((void *)v104);
        }
        if (v76) {
          nitro::nitro_function::nitro_function(v76);
        }
        uint64_t v21 = v79;
        int v22 = (uint64_t **)(a1[5] + 184);
        v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&v90;
        int v23 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v22, &v90, (long long **)&v102);
        long long v24 = *(_OWORD *)(v23 + 72);
        long long v104 = *(_OWORD *)(v23 + 56);
        long long v105 = v24;
        uint64_t v25 = (const void *)*((void *)v23 + 12);
        uint64_t v106 = *((void *)v23 + 11);
        long long v107 = 0;
        long long v108 = 0;
        uint64_t v109 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v107, v25, *((void *)v23 + 13), (uint64_t)(*((void *)v23 + 13) - (void)v25) >> 2);
        memset(&__p, 0, sizeof(__p));
        v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        v102.__r_.__value_.__s.__data_[8] = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[0] + 64;
        __p.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&__p.__r_.__value_.__r.__words[2], &v104, &v110, (uint64_t)__p.__r_.__value_.__l.__data_);
        (*(void (**)(std::string **__return_ptr, uint64_t, std::string *))(*(void *)v21 + 64))(&v75, v21, &__p);
        long long v26 = (long long *)v75;
        long long v27 = (uint64_t **)(a1[5] + 184);
        p_p = &v86;
        long long v28 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27, &v86, (long long **)&p_p);
        long long v29 = *v26;
        long long v30 = v26[1];
        *((void *)v28 + 11) = *((void *)v26 + 4);
        *(_OWORD *)(v28 + 72) = v30;
        *(_OWORD *)(v28 + 56) = v29;
        if (v28 + 56 != (char *)v26) {
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v28 + 96, *((char **)v26 + 5), *((void *)v26 + 6), (uint64_t)(*((void *)v26 + 6) - *((void *)v26 + 5)) >> 2);
        }
        v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v102);
        v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v102);
        if (v107)
        {
          long long v108 = v107;
          operator delete(v107);
        }
        int v31 = (uint64_t **)(a1[5] + 184);
        std::string::size_type v75 = &v86;
        int v32 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v31, &v86, (long long **)&v75)+ 19);
        std::string v33 = (uint64_t **)(a1[5] + 184);
        std::string::size_type v75 = &v86;
        int v34 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v33, &v86, (long long **)&v75);
        if (v32 <= 4) {
          int v35 = 4;
        }
        else {
          int v35 = v32;
        }
        *((_DWORD *)v34 + 19) = v35;
        uint64_t v36 = a2->i64[0];
        int v37 = (uint64_t **)(a1[5] + 184);
        v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&v86;
        int v38 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v37, &v86, (long long **)&v102);
        long long v39 = *(_OWORD *)(v38 + 72);
        long long v104 = *(_OWORD *)(v38 + 56);
        long long v105 = v39;
        uint64_t v40 = (const void *)*((void *)v38 + 12);
        uint64_t v106 = *((void *)v38 + 11);
        long long v107 = 0;
        long long v108 = 0;
        uint64_t v109 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v107, v40, *((void *)v38 + 13), (uint64_t)(*((void *)v38 + 13) - (void)v40) >> 2);
        memset(&__p, 0, sizeof(__p));
        v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        v102.__r_.__value_.__s.__data_[8] = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[0] + 64;
        __p.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&__p.__r_.__value_.__r.__words[2], &v104, &v110, (uint64_t)__p.__r_.__value_.__l.__data_);
        (*(void (**)(std::string **__return_ptr, uint64_t, std::string *))(*(void *)v36 + 64))(&v75, v36, &__p);
        v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v102);
        if (v107)
        {
          long long v108 = v107;
          operator delete(v107);
        }
        uint64_t v41 = v83;
        if (v84 != v83)
        {
          uint64_t v42 = 0;
          uint64_t v43 = 0;
          unint64_t v44 = 0;
          do
          {
            long long v45 = (long long *)v75;
            int v46 = (uint64_t **)(a1[5] + 184);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41[v42];
            uint64_t v47 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v46, v41[v42].__r_.__value_.__r.__words, (long long **)&__p);
            long long v48 = v45[v43];
            long long v49 = v45[v43 + 1];
            *((void *)v47 + 11) = *(void *)&v45[v43 + 2];
            *(_OWORD *)(v47 + 72) = v49;
            *(_OWORD *)(v47 + 56) = v48;
            if (&v45[v43] != (long long *)(v47 + 56)) {
              std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v47 + 96, *((char **)&v45[v43 + 2] + 1), *(void *)&v45[v43 + 3], (uint64_t)(*(void *)&v45[v43 + 3] - *((void *)&v45[v43 + 2] + 1)) >> 2);
            }
            ++v44;
            uint64_t v41 = v83;
            v43 += 4;
            ++v42;
          }
          while (v44 < 0xAAAAAAAAAAAAAAABLL * (((char *)v84 - (char *)v83) >> 3));
        }
        Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::remove_layer(a2);
        if (!v17)
        {
          unint64_t v50 = v80;
          v73[0] = v79;
          v73[1] = v80;
          if (v80) {
            atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(&v104, "transpose");
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v91.__r_.__value_.__l.__data_, (const void **)v92, (uint64_t)&v102);
          uint64_t v51 = std::string::append(&v102, "__fwd");
          long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v52;
          v51->__r_.__value_.__l.__size_ = 0;
          v51->__r_.__value_.__r.__words[2] = 0;
          v51->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v100, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
          }
          else {
            std::string v100 = v90;
          }
          p_p = 0;
          size_t v71 = 0;
          uint64_t v72 = 0;
          p_p_p = (std::string *)&p_p;
          LOBYTE(v68) = 0;
          p_p = (std::string *)operator new(0x18uLL);
          size_t v71 = p_p;
          uint64_t v72 = p_p + 1;
          size_t v71 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v72, (long long *)&v100, (long long *)&v101, p_p);
          if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v98, v86.__r_.__value_.__l.__data_, v86.__r_.__value_.__l.__size_);
          }
          else {
            std::string v98 = v86;
          }
          p_p_p = 0;
          uint64_t v68 = 0;
          p_data = 0;
          p_p_p_p = (void ***)&p_p_p;
          char v97 = 0;
          p_p_p = (std::string *)operator new(0x18uLL);
          uint64_t v68 = p_p_p;
          p_data = (void **)&p_p_p[1].__r_.__value_.__l.__data_;
          uint64_t v68 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v98, (long long *)&v99, p_p_p);
          Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::add_kernel(a2, v73, (const std::string *)&v104, &__p, &p_p, &p_p_p);
          p_p_p_p = (void ***)&p_p_p;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_p_p);
          if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v98.__r_.__value_.__l.__data_);
          }
          p_p_p = (std::string *)&p_p;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_p);
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v100.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v102.__r_.__value_.__l.__data_);
          }
          if (SBYTE7(v105) < 0) {
            operator delete((void *)v104);
          }
          if (v50) {
            nitro::nitro_function::nitro_function(v50);
          }
        }
        int v53 = (std::__shared_weak_count *)a2->i64[1];
        v66[0] = a2->i64[0];
        v66[1] = v53;
        if (v53) {
          atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&v104, "inner_product");
        if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v102, v86.__r_.__value_.__l.__data_, v86.__r_.__value_.__l.__size_);
        }
        else {
          std::string v102 = v86;
        }
        memset(&__p, 0, sizeof(__p));
        p_p = &__p;
        LOBYTE(v71) = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[0] + 24;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__p.__r_.__value_.__r.__words[2], (long long *)&v102, (long long *)&v103, (std::string *)__p.__r_.__value_.__l.__data_);
        Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::add_kernel(a2, v66, (const std::string *)&v104, &v91, (std::string **)&__p, &v83);
        p_p = &__p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
        if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v102.__r_.__value_.__l.__data_);
        }
        if (SBYTE7(v105) < 0) {
          operator delete((void *)v104);
        }
        if (v53) {
          nitro::nitro_function::nitro_function(v53);
        }
        if (Espresso::is_kernel_generating_output(*(Espresso **)(a2[1].i64[0] + 64), v54))
        {
          uint64_t v55 = *(void *)(a2[1].i64[0] + 64);
          std::string::basic_string[abi:ne180100]<0>(&v104, "is_output");
          std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__erase_unique<std::string>((void *)(v55 + 240), (unsigned __int8 *)&v104);
          if (SBYTE7(v105) < 0) {
            operator delete((void *)v104);
          }
        }
        if (v84 != v83)
        {
          unint64_t v56 = 0;
          unint64_t v57 = 0;
          while (1)
          {
            unint64_t v58 = v78;
            v65[0] = v77;
            v65[1] = v78;
            if (v78) {
              atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(&v104, "transpose");
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v91.__r_.__value_.__l.__data_, (const void **)v94, (uint64_t)&v102);
            unint64_t v59 = std::string::append(&v102, "__bwd");
            long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v60;
            v59->__r_.__value_.__l.__size_ = 0;
            v59->__r_.__value_.__r.__words[2] = 0;
            v59->__r_.__value_.__r.__words[0] = 0;
            unint64_t v61 = &v83[v56 / 3];
            if (SHIBYTE(v83[v56 / 3].__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(&v100, v61->__r_.__value_.__l.__data_, v61->__r_.__value_.__l.__size_);
            }
            else
            {
              long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
              v100.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v62;
            }
            p_p = 0;
            size_t v71 = 0;
            uint64_t v72 = 0;
            p_p_p = (std::string *)&p_p;
            LOBYTE(v68) = 0;
            p_p = (std::string *)operator new(0x18uLL);
            size_t v71 = p_p;
            uint64_t v72 = p_p + 1;
            size_t v71 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v72, (long long *)&v100, (long long *)&v101, p_p);
            long long v63 = &v87[v56];
            if (SHIBYTE(v87[v56 + 2]) < 0)
            {
              std::string::__init_copy_ctor_external(&v98, (const std::string::value_type *)*v63, (std::string::size_type)v63[1]);
            }
            else
            {
              long long v64 = *(_OWORD *)v63;
              v98.__r_.__value_.__r.__words[2] = (std::string::size_type)v63[2];
              *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v64;
            }
            p_p_p = 0;
            uint64_t v68 = 0;
            p_data = 0;
            p_p_p_p = (void ***)&p_p_p;
            char v97 = 0;
            p_p_p = (std::string *)operator new(0x18uLL);
            uint64_t v68 = p_p_p;
            p_data = (void **)&p_p_p[1].__r_.__value_.__l.__data_;
            uint64_t v68 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v98, (long long *)&v99, p_p_p);
            Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::add_kernel(a2, v65, (const std::string *)&v104, &__p, &p_p, &p_p_p);
            p_p_p_p = (void ***)&p_p_p;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_p_p);
            if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v98.__r_.__value_.__l.__data_);
            }
            p_p_p = (std::string *)&p_p;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_p);
            if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v100.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v102.__r_.__value_.__l.__data_);
            }
            if (SBYTE7(v105) < 0) {
              break;
            }
            if (v58) {
              goto LABEL_98;
            }
LABEL_99:
            ++v57;
            v56 += 3;
            if (v57 >= 0xAAAAAAAAAAAAAAABLL * (((char *)v84 - (char *)v83) >> 3)) {
              goto LABEL_103;
            }
          }
          operator delete((void *)v104);
          if (!v58) {
            goto LABEL_99;
          }
LABEL_98:
          nitro::nitro_function::nitro_function(v58);
          goto LABEL_99;
        }
LABEL_103:
        *(void *)&long long v104 = &v75;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
        if (v78) {
          nitro::nitro_function::nitro_function(v78);
        }
        if (v80) {
          nitro::nitro_function::nitro_function(v80);
        }
        if (v82) {
          nitro::nitro_function::nitro_function(v82);
        }
      }
    }
    *(void *)&long long v104 = &v83;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v86.__r_.__value_.__l.__data_);
    }
    *(void *)&long long v104 = &v87;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v90.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v91.__r_.__value_.__l.__data_);
    }
    if (v93 < 0) {
      operator delete(v92[0]);
    }
    if ((char)v95 < 0) {
      operator delete(v94[0]);
    }
  }
}

void sub_19294E8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,void *a63)
{
  a13 = (uint64_t)&a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (*(char *)(v73 - 201) < 0) {
    operator delete(*(void **)(v73 - 224));
  }
  if (a26 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v73 - 169) < 0) {
    operator delete(*(void **)(v73 - 192));
  }
  if (*(char *)(v73 - 137) < 0) {
    operator delete(*(void **)(v73 - 160));
  }
  if (v72) {
    nitro::nitro_function::nitro_function(v72);
  }
  *(void *)(v73 - 160) = &a28;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v73 - 160));
  if (a32) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)a32);
  }
  if (a34) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)a34);
  }
  if (a36) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)a36);
  }
  *(void *)(v73 - 160) = &a37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v73 - 160));
  if (a45 < 0) {
    operator delete(a40);
  }
  *(void *)(v73 - 160) = &a46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v73 - 160));
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a61 < 0) {
    operator delete(a56);
  }
  if (a68 < 0) {
    operator delete(a63);
  }
  if (a72 < 0) {
    operator delete(a69);
  }
  _Unwind_Resume(a1);
}

void *__destroy_helper_block_ea8_48c106_ZTSNSt3__18functionIFbRN8Espresso18single_match_stateINS1_17ANECompilerEngine20inner_product_kernelEEEEEE(uint64_t a1)
{
  return std::__function::__value_func<BOOL ()(Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel> &)>::~__value_func[abi:ne180100]((void *)(a1 + 48));
}

uint64_t __copy_helper_block_ea8_48c106_ZTSNSt3__18functionIFbRN8Espresso18single_match_stateINS1_17ANECompilerEngine20inner_product_kernelEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<BOOL ()(Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel> &)>::__value_func[abi:ne180100](a1 + 48, a2 + 48);
}

void Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::remove_layer(int64x2_t *a1)
{
  memset(v7, 0, sizeof(v7));
  __int32 v4 = a1[3].i32[2];
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  unint64_t v2 = a1[2].u64[1];
  if (v2 >= a1[3].i64[0])
  {
    uint64_t v3 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v4);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v4);
    uint64_t v3 = v2 + 72;
    a1[2].i64[1] = v2 + 72;
  }
  a1[2].i64[1] = v3;
  long long v8 = (void **)&v7[1] + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  long long v8 = (void **)v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
}

void sub_19294ECC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel>::add_kernel(int64x2_t *a1, void *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6)
{
  __int32 v23 = 0;
  memset(v26, 0, sizeof(v26));
  uint64_t v12 = (char *)operator new(0xF8uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)uint64_t v12 = &unk_1EE389DF0;
  *((void *)v12 + 3) = &unk_1EE36C758;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 161) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((void *)v12 + 30) = 0;
  long long v24 = v12 + 24;
  uint64_t v25 = (std::__shared_weak_count *)v12;
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  if (v14)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    uint64_t v15 = (std::__shared_weak_count *)*((void *)v12 + 12);
    *((void *)v12 + 11) = v13;
    *((void *)v12 + 12) = v14;
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
  }
  else
  {
    *((void *)v12 + 11) = v13;
    *((void *)v12 + 12) = 0;
  }
  std::string::operator=((std::string *)(v24 + 16), a4);
  std::string::operator=((std::string *)(v24 + 40), a3);
  uint64_t v16 = *(uint64_t (****)(void))(*(void *)(*a2 + 8) + 8);
  uint64_t v17 = v24;
  *((_DWORD *)v24 + 2) = (**v16)(v16);
  uint64_t v18 = a1[1].i64[0];
  if (v18)
  {
    *((_DWORD *)v17 + 3) = *(_DWORD *)(v18 + 12);
    if (*(char *)(v18 + 223) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v18 + 200), *(void *)(v18 + 208));
    }
    else {
      std::string __p = *(std::string *)(v18 + 200);
    }
    std::string::operator=((std::string *)(v17 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v19 = *(void *)(a1[4].i64[0] + 32);
    if (*(void *)(a1[4].i64[0] + 40) != v19) {
      *((_DWORD *)v17 + 3) = *(_DWORD *)(*(void *)v19 + 12);
    }
  }
  if (v26 != (_OWORD *)a5) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v26, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  }
  if ((std::string **)((char *)&v26[1] + 8) != a6) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v26[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  }
  __int32 v23 = a1[3].i32[2];
  unint64_t v20 = a1[2].u64[1];
  if (v20 >= a1[3].i64[0])
  {
    uint64_t v21 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v23);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v23);
    uint64_t v21 = v20 + 72;
    a1[2].i64[1] = v20 + 72;
  }
  a1[2].i64[1] = v21;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
}

void sub_19294EF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void *std::__function::__func<Espresso::ANECompilerEngine::context::batch_inner_product_to_conv_like_mapping(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0,std::allocator<Espresso::ANECompilerEngine::context::batch_inner_product_to_conv_like_mapping(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0>,BOOL ()(Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel> &)>::target_type()
{
}

uint64_t std::__function::__func<Espresso::ANECompilerEngine::context::batch_inner_product_to_conv_like_mapping(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0,std::allocator<Espresso::ANECompilerEngine::context::batch_inner_product_to_conv_like_mapping(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0>,BOOL ()(Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel> &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN8Espresso17ANECompilerEngine7context40batch_inner_product_to_conv_like_mappingEPNS_3netEPS1_E3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<Espresso::ANECompilerEngine::context::batch_inner_product_to_conv_like_mapping(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0,std::allocator<Espresso::ANECompilerEngine::context::batch_inner_product_to_conv_like_mapping(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0>,BOOL ()(Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel> &)>::operator()(uint64_t a1, int *a2)
{
  uint64_t v4 = **(void **)(a1 + 8) + 56;
  *(void *)&long long v16 = a2[14];
  uint64_t v5 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v4, v16, &v16)[3];
  if (*((char *)v5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)v5, *((void *)v5 + 1));
  }
  else
  {
    long long v6 = *v5;
    v22.__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v6;
  }
  int v7 = *(uint64_t **)(a1 + 8);
  uint64_t v8 = *v7;
  if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(*v7 + 192), &v22))
  {
    uint64_t v12 = 0;
    goto LABEL_21;
  }
  __int32 v23 = &v22;
  uint64_t v9 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v8 + 184), &v22, (long long **)&v23);
  long long v10 = *(_OWORD *)(v9 + 72);
  long long v16 = *(_OWORD *)(v9 + 56);
  long long v17 = v10;
  long long v11 = (const void *)*((void *)v9 + 12);
  uint64_t v18 = *((void *)v9 + 11);
  std::string __p = 0;
  unint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v11, *((void *)v9 + 13), (uint64_t)(*((void *)v9 + 13) - (void)v11) >> 2);
  uint64_t v12 = 0;
  if (DWORD1(v17) != -1 && SDWORD1(v17) <= 3)
  {
    uint64_t v13 = *(_WORD **)a2;
    uint64_t v14 = *(void **)(*(void *)a2 + 440);
    if (!v14 || !*v14 || !v14[4] && !v14[6] && !v14[8] && !v14[10])
    {
      if (DWORD2(v16) * DWORD1(v16) < 2
        || *(_DWORD *)((*(uint64_t (**)(_WORD *))(*(void *)v13 + 384))(v13) + 32))
      {
        uint64_t v12 = 0;
        goto LABEL_19;
      }
      uint64_t v13 = *(_WORD **)a2;
    }
    v13[420] = 256;
    uint64_t v12 = 1;
  }
LABEL_19:
  if (__p)
  {
    unint64_t v20 = __p;
    operator delete(__p);
  }
LABEL_21:
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  return v12;
}

void sub_19294F1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<Espresso::ANECompilerEngine::context::batch_inner_product_to_conv_like_mapping(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0,std::allocator<Espresso::ANECompilerEngine::context::batch_inner_product_to_conv_like_mapping(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0>,BOOL ()(Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel> &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE37C488;
  result[1] = v3;
  return result;
}

void std::__function::__func<Espresso::ANECompilerEngine::context::batch_inner_product_to_conv_like_mapping(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0,std::allocator<Espresso::ANECompilerEngine::context::batch_inner_product_to_conv_like_mapping(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0>,BOOL ()(Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel> &)>::~__func()
{
}

void Espresso::single_match_state<Espresso::generic_crop_kernel>::add_kernel(int64x2_t *a1, void *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6)
{
  __int32 v23 = 0;
  memset(v26, 0, sizeof(v26));
  uint64_t v12 = (char *)operator new(0xF8uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)uint64_t v12 = &unk_1EE389DF0;
  *((void *)v12 + 3) = &unk_1EE36C758;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 161) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((void *)v12 + 30) = 0;
  long long v24 = v12 + 24;
  uint64_t v25 = (std::__shared_weak_count *)v12;
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  if (v14)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    uint64_t v15 = (std::__shared_weak_count *)*((void *)v12 + 12);
    *((void *)v12 + 11) = v13;
    *((void *)v12 + 12) = v14;
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
  }
  else
  {
    *((void *)v12 + 11) = v13;
    *((void *)v12 + 12) = 0;
  }
  std::string::operator=((std::string *)(v24 + 16), a4);
  std::string::operator=((std::string *)(v24 + 40), a3);
  long long v16 = *(uint64_t (****)(void))(*(void *)(*a2 + 8) + 8);
  long long v17 = v24;
  *((_DWORD *)v24 + 2) = (**v16)(v16);
  uint64_t v18 = a1[1].i64[0];
  if (v18)
  {
    *((_DWORD *)v17 + 3) = *(_DWORD *)(v18 + 12);
    if (*(char *)(v18 + 223) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v18 + 200), *(void *)(v18 + 208));
    }
    else {
      std::string __p = *(std::string *)(v18 + 200);
    }
    std::string::operator=((std::string *)(v17 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v19 = *(void *)(a1[4].i64[0] + 32);
    if (*(void *)(a1[4].i64[0] + 40) != v19) {
      *((_DWORD *)v17 + 3) = *(_DWORD *)(*(void *)v19 + 12);
    }
  }
  if (v26 != (_OWORD *)a5) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v26, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  }
  if ((std::string **)((char *)&v26[1] + 8) != a6) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v26[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  }
  __int32 v23 = a1[3].i32[2];
  unint64_t v20 = a1[2].u64[1];
  if (v20 >= a1[3].i64[0])
  {
    uint64_t v21 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v23);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v23);
    uint64_t v21 = v20 + 72;
    a1[2].i64[1] = v20 + 72;
  }
  a1[2].i64[1] = v21;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
}

void sub_19294F4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void ___ZN8Espresso17ANECompilerEngine7context28transform_reflective_paddingEPNS_3netEPS1__block_invoke(uint64_t a1, int64x2_t *a2)
{
  v46[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  BOOL v4 = *(void *)(a2->i64[0] + 8) == v3 || v3 == 0;
  if (v4)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a2->i64[0] + 336))(a2->i64[0]))
    {
      long long v6 = (__int16 *)(*(uint64_t (**)(uint64_t))(*(void *)a2->i64[0] + 320))(a2->i64[0]);
      if (v6[1] == 2)
      {
        int v7 = v6;
        int v8 = (unsigned __int16)v6[4];
        if (v8 == (unsigned __int16)v6[5])
        {
          int v9 = (unsigned __int16)v6[6];
          BOOL v4 = v9 == (unsigned __int16)v6[7];
          int v10 = v9 | v8;
          BOOL v11 = v4 && (__int16)v8 <= 3;
          if (v11 && v10 != 0)
          {
            uint64_t v13 = *(void *)(a1 + 40);
            uint64_t v14 = *(std::__shared_weak_count **)(v13 + 24);
            if (v14)
            {
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v13 = *(void *)(a1 + 40);
            }
            unint64_t v15 = a2[3].i32[2];
            *(void *)&v41[0] = v15;
            uint64_t v16 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v13 + 96, v15, v41)[3];
            uint64_t v17 = *(void *)(a1 + 40) + 56;
            unint64_t v18 = a2[3].i32[2];
            *(void *)&v41[0] = v18;
            uint64_t v19 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v17, v18, v41)[3];
            unint64_t v20 = (uint64_t **)(*(void *)(a1 + 40) + 184);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
            uint64_t v21 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, v19, (long long **)&__p);
            v41[0] = *(_OWORD *)(v21 + 56);
            v41[1] = *(_OWORD *)(v21 + 72);
            std::string v22 = (const void *)*((void *)v21 + 12);
            uint64_t v42 = *((void *)v21 + 11);
            uint64_t v43 = 0;
            unint64_t v44 = 0;
            uint64_t v45 = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v43, v22, *((void *)v21 + 13), (uint64_t)(*((void *)v21 + 13) - (void)v22) >> 2);
            if (*((void *)v7 + 1) != 0x2000200020002 || LODWORD(v41[0]) == DWORD1(v41[0]))
            {
              Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::remove_layer(a2);
              memset(&__p, 0, sizeof(__p));
              __int32 v23 = v19;
              if (v7[4] && (__int32 v23 = (const std::string *)v16, v7[6]))
              {
                std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_refl_pad_lrtb_", (const void **)&v19->__r_.__value_.__l.__data_, &v37);
                std::to_string(&v36, v7[4]);
                if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  long long v24 = &v36;
                }
                else {
                  long long v24 = (std::string *)v36.__r_.__value_.__r.__words[0];
                }
                if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type size = v36.__r_.__value_.__l.__size_;
                }
                long long v26 = std::string::append(&v37, (const std::string::value_type *)v24, size);
                long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
                v38.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v27;
                v26->__r_.__value_.__l.__size_ = 0;
                v26->__r_.__value_.__r.__words[2] = 0;
                v26->__r_.__value_.__r.__words[0] = 0;
                std::to_string(&v35, v7[5]);
                if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  long long v28 = &v35;
                }
                else {
                  long long v28 = (std::string *)v35.__r_.__value_.__r.__words[0];
                }
                if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v29 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v29 = v35.__r_.__value_.__l.__size_;
                }
                long long v30 = std::string::append(&v38, (const std::string::value_type *)v28, v29);
                long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
                v39.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v31;
                v30->__r_.__value_.__l.__size_ = 0;
                v30->__r_.__value_.__r.__words[2] = 0;
                v30->__r_.__value_.__r.__words[0] = 0;
                int v32 = std::string::append(&v39, "00");
                std::string::size_type v33 = v32->__r_.__value_.__r.__words[0];
                v46[0] = v32->__r_.__value_.__l.__size_;
                *(void *)((char *)v46 + 7) = *(std::string::size_type *)((char *)&v32->__r_.__value_.__r.__words[1] + 7);
                char v34 = HIBYTE(v32->__r_.__value_.__r.__words[2]);
                v32->__r_.__value_.__l.__size_ = 0;
                v32->__r_.__value_.__r.__words[2] = 0;
                v32->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                __p.__r_.__value_.__r.__words[0] = v33;
                __p.__r_.__value_.__l.__size_ = v46[0];
                *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v46 + 7);
                *((unsigned char *)&__p.__r_.__value_.__s + 23) = v34;
                if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v39.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v35.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v38.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v36.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v37.__r_.__value_.__l.__data_);
                }
              }
              else
              {
                std::string::operator=(&__p, v23);
              }
              transform_reflective_padding_lr(a2, *(void **)(a1 + 40), (uint64_t)v41, v7[4], (const void **)&v19->__r_.__value_.__l.__data_, &__p);
              transform_reflective_padding_tb(a2, *(void **)(a1 + 40), (uint64_t)v41, v7[6], (uint64_t)&__p, v16);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
            if (v43)
            {
              unint64_t v44 = v43;
              operator delete(v43);
            }
            if (v14) {
              nitro::nitro_function::nitro_function(v14);
            }
          }
        }
      }
    }
  }
}

void sub_19294F8EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  if (a52) {
    operator delete(a52);
  }
  if (v53) {
    nitro::nitro_function::nitro_function(v53);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::remove_layer(int64x2_t *a1)
{
  memset(v7, 0, sizeof(v7));
  __int32 v4 = a1[3].i32[2];
  uint64_t v5 = 0;
  long long v6 = 0;
  unint64_t v2 = a1[2].u64[1];
  if (v2 >= a1[3].i64[0])
  {
    uint64_t v3 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v4);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v4);
    uint64_t v3 = v2 + 72;
    a1[2].i64[1] = v2 + 72;
  }
  a1[2].i64[1] = v3;
  int v8 = (void **)&v7[1] + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  int v8 = (void **)v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
}

void sub_19294FA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void transform_reflective_padding_lr(int64x2_t *a1, void *a2, uint64_t a3, __int16 a4, const void **a5, const std::string *a6)
{
  *(void *)&long long v193 = *MEMORY[0x1E4F143B8];
  uint64_t v112 = a4;
  if ((int)v112 < 1) {
    return;
  }
  Espresso::abstract_engine_factory::shared(&v177);
  uint64_t v10 = a2[2];
  BOOL v11 = (std::__shared_weak_count *)a2[3];
  uint64_t v175 = v10;
  long long v176 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v174 = (***(uint64_t (****)(void))(v10 + 8))(*(void *)(v10 + 8));
  int v173 = *(_DWORD *)(*(void *)(a2[4] + 16 * a1[3].i32[2]) + 12);
  int v111 = *(_DWORD *)(a3 + 8);
  memset(v172, 0, 76);
  WORD4(v172[0]) = a4;
  WORD5(v172[0]) = a4;
  uint64_t v12 = v177;
  std::string::basic_string[abi:ne180100]<0>(&__p, "general_padding");
  Espresso::abstract_engine_factory::make_kernel_priv(v12, (uint64_t)&v175, (uint64_t)&__p, (uint64_t)v172, &v174);
  if (lpsrc.__r_.__value_.__r.__words[0])
  {
    if (v13)
    {
      std::string::size_type size = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
      if (lpsrc.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(lpsrc.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      std::string::size_type size = 0;
    }
  }
  else
  {
    std::string::size_type size = 0;
    uint64_t v13 = 0;
  }
  if (lpsrc.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_);
  }
  uint64_t v109 = (uint64_t)a2;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((char *)a5 + 23) >= 0) {
    size_t v15 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v15 = (size_t)a5[1];
  }
  p_s = &__s;
  std::string::basic_string[abi:ne180100]((uint64_t)&__s, v15 + 12);
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  if (v15)
  {
    if (*((char *)a5 + 23) >= 0) {
      uint64_t v17 = (const std::string::value_type *)a5;
    }
    else {
      uint64_t v17 = (const std::string::value_type *)*a5;
    }
    memmove(p_s, v17, v15);
  }
  strcpy((char *)p_s + v15, "_zero_pad_lr");
  v170[0] = v13;
  v170[1] = size;
  if (size) {
    atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "general_padding");
  if (*((char *)a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v185, (const std::string::value_type *)*a5, (std::string::size_type)a5[1]);
  }
  else {
    std::string v185 = *(std::string *)a5;
  }
  memset(&lpsrc, 0, sizeof(lpsrc));
  v181.__r_.__value_.__r.__words[0] = (std::string::size_type)&lpsrc;
  v181.__r_.__value_.__s.__data_[8] = 0;
  lpsrc.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  lpsrc.__r_.__value_.__l.__size_ = lpsrc.__r_.__value_.__r.__words[0];
  lpsrc.__r_.__value_.__r.__words[2] = lpsrc.__r_.__value_.__r.__words[0] + 24;
  lpsrc.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&lpsrc.__r_.__value_.__r.__words[2], (long long *)&v185, &v186, (std::string *)lpsrc.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v192, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v192 = __s;
  }
  memset(&v181, 0, sizeof(v181));
  v169.__r_.__value_.__r.__words[0] = (std::string::size_type)&v181;
  v169.__r_.__value_.__s.__data_[8] = 0;
  v181.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v181.__r_.__value_.__l.__size_ = v181.__r_.__value_.__r.__words[0];
  v181.__r_.__value_.__r.__words[2] = v181.__r_.__value_.__r.__words[0] + 24;
  v181.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v181.__r_.__value_.__r.__words[2], (long long *)&v192, &v193, (std::string *)v181.__r_.__value_.__l.__data_);
  Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::add_kernel(a1, v170, &__p, &__s, (std::string **)&lpsrc, (std::string **)&v181);
  v169.__r_.__value_.__r.__words[0] = (std::string::size_type)&v181;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v169);
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v192.__r_.__value_.__l.__data_);
  }
  v181.__r_.__value_.__r.__words[0] = (std::string::size_type)&lpsrc;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v181);
  if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v185.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (size) {
    nitro::nitro_function::nitro_function(size);
  }
  if (*((char *)a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v192, (const std::string::value_type *)*a5, (std::string::size_type)a5[1]);
  }
  else {
    std::string v192 = *(std::string *)a5;
  }
  long long v107 = size;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v169, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string v169 = __s;
  }
  uint64_t v18 = 4;
  uint64_t v19 = 20;
  __asm { FMOV            V10.2S, #1.0 }
  uint64_t v25 = 1;
  do
  {
    uint64_t v150 = _D10;
    uint64_t v155 = 0x1000100010001;
    int v167 = 0;
    char v168 = 0;
    uint64_t v163 = 0;
    uint64_t v164 = 0;
    memset(&__p, 0, sizeof(__p));
    int v156 = 0;
    uint64_t v157 = 0;
    int v158 = 0;
    uint64_t v161 = 0;
    uint64_t v143 = 0;
    int v162 = 0x10000;
    int v165 = 0;
    __int16 v166 = 1;
    int v149 = -1;
    int v147 = (4 * v25) | 1;
    uint64_t v148 = 1;
    int v146 = v111;
    int v145 = v111;
    int v160 = 1;
    int v159 = v111;
    uint64_t v144 = 0;
    uint64_t v151 = 0;
    __int16 v152 = 2 * v25;
    __int16 v153 = 2 * v25;
    uint64_t v154 = 0;
    uint64_t v26 = v177;
    std::string::basic_string[abi:ne180100]<0>(&lpsrc, "convolution");
    Espresso::abstract_engine_factory::make_kernel_priv(v26, (uint64_t)&v175, (uint64_t)&lpsrc, (uint64_t)&__p, &v174);
    if (!v185.__r_.__value_.__r.__words[0])
    {
      long long v27 = 0;
LABEL_52:
      long long v28 = 0;
      goto LABEL_53;
    }
    if (!v27) {
      goto LABEL_52;
    }
    long long v28 = (std::__shared_weak_count *)v185.__r_.__value_.__l.__size_;
    if (!v185.__r_.__value_.__l.__size_) {
      goto LABEL_55;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v185.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
LABEL_53:
    if (v185.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v185.__r_.__value_.__l.__size_);
    }
LABEL_55:
    if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(lpsrc.__r_.__value_.__l.__data_);
    }
    (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v27 + 472))(&v140, v27);
    uint64_t v29 = 0;
    uint64_t v30 = *(int *)(v140 + 8);
    do
    {
      v30 *= *(int *)(v140 + 12 + v29);
      v29 += 4;
    }
    while (v29 != 12);
    bzero(*(void **)(v140 + 24), 4 * v30);
    uint64_t v31 = v145;
    uint64_t v32 = v140;
    if (v145 >= 1)
    {
      std::string::size_type v33 = *(_DWORD **)(v140 + 24);
      do
      {
        _DWORD *v33 = 1065353216;
        v33[v18] = 1065353216;
        std::string::size_type v33 = (_DWORD *)((char *)v33 + v19);
        --v31;
      }
      while (v31);
    }
    uint64_t v138 = v32;
    __int16 v139 = v141;
    if (v141) {
      atomic_fetch_add_explicit(&v141->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *, uint64_t *))(*(void *)v27 + 400))(v27, &v138);
    if (v139) {
      nitro::nitro_function::nitro_function(v139);
    }
    if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v34 = HIBYTE(v169.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v34 = v169.__r_.__value_.__l.__size_;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v34 + 14);
    if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string lpsrc = &lpsrc;
    }
    else {
      p_std::string lpsrc = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
    }
    if (v34)
    {
      if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v36 = &v169;
      }
      else {
        std::string v36 = (std::string *)v169.__r_.__value_.__r.__words[0];
      }
      memmove(p_lpsrc, v36, v34);
    }
    strcpy((char *)p_lpsrc + v34, "_refl_conv_lr_");
    std::to_string(&v185, v25);
    if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v37 = &v185;
    }
    else {
      std::string v37 = (std::string *)v185.__r_.__value_.__r.__words[0];
    }
    if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v38 = HIBYTE(v185.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v38 = v185.__r_.__value_.__l.__size_;
    }
    std::string v39 = std::string::append(&lpsrc, (const std::string::value_type *)v37, v38);
    long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v137.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v185.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(lpsrc.__r_.__value_.__l.__data_);
    }
    if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v41 = HIBYTE(v169.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v41 = v169.__r_.__value_.__l.__size_;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v41 + 1);
    if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v42 = &lpsrc;
    }
    else {
      uint64_t v42 = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
    }
    if (v41)
    {
      if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v43 = &v169;
      }
      else {
        uint64_t v43 = (std::string *)v169.__r_.__value_.__r.__words[0];
      }
      memmove(v42, v43, v41);
    }
    *(_WORD *)((char *)&v42->__r_.__value_.__l.__data_ + v41) = 95;
    std::to_string(&v185, v25);
    if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v44 = &v185;
    }
    else {
      unint64_t v44 = (std::string *)v185.__r_.__value_.__r.__words[0];
    }
    if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v45 = HIBYTE(v185.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v45 = v185.__r_.__value_.__l.__size_;
    }
    int v46 = std::string::append(&lpsrc, (const std::string::value_type *)v44, v45);
    std::string::size_type v47 = v46->__r_.__value_.__l.__size_;
    std::string v116 = (std::string::value_type *)v46->__r_.__value_.__r.__words[0];
    v136[0] = v46->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v136 + 3) = *(_DWORD *)((char *)&v46->__r_.__value_.__r.__words[2] + 3);
    int v48 = SHIBYTE(v46->__r_.__value_.__r.__words[2]);
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v185.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(lpsrc.__r_.__value_.__l.__data_);
    }
    uint64_t v134 = v27;
    uint64_t v135 = v28;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&lpsrc, "convolution");
    int v114 = v48;
    if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v181, v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
    }
    else {
      std::string v181 = v169;
    }
    memset(&v185, 0, sizeof(v185));
    v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v185;
    v133.__r_.__value_.__s.__data_[8] = 0;
    v185.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v185.__r_.__value_.__l.__size_ = v185.__r_.__value_.__r.__words[0];
    v185.__r_.__value_.__r.__words[2] = v185.__r_.__value_.__r.__words[0] + 24;
    v185.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v185.__r_.__value_.__r.__words[2], (long long *)&v181, (long long *)&v182, (std::string *)v185.__r_.__value_.__l.__data_);
    if (v48 < 0)
    {
      std::string::__init_copy_ctor_external(&v190, v116, v47);
    }
    else
    {
      v190.__r_.__value_.__r.__words[0] = (std::string::size_type)v116;
      v190.__r_.__value_.__l.__size_ = v47;
      LODWORD(v190.__r_.__value_.__r.__words[2]) = v136[0];
      *(_DWORD *)((char *)&v190.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v136 + 3);
      *((unsigned char *)&v190.__r_.__value_.__s + 23) = v48;
    }
    memset(&v133, 0, sizeof(v133));
    v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&v133;
    v128.__r_.__value_.__s.__data_[8] = 0;
    v133.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v133.__r_.__value_.__l.__size_ = v133.__r_.__value_.__r.__words[0];
    v133.__r_.__value_.__r.__words[2] = v133.__r_.__value_.__r.__words[0] + 24;
    v133.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v133.__r_.__value_.__r.__words[2], (long long *)&v190, (long long *)&v191, (std::string *)v133.__r_.__value_.__l.__data_);
    Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::add_kernel(a1, &v134, &lpsrc, &v137, (std::string **)&v185, (std::string **)&v133);
    v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&v133;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
    if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v190.__r_.__value_.__l.__data_);
    }
    v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v185;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
    if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v181.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(lpsrc.__r_.__value_.__l.__data_);
    }
    if (v135) {
      nitro::nitro_function::nitro_function(v135);
    }
    std::operator+<char>();
    long long v49 = std::string::append(&lpsrc, "__");
    long long v110 = v28;
    std::string v133 = *v49;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(lpsrc.__r_.__value_.__l.__data_);
    }
    int v50 = SHIBYTE(v133.__r_.__value_.__r.__words[2]);
    if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v51 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v51 = v133.__r_.__value_.__l.__size_;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v51 + 37);
    if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v52 = &lpsrc;
    }
    else {
      long long v52 = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
    }
    if (v51)
    {
      if (v50 >= 0) {
        int v53 = &v133;
      }
      else {
        int v53 = (std::string *)v133.__r_.__value_.__r.__words[0];
      }
      memmove(v52, v53, v51);
    }
    strcpy((char *)v52 + v51, "final_broadcasted_mask_for_pad_index_");
    std::to_string(&v185, v25);
    if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v54 = &v185;
    }
    else {
      long long v54 = (std::string *)v185.__r_.__value_.__r.__words[0];
    }
    if ((v185.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v55 = HIBYTE(v185.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v55 = v185.__r_.__value_.__l.__size_;
    }
    unint64_t v56 = std::string::append(&lpsrc, (const std::string::value_type *)v54, v55);
    std::string v190 = *v56;
    v56->__r_.__value_.__l.__size_ = 0;
    v56->__r_.__value_.__r.__words[2] = 0;
    v56->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v185.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(lpsrc.__r_.__value_.__l.__data_);
    }
    generate_refl_pad_lr_mask(a1, v109, v111, v112, v25, (uint64_t)&v192, (uint64_t)&v190, (const void **)&v133.__r_.__value_.__l.__data_);
    lpsrc.__r_.__value_.__r.__words[2] = 897988541;
    char v130 = 0;
    int v132 = 0;
    int v131 = 0;
    lpsrc.__r_.__value_.__r.__words[0] = 1;
    lpsrc.__r_.__value_.__l.__size_ = 1065353216;
    uint64_t v57 = v177;
    std::string::basic_string[abi:ne180100]<0>(&v185, "elementwise");
    Espresso::abstract_engine_factory::make_kernel_priv(v57, (uint64_t)&v175, (uint64_t)&v185, (uint64_t)&lpsrc, &v174);
    unint64_t v58 = a5;
    if (!v181.__r_.__value_.__r.__words[0])
    {
      unint64_t v59 = 0;
LABEL_152:
      std::string::size_type v60 = 0;
      goto LABEL_153;
    }
    if (!v59) {
      goto LABEL_152;
    }
    std::string::size_type v60 = v181.__r_.__value_.__l.__size_;
    if (!v181.__r_.__value_.__l.__size_) {
      goto LABEL_155;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v181.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
LABEL_153:
    if (v181.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v181.__r_.__value_.__l.__size_);
    }
LABEL_155:
    uint64_t v113 = (std::__shared_weak_count *)v60;
    if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v185.__r_.__value_.__l.__data_);
    }
    uint64_t v61 = v25;
    if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v62 = HIBYTE(v169.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v62 = v169.__r_.__value_.__l.__size_;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v181, v62 + 1);
    if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v63 = &v181;
    }
    else {
      long long v63 = (std::string *)v181.__r_.__value_.__r.__words[0];
    }
    if (v62)
    {
      if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v64 = &v169;
      }
      else {
        long long v64 = (std::string *)v169.__r_.__value_.__r.__words[0];
      }
      memmove(v63, v64, v62);
    }
    *(_WORD *)((char *)&v63->__r_.__value_.__l.__data_ + v62) = 95;
    std::to_string(&v127, v61);
    if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v65 = &v127;
    }
    else {
      int v65 = (std::string *)v127.__r_.__value_.__r.__words[0];
    }
    if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v66 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v66 = v127.__r_.__value_.__l.__size_;
    }
    int v67 = std::string::append(&v181, (const std::string::value_type *)v65, v66);
    long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
    v185.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v185.__r_.__value_.__l.__data_ = v68;
    v67->__r_.__value_.__l.__size_ = 0;
    v67->__r_.__value_.__r.__words[2] = 0;
    v67->__r_.__value_.__r.__words[0] = 0;
    long long v69 = std::string::append(&v185, "_multiply_mask");
    long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
    v128.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v70;
    v69->__r_.__value_.__l.__size_ = 0;
    v69->__r_.__value_.__r.__words[2] = 0;
    v69->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v185.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v127.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v181.__r_.__value_.__l.__data_);
    }
    if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v71 = HIBYTE(v169.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v71 = v169.__r_.__value_.__l.__size_;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v181, v71 + 1);
    if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v72 = &v181;
    }
    else {
      uint64_t v72 = (std::string *)v181.__r_.__value_.__r.__words[0];
    }
    if (v71)
    {
      if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v73 = &v169;
      }
      else {
        uint64_t v73 = (std::string *)v169.__r_.__value_.__r.__words[0];
      }
      memmove(v72, v73, v71);
    }
    *(_WORD *)((char *)&v72->__r_.__value_.__l.__data_ + v71) = 95;
    std::to_string(&v127, v61);
    if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v74 = &v127;
    }
    else {
      std::string v74 = (std::string *)v127.__r_.__value_.__r.__words[0];
    }
    if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v75 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v75 = v127.__r_.__value_.__l.__size_;
    }
    uint64_t v76 = std::string::append(&v181, (const std::string::value_type *)v74, v75);
    long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
    v185.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v185.__r_.__value_.__l.__data_ = v77;
    v76->__r_.__value_.__l.__size_ = 0;
    v76->__r_.__value_.__r.__words[2] = 0;
    v76->__r_.__value_.__r.__words[0] = 0;
    int v78 = std::string::append(&v185, "_masked");
    std::string::size_type v79 = v78->__r_.__value_.__l.__size_;
    size_t v115 = (std::string::value_type *)v78->__r_.__value_.__r.__words[0];
    v126[0] = v78->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v126 + 3) = *(_DWORD *)((char *)&v78->__r_.__value_.__r.__words[2] + 3);
    int v117 = SHIBYTE(v78->__r_.__value_.__r.__words[2]);
    v78->__r_.__value_.__l.__size_ = 0;
    v78->__r_.__value_.__r.__words[2] = 0;
    v78->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v185.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v127.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v181.__r_.__value_.__l.__data_);
    }
    int v124 = v59;
    unsigned int v125 = v113;
    if (v113) {
      atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v181, "elementwise");
    if (v114 < 0)
    {
      std::string::__init_copy_ctor_external(&v185, v116, v47);
    }
    else
    {
      v185.__r_.__value_.__r.__words[0] = (std::string::size_type)v116;
      v185.__r_.__value_.__l.__size_ = v47;
      LODWORD(v185.__r_.__value_.__r.__words[2]) = v136[0];
      *(_DWORD *)((char *)&v185.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v136 + 3);
      *((unsigned char *)&v185.__r_.__value_.__s + 23) = v114;
    }
    int v80 = SHIBYTE(v190.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v186, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v186 = *(_OWORD *)&v190.__r_.__value_.__l.__data_;
      v187[0] = *((void *)&v190.__r_.__value_.__l + 2);
    }
    memset(&v127, 0, sizeof(v127));
    v123.__r_.__value_.__r.__words[0] = (std::string::size_type)&v127;
    v123.__r_.__value_.__s.__data_[8] = 0;
    v127.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    v127.__r_.__value_.__l.__size_ = v127.__r_.__value_.__r.__words[0];
    v127.__r_.__value_.__r.__words[2] = v127.__r_.__value_.__r.__words[0] + 48;
    v127.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v127.__r_.__value_.__r.__words[2], (long long *)&v185, (long long *)&v187[1], (std::string *)v127.__r_.__value_.__l.__data_);
    if (v117 < 0)
    {
      std::string::__init_copy_ctor_external(&v188, v115, v79);
    }
    else
    {
      v188.__r_.__value_.__r.__words[0] = (std::string::size_type)v115;
      v188.__r_.__value_.__l.__size_ = v79;
      LODWORD(v188.__r_.__value_.__r.__words[2]) = v126[0];
      *(_DWORD *)((char *)&v188.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v126 + 3);
      *((unsigned char *)&v188.__r_.__value_.__s + 23) = v117;
    }
    memset(&v123, 0, sizeof(v123));
    v122.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
    v122.__r_.__value_.__s.__data_[8] = 0;
    v123.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v123.__r_.__value_.__l.__size_ = v123.__r_.__value_.__r.__words[0];
    v123.__r_.__value_.__r.__words[2] = v123.__r_.__value_.__r.__words[0] + 24;
    v123.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v123.__r_.__value_.__r.__words[2], (long long *)&v188, (long long *)&v189, (std::string *)v123.__r_.__value_.__l.__data_);
    Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::add_kernel(a1, &v124, &v181, &v128, (std::string **)&v127, (std::string **)&v123);
    v122.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v122);
    if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v188.__r_.__value_.__l.__data_);
    }
    v123.__r_.__value_.__r.__words[0] = (std::string::size_type)&v127;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
    for (uint64_t i = 0; i != -6; i -= 3)
    {
      if (SHIBYTE(v187[i]) < 0) {
        operator delete(*(void **)((char *)&v185 + i * 8 + 24));
      }
    }
    if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v181.__r_.__value_.__l.__data_);
    }
    if (v125) {
      nitro::nitro_function::nitro_function(v125);
    }
    v185.__r_.__value_.__r.__words[2] = 897988541;
    LOBYTE(v186) = 0;
    *(void *)((char *)v187 + 4) = 0;
    v185.__r_.__value_.__l.__size_ = 1065353216;
    v185.__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v181, "elementwise");
    Espresso::abstract_engine_factory::make_kernel_priv(v57, (uint64_t)&v175, (uint64_t)&v181, (uint64_t)&v185, &v174);
    if (!v127.__r_.__value_.__r.__words[0])
    {
      uint64_t v82 = 0;
LABEL_229:
      uint64_t v83 = 0;
      goto LABEL_230;
    }
    if (!v82) {
      goto LABEL_229;
    }
    uint64_t v83 = (std::__shared_weak_count *)v127.__r_.__value_.__l.__size_;
    if (!v127.__r_.__value_.__l.__size_) {
      goto LABEL_232;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v127.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
LABEL_230:
    if (v127.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v127.__r_.__value_.__l.__size_);
    }
LABEL_232:
    if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v181.__r_.__value_.__l.__data_);
    }
    if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v84 = HIBYTE(v169.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v84 = v169.__r_.__value_.__l.__size_;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v123, v84 + 1);
    if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v85 = &v123;
    }
    else {
      uint64_t v85 = (std::string *)v123.__r_.__value_.__r.__words[0];
    }
    if (v84)
    {
      if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v86 = &v169;
      }
      else {
        std::string v86 = (std::string *)v169.__r_.__value_.__r.__words[0];
      }
      memmove(v85, v86, v84);
    }
    *(_WORD *)((char *)&v85->__r_.__value_.__l.__data_ + v84) = 95;
    std::to_string(&v188, v61);
    if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v87 = &v188;
    }
    else {
      uint64_t v87 = (std::string *)v188.__r_.__value_.__r.__words[0];
    }
    if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v88 = HIBYTE(v188.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v88 = v188.__r_.__value_.__l.__size_;
    }
    uint64_t v89 = std::string::append(&v123, (const std::string::value_type *)v87, v88);
    long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
    v181.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v181.__r_.__value_.__l.__data_ = v90;
    v89->__r_.__value_.__l.__size_ = 0;
    v89->__r_.__value_.__r.__words[2] = 0;
    v89->__r_.__value_.__r.__words[0] = 0;
    std::string v91 = std::string::append(&v181, "_add");
    long long v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
    v127.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v92;
    v91->__r_.__value_.__l.__size_ = 0;
    v91->__r_.__value_.__r.__words[2] = 0;
    v91->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v181.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v188.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v123.__r_.__value_.__l.__data_);
    }
    if (*((char *)v58 + 23) >= 0) {
      size_t v93 = *((unsigned __int8 *)v58 + 23);
    }
    else {
      size_t v93 = (size_t)v58[1];
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v122, v93 + 15);
    if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v94 = &v122;
    }
    else {
      long long v94 = (std::string *)v122.__r_.__value_.__r.__words[0];
    }
    if (v93)
    {
      if (*((char *)v58 + 23) >= 0) {
        unsigned __int8 v95 = v58;
      }
      else {
        unsigned __int8 v95 = *v58;
      }
      memmove(v94, v95, v93);
    }
    strcpy((char *)v94 + v93, "_refl_pad_lrtb_");
    std::to_string(&v121, v61);
    if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v96 = &v121;
    }
    else {
      std::string::size_type v96 = (std::string *)v121.__r_.__value_.__r.__words[0];
    }
    if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v97 = HIBYTE(v121.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v97 = v121.__r_.__value_.__l.__size_;
    }
    std::string v98 = std::string::append(&v122, (const std::string::value_type *)v96, v97);
    a5 = v58;
    long long v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
    v188.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v188.__r_.__value_.__l.__data_ = v99;
    v98->__r_.__value_.__l.__size_ = 0;
    v98->__r_.__value_.__r.__words[2] = 0;
    v98->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v183, v61);
    if ((v183.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v100 = &v183;
    }
    else {
      std::string v100 = (std::string *)v183.__r_.__value_.__r.__words[0];
    }
    if ((v183.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v101 = HIBYTE(v183.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v101 = v183.__r_.__value_.__l.__size_;
    }
    std::string v102 = std::string::append(&v188, (const std::string::value_type *)v100, v101);
    long long v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
    v181.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v181.__r_.__value_.__l.__data_ = v103;
    v102->__r_.__value_.__l.__size_ = 0;
    v102->__r_.__value_.__r.__words[2] = 0;
    v102->__r_.__value_.__r.__words[0] = 0;
    long long v104 = std::string::append(&v181, "00");
    long long v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
    v123.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v105;
    v104->__r_.__value_.__l.__size_ = 0;
    v104->__r_.__value_.__r.__words[2] = 0;
    v104->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v181.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v183.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v188.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v121.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v122.__r_.__value_.__l.__data_);
    }
    if (v61 == v112) {
      std::string::operator=(&v123, a6);
    }
    std::string v119 = v82;
    std::string v120 = v83;
    if (v83) {
      atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v188, "elementwise");
    if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v181, v169.__r_.__value_.__l.__data_, v169.__r_.__value_.__l.__size_);
    }
    else {
      std::string v181 = v169;
    }
    if (v117 < 0)
    {
      std::string::__init_copy_ctor_external(&v182, v115, v79);
    }
    else
    {
      v182.__r_.__value_.__r.__words[0] = (std::string::size_type)v115;
      v182.__r_.__value_.__l.__size_ = v79;
      LODWORD(v182.__r_.__value_.__r.__words[2]) = v126[0];
      *(_DWORD *)((char *)&v182.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v126 + 3);
      *((unsigned char *)&v182.__r_.__value_.__s + 23) = v117;
    }
    memset(&v122, 0, sizeof(v122));
    v121.__r_.__value_.__r.__words[0] = (std::string::size_type)&v122;
    v121.__r_.__value_.__s.__data_[8] = 0;
    v122.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    v122.__r_.__value_.__l.__size_ = v122.__r_.__value_.__r.__words[0];
    v122.__r_.__value_.__r.__words[2] = v122.__r_.__value_.__r.__words[0] + 48;
    v122.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v122.__r_.__value_.__r.__words[2], (long long *)&v181, (long long *)&v183, (std::string *)v122.__r_.__value_.__l.__data_);
    if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v183, v123.__r_.__value_.__l.__data_, v123.__r_.__value_.__l.__size_);
    }
    else {
      std::string v183 = v123;
    }
    memset(&v121, 0, sizeof(v121));
    long long v179 = &v121;
    char v180 = 0;
    v121.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v121.__r_.__value_.__l.__size_ = v121.__r_.__value_.__r.__words[0];
    v121.__r_.__value_.__r.__words[2] = v121.__r_.__value_.__r.__words[0] + 24;
    v121.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v121.__r_.__value_.__r.__words[2], (long long *)&v183, (long long *)&v184, (std::string *)v121.__r_.__value_.__l.__data_);
    Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::add_kernel(a1, &v119, &v188, &v127, (std::string **)&v122, (std::string **)&v121);
    long long v179 = &v121;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v179);
    if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v183.__r_.__value_.__l.__data_);
    }
    v121.__r_.__value_.__r.__words[0] = (std::string::size_type)&v122;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v121);
    for (uint64_t j = 0; j != -6; j -= 3)
    {
      if (SHIBYTE(v182.__r_.__value_.__r.__words[j + 2]) < 0) {
        operator delete(*(void **)((char *)&v181 + j * 8 + 24));
      }
    }
    if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v188.__r_.__value_.__l.__data_);
    }
    if (v120) {
      nitro::nitro_function::nitro_function(v120);
    }
    std::string::operator=(&v169, &v123);
    if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v123.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v127.__r_.__value_.__l.__data_);
    }
    if (v83) {
      nitro::nitro_function::nitro_function(v83);
    }
    if (v117 < 0) {
      operator delete(v115);
    }
    if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v128.__r_.__value_.__l.__data_);
    }
    if (v113) {
      nitro::nitro_function::nitro_function(v113);
    }
    if (v80 < 0) {
      operator delete(v190.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v133.__r_.__value_.__l.__data_);
    }
    if (v114 < 0) {
      operator delete(v116);
    }
    if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v137.__r_.__value_.__l.__data_);
    }
    if (v141) {
      nitro::nitro_function::nitro_function(v141);
    }
    if (v110) {
      nitro::nitro_function::nitro_function(v110);
    }
    uint64_t v25 = v61 + 1;
    v18 += 4;
    v19 += 16;
  }
  while (v61 + 1 != v112 + 1);
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v169.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v192.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  if (v107) {
    nitro::nitro_function::nitro_function(v107);
  }
  if (v176) {
    nitro::nitro_function::nitro_function(v176);
  }
  if (v178) {
    nitro::nitro_function::nitro_function(v178);
  }
}

void sub_1929511F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9)
{
  if (*(char *)(v9 - 137) < 0) {
    operator delete(*(void **)(v9 - 160));
  }
  if (SLOBYTE(STACK[0x31F]) < 0) {
    operator delete((void *)STACK[0x308]);
  }
  if (a9) {
    nitro::nitro_function::nitro_function(a9);
  }
  if (STACK[0x388]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x388]);
  }
  if (STACK[0x398]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x398]);
  }
  _Unwind_Resume(a1);
}

void transform_reflective_padding_tb(int64x2_t *a1, void *a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6)
{
  *(void *)&long long v87 = *MEMORY[0x1E4F143B8];
  int v55 = a4;
  if (a4 < 1) {
    return;
  }
  Espresso::abstract_engine_factory::shared(&v78);
  uint64_t v9 = a2[2];
  uint64_t v10 = (std::__shared_weak_count *)a2[3];
  uint64_t v76 = v9;
  long long v77 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v54 = a6;
  int v11 = (***(uint64_t (****)(void))(v9 + 8))(*(void *)(v9 + 8));
  int v74 = *(_DWORD *)(*(void *)(a2[4] + 16 * a1[3].i32[2]) + 12);
  int v75 = v11;
  memset(&v73, 0, sizeof(v73));
  long long v70 = 0;
  size_t v71 = 0;
  unint64_t v72 = 0;
  int v12 = -1;
  uint64_t v68 = 1;
  int v69 = 1;
  LODWORD(v66) = 1;
  int v13 = 1;
  do
  {
    int v14 = v13 + 1;
    HIDWORD(v66) = v13;
    int v67 = v13 + 1;
    uint64_t v15 = v78;
    std::string::basic_string[abi:ne180100]<0>(&__p, "slice");
    Espresso::abstract_engine_factory::make_kernel_priv(v15, (uint64_t)&v76, (uint64_t)&__p, (uint64_t)&v66, &v75);
    if (lpsrc.__r_.__value_.__r.__words[0])
    {
      if (v16)
      {
        std::string::size_type size = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
        if (!lpsrc.__r_.__value_.__l.__size_) {
          goto LABEL_13;
        }
        atomic_fetch_add_explicit((atomic_ullong *volatile)(lpsrc.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      else
      {
        std::string::size_type size = 0;
      }
    }
    else
    {
      std::string::size_type size = 0;
      uint64_t v16 = 0;
    }
    if (lpsrc.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_);
    }
LABEL_13:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (*(char *)(a5 + 23) >= 0) {
      size_t v18 = *(unsigned __int8 *)(a5 + 23);
    }
    else {
      size_t v18 = *(void *)(a5 + 8);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v63, v18 + 5);
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v19 = &v63;
    }
    else {
      uint64_t v19 = (std::string *)v63.__r_.__value_.__r.__words[0];
    }
    if (v18)
    {
      if (*(char *)(a5 + 23) >= 0) {
        unint64_t v20 = (const std::string::value_type *)a5;
      }
      else {
        unint64_t v20 = *(const std::string::value_type **)a5;
      }
      memmove(v19, v20, v18);
    }
    strcpy((char *)v19 + v18, "_row_");
    int v21 = v14 - 1;
    std::to_string(&v86, v14 - 1);
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v22 = &v86;
    }
    else {
      std::string v22 = (std::string *)v86.__r_.__value_.__r.__words[0];
    }
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v23 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v23 = v86.__r_.__value_.__l.__size_;
    }
    long long v24 = std::string::append(&v63, (const std::string::value_type *)v22, v23);
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    lpsrc.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&lpsrc.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    uint64_t v26 = std::string::append(&lpsrc, "_from_top");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(lpsrc.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v86.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v63.__r_.__value_.__l.__data_);
    }
    uint64_t v61 = v16;
    size_t v62 = size;
    if (size) {
      atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&lpsrc, "slice");
    if (*(char *)(a5 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
    }
    else {
      std::string v86 = *(std::string *)a5;
    }
    memset(&v63, 0, sizeof(v63));
    v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
    v84.__r_.__value_.__s.__data_[8] = 0;
    v63.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v63.__r_.__value_.__l.__size_ = v63.__r_.__value_.__r.__words[0];
    v63.__r_.__value_.__r.__words[2] = v63.__r_.__value_.__r.__words[0] + 24;
    v63.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v63.__r_.__value_.__r.__words[2], (long long *)&v86, &v87, (std::string *)v63.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v82, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v82 = __p;
    }
    memset(&v84, 0, sizeof(v84));
    int v80 = &v84;
    char v81 = 0;
    v84.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v84.__r_.__value_.__l.__size_ = v84.__r_.__value_.__r.__words[0];
    v84.__r_.__value_.__r.__words[2] = v84.__r_.__value_.__r.__words[0] + 24;
    v84.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v84.__r_.__value_.__r.__words[2], (long long *)&v82, (long long *)&v83, (std::string *)v84.__r_.__value_.__l.__data_);
    Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::add_kernel(a1, &v61, &lpsrc, &__p, (std::string **)&v63, (std::string **)&v84);
    int v80 = &v84;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v82.__r_.__value_.__l.__data_);
    }
    v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v86.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(lpsrc.__r_.__value_.__l.__data_);
    }
    if (v62) {
      nitro::nitro_function::nitro_function(v62);
    }
    v28.__i_ = v73.__begin_;
    std::vector<std::string>::insert(&v73, v28, &__p);
    int v29 = v12 + *(_DWORD *)(a3 + 4);
    HIDWORD(v66) = v29 - 1;
    int v67 = v29;
    std::string::basic_string[abi:ne180100]<0>(&lpsrc, "slice");
    Espresso::abstract_engine_factory::make_kernel_priv(v15, (uint64_t)&v76, (uint64_t)&lpsrc, (uint64_t)&v66, &v75);
    if (v63.__r_.__value_.__r.__words[0])
    {
      if (v30)
      {
        uint64_t v31 = (std::__shared_weak_count *)v63.__r_.__value_.__l.__size_;
        if (!v63.__r_.__value_.__l.__size_) {
          goto LABEL_62;
        }
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v63.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v31 = 0;
      }
    }
    else
    {
      uint64_t v31 = 0;
      uint64_t v30 = 0;
    }
    if (v63.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v63.__r_.__value_.__l.__size_);
    }
LABEL_62:
    if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(lpsrc.__r_.__value_.__l.__data_);
    }
    if (*(char *)(a5 + 23) >= 0) {
      size_t v32 = *(unsigned __int8 *)(a5 + 23);
    }
    else {
      size_t v32 = *(void *)(a5 + 8);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v63, v32 + 5);
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v33 = &v63;
    }
    else {
      std::string::size_type v33 = (std::string *)v63.__r_.__value_.__r.__words[0];
    }
    if (v32)
    {
      if (*(char *)(a5 + 23) >= 0) {
        size_t v34 = (const void *)a5;
      }
      else {
        size_t v34 = *(const void **)a5;
      }
      memmove(v33, v34, v32);
    }
    strcpy((char *)v33 + v32, "_row_");
    std::to_string(&v86, v21);
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v35 = &v86;
    }
    else {
      std::string v35 = (std::string *)v86.__r_.__value_.__r.__words[0];
    }
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v36 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v36 = v86.__r_.__value_.__l.__size_;
    }
    std::string v37 = std::string::append(&v63, (const std::string::value_type *)v35, v36);
    long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    lpsrc.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&lpsrc.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    std::string v39 = std::string::append(&lpsrc, "_from_bottom");
    std::string::size_type v40 = v39->__r_.__value_.__r.__words[0];
    v84.__r_.__value_.__r.__words[0] = v39->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v84.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v39->__r_.__value_.__r.__words[1] + 7);
    char v41 = HIBYTE(v39->__r_.__value_.__r.__words[2]);
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    __p.__r_.__value_.__r.__words[0] = v40;
    __p.__r_.__value_.__l.__size_ = v84.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v84.__r_.__value_.__r.__words + 7);
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v41;
    if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(lpsrc.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v86.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v63.__r_.__value_.__l.__data_);
    }
    unint64_t v59 = v30;
    std::string::size_type v60 = v31;
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&lpsrc, "slice");
    if (*(char *)(a5 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
    }
    else {
      std::string v86 = *(std::string *)a5;
    }
    memset(&v63, 0, sizeof(v63));
    v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
    v84.__r_.__value_.__s.__data_[8] = 0;
    v63.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v63.__r_.__value_.__l.__size_ = v63.__r_.__value_.__r.__words[0];
    v63.__r_.__value_.__r.__words[2] = v63.__r_.__value_.__r.__words[0] + 24;
    v63.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v63.__r_.__value_.__r.__words[2], (long long *)&v86, &v87, (std::string *)v63.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v82, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v82 = __p;
    }
    memset(&v84, 0, sizeof(v84));
    int v80 = &v84;
    char v81 = 0;
    v84.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v84.__r_.__value_.__l.__size_ = v84.__r_.__value_.__r.__words[0];
    v84.__r_.__value_.__r.__words[2] = v84.__r_.__value_.__r.__words[0] + 24;
    v84.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v84.__r_.__value_.__r.__words[2], (long long *)&v82, (long long *)&v83, (std::string *)v84.__r_.__value_.__l.__data_);
    Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::add_kernel(a1, &v59, &lpsrc, &__p, (std::string **)&v63, (std::string **)&v84);
    int v80 = &v84;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v82.__r_.__value_.__l.__data_);
    }
    v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v86.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(lpsrc.__r_.__value_.__l.__data_);
    }
    if (v60) {
      nitro::nitro_function::nitro_function(v60);
    }
    uint64_t v42 = v71;
    if ((unint64_t)v71 >= v72)
    {
      unint64_t v44 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v70, (uint64_t)&__p);
    }
    else
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v71, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v43 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v71->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v43;
      }
      unint64_t v44 = v42 + 1;
    }
    size_t v71 = v44;
    if (v31) {
      nitro::nitro_function::nitro_function(v31);
    }
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (!size) {
        goto LABEL_116;
      }
LABEL_115:
      nitro::nitro_function::nitro_function(size);
      goto LABEL_116;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (size) {
      goto LABEL_115;
    }
LABEL_116:
    --v12;
    int v13 = v21 + 1;
  }
  while (v21 != v55);
  WORD2(v80) = 0;
  LODWORD(v80) = 1;
  uint64_t v45 = v78;
  std::string::basic_string[abi:ne180100]<0>(&__p, "general_concat");
  Espresso::abstract_engine_factory::make_kernel_priv(v45, (uint64_t)&v76, (uint64_t)&__p, (uint64_t)&v80, &v75);
  if (!lpsrc.__r_.__value_.__r.__words[0])
  {
    int v46 = 0;
    goto LABEL_125;
  }
  if (!v46)
  {
LABEL_125:
    std::string::size_type v47 = 0;
    goto LABEL_126;
  }
  std::string::size_type v47 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
  if (lpsrc.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(lpsrc.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
LABEL_126:
  if (lpsrc.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a5 + 23) >= 0) {
    size_t v48 = *(unsigned __int8 *)(a5 + 23);
  }
  else {
    size_t v48 = *(void *)(a5 + 8);
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v48 + 10);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v48)
  {
    if (*(char *)(a5 + 23) >= 0) {
      int v50 = (const void *)a5;
    }
    else {
      int v50 = *(const void **)a5;
    }
    memmove(p_p, v50, v48);
  }
  strcpy((char *)p_p + v48, "_tb_concat");
  memset(&lpsrc, 0, sizeof(lpsrc));
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((void **)&lpsrc.__r_.__value_.__l.__data_, 0, v73.__begin_, v73.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v73.__end_ - (char *)v73.__begin_) >> 3));
  size_t v51 = (_OWORD *)lpsrc.__r_.__value_.__l.__size_;
  if (lpsrc.__r_.__value_.__l.__size_ >= lpsrc.__r_.__value_.__r.__words[2])
  {
    int v53 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&lpsrc.__r_.__value_.__l.__data_, a5);
  }
  else
  {
    if (*(char *)(a5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)lpsrc.__r_.__value_.__l.__size_, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
    }
    else
    {
      long long v52 = *(_OWORD *)a5;
      *(void *)(lpsrc.__r_.__value_.__l.__size_ + 16) = *(void *)(a5 + 16);
      *size_t v51 = v52;
    }
    int v53 = (std::string *)((char *)v51 + 24);
  }
  lpsrc.__r_.__value_.__l.__size_ = (std::string::size_type)v53;
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((void **)&lpsrc.__r_.__value_.__l.__data_, (uint64_t)v53, v70, v71, 0xAAAAAAAAAAAAAAABLL * (((char *)v71 - (char *)v70) >> 3));
  v58[0] = v46;
  v58[1] = v47;
  if (v47) {
    atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v63, "general_concat");
  if (*(char *)(v54 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v84, *(const std::string::value_type **)v54, *(void *)(v54 + 8));
  }
  else {
    std::string v84 = *(std::string *)v54;
  }
  memset(&v86, 0, sizeof(v86));
  v82.__r_.__value_.__r.__words[0] = (std::string::size_type)&v86;
  v82.__r_.__value_.__s.__data_[8] = 0;
  v86.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v86.__r_.__value_.__l.__size_ = v86.__r_.__value_.__r.__words[0];
  v86.__r_.__value_.__r.__words[2] = v86.__r_.__value_.__r.__words[0] + 24;
  v86.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v86.__r_.__value_.__r.__words[2], (long long *)&v84, (long long *)&v85, (std::string *)v86.__r_.__value_.__l.__data_);
  Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::add_kernel(a1, v58, &v63, &__p, (std::string **)&lpsrc, (std::string **)&v86);
  v82.__r_.__value_.__r.__words[0] = (std::string::size_type)&v86;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v84.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }
  v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&lpsrc;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }
  std::string::size_type v66 = &v70;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
  long long v70 = (std::string *)&v73;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70);
  if (v77) {
    nitro::nitro_function::nitro_function(v77);
  }
  if (v79) {
    nitro::nitro_function::nitro_function(v79);
  }
}

void sub_192952590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,char **a44,uint64_t a45,uint64_t a46,char *a47,uint64_t a48,uint64_t a49,char a50)
{
  a24 = &a30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a24);
  if (a42 < 0) {
    operator delete(__p);
  }
  if (v50) {
    nitro::nitro_function::nitro_function(v50);
  }
  a44 = &a47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a44);
  a47 = &a50;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  int v53 = *(std::__shared_weak_count **)(v51 - 232);
  if (v53) {
    nitro::nitro_function::nitro_function(v53);
  }
  uint64_t v54 = *(std::__shared_weak_count **)(v51 - 216);
  if (v54) {
    nitro::nitro_function::nitro_function(v54);
  }
  _Unwind_Resume(a1);
}

void sub_192952860(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v35 - 105) < 0) {
    operator delete(*(void **)(v35 - 128));
  }
  if (a29 < 0) {
    JUMPOUT(0x192952810);
  }
  JUMPOUT(0x192952814);
}

void Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::add_kernel(int64x2_t *a1, void *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6)
{
  __int32 v23 = 0;
  memset(v26, 0, sizeof(v26));
  int v12 = (char *)operator new(0xF8uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)int v12 = &unk_1EE389DF0;
  *((void *)v12 + 3) = &unk_1EE36C758;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 161) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((void *)v12 + 30) = 0;
  long long v24 = v12 + 24;
  long long v25 = (std::__shared_weak_count *)v12;
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  if (v14)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    uint64_t v15 = (std::__shared_weak_count *)*((void *)v12 + 12);
    *((void *)v12 + 11) = v13;
    *((void *)v12 + 12) = v14;
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
  }
  else
  {
    *((void *)v12 + 11) = v13;
    *((void *)v12 + 12) = 0;
  }
  std::string::operator=((std::string *)(v24 + 16), a4);
  std::string::operator=((std::string *)(v24 + 40), a3);
  uint64_t v16 = *(uint64_t (****)(void))(*(void *)(*a2 + 8) + 8);
  uint64_t v17 = v24;
  *((_DWORD *)v24 + 2) = (**v16)(v16);
  uint64_t v18 = a1[1].i64[0];
  if (v18)
  {
    *((_DWORD *)v17 + 3) = *(_DWORD *)(v18 + 12);
    if (*(char *)(v18 + 223) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v18 + 200), *(void *)(v18 + 208));
    }
    else {
      std::string __p = *(std::string *)(v18 + 200);
    }
    std::string::operator=((std::string *)(v17 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v19 = *(void *)(a1[4].i64[0] + 32);
    if (*(void *)(a1[4].i64[0] + 40) != v19) {
      *((_DWORD *)v17 + 3) = *(_DWORD *)(*(void *)v19 + 12);
    }
  }
  if (v26 != (_OWORD *)a5) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v26, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  }
  if ((std::string **)((char *)&v26[1] + 8) != a6) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v26[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  }
  __int32 v23 = a1[3].i32[2];
  unint64_t v20 = a1[2].u64[1];
  if (v20 >= a1[3].i64[0])
  {
    uint64_t v21 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v23);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v23);
    uint64_t v21 = v20 + 72;
    a1[2].i64[1] = v20 + 72;
  }
  a1[2].i64[1] = v21;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
}

void sub_192952B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void generate_refl_pad_lr_mask(int64x2_t *a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, const void **a8)
{
  uint64_t v128 = a7;
  long long v136 = a1;
  *(void *)&long long v212 = *MEMORY[0x1E4F143B8];
  Espresso::abstract_engine_factory::shared(&v176);
  uint64_t v14 = *(void *)(a2 + 16);
  uint64_t v15 = *(std::__shared_weak_count **)(a2 + 24);
  uint64_t v174 = v14;
  uint64_t v175 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v173 = (***(uint64_t (****)(void))(v14 + 8))(*(void *)(v14 + 8));
  int v172 = *(_DWORD *)(*(void *)(*(void *)(a2 + 32) + 16 * v136[3].i32[2]) + 12);
  if (*((char *)a8 + 23) >= 0) {
    size_t v16 = *((unsigned __int8 *)a8 + 23);
  }
  else {
    size_t v16 = (size_t)a8[1];
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&__s, v16 + 9);
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_s = &__s;
  }
  else {
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  if (v16)
  {
    if (*((char *)a8 + 23) >= 0) {
      uint64_t v18 = a8;
    }
    else {
      uint64_t v18 = *a8;
    }
    memmove(p_s, v18, v16);
  }
  strcpy((char *)p_s + v16, "channel_0");
  if (a5 == 1)
  {
    *(void *)&long long v193 = 0x100000000;
    long long v192 = xmmword_192DCA680;
    uint64_t v19 = v176;
    std::string::basic_string[abi:ne180100]<0>(&__p, "slice");
    Espresso::abstract_engine_factory::make_kernel_priv(v19, (uint64_t)&v174, (uint64_t)&__p, (uint64_t)&v192, &v173);
    if ((void)lpsrc)
    {
      if (v20)
      {
        uint64_t v21 = (std::__shared_weak_count *)*((void *)&lpsrc + 1);
        if (*((void *)&lpsrc + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&lpsrc + 1) + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v21 = 0;
      }
    }
    else
    {
      uint64_t v21 = 0;
      unint64_t v20 = 0;
    }
    if (*((void *)&lpsrc + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&lpsrc + 1));
    }
    if (SBYTE7(v156) < 0) {
      operator delete((void *)__p);
    }
    v170[0] = v20;
    v170[1] = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "slice");
    if (*(char *)(a6 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v188, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
    }
    else {
      std::string v188 = *(std::string *)a6;
    }
    long long lpsrc = 0uLL;
    *(void *)&long long v150 = 0;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&lpsrc;
    __str.__r_.__value_.__s.__data_[8] = 0;
    *(void *)&long long lpsrc = operator new(0x18uLL);
    *((void *)&lpsrc + 1) = lpsrc;
    *(void *)&long long v150 = lpsrc + 24;
    *((void *)&lpsrc + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v150, (long long *)&v188, &v189, (std::string *)lpsrc);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v209, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    }
    else {
      std::string v209 = __s;
    }
    memset(&__str, 0, sizeof(__str));
    v190.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    v190.__r_.__value_.__s.__data_[8] = 0;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
    __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[0] + 24;
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__str.__r_.__value_.__r.__words[2], (long long *)&v209, (long long *)&v210, (std::string *)__str.__r_.__value_.__l.__data_);
    Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::add_kernel(v136, v170, (const std::string *)&__p, &__s, (std::string **)&lpsrc, (std::string **)&__str);
    v190.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v190);
    if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v209.__r_.__value_.__l.__data_);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&lpsrc;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v188.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v156) < 0) {
      operator delete((void *)__p);
    }
    if (v21)
    {
      nitro::nitro_function::nitro_function(v21);
      nitro::nitro_function::nitro_function(v21);
    }
  }
  if (*((char *)a8 + 23) >= 0) {
    size_t v22 = *((unsigned __int8 *)a8 + 23);
  }
  else {
    size_t v22 = (size_t)a8[1];
  }
  __int32 v23 = &v192;
  std::string::basic_string[abi:ne180100]((uint64_t)&v192, v22 + 30);
  if (SBYTE7(v193) < 0) {
    __int32 v23 = (long long *)v192;
  }
  if (v22)
  {
    if (*((char *)a8 + 23) >= 0) {
      long long v24 = a8;
    }
    else {
      long long v24 = *a8;
    }
    memmove(v23, v24, v22);
  }
  strcpy((char *)v23 + v22, "const_minus_one_for_pad_index_");
  std::to_string((std::string *)&__p, a5);
  if ((SBYTE7(v156) & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if ((SBYTE7(v156) & 0x80u) == 0) {
    std::string::size_type v26 = BYTE7(v156);
  }
  else {
    std::string::size_type v26 = *((void *)&__p + 1);
  }
  long long v27 = std::string::append((std::string *)&v192, p_p, v26);
  std::vector<std::string>::const_iterator v28 = (std::string::value_type *)v27->__r_.__value_.__r.__words[0];
  std::string::size_type size = v27->__r_.__value_.__l.__size_;
  v169[0] = v27->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v169 + 3) = *(_DWORD *)((char *)&v27->__r_.__value_.__r.__words[2] + 3);
  int v29 = SHIBYTE(v27->__r_.__value_.__r.__words[2]);
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SBYTE7(v156) < 0) {
    operator delete((void *)__p);
  }
  int v30 = 2 * a5;
  if (SBYTE7(v193) < 0) {
    operator delete((void *)v192);
  }
  int v129 = a3;
  __asm { FMOV            V8.2S, #1.0 }
  *(void *)&v194[32] = _D8;
  uint64_t v197 = 0x1000100010001;
  int v198 = 0;
  int v200 = 1;
  int v207 = 0;
  char v208 = 0;
  uint64_t v204 = 0;
  uint64_t v203 = 0;
  long long v192 = 0uLL;
  uint64_t v201 = 0;
  int v202 = 0x10000;
  long long v193 = 0uLL;
  int v205 = 0;
  __int16 v206 = 1;
  *(_DWORD *)&v194[28] = -1;
  *(_DWORD *)&v194[16] = v30 - 1;
  *(void *)&v194[20] = 1;
  *(void *)&v194[8] = 0x100000001;
  long long v130 = xmmword_192DCA230;
  long long v199 = xmmword_192DCA230;
  *(void *)uint64_t v194 = 1;
  *(void *)&v194[40] = 0;
  LOWORD(v195) = v30 - 2;
  HIWORD(v195) = v30 - 2;
  uint64_t v196 = 0;
  if (a5 == 1)
  {
    *(_DWORD *)&v194[16] = 3;
    int v195 = 65537;
  }
  uint64_t v36 = v176;
  int v135 = v29;
  std::string::basic_string[abi:ne180100]<0>(&__p, "convolution");
  Espresso::abstract_engine_factory::make_kernel_priv(v36, (uint64_t)&v174, (uint64_t)&__p, (uint64_t)&v192, &v173);
  if (!(void)lpsrc)
  {
    std::string v37 = 0;
    goto LABEL_68;
  }
  if (!v37)
  {
LABEL_68:
    long long v38 = 0;
    goto LABEL_69;
  }
  long long v38 = (std::__shared_weak_count *)*((void *)&lpsrc + 1);
  if (*((void *)&lpsrc + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&lpsrc + 1) + 8), 1uLL, memory_order_relaxed);
  }
LABEL_69:
  if (*((void *)&lpsrc + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&lpsrc + 1));
  }
  if (SBYTE7(v156) < 0) {
    operator delete((void *)__p);
  }
  (*(void (**)(std::string *__return_ptr, void *))(*(void *)v37 + 472))(&v186, v37);
  uint64_t v39 = 0;
  int v134 = a4 - a5;
  uint64_t v40 = *(int *)(v186.__r_.__value_.__r.__words[0] + 8);
  do
  {
    v40 *= *(int *)(v186.__r_.__value_.__r.__words[0] + 12 + v39);
    v39 += 4;
  }
  while (v39 != 12);
  bzero(*(void **)(v186.__r_.__value_.__r.__words[0] + 24), 4 * v40);
  long long v168 = *(_OWORD *)&v186.__r_.__value_.__l.__data_;
  if (v186.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v186.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void *, long long *))(*(void *)v37 + 400))(v37, &v168);
  if (*((void *)&v168 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v168 + 1));
  }
  (*(void (**)(std::string *__return_ptr, void *))(*(void *)v37 + 488))(&v184, v37);
  std::string::size_type v41 = v184.__r_.__value_.__r.__words[0];
  **(_DWORD **)(v184.__r_.__value_.__r.__words[0] + 16) = -1082130432;
  unsigned long long v167 = __PAIR128__(v184.__r_.__value_.__l.__size_, v41);
  if (v184.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v184.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void *, unsigned long long *))(*(void *)v37 + 392))(v37, &v167);
  if (*((void *)&v167 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v167 + 1));
  }
  if (*((char *)a8 + 23) >= 0) {
    size_t v42 = *((unsigned __int8 *)a8 + 23);
  }
  else {
    size_t v42 = (size_t)a8[1];
  }
  p_long long lpsrc = &lpsrc;
  std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v42 + 32);
  if (SBYTE7(v150) < 0) {
    p_long long lpsrc = (long long *)lpsrc;
  }
  if (v42)
  {
    if (*((char *)a8 + 23) >= 0) {
      unint64_t v44 = a8;
    }
    else {
      unint64_t v44 = *a8;
    }
    memmove(p_lpsrc, v44, v42);
  }
  strcpy((char *)p_lpsrc + v42, "conv_to_minus_one_for_pad_index_");
  std::to_string(&v188, a5);
  if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v45 = &v188;
  }
  else {
    uint64_t v45 = (std::string *)v188.__r_.__value_.__r.__words[0];
  }
  if ((v188.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v46 = HIBYTE(v188.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v46 = v188.__r_.__value_.__l.__size_;
  }
  std::string::size_type v47 = std::string::append((std::string *)&lpsrc, (const std::string::value_type *)v45, v46);
  long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  *(void *)&long long v156 = *((void *)&v47->__r_.__value_.__l + 2);
  long long __p = v48;
  v47->__r_.__value_.__l.__size_ = 0;
  v47->__r_.__value_.__r.__words[2] = 0;
  v47->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v188.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v150) < 0) {
    operator delete((void *)lpsrc);
  }
  v166[0] = v37;
  v166[1] = v38;
  if (v38) {
    atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&lpsrc, "convolution");
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__str, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string __str = __s;
  }
  memset(&v188, 0, sizeof(v188));
  v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v188;
  v209.__r_.__value_.__s.__data_[8] = 0;
  v188.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v188.__r_.__value_.__l.__size_ = v188.__r_.__value_.__r.__words[0];
  v188.__r_.__value_.__r.__words[2] = v188.__r_.__value_.__r.__words[0] + 24;
  v188.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v188.__r_.__value_.__r.__words[2], (long long *)&__str, &v212, (std::string *)v188.__r_.__value_.__l.__data_);
  if (v135 < 0)
  {
    std::string::__init_copy_ctor_external(&v190, v28, size);
  }
  else
  {
    v190.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
    v190.__r_.__value_.__l.__size_ = size;
    LODWORD(v190.__r_.__value_.__r.__words[2]) = v169[0];
    *(_DWORD *)((char *)&v190.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v169 + 3);
    *((unsigned char *)&v190.__r_.__value_.__s + 23) = v135;
  }
  memset(&v209, 0, sizeof(v209));
  v148.__r_.__value_.__s.__data_[8] = 0;
  v209.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v209.__r_.__value_.__l.__size_ = v209.__r_.__value_.__r.__words[0];
  v209.__r_.__value_.__r.__words[2] = v209.__r_.__value_.__r.__words[0] + 24;
  v209.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v209.__r_.__value_.__r.__words[2], (long long *)&v190, (long long *)&v191, (std::string *)v209.__r_.__value_.__l.__data_);
  Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::add_kernel(v136, v166, (const std::string *)&lpsrc, (const std::string *)&__p, (std::string **)&v188, (std::string **)&v209);
  v148.__r_.__value_.__r.__words[0] = (std::string::size_type)&v209;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v148);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v190.__r_.__value_.__l.__data_);
  }
  v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v188;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v209);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v150) < 0) {
    operator delete((void *)lpsrc);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (SBYTE7(v156) < 0) {
    operator delete((void *)__p);
  }
  if (v184.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v184.__r_.__value_.__l.__size_);
  }
  if (v186.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v186.__r_.__value_.__l.__size_);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (*((char *)a8 + 23) >= 0) {
    size_t v49 = *((unsigned __int8 *)a8 + 23);
  }
  else {
    size_t v49 = (size_t)a8[1];
  }
  int v50 = &v192;
  std::string::basic_string[abi:ne180100]((uint64_t)&v192, v49 + 42);
  if (SBYTE7(v193) < 0) {
    int v50 = (long long *)v192;
  }
  if (v49)
  {
    if (*((char *)a8 + 23) >= 0) {
      uint64_t v51 = a8;
    }
    else {
      uint64_t v51 = *a8;
    }
    memmove(v50, v51, v49);
  }
  strcpy((char *)v50 + v49, "const_zeros_bordered_by_one_for_pad_index_");
  std::to_string((std::string *)&__p, a5);
  if ((SBYTE7(v156) & 0x80u) == 0) {
    long long v52 = (const std::string::value_type *)&__p;
  }
  else {
    long long v52 = (const std::string::value_type *)__p;
  }
  if ((SBYTE7(v156) & 0x80u) == 0) {
    std::string::size_type v53 = BYTE7(v156);
  }
  else {
    std::string::size_type v53 = *((void *)&__p + 1);
  }
  uint64_t v54 = std::string::append((std::string *)&v192, v52, v53);
  long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  if (SBYTE7(v156) < 0) {
    operator delete((void *)__p);
  }
  if (SBYTE7(v193) < 0) {
    operator delete((void *)v192);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "convolution");
  uint64_t v197 = 0x1000100010001;
  int v207 = 0;
  char v208 = 0;
  uint64_t v204 = 0;
  uint64_t v203 = 0;
  long long v192 = 0uLL;
  uint64_t v201 = 0;
  *(void *)&v194[32] = _D8;
  *(void *)&v194[24] = 0xFFFFFFFF00000000;
  int v200 = 1;
  int v202 = 0x10000;
  long long v193 = 0uLL;
  int v205 = 0;
  __int16 v206 = 1;
  long long v126 = xmmword_192DCA690;
  *(_OWORD *)&v194[8] = xmmword_192DCA690;
  long long v199 = v130;
  *(void *)uint64_t v194 = 1;
  *(void *)&v194[40] = 0;
  int v198 = 0;
  int v195 = 131074;
  uint64_t v196 = 0;
  Espresso::abstract_engine_factory::make_kernel_priv(v36, (uint64_t)&v174, (uint64_t)&__p, (uint64_t)&v192, &v173);
  if (!(void)lpsrc)
  {
    unint64_t v56 = 0;
    goto LABEL_152;
  }
  if (!v56)
  {
LABEL_152:
    uint64_t v57 = 0;
    goto LABEL_153;
  }
  uint64_t v57 = (std::__shared_weak_count *)*((void *)&lpsrc + 1);
  if (*((void *)&lpsrc + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&lpsrc + 1) + 8), 1uLL, memory_order_relaxed);
  }
LABEL_153:
  if (*((void *)&lpsrc + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&lpsrc + 1));
  }
  if (SBYTE7(v156) < 0) {
    operator delete((void *)__p);
  }
  (*(void (**)(std::string *__return_ptr, void *))(*(void *)v56 + 472))(&v186, v56);
  std::string::size_type v58 = v186.__r_.__value_.__r.__words[0];
  uint64_t v59 = *(void *)(v186.__r_.__value_.__r.__words[0] + 24);
  *(void *)uint64_t v59 = 0x3F80000000000000;
  *(_DWORD *)(v59 + 8) = 0;
  unsigned long long v165 = __PAIR128__(v186.__r_.__value_.__l.__size_, v58);
  if (v186.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v186.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void *, unsigned long long *))(*(void *)v56 + 400))(v56, &v165);
  if (*((void *)&v165 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v165 + 1));
  }
  (*(void (**)(std::string *__return_ptr, void *))(*(void *)v56 + 488))(&v184, v56);
  std::string::size_type v60 = v184.__r_.__value_.__r.__words[0];
  **(_DWORD **)(v184.__r_.__value_.__r.__words[0] + 16) = 1065353216;
  unsigned long long v164 = __PAIR128__(v184.__r_.__value_.__l.__size_, v60);
  if (v184.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v184.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void *, unsigned long long *))(*(void *)v56 + 392))(v56, &v164);
  if (*((void *)&v164 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v164 + 1));
  }
  if (*((char *)a8 + 23) >= 0) {
    size_t v61 = *((unsigned __int8 *)a8 + 23);
  }
  else {
    size_t v61 = (size_t)a8[1];
  }
  size_t v62 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v61 + 44);
  if (SBYTE7(v156) < 0) {
    size_t v62 = (long long *)__p;
  }
  if (v61)
  {
    if (*((char *)a8 + 23) >= 0) {
      std::string v63 = a8;
    }
    else {
      std::string v63 = *a8;
    }
    memmove(v62, v63, v61);
  }
  strcpy((char *)v62 + v61, "conv_to_zeros_bordered_by_one_for_pad_index_");
  qmemcpy(v125, "e_for_pad_index_rdered_by_one_foconv_to_zeros_bo", sizeof(v125));
  std::to_string((std::string *)&lpsrc, a5);
  if ((SBYTE7(v150) & 0x80u) == 0) {
    long long v64 = (const std::string::value_type *)&lpsrc;
  }
  else {
    long long v64 = (const std::string::value_type *)lpsrc;
  }
  if ((SBYTE7(v150) & 0x80u) == 0) {
    std::string::size_type v65 = BYTE7(v150);
  }
  else {
    std::string::size_type v65 = *((void *)&lpsrc + 1);
  }
  int v66 = v135;
  int v67 = std::string::append((std::string *)&__p, v64, v65);
  long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
  *(void *)&long long v193 = *((void *)&v67->__r_.__value_.__l + 2);
  long long v192 = v68;
  v67->__r_.__value_.__l.__size_ = 0;
  v67->__r_.__value_.__r.__words[2] = 0;
  v67->__r_.__value_.__r.__words[0] = 0;
  if (SBYTE7(v150) < 0) {
    operator delete((void *)lpsrc);
  }
  if (SBYTE7(v156) < 0) {
    operator delete((void *)__p);
  }
  v163[0] = v56;
  v163[1] = v57;
  if (v57) {
    atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "convolution");
  if (v66 < 0)
  {
    std::string::__init_copy_ctor_external(&v188, v28, size);
  }
  else
  {
    v188.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
    v188.__r_.__value_.__l.__size_ = size;
    LODWORD(v188.__r_.__value_.__r.__words[2]) = v169[0];
    *(_DWORD *)((char *)&v188.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v169 + 3);
    *((unsigned char *)&v188.__r_.__value_.__s + 23) = v66;
  }
  long long lpsrc = 0uLL;
  *(void *)&long long v150 = 0;
  v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&lpsrc;
  v209.__r_.__value_.__s.__data_[8] = 0;
  *(void *)&long long lpsrc = operator new(0x18uLL);
  *((void *)&lpsrc + 1) = lpsrc;
  *(void *)&long long v150 = lpsrc + 24;
  *((void *)&lpsrc + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v150, (long long *)&v188, &v189, (std::string *)lpsrc);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v190, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  }
  else {
    std::string v190 = __str;
  }
  memset(&v209, 0, sizeof(v209));
  v148.__r_.__value_.__r.__words[0] = (std::string::size_type)&v209;
  v148.__r_.__value_.__s.__data_[8] = 0;
  v209.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v209.__r_.__value_.__l.__size_ = v209.__r_.__value_.__r.__words[0];
  v209.__r_.__value_.__r.__words[2] = v209.__r_.__value_.__r.__words[0] + 24;
  v209.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v209.__r_.__value_.__r.__words[2], (long long *)&v190, (long long *)&v191, (std::string *)v209.__r_.__value_.__l.__data_);
  Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::add_kernel(v136, v163, (const std::string *)&__p, (const std::string *)&v192, (std::string **)&lpsrc, (std::string **)&v209);
  v148.__r_.__value_.__r.__words[0] = (std::string::size_type)&v209;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v148);
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v190.__r_.__value_.__l.__data_);
  }
  v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&lpsrc;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v209);
  if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v188.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v156) < 0) {
    operator delete((void *)__p);
  }
  if (v57) {
    nitro::nitro_function::nitro_function(v57);
  }
  if (SBYTE7(v193) < 0) {
    operator delete((void *)v192);
  }
  if (v184.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v184.__r_.__value_.__l.__size_);
  }
  if (v186.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v186.__r_.__value_.__l.__size_);
  }
  if (v57) {
    nitro::nitro_function::nitro_function(v57);
  }
  if (*((char *)a8 + 23) >= 0) {
    size_t v69 = *((unsigned __int8 *)a8 + 23);
  }
  else {
    size_t v69 = (size_t)a8[1];
  }
  long long v70 = &v192;
  std::string::basic_string[abi:ne180100]((uint64_t)&v192, v69 + 25);
  if (SBYTE7(v193) < 0) {
    long long v70 = (long long *)v192;
  }
  if (v69)
  {
    if (*((char *)a8 + 23) >= 0) {
      size_t v71 = a8;
    }
    else {
      size_t v71 = *a8;
    }
    memmove(v70, v71, v69);
  }
  strcpy((char *)v70 + v69, "final_mask_for_pad_index_");
  std::to_string((std::string *)&__p, a5);
  if ((SBYTE7(v156) & 0x80u) == 0) {
    unint64_t v72 = (const std::string::value_type *)&__p;
  }
  else {
    unint64_t v72 = (const std::string::value_type *)__p;
  }
  if ((SBYTE7(v156) & 0x80u) == 0) {
    std::string::size_type v73 = BYTE7(v156);
  }
  else {
    std::string::size_type v73 = *((void *)&__p + 1);
  }
  int v74 = std::string::append((std::string *)&v192, v72, v73);
  std::string::size_type v75 = v74->__r_.__value_.__l.__size_;
  int v131 = (std::string::value_type *)v74->__r_.__value_.__r.__words[0];
  v162[0] = v74->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v162 + 3) = *(_DWORD *)((char *)&v74->__r_.__value_.__r.__words[2] + 3);
  int v76 = SHIBYTE(v74->__r_.__value_.__r.__words[2]);
  v74->__r_.__value_.__l.__size_ = 0;
  v74->__r_.__value_.__r.__words[2] = 0;
  v74->__r_.__value_.__r.__words[0] = 0;
  if (SBYTE7(v156) < 0) {
    operator delete((void *)__p);
  }
  if (SBYTE7(v193) < 0) {
    operator delete((void *)v192);
  }
  int v133 = v76;
  if (v134 >= 1)
  {
    std::string v127 = v28;
    std::string::basic_string[abi:ne180100]<0>(&__p, "general_padding");
    memset(v194, 0, 44);
    long long v192 = 0u;
    long long v193 = 0u;
    WORD4(v192) = v134;
    WORD5(v192) = v134;
    Espresso::abstract_engine_factory::make_kernel_priv(v36, (uint64_t)&v174, (uint64_t)&__p, (uint64_t)&v192, &v173);
    if ((void)lpsrc)
    {
      if (v77)
      {
        uint64_t v78 = (std::__shared_weak_count *)*((void *)&lpsrc + 1);
        if (*((void *)&lpsrc + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&lpsrc + 1) + 8), 1uLL, memory_order_relaxed);
        }
        goto LABEL_236;
      }
    }
    else
    {
      long long v77 = 0;
    }
    uint64_t v78 = 0;
LABEL_236:
    if (*((void *)&lpsrc + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&lpsrc + 1));
    }
    if (SBYTE7(v156) < 0) {
      operator delete((void *)__p);
    }
    if (*((char *)a8 + 23) >= 0) {
      size_t v79 = *((unsigned __int8 *)a8 + 23);
    }
    else {
      size_t v79 = (size_t)a8[1];
    }
    int v80 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v79 + 33);
    if (SBYTE7(v156) < 0) {
      int v80 = (long long *)__p;
    }
    if (v79)
    {
      if (*((char *)a8 + 23) >= 0) {
        char v81 = a8;
      }
      else {
        char v81 = *a8;
      }
      memmove(v80, v81, v79);
    }
    strcpy((char *)v80 + v79, "final_zero_padding_for_pad_index_");
    std::to_string((std::string *)&lpsrc, a5);
    if ((SBYTE7(v150) & 0x80u) == 0) {
      std::string v82 = (const std::string::value_type *)&lpsrc;
    }
    else {
      std::string v82 = (const std::string::value_type *)lpsrc;
    }
    if ((SBYTE7(v150) & 0x80u) == 0) {
      std::string::size_type v83 = BYTE7(v150);
    }
    else {
      std::string::size_type v83 = *((void *)&lpsrc + 1);
    }
    std::vector<std::string>::const_iterator v28 = v127;
    std::string v84 = std::string::append((std::string *)&__p, v82, v83);
    long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
    *(void *)&long long v193 = *((void *)&v84->__r_.__value_.__l + 2);
    long long v192 = v85;
    v84->__r_.__value_.__l.__size_ = 0;
    v84->__r_.__value_.__r.__words[2] = 0;
    v84->__r_.__value_.__r.__words[0] = 0;
    if (SBYTE7(v150) < 0) {
      operator delete((void *)lpsrc);
    }
    if (SBYTE7(v156) < 0) {
      operator delete((void *)__p);
    }
    v161[0] = v77;
    v161[1] = v78;
    if (v78) {
      atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "general_padding");
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v188, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    }
    else {
      std::string v188 = __str;
    }
    long long lpsrc = 0uLL;
    *(void *)&long long v150 = 0;
    v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&lpsrc;
    v209.__r_.__value_.__s.__data_[8] = 0;
    *(void *)&long long lpsrc = operator new(0x18uLL);
    *((void *)&lpsrc + 1) = lpsrc;
    *(void *)&long long v150 = lpsrc + 24;
    *((void *)&lpsrc + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v150, (long long *)&v188, &v189, (std::string *)lpsrc);
    if (v133 < 0)
    {
      std::string::__init_copy_ctor_external(&v190, v131, v75);
    }
    else
    {
      v190.__r_.__value_.__r.__words[0] = (std::string::size_type)v131;
      v190.__r_.__value_.__l.__size_ = v75;
      LODWORD(v190.__r_.__value_.__r.__words[2]) = v162[0];
      *(_DWORD *)((char *)&v190.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v162 + 3);
      *((unsigned char *)&v190.__r_.__value_.__s + 23) = v133;
    }
    memset(&v209, 0, sizeof(v209));
    v148.__r_.__value_.__r.__words[0] = (std::string::size_type)&v209;
    v148.__r_.__value_.__s.__data_[8] = 0;
    v209.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v209.__r_.__value_.__l.__size_ = v209.__r_.__value_.__r.__words[0];
    v209.__r_.__value_.__r.__words[2] = v209.__r_.__value_.__r.__words[0] + 24;
    v209.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v209.__r_.__value_.__r.__words[2], (long long *)&v190, (long long *)&v191, (std::string *)v209.__r_.__value_.__l.__data_);
    int v76 = v133;
    Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::add_kernel(v136, v161, (const std::string *)&__p, (const std::string *)&v192, (std::string **)&lpsrc, (std::string **)&v209);
    v148.__r_.__value_.__r.__words[0] = (std::string::size_type)&v209;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v148);
    if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v190.__r_.__value_.__l.__data_);
    }
    v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&lpsrc;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v209);
    if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v188.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v156) < 0) {
      operator delete((void *)__p);
    }
    if (v78) {
      nitro::nitro_function::nitro_function(v78);
    }
    if (SBYTE7(v193) < 0) {
      operator delete((void *)v192);
    }
    if (v78) {
      nitro::nitro_function::nitro_function(v78);
    }
  }
  if (v76 < 0)
  {
    std::string::__init_copy_ctor_external(&v209, v131, v75);
  }
  else
  {
    v209.__r_.__value_.__r.__words[0] = (std::string::size_type)v131;
    v209.__r_.__value_.__l.__size_ = v75;
    LODWORD(v209.__r_.__value_.__r.__words[2]) = v162[0];
    *(_DWORD *)((char *)&v209.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v162 + 3);
    *((unsigned char *)&v209.__r_.__value_.__s + 23) = v76;
  }
  if (v134 <= 0) {
    std::string::operator=(&v209, &__str);
  }
  LOBYTE(v189) = 0;
  DWORD1(v189) = 0;
  BYTE8(v189) = 0;
  *(std::string::size_type *)((char *)&v188.__r_.__value_.__r.__words[1] + 4) = -1;
  HIDWORD(v188.__r_.__value_.__r.__words[2]) = -1;
  LODWORD(v188.__r_.__value_.__r.__words[1]) = v129;
  v188.__r_.__value_.__r.__words[0] = -1;
  std::string::basic_string[abi:ne180100]<0>(&v192, "broadcast");
  Espresso::abstract_engine_factory::make_kernel_priv(v36, (uint64_t)&v174, (uint64_t)&v192, (uint64_t)&v188, &v173);
  if ((void)__p)
  {
    if (v86)
    {
      long long v87 = (std::__shared_weak_count *)*((void *)&__p + 1);
      if (*((void *)&__p + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&__p + 1) + 8), 1uLL, memory_order_relaxed);
      }
      goto LABEL_291;
    }
  }
  else
  {
    std::string v86 = 0;
  }
  long long v87 = 0;
LABEL_291:
  if (*((void *)&__p + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&__p + 1));
  }
  if (SBYTE7(v193) < 0) {
    operator delete((void *)v192);
  }
  if (*((char *)a8 + 23) >= 0) {
    size_t v88 = *((unsigned __int8 *)a8 + 23);
  }
  else {
    size_t v88 = (size_t)a8[1];
  }
  uint64_t v89 = &v192;
  std::string::basic_string[abi:ne180100]((uint64_t)&v192, v88 + 35);
  if (SBYTE7(v193) < 0) {
    uint64_t v89 = (long long *)v192;
  }
  if (v88)
  {
    if (*((char *)a8 + 23) >= 0) {
      long long v90 = a8;
    }
    else {
      long long v90 = *a8;
    }
    memmove(v89, v90, v88);
  }
  strcpy((char *)v89 + v88, "final_mask_broadcast_for_pad_index_");
  std::to_string((std::string *)&__p, a5);
  if ((SBYTE7(v156) & 0x80u) == 0) {
    std::string v91 = (const std::string::value_type *)&__p;
  }
  else {
    std::string v91 = (const std::string::value_type *)__p;
  }
  if ((SBYTE7(v156) & 0x80u) == 0) {
    std::string::size_type v92 = BYTE7(v156);
  }
  else {
    std::string::size_type v92 = *((void *)&__p + 1);
  }
  size_t v93 = std::string::append((std::string *)&v192, v91, v92);
  long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
  v190.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v190.__r_.__value_.__l.__data_ = v94;
  v93->__r_.__value_.__l.__size_ = 0;
  v93->__r_.__value_.__r.__words[2] = 0;
  v93->__r_.__value_.__r.__words[0] = 0;
  if (SBYTE7(v156) < 0) {
    operator delete((void *)__p);
  }
  if (SBYTE7(v193) < 0) {
    operator delete((void *)v192);
  }
  unint64_t v95 = v136[3].i32[2];
  *(void *)&long long lpsrc = v95;
  *(void *)&long long v192 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(a2 + 56, v95, &lpsrc)[3];
  std::string::size_type v96 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 184), (void *)v192, (long long **)&v192);
  long long v97 = *(_OWORD *)(v96 + 72);
  long long __p = *(_OWORD *)(v96 + 56);
  long long v156 = v97;
  std::string v98 = (const void *)*((void *)v96 + 12);
  uint64_t v157 = *((void *)v96 + 11);
  int v158 = 0;
  int v159 = 0;
  uint64_t v160 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v158, v98, *((void *)v96 + 13), (uint64_t)(*((void *)v96 + 13) - (void)v98) >> 2);
  long long v192 = __p;
  long long v193 = v156;
  *(void *)uint64_t v194 = v157;
  memset(&v194[8], 0, 24);
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v194[8], v158, (uint64_t)v159, (v159 - (unsigned char *)v158) >> 2);
  memset(&v186, 0, sizeof(v186));
  v184.__r_.__value_.__r.__words[0] = (std::string::size_type)&v186;
  v184.__r_.__value_.__s.__data_[8] = 0;
  v186.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
  v186.__r_.__value_.__l.__size_ = v186.__r_.__value_.__r.__words[0];
  v186.__r_.__value_.__r.__words[2] = v186.__r_.__value_.__r.__words[0] + 64;
  v186.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v186.__r_.__value_.__r.__words[2], &v192, (long long *)&v194[32], (uint64_t)v186.__r_.__value_.__l.__data_);
  int v99 = v133;
  (*(void (**)(std::string *__return_ptr, void *, std::string *))(*(void *)v86 + 64))(&v148, v86, &v186);
  uint64_t v100 = *(void *)(v148.__r_.__value_.__r.__words[0] + 32);
  long long v101 = *(_OWORD *)(v148.__r_.__value_.__r.__words[0] + 16);
  long long lpsrc = *(_OWORD *)v148.__r_.__value_.__l.__data_;
  long long v150 = v101;
  uint64_t v151 = v100;
  __int16 v152 = 0;
  __int16 v153 = 0;
  uint64_t v154 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v152, *(const void **)(v148.__r_.__value_.__r.__words[0] + 40), *(void *)(v148.__r_.__value_.__r.__words[0] + 48), (uint64_t)(*(void *)(v148.__r_.__value_.__r.__words[0] + 48) - *(void *)(v148.__r_.__value_.__r.__words[0] + 40)) >> 2);
  v184.__r_.__value_.__r.__words[0] = (std::string::size_type)&v148;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v184);
  v184.__r_.__value_.__r.__words[0] = (std::string::size_type)&v186;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v184);
  if (*(void *)&v194[8])
  {
    *(void *)&v194[16] = *(void *)&v194[8];
    operator delete(*(void **)&v194[8]);
  }
  if (__p == lpsrc
    && *(void *)((char *)&__p + 4) == *(void *)((char *)&lpsrc + 4)
    && HIDWORD(__p) == HIDWORD(lpsrc))
  {
    if (v134 <= 0 && v156 == v150)
    {
      Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::remove_layer(v136);
      uint64_t v102 = v176;
      std::string::basic_string[abi:ne180100]<0>(&v148, "convolution");
      uint64_t v197 = 0x1000100010001;
      int v207 = 0;
      char v208 = 0;
      uint64_t v204 = 0;
      uint64_t v203 = 0;
      long long v192 = 0uLL;
      uint64_t v201 = 0;
      *(void *)&v194[32] = _D8;
      *(void *)&v194[24] = 0xFFFFFFFF00000000;
      int v200 = 1;
      int v202 = 0x10000;
      long long v193 = 0uLL;
      int v205 = 0;
      __int16 v206 = 1;
      *(_OWORD *)&v194[8] = v126;
      long long v199 = v130;
      *(void *)uint64_t v194 = 1;
      *(void *)&v194[40] = 0;
      int v198 = 0;
      int v195 = 131074;
      uint64_t v196 = 0;
      Espresso::abstract_engine_factory::make_kernel_priv(v102, (uint64_t)&v174, (uint64_t)&v148, (uint64_t)&v192, &v173);
      if (v186.__r_.__value_.__r.__words[0])
      {
        if (v103)
        {
          long long v104 = (std::__shared_weak_count *)v186.__r_.__value_.__l.__size_;
          if (v186.__r_.__value_.__l.__size_) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v186.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
          }
          goto LABEL_373;
        }
      }
      else
      {
        long long v103 = 0;
      }
      long long v104 = 0;
LABEL_373:
      if (v186.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v186.__r_.__value_.__l.__size_);
      }
      if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v148.__r_.__value_.__l.__data_);
      }
      (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v103 + 472))(&v146, v103);
      uint64_t v107 = v146;
      uint64_t v108 = *(void *)(v146 + 24);
      *(void *)uint64_t v108 = 0x3F80000000000000;
      *(_DWORD *)(v108 + 8) = 0;
      uint64_t v144 = v107;
      int v145 = v147;
      if (v147) {
        atomic_fetch_add_explicit(&v147->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void *, uint64_t *))(*(void *)v103 + 400))(v103, &v144);
      if (v145) {
        nitro::nitro_function::nitro_function(v145);
      }
      (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v103 + 488))(&v142, v103);
      uint64_t v109 = v142;
      **(_DWORD **)(v142 + 16) = 1065353216;
      uint64_t v140 = v109;
      long long v141 = v143;
      if (v143) {
        atomic_fetch_add_explicit(&v143->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void *, uint64_t *))(*(void *)v103 + 392))(v103, &v140);
      if (v141) {
        nitro::nitro_function::nitro_function(v141);
      }
      if (*((char *)a8 + 23) >= 0) {
        size_t v110 = *((unsigned __int8 *)a8 + 23);
      }
      else {
        size_t v110 = (size_t)a8[1];
      }
      int v111 = &v148;
      std::string::basic_string[abi:ne180100]((uint64_t)&v148, v110 + 44);
      if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v111 = (std::string *)v148.__r_.__value_.__r.__words[0];
      }
      if (v110)
      {
        if (*((char *)a8 + 23) >= 0) {
          uint64_t v112 = a8;
        }
        else {
          uint64_t v112 = *a8;
        }
        memmove(v111, v112, v110);
      }
      uint64_t v113 = (char *)v111 + v110;
      *(_OWORD *)uint64_t v113 = v125[2];
      *((_OWORD *)v113 + 1) = v125[1];
      *(_OWORD *)(v113 + 28) = v125[0];
      v113[44] = 0;
      std::to_string(&v186, a5);
      if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v114 = &v186;
      }
      else {
        int v114 = (std::string *)v186.__r_.__value_.__r.__words[0];
      }
      if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v115 = HIBYTE(v186.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v115 = v186.__r_.__value_.__l.__size_;
      }
      int v99 = v133;
      std::string v116 = std::string::append(&v148, (const std::string::value_type *)v114, v115);
      long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
      *(void *)&long long v193 = *((void *)&v116->__r_.__value_.__l + 2);
      long long v192 = v117;
      v116->__r_.__value_.__l.__size_ = 0;
      v116->__r_.__value_.__r.__words[2] = 0;
      v116->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v186.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v148.__r_.__value_.__l.__data_);
      }
      v139[0] = v103;
      v139[1] = v104;
      if (v104) {
        atomic_fetch_add_explicit(&v104->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v148, "convolution");
      if (v135 < 0)
      {
        std::string::__init_copy_ctor_external(&v184, v28, size);
      }
      else
      {
        v184.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
        v184.__r_.__value_.__l.__size_ = size;
        LODWORD(v184.__r_.__value_.__r.__words[2]) = v169[0];
        *(_DWORD *)((char *)&v184.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v169 + 3);
        *((unsigned char *)&v184.__r_.__value_.__s + 23) = v135;
      }
      memset(&v186, 0, sizeof(v186));
      v182.__r_.__value_.__r.__words[0] = (std::string::size_type)&v186;
      v182.__r_.__value_.__s.__data_[8] = 0;
      v186.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v186.__r_.__value_.__l.__size_ = v186.__r_.__value_.__r.__words[0];
      v186.__r_.__value_.__r.__words[2] = v186.__r_.__value_.__r.__words[0] + 24;
      v186.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v186.__r_.__value_.__r.__words[2], (long long *)&v184, (long long *)&v185, (std::string *)v186.__r_.__value_.__l.__data_);
      if (*(char *)(v128 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v180, *(const std::string::value_type **)v128, *(void *)(v128 + 8));
      }
      else {
        std::string v180 = *(std::string *)v128;
      }
      memset(&v182, 0, sizeof(v182));
      long long v178 = &v182;
      char v179 = 0;
      v182.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v182.__r_.__value_.__l.__size_ = v182.__r_.__value_.__r.__words[0];
      v182.__r_.__value_.__r.__words[2] = v182.__r_.__value_.__r.__words[0] + 24;
      v182.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v182.__r_.__value_.__r.__words[2], (long long *)&v180, (long long *)&v181, (std::string *)v182.__r_.__value_.__l.__data_);
      Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::add_kernel(v136, v139, &v148, (const std::string *)&v192, (std::string **)&v186, (std::string **)&v182);
      long long v178 = &v182;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v178);
      if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v180.__r_.__value_.__l.__data_);
      }
      v182.__r_.__value_.__r.__words[0] = (std::string::size_type)&v186;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v182);
      if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v184.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v148.__r_.__value_.__l.__data_);
      }
      if (v104) {
        nitro::nitro_function::nitro_function(v104);
      }
      if (SBYTE7(v193) < 0) {
        operator delete((void *)v192);
      }
      if (v143) {
        nitro::nitro_function::nitro_function(v143);
      }
      if (v147) {
        nitro::nitro_function::nitro_function(v147);
      }
      goto LABEL_471;
    }
    if (v134 >= 1 && v156 == v150)
    {
      Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::remove_layer(v136);
      uint64_t v105 = v176;
      std::string::basic_string[abi:ne180100]<0>(&v148, "general_padding");
      memset(v194, 0, 44);
      long long v192 = 0u;
      long long v193 = 0u;
      WORD4(v192) = v134;
      WORD5(v192) = v134;
      Espresso::abstract_engine_factory::make_kernel_priv(v105, (uint64_t)&v174, (uint64_t)&v148, (uint64_t)&v192, &v173);
      if (v186.__r_.__value_.__r.__words[0])
      {
        if (v106)
        {
          long long v104 = (std::__shared_weak_count *)v186.__r_.__value_.__l.__size_;
          if (v186.__r_.__value_.__l.__size_) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v186.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
          }
          goto LABEL_429;
        }
      }
      else
      {
        uint64_t v106 = 0;
      }
      long long v104 = 0;
LABEL_429:
      if (v186.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v186.__r_.__value_.__l.__size_);
      }
      if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v148.__r_.__value_.__l.__data_);
      }
      if (*((char *)a8 + 23) >= 0) {
        size_t v118 = *((unsigned __int8 *)a8 + 23);
      }
      else {
        size_t v118 = (size_t)a8[1];
      }
      std::string v119 = &v148;
      std::string::basic_string[abi:ne180100]((uint64_t)&v148, v118 + 33);
      if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string v119 = (std::string *)v148.__r_.__value_.__r.__words[0];
      }
      if (v118)
      {
        if (*((char *)a8 + 23) >= 0) {
          std::string v120 = a8;
        }
        else {
          std::string v120 = *a8;
        }
        memmove(v119, v120, v118);
      }
      strcpy((char *)v119 + v118, "final_zero_padding_for_pad_index_");
      std::to_string(&v186, a5);
      if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v121 = &v186;
      }
      else {
        std::string v121 = (std::string *)v186.__r_.__value_.__r.__words[0];
      }
      if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v122 = HIBYTE(v186.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v122 = v186.__r_.__value_.__l.__size_;
      }
      int v99 = v133;
      std::string v123 = std::string::append(&v148, (const std::string::value_type *)v121, v122);
      long long v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
      *(void *)&long long v193 = *((void *)&v123->__r_.__value_.__l + 2);
      long long v192 = v124;
      v123->__r_.__value_.__l.__size_ = 0;
      v123->__r_.__value_.__r.__words[2] = 0;
      v123->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v186.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v148.__r_.__value_.__l.__data_);
      }
      v138[0] = v106;
      v138[1] = v104;
      if (v104) {
        atomic_fetch_add_explicit(&v104->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v148, "general_padding");
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v184, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else {
        std::string v184 = __str;
      }
      memset(&v186, 0, sizeof(v186));
      v182.__r_.__value_.__r.__words[0] = (std::string::size_type)&v186;
      v182.__r_.__value_.__s.__data_[8] = 0;
      v186.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v186.__r_.__value_.__l.__size_ = v186.__r_.__value_.__r.__words[0];
      v186.__r_.__value_.__r.__words[2] = v186.__r_.__value_.__r.__words[0] + 24;
      v186.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v186.__r_.__value_.__r.__words[2], (long long *)&v184, (long long *)&v185, (std::string *)v186.__r_.__value_.__l.__data_);
      if (*(char *)(v128 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v180, *(const std::string::value_type **)v128, *(void *)(v128 + 8));
      }
      else {
        std::string v180 = *(std::string *)v128;
      }
      memset(&v182, 0, sizeof(v182));
      long long v178 = &v182;
      char v179 = 0;
      v182.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v182.__r_.__value_.__l.__size_ = v182.__r_.__value_.__r.__words[0];
      v182.__r_.__value_.__r.__words[2] = v182.__r_.__value_.__r.__words[0] + 24;
      v182.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v182.__r_.__value_.__r.__words[2], (long long *)&v180, (long long *)&v181, (std::string *)v182.__r_.__value_.__l.__data_);
      Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::add_kernel(v136, v138, &v148, (const std::string *)&v192, (std::string **)&v186, (std::string **)&v182);
      long long v178 = &v182;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v178);
      if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v180.__r_.__value_.__l.__data_);
      }
      v182.__r_.__value_.__r.__words[0] = (std::string::size_type)&v186;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v182);
      if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v184.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v148.__r_.__value_.__l.__data_);
      }
      if (v104) {
        nitro::nitro_function::nitro_function(v104);
      }
      if (SBYTE7(v193) < 0) {
        operator delete((void *)v192);
      }
LABEL_471:
      if (!v104) {
        goto LABEL_348;
      }
LABEL_347:
      nitro::nitro_function::nitro_function(v104);
      goto LABEL_348;
    }
  }
  v137[0] = v86;
  v137[1] = v87;
  if (v87) {
    atomic_fetch_add_explicit(&v87->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v192, "broadcast");
  if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v186, v209.__r_.__value_.__l.__data_, v209.__r_.__value_.__l.__size_);
  }
  else {
    std::string v186 = v209;
  }
  memset(&v148, 0, sizeof(v148));
  v184.__r_.__value_.__r.__words[0] = (std::string::size_type)&v148;
  v184.__r_.__value_.__s.__data_[8] = 0;
  v148.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v148.__r_.__value_.__l.__size_ = v148.__r_.__value_.__r.__words[0];
  v148.__r_.__value_.__r.__words[2] = v148.__r_.__value_.__r.__words[0] + 24;
  v148.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v148.__r_.__value_.__r.__words[2], (long long *)&v186, (long long *)&v187, (std::string *)v148.__r_.__value_.__l.__data_);
  if (*(char *)(v128 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v182, *(const std::string::value_type **)v128, *(void *)(v128 + 8));
  }
  else {
    std::string v182 = *(std::string *)v128;
  }
  memset(&v184, 0, sizeof(v184));
  v180.__r_.__value_.__r.__words[0] = (std::string::size_type)&v184;
  v180.__r_.__value_.__s.__data_[8] = 0;
  v184.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v184.__r_.__value_.__l.__size_ = v184.__r_.__value_.__r.__words[0];
  v184.__r_.__value_.__r.__words[2] = v184.__r_.__value_.__r.__words[0] + 24;
  v184.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v184.__r_.__value_.__r.__words[2], (long long *)&v182, (long long *)&v183, (std::string *)v184.__r_.__value_.__l.__data_);
  Espresso::single_match_state<Espresso::ANECompilerEngine::general_padding_kernel>::add_kernel(v136, v137, (const std::string *)&v192, &v190, (std::string **)&v148, (std::string **)&v184);
  v180.__r_.__value_.__r.__words[0] = (std::string::size_type)&v184;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v180);
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v182.__r_.__value_.__l.__data_);
  }
  v184.__r_.__value_.__r.__words[0] = (std::string::size_type)&v148;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v184);
  if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v186.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v193) < 0) {
    operator delete((void *)v192);
  }
  long long v104 = v87;
  if (v87) {
    goto LABEL_347;
  }
LABEL_348:
  if (v152)
  {
    __int16 v153 = v152;
    operator delete(v152);
  }
  if (v158)
  {
    int v159 = v158;
    operator delete(v158);
  }
  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v190.__r_.__value_.__l.__data_);
  }
  if (v87) {
    nitro::nitro_function::nitro_function(v87);
  }
  if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v209.__r_.__value_.__l.__data_);
  }
  if (v99 < 0) {
    operator delete(v131);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((v135 & 0x80000000) == 0) {
      goto LABEL_362;
    }
  }
  else if ((v135 & 0x80000000) == 0)
  {
    goto LABEL_362;
  }
  operator delete(v28);
LABEL_362:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  if (v175) {
    nitro::nitro_function::nitro_function(v175);
  }
  if (v177) {
    nitro::nitro_function::nitro_function(v177);
  }
}

void sub_192954F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,int a26,int a27,int a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  STACK[0x2A0] = (unint64_t)&STACK[0x2E0];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A0]);
  if (SLOBYTE(STACK[0x2D7]) < 0) {
    operator delete((void *)STACK[0x2C0]);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  if (v64) {
    nitro::nitro_function::nitro_function(v64);
  }
  if (SLOBYTE(STACK[0x367]) < 0)
  {
    operator delete((void *)STACK[0x350]);
    if (!v64)
    {
LABEL_12:
      if (a55) {
        operator delete(a55);
      }
      if (a63) {
        operator delete(a63);
      }
      if (SLOBYTE(STACK[0x347]) < 0) {
        operator delete((void *)STACK[0x330]);
      }
      if (v65) {
        nitro::nitro_function::nitro_function(v65);
      }
      if (*(char *)(v66 - 153) < 0) {
        operator delete(*(void **)(v66 - 176));
      }
      if (a26 < 0) {
        operator delete(a23);
      }
      if (*(char *)(v66 - 121) < 0) {
        operator delete(*(void **)(v66 - 144));
      }
      if (a28 < 0) {
        operator delete(v63);
      }
      if (SLOBYTE(STACK[0x247]) < 0) {
        operator delete((void *)STACK[0x230]);
      }
      if (STACK[0x258]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x258]);
      }
      if (STACK[0x268]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x268]);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v64)
  {
    goto LABEL_12;
  }
  nitro::nitro_function::nitro_function(v64);
  goto LABEL_12;
}

void Espresso::single_match_state<Espresso::ANECompilerEngine::elementwise_kernel>::remove_layer(int64x2_t *a1)
{
  memset(v7, 0, sizeof(v7));
  __int32 v4 = a1[3].i32[2];
  uint64_t v5 = 0;
  long long v6 = 0;
  unint64_t v2 = a1[2].u64[1];
  if (v2 >= a1[3].i64[0])
  {
    uint64_t v3 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v4);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v4);
    uint64_t v3 = v2 + 72;
    a1[2].i64[1] = v2 + 72;
  }
  a1[2].i64[1] = v3;
  int v8 = (void **)&v7[1] + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  int v8 = (void **)v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
}

void sub_192955B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void Espresso::single_match_state<Espresso::ANECompilerEngine::elementwise_kernel>::add_kernel(int64x2_t *a1, void *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6, int a7)
{
  int v25 = 0;
  memset(v28, 0, sizeof(v28));
  uint64_t v14 = (char *)operator new(0xF8uLL);
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 2) = 0;
  *(void *)uint64_t v14 = &unk_1EE389DF0;
  *((void *)v14 + 3) = &unk_1EE36C758;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 136) = 0u;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 161) = 0u;
  *((_OWORD *)v14 + 13) = 0u;
  *((_OWORD *)v14 + 14) = 0u;
  *((void *)v14 + 30) = 0;
  std::string::size_type v26 = v14 + 24;
  long long v27 = (std::__shared_weak_count *)v14;
  uint64_t v15 = *a2;
  uint64_t v16 = a2[1];
  if (v16)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    uint64_t v17 = (std::__shared_weak_count *)*((void *)v14 + 12);
    *((void *)v14 + 11) = v15;
    *((void *)v14 + 12) = v16;
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
  }
  else
  {
    *((void *)v14 + 11) = v15;
    *((void *)v14 + 12) = 0;
  }
  std::string::operator=((std::string *)(v26 + 16), a4);
  std::string::operator=((std::string *)(v26 + 40), a3);
  uint64_t v18 = *(uint64_t (****)(void))(*(void *)(*a2 + 8) + 8);
  uint64_t v19 = v26;
  *((_DWORD *)v26 + 2) = (**v18)(v18);
  uint64_t v20 = a1[1].i64[0];
  if (v20)
  {
    *((_DWORD *)v19 + 3) = *(_DWORD *)(v20 + 12);
    if (*(char *)(v20 + 223) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v20 + 200), *(void *)(v20 + 208));
    }
    else {
      std::string __p = *(std::string *)(v20 + 200);
    }
    std::string::operator=((std::string *)(v19 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v21 = *(void *)(a1[4].i64[0] + 32);
    if (*(void *)(a1[4].i64[0] + 40) != v21) {
      *((_DWORD *)v19 + 3) = *(_DWORD *)(*(void *)v21 + 12);
    }
  }
  if (v28 != (_OWORD *)a5) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v28, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  }
  if ((std::string **)((char *)&v28[1] + 8) != a6) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v28[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  }
  int v25 = a1[3].i32[2] - a7;
  unint64_t v22 = a1[2].u64[1];
  if (v22 >= a1[3].i64[0])
  {
    uint64_t v23 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v25);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v25);
    uint64_t v23 = v22 + 72;
    a1[2].i64[1] = v22 + 72;
  }
  a1[2].i64[1] = v23;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
}

void sub_192955DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void ___ZN8Espresso17ANECompilerEngine7context17transform_softmaxEPNS_3netEPS1__block_invoke_2(uint64_t a1, int64x2_t *a2)
{
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(void *)(a2->i64[0] + 8) == v3 || v3 == 0)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2->i64[0] + 320))(a2->i64[0]);
    if (!*(_DWORD *)(v6 + 20) && ((*(unsigned char *)(v6 + 26) | *(unsigned char *)(v6 + 24)) & 1) == 0)
    {
      uint64_t v7 = *(void *)(a1 + 40) + 96;
      unint64_t v8 = a2[3].i32[2];
      *(void *)&v117[0] = v8;
      uint64_t v9 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v7, v8, v117);
      uint64_t v10 = *(void *)(a1 + 40) + 56;
      unint64_t v11 = a2[3].i32[2];
      *(void *)&v117[0] = v11;
      int v12 = (void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v10, v11, v117);
      if (v9[4] - v9[3] == 24)
      {
        uint64_t v13 = v12;
        uint64_t v14 = v12[3];
        if ((unsigned char *)v12[4] - (unsigned char *)v14 == 24)
        {
          uint64_t v15 = (uint64_t **)(*(void *)(a1 + 40) + 184);
          __p[0] = v14;
          uint64_t v16 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v15, v14, (long long **)__p);
          long long v17 = *(_OWORD *)(v16 + 72);
          v117[0] = *(_OWORD *)(v16 + 56);
          v117[1] = v17;
          uint64_t v18 = (const void *)*((void *)v16 + 12);
          uint64_t v118 = *((void *)v16 + 11);
          std::string v119 = 0;
          std::string v120 = 0;
          uint64_t v121 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v119, v18, *((void *)v16 + 13), (uint64_t)(*((void *)v16 + 13) - (void)v18) >> 2);
          if (SDWORD2(v117[0]) <= 4096)
          {
            uint64_t v19 = *(void *)(a1 + 40);
            uint64_t v20 = *(std::__shared_weak_count **)(v19 + 24);
            uint64_t v115 = *(void *)(v19 + 16);
            std::string v116 = v20;
            if (v20)
            {
              atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v19 = *(void *)(a1 + 40);
            }
            __p[0] = v13[3];
            int v21 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v19 + 184), (void *)__p[0], (long long **)__p)+ 16);
            v113[3] = 0;
            v113[2] = 0;
            v113[4] = 0xFFFFFFFF00000000;
            char v114 = 0;
            v113[0] = 0x358637BD00000009;
            v113[1] = 0x100000004;
            Espresso::abstract_engine_factory::shared(&v72);
            unint64_t v22 = v72;
            std::string::basic_string[abi:ne180100]<0>(__p, "reduce");
            LODWORD(v60) = (***(uint64_t (****)(void))(v115 + 8))(*(void *)(v115 + 8));
            Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v22, (uint64_t)&v115, (uint64_t)__p, (uint64_t)v113, (int *)&v60);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_reduce_kernel,Espresso::base_kernel>(&v111, lpsrc, v87);
            if (v87) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v87);
            }
            if (SHIBYTE(v96) < 0) {
              operator delete(__p[0]);
            }
            if (v73) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v73);
            }
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__SOFTMAX_max_k", (const void **)v13[3], &__s);
            char v107 = 0;
            int v108 = 0;
            char v109 = 0;
            uint64_t v103 = 0;
            int v106 = -1;
            int v104 = v21;
            uint64_t v105 = 0;
            Espresso::abstract_engine_factory::shared(&v72);
            uint64_t v23 = v72;
            std::string::basic_string[abi:ne180100]<0>(__p, "broadcast");
            LODWORD(v60) = (***(uint64_t (****)(void))(v115 + 8))(*(void *)(v115 + 8));
            Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v23, (uint64_t)&v115, (uint64_t)__p, (uint64_t)&v103, (int *)&v60);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_broadcast_kernel,Espresso::base_kernel>(&v101, lpsrc, v87);
            if (v87) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v87);
            }
            if (SHIBYTE(v96) < 0) {
              operator delete(__p[0]);
            }
            if (v73) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v73);
            }
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_bcast", (const void **)&__s.__r_.__value_.__l.__data_, &v100);
            uint64_t v96 = 897988541;
            char v97 = 0;
            int v99 = 0;
            int v98 = 0;
            __p[1] = (void *)1065353216;
            __p[0] = (void *)33;
            Espresso::abstract_engine_factory::shared(&v60);
            long long v24 = v60;
            std::string::basic_string[abi:ne180100]<0>(&lpsrc, "elementwise");
            LODWORD(v123.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v115 + 8))(*(void *)(v115 + 8));
            Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v24, (uint64_t)&v115, (uint64_t)&lpsrc, (uint64_t)__p, (int *)&v123);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_elementwise_kernel,Espresso::base_kernel>(&v93, v72, v73);
            if (v73) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v73);
            }
            if (SHIBYTE(v88) < 0) {
              operator delete(lpsrc);
            }
            if (v61) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v61);
            }
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__SOFTMAX_minus_max", (const void **)v13[3], &v92);
            uint64_t v88 = 897988541;
            char v89 = 0;
            int v91 = 0;
            int v90 = 0;
            uint64_t v87 = 1065353216;
            long long lpsrc = (void *)27;
            Espresso::abstract_engine_factory::shared(&v123);
            uint64_t v25 = v123.__r_.__value_.__r.__words[0];
            std::string::basic_string[abi:ne180100]<0>(&v72, "elementwise");
            LODWORD(v81[0]) = (***(uint64_t (****)(void))(v115 + 8))(*(void *)(v115 + 8));
            Espresso::abstract_engine_factory::make_kernel_priv(v25, (uint64_t)&v115, (uint64_t)&v72, (uint64_t)&lpsrc, (int *)v81);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_elementwise_kernel,Espresso::base_kernel>(&v84, v60, v61);
            if (v61) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v61);
            }
            if (SHIBYTE(v74) < 0) {
              operator delete(v72);
            }
            if (v123.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v123.__r_.__value_.__l.__size_);
            }
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_exp", (const void **)&v92.__r_.__value_.__l.__data_, &v83);
            v81[3] = 0;
            v81[2] = 0;
            v81[4] = 0xFFFFFFFF00000000;
            char v82 = 0;
            v81[0] = 0x358637BD00000000;
            v81[1] = 0x100000004;
            Espresso::abstract_engine_factory::shared(&v123);
            uint64_t v26 = v123.__r_.__value_.__r.__words[0];
            std::string::basic_string[abi:ne180100]<0>(&v72, "reduce");
            LODWORD(v78.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v115 + 8))(*(void *)(v115 + 8));
            Espresso::abstract_engine_factory::make_kernel_priv(v26, (uint64_t)&v115, (uint64_t)&v72, (uint64_t)v81, (int *)&v78);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_reduce_kernel,Espresso::base_kernel>(&v79, v60, v61);
            if (v61) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v61);
            }
            if (SHIBYTE(v74) < 0) {
              operator delete(v72);
            }
            if (v123.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v123.__r_.__value_.__l.__size_);
            }
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__SOFTMAX_normalizer", (const void **)v13[3], &v78);
            uint64_t v74 = 897988541;
            char v75 = 0;
            int v77 = 0;
            int v76 = 0;
            unint64_t v72 = (void *)10;
            uint64_t v73 = 1065353216;
            Espresso::abstract_engine_factory::shared(&v69);
            uint64_t v27 = v69.__r_.__value_.__r.__words[0];
            std::string::basic_string[abi:ne180100]<0>(&v60, "elementwise");
            LODWORD(v66.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v115 + 8))(*(void *)(v115 + 8));
            Espresso::abstract_engine_factory::make_kernel_priv(v27, (uint64_t)&v115, (uint64_t)&v60, (uint64_t)&v72, (int *)&v66);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::ANECompilerEngine::elementwise_kernel,Espresso::base_kernel>(&v70, v123.__r_.__value_.__l.__data_, v123.__r_.__value_.__l.__size_);
            if (v123.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v123.__r_.__value_.__l.__size_);
            }
            if (SHIBYTE(v62) < 0) {
              operator delete(v60);
            }
            if (v69.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v69.__r_.__value_.__l.__size_);
            }
            uint64_t v28 = v70;
            if (!v70) {
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("Created elementwise kernel does not cast as expected ANE kernel.");
            }
            *(unsigned char *)(v70 + 616) = 1;
            *(void *)(v28 + 624) = v21;
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_inverse", (const void **)&v78.__r_.__value_.__l.__data_, &v69);
            Espresso::abstract_engine_factory::shared(&v66);
            uint64_t v29 = v66.__r_.__value_.__r.__words[0];
            std::string::basic_string[abi:ne180100]<0>(&v60, "broadcast");
            LODWORD(v57.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v115 + 8))(*(void *)(v115 + 8));
            Espresso::abstract_engine_factory::make_kernel_priv(v29, (uint64_t)&v115, (uint64_t)&v60, (uint64_t)&v103, (int *)&v57);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_broadcast_kernel,Espresso::base_kernel>(&v67, v123.__r_.__value_.__l.__data_, v123.__r_.__value_.__l.__size_);
            if (v123.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v123.__r_.__value_.__l.__size_);
            }
            if (SHIBYTE(v62) < 0) {
              operator delete(v60);
            }
            if (v66.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v66.__r_.__value_.__l.__size_);
            }
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_bcast", (const void **)&v69.__r_.__value_.__l.__data_, &v66);
            uint64_t v62 = 897988541;
            char v63 = 0;
            int v65 = 0;
            int v64 = 0;
            std::string::size_type v60 = (void *)1;
            uint64_t v61 = 1065353216;
            Espresso::abstract_engine_factory::shared(&v55);
            uint64_t v30 = v55.__r_.__value_.__r.__words[0];
            std::string::basic_string[abi:ne180100]<0>(&v123, "elementwise");
            LODWORD(v126.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v115 + 8))(*(void *)(v115 + 8));
            Espresso::abstract_engine_factory::make_kernel_priv(v30, (uint64_t)&v115, (uint64_t)&v123, (uint64_t)&v60, (int *)&v126);
            std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_elementwise_kernel,Espresso::base_kernel>(&v58, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
            if (v57.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v57.__r_.__value_.__l.__size_);
            }
            if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v123.__r_.__value_.__l.__data_);
            }
            if (v55.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v55.__r_.__value_.__l.__size_);
            }
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__SOFTMAX_output", (const void **)v13[3], &v57);
            Espresso::single_match_state<Espresso::generic_softmax_kernel>::remove_layer(a2);
            uint64_t v31 = v112;
            v56[0] = v111;
            v56[1] = v112;
            if (v112) {
              atomic_fetch_add_explicit(&v112->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(&v123, "reduce");
            size_t v32 = (long long *)v13[3];
            if (*((char *)v32 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v126, *(const std::string::value_type **)v32, *((void *)v32 + 1));
            }
            else
            {
              long long v33 = *v32;
              v126.__r_.__value_.__r.__words[2] = *((void *)v32 + 2);
              *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v33;
            }
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v55, (long long *)&v126, 1uLL);
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v125, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            }
            else {
              std::string v125 = __s;
            }
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)v54, (long long *)&v125, 1uLL);
            Espresso::single_match_state<Espresso::generic_softmax_kernel>::add_kernel(a2, v56, &v123, &__s, (std::string **)&v55, (std::string **)v54);
            std::string::size_type v122 = v54;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v122);
            if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v125.__r_.__value_.__l.__data_);
            }
            v54[0] = (void **)&v55;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v54);
            if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v126.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v123.__r_.__value_.__l.__data_);
            }
            if (v31) {
              nitro::nitro_function::nitro_function(v31);
            }
            size_t v34 = v102;
            v53[0] = v101;
            v53[1] = v102;
            if (v102) {
              atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(&v123, "broadcast");
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v126, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            }
            else {
              std::string v126 = __s;
            }
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v55, (long long *)&v126, 1uLL);
            if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v125, v100.__r_.__value_.__l.__data_, v100.__r_.__value_.__l.__size_);
            }
            else {
              std::string v125 = v100;
            }
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)v54, (long long *)&v125, 1uLL);
            Espresso::single_match_state<Espresso::generic_softmax_kernel>::add_kernel(a2, v53, &v123, &v100, (std::string **)&v55, (std::string **)v54);
            std::string::size_type v122 = v54;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v122);
            if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v125.__r_.__value_.__l.__data_);
            }
            v54[0] = (void **)&v55;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v54);
            if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v126.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v123.__r_.__value_.__l.__data_);
            }
            if (v34) {
              nitro::nitro_function::nitro_function(v34);
            }
            uint64_t v35 = v94;
            v52[0] = v93;
            v52[1] = v94;
            if (v94) {
              atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(&v55, "elementwise");
            uint64_t v36 = (long long *)v13[3];
            if (*((char *)v36 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v123, *(const std::string::value_type **)v36, *((void *)v36 + 1));
            }
            else
            {
              long long v37 = *v36;
              v123.__r_.__value_.__r.__words[2] = *((void *)v36 + 2);
              *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v37;
            }
            if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v124, v100.__r_.__value_.__l.__data_, v100.__r_.__value_.__l.__size_);
            }
            else {
              std::string v124 = v100;
            }
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v126, (long long *)&v123, 2uLL);
            if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v125, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
            }
            else {
              std::string v125 = v92;
            }
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)v54, (long long *)&v125, 1uLL);
            Espresso::single_match_state<Espresso::generic_softmax_kernel>::add_kernel(a2, v52, &v55, &v92, (std::string **)&v126, (std::string **)v54);
            std::string::size_type v122 = v54;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v122);
            if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v125.__r_.__value_.__l.__data_);
            }
            v54[0] = (void **)&v126;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v54);
            for (uint64_t i = 0; i != -6; i -= 3)
            {
              if (SHIBYTE(v124.__r_.__value_.__r.__words[i + 2]) < 0) {
                operator delete(*(void **)((char *)&v123 + i * 8 + 24));
              }
            }
            if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v55.__r_.__value_.__l.__data_);
            }
            if (v35) {
              nitro::nitro_function::nitro_function(v35);
            }
            uint64_t v39 = v85;
            v51[0] = v84;
            v51[1] = v85;
            if (v85) {
              atomic_fetch_add_explicit(&v85->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(&v123, "elementwise");
            if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v126, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
            }
            else {
              std::string v126 = v92;
            }
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v55, (long long *)&v126, 1uLL);
            if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v125, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
            }
            else {
              std::string v125 = v83;
            }
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)v54, (long long *)&v125, 1uLL);
            Espresso::single_match_state<Espresso::generic_softmax_kernel>::add_kernel(a2, v51, &v123, &v83, (std::string **)&v55, (std::string **)v54);
            std::string::size_type v122 = v54;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v122);
            if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v125.__r_.__value_.__l.__data_);
            }
            v54[0] = (void **)&v55;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v54);
            if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v126.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v123.__r_.__value_.__l.__data_);
            }
            if (v39) {
              nitro::nitro_function::nitro_function(v39);
            }
            uint64_t v40 = v80;
            v50[0] = v79;
            v50[1] = v80;
            if (v80) {
              atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(&v123, "reduce");
            if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v126, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
            }
            else {
              std::string v126 = v83;
            }
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v55, (long long *)&v126, 1uLL);
            if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v125, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
            }
            else {
              std::string v125 = v78;
            }
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)v54, (long long *)&v125, 1uLL);
            Espresso::single_match_state<Espresso::generic_softmax_kernel>::add_kernel(a2, v50, &v123, &v78, (std::string **)&v55, (std::string **)v54);
            std::string::size_type v122 = v54;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v122);
            if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v125.__r_.__value_.__l.__data_);
            }
            v54[0] = (void **)&v55;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v54);
            if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v126.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v123.__r_.__value_.__l.__data_);
            }
            if (v40) {
              nitro::nitro_function::nitro_function(v40);
            }
            std::string::size_type v41 = v71;
            v49[0] = v28;
            v49[1] = v71;
            if (v71) {
              atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(&v123, "elementwise");
            if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v126, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
            }
            else {
              std::string v126 = v78;
            }
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v55, (long long *)&v126, 1uLL);
            if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v125, v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_);
            }
            else {
              std::string v125 = v69;
            }
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)v54, (long long *)&v125, 1uLL);
            Espresso::single_match_state<Espresso::generic_softmax_kernel>::add_kernel(a2, v49, &v123, &v69, (std::string **)&v55, (std::string **)v54);
            std::string::size_type v122 = v54;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v122);
            if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v125.__r_.__value_.__l.__data_);
            }
            v54[0] = (void **)&v55;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v54);
            if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v126.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v123.__r_.__value_.__l.__data_);
            }
            if (v41) {
              nitro::nitro_function::nitro_function(v41);
            }
            size_t v42 = v68;
            v48[0] = v67;
            v48[1] = v68;
            if (v68) {
              atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(&v123, "broadcast");
            if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v126, v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_);
            }
            else {
              std::string v126 = v69;
            }
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v55, (long long *)&v126, 1uLL);
            if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v125, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
            }
            else {
              std::string v125 = v66;
            }
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)v54, (long long *)&v125, 1uLL);
            Espresso::single_match_state<Espresso::generic_softmax_kernel>::add_kernel(a2, v48, &v123, &v66, (std::string **)&v55, (std::string **)v54);
            std::string::size_type v122 = v54;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v122);
            if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v125.__r_.__value_.__l.__data_);
            }
            v54[0] = (void **)&v55;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v54);
            if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v126.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v123.__r_.__value_.__l.__data_);
            }
            if (v42) {
              nitro::nitro_function::nitro_function(v42);
            }
            long long v43 = v59;
            v47[0] = v58;
            v47[1] = v59;
            if (v59) {
              atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(&v55, "elementwise");
            if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v123, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
            }
            else {
              std::string v123 = v83;
            }
            if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v124, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
            }
            else {
              std::string v124 = v66;
            }
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v126, (long long *)&v123, 2uLL);
            unint64_t v44 = (long long *)v9[3];
            if (*((char *)v44 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v125, *(const std::string::value_type **)v44, *((void *)v44 + 1));
            }
            else
            {
              long long v45 = *v44;
              v125.__r_.__value_.__r.__words[2] = *((void *)v44 + 2);
              *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v45;
            }
            std::vector<std::string>::vector[abi:ne180100]((uint64_t)v54, (long long *)&v125, 1uLL);
            Espresso::single_match_state<Espresso::generic_softmax_kernel>::add_kernel(a2, v47, &v55, &v57, (std::string **)&v126, (std::string **)v54);
            std::string::size_type v122 = v54;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v122);
            if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v125.__r_.__value_.__l.__data_);
            }
            v54[0] = (void **)&v126;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v54);
            for (uint64_t j = 0; j != -6; j -= 3)
            {
              if (SHIBYTE(v124.__r_.__value_.__r.__words[j + 2]) < 0) {
                operator delete(*(void **)((char *)&v123 + j * 8 + 24));
              }
            }
            if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v55.__r_.__value_.__l.__data_);
            }
            if (v43) {
              nitro::nitro_function::nitro_function(v43);
            }
            if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v57.__r_.__value_.__l.__data_);
            }
            if (v43) {
              nitro::nitro_function::nitro_function(v43);
            }
            if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v66.__r_.__value_.__l.__data_);
            }
            if (v42) {
              nitro::nitro_function::nitro_function(v42);
            }
            if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v69.__r_.__value_.__l.__data_);
            }
            if (v41) {
              nitro::nitro_function::nitro_function(v41);
            }
            if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v78.__r_.__value_.__l.__data_);
            }
            if (v40) {
              nitro::nitro_function::nitro_function(v40);
            }
            if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v83.__r_.__value_.__l.__data_);
            }
            if (v39) {
              nitro::nitro_function::nitro_function(v39);
            }
            if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v92.__r_.__value_.__l.__data_);
            }
            if (v35) {
              nitro::nitro_function::nitro_function(v35);
            }
            if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v100.__r_.__value_.__l.__data_);
            }
            if (v34) {
              nitro::nitro_function::nitro_function(v34);
            }
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__s.__r_.__value_.__l.__data_);
            }
            if (v31) {
              nitro::nitro_function::nitro_function(v31);
            }
            if (v116) {
              nitro::nitro_function::nitro_function(v116);
            }
          }
          if (v119)
          {
            std::string v120 = v119;
            operator delete(v119);
          }
        }
      }
    }
  }
}

void sub_192957238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  a24 = v76 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  uint64_t v78 = 0;
  uint64_t v79 = v76 - 224;
  while (1)
  {
    if (*(char *)(v79 + v78 + 47) < 0) {
      operator delete(*(void **)(v79 + v78 + 24));
    }
    v78 -= 24;
    if (v78 == -48)
    {
      if (a32 < 0) {
        operator delete(__p);
      }
      if (v75) {
        nitro::nitro_function::nitro_function(v75);
      }
      if (a40 < 0) {
        operator delete(a35);
      }
      if (a42) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)a42);
      }
      if (a55 < 0) {
        operator delete(a50);
      }
      if (a57) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)a57);
      }
      if (a63 < 0) {
        operator delete(a58);
      }
      if (a65) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)a65);
      }
      if (a73 < 0) {
        operator delete(a72);
      }
      if (a74) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)a74);
      }
      if (SLOBYTE(STACK[0x20F]) < 0) {
        operator delete(a75);
      }
      if (STACK[0x218]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x218]);
      }
      if (SLOBYTE(STACK[0x26F]) < 0) {
        operator delete((void *)STACK[0x258]);
      }
      if (STACK[0x278]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x278]);
      }
      if (SLOBYTE(STACK[0x2CF]) < 0) {
        operator delete((void *)STACK[0x2B8]);
      }
      if (STACK[0x2D8]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x2D8]);
      }
      if (SLOBYTE(STACK[0x31F]) < 0) {
        operator delete((void *)STACK[0x308]);
      }
      if (STACK[0x328]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x328]);
      }
      if (STACK[0x368]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x368]);
      }
      int v80 = (void *)STACK[0x398];
      if (STACK[0x398])
      {
        STACK[0x3A0] = (unint64_t)v80;
        operator delete(v80);
      }
      _Unwind_Resume(a1);
    }
  }
}

void *std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_reduce_kernel,Espresso::base_kernel>(void *result, void *lpsrc, uint64_t a3)
{
  uint64_t v3 = result;
  if (lpsrc
  {
    void *v3 = result;
    v3[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void *std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_broadcast_kernel,Espresso::base_kernel>(void *result, void *lpsrc, uint64_t a3)
{
  uint64_t v3 = result;
  if (lpsrc
  {
    void *v3 = result;
    v3[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void *std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_elementwise_kernel,Espresso::base_kernel>(void *result, void *lpsrc, uint64_t a3)
{
  uint64_t v3 = result;
  if (lpsrc
  {
    void *v3 = result;
    v3[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void *std::dynamic_pointer_cast[abi:ne180100]<Espresso::ANECompilerEngine::elementwise_kernel,Espresso::base_kernel>(void *result, void *lpsrc, uint64_t a3)
{
  uint64_t v3 = result;
  if (lpsrc
  {
    void *v3 = result;
    v3[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void Espresso::single_match_state<Espresso::generic_softmax_kernel>::remove_layer(int64x2_t *a1)
{
  memset(v7, 0, sizeof(v7));
  __int32 v4 = a1[3].i32[2];
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  unint64_t v2 = a1[2].u64[1];
  if (v2 >= a1[3].i64[0])
  {
    uint64_t v3 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v4);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v4);
    uint64_t v3 = v2 + 72;
    a1[2].i64[1] = v2 + 72;
  }
  a1[2].i64[1] = v3;
  unint64_t v8 = (void **)&v7[1] + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  unint64_t v8 = (void **)v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
}

void sub_192957C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void Espresso::single_match_state<Espresso::generic_softmax_kernel>::add_kernel(int64x2_t *a1, void *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6)
{
  __int32 v23 = 0;
  memset(v26, 0, sizeof(v26));
  int v12 = (char *)operator new(0xF8uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)int v12 = &unk_1EE389DF0;
  *((void *)v12 + 3) = &unk_1EE36C758;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 161) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((void *)v12 + 30) = 0;
  long long v24 = v12 + 24;
  uint64_t v25 = (std::__shared_weak_count *)v12;
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  if (v14)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    uint64_t v15 = (std::__shared_weak_count *)*((void *)v12 + 12);
    *((void *)v12 + 11) = v13;
    *((void *)v12 + 12) = v14;
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
  }
  else
  {
    *((void *)v12 + 11) = v13;
    *((void *)v12 + 12) = 0;
  }
  std::string::operator=((std::string *)(v24 + 16), a4);
  std::string::operator=((std::string *)(v24 + 40), a3);
  uint64_t v16 = *(uint64_t (****)(void))(*(void *)(*a2 + 8) + 8);
  long long v17 = v24;
  *((_DWORD *)v24 + 2) = (**v16)(v16);
  uint64_t v18 = a1[1].i64[0];
  if (v18)
  {
    *((_DWORD *)v17 + 3) = *(_DWORD *)(v18 + 12);
    if (*(char *)(v18 + 223) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v18 + 200), *(void *)(v18 + 208));
    }
    else {
      std::string __p = *(std::string *)(v18 + 200);
    }
    std::string::operator=((std::string *)(v17 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v19 = *(void *)(a1[4].i64[0] + 32);
    if (*(void *)(a1[4].i64[0] + 40) != v19) {
      *((_DWORD *)v17 + 3) = *(_DWORD *)(*(void *)v19 + 12);
    }
  }
  if (v26 != (_OWORD *)a5) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v26, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  }
  if ((std::string **)((char *)&v26[1] + 8) != a6) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v26[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  }
  __int32 v23 = a1[3].i32[2];
  unint64_t v20 = a1[2].u64[1];
  if (v20 >= a1[3].i64[0])
  {
    uint64_t v21 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v23);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v23);
    uint64_t v21 = v20 + 72;
    a1[2].i64[1] = v20 + 72;
  }
  a1[2].i64[1] = v21;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
}

void sub_192957EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void *std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_deconvolution_kernel,Espresso::base_kernel>(void *result, void *lpsrc, uint64_t a3)
{
  uint64_t v3 = result;
  if (lpsrc
  {
    void *v3 = result;
    v3[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void *std::dynamic_pointer_cast[abi:ne180100]<Espresso::ANECompilerEngine::deconvolution_kernel,Espresso::generic_deconvolution_kernel>(void *result, void *lpsrc, uint64_t a3)
{
  uint64_t v3 = result;
  if (lpsrc
  {
    void *v3 = result;
    v3[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void *std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_crop_kernel,Espresso::base_kernel>(void *result, void *lpsrc, uint64_t a3)
{
  uint64_t v3 = result;
  if (lpsrc
  {
    void *v3 = result;
    v3[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void *std::vector<Espresso::layer_shape>::vector[abi:ne180100](void *a1, long long *a2, unint64_t a3)
{
  a1[2] = 0;
  uint64_t v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    std::vector<Espresso::layer_shape>::__vallocate[abi:ne180100](a1, a3);
    a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>(v4, a2, &a2[4 * a3], a1[1]);
  }
  return a1;
}

void sub_192958168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::single_match_state<Espresso::generic_deconvolution_kernel>::add_kernel(int64x2_t *a1, void *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6)
{
  int v23 = 0;
  memset(v26, 0, sizeof(v26));
  int v12 = (char *)operator new(0xF8uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)int v12 = &unk_1EE389DF0;
  *((void *)v12 + 3) = &unk_1EE36C758;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 161) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((void *)v12 + 30) = 0;
  long long v24 = v12 + 24;
  uint64_t v25 = (std::__shared_weak_count *)v12;
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  if (v14)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    uint64_t v15 = (std::__shared_weak_count *)*((void *)v12 + 12);
    *((void *)v12 + 11) = v13;
    *((void *)v12 + 12) = v14;
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
  }
  else
  {
    *((void *)v12 + 11) = v13;
    *((void *)v12 + 12) = 0;
  }
  std::string::operator=((std::string *)(v24 + 16), a4);
  std::string::operator=((std::string *)(v24 + 40), a3);
  uint64_t v16 = *(uint64_t (****)(void))(*(void *)(*a2 + 8) + 8);
  long long v17 = v24;
  *((_DWORD *)v24 + 2) = (**v16)(v16);
  uint64_t v18 = a1[1].i64[0];
  if (v18)
  {
    *((_DWORD *)v17 + 3) = *(_DWORD *)(v18 + 12);
    if (*(char *)(v18 + 223) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v18 + 200), *(void *)(v18 + 208));
    }
    else {
      std::string __p = *(std::string *)(v18 + 200);
    }
    std::string::operator=((std::string *)(v17 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v19 = *(void *)(a1[4].i64[0] + 32);
    if (*(void *)(a1[4].i64[0] + 40) != v19) {
      *((_DWORD *)v17 + 3) = *(_DWORD *)(*(void *)v19 + 12);
    }
  }
  if (v26 != (_OWORD *)a5) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v26, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  }
  if ((std::string **)((char *)&v26[1] + 8) != a6) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v26[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  }
  int v23 = a1[3].i32[2] - 1;
  unint64_t v20 = a1[2].u64[1];
  if (v20 >= a1[3].i64[0])
  {
    uint64_t v21 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v23);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v23);
    uint64_t v21 = v20 + 72;
    a1[2].i64[1] = v20 + 72;
  }
  a1[2].i64[1] = v21;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
}

void sub_19295841C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void _ZZZN8Espresso17ANECompilerEngine7context19transform_broadcastEPNS_3netEPS1_EUb_ENK3__1clEm(char **a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 >= 2)
  {
    unint64_t v2 = a2;
    uint64_t v4 = 0;
    do
    {
      unint64_t v5 = (unint64_t)a1[2];
      if (v2)
      {
        if ((unint64_t)v4 >= v5)
        {
          uint64_t v13 = *a1;
          uint64_t v14 = (v4 - *a1) >> 4;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 60) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v16 = v5 - (void)v13;
          if (v16 >> 3 > v15) {
            unint64_t v15 = v16 >> 3;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17)
          {
            if (v17 >> 60) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v18 = (char *)operator new(16 * v17);
          }
          else
          {
            uint64_t v18 = 0;
          }
          uint64_t v21 = &v18[16 * v14];
          *(void *)uint64_t v21 = 1;
          *((void *)v21 + 1) = v2;
          unint64_t v22 = v21;
          if (v4 != v13)
          {
            do
            {
              *((_OWORD *)v22 - 1) = *((_OWORD *)v4 - 1);
              v22 -= 16;
              v4 -= 16;
            }
            while (v4 != v13);
            uint64_t v4 = *a1;
          }
          uint64_t v6 = v21 + 16;
          *a1 = v22;
          a1[1] = v21 + 16;
          a1[2] = &v18[16 * v17];
          if (v4) {
            operator delete(v4);
          }
        }
        else
        {
          *(void *)uint64_t v4 = 1;
          *((void *)v4 + 1) = v2;
          uint64_t v6 = v4 + 16;
        }
        a1[1] = v6;
        ++v2;
      }
      else
      {
        if ((unint64_t)v4 >= v5)
        {
          uint64_t v7 = *a1;
          uint64_t v8 = (v4 - *a1) >> 4;
          unint64_t v9 = v8 + 1;
          if ((unint64_t)(v8 + 1) >> 60) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v10 = v5 - (void)v7;
          if (v10 >> 3 > v9) {
            unint64_t v9 = v10 >> 3;
          }
          if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v9;
          }
          if (v11)
          {
            if (v11 >> 60) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            int v12 = (char *)operator new(16 * v11);
          }
          else
          {
            int v12 = 0;
          }
          uint64_t v19 = &v12[16 * v8];
          *(void *)uint64_t v19 = 0;
          *((void *)v19 + 1) = v2;
          unint64_t v20 = v19;
          if (v4 != v7)
          {
            do
            {
              *((_OWORD *)v20 - 1) = *((_OWORD *)v4 - 1);
              v20 -= 16;
              v4 -= 16;
            }
            while (v4 != v7);
            uint64_t v4 = *a1;
          }
          uint64_t v6 = v19 + 16;
          *a1 = v20;
          a1[1] = v19 + 16;
          a1[2] = &v12[16 * v11];
          if (v4) {
            operator delete(v4);
          }
        }
        else
        {
          *(void *)uint64_t v4 = 0;
          *((void *)v4 + 1) = v2;
          uint64_t v6 = v4 + 16;
        }
        a1[1] = v6;
        v2 >>= 1;
      }
      uint64_t v4 = v6;
    }
    while (v2 > 1);
    int v23 = *a1;
    if (*a1 != v6)
    {
      for (uint64_t i = v6 - 16; v23 < i; i -= 16)
      {
        int v25 = *(_DWORD *)v23;
        *(_DWORD *)int v23 = *(_DWORD *)i;
        *(_DWORD *)uint64_t i = v25;
        uint64_t v26 = *((void *)v23 + 1);
        *((void *)v23 + 1) = *((void *)i + 1);
        *((void *)i + 1) = v26;
        v23 += 16;
      }
    }
  }
}

void sub_1929586AC(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::single_match_state<Espresso::ANECompilerEngine::broadcast_kernel>::add_kernel(int64x2_t *a1, void *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6, int a7)
{
  int v25 = 0;
  memset(v28, 0, sizeof(v28));
  uint64_t v14 = (char *)operator new(0xF8uLL);
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 2) = 0;
  *(void *)uint64_t v14 = &unk_1EE389DF0;
  *((void *)v14 + 3) = &unk_1EE36C758;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 136) = 0u;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 161) = 0u;
  *((_OWORD *)v14 + 13) = 0u;
  *((_OWORD *)v14 + 14) = 0u;
  *((void *)v14 + 30) = 0;
  uint64_t v26 = v14 + 24;
  uint64_t v27 = (std::__shared_weak_count *)v14;
  uint64_t v15 = *a2;
  uint64_t v16 = a2[1];
  if (v16)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    unint64_t v17 = (std::__shared_weak_count *)*((void *)v14 + 12);
    *((void *)v14 + 11) = v15;
    *((void *)v14 + 12) = v16;
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
  }
  else
  {
    *((void *)v14 + 11) = v15;
    *((void *)v14 + 12) = 0;
  }
  std::string::operator=((std::string *)(v26 + 16), a4);
  std::string::operator=((std::string *)(v26 + 40), a3);
  uint64_t v18 = *(uint64_t (****)(void))(*(void *)(*a2 + 8) + 8);
  uint64_t v19 = v26;
  *((_DWORD *)v26 + 2) = (**v18)(v18);
  uint64_t v20 = a1[1].i64[0];
  if (v20)
  {
    *((_DWORD *)v19 + 3) = *(_DWORD *)(v20 + 12);
    if (*(char *)(v20 + 223) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v20 + 200), *(void *)(v20 + 208));
    }
    else {
      std::string __p = *(std::string *)(v20 + 200);
    }
    std::string::operator=((std::string *)(v19 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v21 = *(void *)(a1[4].i64[0] + 32);
    if (*(void *)(a1[4].i64[0] + 40) != v21) {
      *((_DWORD *)v19 + 3) = *(_DWORD *)(*(void *)v21 + 12);
    }
  }
  if (v28 != (_OWORD *)a5) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v28, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  }
  if ((std::string **)((char *)&v28[1] + 8) != a6) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v28[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  }
  int v25 = a1[3].i32[2] - a7;
  unint64_t v22 = a1[2].u64[1];
  if (v22 >= a1[3].i64[0])
  {
    uint64_t v23 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v25);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v25);
    uint64_t v23 = v22 + 72;
    a1[2].i64[1] = v22 + 72;
  }
  a1[2].i64[1] = v23;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
}

void sub_192958974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void _ZZZN8Espresso17ANECompilerEngine7context44insert_broadcast_for_implicit_dual_source_ewEPNS_3netEPS1_EUb0_ENK3__2clEm(uint64_t **a1, unint64_t a2)
{
  *(void *)&long long v75 = *MEMORY[0x1E4F143B8];
  char v64 = 0;
  int v65 = 0;
  char v66 = 0;
  uint64_t v4 = *a1;
  uint64_t v60 = **a1;
  int v61 = *((_DWORD *)v4 + 2);
  uint64_t v62 = 0;
  int v5 = *((_DWORD *)v4 + 5);
  if (v5 == -1)
  {
    if (*((_DWORD *)v4 + 4) == 1) {
      int v5 = 4;
    }
    else {
      int v5 = 5;
    }
  }
  int v63 = v5;
  Espresso::abstract_engine_factory::shared(v69);
  uint64_t v6 = *(void *)v69;
  uint64_t v7 = (uint64_t)a1[3];
  std::string::basic_string[abi:ne180100]<0>(__p, "broadcast");
  uint64_t v8 = *(uint64_t (****)(void))(*a1[3] + 8);
  LODWORD(v59.__r_.__value_.__l.__data_) = (**v8)(v8);
  Espresso::abstract_engine_factory::make_kernel_priv(v6, v7, (uint64_t)__p, (uint64_t)&v60, (int *)&v59);
  if (!lpsrc[0])
  {
    unint64_t v9 = 0;
    goto LABEL_10;
  }
  if (!v9)
  {
LABEL_10:
    uint64_t v10 = 0;
    goto LABEL_11;
  }
  uint64_t v10 = (std::__shared_weak_count *)lpsrc[1];
  if (lpsrc[1]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)lpsrc[1] + 1, 1uLL, memory_order_relaxed);
  }
LABEL_11:
  if (lpsrc[1]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)lpsrc[1]);
  }
  if (SBYTE7(v50) < 0) {
    operator delete(__p[0]);
  }
  if (*(void *)&v69[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v69[8]);
  }
  uint64_t v11 = *(void *)(*(void *)(*a1[2] + 32) + 16 * *((int *)a1[1] + 14));
  if (*(char *)(v11 + 39) >= 0) {
    size_t v12 = *(unsigned __int8 *)(v11 + 39);
  }
  else {
    size_t v12 = *(void *)(v11 + 24);
  }
  uint64_t v13 = v69;
  std::string::basic_string[abi:ne180100]((uint64_t)v69, v12 + 19);
  if (v69[23] < 0) {
    uint64_t v13 = *(unsigned char **)v69;
  }
  if (v12)
  {
    if (*(char *)(v11 + 39) >= 0) {
      uint64_t v14 = (const void *)(v11 + 16);
    }
    else {
      uint64_t v14 = *(const void **)(v11 + 16);
    }
    memmove(v13, v14, v12);
  }
  strcpy(&v13[v12], "_bcast_operand_idx_");
  std::to_string(&__str, a2);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  unint64_t v17 = std::string::append((std::string *)v69, (const std::string::value_type *)p_str, size);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  *(void *)&long long v44 = *((void *)&v17->__r_.__value_.__l + 2);
  *(_OWORD *)long long lpsrc = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  uint64_t v19 = std::string::append((std::string *)lpsrc, "_layer_");
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  *(void *)&long long v50 = *((void *)&v19->__r_.__value_.__l + 2);
  *(_OWORD *)std::string __p = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v57, *((_DWORD *)a1[1] + 14));
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v21 = &v57;
  }
  else {
    uint64_t v21 = (std::string *)v57.__r_.__value_.__r.__words[0];
  }
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v22 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v22 = v57.__r_.__value_.__l.__size_;
  }
  uint64_t v23 = std::string::append((std::string *)__p, (const std::string::value_type *)v21, v22);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v50) < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v44) < 0) {
    operator delete(lpsrc[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if ((v69[23] & 0x80000000) != 0) {
    operator delete(*(void **)v69);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__str, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
  }
  else {
    std::string __str = v59;
  }
  int v25 = (int64x2_t *)a1[1];
  v56[0] = v9;
  v56[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "broadcast");
  uint64_t v26 = *a1[2] + 56;
  unint64_t v27 = *((int *)a1[1] + 14);
  unint64_t v55 = v27;
  uint64_t v28 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v26, v27, &v55)[3]+ 24 * a2;
  if (*(char *)(v28 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v69, *(const std::string::value_type **)v28, *(void *)(v28 + 8));
  }
  else
  {
    long long v29 = *(_OWORD *)v28;
    *(void *)&v69[16] = *(void *)(v28 + 16);
    *(_OWORD *)std::string v69 = v29;
  }
  lpsrc[0] = 0;
  lpsrc[1] = 0;
  *(void *)&long long v44 = 0;
  v57.__r_.__value_.__r.__words[0] = (std::string::size_type)lpsrc;
  v57.__r_.__value_.__s.__data_[8] = 0;
  lpsrc[0] = operator new(0x18uLL);
  lpsrc[1] = lpsrc[0];
  *(void *)&long long v44 = (char *)lpsrc[0] + 24;
  lpsrc[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v44, (long long *)v69, (long long *)&v69[24], (std::string *)lpsrc[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v74, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  }
  else {
    std::string v74 = __str;
  }
  memset(&v57, 0, sizeof(v57));
  uint64_t v67 = &v57;
  char v68 = 0;
  v57.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v57.__r_.__value_.__l.__size_ = v57.__r_.__value_.__r.__words[0];
  v57.__r_.__value_.__r.__words[2] = v57.__r_.__value_.__r.__words[0] + 24;
  v57.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v57.__r_.__value_.__r.__words[2], (long long *)&v74, &v75, (std::string *)v57.__r_.__value_.__l.__data_);
  Espresso::single_match_state<Espresso::ANECompilerEngine::elementwise_kernel>::add_kernel(v25, v56, (const std::string *)__p, &v59, (std::string **)lpsrc, (std::string **)&v57, 1);
  uint64_t v67 = &v57;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v74.__r_.__value_.__l.__data_);
  }
  v57.__r_.__value_.__r.__words[0] = (std::string::size_type)lpsrc;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
  if ((v69[23] & 0x80000000) != 0) {
    operator delete(*(void **)v69);
  }
  if (SBYTE7(v50) < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  uint64_t v30 = *a1[2];
  unint64_t v31 = *((int *)a1[1] + 14);
  *(void *)std::string v69 = v31;
  lpsrc[0] = (void *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v30 + 56, v31, v69)[3]+ 24 * a2);
  size_t v32 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v30 + 184), (void *)lpsrc[0], (long long **)lpsrc);
  long long v33 = *(_OWORD *)(v32 + 72);
  *(_OWORD *)std::string __p = *(_OWORD *)(v32 + 56);
  long long v50 = v33;
  size_t v34 = (const void *)*((void *)v32 + 12);
  uint64_t v51 = *((void *)v32 + 11);
  long long v52 = 0;
  std::string::size_type v53 = 0;
  uint64_t v54 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v52, v34, *((void *)v32 + 13), (uint64_t)(*((void *)v32 + 13) - (void)v34) >> 2);
  *(_OWORD *)std::string v69 = *(_OWORD *)__p;
  *(_OWORD *)&v69[16] = v50;
  uint64_t v70 = v51;
  size_t v71 = 0;
  unint64_t v72 = 0;
  uint64_t v73 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v71, v52, (uint64_t)v53, (v53 - (unsigned char *)v52) >> 2);
  memset(&v74, 0, sizeof(v74));
  uint64_t v67 = &v74;
  char v68 = 0;
  v74.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
  v74.__r_.__value_.__l.__size_ = v74.__r_.__value_.__r.__words[0];
  v74.__r_.__value_.__r.__words[2] = v74.__r_.__value_.__r.__words[0] + 64;
  v74.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v74.__r_.__value_.__r.__words[2], (long long *)v69, (long long *)&v74, (uint64_t)v74.__r_.__value_.__l.__data_);
  (*(void (**)(std::string *__return_ptr, void *, std::string *))(*(void *)v9 + 64))(&v57, v9, &v74);
  uint64_t v35 = *(void *)(v57.__r_.__value_.__r.__words[0] + 32);
  long long v36 = *(_OWORD *)(v57.__r_.__value_.__r.__words[0] + 16);
  *(_OWORD *)long long lpsrc = *(_OWORD *)v57.__r_.__value_.__l.__data_;
  long long v44 = v36;
  uint64_t v45 = v35;
  std::string::size_type v46 = 0;
  std::string::size_type v47 = 0;
  uint64_t v48 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v46, *(const void **)(v57.__r_.__value_.__r.__words[0] + 40), *(void *)(v57.__r_.__value_.__r.__words[0] + 48), (uint64_t)(*(void *)(v57.__r_.__value_.__r.__words[0] + 48) - *(void *)(v57.__r_.__value_.__r.__words[0] + 40)) >> 2);
  uint64_t v67 = &v57;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
  uint64_t v67 = &v74;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
  if (v71)
  {
    unint64_t v72 = v71;
    operator delete(v71);
  }
  long long v37 = (uint64_t **)(*a1[2] + 184);
  *(void *)std::string v69 = &__str;
  long long v38 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v37, &__str, (long long **)v69);
  long long v39 = v44;
  *(_OWORD *)(v38 + 56) = *(_OWORD *)lpsrc;
  *(_OWORD *)(v38 + 72) = v39;
  *((void *)v38 + 11) = v45;
  if (v38 + 56 != (char *)lpsrc) {
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v38 + 96, (char *)v46, (uint64_t)v47, (v47 - (unsigned char *)v46) >> 2);
  }
  uint64_t v40 = *a1[2] + 56;
  unint64_t v41 = *((int *)a1[1] + 14);
  *(void *)std::string v69 = v41;
  size_t v42 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v40, v41, v69);
  std::string::operator=((std::string *)(v42[3] + 24 * a2), &__str);
  if (v46)
  {
    std::string::size_type v47 = v46;
    operator delete(v46);
  }
  if (v52)
  {
    std::string::size_type v53 = v52;
    operator delete(v52);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192959148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void **a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  a34 = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a34);
  if (*(char *)(v53 - 137) < 0) {
    operator delete(*(void **)(v53 - 160));
  }
  if (a25 < 0) {
    operator delete(__p);
  }
  if (v52) {
    nitro::nitro_function::nitro_function(v52);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (v52) {
    nitro::nitro_function::nitro_function(v52);
  }
  _Unwind_Resume(a1);
}

void Espresso::fuse_vertical_state<Espresso::base_kernel,Espresso::generic_activation_kernel>::remove_second_layer(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 120) + 32);
  uint64_t v3 = *(char **)(*(void *)(v2 + 16 * *(int *)(a1 + 112)) + 64);
  uint64_t v4 = *(void *)(*(void *)(v2 + 16 * *(int *)(a1 + 116)) + 64);
  int v5 = operator new(8uLL);
  void *v5 = v4;
  v26[1] = (uint64_t)(v5 + 1);
  v26[2] = (uint64_t)(v5 + 1);
  v26[0] = (uint64_t)v5;
  Espresso::merge_kernel_attributes(v3, v26);
  operator delete(v5);
  uint64_t v6 = *(void *)(a1 + 120) + 96;
  unint64_t v7 = *(int *)(a1 + 116);
  v26[0] = v7;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6, v7, v26);
  uint64_t v9 = *(void *)(a1 + 120) + 96;
  unint64_t v10 = *(int *)(a1 + 112);
  unint64_t v25 = v10;
  uint64_t v11 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, v10, &v25);
  if (v11 != v8) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v11 + 3), (std::string *)v8[3], (std::string *)v8[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8[4] - v8[3]) >> 3));
  }
  size_t v12 = *(char **)(a1 + 72);
  unint64_t v13 = *(void *)(a1 + 80);
  if ((unint64_t)v12 >= v13)
  {
    uint64_t v15 = *(char **)(a1 + 64);
    uint64_t v16 = (v12 - v15) >> 2;
    if ((unint64_t)(v16 + 1) >> 62) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v17 = v13 - (void)v15;
    unint64_t v18 = (uint64_t)(v13 - (void)v15) >> 1;
    if (v18 <= v16 + 1) {
      unint64_t v18 = v16 + 1;
    }
    BOOL v19 = v17 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v19) {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v20);
      uint64_t v15 = *(char **)(a1 + 64);
      size_t v12 = *(char **)(a1 + 72);
    }
    else
    {
      uint64_t v21 = 0;
    }
    std::string::size_type v22 = (_DWORD *)(v20 + 4 * v16);
    unint64_t v23 = v20 + 4 * v21;
    *std::string::size_type v22 = *(_DWORD *)(a1 + 116);
    uint64_t v14 = v22 + 1;
    while (v12 != v15)
    {
      int v24 = *((_DWORD *)v12 - 1);
      v12 -= 4;
      *--std::string::size_type v22 = v24;
    }
    *(void *)(a1 + 64) = v22;
    *(void *)(a1 + 72) = v14;
    *(void *)(a1 + 80) = v23;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *(_DWORD *)size_t v12 = *(_DWORD *)(a1 + 116);
    uint64_t v14 = v12 + 4;
  }
  *(void *)(a1 + 72) = v14;
}