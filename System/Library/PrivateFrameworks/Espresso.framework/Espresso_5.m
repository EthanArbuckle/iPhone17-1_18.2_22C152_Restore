void std::__shared_ptr_pointer<MIL::MILContext  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  uint64_t vars8;

  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<MIL::MILContext  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192E070E0) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192E070E0 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192E070E0)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192E070E0 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (i = *(void **)(a2 + 16); i; i = (void *)*i)
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>> const&>(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_19237D75C(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19237D770(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x8_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v43, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          int8x8_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = operator new(0x38uLL);
  v43[0] = v25;
  v43[1] = a1 + 16;
  char v44 = 0;
  void *v25 = 0;
  v25[1] = v10;
  v26 = (std::string *)(v25 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v25[4] = *(void *)(a3 + 16);
  }
  uint64_t v27 = *(void *)(a3 + 32);
  v25[5] = *(void *)(a3 + 24);
  v25[6] = v27;
  if (v27) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
  }
  char v44 = 1;
  float v28 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v29 = *(float *)(a1 + 32);
  if (!v11 || (float)(v29 * (float)v11) < v28)
  {
    BOOL v32 = 1;
    if (v11 >= 3) {
      BOOL v32 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v33 = v32 | (2 * v11);
    unint64_t v34 = vcvtps_u32_f32(v28 / v29);
    if (v33 <= v34) {
      size_t prime = v34;
    }
    else {
      size_t prime = v33;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v36 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v36) {
      goto LABEL_70;
    }
    if (prime < *(void *)&v36)
    {
      unint64_t v37 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v36 < 3uLL || (uint8x8_t v38 = (uint8x8_t)vcnt_s8(v36), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        unint64_t v37 = std::__next_prime(v37);
      }
      else
      {
        uint64_t v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2) {
          unint64_t v37 = v39;
        }
      }
      if (prime <= v37) {
        size_t prime = v37;
      }
      if (prime < *(void *)&v36) {
LABEL_70:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v40 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        v30 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        v31 = (void *)v43[0];
        if (v30) {
          goto LABEL_59;
        }
      }
      else
      {
        unint64_t v3 = v10;
        v30 = *(void **)(*(void *)a1 + 8 * v10);
        v31 = (void *)v43[0];
        if (v30) {
          goto LABEL_59;
        }
      }
    }
    else
    {
      unint64_t v3 = v40 & v10;
      v30 = *(void **)(*(void *)a1 + 8 * (v40 & v10));
      v31 = (void *)v43[0];
      if (v30) {
        goto LABEL_59;
      }
    }
LABEL_83:
    void *v31 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v43[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v43[0])
    {
      unint64_t v41 = *(void *)(*(void *)v43[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v41 >= v11) {
          v41 %= v11;
        }
      }
      else
      {
        v41 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v41) = v43[0];
    }
    goto LABEL_94;
  }
  v30 = *(void **)(*(void *)a1 + 8 * v3);
  v31 = (void *)v43[0];
  if (!v30) {
    goto LABEL_83;
  }
LABEL_59:
  void *v31 = *v30;
  void *v30 = v43[0];
LABEL_94:
  v14 = (uint64_t *)v43[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_19237DBDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19237DBF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19237DC08()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t E5RT::Ops::E5MinimalCpuOperation::Impl::Impl(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = a2;
  uint64_t v4 = *a3;
  *(void *)(a1 + 8) = *a3;
  uint64_t v5 = a3[1];
  *(void *)(a1 + 16) = v5;
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    uint64_t v4 = *(void *)(a1 + 8);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  memset(&__p, 0, sizeof(__p));
  char v6 = *(unsigned char *)(v4 + 23);
  if (v6 >= 0) {
    unint64_t v7 = (std::string *)v4;
  }
  else {
    unint64_t v7 = *(std::string **)v4;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v4 + 23);
  }
  else {
    uint64_t v8 = *(void *)(v4 + 8);
  }
  std::string::append[abi:ne180100]<char const*,0>(&__p, v7, (std::string *)((char *)v7 + v8));
  E5RT::MILProgramUtils::MILProgramUtils((E5RT::MILProgramUtils *)v59, (const std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  E5RT::MILProgramUtils::GetFunctionNames((E5RT::MILProgramUtils *)v59, &v57);
  begin = v57.__begin_;
  if (v57.__begin_)
  {
    std::vector<std::string>::pointer end = v57.__end_;
    std::vector<std::string>::pointer v11 = v57.__begin_;
    if (v57.__end_ != v57.__begin_)
    {
      do
      {
        if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(end[-1].__r_.__value_.__l.__data_);
        }
        --end;
      }
      while (end != begin);
      std::vector<std::string>::pointer v11 = v57.__begin_;
    }
    v57.__end_ = begin;
    operator delete(v11);
  }
  uint64_t MILProgram = E5RT::MILProgramUtils::GetMILProgram((E5RT::MILProgramUtils *)v59);
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)MILProgram + 72))(MILProgram);
  uint64_t v14 = v13;
  if (*(void *)(v13 + 24) != 1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Impl");
    std::to_string(&v53, *(void *)(v14 + 24));
    v46 = std::string::insert(&v53, 0, "There should be be exactly 1 function. Getting ");
    long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    std::string::size_type v55 = v46->__r_.__value_.__r.__words[2];
    long long v54 = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    E5RT::Status::Status(v56, 2, &v54);
    E5RT::E5RTError::E5RTError(exception, &__p, v56);
  }
  uint64_t v15 = *(void *)(*(void *)(v13 + 16) + 40);
  InputPorts = (void *)E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  OutputPorts = (void *)E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  uint64_t v18 = (void *)E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  if (*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v15 + 128))(v15) + 16) != v18[3] + InputPorts[3])
  {
    v48 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Impl");
    std::string::basic_string[abi:ne180100]<0>(&v54, "Input count doesn't match ordered E5 input count.");
    E5RT::Status::Status(&v53, 1, &v54);
    E5RT::E5RTError::E5RTError(v48, &__p, &v53);
  }
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v15 + 160))(&__p, v15);
  uint64_t v19 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
  uint64_t v20 = OutputPorts[3];
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v19 != v20)
  {
    v49 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Impl");
    std::string::basic_string[abi:ne180100]<0>(&v54, "Output count doesn't match ordered E5 output count.");
    E5RT::Status::Status(&v53, 1, &v54);
    E5RT::E5RTError::E5RTError(v49, &__p, &v53);
  }
  if (!*(void *)(a1 + 8))
  {
    v50 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "Impl");
    std::string::basic_string[abi:ne180100]<0>(&v54, "Op params not specified.");
    E5RT::Status::Status(&v53, 1, &v54);
    E5RT::E5RTError::E5RTError(v50, &__p, &v53);
  }
  uint64_t v52 = a1;
  uint64_t v21 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 128))(v15);
  uint64_t v23 = v21 + 1;
  uint64_t v22 = (void *)*v21;
  if ((void *)*v21 != v21 + 1)
  {
    do
    {
      uint64_t v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, (uint64_t)(v22 + 4));
      if (!v24)
      {
        uint64_t v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v18, (uint64_t)(v22 + 4));
        if (!v24) {
          goto LABEL_59;
        }
      }
      v25 = (E5RT::IOPortImpl **)v24[5];
      v26 = (std::__shared_weak_count *)v24[6];
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v25)
      {
LABEL_59:
        v51 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&__p, "Impl");
        std::string::basic_string[abi:ne180100]<0>(&v54, "Input port corresponding to E5 input in ordered list not found.");
        E5RT::Status::Status(&v53, 2, &v54);
        E5RT::E5RTError::E5RTError(v51, &__p, &v53);
      }
      PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef(v25);
      if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(PortDescriptorRef))
      {
        unint64_t v41 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&__p, "Impl");
        std::string::basic_string[abi:ne180100]<0>(&v54, "Surface ports aren't supported with E5MinimalCpu inference yet.");
        E5RT::Status::Status(&v53, 2, &v54);
        E5RT::E5RTError::E5RTError(v41, &__p, &v53);
      }
      if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
        float v28 = (void *)v22[1];
        if (!v28)
        {
          do
          {
LABEL_40:
            float v29 = (void *)v22[2];
            BOOL v30 = *v29 == (void)v22;
            uint64_t v22 = v29;
          }
          while (!v30);
          goto LABEL_27;
        }
      }
      else
      {
        float v28 = (void *)v22[1];
        if (!v28) {
          goto LABEL_40;
        }
      }
      do
      {
        float v29 = v28;
        float v28 = (void *)*v28;
      }
      while (v28);
LABEL_27:
      uint64_t v22 = v29;
    }
    while (v29 != v23);
  }
  uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 40))(v15);
  BOOL v32 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v31 + 88))(v31);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  if (*v32 != v33)
  {
    do
    {
      if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(OutputPorts, v34))
      {
        v42 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&__p, "Impl");
        std::string::basic_string[abi:ne180100]<0>(&v54, "Output port corresponding to E5 output in ordered list not found.");
        E5RT::Status::Status(&v53, 2, &v54);
        E5RT::E5RTError::E5RTError(v42, &__p, &v53);
      }
      v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(OutputPorts, v34);
      if (!v35) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      int8x8_t v36 = (E5RT::IOPortImpl **)v35[5];
      if (!v36)
      {
        v43 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&__p, "Impl");
        std::string::basic_string[abi:ne180100]<0>(&v54, "Invalid output port.");
        E5RT::Status::Status(&v53, 1, &v54);
        E5RT::E5RTError::E5RTError(v43, &__p, &v53);
      }
      unint64_t v37 = (void *)E5RT::IOPort::GetPortDescriptorRef(v36);
      if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v37))
      {
        char v44 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&__p, "Impl");
        std::string::basic_string[abi:ne180100]<0>(&v54, "Output surface ports aren't supported with MPS Graph inference yet.");
        E5RT::Status::Status(&v53, 2, &v54);
        E5RT::E5RTError::E5RTError(v44, &__p, &v53);
      }
      v34 += 24;
    }
    while (v34 != v33);
  }
  uint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)MILProgram + 40))(MILProgram);
  uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 40))(v15);
  E5RT::Ops::E5MinimalCpuOperation::Impl::CreateKernel(v52, v38, v39);
  E5RT::MILProgramUtils::~MILProgramUtils((E5RT::MILProgramUtils *)v59);
  return v52;
}

void sub_19237E4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  E5RT::Status::~Status((E5RT::Status *)&a10);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a32 < 0)
  {
    operator delete(a27);
    if ((v33 & 1) == 0)
    {
LABEL_16:
      if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
      E5RT::MILProgramUtils::~MILProgramUtils((E5RT::MILProgramUtils *)&a33);
      unint64_t v37 = *(std::__shared_weak_count **)(a9 + 32);
      if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
      uint64_t v38 = *(std::__shared_weak_count **)(a9 + 16);
      if (v38)
      {
        if (!atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v33)
  {
    goto LABEL_16;
  }
  __cxa_free_exception(v35);
  goto LABEL_16;
}

void E5RT::Ops::E5MinimalCpuOperation::Impl::CreateKernel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  E5Common::MinimalCpu::MatchAllPatterns(a2, a3, (uint64_t)&v60);
  uint64_t v5 = v60;
  if (v61 - (char *)v60 != 32)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "CreateKernel");
    std::to_string(&v57, (v61 - (char *)v60) >> 5);
    v51 = std::string::insert(&v57, 0, "E5MinimalCpu only allows a single matched pattern, got ");
    long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    E5RT::Status::Status(v56, 2, &v58);
    E5RT::E5RTError::E5RTError(exception, &__p, v56);
  }
  char v6 = (void **)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 56))(a3);
  switch(*(_DWORD *)v5)
  {
    case 0:
      uint64_t v7 = *(void *)(**v6 + 16 * *(void *)(v5[1] + 16));
      *((unsigned char *)&v58.__r_.__value_.__s + 23) = 1;
      LOWORD(v58.__r_.__value_.__l.__data_) = 120;
      uint64_t ArgumentName = MIL::IROperation::GetArgumentName();
      if (*(char *)(ArgumentName + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)ArgumentName, *(void *)(ArgumentName + 8));
      }
      else
      {
        long long v9 = *(_OWORD *)ArgumentName;
        __p.__r_.__value_.__r.__words[2] = *(void *)(ArgumentName + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
      }
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      *((unsigned char *)&v57.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&v57, "input");
      uint64_t v33 = MIL::IROperation::GetArgumentName();
      if (*(char *)(v33 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)v33, *(void *)(v33 + 8));
      }
      else
      {
        long long v34 = *(_OWORD *)v33;
        v58.__r_.__value_.__r.__words[2] = *(void *)(v33 + 16);
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v34;
      }
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
      v35 = (MIL::IRNamedValueType ***)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 176))(v7);
      uint64_t Name = MIL::IRNamedValueType::GetName(**v35);
      if (*(char *)(Name + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)Name, *(void *)(Name + 8));
      }
      else
      {
        long long v37 = *(_OWORD *)Name;
        v57.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v37;
      }
      v56[23] = 1;
      strcpy(v56, "x");
      ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
      uint64_t v39 = MIL::IRValueType::AsTensorType(ParameterType);
      unint64_t v40 = (MIL::IRDimension ***)(*(uint64_t (**)(uint64_t))(*(void *)v39 + 96))(v39);
      uint64_t v41 = MIL::IRDimension::AsConstant(**v40);
      uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 48))(v41);
      v56[23] = 16;
      strcpy(v56, "validate_indices");
      MIL::IROperation::GetParameterValue();
      uint64_t v43 = MIL::IRValue::GetScalar<BOOL>();
      char v44 = operator new(0xB0uLL);
      v44[1] = 0;
      v44[2] = 0;
      *char v44 = &unk_1EE380E00;
      uint64_t v45 = E5RT::Ops::E5MinimalCpu::InterleavedTransposeGatherNdKernel::InterleavedTransposeGatherNdKernel(v44 + 3, &__p, &v58, &v57, v42, v43);
      v46 = *(std::__shared_weak_count **)(a1 + 32);
      *(void *)(a1 + 24) = v45;
      *(void *)(a1 + 32) = v44;
      if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
        if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_47:
          if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_48;
          }
          goto LABEL_52;
        }
      }
      else if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_47;
      }
      operator delete(v57.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_48:
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_56;
        }
        goto LABEL_53;
      }
LABEL_52:
      operator delete(v58.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_56;
      }
LABEL_53:
      operator delete(__p.__r_.__value_.__l.__data_);
      uint64_t v31 = (char *)v60;
      if (v60)
      {
LABEL_57:
        long long v47 = v61;
        v48 = v31;
        if (v61 != v31)
        {
          do
          {
            v49 = (void *)*((void *)v47 - 3);
            if (v49)
            {
              *((void *)v47 - 2) = v49;
              operator delete(v49);
            }
            v47 -= 32;
          }
          while (v47 != v31);
          v48 = (char *)v60;
        }
        v61 = v31;
        operator delete(v48);
      }
      return;
    case 1:
      unint64_t v10 = operator new(0x60uLL);
      v10[1] = 0;
      v10[2] = 0;
      *unint64_t v10 = &unk_1EE300F68;
      E5RT::Ops::E5MinimalCpu::ReadStateKernel::ReadStateKernel((E5RT::Ops::E5MinimalCpu::ReadStateKernel *)(v10 + 3));
      goto LABEL_29;
    case 2:
      unint64_t v10 = operator new(0x60uLL);
      v10[1] = 0;
      v10[2] = 0;
      *unint64_t v10 = &unk_1EE300FA0;
      E5RT::Ops::E5MinimalCpu::WriteStateKernel::WriteStateKernel((E5RT::Ops::E5MinimalCpu::WriteStateKernel *)(v10 + 3));
LABEL_29:
      BOOL v32 = *(std::__shared_weak_count **)(a1 + 32);
      *(void *)(a1 + 24) = v11;
      *(void *)(a1 + 32) = v10;
      if (!v32 || atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_56;
      }
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      uint64_t v31 = (char *)v60;
      if (!v60) {
        return;
      }
      goto LABEL_57;
    case 3:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 5;
      strcpy((char *)&__p, "input");
      ArgumentValue = (MIL::IRValue *)MIL::IROperation::GetArgumentValue();
      uint64_t v13 = MIL::IRValue::AsTensor(ArgumentValue);
      uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 88))(v13);
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&__p, "path");
      uint64_t v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v14, (uint64_t)&__p);
      if (!v15) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      unint64_t v17 = (MIL::IRValue *)v15[5];
      std::string::size_type v16 = v15[6];
      v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
      v58.__r_.__value_.__l.__size_ = v16;
      if (v16) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 6;
      strcpy((char *)&__p, "offset");
      uint64_t v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v14, (uint64_t)&__p);
      if (!v18) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v20 = (MIL::IRValue *)v18[5];
      std::string::size_type v19 = v18[6];
      v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
      v57.__r_.__value_.__l.__size_ = v19;
      if (v19) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      MIL::IRValue::AsTensor(v17);
      MIL::IRValue::GetScalar<std::string>();
      MIL::IRValue::AsTensor(v20);
      uint64_t v21 = MIL::IRValue::GetScalar<unsigned long long>();
      uint64_t v22 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::IRValue *))(*(void *)ArgumentValue + 32))(ArgumentValue);
      uint64_t v23 = MIL::IRValueType::AsTensorType(v22);
      uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 88))(v23);
      v25 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 88))(a3);
      uint64_t v26 = *v25;
      if (v25[1] == *v25) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v27 = operator new(0x98uLL);
      v27[1] = 0;
      v27[2] = 0;
      *uint64_t v27 = &unk_1EE2FCEF8;
      uint64_t v28 = E5RT::Ops::E5MinimalCpu::TensorToTensorBufferLoadingWeightsKernel::TensorToTensorBufferLoadingWeightsKernel(v27 + 3, &__p, v21, v24, v26);
      float v29 = *(std::__shared_weak_count **)(a1 + 32);
      *(void *)(a1 + 24) = v28;
      *(void *)(a1 + 32) = v27;
      if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v57.__r_.__value_.__l.__size_
        && !atomic_fetch_add((atomic_ullong *volatile)(v57.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(std::string::size_type))(*(void *)v57.__r_.__value_.__l.__size_ + 16))(v57.__r_.__value_.__l.__size_);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v57.__r_.__value_.__l.__size_);
        size = (std::__shared_weak_count *)v58.__r_.__value_.__l.__size_;
        if (!v58.__r_.__value_.__l.__size_) {
          goto LABEL_56;
        }
      }
      else
      {
        size = (std::__shared_weak_count *)v58.__r_.__value_.__l.__size_;
        if (!v58.__r_.__value_.__l.__size_) {
          goto LABEL_56;
        }
      }
      if (!atomic_fetch_add(&size->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
        uint64_t v31 = (char *)v60;
        if (v60) {
          goto LABEL_57;
        }
        return;
      }
LABEL_56:
      uint64_t v31 = (char *)v60;
      if (!v60) {
        return;
      }
      goto LABEL_57;
    default:
      std::string v53 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&__p, "CreateKernel");
      std::to_string(&v57, *(_DWORD *)v5);
      long long v54 = std::string::insert(&v57, 0, "Pattern not recognized: ");
      long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      v58.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v55;
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      E5RT::Status::Status(v56, 2, &v58);
      E5RT::E5RTError::E5RTError(v53, &__p, v56);
  }
}

void sub_19237F1C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  E5RT::Status::~Status((E5RT::Status *)&a9);
  if (a28 < 0)
  {
    operator delete(a23);
    if (a21 < 0)
    {
LABEL_3:
      operator delete(__p);
      if ((a35 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if (a21 < 0)
  {
    goto LABEL_3;
  }
  if ((a35 & 0x80000000) == 0)
  {
LABEL_4:
    if (!v36)
    {
LABEL_10:
      std::vector<E5Common::MinimalCpu::Match>::~vector[abi:ne180100]((void **)(v37 - 72));
      _Unwind_Resume(a1);
    }
LABEL_9:
    __cxa_free_exception(v35);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(a30);
  if ((v36 & 1) == 0) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void **std::vector<E5Common::MinimalCpu::Match>::~vector[abi:ne180100](void **a1)
{
  v2 = (char *)*a1;
  if (*a1)
  {
    unint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 3);
        if (v5)
        {
          *((void *)v3 - 2) = v5;
          operator delete(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void E5RT::Ops::E5MinimalCpuOperation::Impl::ReshapeOperationInternal(E5RT::ExecutionStreamOperationInternal **a1, uint64_t a2)
{
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*a1) == 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v34, "ReshapeOperationInternal");
    std::string::basic_string[abi:ne180100]<0>(&v37, "Cannot reshape an op that is Encoded to a stream on E5MinimalCPU.");
    E5RT::Status::Status(v32, 2, &v37);
    E5RT::E5RTError::E5RTError(exception, v34, v32);
  }
  uint64_t InputPorts = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*a1);
  uint64_t v5 = E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*a1);
  *(_OWORD *)long long v34 = 0u;
  *(_OWORD *)std::string __p = 0u;
  int v36 = 1065353216;
  for (i = *(void **)(InputPorts + 16); i; i = (void *)*i)
  {
    uint64_t v37 = (E5RT::OperandDescriptor *)(i + 2);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v34, (uint64_t)(i + 2), (uint64_t)&std::piecewise_construct, (long long **)&v37);
    uint64_t v9 = i[5];
    uint64_t v8 = i[6];
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v10 = (std::__shared_weak_count *)v7[6];
    v7[5] = v9;
    v7[6] = v8;
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  for (j = *(void **)(v5 + 16); j; j = (void *)*j)
  {
    uint64_t v37 = (E5RT::OperandDescriptor *)(j + 2);
    uint8x8_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v34, (uint64_t)(j + 2), (uint64_t)&std::piecewise_construct, (long long **)&v37);
    uint64_t v14 = j[5];
    uint64_t v13 = j[6];
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = (std::__shared_weak_count *)v12[6];
    v12[5] = v14;
    v12[6] = v13;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  std::string::size_type v16 = (uint64_t **)(a2 + 16);
  while (1)
  {
    std::string::size_type v16 = (uint64_t **)*v16;
    if (!v16) {
      break;
    }
    unint64_t v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v34, (uint64_t)(v16 + 2));
    uint64_t v18 = v17;
    if (!v17)
    {
      uint64_t v28 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v37, "ReshapeOperationInternal");
      std::string::basic_string[abi:ne180100]<0>(v32, "Unknown operand name given for reshaping on E5MinimalCPU.");
      E5RT::Status::Status(v33, 2, v32);
      E5RT::E5RTError::E5RTError(v28, &v37, v33);
    }
    PortDescriptorRef = (void *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v17[5]);
    if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(PortDescriptorRef))
    {
      float v29 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v37, "ReshapeOperationInternal");
      std::string::basic_string[abi:ne180100]<0>(v32, "E5MinimalCPU op cannot reshape a surface descriptor.");
      E5RT::Status::Status(v33, 2, v32);
      E5RT::E5RTError::E5RTError(v29, &v37, v33);
    }
    if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v16[5]))
    {
      BOOL v30 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v37, "ReshapeOperationInternal");
      std::string::basic_string[abi:ne180100]<0>(v32, "Unsupported surface descriptor given for reshaping on E5MinimalCPU.");
      E5RT::Status::Status(v33, 2, v32);
      E5RT::E5RTError::E5RTError(v30, &v37, v33);
    }
    E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)v18[5], &v37);
    uint64_t v20 = E5RT::OperandDescriptor::TensorDescriptor(v37);
    uint64_t v21 = v38;
    if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    uint64_t v22 = E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)v16[5]);
    if (E5RT::operator!=((uint64_t)v20, (uint64_t)v22))
    {
      uint64_t v23 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v37, "ReshapeOperationInternal");
      std::string::basic_string[abi:ne180100]<0>(v32, "E5MinimalCPU cannot reshape a tensor. The operand shapes should be static.");
      E5RT::Status::Status(v33, 2, v32);
      E5RT::E5RTError::E5RTError(v23, &v37, v33);
    }
  }
  uint64_t v24 = (void **)__p[0];
  if (__p[0])
  {
    do
    {
      while (1)
      {
        v25 = (void **)*v24;
        uint64_t v26 = (std::__shared_weak_count *)v24[6];
        if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
        if (*((char *)v24 + 39) < 0) {
          break;
        }
        operator delete(v24);
        uint64_t v24 = v25;
        if (!v25) {
          goto LABEL_36;
        }
      }
      operator delete(v24[2]);
      operator delete(v24);
      uint64_t v24 = v25;
    }
    while (v25);
  }
LABEL_36:
  uint64_t v27 = v34[0];
  v34[0] = 0;
  if (v27) {
    operator delete(v27);
  }
}

void sub_19237FA7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0)
  {
    operator delete(a21);
    if ((v27 & 1) == 0)
    {
LABEL_8:
      float v29 = a18;
      if (a18)
      {
        do
        {
          while (1)
          {
            BOOL v30 = (void **)*v29;
            uint64_t v31 = (std::__shared_weak_count *)v29[6];
            if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
            if (*((char *)v29 + 39) < 0) {
              break;
            }
            operator delete(v29);
            float v29 = v30;
            if (!v30) {
              goto LABEL_16;
            }
          }
          operator delete(v29[2]);
          operator delete(v29);
          float v29 = v30;
        }
        while (v30);
      }
LABEL_16:
      BOOL v32 = a16;
      a16 = 0;
      if (v32) {
        operator delete(v32);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void E5RT::Ops::E5MinimalCpuOperation::E5MinimalCpuOperation(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v6 = (void *)E5RT::ExecutionStreamOperationInternal::ExecutionStreamOperationInternal(a1, a2, a4, a5, a6);
  *char v6 = &unk_1EE326420;
  v6[37] = 0;
  operator new();
}

void sub_19237FE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x192FF16B0](v11, 0x60C40F1115F62);
  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::E5MinimalCpuOperation::Impl>>::~propagate_const(v10);
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(v9);
  _Unwind_Resume(a1);
}

void sub_19237FE88(_Unwind_Exception *a1)
{
  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::E5MinimalCpuOperation::Impl>>::~propagate_const(v2);
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::E5MinimalCpuOperation::Impl>>::~propagate_const(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    unint64_t v3 = *(std::__shared_weak_count **)(v2 + 32);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    MEMORY[0x192FF16B0](v2, 0x60C40F1115F62);
  }
  return a1;
}

void E5RT::Ops::E5MinimalCpuOperation::~E5MinimalCpuOperation(E5RT::Ops::E5MinimalCpuOperation *this)
{
  *(void *)this = &unk_1EE326420;
  uint64_t v2 = *((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v2)
  {
    unint64_t v3 = *(std::__shared_weak_count **)(v2 + 32);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    MEMORY[0x192FF16B0](v2, 0x60C40F1115F62);
  }

  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(this);
}

{
  uint64_t vars8;

  E5RT::Ops::E5MinimalCpuOperation::~E5MinimalCpuOperation(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t E5RT::Ops::E5MinimalCpuOperation::GetOpCode(E5RT::Ops::E5MinimalCpuOperation *this)
{
  return 8;
}

uint64_t E5RT::Ops::E5MinimalCpuOperation::EncodeOperation(E5RT::Ops::E5MinimalCpuOperation *this, const E5RT::ExecutionStreamConfigOptions *a2, uint64_t a3)
{
  return kdebug_trace();
}

void sub_192380174(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::E5MinimalCpuOperation::ExecuteSync(E5RT::Ops::E5MinimalCpuOperation *this)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(this);
  E5RT::ExecutionStreamOperationInternal::GetStreamId(this);
  kdebug_trace();
  uint64_t v2 = *((void *)this + 37);
  uint64_t v3 = *(void *)(v2 + 24);
  uint64_t InputPorts = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)v2);
  uint64_t OutputPorts = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)v2);
  uint64_t v6 = E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v3 + 16))(v3, InputPorts, OutputPorts, v6);
  return kdebug_trace();
}

void sub_192380274(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::E5MinimalCpuOperation::ReshapeOperationInternal(E5RT::ExecutionStreamOperationInternal ***a1, uint64_t a2)
{
  return kdebug_trace();
}

void sub_192380314(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::E5MinimalCpuOperation::PrepareOpForEncode(E5RT::Ops::E5MinimalCpuOperation *this)
{
  return kdebug_trace();
}

void sub_1923803AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<E5RT::Ops::E5MinimalCpu::InterleavedTransposeGatherNdKernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380E00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::Ops::E5MinimalCpu::InterleavedTransposeGatherNdKernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380E00;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<E5RT::Ops::E5MinimalCpu::InterleavedTransposeGatherNdKernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<E5RT::Ops::E5MinimalCpu::WriteStateKernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE300FA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::Ops::E5MinimalCpu::WriteStateKernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE300FA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<E5RT::Ops::E5MinimalCpu::WriteStateKernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<E5RT::Ops::E5MinimalCpu::ReadStateKernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE300F68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::Ops::E5MinimalCpu::ReadStateKernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE300F68;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<E5RT::Ops::E5MinimalCpu::ReadStateKernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<E5RT::Ops::E5MinimalCpu::TensorToTensorBufferLoadingWeightsKernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2FCEF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::Ops::E5MinimalCpu::TensorToTensorBufferLoadingWeightsKernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2FCEF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<E5RT::Ops::E5MinimalCpu::TensorToTensorBufferLoadingWeightsKernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void E5RT::ProgramFunctionPriv::GetExternInputPorts(E5RT::ProgramFunctionPriv *this)
{
  exception = __cxa_allocate_exception(0x18uLL);
  v5[23] = 19;
  strcpy(v5, "GetExternInputPorts");
  uint64_t v2 = (char *)operator new(0x68uLL);
  long long v3 = xmmword_192DB54F0;
  strcpy(v2, "ProgramFunction GetExternInputPorts() is no longer supported. Switch to ExecutionStreamOperation.");
  E5RT::Status::Status(v4, 2, &v2);
  E5RT::E5RTError::E5RTError(exception, v5, v4);
}

void sub_192380708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v22 & 1) == 0) {
      goto LABEL_5;
    }
  }
  else if (!v22)
  {
LABEL_5:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v21);
  _Unwind_Resume(a1);
}

void sub_192380768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v18);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192380758);
}

void E5RT::ProgramFunctionPriv::GetExternOutputPorts(E5RT::ProgramFunctionPriv *this)
{
  exception = __cxa_allocate_exception(0x18uLL);
  v5[23] = 20;
  strcpy(v5, "GetExternOutputPorts");
  uint64_t v2 = (char *)operator new(0x68uLL);
  long long v3 = xmmword_192DB5500;
  strcpy(v2, "ProgramFunction GetExternOutputPorts() is no longer supported. Switch to ExecutionStreamOperation.");
  E5RT::Status::Status(v4, 2, &v2);
  E5RT::E5RTError::E5RTError(exception, v5, v4);
}

void sub_192380868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v22 & 1) == 0) {
      goto LABEL_5;
    }
  }
  else if (!v22)
  {
LABEL_5:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v21);
  _Unwind_Resume(a1);
}

void sub_1923808C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v18);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1923808B8);
}

uint64_t E5RT::ProgramFunctionPriv::GetFunctionName(E5RT::ProgramFunctionPriv *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 16))();
}

void E5RT::ProgramFunctionPriv::LoadForExecution(E5RT::ProgramFunctionPriv *this)
{
  exception = __cxa_allocate_exception(0x18uLL);
  v5[23] = 16;
  strcpy(v5, "LoadForExecution");
  uint64_t v2 = (char *)operator new(0x60uLL);
  long long v3 = xmmword_192DB5510;
  strcpy(v2, "ProgramFunction LoadForExecution() is no longer supported. Switch to ExecutionStreamOperation.");
  E5RT::Status::Status(v4, 2, &v2);
  E5RT::E5RTError::E5RTError(exception, v5, v4);
}

void sub_1923809E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v22 & 1) == 0) {
      goto LABEL_5;
    }
  }
  else if (!v22)
  {
LABEL_5:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v21);
  _Unwind_Resume(a1);
}

void sub_192380A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v18);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192380A34);
}

uint64_t E5RT::ProgramFunctionPriv::GetInputPortDescriptors(E5RT::ProgramFunctionPriv *this)
{
  return (uint64_t)this + 24;
}

uint64_t E5RT::ProgramFunctionPriv::GetOutputPortDescriptors(E5RT::ProgramFunctionPriv *this)
{
  return (uint64_t)this + 64;
}

uint64_t E5RT::ProgramFunctionPriv::GetInOutPortDescriptors(E5RT::ProgramFunctionPriv *this)
{
  return (uint64_t)this + 104;
}

void E5RT::ProgramFunctionPriv::GetMutableWeightSymbolNames(E5RT::ProgramFunctionPriv *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  long long v3 = (void **)(*(uint64_t (**)(void))(**((void **)this + 1) + 32))(*((void *)this + 1));
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)**v3 + 16))(**v3);
  uint64_t v5 = *(const void ***)v4;
  uint64_t v6 = *(const void ***)(v4 + 8);
  if (*(const void ***)v4 != v6)
  {
    do
    {
      if ((*(unsigned int (**)(void))(*(void *)*v5 + 16))() == 1)
      {
        E5RT::E5Operation::GetOperationAttributes<AneInferenceOpT>(*v5, &v13);
        uint64_t v8 = v13;
        uint64_t v7 = v14;
        if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
          uint64_t v9 = *(void *)(v8 + 56);
          uint64_t v10 = *(void *)(v8 + 64);
          if (v9 != v10)
          {
LABEL_8:
            uint64_t v11 = *(std::string **)(a2 + 8);
            do
            {
              while ((unint64_t)v11 >= *(void *)(a2 + 16))
              {
                uint64_t v11 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a2, v9);
                *(void *)(a2 + 8) = v11;
                v9 += 24;
                if (v9 == v10) {
                  goto LABEL_3;
                }
              }
              if (*(char *)(v9 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)v9, *(void *)(v9 + 8));
              }
              else
              {
                long long v12 = *(_OWORD *)v9;
                v11->__r_.__value_.__r.__words[2] = *(void *)(v9 + 16);
                *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
              }
              *(void *)(a2 + 8) = ++v11;
              *(void *)(a2 + 8) = v11;
              v9 += 24;
            }
            while (v9 != v10);
          }
        }
        else
        {
          uint64_t v9 = *(void *)(v8 + 56);
          uint64_t v10 = *(void *)(v8 + 64);
          if (v9 != v10) {
            goto LABEL_8;
          }
        }
      }
LABEL_3:
      v5 += 2;
    }
    while (v5 != v6);
  }
}

void sub_192380C90(_Unwind_Exception *a1)
{
  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_192380CA4(_Unwind_Exception *a1)
{
  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_192380CB8(_Unwind_Exception *a1)
{
  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_192380CCC(_Unwind_Exception *a1)
{
  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_192380CE0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  std::vector<std::string>::~vector[abi:ne180100]((void **)v1);
  _Unwind_Resume(a1);
}

void sub_192380CF8(_Unwind_Exception *a1)
{
  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *E5RT::ComputeGPUDevice::ComputeGPUDevice(void *a1, uint64_t *a2)
{
  result = E5RT::ComputeDevice::ComputeDevice(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  void *result = &unk_1EE325888;
  result[1] = v4;
  return result;
}

{
  void *result;
  uint64_t v4;

  result = E5RT::ComputeDevice::ComputeDevice(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  void *result = &unk_1EE325888;
  result[1] = v4;
  return result;
}

void E5RT::ComputeGPUDevice::~ComputeGPUDevice(E5RT::ComputeGPUDevice *this)
{
  uint64_t v2 = (id *)*((void *)this + 1);
  *(void *)this = &unk_1EE325888;
  *((void *)this + 1) = 0;
  if (v2)
  {

    MEMORY[0x192FF16B0](v2, 0x80C40B8603338);
  }

  E5RT::ComputeDevice::~ComputeDevice(this);
}

{
  id *v2;
  uint64_t vars8;

  uint64_t v2 = (id *)*((void *)this + 1);
  *(void *)this = &unk_1EE325888;
  *((void *)this + 1) = 0;
  if (v2)
  {

    MEMORY[0x192FF16B0](v2, 0x80C40B8603338);
  }

  E5RT::ComputeDevice::~ComputeDevice(this);
}

{
  id *v2;
  uint64_t vars8;

  uint64_t v2 = (id *)*((void *)this + 1);
  *(void *)this = &unk_1EE325888;
  *((void *)this + 1) = 0;
  if (v2)
  {

    MEMORY[0x192FF16B0](v2, 0x80C40B8603338);
  }
  E5RT::ComputeDevice::~ComputeDevice(this);

  JUMPOUT(0x192FF16B0);
}

id E5RT::ComputeGPUDevice::GetMTLDevice(id **this)
{
  return *this[1];
}

uint64_t E5RT::ComputeGPUDevice::GetAllAvailableComputeGPUDevices(E5RT::ComputeGPUDevice *this)
{
  if (qword_1E9301C38 != -1) {
    dispatch_once(&qword_1E9301C38, &unk_1EE397678);
  }
  return qword_1E9301C30;
}

void sub_192380FB0()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1923812C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id **std::unique_ptr<E5RT::ComputeGPUDeviceImpl>::~unique_ptr[abi:ne180100](id **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {

    MEMORY[0x192FF16B0](v2, 0x80C40B8603338);
  }
  return a1;
}

uint64_t E5RT::ComputeGPUDevice::GetComputeGPUDeviceForMTLDevice(void *a1)
{
  id v1 = a1;
  if (qword_1E9301C38 == -1)
  {
    uint64_t v2 = *(uint64_t **)qword_1E9301C30;
    long long v3 = *(uint64_t **)(qword_1E9301C30 + 8);
    if (*(uint64_t **)qword_1E9301C30 != v3) {
      goto LABEL_3;
    }
LABEL_5:
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "GetComputeGPUDeviceForMTLDevice");
    std::string::basic_string[abi:ne180100]<0>(v7, "Unable to find ComputeGPUDevice for given MTLDevice");
    E5RT::Status::Status(v8, 1, v7);
    E5RT::E5RTError::E5RTError(exception, v9, v8);
  }
  dispatch_once(&qword_1E9301C38, &unk_1EE397678);
  uint64_t v2 = *(uint64_t **)qword_1E9301C30;
  long long v3 = *(uint64_t **)(qword_1E9301C30 + 8);
  if (*(uint64_t **)qword_1E9301C30 == v3) {
    goto LABEL_5;
  }
LABEL_3:
  while (1)
  {
    uint64_t v4 = *v2;
    if (**(id **)(*v2 + 8) == v1) {
      break;
    }
    if (++v2 == v3) {
      goto LABEL_5;
    }
  }

  return v4;
}

void sub_1923814B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v24 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

uint64_t E5RT::ProgramLibraryImpl::ProgramLibraryImpl(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  *(void *)a1 = v3;
  *(_DWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  E5RT::ProgramLibraryImpl::InitializeProgramLibrary((E5RT::ProgramLibraryImpl *)a1);
  return a1;
}

void sub_192381598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10, char a11, char a12, int a13)
{
  if (*(char *)(v13 + 87) < 0) {
    operator delete(*v14);
  }
  if (!sub_192382134()) {
    ((void (*)(char *, uint64_t))off_1EE397698[a13])(&a12, v13);
  }
  *(_DWORD *)(v13 + 16) = -1;
  _Unwind_Resume(a1);
}

__CFDictionary *E5RT::ProgramLibraryImpl::GetBuildInfo(E5RT::ProgramLibraryImpl *this)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v17, "GetBuildInfo");
    std::string::basic_string[abi:ne180100]<0>(v15, "Error allocating function build info dictionary.");
    E5RT::Status::Status(v16, 3, v15);
    E5RT::E5RTError::E5RTError(exception, &v17, v16);
  }
  uint64_t v4 = Mutable;
  if (this)
  {
    int v5 = *((_DWORD *)this + 4);
    if (!v5)
    {
      uint64_t v6 = *(void *)this;
      goto LABEL_8;
    }
  }
  else
  {
    int v5 = MEMORY[0x10];
  }
  if (v5 != 1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v6 = E5RT::SharedResource::GetResourceHandle<E5RT::E5Program &>(*(const void **)this);
LABEL_8:
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 48))(&v17);
  if (v17)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 16))(v17) + 16;
    while (1)
    {
      uint64_t v7 = *(void *)v7;
      if (!v7) {
        break;
      }
      uint64_t v8 = (const char *)(v7 + 16);
      if (*(char *)(v7 + 39) < 0) {
        uint64_t v8 = *(const char **)v8;
      }
      CFStringRef v9 = CFStringCreateWithCString(v2, v8, 0x8000100u);
      uint64_t v10 = (const char *)(v7 + 40);
      if (*(char *)(v7 + 63) < 0) {
        uint64_t v10 = *(const char **)v10;
      }
      CFStringRef v11 = CFStringCreateWithCString(v2, v10, 0x8000100u);
      CFDictionarySetValue(v4, v9, v11);
      CFRelease(v9);
      CFRelease(v11);
    }
  }
  long long v12 = v18;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return v4;
}

void sub_19238181C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192381830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192381844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if (v23)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

__CFDictionary *E5RT::ProgramLibraryImpl::GetSegmentationAnalytics(E5RT::ProgramLibraryImpl *this)
{
  if (this)
  {
    int v1 = *((_DWORD *)this + 4);
    if (!v1)
    {
      uint64_t v2 = *(void *)this;
      goto LABEL_7;
    }
  }
  else
  {
    int v1 = MEMORY[0x10];
  }
  if (v1 != 1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v2 = E5RT::SharedResource::GetResourceHandle<E5RT::E5Program &>(*(const void **)this);
LABEL_7:
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2);
  memset(&v10, 0, sizeof(v10));
  uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
  if ((v4 & 0x80u) == 0) {
    int v5 = (std::string *)v3;
  }
  else {
    int v5 = *(std::string **)v3;
  }
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(v3 + 8);
  }
  std::string::append[abi:ne180100]<char const*,0>(&v10, v5, (std::string *)((char *)v5 + v4));
  memset(&__p, 0, sizeof(__p));
  std::string::append[abi:ne180100]<char const*,0>(&__p, (std::string *)"analytics.mil", (std::string *)"");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)&v10, &v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_14;
    }
  }
  else if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete(v10.__r_.__value_.__l.__data_);
LABEL_14:
  result = E5RT::ParseSegmentationAnalytics(&v11, v6);
  uint64_t v8 = result;
  if (SHIBYTE(v11.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v11.__pn_.__r_.__value_.__l.__data_);
    return v8;
  }
  return result;
}

void sub_192381A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::ProgramLibraryImpl::GetFunctionRef(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>((void *)(a1 + 24), a2);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v7, "GetFunctionRef");
    std::string::basic_string[abi:ne180100]<0>(v5, "Provided function name does not exist in program library.");
    E5RT::Status::Status(v6, 1, v5);
    E5RT::E5RTError::E5RTError(exception, v7, v6);
  }
  return v2[5];
}

void sub_192381B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *E5RT::ProgramLibrary::ProgramLibrary(void *this)
{
  *this = &unk_1EE324BC0;
  this[1] = 0;
  return this;
}

{
  *this = &unk_1EE324BC0;
  this[1] = 0;
  return this;
}

void *E5RT::ProgramLibrary::ProgramLibrary(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  __CFDictionary *result = &unk_1EE324BC0;
  result[1] = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  __CFDictionary *result = &unk_1EE324BC0;
  result[1] = v2;
  return result;
}

void E5RT::ProgramLibrary::~ProgramLibrary(E5RT::ProgramLibrary *this)
{
  uint64_t v2 = (void **)*((void *)this + 1);
  *(void *)this = &unk_1EE324BC0;
  *((void *)this + 1) = 0;
  if (v2)
  {
    E5RT::ProgramLibraryImpl::~ProgramLibraryImpl(v2);
    MEMORY[0x192FF16B0]();
  }
}

{
  void **v2;

  uint64_t v2 = (void **)*((void *)this + 1);
  *(void *)this = &unk_1EE324BC0;
  *((void *)this + 1) = 0;
  if (v2)
  {
    E5RT::ProgramLibraryImpl::~ProgramLibraryImpl(v2);
    MEMORY[0x192FF16B0]();
  }
}

{
  void **v2;
  uint64_t vars8;

  uint64_t v2 = (void **)*((void *)this + 1);
  *(void *)this = &unk_1EE324BC0;
  *((void *)this + 1) = 0;
  if (v2)
  {
    E5RT::ProgramLibraryImpl::~ProgramLibraryImpl(v2);
    MEMORY[0x192FF16B0]();
  }

  JUMPOUT(0x192FF16B0);
}

__CFDictionary *E5RT::ProgramLibrary::GetBuildInfo(E5RT::ProgramLibraryImpl **this)
{
  return E5RT::ProgramLibraryImpl::GetBuildInfo(this[1]);
}

uint64_t E5RT::ProgramLibrary::GetFunctionRef(uint64_t a1, uint64_t a2)
{
  return E5RT::ProgramLibraryImpl::GetFunctionRef(*(void *)(a1 + 8), a2);
}

{
  return E5RT::ProgramLibraryImpl::GetFunctionRef(*(void *)(a1 + 8), a2);
}

__CFDictionary *E5RT::ProgramLibrary::GetSegmentationAnalytics(E5RT::ProgramLibraryImpl **this)
{
  return E5RT::ProgramLibraryImpl::GetSegmentationAnalytics(this[1]);
}

void sub_192381E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_1923821F0(a10);
  }
  MEMORY[0x192FF16B0](v11, 0x10F2C401C59B653);
  E5RT::ProgramLibrary::~ProgramLibrary(v10);
  _Unwind_Resume(a1);
}

void sub_192381E88(_Unwind_Exception *a1)
{
  E5RT::ProgramLibrary::~ProgramLibrary(v1);
  _Unwind_Resume(a1);
}

uint64_t E5RT_Private::GetE5BundlePathFromProgramLibrary(E5RT_Private *this, const E5RT::ProgramLibrary *a2)
{
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v7, "GetE5BundlePathFromProgramLibrary");
    std::string::basic_string[abi:ne180100]<0>(v5, "Invalid program library pointer provided.");
    E5RT::Status::Status(v6, 2, v5);
    E5RT::E5RTError::E5RTError(exception, v7, v6);
  }
  return v2[1] + 64;
}

void sub_192381FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIKN4E5RT9E5ProgramENS_14default_deleteISB_EEEENS_10shared_ptrINS9_14SharedResourceEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSE_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_emplace<E5RT::ProgramFunctionPriv>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380DC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::ProgramFunctionPriv>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380DC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

BOOL sub_19238210C()
{
  int v2 = *v1;
  *uint64_t v0 = *v1;
  return v2 == -1;
}

BOOL sub_192382134()
{
  sub_192382120();
  if (v1)
  {
    do
    {
      int v2 = *(char **)v1;
      uint64_t v3 = (std::__shared_weak_count *)*((void *)v1 + 6);
      if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
      if (v1[39] < 0) {
        operator delete(*((void **)v1 + 2));
      }
      operator delete(v1);
      int v1 = v2;
    }
    while (v2);
  }
  uint64_t v4 = *v0;
  *uint64_t v0 = 0;
  if (v4) {
    operator delete(v4);
  }
  return sub_19238210C();
}

uint64_t sub_1923821F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

void std::__shared_ptr_emplace<cxxopts::OptionDetails>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::string&,std::shared_ptr<cxxopts::Value const> &,std::allocator<cxxopts::OptionDetails>,0>(std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void E5RT::OnDeviceAOTCompilerInterface::~OnDeviceAOTCompilerInterface(void **this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t std::variant<BOOL,int,float,std::string>::~variant[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1EE3976A8[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

uint64_t E5RT::SharedResourcePriv<_ANEModel * {__strong}>::~SharedResourcePriv(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1EE325BB0;
  uint64_t v2 = [MEMORY[0x1E4F1CA60] dictionary];
  uint64_t v3 = [*(id *)(a1 + 32) modelURL];
  char v4 = [v3 path];

  uint64_t v5 = [*(id *)(a1 + 32) programHandle];
  uint64_t v6 = [MEMORY[0x1E4F4E030] sharedConnection];
  char v7 = [v6 unloadModel:*(void *)(a1 + 32) options:v2 qos:21 error:0];

  if ((v7 & 1) == 0)
  {
    char v18 = 4;
    strcpy(__p, "e5rt");
    uint64_t v8 = E5RT::GetE5RTLog((uint64_t)__p);
    if (v18 < 0) {
      operator delete(*(void **)__p);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_192383D50([v4 UTF8String], v14, v8);
    }
  }
  char v18 = 4;
  strcpy(__p, "e5rt");
  CFStringRef v9 = E5RT::GetE5RTLog((uint64_t)__p);
  std::string v10 = v9;
  if (v18 < 0)
  {
    operator delete(*(void **)__p);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO)) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
LABEL_11:
    uint64_t v11 = [v4 UTF8String];
    *(_DWORD *)std::string __p = 136315394;
    *(void *)&__p[4] = v11;
    __int16 v16 = 2048;
    uint64_t v17 = v5;
    _os_log_impl(&dword_1920CB000, v10, OS_LOG_TYPE_INFO, "Unloaded ANE Model at path = %s with programHandle = 0x%llx\n", __p, 0x16u);
  }
LABEL_12:

  long long v12 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_192382558(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void E5RT::SharedResourcePriv<_ANEModel * {__strong}>::~SharedResourcePriv(uint64_t a1)
{
  E5RT::SharedResourcePriv<_ANEModel * {__strong}>::~SharedResourcePriv(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t E5RT::SharedResourcePriv<ANEProgramInstanceStruct &>::~SharedResourcePriv(uint64_t a1)
{
  *(void *)a1 = &unk_1EE325B10;
  AneDeviceManager = (int8x8_t *)E5RT::AneDeviceManager::GetAneDeviceManager((E5RT::AneDeviceManager *)a1);
  E5RT::AneDeviceManager::GetAneDevice(AneDeviceManager, 0, 0, (int8x8_t *)&v5);
  (*(void (**)(void *, void))(*v5 + 40))(v5, *(void *)(a1 + 32));
  uint64_t v3 = v6;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void E5RT::SharedResourcePriv<ANEProgramInstanceStruct &>::~SharedResourcePriv(uint64_t a1)
{
  E5RT::SharedResourcePriv<ANEProgramInstanceStruct &>::~SharedResourcePriv(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t E5RT::SharedResourcePriv<E5Common::AutoResourcePtr &>::~SharedResourcePriv(uint64_t a1)
{
  *(void *)a1 = &unk_1EE325B38;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void E5RT::SharedResourcePriv<E5Common::AutoResourcePtr &>::~SharedResourcePriv(uint64_t a1)
{
  *(void *)a1 = &unk_1EE325B38;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x192FF16B0);
}

void E5RT::SharedResourcePriv<E5RT::E5Program &>::~SharedResourcePriv(uint64_t a1)
{
  *(void *)a1 = &unk_1EE325B60;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t E5RT::SharedResourcePriv<MPSGraphExecutable * {__strong}>::~SharedResourcePriv(uint64_t a1)
{
  *(void *)a1 = &unk_1EE325B88;
  uint64_t v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

{
  void *v2;

  *(void *)a1 = &unk_1EE325B88;
  uint64_t v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void E5RT::SharedResourcePriv<MPSGraphExecutable * {__strong}>::~SharedResourcePriv(uint64_t a1)
{
  *(void *)a1 = &unk_1EE325B88;
  uint64_t v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x192FF16B0);
}

void *E5RT::SharedResource::SharedResource(void *this)
{
  *this = &unk_1EE324BE0;
  return this;
}

uint64_t E5RT::SharedResource::GetResourceHandle<E5Common::AutoResourcePtr &>(const void *a1)
{
  if (!v1) {
    __cxa_bad_cast();
  }
  return v1[4];
}

id E5RT::SharedResource::GetResourceHandle<MPSGraphExecutable * {__strong}>(const void *a1)
{
  if (!v1) {
    __cxa_bad_cast();
  }
  uint64_t v2 = (void *)v1[4];

  return v2;
}

void E5RT::SharedResourceFactory::GetANEDriverProgram(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  E5Common::AutoMmapPtr::AutoMmapPtr(v17, a1, 1, 1, 0);
  uint64_t Span = E5Common::AutoMmapPtr::GetSpan((E5Common::AutoMmapPtr *)v17);
  Length = (E5RT::AneDeviceManager *)E5Common::AutoMmapPtr::GetLength((E5Common::AutoMmapPtr *)v17);
  AneDeviceManager = (int8x8_t *)E5RT::AneDeviceManager::GetAneDeviceManager(Length);
  E5RT::AneDeviceManager::GetAneDevice(AneDeviceManager, 0, 0, (int8x8_t *)&v15);
  uint64_t v7 = (*(uint64_t (**)(void *, uint64_t, E5RT::AneDeviceManager *))(*v15 + 32))(v15, Span, Length);
  if (!v7)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "GetANEDriverProgram");
    std::string::basic_string[abi:ne180100]<0>(v12, "Failed to load ANE Program.");
    E5RT::Status::Status(v13, 9, v12);
    E5RT::E5RTError::E5RTError(exception, v14, v13);
  }
  uint64_t v8 = (char *)operator new(0x48uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = &unk_1EE380CB0;
  *((void *)v8 + 3) = &unk_1EE325B10;
  CFStringRef v9 = (std::string *)(v8 + 32);
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    *((void *)v8 + 6) = *(void *)(a1 + 16);
  }
  *((void *)v8 + 7) = v7;
  *((_DWORD *)v8 + 16) = 1;
  *a2 = v8 + 24;
  a2[1] = v8;
  std::string v10 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  E5Common::AutoMmapPtr::~AutoMmapPtr((E5Common::AutoMmapPtr *)v17);
}

void sub_192382D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
  std::__shared_weak_count::~__shared_weak_count(v18);
  operator delete(v20);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  E5Common::AutoMmapPtr::~AutoMmapPtr((E5Common::AutoMmapPtr *)&a18);
  _Unwind_Resume(a1);
}

void sub_192382D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  E5Common::AutoMmapPtr::~AutoMmapPtr((E5Common::AutoMmapPtr *)va1);
  _Unwind_Resume(a1);
}

void sub_192382D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  E5Common::AutoMmapPtr::~AutoMmapPtr((E5Common::AutoMmapPtr *)va);
  _Unwind_Resume(a1);
}

void sub_192382D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  E5Common::AutoMmapPtr::~AutoMmapPtr((E5Common::AutoMmapPtr *)va);
  _Unwind_Resume(a1);
}

void sub_192382DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  E5Common::AutoMmapPtr::~AutoMmapPtr((E5Common::AutoMmapPtr *)va);
  _Unwind_Resume(a1);
}

void sub_192382DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  E5Common::AutoMmapPtr::~AutoMmapPtr((E5Common::AutoMmapPtr *)va);
  _Unwind_Resume(a1);
}

void sub_192382DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24)
{
  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v25 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
      E5Common::AutoMmapPtr::~AutoMmapPtr((E5Common::AutoMmapPtr *)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v24);
  goto LABEL_8;
}

void E5RT::SharedResourceFactory::GetBnnsGraphIr(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = [v5 objectForKeyedSubscript:E5Common::kBnnsGraphPrecompiledStrKey[0]];
  int v7 = [v6 BOOLValue];

  if (v7) {
    E5Common::AutoResourcePtr::MakeFromFile();
  }
  HIBYTE(v21) = 0;
  LOBYTE(__p[0]) = 0;
  uint64_t v8 = [v5 objectForKeyedSubscript:E5Common::kBnnsGraphFunctionNameStrKey[0]];

  if (!v8)
  {
LABEL_9:
    uint64_t v14 = a3[1];
    v17[0] = *a3;
    v17[1] = v14;
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
    E5Common::CreateBnnsGraphProgramFromMILFile((uint64_t)v17, a1, (uint64_t)__p, v5);
  }
  id v9 = [v5 objectForKeyedSubscript:E5Common::kBnnsGraphFunctionNameStrKey[0]];
  std::string v10 = (const void *)[v9 UTF8String];
  unint64_t v11 = [v9 lengthOfBytesUsingEncoding:4];
  size_t v12 = v11;
  if (v11 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v11 >= 0x17)
  {
    uint64_t v15 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v15 = v11 | 7;
    }
    uint64_t v16 = v15 + 1;
    p_dst = (long long *)operator new(v15 + 1);
    *((void *)&__dst + 1) = v12;
    unint64_t v19 = v16 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v19) = v11;
    p_dst = &__dst;
    if (!v11)
    {
      LOBYTE(__dst) = 0;
      if ((SHIBYTE(v21) & 0x80000000) == 0)
      {
LABEL_8:
        *(_OWORD *)std::string __p = __dst;
        unint64_t v21 = v19;

        goto LABEL_9;
      }
LABEL_16:
      operator delete(__p[0]);
      goto LABEL_8;
    }
  }
  memmove(p_dst, v10, v12);
  *((unsigned char *)p_dst + v12) = 0;
  if ((SHIBYTE(v21) & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_16;
}

void sub_192383108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void E5RT::SharedResourceFactory::GetBnnsGraphIr(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  MIL::Opsets::Common::CreateMILContext(&v8, v3);
  uint64_t v9 = v8;
  if (v8) {
    operator new();
  }
  uint64_t v10 = 0;
  uint64_t v6 = 0;
  int v7 = 0;
  E5Common::RegisterBnnsOpsets(&v6);
  char v4 = v7;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  v5[0] = v9;
  v5[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  E5RT::SharedResourceFactory::GetBnnsGraphIr(a1, v3, v5);
}

void sub_192383358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
  {
    Espresso::AOT::AbstractMILCompiler::Run(a14);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void E5RT::SharedResourceFactory::GetMPSGraphExecutable(std::string *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  id v5 = a2;
  id v44 = 0;
  memset(&v43, 0, sizeof(v43));
  std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    int v7 = a1;
  }
  else {
    int v7 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  std::string::append[abi:ne180100]<char const*,0>(&v43.__pn_, v7, (std::string *)((char *)v7 + size));
  char v42 = 4;
  strcpy((char *)__p, "main");
  uint64_t v8 = [v5 objectForKeyedSubscript:E5Common::kMpsgGraphFunctionNameStrKey[0]];

  if (v8)
  {
    id v9 = [v5 objectForKeyedSubscript:E5Common::kMpsgGraphFunctionNameStrKey[0]];
    MEMORY[0x192FF0F50](__p, [v9 UTF8String]);
  }
  std::__fs::filesystem::path::__string_view v10 = std::__fs::filesystem::path::__extension(&v43);
  if (v10.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v10.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v12 = (v10.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v12 = v10.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v13 = v12 + 1;
    unint64_t v11 = (std::string *)operator new(v12 + 1);
    __dst[0].__r_.__value_.__l.__size_ = v10.__size_;
    __dst[0].__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    goto LABEL_15;
  }
  *((unsigned char *)&__dst[0].__r_.__value_.__s + 23) = v10.__size_;
  unint64_t v11 = __dst;
  if (v10.__size_) {
LABEL_15:
  }
    memmove(v11, v10.__data_, v10.__size_);
  v11->__r_.__value_.__s.__data_[v10.__size_] = 0;
  std::__fs::filesystem::path v40 = (std::__fs::filesystem::path)__dst[0];
  memset(__dst, 0, 24);
  std::string::append[abi:ne180100]<char const*,0>(__dst, (std::string *)".mpsgraphpackage", (std::string *)"");
  if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v14.__data_ = (const std::string_view::value_type *)__dst;
  }
  else {
    v14.__data_ = (const std::string_view::value_type *)__dst[0].__r_.__value_.__r.__words[0];
  }
  if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v14.__size_ = HIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
  }
  else {
    v14.__size_ = __dst[0].__r_.__value_.__l.__size_;
  }
  int v15 = std::__fs::filesystem::path::__compare(&v40, v14);
  if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v40.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_24;
    }
LABEL_59:
    operator delete(v40.__pn_.__r_.__value_.__l.__data_);
    if (v15) {
      goto LABEL_25;
    }
LABEL_60:
    if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v31 = (uint64_t *)a1;
    }
    else {
      uint64_t v31 = (uint64_t *)a1->__r_.__value_.__r.__words[0];
    }
    BOOL v32 = [NSString stringWithUTF8String:v31];
    uint64_t v33 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v32];
    long long v34 = E5Common::CreateMpsGraphCompilationDescriptor((uint64_t *)__p, v5);
    uint64_t v26 = (void *)[objc_alloc(MEMORY[0x1E4F35A58]) initWithMPSGraphPackageAtURL:v33 compilationDescriptor:v34];
    id v35 = v44;
    id v44 = v26;

    goto LABEL_67;
  }
  operator delete(__dst[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_59;
  }
LABEL_24:
  if (!v15) {
    goto LABEL_60;
  }
LABEL_25:
  memset(&v40, 0, sizeof(v40));
  std::string::size_type v16 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((v16 & 0x80u) == 0) {
    uint64_t v17 = a1;
  }
  else {
    uint64_t v17 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  if ((v16 & 0x80u) != 0) {
    std::string::size_type v16 = a1->__r_.__value_.__l.__size_;
  }
  std::string::append[abi:ne180100]<char const*,0>(&v40.__pn_, v17, (std::string *)((char *)v17 + v16));
  E5RT::MILProgramUtils::MILProgramUtils((E5RT::MILProgramUtils *)__dst, &v40, 1);
  if (SHIBYTE(v40.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__pn_.__r_.__value_.__l.__data_);
  }
  E5RT::MILProgramUtils::GetFunctionNames((E5RT::MILProgramUtils *)__dst, (std::vector<std::string> *)&v40);
  std::string::size_type v19 = v40.__pn_.__r_.__value_.__l.__size_;
  std::string::size_type v18 = v40.__pn_.__r_.__value_.__r.__words[0];
  if (v40.__pn_.__r_.__value_.__r.__words[0] != v40.__pn_.__r_.__value_.__l.__size_)
  {
    if (v42 >= 0) {
      unint64_t v20 = v42;
    }
    else {
      unint64_t v20 = (unint64_t)__p[1];
    }
    if (v42 >= 0) {
      unint64_t v21 = __p;
    }
    else {
      unint64_t v21 = (void **)__p[0];
    }
    while (1)
    {
      uint64_t v22 = *(unsigned __int8 *)(v18 + 23);
      if ((v22 & 0x80u) == 0) {
        int v23 = (void *)*(unsigned __int8 *)(v18 + 23);
      }
      else {
        int v23 = *(void **)(v18 + 8);
      }
      if (v23 == (void *)v20)
      {
        if ((v22 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v18, v21, *(void *)(v18 + 8))) {
            break;
          }
        }
        else
        {
          if (!*(unsigned char *)(v18 + 23)) {
            break;
          }
          uint64_t v24 = 0;
          while (*(unsigned __int8 *)(v18 + v24) == *((unsigned __int8 *)v21 + v24))
          {
            if (v22 == ++v24) {
              goto LABEL_50;
            }
          }
        }
      }
      v18 += 24;
      if (v18 == v19) {
        goto LABEL_51;
      }
    }
  }
LABEL_50:
  if (v18 == v19) {
LABEL_51:
  }
    MEMORY[0x192FF0F50](__p, "main");
  uint64_t MILProgram = E5RT::MILProgramUtils::GetMILProgram((E5RT::MILProgramUtils *)__dst);
  uint64_t v26 = E5Common::CreateMPSGraphExecutableFromMIL(MILProgram, (uint64_t *)__p, v5);
  id v27 = v44;
  id v44 = v26;

  std::string::size_type v28 = v40.__pn_.__r_.__value_.__r.__words[0];
  if (v40.__pn_.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v29 = v40.__pn_.__r_.__value_.__l.__size_;
    BOOL v30 = (void *)v40.__pn_.__r_.__value_.__r.__words[0];
    if (v40.__pn_.__r_.__value_.__l.__size_ != v40.__pn_.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v29 - 1) < 0) {
          operator delete(*(void **)(v29 - 24));
        }
        v29 -= 24;
      }
      while (v29 != v28);
      BOOL v30 = (void *)v40.__pn_.__r_.__value_.__r.__words[0];
    }
    v40.__pn_.__r_.__value_.__l.__size_ = v28;
    operator delete(v30);
  }
  E5RT::MILProgramUtils::~MILProgramUtils((E5RT::MILProgramUtils *)__dst);
LABEL_67:
  if (!v26)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__dst, "GetMPSGraphExecutable");
    std::operator+<char>();
    E5RT::Status::Status(v38, 13, &v40);
    E5RT::E5RTError::E5RTError(exception, __dst, v38);
  }
  LODWORD(__dst[0].__r_.__value_.__l.__data_) = 4;
  int v36 = (char *)operator new(0x48uLL);
  std::__shared_ptr_emplace<E5RT::SharedResourcePriv<MPSGraphExecutable * {__strong}>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,MPSGraphExecutable * {__strong}&,E5RT::SharedResourceType,std::allocator<E5RT::SharedResourcePriv<MPSGraphExecutable * {__strong}>>,0>((uint64_t)v36, (long long *)a1, &v44, (int *)__dst);
  *a3 = v36 + 24;
  a3[1] = v36;
  if (v42 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v43.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_70;
    }
LABEL_72:
    operator delete(v43.__pn_.__r_.__value_.__l.__data_);
    goto LABEL_70;
  }
  if (SHIBYTE(v43.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_72;
  }
LABEL_70:
}

void sub_19238388C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v34 - 73) & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v34 - 73) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v34 - 96));

  _Unwind_Resume(a1);
}

uint64_t E5RT::SharedResourcePriv<ANEProgramInstanceStruct &>::GetSharedResourceType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t E5RT::SharedResourcePriv<E5Common::AutoResourcePtr &>::GetSharedResourceType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t E5RT::SharedResourcePriv<E5RT::E5Program &>::GetSharedResourceType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t E5RT::SharedResourcePriv<MPSGraphExecutable * {__strong}>::GetSharedResourceType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

void std::__shared_ptr_emplace<E5RT::SharedResourcePriv<ANEProgramInstanceStruct &>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380CB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::SharedResourcePriv<ANEProgramInstanceStruct &>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380CB0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<E5RT::SharedResourcePriv<ANEProgramInstanceStruct &>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<E5RT::SharedResourcePriv<E5Common::AutoResourcePtr &>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380CE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::SharedResourcePriv<E5Common::AutoResourcePtr &>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380CE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<E5RT::SharedResourcePriv<E5Common::AutoResourcePtr &>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<E5RT::SharedResourcePriv<E5RT::E5Program &>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380D20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::SharedResourcePriv<E5RT::E5Program &>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380D20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<E5RT::SharedResourcePriv<MPSGraphExecutable * {__strong}>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,MPSGraphExecutable * {__strong}&,E5RT::SharedResourceType,std::allocator<E5RT::SharedResourcePriv<MPSGraphExecutable * {__strong}>>,0>(uint64_t a1, long long *a2, id *a3, int *a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EE380D58;
  int v6 = *a4;
  id v7 = *a3;
  *(void *)(a1 + 24) = &unk_1EE325B88;
  uint64_t v8 = (std::string *)(a1 + 32);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    *(void *)(a1 + 48) = *((void *)a2 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  *(void *)(a1 + 56) = v7;
  *(_DWORD *)(a1 + 64) = v6;

  return a1;
}

void sub_192383C98(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<E5RT::SharedResourcePriv<MPSGraphExecutable * {__strong}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380D58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::SharedResourcePriv<MPSGraphExecutable * {__strong}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380D58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<E5RT::SharedResourcePriv<MPSGraphExecutable * {__strong}>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_192383D50(uint64_t a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 136315138;
  *(void *)(buf + 4) = a1;
  _os_log_error_impl(&dword_1920CB000, log, OS_LOG_TYPE_ERROR, "ANE Model unload failed. (Program path : %s)", buf, 0xCu);
}

uint64_t sub_192383DD0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

uint64_t e5rt_e5_compiler_config_options_create(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1EE3976D8;
  v3[1] = a1;
  char v4 = v3;
  uint64_t v1 = E5RT::ExceptionSafeExecute((uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v1;
}

void sub_192383EF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_config_options_release(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1EE397758;
  v3[1] = a1;
  char v4 = v3;
  uint64_t v1 = E5RT::ExceptionSafeExecute((uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v1;
}

void sub_192383FEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_config_options_set_cache_bundle_location(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE3977D8;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1923840E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_config_options_get_cache_bundle_location(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE397858;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1923841E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_config_options_set_bundle_cache_apfs_purgeable(uint64_t a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE3978D8;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1923842E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_config_options_get_bundle_cache_apfs_purgeable(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE397958;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1923843E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1923843F8()
{
}

void *sub_19238440C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE3976D8;
  result[1] = v3;
  return result;
}

uint64_t sub_192384454(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE3976D8;
  a2[1] = v2;
  return result;
}

uint64_t sub_192384480(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    operator new();
  }
  char v4 = operator new(0x30uLL);
  long long v5 = xmmword_192DA88D0;
  strcpy((char *)v4, "Invalid Function Argument: handle is NULL.");
  char v3 = 10;
  strcpy((char *)__p, "operator()");
  E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4);
  }
  return 1;
}

void sub_1923845D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_192384670(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z38e5rt_e5_compiler_config_options_createE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z38e5rt_e5_compiler_config_options_createE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z38e5rt_e5_compiler_config_options_createE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z38e5rt_e5_compiler_config_options_createE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1923846E0()
{
  return &unk_1EE397738;
}

void sub_1923846F0()
{
}

void *sub_192384704(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE397758;
  result[1] = v3;
  return result;
}

uint64_t sub_19238474C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE397758;
  a2[1] = v2;
  return result;
}

uint64_t sub_192384778(uint64_t a1)
{
  uint64_t v1 = *(uint64_t ***)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *v1;
    if (*v1)
    {
      uint64_t v4 = *v2;
      uint64_t *v2 = 0;
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      MEMORY[0x192FF16B0](v2, 0x20C4093837F09);
      uint64_t result = 0;
      **(void **)(a1 + 8) = 0;
    }
    else
    {
      uint64_t v8 = operator new(0x30uLL);
      long long v9 = xmmword_192DA90C0;
      strcpy((char *)v8, "Invalid Function Argument: *handle is NULL.");
      char v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v9) < 0) {
        operator delete(v8);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v8 = operator new(0x30uLL);
    long long v9 = xmmword_192DA88D0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    char v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8);
    }
    return 1;
  }
  return result;
}

void sub_192384934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192384974(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z39e5rt_e5_compiler_config_options_releaseE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z39e5rt_e5_compiler_config_options_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z39e5rt_e5_compiler_config_options_releaseE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z39e5rt_e5_compiler_config_options_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1923849E4()
{
  return &unk_1EE3977B8;
}

void sub_1923849F4()
{
}

__n128 sub_192384A08(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE3977D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192384A54(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3977D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192384A84(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *(const void **)(a1 + 16);
    if (v2)
    {
      uint64_t v3 = *v1;
      size_t v4 = strlen(*(const char **)(a1 + 16));
      if (v4 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v5 = v4;
      if (v4 >= 0x17)
      {
        uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v4 | 7) != 0x17) {
          uint64_t v7 = v4 | 7;
        }
        uint64_t v8 = v7 + 1;
        p_dst = (void **)operator new(v7 + 1);
        *(void *)&long long v13 = v5;
        *((void *)&v13 + 1) = v8 | 0x8000000000000000;
        long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v13) = v4;
        p_dst = &__dst;
        if (!v4) {
          goto LABEL_11;
        }
      }
      memcpy(p_dst, v2, v5);
LABEL_11:
      *((unsigned char *)p_dst + v5) = 0;
      E5RT::E5CompilerConfigOptions::SetBundleCacheLocation(v3, (uint64_t)&__dst);
      if (SHIBYTE(v13) < 0) {
        operator delete(__dst);
      }
      return 0;
    }
    long long __dst = operator new(0x30uLL);
    long long v13 = xmmword_192DAC000;
    strcpy((char *)__dst, "Invalid Function Argument: path is NULL.");
    char v11 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
  }
  else
  {
    long long __dst = operator new(0x30uLL);
    long long v13 = xmmword_192DA88D0;
    strcpy((char *)__dst, "Invalid Function Argument: handle is NULL.");
    char v11 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__dst, (uint64_t *)__p);
  }
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst);
  }
  return 1;
}

void sub_192384C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if (a20 < 0)
    {
LABEL_5:
      operator delete(a15);
      _Unwind_Resume(a1);
    }
  }
  else if (a20 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_192384CC0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z57e5rt_e5_compiler_config_options_set_cache_bundle_locationE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z57e5rt_e5_compiler_config_options_set_cache_bundle_locationE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z57e5rt_e5_compiler_config_options_set_cache_bundle_locationE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z57e5rt_e5_compiler_config_options_set_cache_bundle_locationE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192384D30()
{
  return &unk_1EE397838;
}

void sub_192384D40()
{
}

__n128 sub_192384D54(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE397858;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192384DA0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE397858;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192384DD0(uint64_t a1)
{
  uint64_t v1 = *(E5RT::E5CompilerConfigOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t BundleCacheLocation = E5RT::E5CompilerConfigOptions::GetBundleCacheLocation(*v1);
      uint64_t result = 0;
      if (*(char *)(BundleCacheLocation + 23) < 0) {
        uint64_t BundleCacheLocation = *(void *)BundleCacheLocation;
      }
      **(void **)(a1 + 16) = BundleCacheLocation;
    }
    else
    {
      uint64_t v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DAC000;
      strcpy((char *)v7, "Invalid Function Argument: path is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_192384F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192384FA0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z57e5rt_e5_compiler_config_options_get_cache_bundle_locationE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z57e5rt_e5_compiler_config_options_get_cache_bundle_locationE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z57e5rt_e5_compiler_config_options_get_cache_bundle_locationE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z57e5rt_e5_compiler_config_options_get_cache_bundle_locationE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192385010()
{
  return &unk_1EE3978B8;
}

void sub_192385020()
{
}

__n128 sub_192385034(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE3978D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192385080(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3978D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1923850B0(uint64_t a1)
{
  uint64_t v1 = *(E5RT::E5CompilerConfigOptions ***)(a1 + 8);
  if (v1)
  {
    E5RT::E5CompilerConfigOptions::SetBundleCacheAPFSPurgeable(*v1, *(unsigned char *)(a1 + 16) != 0);
    return 0;
  }
  else
  {
    size_t v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_19238518C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1923851C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z63e5rt_e5_compiler_config_options_set_bundle_cache_apfs_purgeableE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z63e5rt_e5_compiler_config_options_set_bundle_cache_apfs_purgeableE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z63e5rt_e5_compiler_config_options_set_bundle_cache_apfs_purgeableE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z63e5rt_e5_compiler_config_options_set_bundle_cache_apfs_purgeableE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192385238()
{
  return &unk_1EE397938;
}

void sub_192385248()
{
}

__n128 sub_19238525C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE397958;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1923852A8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE397958;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1923852D8(uint64_t a1)
{
  uint64_t v1 = *(E5RT::E5CompilerConfigOptions ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      char BundleCacheAPFSPurgeable = E5RT::E5CompilerConfigOptions::GetBundleCacheAPFSPurgeable(*v1);
      uint64_t result = 0;
      **(unsigned char **)(a1 + 16) = BundleCacheAPFSPurgeable;
    }
    else
    {
      uint64_t v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA88C0;
      strcpy((char *)v7, "Invalid Function Argument: purgeable is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_192385458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192385498(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z63e5rt_e5_compiler_config_options_get_bundle_cache_apfs_purgeableE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z63e5rt_e5_compiler_config_options_get_bundle_cache_apfs_purgeableE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z63e5rt_e5_compiler_config_options_get_bundle_cache_apfs_purgeableE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z63e5rt_e5_compiler_config_options_get_bundle_cache_apfs_purgeableE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192385508()
{
  return &unk_1EE3979B8;
}

void *E5RT::SharedResourceManager::InitializeMILContext(void *this)
{
  if (!this[5])
  {
    uint64_t v1 = this;
    MIL::Opsets::Common::CreateMILContext((uint64_t *)&v3, (MIL::Opsets::Common *)this);
    if (v3) {
      operator new();
    }
    unint64_t v3 = 0;
    uint64_t v2 = (std::__shared_weak_count *)v1[6];
    v1[5] = 0;
    v1[6] = 0;
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    this = v3;
    unint64_t v3 = 0;
    if (this) {
      return (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
    }
  }
  return this;
}

void sub_192385644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    Espresso::AOT::AbstractMILCompiler::Run(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_192385674()
{
}

void E5RT::SharedResourceManager::AddResource(uint64_t a1, void *a2, uint64_t *a3)
{
  char v6 = (std::mutex *)(a1 + 56);
  std::mutex::lock((std::mutex *)(a1 + 56));
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>>>::find<std::string>((void *)a1, (uint64_t)a2);
  long long v8 = v7;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  if (!v7)
  {
    char v11 = 0;
    goto LABEL_16;
  }
  long long v9 = (std::__shared_weak_count *)v7[6];
  if (v9 && (std::__fs::filesystem::path::__string_view v10 = std::__shared_weak_count::lock(v9)) != 0)
  {
    char v11 = v10;
    uint64_t v12 = v8[5];
    uint64_t v23 = v12;
    uint64_t v24 = v11;
    if (v12)
    {
      int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
      if (v13 != (*(unsigned int (**)(void))(*(void *)*a3 + 16))())
      {
        exception = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "AddResource");
        std::string::basic_string[abi:ne180100]<0>(v21, "Invalid resource type. A shared resource of a different type with the specified URI already exists.");
        E5RT::Status::Status(v22, 2, v21);
        E5RT::E5RTError::E5RTError(exception, __p, v22);
      }
      goto LABEL_16;
    }
  }
  else
  {
    char v11 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove((void *)a1, v8, (uint64_t)__p);
  int v15 = (char *)__p[0];
  __p[0] = 0;
  if (v15)
  {
    if (v26)
    {
      std::string::size_type v16 = (std::__shared_weak_count *)*((void *)v15 + 6);
      if (v16) {
        std::__shared_weak_count::__release_weak(v16);
      }
      if (v15[39] < 0) {
        operator delete(*((void **)v15 + 2));
      }
    }
    operator delete(v15);
  }
LABEL_16:
  __p[0] = a2;
  uint64_t v17 = std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (uint64_t)a2, (uint64_t)&std::piecewise_construct, (long long **)__p);
  uint64_t v19 = *a3;
  uint64_t v18 = a3[1];
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 16), 1uLL, memory_order_relaxed);
  }
  unint64_t v20 = (std::__shared_weak_count *)v17[6];
  v17[5] = v19;
  v17[6] = v18;
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  std::mutex::unlock(v6);
}

void sub_192385914(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_192385928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::mutex::unlock(v6);
  _Unwind_Resume(a1);
}

void sub_192385944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v29 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
      std::mutex::unlock(v27);
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v28);
  goto LABEL_8;
}

void E5RT::SharedResourceManager::GenerateConcatenatedSortedURIs(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  v33[2] = *MEMORY[0x1E4F143B8];
  std::string __p = 0;
  std::string::size_type v28 = 0;
  uint64_t v29 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__p, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  unint64_t v3 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (unsigned char *)__p) >> 3));
  if (v28 == __p) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v3;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)__p, v28, (uint64_t)&__dst, v4, 1);
  size_t v5 = (char *)__p;
  char v6 = v28;
  uint64_t v25 = a2;
  if (*((char *)__p + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)__p, *((void *)__p + 1));
  }
  else
  {
    long long v7 = *(_OWORD *)__p;
    v26.__r_.__value_.__r.__words[2] = *((void *)__p + 2);
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v7;
  }
  long long v8 = (const void **)(v5 + 24);
  if (v5 + 24 != (char *)v6)
  {
    do
    {
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v31, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
      }
      else {
        std::string v31 = v26;
      }
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, (const std::string::value_type *)*v8, (std::string::size_type)v8[1]);
      }
      else
      {
        long long v9 = *(_OWORD *)v8;
        v30.__r_.__value_.__r.__words[2] = (std::string::size_type)v8[2];
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v9;
      }
      int v10 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v31.__r_.__value_.__l.__size_;
      }
      unint64_t v12 = size + 1;
      if (size + 1 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v12 >= 0x17)
      {
        uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v14 = v12 | 7;
        }
        uint64_t v15 = v14 + 1;
        p_dst = (std::string *)operator new(v14 + 1);
        __dst.__r_.__value_.__l.__size_ = size + 1;
        __dst.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        p_dst = &__dst;
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = size + 1;
        if (!size) {
          goto LABEL_30;
        }
      }
      if (v10 >= 0) {
        std::string::size_type v16 = &v31;
      }
      else {
        std::string::size_type v16 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
      memmove(p_dst, v16, size);
LABEL_30:
      *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + size) = 58;
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v17 = &v30;
      }
      else {
        uint64_t v17 = (std::string *)v30.__r_.__value_.__r.__words[0];
      }
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v18 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v18 = v30.__r_.__value_.__l.__size_;
      }
      uint64_t v19 = std::string::append(&__dst, (const std::string::value_type *)v17, v18);
      std::string::size_type v20 = v19->__r_.__value_.__r.__words[0];
      v33[0] = v19->__r_.__value_.__l.__size_;
      *(void *)((char *)v33 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
      char v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_38;
        }
      }
      else if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_38;
      }
      operator delete(v26.__r_.__value_.__l.__data_);
LABEL_38:
      v26.__r_.__value_.__r.__words[0] = v20;
      v26.__r_.__value_.__l.__size_ = v33[0];
      *(std::string::size_type *)((char *)&v26.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v33 + 7);
      *((unsigned char *)&v26.__r_.__value_.__s + 23) = v21;
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v30.__r_.__value_.__l.__data_);
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
LABEL_44:
        }
          operator delete(v31.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_44;
      }
      v8 += 3;
    }
    while (v8 != v6);
  }
  *(_OWORD *)uint64_t v25 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  uint64_t v22 = (const void **)__p;
  *(void *)(v25 + 16) = *((void *)&v26.__r_.__value_.__l + 2);
  memset(&v26, 0, sizeof(v26));
  if (v22)
  {
    uint64_t v23 = v28;
    uint64_t v24 = v22;
    if (v28 != v22)
    {
      do
      {
        if (*((char *)v23 - 1) < 0) {
          operator delete((void *)*(v23 - 3));
        }
        v23 -= 3;
      }
      while (v23 != v22);
      uint64_t v24 = __p;
    }
    std::string::size_type v28 = v22;
    operator delete(v24);
  }
}

void sub_192385CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_192385D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_192385D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a32 < 0)
  {
    operator delete(__p);
    if ((a16 & 0x80000000) == 0)
    {
LABEL_3:
      std::vector<std::string>::~vector[abi:ne180100](&a17);
      _Unwind_Resume(a1);
    }
  }
  else if ((a16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a11);
  std::vector<std::string>::~vector[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      unint64_t v3 = *(std::__shared_weak_count **)(v2 + 48);
      if (v3) {
        std::__shared_weak_count::__release_weak(v3);
      }
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t e5rt_buffer_object_create_from_data_pointer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  char v6 = operator new(0x20uLL);
  *char v6 = &unk_1EE397A78;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  int v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_192385F3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_buffer_object_create_as_alias(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v8 = operator new(0x28uLL);
  *long long v8 = &unk_1EE397B78;
  v8[1] = a1;
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  unint64_t v12 = v8;
  uint64_t v9 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  return v9;
}

void sub_192386060(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_buffer_object_get_iosurface(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE397C78;
  v4[1] = a1;
  v4[2] = a2;
  size_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19238615C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_buffer_object_get_size(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE397CF8;
  v4[1] = a1;
  v4[2] = a2;
  size_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_192386258(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_buffer_object_get_type(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE397DF8;
  v4[1] = a1;
  v4[2] = a2;
  size_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_192386354(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_buffer_object_create_from_mtlbuffer(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  v6[0] = &unk_1EE397E78;
  v6[1] = a1;
  v6[2] = v3;
  uint64_t v7 = v6;
  uint64_t v4 = E5RT::ExceptionSafeExecute((uint64_t)v6);
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }

  return v4;
}

void sub_19238646C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);

  _Unwind_Resume(a1);
}

uint64_t e5rt_buffer_object_get_mtlbuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE397EF8;
  v4[1] = a1;
  v4[2] = a2;
  size_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_192386574(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19238658C()
{
}

__n128 sub_1923865A0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE3979F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1923865F4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3979F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19238662C(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    operator new();
  }
  uint64_t v4 = operator new(0x30uLL);
  long long v5 = xmmword_192DA88D0;
  strcpy((char *)v4, "Invalid Function Argument: handle is NULL.");
  char v3 = 10;
  strcpy((char *)__p, "operator()");
  E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4);
  }
  return 1;
}

void sub_192386818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1923868C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z24e5rt_buffer_object_allocE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z24e5rt_buffer_object_allocE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z24e5rt_buffer_object_allocE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z24e5rt_buffer_object_allocE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192386938()
{
  return &unk_1EE397A58;
}

void sub_192386948()
{
}

__n128 sub_19238695C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE397A78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1923869B0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE397A78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1923869E8(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    if (*(void *)(a1 + 16)) {
      operator new();
    }
    uint64_t v4 = operator new(0x30uLL);
    long long v5 = xmmword_192DAC000;
    strcpy((char *)v4, "Invalid Function Argument: data is NULL.");
    char v3 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v5) < 0) {
      operator delete(v4);
    }
    return 1;
  }
  else
  {
    uint64_t v4 = operator new(0x30uLL);
    long long v5 = xmmword_192DA88D0;
    strcpy((char *)v4, "Invalid Function Argument: handle is NULL.");
    char v3 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v5) < 0) {
      operator delete(v4);
    }
    return 1;
  }
}

void sub_192386C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_192386D28(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z43e5rt_buffer_object_create_from_data_pointerE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z43e5rt_buffer_object_create_from_data_pointerE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z43e5rt_buffer_object_create_from_data_pointerE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z43e5rt_buffer_object_create_from_data_pointerE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192386D98()
{
  return &unk_1EE397AD8;
}

void sub_192386DA8()
{
}

__n128 sub_192386DBC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE397AF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192386E08(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE397AF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192386E38(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    operator new();
  }
  uint64_t v4 = operator new(0x30uLL);
  long long v5 = xmmword_192DA88D0;
  strcpy((char *)v4, "Invalid Function Argument: handle is NULL.");
  char v3 = 10;
  strcpy((char *)__p, "operator()");
  E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4);
  }
  return 1;
}

void sub_192387020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1923870D0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z40e5rt_buffer_object_create_from_iosurfaceE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z40e5rt_buffer_object_create_from_iosurfaceE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z40e5rt_buffer_object_create_from_iosurfaceE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z40e5rt_buffer_object_create_from_iosurfaceE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192387140()
{
  return &unk_1EE397B58;
}

void sub_192387150()
{
}

__n128 sub_192387164(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EE397B78;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1923871B8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE397B78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1923871F0(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v1 = *(void *)(a1 + 16);
    if (v1)
    {
      uint64_t v2 = *(void *)(v1 + 8);
      if (v2) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
      }
      operator new();
    }
    uint64_t v6 = operator new(0x38uLL);
    long long v7 = xmmword_192DAB900;
    strcpy((char *)v6, "Invalid Function Argument: parent_handle is NULL.");
    char v5 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v6, (uint64_t *)__p);
  }
  else
  {
    uint64_t v6 = operator new(0x30uLL);
    long long v7 = xmmword_192DA88D0;
    strcpy((char *)v6, "Invalid Function Argument: handle is NULL.");
    char v5 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v6, (uint64_t *)__p);
  }
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(v6);
  }
  return 1;
}

void sub_1923874B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1923875B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z34e5rt_buffer_object_create_as_aliasE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z34e5rt_buffer_object_create_as_aliasE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z34e5rt_buffer_object_create_as_aliasE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z34e5rt_buffer_object_create_as_aliasE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192387624()
{
  return &unk_1EE397BD8;
}

void sub_192387634()
{
}

void *sub_192387648(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE397BF8;
  result[1] = v3;
  return result;
}

uint64_t sub_192387690(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE397BF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1923876BC(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *v1;
    if (*v1)
    {
      uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
      if (v4)
      {
        if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      MEMORY[0x192FF16B0](v2, 0x20C40A4A59CD2);
      uint64_t result = 0;
      **(void **)(a1 + 8) = 0;
    }
    else
    {
      uint64_t v8 = operator new(0x30uLL);
      long long v9 = xmmword_192DA90C0;
      strcpy((char *)v8, "Invalid Function Argument: *handle is NULL.");
      char v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v9) < 0) {
        operator delete(v8);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v8 = operator new(0x30uLL);
    long long v9 = xmmword_192DA88D0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    char v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8);
    }
    return 1;
  }
  return result;
}

void sub_1923878A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1923878E0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z26e5rt_buffer_object_releaseE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z26e5rt_buffer_object_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z26e5rt_buffer_object_releaseE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z26e5rt_buffer_object_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192387950()
{
  return &unk_1EE397C58;
}

void sub_192387960()
{
}

__n128 sub_192387974(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE397C78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1923879C0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE397C78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1923879F0(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t v3 = E5RT::BufferObject::GetHandle<__IOSurface *>(*v1);
      uint64_t result = 0;
      **(void **)(a1 + 16) = v3;
    }
    else
    {
      char v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA90C0;
      strcpy((char *)v7, "Invalid Function Argument: surface is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    char v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_192387B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192387BB0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z32e5rt_buffer_object_get_iosurfaceE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z32e5rt_buffer_object_get_iosurfaceE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z32e5rt_buffer_object_get_iosurfaceE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z32e5rt_buffer_object_get_iosurfaceE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192387C20()
{
  return &unk_1EE397CD8;
}

void sub_192387C30()
{
}

__n128 sub_192387C44(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE397CF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192387C90(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE397CF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192387CC0(uint64_t a1)
{
  uint64_t v1 = *(E5RT::BufferObject ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t Size = E5RT::BufferObject::GetSize(*v1);
      uint64_t result = 0;
      **(void **)(a1 + 16) = Size;
    }
    else
    {
      char v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DAC000;
      strcpy((char *)v7, "Invalid Function Argument: size is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    char v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_192387E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192387E80(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z27e5rt_buffer_object_get_sizeE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z27e5rt_buffer_object_get_sizeE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z27e5rt_buffer_object_get_sizeE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z27e5rt_buffer_object_get_sizeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192387EF0()
{
  return &unk_1EE397D58;
}

void sub_192387F00()
{
}

__n128 sub_192387F14(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE397D78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192387F60(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE397D78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192387F90(uint64_t a1)
{
  uint64_t v1 = *(E5RT::BufferObject ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      Datauint64_t Span = E5RT::BufferObject::GetDataSpan(*v1);
      uint64_t result = 0;
      **(void **)(a1 + 16) = DataSpan;
    }
    else
    {
      char v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DAC000;
      strcpy((char *)v7, "Invalid Function Argument: data is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    char v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_192388110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192388150(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z31e5rt_buffer_object_get_data_ptrE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z31e5rt_buffer_object_get_data_ptrE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z31e5rt_buffer_object_get_data_ptrE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z31e5rt_buffer_object_get_data_ptrE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1923881C0()
{
  return &unk_1EE397DD8;
}

void sub_1923881D0()
{
}

__n128 sub_1923881E4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE397DF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192388230(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE397DF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192388260(uint64_t a1)
{
  uint64_t v1 = *(E5RT::BufferObject ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      int BufferType = E5RT::BufferObject::GetBufferType(*v1);
      uint64_t result = 0;
      **(_DWORD **)(a1 + 16) = BufferType;
    }
    else
    {
      char v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DAC000;
      strcpy((char *)v7, "Invalid Function Argument: type is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    char v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_1923883E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192388420(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z27e5rt_buffer_object_get_typeE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z27e5rt_buffer_object_get_typeE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z27e5rt_buffer_object_get_typeE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z27e5rt_buffer_object_get_typeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192388490()
{
  return &unk_1EE397E58;
}

uint64_t sub_19238849C(uint64_t a1)
{
  return a1;
}

void sub_1923884C8(uint64_t a1)
{
  JUMPOUT(0x192FF16B0);
}

void *sub_192388514(uint64_t a1)
{
  uint64_t v2 = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 16);
  void *v2 = &unk_1EE397E78;
  v2[1] = v3;
  v2[2] = v4;
  return v2;
}

id sub_19238856C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 16);
  *a2 = &unk_1EE397E78;
  a2[1] = v3;
  id result = v4;
  a2[2] = result;
  return result;
}

void sub_1923885B4(uint64_t a1)
{
}

void sub_1923885BC(id *a1)
{
  operator delete(a1);
}

uint64_t sub_1923885F8(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    operator new();
  }
  uint64_t v4 = operator new(0x30uLL);
  long long v5 = xmmword_192DA88D0;
  strcpy((char *)v4, "Invalid Function Argument: handle is NULL.");
  char v3 = 10;
  strcpy((char *)__p, "operator()");
  E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4);
  }
  return 1;
}

void sub_1923887E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_192388890(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z40e5rt_buffer_object_create_from_mtlbufferE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z40e5rt_buffer_object_create_from_mtlbufferE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z40e5rt_buffer_object_create_from_mtlbufferE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z40e5rt_buffer_object_create_from_mtlbufferE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192388900()
{
  return &unk_1EE397ED8;
}

void sub_192388910()
{
}

__n128 sub_192388924(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE397EF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192388970(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE397EF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1923889A0(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      E5RT::BufferObject::GetHandle<objc_object  {objcproto9MTLBuffer}* {__strong}>(*v1);
      id v3 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t result = 0;
      **(void **)(a1 + 16) = v3;
    }
    else
    {
      char v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA88D0;
      strcpy((char *)v7, "Invalid Function Argument: buffer is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    char v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_192388B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192388B68(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z32e5rt_buffer_object_get_mtlbufferE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z32e5rt_buffer_object_get_mtlbufferE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z32e5rt_buffer_object_get_mtlbufferE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z32e5rt_buffer_object_get_mtlbufferE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192388BD8()
{
  return &unk_1EE397F58;
}

uint64_t e5rt_operand_desc_retain_from_tensor_desc(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE397F78;
  v4[1] = a1;
  v4[2] = a2;
  long long v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_192388CE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_operand_desc_retain_from_surface_desc(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE397FF8;
  v4[1] = a1;
  v4[2] = a2;
  long long v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_192388DE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_operand_desc_is_tensor_desc(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE398078;
  v4[1] = a1;
  v4[2] = a2;
  long long v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_192388EE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_operand_desc_is_surface_desc(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE3980F8;
  v4[1] = a1;
  v4[2] = a2;
  long long v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_192388FDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_operand_desc_release(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1EE398178;
  v3[1] = a1;
  uint64_t v4 = v3;
  uint64_t v1 = E5RT::ExceptionSafeExecute((uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v1;
}

void sub_1923890D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1923890F0()
{
}

__n128 sub_192389104(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE397F78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192389150(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE397F78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192389180(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    if (*(void *)(a1 + 16)) {
      operator new();
    }
    uint64_t v4 = operator new(0x30uLL);
    long long v5 = xmmword_192DA88E0;
    strcpy((char *)v4, "Invalid Function Argument: tensor_desc is NULL.");
    char v3 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v5) < 0) {
      operator delete(v4);
    }
    return 1;
  }
  else
  {
    uint64_t v4 = operator new(0x30uLL);
    long long v5 = xmmword_192DA88D0;
    strcpy((char *)v4, "Invalid Function Argument: handle is NULL.");
    char v3 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v5) < 0) {
      operator delete(v4);
    }
    return 1;
  }
}

void sub_192389338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192389378(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z41e5rt_operand_desc_retain_from_tensor_descE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z41e5rt_operand_desc_retain_from_tensor_descE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z41e5rt_operand_desc_retain_from_tensor_descE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z41e5rt_operand_desc_retain_from_tensor_descE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1923893E8()
{
  return &unk_1EE397FD8;
}

void sub_1923893F8()
{
}

__n128 sub_19238940C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE397FF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192389458(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE397FF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192389488(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    if (*(void *)(a1 + 16)) {
      operator new();
    }
    uint64_t v4 = operator new(0x38uLL);
    long long v5 = xmmword_192DAF6B0;
    strcpy((char *)v4, "Invalid Function Argument: surface_desc is NULL.");
    char v3 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v5) < 0) {
      operator delete(v4);
    }
    return 1;
  }
  else
  {
    uint64_t v4 = operator new(0x30uLL);
    long long v5 = xmmword_192DA88D0;
    strcpy((char *)v4, "Invalid Function Argument: handle is NULL.");
    char v3 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v5) < 0) {
      operator delete(v4);
    }
    return 1;
  }
}

void sub_192389640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192389680(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z42e5rt_operand_desc_retain_from_surface_descE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z42e5rt_operand_desc_retain_from_surface_descE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z42e5rt_operand_desc_retain_from_surface_descE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z42e5rt_operand_desc_retain_from_surface_descE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1923896F0()
{
  return &unk_1EE398058;
}

void sub_192389700()
{
}

__n128 sub_192389714(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE398078;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192389760(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE398078;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192389790(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      unint64_t v3 = E5RT::OperandDescriptor::TryAsTensorDescriptor(*v1);
      uint64_t result = 0;
      **(unsigned char **)(a1 + 16) = v3 != 0;
    }
    else
    {
      char v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA88D0;
      strcpy((char *)v7, "Invalid Function Argument: answer is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    char v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_192389918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192389958(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z32e5rt_operand_desc_is_tensor_descE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z32e5rt_operand_desc_is_tensor_descE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z32e5rt_operand_desc_is_tensor_descE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z32e5rt_operand_desc_is_tensor_descE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1923899C8()
{
  return &unk_1EE3980D8;
}

void sub_1923899D8()
{
}

__n128 sub_1923899EC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE3980F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192389A38(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3980F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192389A68(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      unint64_t v3 = E5RT::OperandDescriptor::TryAsSurfaceDescriptor(*v1);
      uint64_t result = 0;
      **(unsigned char **)(a1 + 16) = v3 != 0;
    }
    else
    {
      char v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA88D0;
      strcpy((char *)v7, "Invalid Function Argument: answer is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    char v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_192389BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192389C30(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z33e5rt_operand_desc_is_surface_descE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z33e5rt_operand_desc_is_surface_descE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z33e5rt_operand_desc_is_surface_descE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z33e5rt_operand_desc_is_surface_descE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192389CA0()
{
  return &unk_1EE398158;
}

void sub_192389CB0()
{
}

void *sub_192389CC4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE398178;
  result[1] = v3;
  return result;
}

uint64_t sub_192389D0C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE398178;
  a2[1] = v2;
  return result;
}

uint64_t sub_192389D38(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *v1;
    if (*v1)
    {
      uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
      if (v4)
      {
        if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      MEMORY[0x192FF16B0](v2, 0x60C405C6656D0);
      uint64_t result = 0;
      **(void **)(a1 + 8) = 0;
    }
    else
    {
      long long v8 = operator new(0x30uLL);
      long long v9 = xmmword_192DA90C0;
      strcpy((char *)v8, "Invalid Function Argument: *handle is NULL.");
      char v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v9) < 0) {
        operator delete(v8);
      }
      return 1;
    }
  }
  else
  {
    long long v8 = operator new(0x30uLL);
    long long v9 = xmmword_192DA88D0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    char v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8);
    }
    return 1;
  }
  return result;
}

void sub_192389F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192389F5C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z25e5rt_operand_desc_releaseE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z25e5rt_operand_desc_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z25e5rt_operand_desc_releaseE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z25e5rt_operand_desc_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192389FCC()
{
  return &unk_1EE3981D8;
}

uint64_t e5rt_surface_desc_create(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v8 = operator new(0x28uLL);
  *long long v8 = &unk_1EE3981F8;
  v8[1] = a1;
  *((_DWORD *)v8 + 4) = a2;
  v8[3] = a3;
  v8[4] = a4;
  unint64_t v12 = v8;
  uint64_t v9 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  return v9;
}

void sub_19238A0E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_surface_desc_create_with_strides(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = operator new(0x38uLL);
  *unint64_t v12 = &unk_1EE398278;
  v12[1] = a1;
  v12[2] = a5;
  void v12[3] = a6;
  *((_DWORD *)v12 + 8) = a2;
  v12[5] = a3;
  v12[6] = a4;
  std::string::size_type v16 = v12;
  uint64_t v13 = E5RT::ExceptionSafeExecute((uint64_t)v15);
  if (v16 == v15)
  {
    (*(void (**)(void *))(v15[0] + 32))(v15);
  }
  else if (v16)
  {
    (*(void (**)(void))(*v16 + 40))();
  }
  return v13;
}

void sub_19238A220(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_surface_desc_create_with_strides_and_slices(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = operator new(0x40uLL);
  void *v14 = &unk_1EE3982F8;
  v14[1] = a1;
  v14[2] = a5;
  void v14[3] = a6;
  *((_DWORD *)v14 + 8) = a2;
  v14[5] = a3;
  v14[6] = a4;
  v14[7] = a7;
  std::string::size_type v18 = v14;
  uint64_t v15 = E5RT::ExceptionSafeExecute((uint64_t)v17);
  if (v18 == v17)
  {
    (*(void (**)(void *))(v17[0] + 32))(v17);
  }
  else if (v18)
  {
    (*(void (**)(void))(*v18 + 40))();
  }
  return v15;
}

void sub_19238A368(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_surface_desc_create_with_slices(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v10 = operator new(0x30uLL);
  *int v10 = &unk_1EE398378;
  v10[1] = a1;
  *((_DWORD *)v10 + 4) = a2;
  v10[3] = a3;
  v10[4] = a4;
  v10[5] = a5;
  uint64_t v14 = v10;
  uint64_t v11 = E5RT::ExceptionSafeExecute((uint64_t)v13);
  if (v14 == v13)
  {
    (*(void (**)(void *))(v13[0] + 32))(v13);
  }
  else if (v14)
  {
    (*(void (**)(void))(*v14 + 40))();
  }
  return v11;
}

void sub_19238A49C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_surface_desc_create_from_operand_desc(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE3983F8;
  v4[1] = a1;
  v4[2] = a2;
  long long v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19238A598(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_surface_desc_get_plane_count(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE398578;
  v4[1] = a1;
  v4[2] = a2;
  long long v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19238A694(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_surface_desc_get_slice_count(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE3985F8;
  v4[1] = a1;
  v4[2] = a2;
  long long v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19238A790(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_surface_format_to_cvpb_4cc(unsigned int a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE398778;
  v4[1] = a2;
  v4[2] = a1;
  long long v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19238A890(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19238A8A8()
{
}

__n128 sub_19238A8BC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EE3981F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_19238A910(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3981F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19238A948(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    operator new();
  }
  uint64_t v4 = operator new(0x30uLL);
  long long v5 = xmmword_192DA88D0;
  strcpy((char *)v4, "Invalid Function Argument: handle is NULL.");
  char v3 = 10;
  strcpy((char *)__p, "operator()");
  E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4);
  }
  return 1;
}

void sub_19238AB34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19238ABE4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z24e5rt_surface_desc_createE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z24e5rt_surface_desc_createE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z24e5rt_surface_desc_createE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z24e5rt_surface_desc_createE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19238AC54()
{
  return &unk_1EE398258;
}

void sub_19238AC64()
{
}

__n128 sub_19238AC78(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_1EE398278;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_19238ACD4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE398278;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19238AD14(void *a1)
{
  if (a1[1])
  {
    uint64_t v1 = (const void *)a1[2];
    if (v1)
    {
      uint64_t v2 = a1[3];
      long long v7 = 0uLL;
      std::string __p = 0;
      if (v2)
      {
        if (v2 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        std::string __p = operator new(8 * v2);
        memcpy(__p, v1, 8 * v2);
        *(void *)&long long v7 = (char *)__p + 8 * v2;
      }
      operator new();
    }
    std::string __p = operator new(0x40uLL);
    long long v7 = xmmword_192DB6730;
    strcpy((char *)__p, "Invalid Function Argument: bytes_per_row_strides is NULL.");
    char v5 = 10;
    strcpy((char *)v4, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__p, v4);
    if (v5 < 0) {
      operator delete((void *)v4[0]);
    }
    if (SHIBYTE(v7) < 0) {
      operator delete(__p);
    }
    return 1;
  }
  else
  {
    std::string __p = operator new(0x30uLL);
    long long v7 = xmmword_192DA88D0;
    strcpy((char *)__p, "Invalid Function Argument: handle is NULL.");
    char v5 = 10;
    strcpy((char *)v4, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__p, v4);
    if (v5 < 0) {
      operator delete((void *)v4[0]);
    }
    if (SHIBYTE(v7) < 0) {
      operator delete(__p);
    }
    return 1;
  }
}

void sub_19238B008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19238B0D0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z37e5rt_surface_desc_create_with_stridesE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z37e5rt_surface_desc_create_with_stridesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z37e5rt_surface_desc_create_with_stridesE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z37e5rt_surface_desc_create_with_stridesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19238B140()
{
  return &unk_1EE3982D8;
}

void sub_19238B150()
{
}

__n128 sub_19238B164(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_1EE3982F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 sub_19238B1C8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3982F8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19238B210(void *a1)
{
  if (a1[1])
  {
    uint64_t v1 = (const void *)a1[2];
    if (v1)
    {
      uint64_t v2 = a1[3];
      long long v7 = 0uLL;
      std::string __p = 0;
      if (v2)
      {
        if (v2 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        std::string __p = operator new(8 * v2);
        memcpy(__p, v1, 8 * v2);
        *(void *)&long long v7 = (char *)__p + 8 * v2;
      }
      operator new();
    }
    std::string __p = operator new(0x40uLL);
    long long v7 = xmmword_192DB6730;
    strcpy((char *)__p, "Invalid Function Argument: bytes_per_row_strides is NULL.");
    char v5 = 10;
    strcpy((char *)v4, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__p, v4);
    if (v5 < 0) {
      operator delete((void *)v4[0]);
    }
    if (SHIBYTE(v7) < 0) {
      operator delete(__p);
    }
    return 1;
  }
  else
  {
    std::string __p = operator new(0x30uLL);
    long long v7 = xmmword_192DA88D0;
    strcpy((char *)__p, "Invalid Function Argument: handle is NULL.");
    char v5 = 10;
    strcpy((char *)v4, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__p, v4);
    if (v5 < 0) {
      operator delete((void *)v4[0]);
    }
    if (SHIBYTE(v7) < 0) {
      operator delete(__p);
    }
    return 1;
  }
}

void sub_19238B508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19238B5D0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z48e5rt_surface_desc_create_with_strides_and_slicesE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z48e5rt_surface_desc_create_with_strides_and_slicesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z48e5rt_surface_desc_create_with_strides_and_slicesE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z48e5rt_surface_desc_create_with_strides_and_slicesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19238B640()
{
  return &unk_1EE398358;
}

void sub_19238B650()
{
}

__n128 sub_19238B664(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1EE398378;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_19238B6C0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE398378;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19238B700(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    operator new();
  }
  long long v4 = operator new(0x30uLL);
  long long v5 = xmmword_192DA88D0;
  strcpy((char *)v4, "Invalid Function Argument: handle is NULL.");
  char v3 = 10;
  strcpy((char *)__p, "operator()");
  E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4);
  }
  return 1;
}

void sub_19238B8F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19238B9A0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z36e5rt_surface_desc_create_with_slicesE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z36e5rt_surface_desc_create_with_slicesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z36e5rt_surface_desc_create_with_slicesE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z36e5rt_surface_desc_create_with_slicesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19238BA10()
{
  return &unk_1EE3983D8;
}

void sub_19238BA20()
{
}

__n128 sub_19238BA34(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE3983F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19238BA80(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3983F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19238BAB0(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v1 = *(E5RT::OperandDescriptor ***)(a1 + 16);
    if (v1)
    {
      E5RT::OperandDescriptor::SurfaceDescriptor(*v1);
      operator new();
    }
    long long v5 = operator new(0x38uLL);
    long long v6 = xmmword_192DAF6B0;
    strcpy((char *)v5, "Invalid Function Argument: operand_desc is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
  }
  else
  {
    long long v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v6) < 0) {
    operator delete(v5);
  }
  return 1;
}

void sub_19238BCA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_19238BCE0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z42e5rt_surface_desc_create_from_operand_descE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z42e5rt_surface_desc_create_from_operand_descE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z42e5rt_surface_desc_create_from_operand_descE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z42e5rt_surface_desc_create_from_operand_descE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19238BD50()
{
  return &unk_1EE398458;
}

void sub_19238BD60()
{
}

__n128 sub_19238BD74(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE398478;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19238BDC0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE398478;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19238BDF0(uint64_t a1)
{
  uint64_t v1 = *(E5RT::SurfaceDescriptor ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t SurfaceWidth = E5RT::SurfaceDescriptor::GetSurfaceWidth(*v1);
      uint64_t result = 0;
      **(void **)(a1 + 16) = SurfaceWidth;
    }
    else
    {
      long long v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA90F0;
      strcpy((char *)v7, "Invalid Function Argument: width is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    long long v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_19238BF70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19238BFB0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z27e5rt_surface_desc_get_widthE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z27e5rt_surface_desc_get_widthE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z27e5rt_surface_desc_get_widthE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z27e5rt_surface_desc_get_widthE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19238C020()
{
  return &unk_1EE3984D8;
}

void sub_19238C030()
{
}

__n128 sub_19238C044(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE3984F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19238C090(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3984F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19238C0C0(uint64_t a1)
{
  uint64_t v1 = *(E5RT::SurfaceDescriptor ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t SurfaceHeight = E5RT::SurfaceDescriptor::GetSurfaceHeight(*v1);
      uint64_t result = 0;
      **(void **)(a1 + 16) = SurfaceHeight;
    }
    else
    {
      long long v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA88D0;
      strcpy((char *)v7, "Invalid Function Argument: height is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    long long v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_19238C240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19238C280(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z28e5rt_surface_desc_get_heightE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z28e5rt_surface_desc_get_heightE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z28e5rt_surface_desc_get_heightE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z28e5rt_surface_desc_get_heightE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19238C2F0()
{
  return &unk_1EE398558;
}

void sub_19238C300()
{
}

__n128 sub_19238C314(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE398578;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19238C360(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE398578;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19238C390(uint64_t a1)
{
  uint64_t v1 = *(E5RT::SurfaceDescriptor ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t SurfacePlaneCount = E5RT::SurfaceDescriptor::GetSurfacePlaneCount(*v1);
      uint64_t result = 0;
      **(void **)(a1 + 16) = SurfacePlaneCount;
    }
    else
    {
      long long v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA88E0;
      strcpy((char *)v7, "Invalid Function Argument: plane_count is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    long long v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_19238C510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19238C550(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z33e5rt_surface_desc_get_plane_countE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z33e5rt_surface_desc_get_plane_countE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z33e5rt_surface_desc_get_plane_countE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z33e5rt_surface_desc_get_plane_countE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19238C5C0()
{
  return &unk_1EE3985D8;
}

void sub_19238C5D0()
{
}

__n128 sub_19238C5E4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE3985F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19238C630(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3985F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19238C660(uint64_t a1)
{
  uint64_t v1 = *(E5RT::SurfaceDescriptor ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t SurfaceSliceCount = E5RT::SurfaceDescriptor::GetSurfaceSliceCount(*v1);
      uint64_t result = 0;
      **(void **)(a1 + 16) = SurfaceSliceCount;
    }
    else
    {
      long long v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA88E0;
      strcpy((char *)v7, "Invalid Function Argument: slice_count is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    long long v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_19238C7E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19238C820(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z33e5rt_surface_desc_get_slice_countE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z33e5rt_surface_desc_get_slice_countE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z33e5rt_surface_desc_get_slice_countE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z33e5rt_surface_desc_get_slice_countE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19238C890()
{
  return &unk_1EE398658;
}

void sub_19238C8A0()
{
}

__n128 sub_19238C8B4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE398678;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19238C900(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE398678;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19238C930(uint64_t a1)
{
  uint64_t v1 = *(E5RT::SurfaceDescriptor ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      int SurfaceFormat = E5RT::SurfaceDescriptor::GetSurfaceFormat(*v1);
      uint64_t result = 0;
      **(_DWORD **)(a1 + 16) = SurfaceFormat;
    }
    else
    {
      long long v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA88D0;
      strcpy((char *)v7, "Invalid Function Argument: format is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    long long v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_19238CAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19238CAF0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z28e5rt_surface_desc_get_formatE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z28e5rt_surface_desc_get_formatE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z28e5rt_surface_desc_get_formatE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z28e5rt_surface_desc_get_formatE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19238CB60()
{
  return &unk_1EE3986D8;
}

void sub_19238CB70()
{
}

__n128 sub_19238CB84(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE3986F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_19238CBD8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3986F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19238CC10(uint64_t a1)
{
  uint64_t v1 = *(E5RT::SurfaceDescriptor ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      if (*(void *)(a1 + 24))
      {
        CustomRowStrides = (void *)E5RT::SurfaceDescriptor::TryGetCustomRowStrides(*v1);
        **(void **)(a1 + 16) = (uint64_t)(CustomRowStrides[1] - *CustomRowStrides) >> 3;
        char v4 = (void *)E5RT::SurfaceDescriptor::TryGetCustomRowStrides(**(E5RT::SurfaceDescriptor ***)(a1 + 8));
        uint64_t result = 0;
        **(void **)(a1 + 24) = *v4;
      }
      else
      {
        long long v8 = operator new(0x40uLL);
        long long v9 = xmmword_192DB6730;
        strcpy((char *)v8, "Invalid Function Argument: bytes_per_row_strides is NULL.");
        char v7 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
        if (v7 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v9) < 0) {
          operator delete(v8);
        }
        return 1;
      }
    }
    else
    {
      long long v8 = operator new(0x40uLL);
      long long v9 = xmmword_192DB6740;
      strcpy((char *)v8, "Invalid Function Argument: bytes_per_row_strides_count is NULL.");
      char v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v9) < 0) {
        operator delete(v8);
      }
      return 1;
    }
  }
  else
  {
    long long v8 = operator new(0x30uLL);
    long long v9 = xmmword_192DA88D0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    char v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8);
    }
    return 1;
  }
  return result;
}

void sub_19238CE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19238CEA8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z40e5rt_surface_desc_get_custom_row_stridesE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z40e5rt_surface_desc_get_custom_row_stridesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z40e5rt_surface_desc_get_custom_row_stridesE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z40e5rt_surface_desc_get_custom_row_stridesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19238CF18()
{
  return &unk_1EE398758;
}

void sub_19238CF28()
{
}

__n128 sub_19238CF3C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE398778;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19238CF88(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE398778;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19238CFB8(uint64_t a1)
{
  **(_DWORD **)(a1 + 8) = E5RT::SurfaceFormatToCVPB4cc(*(_DWORD *)(a1 + 16));
  return 0;
}

uint64_t sub_19238CFEC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z31e5rt_surface_format_to_cvpb_4ccE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z31e5rt_surface_format_to_cvpb_4ccE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z31e5rt_surface_format_to_cvpb_4ccE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z31e5rt_surface_format_to_cvpb_4ccE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19238D05C()
{
  return &unk_1EE3987D8;
}

void sub_19238D06C()
{
}

__n128 sub_19238D080(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE3987F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19238D0CC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3987F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19238D0FC(uint64_t a1)
{
  **(_DWORD **)(a1 + 8) = E5RT::CVPB4ccToSurfaceFormat((E5RT *)*(unsigned int *)(a1 + 16));
  return 0;
}

uint64_t sub_19238D130(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z31e5rt_cvpb_4cc_to_surface_formatE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z31e5rt_cvpb_4cc_to_surface_formatE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z31e5rt_cvpb_4cc_to_surface_formatE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z31e5rt_cvpb_4cc_to_surface_formatE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19238D1A0()
{
  return &unk_1EE398858;
}

void sub_19238D1B0()
{
}

void *sub_19238D1C4(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE398878;
  result[1] = v3;
  return result;
}

uint64_t sub_19238D20C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE398878;
  a2[1] = v2;
  return result;
}

uint64_t sub_19238D238(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *v1;
    if (*v1)
    {
      char v4 = *(std::__shared_weak_count **)(v2 + 8);
      if (v4)
      {
        if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      MEMORY[0x192FF16B0](v2, 0x60C405C6656D0);
      uint64_t result = 0;
      **(void **)(a1 + 8) = 0;
    }
    else
    {
      long long v8 = operator new(0x30uLL);
      long long v9 = xmmword_192DA90C0;
      strcpy((char *)v8, "Invalid Function Argument: *handle is NULL.");
      char v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v9) < 0) {
        operator delete(v8);
      }
      return 1;
    }
  }
  else
  {
    long long v8 = operator new(0x30uLL);
    long long v9 = xmmword_192DA88D0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    char v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8);
    }
    return 1;
  }
  return result;
}

void sub_19238D41C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19238D45C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z25e5rt_surface_desc_releaseE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z25e5rt_surface_desc_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z25e5rt_surface_desc_releaseE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z25e5rt_surface_desc_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19238D4CC()
{
  return &unk_1EE3988D8;
}

uint64_t e5rt_surface_object_alloc(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  char v6 = operator new(0x20uLL);
  *char v6 = &unk_1EE3988F8;
  v6[1] = a1;
  v6[2] = a2;
  *((_DWORD *)v6 + 6) = a3;
  int v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_19238D5E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_create_surface_object_from_iosurface(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE398978;
  v4[1] = a1;
  uint64_t v4[2] = a2;
  long long v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19238D6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13 == v13)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
    _Unwind_Resume(a1);
  }
  sub_19238E700(a13);
  _Unwind_Resume(a1);
}

uint64_t e5rt_surface_object_get_iosurface(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE3989F8;
  v4[1] = a1;
  uint64_t v4[2] = a2;
  long long v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19238D820(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19238D838()
{
}

__n128 sub_19238D84C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE3988F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_19238D8A0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3988F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19238D8D8(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    if (*(void *)(a1 + 16)) {
      operator new();
    }
    char v4 = operator new(0x30uLL);
    long long v5 = xmmword_192DAC000;
    strcpy((char *)v4, "Invalid Function Argument: desc is NULL.");
    char v3 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v5) < 0) {
      operator delete(v4);
    }
    return 1;
  }
  else
  {
    char v4 = operator new(0x30uLL);
    long long v5 = xmmword_192DA88D0;
    strcpy((char *)v4, "Invalid Function Argument: handle is NULL.");
    char v3 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v5) < 0) {
      operator delete(v4);
    }
    return 1;
  }
}

void sub_19238DB6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19238DC20(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z25e5rt_surface_object_allocE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z25e5rt_surface_object_allocE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z25e5rt_surface_object_allocE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z25e5rt_surface_object_allocE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19238DC90()
{
  return &unk_1EE398958;
}

void sub_19238DCA0()
{
}

__n128 sub_19238DCB4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE398978;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19238DD00(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE398978;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19238DD30(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    if (*(void *)(a1 + 16)) {
      operator new();
    }
    char v4 = operator new(0x38uLL);
    long long v5 = xmmword_192DA90A0;
    strcpy((char *)v4, "Invalid Function Argument: iosurface_handle is NULL.");
    char v3 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v5) < 0) {
      operator delete(v4);
    }
    return 1;
  }
  else
  {
    char v4 = operator new(0x30uLL);
    long long v5 = xmmword_192DA88D0;
    strcpy((char *)v4, "Invalid Function Argument: handle is NULL.");
    char v3 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v5) < 0) {
      operator delete(v4);
    }
    return 1;
  }
}

void sub_19238DFC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19238E07C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z41e5rt_surface_object_create_from_iosurfaceE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z41e5rt_surface_object_create_from_iosurfaceE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z41e5rt_surface_object_create_from_iosurfaceE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z41e5rt_surface_object_create_from_iosurfaceE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19238E0EC()
{
  return &unk_1EE3989D8;
}

void sub_19238E0FC()
{
}

__n128 sub_19238E110(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE3989F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19238E15C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE3989F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19238E18C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t v3 = E5RT::SurfaceObject::GetHandle<__IOSurface *>(*v1);
      uint64_t result = 0;
      **(void **)(a1 + 16) = v3;
    }
    else
    {
      uint64_t v7 = operator new(0x38uLL);
      long long v8 = xmmword_192DA90A0;
      strcpy((char *)v7, "Invalid Function Argument: iosurface_handle is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_19238E318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19238E358(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z33e5rt_surface_object_get_iosurfaceE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z33e5rt_surface_object_get_iosurfaceE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z33e5rt_surface_object_get_iosurfaceE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z33e5rt_surface_object_get_iosurfaceE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19238E3C8()
{
  return &unk_1EE398A58;
}

void sub_19238E3D8()
{
}

void *sub_19238E3EC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE398A78;
  result[1] = v3;
  return result;
}

uint64_t sub_19238E434(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE398A78;
  a2[1] = v2;
  return result;
}

uint64_t sub_19238E460(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *v1;
    if (*v1)
    {
      char v4 = *(std::__shared_weak_count **)(v2 + 8);
      if (v4)
      {
        if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      MEMORY[0x192FF16B0](v2, 0x20C40A4A59CD2);
      uint64_t result = 0;
      **(void **)(a1 + 8) = 0;
    }
    else
    {
      long long v8 = operator new(0x30uLL);
      long long v9 = xmmword_192DA90C0;
      strcpy((char *)v8, "Invalid Function Argument: *handle is NULL.");
      char v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v9) < 0) {
        operator delete(v8);
      }
      return 1;
    }
  }
  else
  {
    long long v8 = operator new(0x30uLL);
    long long v9 = xmmword_192DA88D0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    char v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8);
    }
    return 1;
  }
  return result;
}

void sub_19238E644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19238E684(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z27e5rt_surface_object_releaseE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z27e5rt_surface_object_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z27e5rt_surface_object_releaseE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z27e5rt_surface_object_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19238E6F4()
{
  return &unk_1EE398AD8;
}

uint64_t sub_19238E700(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

uint64_t e5rt_tensor_desc_dtype_validate_spec(unsigned int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EE398DF8;
  v5[1] = a3;
  void v5[2] = a1 | (unint64_t)(a2 << 32);
  char v6 = v5;
  uint64_t v3 = E5RT::ExceptionSafeExecute((uint64_t)v5);
  if (v6 == v5)
  {
    (*(void (**)(void *))(v5[0] + 32))(v5);
  }
  else if (v6)
  {
    (*(void (**)(void))(*v6 + 40))();
  }
  return v3;
}

void sub_19238E88C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_desc_dtype_are_equal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  char v6 = operator new(0x20uLL);
  *char v6 = &unk_1EE398E78;
  v6[1] = a1;
  v6[2] = a2;
  void v6[3] = a3;
  int v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_19238E9A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_desc_dtype_get_component_pack(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE398EF8;
  v4[1] = a1;
  uint64_t v4[2] = a2;
  long long v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19238EAA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19238EABC()
{
}

__n128 sub_19238EAD0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE398AF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19238EB1C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE398AF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19238EB4C(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    operator new();
  }
  char v4 = operator new(0x30uLL);
  long long v5 = xmmword_192DA88D0;
  strcpy((char *)v4, "Invalid Function Argument: handle is NULL.");
  char v3 = 10;
  strcpy((char *)__p, "operator()");
  E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(v4);
  }
  return 1;
}

void sub_19238EC44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19238EC94(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z29e5rt_tensor_desc_dtype_createE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z29e5rt_tensor_desc_dtype_createE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z29e5rt_tensor_desc_dtype_createE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z29e5rt_tensor_desc_dtype_createE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19238ED04()
{
  return &unk_1EE398B58;
}

void sub_19238ED14()
{
}

void *sub_19238ED28(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE398B78;
  result[1] = v3;
  return result;
}

uint64_t sub_19238ED70(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE398B78;
  a2[1] = v2;
  return result;
}

uint64_t sub_19238ED9C(uint64_t a1)
{
  uint64_t v1 = *(E5RT::TensorDataType ***)(a1 + 8);
  if (v1)
  {
    if (*v1)
    {
      E5RT::TensorDataType::~TensorDataType(*v1);
      MEMORY[0x192FF16B0]();
      uint64_t result = 0;
      **(void **)(a1 + 8) = 0;
    }
    else
    {
      uint64_t v6 = operator new(0x30uLL);
      long long v7 = xmmword_192DA90C0;
      strcpy((char *)v6, "Invalid Function Argument: *handle is NULL.");
      char v5 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v6, (uint64_t *)__p);
      if (v5 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v7) < 0) {
        operator delete(v6);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v6 = operator new(0x30uLL);
    long long v7 = xmmword_192DA88D0;
    strcpy((char *)v6, "Invalid Function Argument: handle is NULL.");
    char v5 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v6, (uint64_t *)__p);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v7) < 0) {
      operator delete(v6);
    }
    return 1;
  }
  return result;
}

void sub_19238EF28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19238EF68(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z30e5rt_tensor_desc_dtype_releaseE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z30e5rt_tensor_desc_dtype_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z30e5rt_tensor_desc_dtype_releaseE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z30e5rt_tensor_desc_dtype_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19238EFD8()
{
  return &unk_1EE398BD8;
}

void sub_19238EFE8()
{
}

__n128 sub_19238EFFC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE398BF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19238F048(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE398BF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19238F078(uint64_t a1)
{
  uint64_t v2 = *(E5RT::TensorDataType::Impl ***)(a1 + 8);
  if (v2)
  {
    if (*(void *)(a1 + 16))
    {
      char NumComponents = E5RT::TensorDataType::GetNumComponents(v2);
      uint64_t result = 0;
      **(unsigned char **)(a1 + 16) = NumComponents;
    }
    else
    {
      long long v7 = operator new(0x38uLL);
      long long v8 = xmmword_192DA8900;
      strcpy((char *)v7, "Invalid Function Argument: num_components is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    long long v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_19238F1FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19238F23C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z41e5rt_tensor_desc_dtype_get_num_componentsE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z41e5rt_tensor_desc_dtype_get_num_componentsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z41e5rt_tensor_desc_dtype_get_num_componentsE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z41e5rt_tensor_desc_dtype_get_num_componentsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19238F2AC()
{
  return &unk_1EE398C58;
}

void sub_19238F2BC()
{
}

__n128 sub_19238F2D0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE398C78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19238F31C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE398C78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19238F34C(uint64_t a1)
{
  uint64_t v2 = *(E5RT::TensorDataType::Impl ***)(a1 + 8);
  if (v2)
  {
    if (*(void *)(a1 + 16))
    {
      Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v2);
      uint64_t result = 0;
      **(void **)(a1 + 16) = ElementSize;
    }
    else
    {
      long long v7 = operator new(0x38uLL);
      long long v8 = xmmword_192DAF6B0;
      strcpy((char *)v7, "Invalid Function Argument: element_size is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    long long v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_19238F4CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19238F50C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z39e5rt_tensor_desc_dtype_get_element_sizeE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z39e5rt_tensor_desc_dtype_get_element_sizeE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z39e5rt_tensor_desc_dtype_get_element_sizeE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z39e5rt_tensor_desc_dtype_get_element_sizeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19238F57C()
{
  return &unk_1EE398CD8;
}

void sub_19238F58C()
{
}

__n128 sub_19238F5A0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE398CF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19238F5EC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE398CF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19238F61C(uint64_t a1)
{
  uint64_t v2 = *(E5RT::TensorDataType::Impl ***)(a1 + 8);
  if (v2)
  {
    if (*(void *)(a1 + 16))
    {
      Componentuint64_t Size = E5RT::TensorDataType::GetComponentSize(v2);
      uint64_t result = 0;
      **(void **)(a1 + 16) = ComponentSize;
    }
    else
    {
      long long v7 = operator new(0x38uLL);
      long long v8 = xmmword_192DA8900;
      strcpy((char *)v7, "Invalid Function Argument: component_size is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    long long v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_19238F7A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19238F7E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z41e5rt_tensor_desc_dtype_get_component_sizeE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z41e5rt_tensor_desc_dtype_get_component_sizeE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z41e5rt_tensor_desc_dtype_get_component_sizeE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z41e5rt_tensor_desc_dtype_get_component_sizeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19238F854()
{
  return &unk_1EE398D58;
}

void sub_19238F864()
{
}

__n128 sub_19238F878(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE398D78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19238F8C4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE398D78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19238F8F4(uint64_t a1)
{
  uint64_t v2 = *(E5RT::TensorDataType **)(a1 + 8);
  if (v2)
  {
    if (*(void *)(a1 + 16))
    {
      int ComponentDataType = E5RT::TensorDataType::GetComponentDataType(v2);
      uint64_t result = 0;
      **(_DWORD **)(a1 + 16) = ComponentDataType;
    }
    else
    {
      long long v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA90F0;
      strcpy((char *)v7, "Invalid Function Argument: dtype is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    long long v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_19238FA70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19238FAB0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z42e5rt_tensor_desc_dtype_get_component_dtypeE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z42e5rt_tensor_desc_dtype_get_component_dtypeE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z42e5rt_tensor_desc_dtype_get_component_dtypeE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z42e5rt_tensor_desc_dtype_get_component_dtypeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19238FB20()
{
  return &unk_1EE398DD8;
}

void sub_19238FB30()
{
}

__n128 sub_19238FB44(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE398DF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19238FB90(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE398DF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19238FBC0(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    char v2 = E5RT::TensorDataType::ValidateDataTypeSpec(*(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20));
    uint64_t result = 0;
    **(unsigned char **)(a1 + 8) = v2;
  }
  else
  {
    char v6 = operator new(0x30uLL);
    long long v7 = xmmword_192DA90F0;
    strcpy((char *)v6, "Invalid Function Argument: valid is NULL.");
    char v5 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v6, (uint64_t *)__p);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v7) < 0) {
      operator delete(v6);
    }
    return 1;
  }
  return result;
}

void sub_19238FCA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19238FCE0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z36e5rt_tensor_desc_dtype_validate_specE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z36e5rt_tensor_desc_dtype_validate_specE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z36e5rt_tensor_desc_dtype_validate_specE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z36e5rt_tensor_desc_dtype_validate_specE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19238FD50()
{
  return &unk_1EE398E58;
}

void sub_19238FD60()
{
}

__n128 sub_19238FD74(uint64_t a1)
{
  char v2 = (char *)operator new(0x20uLL);
  *(void *)char v2 = &unk_1EE398E78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_19238FDC8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE398E78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19238FE00(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3)
    {
      if (*(void *)(a1 + 24))
      {
        BOOL v4 = E5RT::operator==(v2, v3);
        uint64_t result = 0;
        **(unsigned char **)(a1 + 24) = v4;
      }
      else
      {
        long long v8 = operator new(0x30uLL);
        long long v9 = xmmword_192DA90F0;
        strcpy((char *)v8, "Invalid Function Argument: equal is NULL.");
        char v7 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
        if (v7 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v9) < 0) {
          operator delete(v8);
        }
        return 1;
      }
    }
    else
    {
      long long v8 = operator new(0x30uLL);
      long long v9 = xmmword_192DA90C0;
      strcpy((char *)v8, "Invalid Function Argument: handle2 is NULL.");
      char v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v9) < 0) {
        operator delete(v8);
      }
      return 1;
    }
  }
  else
  {
    long long v8 = operator new(0x30uLL);
    long long v9 = xmmword_192DA90C0;
    strcpy((char *)v8, "Invalid Function Argument: handle1 is NULL.");
    char v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8);
    }
    return 1;
  }
  return result;
}

void sub_19239001C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192390060(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z32e5rt_tensor_desc_dtype_are_equalE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z32e5rt_tensor_desc_dtype_are_equalE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z32e5rt_tensor_desc_dtype_are_equalE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z32e5rt_tensor_desc_dtype_are_equalE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1923900D0()
{
  return &unk_1EE398ED8;
}

void sub_1923900E0()
{
}

__n128 sub_1923900F4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE398EF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192390140(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE398EF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192390170(uint64_t a1)
{
  uint64_t v2 = *(E5RT::TensorDataType **)(a1 + 8);
  if (v2)
  {
    if (*(void *)(a1 + 16))
    {
      int ComponentPack = E5RT::TensorDataType::GetComponentPack(v2);
      uint64_t result = 0;
      **(_DWORD **)(a1 + 16) = ComponentPack;
    }
    else
    {
      char v7 = operator new(0x38uLL);
      long long v8 = xmmword_192DA8900;
      strcpy((char *)v7, "Invalid Function Argument: component_pack is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    char v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_1923902F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192390334(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z41e5rt_tensor_desc_dtype_get_component_packE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z41e5rt_tensor_desc_dtype_get_component_packE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z41e5rt_tensor_desc_dtype_get_component_packE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z41e5rt_tensor_desc_dtype_get_component_packE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1923903A4()
{
  return &unk_1EE398F58;
}

uint64_t E5RT::DoesCurrentPlatformSupportPinningNetworkMemory(E5RT *this)
{
  return 0;
}

uint64_t sub_1923903B8()
{
  uint64_t v0 = MGGetStringAnswer();
  uint64_t v1 = qword_1E9301C60;
  qword_1E9301C60 = v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t sub_1923903F4()
{
  int v2 = 0;
  size_t v1 = 4;
  uint64_t result = sysctlbyname("kern.hv_vmm_present", &v2, &v1, 0, 0);
  if (!result) {
    byte_1E9301C50 = v2 != 0;
  }
  return result;
}

uint64_t E5RT::GetPlatformFromANEInformation(E5RT *this)
{
  if (qword_1E9301C80 == -1)
  {
    if (!byte_1E9301C52) {
      return 0;
    }
  }
  else
  {
    dispatch_once(&qword_1E9301C80, &unk_1EE398FC8);
    if (!byte_1E9301C52) {
      return 0;
    }
  }
  if (qword_1E9301C70 == -1)
  {
    if (byte_1E9301C51) {
      return 0;
    }
  }
  else
  {
    dispatch_once(&qword_1E9301C70, &unk_1EE398FA8);
    if (byte_1E9301C51) {
      return 0;
    }
  }
  return qword_1E9301C78;
}

void sub_19239051C()
{
  id v6 = [MEMORY[0x1E4F4E038] aneSubType];
  uint64_t v0 = [MEMORY[0x1E4F4E038] aneSubTypeVariant];
  size_t v1 = [MEMORY[0x1E4F4E038] aneSubTypeProductVariant];
  int v2 = [v6 stringByAppendingString:v0];
  unint64_t v3 = [v2 stringByAppendingString:v1];

  if (CFStringCompare(v3, @"h11", 0))
  {
    if (CFStringCompare(v3, @"m9", 0))
    {
      if (CFStringCompare(v3, @"h12", 0))
      {
        if (CFStringCompare(v3, @"h13", 0))
        {
          if (CFStringCompare(v3, @"h13g", 0))
          {
            if (CFStringCompare(v3, @"h14", 0))
            {
              if (CFEqual(v3, @"h14g")) {
                goto LABEL_23;
              }
              if (CFEqual(v3, @"h15"))
              {
                BOOL v4 = &OBJC_IVAR___ETTask__dumpData;
                uint64_t v5 = 33056;
                goto LABEL_31;
              }
              if (CFEqual(v3, @"h15g"))
              {
                BOOL v4 = &OBJC_IVAR___ETTask__dumpData;
                uint64_t v5 = 33058;
                goto LABEL_31;
              }
              if (CFEqual(v3, @"h16"))
              {
                BOOL v4 = &OBJC_IVAR___ETTask__dumpData;
                uint64_t v5 = 33072;
                goto LABEL_31;
              }
              if (CFEqual(v3, @"h16g"))
              {
                BOOL v4 = &OBJC_IVAR___ETTask__dumpData;
                uint64_t v5 = 33074;
                goto LABEL_31;
              }
              if (CFEqual(v3, @"h17"))
              {
                BOOL v4 = &OBJC_IVAR___ETTask__dumpData;
                uint64_t v5 = 33088;
                goto LABEL_31;
              }
              if (CFStringCompare(v3, @"h14g.n301", 0))
              {
                if (CFStringCompare(v3, @"m11", 0))
                {
                  if (CFStringCompare(v3, @"m10", 0))
                  {
                    byte_1E9301C51 = 1;
                    goto LABEL_32;
                  }
                  BOOL v4 = &OBJC_IVAR___ETTask__dumpData;
                  uint64_t v5 = 33537;
                }
                else
                {
                  BOOL v4 = &OBJC_IVAR___ETTask__dumpData;
                  uint64_t v5 = 33552;
                }
              }
              else
              {
LABEL_23:
                BOOL v4 = &OBJC_IVAR___ETTask__dumpData;
                uint64_t v5 = 33042;
              }
            }
            else
            {
              BOOL v4 = &OBJC_IVAR___ETTask__dumpData;
              uint64_t v5 = 33040;
            }
          }
          else
          {
            BOOL v4 = &OBJC_IVAR___ETTask__dumpData;
            uint64_t v5 = 33027;
          }
        }
        else
        {
          BOOL v4 = &OBJC_IVAR___ETTask__dumpData;
          uint64_t v5 = 33025;
        }
      }
      else
      {
        BOOL v4 = &OBJC_IVAR___ETTask__dumpData;
        uint64_t v5 = 32816;
      }
    }
    else
    {
      BOOL v4 = &OBJC_IVAR___ETTask__dumpData;
      uint64_t v5 = 32774;
    }
  }
  else
  {
    BOOL v4 = &OBJC_IVAR___ETTask__dumpData;
    uint64_t v5 = 32800;
  }
LABEL_31:
  *((void *)v4 + 399) = v5;
LABEL_32:
}

void sub_1923907E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v13 = v12;

  _Unwind_Resume(a1);
}

void sub_192390808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_192390824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_19239083C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_192390850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_192390978()
{
  uint64_t result = [MEMORY[0x1E4F4E038] hasANE];
  byte_1E9301C52 = result;
  return result;
}

uint64_t sub_1923909A0()
{
  uint64_t result = MGGetSInt64Answer();
  E5RT::GetChipID(void)::chipID = result;
  return result;
}

uint64_t e5rt_tensor_desc_create_with_alignments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v10 = operator new(0x30uLL);
  *int v10 = &unk_1EE399098;
  v10[1] = a1;
  v10[2] = a2;
  v10[3] = a3;
  v10[4] = a5;
  v10[5] = a4;
  uint64_t v14 = v10;
  uint64_t v11 = E5RT::ExceptionSafeExecute((uint64_t)v13);
  if (v14 == v13)
  {
    (*(void (**)(void *))(v13[0] + 32))(v13);
  }
  else if (v14)
  {
    (*(void (**)(void))(*v14 + 40))();
  }
  return v11;
}

void sub_192390AE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_desc_create_with_strides(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v10 = operator new(0x30uLL);
  *int v10 = &unk_1EE399118;
  v10[1] = a1;
  v10[2] = a2;
  v10[3] = a3;
  v10[4] = a5;
  v10[5] = a4;
  uint64_t v14 = v10;
  uint64_t v11 = E5RT::ExceptionSafeExecute((uint64_t)v13);
  if (v14 == v13)
  {
    (*(void (**)(void *))(v13[0] + 32))(v13);
  }
  else if (v14)
  {
    (*(void (**)(void))(*v14 + 40))();
  }
  return v11;
}

void sub_192390C18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_desc_create_from_operand_desc(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE399198;
  v4[1] = a1;
  uint64_t v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_192390D14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_desc_create_memory_object(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v8 = operator new(0x28uLL);
  *long long v8 = &unk_1EE399298;
  v8[1] = a1;
  v8[2] = a4;
  *((_DWORD *)v8 + 6) = a2;
  v8[4] = a3;
  unint64_t v12 = v8;
  uint64_t v9 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  return v9;
}

void sub_192390E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13 == v13) {
    sub_192334FEC();
  }
  else {
    sub_1923017A4(a13);
  }
  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_desc_get_rank(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE399418;
  v4[1] = a1;
  uint64_t v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_192390F54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_desc_get_byte_offset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v8 = operator new(0x28uLL);
  *long long v8 = &unk_1EE399518;
  v8[1] = a1;
  v8[2] = a2;
  v8[3] = a4;
  v8[4] = a3;
  unint64_t v12 = v8;
  uint64_t v9 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  return v9;
}

void sub_192391078(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_desc_get_dimension_length(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = operator new(0x20uLL);
  *uint64_t v6 = &unk_1EE399618;
  v6[1] = a1;
  v6[2] = a3;
  void v6[3] = a2;
  int v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_192391194(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_desc_get_dimension_stride(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = operator new(0x20uLL);
  *uint64_t v6 = &unk_1EE399698;
  v6[1] = a1;
  v6[2] = a3;
  void v6[3] = a2;
  int v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_1923912B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_desc_create_slice(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v8 = operator new(0x28uLL);
  *long long v8 = &unk_1EE399718;
  v8[1] = a1;
  v8[2] = a3;
  v8[3] = a4;
  v8[4] = a2;
  unint64_t v12 = v8;
  uint64_t v9 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  return v9;
}

void sub_1923913D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_desc_create_slice_with_lengths(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v10 = operator new(0x30uLL);
  *int v10 = &unk_1EE399798;
  v10[1] = a1;
  v10[2] = a3;
  v10[3] = a4;
  v10[4] = a2;
  v10[5] = a5;
  uint64_t v14 = v10;
  uint64_t v11 = E5RT::ExceptionSafeExecute((uint64_t)v13);
  if (v14 == v13)
  {
    (*(void (**)(void *))(v13[0] + 32))(v13);
  }
  else if (v14)
  {
    (*(void (**)(void))(*v14 + 40))();
  }
  return v11;
}

void sub_192391504(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_desc_get_num_elements(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE399818;
  v4[1] = a1;
  uint64_t v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_192391600(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_desc_has_known_shape(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE399898;
  v4[1] = a1;
  uint64_t v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1923916FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_192391714()
{
}

__n128 sub_192391728(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EE399018;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_19239177C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE399018;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1923917B4(void *a1)
{
  if (a1[1])
  {
    size_t v1 = (const void *)a1[2];
    if (v1)
    {
      if (a1[3])
      {
        uint64_t v2 = a1[4];
        long long v7 = 0uLL;
        std::string __p = 0;
        if (v2)
        {
          if (v2 < 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          std::string __p = operator new(8 * v2);
          memcpy(__p, v1, 8 * v2);
          *(void *)&long long v7 = (char *)__p + 8 * v2;
        }
        operator new();
      }
      std::string __p = operator new(0x30uLL);
      long long v7 = xmmword_192DA90F0;
      strcpy((char *)__p, "Invalid Function Argument: dtype is NULL.");
      char v5 = 10;
      strcpy((char *)v4, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&__p, v4);
      if (v5 < 0) {
        operator delete((void *)v4[0]);
      }
      if (SHIBYTE(v7) < 0) {
        operator delete(__p);
      }
      return 1;
    }
    else
    {
      std::string __p = operator new(0x30uLL);
      long long v7 = xmmword_192DA90C0;
      strcpy((char *)__p, "Invalid Function Argument: lengths is NULL.");
      char v5 = 10;
      strcpy((char *)v4, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&__p, v4);
      if (v5 < 0) {
        operator delete((void *)v4[0]);
      }
      if (SHIBYTE(v7) < 0) {
        operator delete(__p);
      }
      return 1;
    }
  }
  else
  {
    std::string __p = operator new(0x30uLL);
    long long v7 = xmmword_192DA88D0;
    strcpy((char *)__p, "Invalid Function Argument: handle is NULL.");
    char v5 = 10;
    strcpy((char *)v4, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__p, v4);
    if (v5 < 0) {
      operator delete((void *)v4[0]);
    }
    if (SHIBYTE(v7) < 0) {
      operator delete(__p);
    }
    return 1;
  }
}

void sub_192391B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_192391C0C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z23e5rt_tensor_desc_createE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z23e5rt_tensor_desc_createE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z23e5rt_tensor_desc_createE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z23e5rt_tensor_desc_createE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192391C7C()
{
  return &unk_1EE399078;
}

void sub_192391C8C()
{
}

__n128 sub_192391CA0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1EE399098;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_192391CFC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE399098;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192391D3C(void *a1)
{
  if (a1[1])
  {
    size_t v1 = (const void *)a1[2];
    if (v1)
    {
      uint64_t v2 = (const void *)a1[3];
      if (v2)
      {
        if (a1[4])
        {
          uint64_t v3 = a1[5];
          long long v10 = 0uLL;
          uint64_t v9 = 0;
          if (v3)
          {
            if (v3 < 0) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            BOOL v4 = (char *)operator new(8 * v3);
            char v5 = &v4[8 * v3];
            uint64_t v9 = v4;
            *((void *)&v10 + 1) = v5;
            memcpy(v4, v1, 8 * v3);
            *(void *)&long long v10 = v5;
            *(void *)&long long __p = operator new(8 * v3);
            memcpy((void *)__p, v2, 8 * v3);
            *((void *)&__p + 1) = __p + 8 * v3;
          }
          else
          {
            long long __p = 0uLL;
            uint64_t v8 = 0;
          }
          operator new();
        }
        uint64_t v9 = operator new(0x30uLL);
        long long v10 = xmmword_192DA90F0;
        strcpy((char *)v9, "Invalid Function Argument: dtype is NULL.");
        HIBYTE(v8) = 10;
        strcpy((char *)&__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v9, (uint64_t *)&__p);
      }
      else
      {
        uint64_t v9 = operator new(0x30uLL);
        long long v10 = xmmword_192DA88F0;
        strcpy((char *)v9, "Invalid Function Argument: alignments is NULL.");
        HIBYTE(v8) = 10;
        strcpy((char *)&__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v9, (uint64_t *)&__p);
      }
    }
    else
    {
      uint64_t v9 = operator new(0x30uLL);
      long long v10 = xmmword_192DA90C0;
      strcpy((char *)v9, "Invalid Function Argument: lengths is NULL.");
      HIBYTE(v8) = 10;
      strcpy((char *)&__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v9, (uint64_t *)&__p);
    }
  }
  else
  {
    uint64_t v9 = operator new(0x30uLL);
    long long v10 = xmmword_192DA88D0;
    strcpy((char *)v9, "Invalid Function Argument: handle is NULL.");
    HIBYTE(v8) = 10;
    strcpy((char *)&__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v9, (uint64_t *)&__p);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9);
  }
  return 1;
}

void sub_192392128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_192392214(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z39e5rt_tensor_desc_create_with_alignmentsE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z39e5rt_tensor_desc_create_with_alignmentsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z39e5rt_tensor_desc_create_with_alignmentsE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z39e5rt_tensor_desc_create_with_alignmentsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192392284()
{
  return &unk_1EE3990F8;
}

void sub_192392294()
{
}

__n128 sub_1923922A8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1EE399118;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_192392304(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE399118;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192392344(void *a1)
{
  if (a1[1])
  {
    size_t v1 = (const void *)a1[2];
    if (v1)
    {
      uint64_t v2 = (const void *)a1[3];
      if (v2)
      {
        if (a1[4])
        {
          uint64_t v3 = a1[5];
          long long v10 = 0uLL;
          uint64_t v9 = 0;
          if (v3)
          {
            if (v3 < 0) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            BOOL v4 = (char *)operator new(8 * v3);
            char v5 = &v4[8 * v3];
            uint64_t v9 = v4;
            *((void *)&v10 + 1) = v5;
            memcpy(v4, v1, 8 * v3);
            *(void *)&long long v10 = v5;
            *(void *)&long long __p = operator new(8 * v3);
            memcpy((void *)__p, v2, 8 * v3);
            *((void *)&__p + 1) = __p + 8 * v3;
          }
          else
          {
            long long __p = 0uLL;
            uint64_t v8 = 0;
          }
          operator new();
        }
        uint64_t v9 = operator new(0x30uLL);
        long long v10 = xmmword_192DA90F0;
        strcpy((char *)v9, "Invalid Function Argument: dtype is NULL.");
        HIBYTE(v8) = 10;
        strcpy((char *)&__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v9, (uint64_t *)&__p);
      }
      else
      {
        uint64_t v9 = operator new(0x30uLL);
        long long v10 = xmmword_192DA90C0;
        strcpy((char *)v9, "Invalid Function Argument: strides is NULL.");
        HIBYTE(v8) = 10;
        strcpy((char *)&__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v9, (uint64_t *)&__p);
      }
    }
    else
    {
      uint64_t v9 = operator new(0x30uLL);
      long long v10 = xmmword_192DA90C0;
      strcpy((char *)v9, "Invalid Function Argument: lengths is NULL.");
      HIBYTE(v8) = 10;
      strcpy((char *)&__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v9, (uint64_t *)&__p);
    }
  }
  else
  {
    uint64_t v9 = operator new(0x30uLL);
    long long v10 = xmmword_192DA88D0;
    strcpy((char *)v9, "Invalid Function Argument: handle is NULL.");
    HIBYTE(v8) = 10;
    strcpy((char *)&__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v9, (uint64_t *)&__p);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9);
  }
  return 1;
}

void sub_192392730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19239281C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z36e5rt_tensor_desc_create_with_stridesE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z36e5rt_tensor_desc_create_with_stridesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z36e5rt_tensor_desc_create_with_stridesE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z36e5rt_tensor_desc_create_with_stridesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19239288C()
{
  return &unk_1EE399178;
}

void sub_19239289C()
{
}

__n128 sub_1923928B0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE399198;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1923928FC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE399198;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19239292C(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    size_t v1 = *(E5RT::OperandDescriptor ***)(a1 + 16);
    if (v1)
    {
      E5RT::OperandDescriptor::TensorDescriptor(*v1);
      operator new();
    }
    char v5 = operator new(0x38uLL);
    long long v6 = xmmword_192DAF6B0;
    strcpy((char *)v5, "Invalid Function Argument: operand_desc is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
  }
  else
  {
    char v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v6) < 0) {
    operator delete(v5);
  }
  return 1;
}

void sub_192392B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_192392B5C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z41e5rt_tensor_desc_create_from_operand_descE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z41e5rt_tensor_desc_create_from_operand_descE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z41e5rt_tensor_desc_create_from_operand_descE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z41e5rt_tensor_desc_create_from_operand_descE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192392BCC()
{
  return &unk_1EE3991F8;
}

void sub_192392BDC()
{
}

void *sub_192392BF0(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE399218;
  result[1] = v3;
  return result;
}

uint64_t sub_192392C38(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE399218;
  a2[1] = v2;
  return result;
}

uint64_t sub_192392C64(uint64_t a1)
{
  size_t v1 = *(uint64_t **)(a1 + 8);
  if (v1)
  {
    uint64_t v2 = *v1;
    if (*v1)
    {
      char v4 = *(std::__shared_weak_count **)(v2 + 8);
      if (v4)
      {
        if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      MEMORY[0x192FF16B0](v2, 0x60C405C6656D0);
      uint64_t result = 0;
      **(void **)(a1 + 8) = 0;
    }
    else
    {
      uint64_t v8 = operator new(0x30uLL);
      long long v9 = xmmword_192DA90C0;
      strcpy((char *)v8, "Invalid Function Argument: *handle is NULL.");
      char v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v9) < 0) {
        operator delete(v8);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v8 = operator new(0x30uLL);
    long long v9 = xmmword_192DA88D0;
    strcpy((char *)v8, "Invalid Function Argument: handle is NULL.");
    char v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8);
    }
    return 1;
  }
  return result;
}

void sub_192392E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192392E88(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z24e5rt_tensor_desc_releaseE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z24e5rt_tensor_desc_releaseE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z24e5rt_tensor_desc_releaseE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z24e5rt_tensor_desc_releaseE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192392EF8()
{
  return &unk_1EE399278;
}

void sub_192392F08()
{
}

__n128 sub_192392F1C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EE399298;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_192392F70(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE399298;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192392FA8(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    if (*(void *)(a1 + 16)) {
      operator new();
    }
    char v4 = operator new(0x38uLL);
    long long v5 = xmmword_192DAB900;
    strcpy((char *)v4, "Invalid Function Argument: buffer_handle is NULL.");
    char v3 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v5) < 0) {
      operator delete(v4);
    }
    return 1;
  }
  else
  {
    char v4 = operator new(0x30uLL);
    long long v5 = xmmword_192DA88D0;
    strcpy((char *)v4, "Invalid Function Argument: handle is NULL.");
    char v3 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v4, (uint64_t *)__p);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v5) < 0) {
      operator delete(v4);
    }
    return 1;
  }
}

void sub_192393244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1923932F8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z36e5rt_tensor_desc_alloc_buffer_objectE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z36e5rt_tensor_desc_alloc_buffer_objectE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z36e5rt_tensor_desc_alloc_buffer_objectE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z36e5rt_tensor_desc_alloc_buffer_objectE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192393368()
{
  return &unk_1EE3992F8;
}

void sub_192393378()
{
}

__n128 sub_19239338C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE399318;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1923933D8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE399318;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192393408(uint64_t a1)
{
  size_t v1 = *(E5RT::TensorDescriptor ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      E5RT::TensorDescriptor::GetTensorDataTypeRef(*v1);
      operator new();
    }
    long long v5 = operator new(0x38uLL);
    long long v6 = xmmword_192DAF6B0;
    strcpy((char *)v5, "Invalid Function Argument: dtype_handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
  else
  {
    long long v5 = operator new(0x30uLL);
    long long v6 = xmmword_192DA88D0;
    strcpy((char *)v5, "Invalid Function Argument: handle is NULL.");
    char v4 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v5, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(v5);
    }
    return 1;
  }
}

void sub_1923935BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_1923935FC(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0xA0C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t sub_192393620(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z29e5rt_tensor_desc_retain_dtypeE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z29e5rt_tensor_desc_retain_dtypeE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z29e5rt_tensor_desc_retain_dtypeE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z29e5rt_tensor_desc_retain_dtypeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192393690()
{
  return &unk_1EE399378;
}

void sub_1923936A0()
{
}

__n128 sub_1923936B4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE399398;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192393700(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE399398;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192393730(uint64_t a1)
{
  uint64_t v1 = *(E5RT::TensorDescriptorImpl ****)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t Size = E5RT::TensorDescriptor::GetSize(*v1);
      uint64_t result = 0;
      **(void **)(a1 + 16) = Size;
    }
    else
    {
      char v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DAC000;
      strcpy((char *)v7, "Invalid Function Argument: size is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    char v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_1923938B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1923938F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z25e5rt_tensor_desc_get_sizeE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z25e5rt_tensor_desc_get_sizeE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z25e5rt_tensor_desc_get_sizeE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z25e5rt_tensor_desc_get_sizeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192393960()
{
  return &unk_1EE3993F8;
}

void sub_192393970()
{
}

__n128 sub_192393984(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE399418;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1923939D0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE399418;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192393A00(uint64_t a1)
{
  uint64_t v1 = *(E5RT::TensorDescriptor ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      unint64_t Rank = E5RT::TensorDescriptor::GetRank(*v1);
      uint64_t result = 0;
      **(void **)(a1 + 16) = Rank;
    }
    else
    {
      char v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DAC000;
      strcpy((char *)v7, "Invalid Function Argument: rank is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    char v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_192393B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192393BC0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z25e5rt_tensor_desc_get_rankE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z25e5rt_tensor_desc_get_rankE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z25e5rt_tensor_desc_get_rankE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z25e5rt_tensor_desc_get_rankE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192393C30()
{
  return &unk_1EE399478;
}

void sub_192393C40()
{
}

__n128 sub_192393C54(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE399498;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_192393CA8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE399498;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192393CE0(uint64_t a1)
{
  uint64_t v1 = *(E5RT::TensorDescriptor ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      if (*(void *)(a1 + 24))
      {
        **(void **)(a1 + 24) = *(void *)E5RT::TensorDescriptor::GetTensorShape(*v1);
        unint64_t Rank = E5RT::TensorDescriptor::GetRank(**(E5RT::TensorDescriptor ***)(a1 + 8));
        uint64_t result = 0;
        **(void **)(a1 + 16) = Rank;
      }
      else
      {
        char v7 = operator new(0x30uLL);
        long long v8 = xmmword_192DA90F0;
        strcpy((char *)v7, "Invalid Function Argument: shape is NULL.");
        char v6 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v8) < 0) {
          operator delete(v7);
        }
        return 1;
      }
    }
    else
    {
      char v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DAC000;
      strcpy((char *)v7, "Invalid Function Argument: rank is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    char v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_192393F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192393F5C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z26e5rt_tensor_desc_get_shapeE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z26e5rt_tensor_desc_get_shapeE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z26e5rt_tensor_desc_get_shapeE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z26e5rt_tensor_desc_get_shapeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192393FCC()
{
  return &unk_1EE3994F8;
}

void sub_192393FDC()
{
}

__n128 sub_192393FF0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EE399518;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_192394044(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE399518;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19239407C(uint64_t a1)
{
  uint64_t v1 = *(E5RT::TensorDescriptor ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      if (*(void *)(a1 + 24))
      {
        uint64_t v3 = *(void *)(a1 + 32);
        if (v3 == E5RT::TensorDescriptor::GetRank(*v1))
        {
          unint64_t v4 = *(void *)(a1 + 32);
          long long v9 = 0uLL;
          long long __p = 0;
          if (v4)
          {
            if (v4 >> 61) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            long long __p = operator new(8 * v4);
            *((void *)&v9 + 1) = (char *)__p + 8 * v4;
            bzero(__p, 8 * v4);
            *(void *)&long long v9 = *((void *)&v9 + 1);
            memmove(__p, *(const void **)(a1 + 16), 8 * v4);
          }
          **(void **)(a1 + 24) = E5RT::TensorDescriptor::GetByteOffset(**(void **)(a1 + 8), (uint64_t *)&__p);
          if (__p)
          {
            *(void *)&long long v9 = __p;
            operator delete(__p);
          }
          return 0;
        }
        long long __p = operator new(0x40uLL);
        long long v9 = xmmword_192DAA900;
        strcpy((char *)__p, "Invalid Function Argument: rank does not match tensor shape.");
        char v7 = 10;
        strcpy((char *)v6, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&__p, v6);
      }
      else
      {
        long long __p = operator new(0x30uLL);
        long long v9 = xmmword_192DA88D0;
        strcpy((char *)__p, "Invalid Function Argument: offset is NULL.");
        char v7 = 10;
        strcpy((char *)v6, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&__p, v6);
      }
    }
    else
    {
      long long __p = operator new(0x30uLL);
      long long v9 = xmmword_192DAA4A0;
      strcpy((char *)__p, "Invalid Function Argument: position is NULL.");
      char v7 = 10;
      strcpy((char *)v6, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&__p, v6);
    }
  }
  else
  {
    long long __p = operator new(0x30uLL);
    long long v9 = xmmword_192DA88D0;
    strcpy((char *)__p, "Invalid Function Argument: handle is NULL.");
    char v7 = 10;
    strcpy((char *)v6, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__p, v6);
  }
  if (v7 < 0) {
    operator delete((void *)v6[0]);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  return 1;
}

void sub_192394340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_192394390(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z32e5rt_tensor_desc_get_byte_offsetE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z32e5rt_tensor_desc_get_byte_offsetE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z32e5rt_tensor_desc_get_byte_offsetE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z32e5rt_tensor_desc_get_byte_offsetE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192394400()
{
  return &unk_1EE399578;
}

void sub_192394410()
{
}

__n128 sub_192394424(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE399598;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_192394478(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE399598;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1923944B0(uint64_t a1)
{
  uint64_t v1 = *(E5RT::TensorDescriptor ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      if (*(void *)(a1 + 24))
      {
        **(void **)(a1 + 24) = *(void *)E5RT::TensorDescriptor::GetTensorStrides(*v1);
        unint64_t Rank = E5RT::TensorDescriptor::GetRank(**(E5RT::TensorDescriptor ***)(a1 + 8));
        uint64_t result = 0;
        **(void **)(a1 + 16) = Rank;
      }
      else
      {
        char v7 = operator new(0x30uLL);
        long long v8 = xmmword_192DA90C0;
        strcpy((char *)v7, "Invalid Function Argument: strides is NULL.");
        char v6 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
        if (v6 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v8) < 0) {
          operator delete(v7);
        }
        return 1;
      }
    }
    else
    {
      char v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DAC000;
      strcpy((char *)v7, "Invalid Function Argument: rank is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    char v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_1923946E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19239472C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z28e5rt_tensor_desc_get_stridesE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z28e5rt_tensor_desc_get_stridesE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z28e5rt_tensor_desc_get_stridesE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z28e5rt_tensor_desc_get_stridesE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19239479C()
{
  return &unk_1EE3995F8;
}

void sub_1923947AC()
{
}

__n128 sub_1923947C0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE399618;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_192394814(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE399618;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19239484C(uint64_t a1)
{
  uint64_t v1 = *(E5RT::TensorDescriptor ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      unint64_t v3 = *(void *)(a1 + 24);
      if (v3 >= E5RT::TensorDescriptor::GetRank(*v1))
      {
        long long v9 = operator new(0x38uLL);
        long long v10 = xmmword_192DAA490;
        strcpy((char *)v9, "Invalid Function Argument: Dimension index is invalid.");
        char v8 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v9, (uint64_t *)__p);
        if (v8 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v10) < 0) {
          operator delete(v9);
        }
        return 1;
      }
      else
      {
        unint64_t v4 = (E5RT::TensorDimension *)E5RT::TensorDescriptor::operator[](**(void **)(a1 + 8), *(void *)(a1 + 24));
        uint64_t Length = E5RT::TensorDimension::GetLength(v4);
        uint64_t result = 0;
        **(void **)(a1 + 16) = Length;
      }
    }
    else
    {
      long long v9 = operator new(0x30uLL);
      long long v10 = xmmword_192DA88D0;
      strcpy((char *)v9, "Invalid Function Argument: length is NULL.");
      char v8 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v9, (uint64_t *)__p);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v10) < 0) {
        operator delete(v9);
      }
      return 1;
    }
  }
  else
  {
    long long v9 = operator new(0x30uLL);
    long long v10 = xmmword_192DA88D0;
    strcpy((char *)v9, "Invalid Function Argument: handle is NULL.");
    char v8 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v9, (uint64_t *)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v10) < 0) {
      operator delete(v9);
    }
    return 1;
  }
  return result;
}

void sub_192394A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192394AD0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z37e5rt_tensor_desc_get_dimension_lengthE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z37e5rt_tensor_desc_get_dimension_lengthE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z37e5rt_tensor_desc_get_dimension_lengthE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z37e5rt_tensor_desc_get_dimension_lengthE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192394B40()
{
  return &unk_1EE399678;
}

void sub_192394B50()
{
}

__n128 sub_192394B64(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE399698;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_192394BB8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE399698;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192394BF0(uint64_t a1)
{
  uint64_t v1 = *(E5RT::TensorDescriptor ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      unint64_t v3 = *(void *)(a1 + 24);
      if (v3 >= E5RT::TensorDescriptor::GetRank(*v1))
      {
        long long v9 = operator new(0x38uLL);
        long long v10 = xmmword_192DAA490;
        strcpy((char *)v9, "Invalid Function Argument: Dimension index is invalid.");
        char v8 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v9, (uint64_t *)__p);
        if (v8 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v10) < 0) {
          operator delete(v9);
        }
        return 1;
      }
      else
      {
        unint64_t v4 = (E5RT::TensorDimension *)E5RT::TensorDescriptor::operator[](**(void **)(a1 + 8), *(void *)(a1 + 24));
        uint64_t Stride = E5RT::TensorDimension::GetStride(v4);
        uint64_t result = 0;
        **(void **)(a1 + 16) = Stride;
      }
    }
    else
    {
      long long v9 = operator new(0x30uLL);
      long long v10 = xmmword_192DA88D0;
      strcpy((char *)v9, "Invalid Function Argument: stride is NULL.");
      char v8 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v9, (uint64_t *)__p);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v10) < 0) {
        operator delete(v9);
      }
      return 1;
    }
  }
  else
  {
    long long v9 = operator new(0x30uLL);
    long long v10 = xmmword_192DA88D0;
    strcpy((char *)v9, "Invalid Function Argument: handle is NULL.");
    char v8 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v9, (uint64_t *)__p);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v10) < 0) {
      operator delete(v9);
    }
    return 1;
  }
  return result;
}

void sub_192394E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192394E74(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z37e5rt_tensor_desc_get_dimension_strideE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z37e5rt_tensor_desc_get_dimension_strideE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z37e5rt_tensor_desc_get_dimension_strideE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z37e5rt_tensor_desc_get_dimension_strideE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192394EE4()
{
  return &unk_1EE3996F8;
}

void sub_192394EF4()
{
}

__n128 sub_192394F08(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EE399718;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_192394F5C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE399718;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192394F94(void *a1)
{
  if (a1[1])
  {
    uint64_t v1 = (const void *)a1[2];
    if (v1)
    {
      if (a1[3])
      {
        uint64_t v2 = a1[4];
        long long v7 = 0uLL;
        long long __p = 0;
        if (v2)
        {
          if (v2 < 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          long long __p = operator new(8 * v2);
          memcpy(__p, v1, 8 * v2);
          *(void *)&long long v7 = (char *)__p + 8 * v2;
        }
        operator new();
      }
      long long __p = operator new(0x38uLL);
      long long v7 = xmmword_192DAF6B0;
      strcpy((char *)__p, "Invalid Function Argument: slice_handle is NULL.");
      char v5 = 10;
      strcpy((char *)v4, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&__p, v4);
      if (v5 < 0) {
        operator delete((void *)v4[0]);
      }
      if (SHIBYTE(v7) < 0) {
        operator delete(__p);
      }
      return 1;
    }
    else
    {
      long long __p = operator new(0x30uLL);
      long long v7 = xmmword_192DA90C0;
      strcpy((char *)__p, "Invalid Function Argument: offsets is NULL.");
      char v5 = 10;
      strcpy((char *)v4, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&__p, v4);
      if (v5 < 0) {
        operator delete((void *)v4[0]);
      }
      if (SHIBYTE(v7) < 0) {
        operator delete(__p);
      }
      return 1;
    }
  }
  else
  {
    long long __p = operator new(0x30uLL);
    long long v7 = xmmword_192DA88D0;
    strcpy((char *)__p, "Invalid Function Argument: handle is NULL.");
    char v5 = 10;
    strcpy((char *)v4, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&__p, v4);
    if (v5 < 0) {
      operator delete((void *)v4[0]);
    }
    if (SHIBYTE(v7) < 0) {
      operator delete(__p);
    }
    return 1;
  }
}

void sub_192395324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1923953F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z29e5rt_tensor_desc_create_sliceE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z29e5rt_tensor_desc_create_sliceE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z29e5rt_tensor_desc_create_sliceE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z29e5rt_tensor_desc_create_sliceE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192395460()
{
  return &unk_1EE399778;
}

void sub_192395470()
{
}

__n128 sub_192395484(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1EE399798;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_1923954E0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE399798;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192395520(void *a1)
{
  if (a1[1])
  {
    uint64_t v1 = (const void *)a1[2];
    if (v1)
    {
      uint64_t v2 = (const void *)a1[3];
      if (v2)
      {
        uint64_t v3 = a1[4];
        long long v10 = 0uLL;
        long long v9 = 0;
        if (v3)
        {
          if (v3 < 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v4 = (char *)operator new(8 * v3);
          char v5 = &v4[8 * v3];
          long long v9 = v4;
          *((void *)&v10 + 1) = v5;
          memcpy(v4, v1, 8 * v3);
          *(void *)&long long v10 = v5;
          *(void *)&long long __p = operator new(8 * v3);
          memcpy((void *)__p, v2, 8 * v3);
          *((void *)&__p + 1) = __p + 8 * v3;
        }
        else
        {
          long long __p = 0uLL;
          uint64_t v8 = 0;
        }
        operator new();
      }
      long long v9 = operator new(0x30uLL);
      long long v10 = xmmword_192DA90C0;
      strcpy((char *)v9, "Invalid Function Argument: lengths is NULL.");
      HIBYTE(v8) = 10;
      strcpy((char *)&__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v9, (uint64_t *)&__p);
    }
    else
    {
      long long v9 = operator new(0x30uLL);
      long long v10 = xmmword_192DA90C0;
      strcpy((char *)v9, "Invalid Function Argument: offsets is NULL.");
      HIBYTE(v8) = 10;
      strcpy((char *)&__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v9, (uint64_t *)&__p);
    }
  }
  else
  {
    long long v9 = operator new(0x30uLL);
    long long v10 = xmmword_192DA88D0;
    strcpy((char *)v9, "Invalid Function Argument: handle is NULL.");
    HIBYTE(v8) = 10;
    strcpy((char *)&__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v9, (uint64_t *)&__p);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9);
  }
  return 1;
}

void sub_1923958A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_192395988(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z42e5rt_tensor_desc_create_slice_with_lengthsE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z42e5rt_tensor_desc_create_slice_with_lengthsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z42e5rt_tensor_desc_create_slice_with_lengthsE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z42e5rt_tensor_desc_create_slice_with_lengthsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1923959F8()
{
  return &unk_1EE3997F8;
}

void sub_192395A08()
{
}

__n128 sub_192395A1C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE399818;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192395A68(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE399818;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192395A98(uint64_t a1)
{
  uint64_t v1 = *(E5RT::TensorDescriptorImpl ****)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t NumElements = E5RT::TensorDescriptor::GetNumElements(*v1);
      uint64_t result = 0;
      **(void **)(a1 + 16) = NumElements;
    }
    else
    {
      long long v7 = operator new(0x38uLL);
      long long v8 = xmmword_192DAF6B0;
      strcpy((char *)v7, "Invalid Function Argument: num_elements is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    long long v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_192395C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192395C58(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z33e5rt_tensor_desc_get_num_elementsE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z33e5rt_tensor_desc_get_num_elementsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z33e5rt_tensor_desc_get_num_elementsE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z33e5rt_tensor_desc_get_num_elementsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192395CC8()
{
  return &unk_1EE399878;
}

void sub_192395CD8()
{
}

__n128 sub_192395CEC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE399898;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_192395D38(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE399898;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192395D68(uint64_t a1)
{
  uint64_t v1 = *(E5RT::TensorDescriptor ***)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      char HasKnownShape = E5RT::TensorDescriptor::HasKnownShape(*v1);
      uint64_t result = 0;
      **(unsigned char **)(a1 + 16) = HasKnownShape;
    }
    else
    {
      long long v7 = operator new(0x30uLL);
      long long v8 = xmmword_192DA90F0;
      strcpy((char *)v7, "Invalid Function Argument: known is NULL.");
      char v6 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v8) < 0) {
        operator delete(v7);
      }
      return 1;
    }
  }
  else
  {
    long long v7 = operator new(0x30uLL);
    long long v8 = xmmword_192DA88D0;
    strcpy((char *)v7, "Invalid Function Argument: handle is NULL.");
    char v6 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v7, (uint64_t *)__p);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7);
    }
    return 1;
  }
  return result;
}

void sub_192395EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192395F28(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z32e5rt_tensor_desc_has_known_shapeE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z32e5rt_tensor_desc_has_known_shapeE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z32e5rt_tensor_desc_has_known_shapeE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z32e5rt_tensor_desc_has_known_shapeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192395F98()
{
  return &unk_1EE3998F8;
}

uint64_t e5rt_tensor_utils_get_fp32_element(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = operator new(0x38uLL);
  *unint64_t v12 = &unk_1EE399918;
  v12[1] = a1;
  v12[2] = a2;
  void v12[3] = a3;
  v12[4] = a4;
  *((unsigned char *)v12 + 40) = a5;
  v12[6] = a6;
  std::string::size_type v16 = v12;
  uint64_t v13 = E5RT::ExceptionSafeExecute((uint64_t)v15);
  if (v16 == v15)
  {
    (*(void (**)(void *))(v15[0] + 32))(v15);
  }
  else if (v16)
  {
    (*(void (**)(void))(*v16 + 40))();
  }
  return v13;
}

void sub_1923960CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_utils_set_fp32_element(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, float a6)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = operator new(0x30uLL);
  *unint64_t v12 = &unk_1EE399998;
  v12[1] = a1;
  v12[2] = a2;
  void v12[3] = a3;
  v12[4] = a4;
  *((unsigned char *)v12 + 40) = a5;
  *((float *)v12 + 11) = a6;
  std::string::size_type v16 = v12;
  uint64_t v13 = E5RT::ExceptionSafeExecute((uint64_t)v15);
  if (v16 == v15)
  {
    (*(void (**)(void *))(v15[0] + 32))(v15);
  }
  else if (v16)
  {
    (*(void (**)(void))(*v16 + 40))();
  }
  return v13;
}

void sub_192396210(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_utils_get_fp16_element(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = operator new(0x38uLL);
  *unint64_t v12 = &unk_1EE399A18;
  v12[1] = a1;
  v12[2] = a2;
  void v12[3] = a3;
  v12[4] = a4;
  *((unsigned char *)v12 + 40) = a5;
  v12[6] = a6;
  std::string::size_type v16 = v12;
  uint64_t v13 = E5RT::ExceptionSafeExecute((uint64_t)v15);
  if (v16 == v15)
  {
    (*(void (**)(void *))(v15[0] + 32))(v15);
  }
  else if (v16)
  {
    (*(void (**)(void))(*v16 + 40))();
  }
  return v13;
}

void sub_19239634C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_utils_set_fp16_element(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, __n128 a6)
{
  unsigned __int16 v6 = a6.n128_u16[0];
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = operator new(0x30uLL);
  *unint64_t v12 = &unk_1EE399A98;
  v12[1] = a1;
  v12[2] = a2;
  void v12[3] = a3;
  v12[4] = a4;
  *((unsigned char *)v12 + 40) = a5;
  *((_WORD *)v12 + 21) = v6;
  std::string::size_type v16 = v12;
  uint64_t v13 = E5RT::ExceptionSafeExecute((uint64_t)v15);
  if (v16 == v15)
  {
    (*(void (**)(void *))(v15[0] + 32))(v15);
  }
  else if (v16)
  {
    (*(void (**)(void))(*v16 + 40))();
  }
  return v13;
}

void sub_192396490(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_utils_get_u8_element(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = operator new(0x38uLL);
  *unint64_t v12 = &unk_1EE399B18;
  v12[1] = a1;
  v12[2] = a2;
  void v12[3] = a3;
  v12[4] = a4;
  *((unsigned char *)v12 + 40) = a5;
  v12[6] = a6;
  std::string::size_type v16 = v12;
  uint64_t v13 = E5RT::ExceptionSafeExecute((uint64_t)v15);
  if (v16 == v15)
  {
    (*(void (**)(void *))(v15[0] + 32))(v15);
  }
  else if (v16)
  {
    (*(void (**)(void))(*v16 + 40))();
  }
  return v13;
}

void sub_1923965CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_utils_set_u8_element(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = operator new(0x30uLL);
  *unint64_t v12 = &unk_1EE399B98;
  v12[1] = a1;
  v12[2] = a2;
  void v12[3] = a3;
  v12[4] = a4;
  *((unsigned char *)v12 + 40) = a5;
  *((unsigned char *)v12 + 41) = a6;
  std::string::size_type v16 = v12;
  uint64_t v13 = E5RT::ExceptionSafeExecute((uint64_t)v15);
  if (v16 == v15)
  {
    (*(void (**)(void *))(v15[0] + 32))(v15);
  }
  else if (v16)
  {
    (*(void (**)(void))(*v16 + 40))();
  }
  return v13;
}

void sub_192396708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_utils_get_s8_element(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = operator new(0x38uLL);
  *unint64_t v12 = &unk_1EE399C18;
  v12[1] = a1;
  v12[2] = a2;
  void v12[3] = a3;
  v12[4] = a4;
  *((unsigned char *)v12 + 40) = a5;
  v12[6] = a6;
  std::string::size_type v16 = v12;
  uint64_t v13 = E5RT::ExceptionSafeExecute((uint64_t)v15);
  if (v16 == v15)
  {
    (*(void (**)(void *))(v15[0] + 32))(v15);
  }
  else if (v16)
  {
    (*(void (**)(void))(*v16 + 40))();
  }
  return v13;
}

void sub_192396844(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_utils_set_s8_element(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = operator new(0x30uLL);
  *unint64_t v12 = &unk_1EE399C98;
  v12[1] = a1;
  v12[2] = a2;
  void v12[3] = a3;
  v12[4] = a4;
  *((unsigned char *)v12 + 40) = a5;
  *((unsigned char *)v12 + 41) = a6;
  std::string::size_type v16 = v12;
  uint64_t v13 = E5RT::ExceptionSafeExecute((uint64_t)v15);
  if (v16 == v15)
  {
    (*(void (**)(void *))(v15[0] + 32))(v15);
  }
  else if (v16)
  {
    (*(void (**)(void))(*v16 + 40))();
  }
  return v13;
}

void sub_192396980(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_utils_copy_tensor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v8 = operator new(0x28uLL);
  *long long v8 = &unk_1EE399D18;
  v8[1] = a1;
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  unint64_t v12 = v8;
  uint64_t v9 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  return v9;
}

void sub_192396AA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_utils_are_tensors_equal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = operator new(0x30uLL);
  *long long v10 = &unk_1EE399D98;
  v10[1] = a1;
  v10[2] = a2;
  v10[3] = a3;
  v10[4] = a4;
  v10[5] = a5;
  uint64_t v14 = v10;
  uint64_t v11 = E5RT::ExceptionSafeExecute((uint64_t)v13);
  if (v14 == v13)
  {
    (*(void (**)(void *))(v13[0] + 32))(v13);
  }
  else if (v14)
  {
    (*(void (**)(void))(*v14 + 40))();
  }
  return v11;
}

void sub_192396BD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_utils_cast_from_fp32_to_fp16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v8 = operator new(0x28uLL);
  *long long v8 = &unk_1EE399E18;
  v8[1] = a1;
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  unint64_t v12 = v8;
  uint64_t v9 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  return v9;
}

void sub_192396CF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_utils_cast_from_fp16_to_fp32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v8 = operator new(0x28uLL);
  *long long v8 = &unk_1EE399E98;
  v8[1] = a1;
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  unint64_t v12 = v8;
  uint64_t v9 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  return v9;
}

void sub_192396E1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_utils_quantize_from_fp32_to_u8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = (float *)operator new(0x30uLL);
  *(void *)long long v10 = &unk_1EE399F18;
  *((void *)v10 + 1) = a1;
  *((void *)v10 + 2) = a2;
  *((void *)v10 + 3) = a3;
  *((void *)v10 + 4) = a4;
  v10[10] = a5;
  uint64_t v14 = v10;
  uint64_t v11 = E5RT::ExceptionSafeExecute((uint64_t)v13);
  if (v14 == (float *)v13)
  {
    (*(void (**)(void *))(v13[0] + 32))(v13);
  }
  else if (v14)
  {
    (*(void (**)(void))(*(void *)v14 + 40))();
  }
  return v11;
}

void sub_192396F50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_utils_dequantize_from_s8_to_fp32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = (float *)operator new(0x30uLL);
  *(void *)long long v10 = &unk_1EE399F98;
  *((void *)v10 + 1) = a1;
  *((void *)v10 + 2) = a2;
  *((void *)v10 + 3) = a3;
  *((void *)v10 + 4) = a4;
  v10[10] = a5;
  uint64_t v14 = v10;
  uint64_t v11 = E5RT::ExceptionSafeExecute((uint64_t)v13);
  if (v14 == (float *)v13)
  {
    (*(void (**)(void *))(v13[0] + 32))(v13);
  }
  else if (v14)
  {
    (*(void (**)(void))(*(void *)v14 + 40))();
  }
  return v11;
}

void sub_192397084(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_utils_dequantize_from_u8_to_fp32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  long long v10 = (float *)operator new(0x30uLL);
  *(void *)long long v10 = &unk_1EE39A018;
  *((void *)v10 + 1) = a1;
  *((void *)v10 + 2) = a2;
  *((void *)v10 + 3) = a3;
  *((void *)v10 + 4) = a4;
  v10[10] = a5;
  uint64_t v14 = v10;
  uint64_t v11 = E5RT::ExceptionSafeExecute((uint64_t)v13);
  if (v14 == (float *)v13)
  {
    (*(void (**)(void *))(v13[0] + 32))(v13);
  }
  else if (v14)
  {
    (*(void (**)(void))(*(void *)v14 + 40))();
  }
  return v11;
}

void sub_1923971B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1923971D0()
{
}

__n128 sub_1923971E4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_1EE399918;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_192397240(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE399918;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192397280(uint64_t a1)
{
  uint64_t v2 = *(E5RT::TensorDescriptor ***)(a1 + 8);
  uint64_t v1 = *(E5RT::BufferObject ***)(a1 + 16);
  long long v3 = *(const void **)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  unsigned int v5 = *(unsigned __int8 *)(a1 + 40);
  unsigned __int16 v6 = *(_DWORD **)(a1 + 48);
  char v11 = 10;
  strcpy((char *)v10, "operator()");
  if (!v2)
  {
    long long __p = operator new(0x30uLL);
    long long v15 = xmmword_192DA88E0;
    strcpy((char *)__p, "Invalid Function Argument: desc_handle is NULL.");
    char v13 = 14;
    strcpy((char *)v12, "TensorGetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
LABEL_24:
    if (v13 < 0) {
      operator delete((void *)v12[0]);
    }
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      return 1;
    }
    uint64_t v9 = __p;
    goto LABEL_17;
  }
  if (!v1)
  {
    long long __p = operator new(0x38uLL);
    long long v15 = xmmword_192DAB900;
    strcpy((char *)__p, "Invalid Function Argument: buffer_handle is NULL.");
    char v13 = 14;
    strcpy((char *)v12, "TensorGetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_24;
  }
  if (!v3)
  {
    long long __p = operator new(0x30uLL);
    long long v15 = xmmword_192DAA4A0;
    strcpy((char *)__p, "Invalid Function Argument: position is NULL.");
    char v13 = 14;
    strcpy((char *)v12, "TensorGetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_24;
  }
  if (!v6)
  {
    long long __p = operator new(0x30uLL);
    long long v15 = xmmword_192DA90F0;
    strcpy((char *)__p, "Invalid Function Argument: value is NULL.");
    char v13 = 14;
    strcpy((char *)v12, "TensorGetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_24;
  }
  uint64_t TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(*v2);
  if (!E5RT::TensorDataType::IsType<float>(TensorDataTypeRef))
  {
    long long __p = operator new(0x40uLL);
    long long v15 = xmmword_192DA8920;
    strcpy((char *)__p, "Invalid Function Argument: Tensor is not of expected type.");
    E5RT::LogErrorMessage((uint64_t *)&__p, v10);
    if (SHIBYTE(v15) < 0)
    {
      operator delete(__p);
      if (v11 < 0)
      {
LABEL_16:
        uint64_t v9 = (void *)v10[0];
LABEL_17:
        operator delete(v9);
      }
    }
    else if (v11 < 0)
    {
      goto LABEL_16;
    }
    return 1;
  }
  long long __p = 0;
  long long v15 = 0uLL;
  if (v4)
  {
    if (v4 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    long long __p = operator new(8 * v4);
    *((void *)&v15 + 1) = (char *)__p + 8 * v4;
    memcpy(__p, v3, 8 * v4);
    *(void *)&long long v15 = *((void *)&v15 + 1);
  }
  *unsigned __int16 v6 = *(_DWORD *)E5RT::TensorElementAt<float>(*v2, (uint64_t *)&__p, v5, *v1);
  if (__p)
  {
    *(void *)&long long v15 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_1923975C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_192397634(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z34e5rt_tensor_utils_get_fp32_elementE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z34e5rt_tensor_utils_get_fp32_elementE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z34e5rt_tensor_utils_get_fp32_elementE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z34e5rt_tensor_utils_get_fp32_elementE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1923976A4()
{
  return &unk_1EE399978;
}

void sub_1923976B4()
{
}

__n128 sub_1923976C8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1EE399998;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_192397724(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE399998;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192397764(uint64_t a1)
{
  uint64_t v1 = *(E5RT::TensorDescriptor ***)(a1 + 8);
  uint64_t v2 = *(E5RT::BufferObject ***)(a1 + 16);
  long long v3 = *(const void **)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  unsigned int v5 = *(unsigned __int8 *)(a1 + 40);
  int v6 = *(_DWORD *)(a1 + 44);
  char v11 = 10;
  strcpy((char *)v10, "operator()");
  if (!v1)
  {
    long long __p = operator new(0x30uLL);
    long long v15 = xmmword_192DA88E0;
    strcpy((char *)__p, "Invalid Function Argument: desc_handle is NULL.");
    char v13 = 14;
    strcpy((char *)v12, "TensorSetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
LABEL_21:
    if (v13 < 0) {
      operator delete((void *)v12[0]);
    }
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      return 1;
    }
    uint64_t v9 = __p;
    goto LABEL_16;
  }
  if (!v2)
  {
    long long __p = operator new(0x38uLL);
    long long v15 = xmmword_192DAB900;
    strcpy((char *)__p, "Invalid Function Argument: buffer_handle is NULL.");
    char v13 = 14;
    strcpy((char *)v12, "TensorSetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_21;
  }
  if (!v3)
  {
    long long __p = operator new(0x30uLL);
    long long v15 = xmmword_192DAA4A0;
    strcpy((char *)__p, "Invalid Function Argument: position is NULL.");
    char v13 = 14;
    strcpy((char *)v12, "TensorSetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_21;
  }
  uint64_t TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(*v1);
  if (!E5RT::TensorDataType::IsType<float>(TensorDataTypeRef))
  {
    long long __p = operator new(0x40uLL);
    long long v15 = xmmword_192DA8920;
    strcpy((char *)__p, "Invalid Function Argument: Tensor is not of expected type.");
    E5RT::LogErrorMessage((uint64_t *)&__p, v10);
    if (SHIBYTE(v15) < 0)
    {
      operator delete(__p);
      if (v11 < 0)
      {
LABEL_15:
        uint64_t v9 = (void *)v10[0];
LABEL_16:
        operator delete(v9);
      }
    }
    else if (v11 < 0)
    {
      goto LABEL_15;
    }
    return 1;
  }
  long long __p = 0;
  long long v15 = 0uLL;
  if (v4)
  {
    if (v4 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    long long __p = operator new(8 * v4);
    *((void *)&v15 + 1) = (char *)__p + 8 * v4;
    memcpy(__p, v3, 8 * v4);
    *(void *)&long long v15 = *((void *)&v15 + 1);
  }
  *(_DWORD *)E5RT::TensorElementAt<float>(*v1, (uint64_t *)&__p, v5, *v2) = v6;
  if (__p)
  {
    *(void *)&long long v15 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_192397A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_192397AA4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z34e5rt_tensor_utils_set_fp32_elementE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z34e5rt_tensor_utils_set_fp32_elementE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z34e5rt_tensor_utils_set_fp32_elementE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z34e5rt_tensor_utils_set_fp32_elementE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192397B14()
{
  return &unk_1EE3999F8;
}

void sub_192397B24()
{
}

__n128 sub_192397B38(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_1EE399A18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_192397B94(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE399A18;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192397BD4(uint64_t a1)
{
  uint64_t v2 = *(E5RT::TensorDescriptor ***)(a1 + 8);
  uint64_t v1 = *(E5RT::BufferObject ***)(a1 + 16);
  long long v3 = *(const void **)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  unsigned int v5 = *(unsigned __int8 *)(a1 + 40);
  int v6 = *(_WORD **)(a1 + 48);
  char v11 = 10;
  strcpy((char *)v10, "operator()");
  if (!v2)
  {
    long long __p = operator new(0x30uLL);
    long long v15 = xmmword_192DA88E0;
    strcpy((char *)__p, "Invalid Function Argument: desc_handle is NULL.");
    char v13 = 14;
    strcpy((char *)v12, "TensorGetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
LABEL_24:
    if (v13 < 0) {
      operator delete((void *)v12[0]);
    }
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      return 1;
    }
    uint64_t v9 = __p;
    goto LABEL_17;
  }
  if (!v1)
  {
    long long __p = operator new(0x38uLL);
    long long v15 = xmmword_192DAB900;
    strcpy((char *)__p, "Invalid Function Argument: buffer_handle is NULL.");
    char v13 = 14;
    strcpy((char *)v12, "TensorGetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_24;
  }
  if (!v3)
  {
    long long __p = operator new(0x30uLL);
    long long v15 = xmmword_192DAA4A0;
    strcpy((char *)__p, "Invalid Function Argument: position is NULL.");
    char v13 = 14;
    strcpy((char *)v12, "TensorGetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_24;
  }
  if (!v6)
  {
    long long __p = operator new(0x30uLL);
    long long v15 = xmmword_192DA90F0;
    strcpy((char *)__p, "Invalid Function Argument: value is NULL.");
    char v13 = 14;
    strcpy((char *)v12, "TensorGetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_24;
  }
  uint64_t TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(*v2);
  if (!_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(TensorDataTypeRef))
  {
    long long __p = operator new(0x40uLL);
    long long v15 = xmmword_192DA8920;
    strcpy((char *)__p, "Invalid Function Argument: Tensor is not of expected type.");
    E5RT::LogErrorMessage((uint64_t *)&__p, v10);
    if (SHIBYTE(v15) < 0)
    {
      operator delete(__p);
      if (v11 < 0)
      {
LABEL_16:
        uint64_t v9 = (void *)v10[0];
LABEL_17:
        operator delete(v9);
      }
    }
    else if (v11 < 0)
    {
      goto LABEL_16;
    }
    return 1;
  }
  long long __p = 0;
  long long v15 = 0uLL;
  if (v4)
  {
    if (v4 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    long long __p = operator new(8 * v4);
    *((void *)&v15 + 1) = (char *)__p + 8 * v4;
    memcpy(__p, v3, 8 * v4);
    *(void *)&long long v15 = *((void *)&v15 + 1);
  }
  *int v6 = *(_WORD *)_ZN4E5RT15TensorElementAtIDF16_EERT_RKNS_16TensorDescriptorERKNSt3__16vectorImNS6_9allocatorImEEEEhRNS_12BufferObjectE(*v2, (uint64_t *)&__p, v5, *v1);
  if (__p)
  {
    *(void *)&long long v15 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_192397F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_192397F88(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z34e5rt_tensor_utils_get_fp16_elementE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z34e5rt_tensor_utils_get_fp16_elementE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z34e5rt_tensor_utils_get_fp16_elementE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z34e5rt_tensor_utils_get_fp16_elementE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192397FF8()
{
  return &unk_1EE399A78;
}

void sub_192398008()
{
}

__n128 sub_19239801C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1EE399A98;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_192398078(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE399A98;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1923980B8(uint64_t a1)
{
  uint64_t v1 = *(E5RT::TensorDescriptor ***)(a1 + 8);
  uint64_t v2 = *(E5RT::BufferObject ***)(a1 + 16);
  long long v3 = *(const void **)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  unsigned int v5 = *(unsigned __int8 *)(a1 + 40);
  __int16 v6 = *(_WORD *)(a1 + 42);
  char v11 = 10;
  strcpy((char *)v10, "operator()");
  if (!v1)
  {
    long long __p = operator new(0x30uLL);
    long long v15 = xmmword_192DA88E0;
    strcpy((char *)__p, "Invalid Function Argument: desc_handle is NULL.");
    char v13 = 14;
    strcpy((char *)v12, "TensorSetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
LABEL_21:
    if (v13 < 0) {
      operator delete((void *)v12[0]);
    }
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      return 1;
    }
    uint64_t v9 = __p;
    goto LABEL_16;
  }
  if (!v2)
  {
    long long __p = operator new(0x38uLL);
    long long v15 = xmmword_192DAB900;
    strcpy((char *)__p, "Invalid Function Argument: buffer_handle is NULL.");
    char v13 = 14;
    strcpy((char *)v12, "TensorSetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_21;
  }
  if (!v3)
  {
    long long __p = operator new(0x30uLL);
    long long v15 = xmmword_192DAA4A0;
    strcpy((char *)__p, "Invalid Function Argument: position is NULL.");
    char v13 = 14;
    strcpy((char *)v12, "TensorSetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_21;
  }
  uint64_t TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(*v1);
  if (!_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(TensorDataTypeRef))
  {
    long long __p = operator new(0x40uLL);
    long long v15 = xmmword_192DA8920;
    strcpy((char *)__p, "Invalid Function Argument: Tensor is not of expected type.");
    E5RT::LogErrorMessage((uint64_t *)&__p, v10);
    if (SHIBYTE(v15) < 0)
    {
      operator delete(__p);
      if (v11 < 0)
      {
LABEL_15:
        uint64_t v9 = (void *)v10[0];
LABEL_16:
        operator delete(v9);
      }
    }
    else if (v11 < 0)
    {
      goto LABEL_15;
    }
    return 1;
  }
  long long __p = 0;
  long long v15 = 0uLL;
  if (v4)
  {
    if (v4 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    long long __p = operator new(8 * v4);
    *((void *)&v15 + 1) = (char *)__p + 8 * v4;
    memcpy(__p, v3, 8 * v4);
    *(void *)&long long v15 = *((void *)&v15 + 1);
  }
  *(_WORD *)_ZN4E5RT15TensorElementAtIDF16_EERT_RKNS_16TensorDescriptorERKNSt3__16vectorImNS6_9allocatorImEEEEhRNS_12BufferObjectE(*v1, (uint64_t *)&__p, v5, *v2) = v6;
  if (__p)
  {
    *(void *)&long long v15 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_192398388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1923983F8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z34e5rt_tensor_utils_set_fp16_elementE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z34e5rt_tensor_utils_set_fp16_elementE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z34e5rt_tensor_utils_set_fp16_elementE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z34e5rt_tensor_utils_set_fp16_elementE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192398468()
{
  return &unk_1EE399AF8;
}

void sub_192398478()
{
}

__n128 sub_19239848C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_1EE399B18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_1923984E8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE399B18;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192398528(uint64_t a1)
{
  uint64_t v2 = *(E5RT::TensorDescriptor ***)(a1 + 8);
  uint64_t v1 = *(E5RT::BufferObject ***)(a1 + 16);
  long long v3 = *(const void **)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  unsigned int v5 = *(unsigned __int8 *)(a1 + 40);
  __int16 v6 = *(unsigned char **)(a1 + 48);
  char v11 = 10;
  strcpy((char *)v10, "operator()");
  if (!v2)
  {
    long long __p = operator new(0x30uLL);
    long long v15 = xmmword_192DA88E0;
    strcpy((char *)__p, "Invalid Function Argument: desc_handle is NULL.");
    char v13 = 14;
    strcpy((char *)v12, "TensorGetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
LABEL_24:
    if (v13 < 0) {
      operator delete((void *)v12[0]);
    }
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      return 1;
    }
    uint64_t v9 = __p;
    goto LABEL_17;
  }
  if (!v1)
  {
    long long __p = operator new(0x38uLL);
    long long v15 = xmmword_192DAB900;
    strcpy((char *)__p, "Invalid Function Argument: buffer_handle is NULL.");
    char v13 = 14;
    strcpy((char *)v12, "TensorGetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_24;
  }
  if (!v3)
  {
    long long __p = operator new(0x30uLL);
    long long v15 = xmmword_192DAA4A0;
    strcpy((char *)__p, "Invalid Function Argument: position is NULL.");
    char v13 = 14;
    strcpy((char *)v12, "TensorGetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_24;
  }
  if (!v6)
  {
    long long __p = operator new(0x30uLL);
    long long v15 = xmmword_192DA90F0;
    strcpy((char *)__p, "Invalid Function Argument: value is NULL.");
    char v13 = 14;
    strcpy((char *)v12, "TensorGetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_24;
  }
  uint64_t TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(*v2);
  if (!E5RT::TensorDataType::IsType<unsigned char>(TensorDataTypeRef))
  {
    long long __p = operator new(0x40uLL);
    long long v15 = xmmword_192DA8920;
    strcpy((char *)__p, "Invalid Function Argument: Tensor is not of expected type.");
    E5RT::LogErrorMessage((uint64_t *)&__p, v10);
    if (SHIBYTE(v15) < 0)
    {
      operator delete(__p);
      if (v11 < 0)
      {
LABEL_16:
        uint64_t v9 = (void *)v10[0];
LABEL_17:
        operator delete(v9);
      }
    }
    else if (v11 < 0)
    {
      goto LABEL_16;
    }
    return 1;
  }
  long long __p = 0;
  long long v15 = 0uLL;
  if (v4)
  {
    if (v4 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    long long __p = operator new(8 * v4);
    *((void *)&v15 + 1) = (char *)__p + 8 * v4;
    memcpy(__p, v3, 8 * v4);
    *(void *)&long long v15 = *((void *)&v15 + 1);
  }
  *__int16 v6 = *(unsigned char *)E5RT::TensorElementAt<unsigned char>(*v2, (uint64_t *)&__p, v5, *v1);
  if (__p)
  {
    *(void *)&long long v15 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_192398868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1923988DC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z32e5rt_tensor_utils_get_u8_elementE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z32e5rt_tensor_utils_get_u8_elementE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z32e5rt_tensor_utils_get_u8_elementE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z32e5rt_tensor_utils_get_u8_elementE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19239894C()
{
  return &unk_1EE399B78;
}

void sub_19239895C()
{
}

__n128 sub_192398970(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1EE399B98;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_1923989CC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE399B98;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192398A0C(uint64_t a1)
{
  uint64_t v1 = *(E5RT::TensorDescriptor ***)(a1 + 8);
  uint64_t v2 = *(E5RT::BufferObject ***)(a1 + 16);
  long long v3 = *(const void **)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  unsigned int v5 = *(unsigned __int8 *)(a1 + 40);
  char v6 = *(unsigned char *)(a1 + 41);
  char v11 = 10;
  strcpy((char *)v10, "operator()");
  if (!v1)
  {
    long long __p = operator new(0x30uLL);
    long long v15 = xmmword_192DA88E0;
    strcpy((char *)__p, "Invalid Function Argument: desc_handle is NULL.");
    char v13 = 14;
    strcpy((char *)v12, "TensorSetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
LABEL_22:
    if (v13 < 0) {
      operator delete((void *)v12[0]);
    }
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      return 1;
    }
    uint64_t v9 = __p;
    goto LABEL_16;
  }
  if (!v2)
  {
    long long __p = operator new(0x38uLL);
    long long v15 = xmmword_192DAB900;
    strcpy((char *)__p, "Invalid Function Argument: buffer_handle is NULL.");
    char v13 = 14;
    strcpy((char *)v12, "TensorSetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_22;
  }
  if (!v3)
  {
    long long __p = operator new(0x30uLL);
    long long v15 = xmmword_192DAA4A0;
    strcpy((char *)__p, "Invalid Function Argument: position is NULL.");
    char v13 = 14;
    strcpy((char *)v12, "TensorSetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_22;
  }
  uint64_t TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(*v1);
  if (!E5RT::TensorDataType::IsType<unsigned char>(TensorDataTypeRef))
  {
    long long __p = operator new(0x40uLL);
    long long v15 = xmmword_192DA8920;
    strcpy((char *)__p, "Invalid Function Argument: Tensor is not of expected type.");
    E5RT::LogErrorMessage((uint64_t *)&__p, v10);
    if (SHIBYTE(v15) < 0)
    {
      operator delete(__p);
      if (v11 < 0)
      {
LABEL_15:
        uint64_t v9 = (void *)v10[0];
LABEL_16:
        operator delete(v9);
      }
    }
    else if (v11 < 0)
    {
      goto LABEL_15;
    }
    return 1;
  }
  long long __p = 0;
  long long v15 = 0uLL;
  if (v4)
  {
    if (v4 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    long long __p = operator new(8 * v4);
    *((void *)&v15 + 1) = (char *)__p + 8 * v4;
    memcpy(__p, v3, 8 * v4);
    *(void *)&long long v15 = *((void *)&v15 + 1);
  }
  *(unsigned char *)E5RT::TensorElementAt<unsigned char>(*v1, (uint64_t *)&__p, v5, *v2) = v6;
  if (__p)
  {
    *(void *)&long long v15 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_192398CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_192398D4C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z32e5rt_tensor_utils_set_u8_elementE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z32e5rt_tensor_utils_set_u8_elementE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z32e5rt_tensor_utils_set_u8_elementE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z32e5rt_tensor_utils_set_u8_elementE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192398DBC()
{
  return &unk_1EE399BF8;
}

void sub_192398DCC()
{
}

__n128 sub_192398DE0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_1EE399C18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_192398E3C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE399C18;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192398E7C(uint64_t a1)
{
  uint64_t v2 = *(E5RT::TensorDescriptor ***)(a1 + 8);
  uint64_t v1 = *(E5RT::BufferObject ***)(a1 + 16);
  long long v3 = *(const void **)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  unsigned int v5 = *(unsigned __int8 *)(a1 + 40);
  char v6 = *(unsigned char **)(a1 + 48);
  char v11 = 10;
  strcpy((char *)v10, "operator()");
  if (!v2)
  {
    long long __p = operator new(0x30uLL);
    long long v15 = xmmword_192DA88E0;
    strcpy((char *)__p, "Invalid Function Argument: desc_handle is NULL.");
    char v13 = 14;
    strcpy((char *)v12, "TensorGetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
LABEL_24:
    if (v13 < 0) {
      operator delete((void *)v12[0]);
    }
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      return 1;
    }
    uint64_t v9 = __p;
    goto LABEL_17;
  }
  if (!v1)
  {
    long long __p = operator new(0x38uLL);
    long long v15 = xmmword_192DAB900;
    strcpy((char *)__p, "Invalid Function Argument: buffer_handle is NULL.");
    char v13 = 14;
    strcpy((char *)v12, "TensorGetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_24;
  }
  if (!v3)
  {
    long long __p = operator new(0x30uLL);
    long long v15 = xmmword_192DAA4A0;
    strcpy((char *)__p, "Invalid Function Argument: position is NULL.");
    char v13 = 14;
    strcpy((char *)v12, "TensorGetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_24;
  }
  if (!v6)
  {
    long long __p = operator new(0x30uLL);
    long long v15 = xmmword_192DA90F0;
    strcpy((char *)__p, "Invalid Function Argument: value is NULL.");
    char v13 = 14;
    strcpy((char *)v12, "TensorGetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_24;
  }
  uint64_t TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(*v2);
  if (!E5RT::TensorDataType::IsType<signed char>(TensorDataTypeRef))
  {
    long long __p = operator new(0x40uLL);
    long long v15 = xmmword_192DA8920;
    strcpy((char *)__p, "Invalid Function Argument: Tensor is not of expected type.");
    E5RT::LogErrorMessage((uint64_t *)&__p, v10);
    if (SHIBYTE(v15) < 0)
    {
      operator delete(__p);
      if (v11 < 0)
      {
LABEL_16:
        uint64_t v9 = (void *)v10[0];
LABEL_17:
        operator delete(v9);
      }
    }
    else if (v11 < 0)
    {
      goto LABEL_16;
    }
    return 1;
  }
  long long __p = 0;
  long long v15 = 0uLL;
  if (v4)
  {
    if (v4 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    long long __p = operator new(8 * v4);
    *((void *)&v15 + 1) = (char *)__p + 8 * v4;
    memcpy(__p, v3, 8 * v4);
    *(void *)&long long v15 = *((void *)&v15 + 1);
  }
  *char v6 = *(unsigned char *)E5RT::TensorElementAt<signed char>(*v2, (uint64_t *)&__p, v5, *v1);
  if (__p)
  {
    *(void *)&long long v15 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_1923991BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_192399230(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z32e5rt_tensor_utils_get_s8_elementE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z32e5rt_tensor_utils_get_s8_elementE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z32e5rt_tensor_utils_get_s8_elementE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z32e5rt_tensor_utils_get_s8_elementE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1923992A0()
{
  return &unk_1EE399C78;
}

void sub_1923992B0()
{
}

__n128 sub_1923992C4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1EE399C98;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_192399320(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE399C98;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192399360(uint64_t a1)
{
  uint64_t v1 = *(E5RT::TensorDescriptor ***)(a1 + 8);
  uint64_t v2 = *(E5RT::BufferObject ***)(a1 + 16);
  long long v3 = *(const void **)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  unsigned int v5 = *(unsigned __int8 *)(a1 + 40);
  char v6 = *(unsigned char *)(a1 + 41);
  char v11 = 10;
  strcpy((char *)v10, "operator()");
  if (!v1)
  {
    long long __p = operator new(0x30uLL);
    long long v15 = xmmword_192DA88E0;
    strcpy((char *)__p, "Invalid Function Argument: desc_handle is NULL.");
    char v13 = 14;
    strcpy((char *)v12, "TensorSetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
LABEL_22:
    if (v13 < 0) {
      operator delete((void *)v12[0]);
    }
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      return 1;
    }
    uint64_t v9 = __p;
    goto LABEL_16;
  }
  if (!v2)
  {
    long long __p = operator new(0x38uLL);
    long long v15 = xmmword_192DAB900;
    strcpy((char *)__p, "Invalid Function Argument: buffer_handle is NULL.");
    char v13 = 14;
    strcpy((char *)v12, "TensorSetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_22;
  }
  if (!v3)
  {
    long long __p = operator new(0x30uLL);
    long long v15 = xmmword_192DAA4A0;
    strcpy((char *)__p, "Invalid Function Argument: position is NULL.");
    char v13 = 14;
    strcpy((char *)v12, "TensorSetValue");
    E5RT::LogErrorMessage((uint64_t *)&__p, v12);
    goto LABEL_22;
  }
  uint64_t TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(*v1);
  if (!E5RT::TensorDataType::IsType<signed char>(TensorDataTypeRef))
  {
    long long __p = operator new(0x40uLL);
    long long v15 = xmmword_192DA8920;
    strcpy((char *)__p, "Invalid Function Argument: Tensor is not of expected type.");
    E5RT::LogErrorMessage((uint64_t *)&__p, v10);
    if (SHIBYTE(v15) < 0)
    {
      operator delete(__p);
      if (v11 < 0)
      {
LABEL_15:
        uint64_t v9 = (void *)v10[0];
LABEL_16:
        operator delete(v9);
      }
    }
    else if (v11 < 0)
    {
      goto LABEL_15;
    }
    return 1;
  }
  long long __p = 0;
  long long v15 = 0uLL;
  if (v4)
  {
    if (v4 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    long long __p = operator new(8 * v4);
    *((void *)&v15 + 1) = (char *)__p + 8 * v4;
    memcpy(__p, v3, 8 * v4);
    *(void *)&long long v15 = *((void *)&v15 + 1);
  }
  *(unsigned char *)E5RT::TensorElementAt<signed char>(*v1, (uint64_t *)&__p, v5, *v2) = v6;
  if (__p)
  {
    *(void *)&long long v15 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_192399630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1923996A0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z32e5rt_tensor_utils_set_s8_elementE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z32e5rt_tensor_utils_set_s8_elementE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z32e5rt_tensor_utils_set_s8_elementE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z32e5rt_tensor_utils_set_s8_elementE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192399710()
{
  return &unk_1EE399CF8;
}

void sub_192399720()
{
}

__n128 sub_192399734(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EE399D18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_192399788(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE399D18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1923997C0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, E5RT::BufferObject *a5)
{
  unsigned int v5 = (E5RT **)a1[1];
  if (v5)
  {
    char v6 = (const E5RT::TensorDescriptor **)a1[2];
    if (v6)
    {
      long long v7 = (const E5RT::BufferObject **)a1[3];
      if (v7)
      {
        long long v8 = (const E5RT::TensorDescriptor **)a1[4];
        if (v8)
        {
          E5RT::CopyTensorFromSrcToDest(*v5, *v6, *v7, *v8, a5);
          return 0;
        }
        else
        {
          unint64_t v12 = operator new(0x38uLL);
          long long v13 = xmmword_192DA90D0;
          strcpy((char *)v12, "Invalid Function Argument: dst_buffer_handle is NULL.");
          char v11 = 10;
          strcpy((char *)__p, "operator()");
          E5RT::LogErrorMessage((uint64_t *)&v12, (uint64_t *)__p);
          if (v11 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v13) < 0) {
            operator delete(v12);
          }
          return 1;
        }
      }
      else
      {
        unint64_t v12 = operator new(0x38uLL);
        long long v13 = xmmword_192DA90B0;
        strcpy((char *)v12, "Invalid Function Argument: dst_desc_handle is NULL.");
        char v11 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v12, (uint64_t *)__p);
        if (v11 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v13) < 0) {
          operator delete(v12);
        }
        return 1;
      }
    }
    else
    {
      unint64_t v12 = operator new(0x38uLL);
      long long v13 = xmmword_192DA90D0;
      strcpy((char *)v12, "Invalid Function Argument: src_buffer_handle is NULL.");
      char v11 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v12, (uint64_t *)__p);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v13) < 0) {
        operator delete(v12);
      }
      return 1;
    }
  }
  else
  {
    unint64_t v12 = operator new(0x38uLL);
    long long v13 = xmmword_192DA90B0;
    strcpy((char *)v12, "Invalid Function Argument: src_desc_handle is NULL.");
    char v11 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v12, (uint64_t *)__p);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v13) < 0) {
      operator delete(v12);
    }
    return 1;
  }
}

void sub_192399AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192399AEC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z29e5rt_tensor_utils_copy_tensorE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z29e5rt_tensor_utils_copy_tensorE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z29e5rt_tensor_utils_copy_tensorE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z29e5rt_tensor_utils_copy_tensorE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192399B5C()
{
  return &unk_1EE399D78;
}

void sub_192399B6C()
{
}

__n128 sub_192399B80(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1EE399D98;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_192399BDC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE399D98;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192399C1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const E5RT::BufferObject *a5)
{
  unsigned int v5 = *(E5RT ***)(a1 + 8);
  if (v5)
  {
    long long v7 = *(const E5RT::TensorDescriptor ***)(a1 + 16);
    if (v7)
    {
      long long v8 = *(const E5RT::BufferObject ***)(a1 + 24);
      if (v8)
      {
        uint64_t v9 = *(const E5RT::TensorDescriptor ***)(a1 + 32);
        if (v9)
        {
          if (*(void *)(a1 + 40))
          {
            char v10 = E5RT::AreTensorsEqual(*v5, *v7, *v8, *v9, a5);
            uint64_t result = 0;
            **(unsigned char **)(a1 + 40) = v10;
          }
          else
          {
            uint64_t v14 = operator new(0x28uLL);
            long long v15 = xmmword_192DB14B0;
            strcpy((char *)v14, "Invalid Function Argument: yes is NULL.");
            char v13 = 10;
            strcpy((char *)__p, "operator()");
            E5RT::LogErrorMessage((uint64_t *)&v14, (uint64_t *)__p);
            if (v13 < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v15) < 0) {
              operator delete(v14);
            }
            return 1;
          }
        }
        else
        {
          uint64_t v14 = operator new(0x38uLL);
          long long v15 = xmmword_192DA8900;
          strcpy((char *)v14, "Invalid Function Argument: buffer_handle1 is NULL.");
          char v13 = 10;
          strcpy((char *)__p, "operator()");
          E5RT::LogErrorMessage((uint64_t *)&v14, (uint64_t *)__p);
          if (v13 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v15) < 0) {
            operator delete(v14);
          }
          return 1;
        }
      }
      else
      {
        uint64_t v14 = operator new(0x38uLL);
        long long v15 = xmmword_192DAF6B0;
        strcpy((char *)v14, "Invalid Function Argument: desc_handle1 is NULL.");
        char v13 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v14, (uint64_t *)__p);
        if (v13 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v15) < 0) {
          operator delete(v14);
        }
        return 1;
      }
    }
    else
    {
      uint64_t v14 = operator new(0x38uLL);
      long long v15 = xmmword_192DA8900;
      strcpy((char *)v14, "Invalid Function Argument: buffer_handle0 is NULL.");
      char v13 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v14, (uint64_t *)__p);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v15) < 0) {
        operator delete(v14);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v14 = operator new(0x38uLL);
    long long v15 = xmmword_192DAF6B0;
    strcpy((char *)v14, "Invalid Function Argument: desc_handle0 is NULL.");
    char v13 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v14, (uint64_t *)__p);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v15) < 0) {
      operator delete(v14);
    }
    return 1;
  }
  return result;
}

void sub_192399F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192399FE4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z35e5rt_tensor_utils_are_tensors_equalE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z35e5rt_tensor_utils_are_tensors_equalE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z35e5rt_tensor_utils_are_tensors_equalE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z35e5rt_tensor_utils_are_tensors_equalE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19239A054()
{
  return &unk_1EE399DF8;
}

void sub_19239A064()
{
}

__n128 sub_19239A078(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EE399E18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_19239A0CC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE399E18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19239A104(void *a1)
{
  uint64_t v1 = (E5RT::TensorDescriptor **)a1[1];
  if (v1)
  {
    uint64_t v2 = (E5RT::BufferObject **)a1[2];
    if (v2)
    {
      unint64_t v3 = (E5RT::TensorDescriptor **)a1[3];
      if (v3)
      {
        uint64_t v4 = (E5RT::BufferObject **)a1[4];
        if (v4)
        {
          _ZN4E5RT10TensorCastIDF16_fEEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(*v3, *v4, *v1, *v2);
          return 0;
        }
        else
        {
          long long v8 = operator new(0x38uLL);
          long long v9 = xmmword_192DA90D0;
          strcpy((char *)v8, "Invalid Function Argument: dst_buffer_handle is NULL.");
          char v7 = 10;
          strcpy((char *)__p, "operator()");
          E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
          if (v7 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v9) < 0) {
            operator delete(v8);
          }
          return 1;
        }
      }
      else
      {
        long long v8 = operator new(0x38uLL);
        long long v9 = xmmword_192DA90B0;
        strcpy((char *)v8, "Invalid Function Argument: dst_desc_handle is NULL.");
        char v7 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
        if (v7 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v9) < 0) {
          operator delete(v8);
        }
        return 1;
      }
    }
    else
    {
      long long v8 = operator new(0x38uLL);
      long long v9 = xmmword_192DA90D0;
      strcpy((char *)v8, "Invalid Function Argument: src_buffer_handle is NULL.");
      char v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v9) < 0) {
        operator delete(v8);
      }
      return 1;
    }
  }
  else
  {
    long long v8 = operator new(0x38uLL);
    long long v9 = xmmword_192DA90B0;
    strcpy((char *)v8, "Invalid Function Argument: src_desc_handle is NULL.");
    char v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8);
    }
    return 1;
  }
}

void sub_19239A3E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19239A430(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z40e5rt_tensor_utils_cast_from_fp32_to_fp16E3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z40e5rt_tensor_utils_cast_from_fp32_to_fp16E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z40e5rt_tensor_utils_cast_from_fp32_to_fp16E3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z40e5rt_tensor_utils_cast_from_fp32_to_fp16E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19239A4A0()
{
  return &unk_1EE399E78;
}

void sub_19239A4B0()
{
}

__n128 sub_19239A4C4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EE399E98;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_19239A518(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE399E98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19239A550(void *a1)
{
  uint64_t v1 = (E5RT::TensorDescriptor **)a1[1];
  if (v1)
  {
    uint64_t v2 = (E5RT::BufferObject **)a1[2];
    if (v2)
    {
      unint64_t v3 = (E5RT::TensorDescriptor **)a1[3];
      if (v3)
      {
        uint64_t v4 = (E5RT::BufferObject **)a1[4];
        if (v4)
        {
          _ZN4E5RT10TensorCastIfDF16_EEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(*v3, *v4, *v1, *v2);
          return 0;
        }
        else
        {
          long long v8 = operator new(0x38uLL);
          long long v9 = xmmword_192DA90D0;
          strcpy((char *)v8, "Invalid Function Argument: dst_buffer_handle is NULL.");
          char v7 = 10;
          strcpy((char *)__p, "operator()");
          E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
          if (v7 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v9) < 0) {
            operator delete(v8);
          }
          return 1;
        }
      }
      else
      {
        long long v8 = operator new(0x38uLL);
        long long v9 = xmmword_192DA90B0;
        strcpy((char *)v8, "Invalid Function Argument: dst_desc_handle is NULL.");
        char v7 = 10;
        strcpy((char *)__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
        if (v7 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v9) < 0) {
          operator delete(v8);
        }
        return 1;
      }
    }
    else
    {
      long long v8 = operator new(0x38uLL);
      long long v9 = xmmword_192DA90D0;
      strcpy((char *)v8, "Invalid Function Argument: src_buffer_handle is NULL.");
      char v7 = 10;
      strcpy((char *)__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v9) < 0) {
        operator delete(v8);
      }
      return 1;
    }
  }
  else
  {
    long long v8 = operator new(0x38uLL);
    long long v9 = xmmword_192DA90B0;
    strcpy((char *)v8, "Invalid Function Argument: src_desc_handle is NULL.");
    char v7 = 10;
    strcpy((char *)__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)&v8, (uint64_t *)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8);
    }
    return 1;
  }
}

void sub_19239A834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19239A87C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z40e5rt_tensor_utils_cast_from_fp16_to_fp32E3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z40e5rt_tensor_utils_cast_from_fp16_to_fp32E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z40e5rt_tensor_utils_cast_from_fp16_to_fp32E3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z40e5rt_tensor_utils_cast_from_fp16_to_fp32E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19239A8EC()
{
  return &unk_1EE399EF8;
}

void sub_19239A8FC()
{
}

__n128 sub_19239A910(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1EE399F18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_19239A96C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE399F18;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19239A9AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t v3 = *(void *)(a1 + 24);
      if (v3)
      {
        if (*(void *)(a1 + 32))
        {
          uint64_t v4 = *(E5RT::TensorDescriptor **)v3;
          unsigned int v5 = *(std::__shared_weak_count **)(v3 + 8);
          if (v5)
          {
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v1 = *(void *)(a1 + 8);
          }
          char v7 = *(E5RT::TensorDescriptor **)v1;
          char v6 = *(std::__shared_weak_count **)(v1 + 8);
          if (v6) {
            atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(v4);
          if (!E5RT::TensorDataType::IsType<unsigned char>(TensorDataTypeRef)
            || (uint64_t v9 = E5RT::TensorDescriptor::GetTensorDataTypeRef(v7), !E5RT::TensorDataType::IsType<float>(v9)))
          {
            exception = __cxa_allocate_exception(0x18uLL);
            v15[23] = 10;
            strcpy(v15, "operator()");
            *(void *)long long __p = operator new(0x40uLL);
            *(_OWORD *)&__p[8] = xmmword_192DB3C50;
            strcpy(*(char **)__p, "Src tensor must be float and dst tensor must be uint8_t.");
            E5RT::Status::Status(v13, 1, __p);
            E5RT::E5RTError::E5RTError(exception, v15, v13);
          }
          E5RT::TensorQuantize(**(E5RT ***)(a1 + 24), **(const E5RT::TensorDescriptor ***)(a1 + 32), **(E5RT::BufferObject ***)(a1 + 8), **(const E5RT::TensorDescriptor ***)(a1 + 16), v10, *(float *)(a1 + 40));
          if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          if (v5)
          {
            if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          return 0;
        }
        *(void *)long long v15 = operator new(0x38uLL);
        *(_OWORD *)&v15[8] = xmmword_192DA90D0;
        strcpy(*(char **)v15, "Invalid Function Argument: dst_buffer_handle is NULL.");
        __p[23] = 10;
        strcpy(__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)v15, (uint64_t *)__p);
      }
      else
      {
        *(void *)long long v15 = operator new(0x38uLL);
        *(_OWORD *)&v15[8] = xmmword_192DA90B0;
        strcpy(*(char **)v15, "Invalid Function Argument: dst_desc_handle is NULL.");
        __p[23] = 10;
        strcpy(__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)v15, (uint64_t *)__p);
      }
    }
    else
    {
      *(void *)long long v15 = operator new(0x38uLL);
      *(_OWORD *)&v15[8] = xmmword_192DA90D0;
      strcpy(*(char **)v15, "Invalid Function Argument: src_buffer_handle is NULL.");
      __p[23] = 10;
      strcpy(__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)v15, (uint64_t *)__p);
    }
  }
  else
  {
    *(void *)long long v15 = operator new(0x38uLL);
    *(_OWORD *)&v15[8] = xmmword_192DA90B0;
    strcpy(*(char **)v15, "Invalid Function Argument: src_desc_handle is NULL.");
    __p[23] = 10;
    strcpy(__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)v15, (uint64_t *)__p);
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if ((v15[23] & 0x80000000) != 0) {
    operator delete(*(void **)v15);
  }
  return 1;
}

void sub_19239ADB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19239AED4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z42e5rt_tensor_utils_quantize_from_fp32_to_u8E3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z42e5rt_tensor_utils_quantize_from_fp32_to_u8E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z42e5rt_tensor_utils_quantize_from_fp32_to_u8E3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z42e5rt_tensor_utils_quantize_from_fp32_to_u8E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19239AF44()
{
  return &unk_1EE399F78;
}

void sub_19239AF54()
{
}

__n128 sub_19239AF68(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1EE399F98;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_19239AFC4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE399F98;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19239B004(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t v3 = *(void *)(a1 + 24);
      if (v3)
      {
        if (*(void *)(a1 + 32))
        {
          uint64_t v4 = *(E5RT::TensorDescriptor **)v3;
          unsigned int v5 = *(std::__shared_weak_count **)(v3 + 8);
          if (v5)
          {
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v1 = *(void *)(a1 + 8);
          }
          char v7 = *(E5RT::TensorDescriptor **)v1;
          char v6 = *(std::__shared_weak_count **)(v1 + 8);
          if (v6) {
            atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(v4);
          if (!E5RT::TensorDataType::IsType<float>(TensorDataTypeRef)
            || (uint64_t v9 = E5RT::TensorDescriptor::GetTensorDataTypeRef(v7), !E5RT::TensorDataType::IsType<signed char>(v9)))
          {
            exception = __cxa_allocate_exception(0x18uLL);
            v15[23] = 10;
            strcpy(v15, "operator()");
            *(void *)long long __p = operator new(0x38uLL);
            *(_OWORD *)&__p[8] = xmmword_192DA8910;
            strcpy(*(char **)__p, "Src tensor must be int8_t and dst tensor must be float.");
            E5RT::Status::Status(v13, 1, __p);
            E5RT::E5RTError::E5RTError(exception, v15, v13);
          }
          E5RT::TensorDequantize(**(E5RT ***)(a1 + 24), **(const E5RT::TensorDescriptor ***)(a1 + 32), **(E5RT::BufferObject ***)(a1 + 8), **(const E5RT::TensorDescriptor ***)(a1 + 16), v10, *(float *)(a1 + 40));
          if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          if (v5)
          {
            if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          return 0;
        }
        *(void *)long long v15 = operator new(0x38uLL);
        *(_OWORD *)&v15[8] = xmmword_192DA90D0;
        strcpy(*(char **)v15, "Invalid Function Argument: dst_buffer_handle is NULL.");
        __p[23] = 10;
        strcpy(__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)v15, (uint64_t *)__p);
      }
      else
      {
        *(void *)long long v15 = operator new(0x38uLL);
        *(_OWORD *)&v15[8] = xmmword_192DA90B0;
        strcpy(*(char **)v15, "Invalid Function Argument: dst_desc_handle is NULL.");
        __p[23] = 10;
        strcpy(__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)v15, (uint64_t *)__p);
      }
    }
    else
    {
      *(void *)long long v15 = operator new(0x38uLL);
      *(_OWORD *)&v15[8] = xmmword_192DA90D0;
      strcpy(*(char **)v15, "Invalid Function Argument: src_buffer_handle is NULL.");
      __p[23] = 10;
      strcpy(__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)v15, (uint64_t *)__p);
    }
  }
  else
  {
    *(void *)long long v15 = operator new(0x38uLL);
    *(_OWORD *)&v15[8] = xmmword_192DA90B0;
    strcpy(*(char **)v15, "Invalid Function Argument: src_desc_handle is NULL.");
    __p[23] = 10;
    strcpy(__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)v15, (uint64_t *)__p);
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if ((v15[23] & 0x80000000) != 0) {
    operator delete(*(void **)v15);
  }
  return 1;
}

void sub_19239B408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19239B52C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z44e5rt_tensor_utils_dequantize_from_s8_to_fp32E3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z44e5rt_tensor_utils_dequantize_from_s8_to_fp32E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z44e5rt_tensor_utils_dequantize_from_s8_to_fp32E3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z44e5rt_tensor_utils_dequantize_from_s8_to_fp32E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19239B59C()
{
  return &unk_1EE399FF8;
}

void sub_19239B5AC()
{
}

__n128 sub_19239B5C0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1EE39A018;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_19239B61C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE39A018;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19239B65C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1)
  {
    if (*(void *)(a1 + 16))
    {
      uint64_t v3 = *(void *)(a1 + 24);
      if (v3)
      {
        if (*(void *)(a1 + 32))
        {
          uint64_t v4 = *(E5RT::TensorDescriptor **)v3;
          unsigned int v5 = *(std::__shared_weak_count **)(v3 + 8);
          if (v5)
          {
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v1 = *(void *)(a1 + 8);
          }
          char v7 = *(E5RT::TensorDescriptor **)v1;
          char v6 = *(std::__shared_weak_count **)(v1 + 8);
          if (v6) {
            atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(v4);
          if (!E5RT::TensorDataType::IsType<float>(TensorDataTypeRef)
            || (uint64_t v9 = E5RT::TensorDescriptor::GetTensorDataTypeRef(v7), !E5RT::TensorDataType::IsType<unsigned char>(v9)))
          {
            exception = __cxa_allocate_exception(0x18uLL);
            v15[23] = 10;
            strcpy(v15, "operator()");
            *(void *)long long __p = operator new(0x40uLL);
            *(_OWORD *)&__p[8] = xmmword_192DB3C50;
            strcpy(*(char **)__p, "Src tensor must be uint8_t and dst tensor must be float.");
            E5RT::Status::Status(v13, 1, __p);
            E5RT::E5RTError::E5RTError(exception, v15, v13);
          }
          E5RT::TensorDequantize(**(E5RT ***)(a1 + 24), **(const E5RT::TensorDescriptor ***)(a1 + 32), **(E5RT::BufferObject ***)(a1 + 8), **(const E5RT::TensorDescriptor ***)(a1 + 16), v10, *(float *)(a1 + 40));
          if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          if (v5)
          {
            if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          return 0;
        }
        *(void *)long long v15 = operator new(0x38uLL);
        *(_OWORD *)&v15[8] = xmmword_192DA90D0;
        strcpy(*(char **)v15, "Invalid Function Argument: dst_memory_handle is NULL.");
        __p[23] = 10;
        strcpy(__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)v15, (uint64_t *)__p);
      }
      else
      {
        *(void *)long long v15 = operator new(0x38uLL);
        *(_OWORD *)&v15[8] = xmmword_192DA90B0;
        strcpy(*(char **)v15, "Invalid Function Argument: dst_desc_handle is NULL.");
        __p[23] = 10;
        strcpy(__p, "operator()");
        E5RT::LogErrorMessage((uint64_t *)v15, (uint64_t *)__p);
      }
    }
    else
    {
      *(void *)long long v15 = operator new(0x38uLL);
      *(_OWORD *)&v15[8] = xmmword_192DA90D0;
      strcpy(*(char **)v15, "Invalid Function Argument: src_memory_handle is NULL.");
      __p[23] = 10;
      strcpy(__p, "operator()");
      E5RT::LogErrorMessage((uint64_t *)v15, (uint64_t *)__p);
    }
  }
  else
  {
    *(void *)long long v15 = operator new(0x38uLL);
    *(_OWORD *)&v15[8] = xmmword_192DA90B0;
    strcpy(*(char **)v15, "Invalid Function Argument: src_desc_handle is NULL.");
    __p[23] = 10;
    strcpy(__p, "operator()");
    E5RT::LogErrorMessage((uint64_t *)v15, (uint64_t *)__p);
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if ((v15[23] & 0x80000000) != 0) {
    operator delete(*(void **)v15);
  }
  return 1;
}

void sub_19239BA60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19239BB84(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z44e5rt_tensor_utils_dequantize_from_u8_to_fp32E3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"Z44e5rt_tensor_utils_dequantize_from_u8_to_fp32E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "Z44e5rt_tensor_utils_dequantize_from_u8_to_fp32E3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z44e5rt_tensor_utils_dequantize_from_u8_to_fp32E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19239BBF4()
{
  return &unk_1EE39A078;
}

id E5RT::BufferObject::GetHandle<objc_object  {objcproto9MTLBuffer}* {__strong}>(uint64_t a1)
{
  uint64_t v1 = E5RT::BufferObjectImpl::TryAsMTLBufferObject(*(void **)(a1 + 8));
  if (!v1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v7, "GetHandle");
    std::string::basic_string[abi:ne180100]<0>(v5, "Buffer object is not backed by a MTLBuffer.");
    E5RT::Status::Status(v6, 2, v5);
    E5RT::E5RTError::E5RTError(exception, v7, v6);
  }
  uint64_t v2 = (void *)v1[1];

  return v2;
}

void sub_19239BCC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::BufferObject::CreateBufferFromHandle<objc_object  {objcproto9MTLBuffer}* {__strong}>(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    if ([v1 length]) {
      operator new();
    }
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "CreateBufferFromHandle");
    std::string::basic_string[abi:ne180100]<0>(v4, "MTLBuffer length is zero.");
    E5RT::Status::Status(v5, 1, v4);
    E5RT::E5RTError::E5RTError(exception, v6, v5);
  }
  uint64_t v2 = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v6, "CreateBufferFromHandle");
  std::string::basic_string[abi:ne180100]<0>(v4, "MTLBuffer is nil.");
  E5RT::Status::Status(v5, 1, v4);
  E5RT::E5RTError::E5RTError(v2, v6, v5);
}

void sub_19239BEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (a2) {
    sub_19239C714(a2);
  }
  MEMORY[0x192FF16B0](v7, 0xA1C40BD48D6D6);
  std::unique_ptr<E5RT::MTLBufferObject>::~unique_ptr[abi:ne180100]((id **)va);

  _Unwind_Resume(a1);
}

void sub_19239BF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<E5RT::MTLBufferObject>::~unique_ptr[abi:ne180100]((id **)va);

  _Unwind_Resume(a1);
}

void sub_19239BF54(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v2, 0x81C40803F642BLL);

  _Unwind_Resume(a1);
}

void sub_19239BF7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19239BF8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19239BF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v24 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v24)
  {
LABEL_8:

    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

id **std::unique_ptr<E5RT::MTLBufferObject>::~unique_ptr[abi:ne180100](id **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {

    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v2);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

void E5RT::MTLBufferObject::~MTLBufferObject(id *this)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)this);
}

{
  uint64_t vars8;

  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)this);

  JUMPOUT(0x192FF16B0);
}

E5RT::MTLBufferObject *E5RT::MTLBufferObject::MTLBufferObject(E5RT::MTLBufferObject *this, uint64_t a2)
{
  uint64_t v4 = E5RT::BufferObjectImpl::BufferObjectImpl(this);
  *uint64_t v4 = &unk_1EE3257B8;
  v4[1] = 0;
  id v5 = MTLCreateSystemDefaultDevice();
  char v6 = v5;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "MTLBufferObject");
    std::string::basic_string[abi:ne180100]<0>(v12, "Cannot create MTLBufferObject on a system without a Metal device.");
    E5RT::Status::Status(v13, 2, v12);
    E5RT::E5RTError::E5RTError(exception, v14, v13);
  }
  uint64_t v7 = [v5 newBufferWithLength:a2 options:0];
  long long v8 = (void *)*((void *)this + 1);
  *((void *)this + 1) = v7;

  if (!*((void *)this + 1))
  {
    char v11 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "MTLBufferObject");
    std::string::basic_string[abi:ne180100]<0>(v12, "MTLBuffer create failed.");
    E5RT::Status::Status(v13, 3, v12);
    E5RT::E5RTError::E5RTError(v11, v14, v13);
  }

  return this;
}

void sub_19239C2B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v22);
  _Unwind_Resume(a1);
}

void *E5RT::MTLBufferObject::MTLBufferObject(void *a1, void *a2)
{
  id v3 = a2;
  E5RT::BufferObjectImpl::BufferObjectImpl(a1);
  *a1 = &unk_1EE3257B8;
  id v4 = v3;
  a1[1] = v4;
  if (([v4 resourceOptions] & 0x20) != 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "MTLBufferObject");
    std::string::basic_string[abi:ne180100]<0>(v7, "MTLBuffer is private to GPU. BufferObect requires for access by CPU as well.");
    E5RT::Status::Status(v8, 1, v7);
    E5RT::E5RTError::E5RTError(exception, v9, v8);
  }

  return a1;
}

void sub_19239C490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v23);
  _Unwind_Resume(a1);
}

void E5RT::MTLBufferObject::CreateBufferAliasImpl(E5RT::MTLBufferObject *this)
{
  exception = __cxa_allocate_exception(0x18uLL);
  v5[23] = 21;
  strcpy(v5, "CreateBufferAliasImpl");
  uint64_t v2 = (char *)operator new(0x40uLL);
  long long v3 = xmmword_192DB3C50;
  strcpy(v2, "MTLBufferObject does not currently support alias buffer.");
  E5RT::Status::Status(v4, 2, &v2);
  E5RT::E5RTError::E5RTError(exception, v5, v4);
}

void sub_19239C600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v22 & 1) == 0) {
      goto LABEL_5;
    }
  }
  else if (!v22)
  {
LABEL_5:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v21);
  _Unwind_Resume(a1);
}

void sub_19239C660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v18);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19239C650);
}

uint64_t E5RT::MTLBufferObject::GetSize(id *this)
{
  return [this[1] length];
}

uint64_t E5RT::MTLBufferObject::GetDataSpan(id *this)
{
  uint64_t v2 = [this[1] contents];
  if ([this[1] length]) {
    return v2;
  }
  else {
    return 0;
  }
}

{
  uint64_t v2;

  uint64_t v2 = [this[1] contents];
  if ([this[1] length]) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t E5RT::MTLBufferObject::GetType(E5RT::MTLBufferObject *this)
{
  return 2;
}

uint64_t sub_19239C714(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

void *E5RT::BufferObject::BufferObject(E5RT::BufferObject *this)
{
  __n128 result = E5RT::MemoryObject::MemoryObject(this);
  void *result = &unk_1EE3247C8;
  result[1] = 0;
  return result;
}

{
  void *result;

  __n128 result = E5RT::MemoryObject::MemoryObject(this);
  void *result = &unk_1EE3247C8;
  result[1] = 0;
  return result;
}

void E5RT::BufferObject::~BufferObject(E5RT::BufferObject *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EE3247C8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  E5RT::MemoryObject::~MemoryObject(this);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EE3247C8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  E5RT::MemoryObject::~MemoryObject(this);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EE3247C8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  E5RT::MemoryObject::~MemoryObject(this);

  JUMPOUT(0x192FF16B0);
}

void E5RT::BufferObject::CreateBufferAlias(E5RT::BufferObject *this)
{
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 1) + 48))(&v1);
  operator new();
}

void sub_19239CA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (v11) {
    sub_19239C714(v11);
  }
  MEMORY[0x192FF16B0](v10, 0xA1C40BD48D6D6);
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t E5RT::BufferObject::GetBufferType(E5RT::BufferObject *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 40))();
}

CFTypeRef **std::unique_ptr<E5RT::IOBufferObject>::~unique_ptr[abi:ne180100](CFTypeRef **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    E5RT::IOBufferObject::~IOBufferObject(v2);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

E5RT::HeapAllocatedBufferObject **std::unique_ptr<E5RT::HeapAllocatedBufferObject>::~unique_ptr[abi:ne180100](E5RT::HeapAllocatedBufferObject **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    E5RT::HeapAllocatedBufferObject::~HeapAllocatedBufferObject(v2);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

void E5RT::BufferObjectPriv::~BufferObjectPriv(E5RT::BufferObjectPriv *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EE3247C8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  E5RT::MemoryObject::~MemoryObject(this);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EE3247C8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  E5RT::MemoryObject::~MemoryObject(this);

  JUMPOUT(0x192FF16B0);
}

void E5RT::BufferObjectPriv::AllocBufferObjectFromIOSurfaceMemoryPool(E5RT::BufferObjectPriv *this)
{
  if (this)
  {
    uint64_t v2 = 0x2B23404000000000;
    long long v3 = 0u;
    long long v4 = 0u;
    kdebug_trace();
    operator new();
  }
  exception = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(&v2, "AllocBufferObjectFromIOSurfaceMemoryPool");
  std::string::basic_string[abi:ne180100]<0>(v5, "Invalid size(=0) specified.");
  E5RT::Status::Status(v6, 1, v5);
  E5RT::E5RTError::E5RTError(exception, &v2, v6);
}

void sub_19239CE20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v4 = v2;
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  MEMORY[0x192FF16B0](v3, 0xA1C40BD48D6D6);
  std::unique_ptr<E5RT::IOBufferObject>::~unique_ptr[abi:ne180100]((CFTypeRef **)va1);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_19239CEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  E5RT::Status::~Status((E5RT::Status *)(v25 - 40));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if (v24)
    {
LABEL_8:
      __cxa_free_exception(v23);
      _Unwind_Resume(a1);
    }
  }
  else if (v24)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void *E5RT::BufferObjectImpl::TryAsIOBufferObject(void *this)
{
  if (this) {
  return this;
  }
}

void *E5RT::BufferObjectImpl::TryAsHeapAllocatedBufferObject(void *this)
{
  if (this) {
  return this;
  }
}

void *E5RT::BufferObjectImpl::TryAsMTLBufferObject(void *this)
{
  if (this) {
  return this;
  }
}

void E5Common::Utils::GetConstantShape(E5Common::Utils *this@<X0>, const MIL::IRValueType *a2@<X1>, uint64_t a3@<X8>)
{
  E5Common::Utils::GetMILShape(this, a2, &__p);
  uint64_t v4 = __p;
  int64_t v5 = v14 - (unsigned char *)__p;
  if (v14 != __p)
  {
    if (v5 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)operator new(v14 - (unsigned char *)__p);
    uint64_t v7 = &v6[8 * (v5 >> 3)];
    bzero(v6, v5);
    unint64_t v8 = 0;
    uint64_t v9 = &v6[v5];
    while (1)
    {
      uint64_t v10 = (MIL::IRDimension *)v4[v8];
      if ((*(uint64_t (**)(MIL::IRDimension *))(*(void *)v10 + 24))(v10)) {
        break;
      }
      uint64_t v11 = MIL::IRDimension::AsConstant(v10);
      *(void *)&v6[8 * v8++] = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 48))(v11);
      uint64_t v4 = __p;
      if (v8 >= (v14 - (unsigned char *)__p) >> 3) {
        goto LABEL_8;
      }
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 24) = 0;
    *(void *)(a3 + 16) = 0;
    operator delete(v6);
    unint64_t v12 = __p;
    if (!__p) {
      return;
    }
LABEL_9:
    uint64_t v14 = v12;
    operator delete(v12);
    return;
  }
  uint64_t v6 = 0;
  uint64_t v9 = 0;
  uint64_t v7 = 0;
LABEL_8:
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v9;
  *(void *)(a3 + 16) = v7;
  *(unsigned char *)(a3 + 24) = 1;
  unint64_t v12 = __p;
  if (__p) {
    goto LABEL_9;
  }
}

void sub_19239D178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v14 = a12;
    if (!a12) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v14 = a12;
    if (!a12) {
      goto LABEL_3;
    }
  }
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

void E5Common::Utils::GetConstantStrides(E5Common::Utils *this@<X0>, uint64_t a2@<X8>)
{
  Strides = (uint64_t *)MIL::IRTensorBufferValueType::GetStrides(this);
  uint64_t v6 = *Strides;
  uint64_t v5 = Strides[1];
  int64_t v7 = v5 - *Strides;
  if (v5 == *Strides)
  {
    uint64_t v9 = 0;
    unint64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_8:
    *(void *)a2 = v9;
    *(void *)(a2 + 8) = v12;
    *(void *)(a2 + 16) = v10;
    *(unsigned char *)(a2 + 24) = 1;
  }
  else
  {
    if (v7 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = Strides;
    uint64_t v9 = (char *)operator new(v5 - v6);
    uint64_t v10 = &v9[8 * (v7 >> 3)];
    bzero(v9, v7);
    unint64_t v11 = 0;
    unint64_t v12 = &v9[v7];
    while (1)
    {
      char v13 = *(MIL::IRProperty **)(v6 + 8 * v11);
      if (MIL::IRProperty::TryAsUnknown(v13)) {
        break;
      }
      uint64_t v14 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(v13);
      *(void *)&v9[8 * v11++] = MIL::IRConstantProperty::GetInt64ScalarValue(v14);
      uint64_t v6 = *v8;
      if (v11 >= (v8[1] - *v8) >> 3) {
        goto LABEL_8;
      }
    }
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 24) = 0;
    *(void *)(a2 + 16) = 0;
    operator delete(v9);
  }
}

void sub_19239D2E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void E5Common::Utils::GetConstantInterleaves(E5Common::Utils *this@<X0>, uint64_t a2@<X8>)
{
  InterleaveFactors = (uint64_t *)MIL::IRTensorBufferValueType::GetInterleaveFactors(this);
  uint64_t v5 = *InterleaveFactors;
  uint64_t v6 = InterleaveFactors[1] - *InterleaveFactors;
  if (v6)
  {
    if (v6 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v7 = InterleaveFactors;
    size_t v8 = v6 >> 3;
    uint64_t v9 = (char *)operator new(v6 >> 3);
    uint64_t v10 = &v9[v8];
    bzero(v9, v8);
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = *(MIL::IRProperty **)(v5 + 8 * v11);
      if (MIL::IRProperty::TryAsUnknown(v12)) {
        break;
      }
      char v13 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(v12);
      v9[v11++] = MIL::IRConstantProperty::GetUInt8ScalarValue(v13);
      uint64_t v5 = *v7;
      if (v11 >= (v7[1] - *v7) >> 3) {
        goto LABEL_8;
      }
    }
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 24) = 0;
    *(void *)(a2 + 16) = 0;
    operator delete(v9);
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
LABEL_8:
    *(void *)a2 = v9;
    *(void *)(a2 + 8) = v10;
    *(void *)(a2 + 16) = v10;
    *(unsigned char *)(a2 + 24) = 1;
  }
}

void sub_19239D420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t E5Common::Utils::IsPixelBuffer(E5Common::Utils *this, const MIL::IRValueType *a2)
{
  uint64_t result = MIL::IRValueType::TryCastAsMemoryLayoutType(this);
  if (result)
  {
    uint64_t v4 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::TryCastAsMemoryLayoutType(this);
    return MIL::IRMemoryLayoutValueType::TryAsPixelBufferType(v4) != 0;
  }
  return result;
}

BOOL E5Common::Utils::IsState(E5Common::Utils *this, const MIL::IRValueType *a2)
{
  return MIL::IRValueType::TryCastAsStateType(this) != 0;
}

std::logic_error *std::invalid_argument::invalid_argument[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
  return result;
}

void E5Common::Utils::AddIntendedBackend(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
  uint64_t v5 = **v4;
  uint64_t v6 = (*v4)[1];
  if (v5 != v6)
  {
    while (1)
    {
      char v16 = 15;
      strcpy((char *)__p, "IntendedBackend");
      uint64_t Attribute = MIL::IRObject::TryGetAttribute();
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      if (Attribute)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::invalid_argument::invalid_argument[abi:ne180100](exception, "Op is already configured with IntendedBackends.");
        __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
      }
      if (*(char *)(a3 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
      }
      else {
        std::string v17 = *(std::string *)a3;
      }
      std::vector<std::string>::vector[abi:ne180100](__p, (uint64_t)&v17, 1uLL);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v17.__r_.__value_.__l.__data_);
      }
      E5Common::Utils::MILListFromCpp<std::string>((long long **)__p, (void **)&v17.__r_.__value_.__l.__data_);
      char v14 = 15;
      strcpy((char *)v13, "IntendedBackend");
      if (v17.__r_.__value_.__r.__words[0]) {
        operator new();
      }
      v17.__r_.__value_.__r.__words[0] = 0;
      MIL::IRObject::SetAttribute();
      if (v14 < 0) {
        break;
      }
      std::string::size_type v9 = v17.__r_.__value_.__r.__words[0];
      v17.__r_.__value_.__r.__words[0] = 0;
      if (v9) {
        goto LABEL_18;
      }
LABEL_19:
      uint64_t v10 = (void **)__p[0];
      if (__p[0])
      {
        unint64_t v11 = (void **)__p[1];
        int64_t v7 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            if (*((char *)v11 - 1) < 0) {
              operator delete(*(v11 - 3));
            }
            v11 -= 3;
          }
          while (v11 != v10);
          int64_t v7 = __p[0];
        }
        __p[1] = v10;
        operator delete(v7);
      }
      v5 += 16;
      if (v5 == v6) {
        return;
      }
    }
    operator delete(v13[0]);
    std::string::size_type v9 = v17.__r_.__value_.__r.__words[0];
    v17.__r_.__value_.__r.__words[0] = 0;
    if (!v9) {
      goto LABEL_19;
    }
LABEL_18:
    (*(void (**)(std::string::size_type))(*(void *)v9 + 8))(v9);
    goto LABEL_19;
  }
}

void sub_19239D7D8(_Unwind_Exception *a1)
{
}

void sub_19239D7E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19239D7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23)
{
  if (a16 < 0)
  {
    operator delete(__p);
    uint64_t v24 = a23;
    a23 = 0;
    if (v24) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v24 = a23;
    a23 = 0;
    if (v24)
    {
LABEL_3:
      (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
      std::vector<std::string>::~vector[abi:ne180100](&a17);
      _Unwind_Resume(a1);
    }
  }
  std::vector<std::string>::~vector[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

void sub_19239D890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_19239D8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void E5Common::Utils::MILListFromCpp<std::string>(long long **a1@<X1>, void **a2@<X8>)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t Scalar = MIL::IRTensorValueType::MakeScalar();
  MIL::IRListValueType::Make();
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  unint64_t v26 = 0;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (*a1 != v6)
  {
    while (1)
    {
      if (*((char *)v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)v5, *((void *)v5 + 1));
      }
      else
      {
        long long v7 = *v5;
        v27.__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
        *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v7;
      }
      std::vector<std::string>::vector[abi:ne180100](&__p, (uint64_t)&v27, 1uLL);
      Espresso::MILUtil::MakeTensorValue<std::string>(&v21, Scalar, &__p);
      uint64_t v22 = v21;
      if (v21) {
        operator new();
      }
      int v23 = 0;
      uint64_t v21 = 0;
      std::string::size_type v9 = v25;
      if ((unint64_t)v25 < v26) {
        break;
      }
      uint64_t v10 = std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>((char **)&v24, (uint64_t)&v22);
      unint64_t v11 = v23;
      uint64_t v25 = v10;
      if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        uint64_t v8 = v21;
        uint64_t v21 = 0;
        if (!v8) {
          goto LABEL_16;
        }
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
        goto LABEL_16;
      }
      uint64_t v8 = v21;
      uint64_t v21 = 0;
      if (v8) {
        goto LABEL_15;
      }
LABEL_16:
      unint64_t v12 = (void **)__p;
      if (__p)
      {
        char v13 = v20;
        char v14 = __p;
        if (v20 != __p)
        {
          do
          {
            if (*((char *)v13 - 1) < 0) {
              operator delete(*(v13 - 3));
            }
            v13 -= 3;
          }
          while (v13 != v12);
          char v14 = __p;
        }
        std::string::size_type v20 = v12;
        operator delete(v14);
      }
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
      uint64_t v5 = (long long *)((char *)v5 + 24);
      if (v5 == v6) {
        goto LABEL_28;
      }
    }
    *(void *)uint64_t v25 = v22;
    *((void *)v9 + 1) = 0;
    uint64_t v22 = 0;
    int v23 = 0;
    uint64_t v25 = v9 + 16;
    uint64_t v8 = v21;
    uint64_t v21 = 0;
    if (!v8) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_28:
  MIL::IRListValueType::MakeValue();
  *a2 = __p;
  long long v15 = (char *)v24;
  if (v24)
  {
    char v16 = v25;
    std::string v17 = v24;
    if (v25 != v24)
    {
      do
      {
        uint64_t v18 = (std::__shared_weak_count *)*((void *)v16 - 1);
        if (v18)
        {
          if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        v16 -= 16;
      }
      while (v16 != v15);
      std::string v17 = v24;
    }
    uint64_t v25 = v15;
    operator delete(v17);
  }
}

void sub_19239DBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_19239DC0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  uint64_t v25 = a13;
  a13 = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  std::vector<std::string>::~vector[abi:ne180100](&a10);
  if (a24 < 0) {
    operator delete(__p);
  }
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

void E5Common::Utils::MakeIRValueFromPropertyVec(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 == v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "There must be at least one property in the vector.");
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  size_t v5 = v3 - v4;
  if (v3 - v4 < 0) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v38 = (char *)operator new(v3 - v4);
  bzero(v38, v5);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  char v9 = 0;
  unint64_t v10 = 0;
  uint64_t v39 = &v38[v5];
  do
  {
    if (MIL::IRProperty::TryAsUnknown(*(MIL::IRProperty **)(v4 + 8 * v10)))
    {
      unint64_t v11 = (unint64_t)v38;
      *(void *)&v38[8 * v10] = -1;
      char v9 = 1;
    }
    else
    {
      unint64_t v12 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(*(MIL::IRProperty **)(*a1 + 8 * v10));
      if (MIL::IRConstantProperty::GetScalarDataType(v12) == 14)
      {
        unint64_t v11 = (unint64_t)v38;
        *(void *)&v38[8 * v10] = MIL::IRConstantProperty::GetUInt8ScalarValue(v12);
        ++v8;
      }
      else
      {
        if (MIL::IRConstantProperty::GetScalarDataType(v12) != 12)
        {
          BOOL v32 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v32, "Unsupported IRConstantProperty dtype.");
          v32->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
          __cxa_throw(v32, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
        }
        unint64_t v11 = (unint64_t)v38;
        *(void *)&v38[8 * v10] = MIL::IRConstantProperty::GetInt64ScalarValue(v12);
        ++v7;
      }
    }
    ++v10;
    uint64_t v4 = *a1;
  }
  while (v10 < (a1[1] - *a1) >> 3);
  if (v8 && v7)
  {
    uint64_t v34 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v34, "All constant properties must have the same dtype.");
    goto LABEL_56;
  }
  if (v8 != 0 && (v9 & 1) != 0)
  {
    uint64_t v34 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v34, "Unknown properties are not supported for uint8 dtypes.");
LABEL_56:
    v34->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(v34, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  if (!v8)
  {
    __pa = operator new(8uLL);
    void *__pa = (uint64_t)&v39[-v11] >> 3;
    MIL::IRTensorValueType::Make();
    if (__pa) {
      operator delete(__pa);
    }
    MIL::IRTensorValueType::MakeInt64Value();
    *a2 = __pa;
    if (__pa) {
      operator new();
    }
    a2[1] = 0;
    uint64_t v21 = v38;
    if (v38) {
      goto LABEL_34;
    }
    return;
  }
  long long __p = 0;
  uint64_t v13 = (uint64_t)&v39[-v11];
  if (v39 == (char *)v11)
  {
    char v14 = 0;
    long long v15 = 0;
    goto LABEL_28;
  }
  if (v13 < 0) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  char v14 = operator new(v13 >> 3);
  long long v15 = (char *)v14 + (v13 >> 3);
  long long __p = v14;
  bzero(v14, v13 >> 3);
  unint64_t v16 = v13 - 8;
  if ((unint64_t)(v13 - 8) < 0x38
    || (unint64_t v17 = v16 >> 3, (unint64_t)v14 < v11 + (v16 & 0xFFFFFFFFFFFFFFF8) + 8)
    && v11 < (unint64_t)v14 + v17 + 1)
  {
    uint64_t v18 = v14;
    uint64_t v19 = (char *)v11;
    goto LABEL_21;
  }
  unint64_t v22 = v17 + 1;
  if (v16 >= 0xF8)
  {
    uint64_t v23 = v22 & 0x3FFFFFFFFFFFFFE0;
    uint64_t v24 = (int8x16x4_t *)(v11 + 128);
    uint64_t v25 = v14 + 1;
    uint64_t v26 = v22 & 0x3FFFFFFFFFFFFFE0;
    do
    {
      *(void *)&long long v27 = vqtbl4q_s8(v24[-2], (int8x16_t)xmmword_192DB8C50).u64[0];
      *(void *)&long long v28 = vqtbl4q_s8(*v24, (int8x16_t)xmmword_192DB8C50).u64[0];
      *((void *)&v27 + 1) = vqtbl4q_s8(v24[-1], (int8x16_t)xmmword_192DB8C50).u64[0];
      *((void *)&v28 + 1) = vqtbl4q_s8(v24[1], (int8x16_t)xmmword_192DB8C50).u64[0];
      *(v25 - 1) = v27;
      _OWORD *v25 = v28;
      v24 += 4;
      v25 += 2;
      v26 -= 32;
    }
    while (v26);
    if (v22 == v23) {
      goto LABEL_28;
    }
    if ((v22 & 0x18) == 0)
    {
      uint64_t v19 = (char *)(v11 + 8 * v23);
      uint64_t v18 = (char *)v14 + v23;
      do
      {
LABEL_21:
        uint64_t v20 = *(void *)v19;
        v19 += 8;
        *v18++ = v20;
      }
      while (v19 != v39);
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v23 = 0;
  }
  uint64_t v18 = (char *)v14 + (v22 & 0x3FFFFFFFFFFFFFF8);
  uint64_t v19 = (char *)(v11 + 8 * (v22 & 0x3FFFFFFFFFFFFFF8));
  uint64_t v29 = (void *)((char *)v14 + v23);
  uint64_t v30 = v23 - (v22 & 0x3FFFFFFFFFFFFFF8);
  std::string v31 = (int8x16x4_t *)(v11 + 8 * v23);
  do
  {
    *v29++ = vqtbl4q_s8(*v31++, (int8x16_t)xmmword_192DB8C60).u64[0];
    v30 += 8;
  }
  while (v30);
  if (v22 != (v22 & 0x3FFFFFFFFFFFFFF8)) {
    goto LABEL_21;
  }
LABEL_28:
  id v35 = operator new(8uLL);
  void *v35 = v15 - (char *)v14;
  MIL::IRTensorValueType::Make();
  if (v35) {
    operator delete(v35);
  }
  MIL::IRTensorValueType::MakeUInt8Value();
  *a2 = v35;
  if (v35) {
    operator new();
  }
  a2[1] = 0;
  if (__p) {
    operator delete(__p);
  }
  uint64_t v21 = v38;
  if (v38) {
LABEL_34:
  }
    operator delete(v21);
}

void sub_19239E200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (a13) {
    Espresso::AOT::MILCompilerForMPSGraph::Run((uint64_t)a13);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<MIL::IRValue const *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<MIL::IRValue const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192E07A8CLL) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192E07A8CLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192E07A8CLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192E07A8CLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::__shared_ptr_pointer<MIL::IRTensorValue const *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<MIL::IRTensorValue const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192E07968) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192E07968 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192E07968)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192E07968 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t Espresso::AOT::MILCompilerForMPSGraph::Run(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

uint64_t E5RT::BufferObject::GetHandle<__IOSurface *>(uint64_t a1)
{
  uint64_t v1 = E5RT::BufferObjectImpl::TryAsIOBufferObject(*(void **)(a1 + 8));
  if (!v1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "GetHandle");
    std::string::basic_string[abi:ne180100]<0>(v4, "Buffer object is not backed by an IOSurface.");
    E5RT::Status::Status(v5, 2, v4);
    E5RT::E5RTError::E5RTError(exception, v6, v5);
  }
  return v1[4];
}

void sub_19239E530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::IOBufferObject::~IOBufferObject(CFTypeRef *this)
{
  CFRelease(this[4]);

  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)this);
}

{
  uint64_t vars8;

  CFRelease(this[4]);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)this);

  JUMPOUT(0x192FF16B0);
}

void E5RT::IOBufferObject::CreateBufferAliasImpl(E5RT::IOBufferObject *this, unint64_t a2, uint64_t a3)
{
  v22[7] = *MEMORY[0x1E4F143B8];
  if (a3 + a2 <= *((void *)this + 1))
  {
    if (a3 + a2 >= a2)
    {
      v21[0] = *MEMORY[0x1E4F2F2C0];
      size_t v5 = objc_msgSend(NSNumber, "numberWithUnsignedLong:");
      uint64_t v6 = *MEMORY[0x1E4F2F0E8];
      v22[0] = v5;
      v22[1] = &unk_1EE3AED28;
      uint64_t v7 = *MEMORY[0x1E4F2EFE0];
      v21[1] = v6;
      v21[2] = v7;
      uint64_t v8 = [NSNumber numberWithUnsignedLong:a3];
      uint64_t v9 = *MEMORY[0x1E4F2EFD8];
      v22[2] = v8;
      v22[3] = &unk_1EE3AED28;
      uint64_t v10 = *MEMORY[0x1E4F2F138];
      void v21[3] = v9;
      v21[4] = v10;
      unint64_t v11 = [NSNumber numberWithUnsignedLong:a2];
      v22[4] = v11;
      v21[5] = *MEMORY[0x1E4F2EFB8];
      unint64_t v12 = [NSNumber numberWithUnsignedLong:a3];
      v22[5] = v12;
      v21[6] = *MEMORY[0x1E4F2F150];
      uint64_t v13 = [NSNumber numberWithUnsignedInt:1278226488];
      v22[6] = v13;
      [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v22 forKeys:v21 count:7];
      objc_claimAutoreleasedReturnValue();

      ChildSurface = (__IOSurface *)IOSurfaceCreateChildSurface();
      if (IOSurfaceGetBaseAddress(ChildSurface)) {
        operator new();
      }
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v20, "CreateBufferAliasImpl");
      std::string::basic_string[abi:ne180100]<0>(v18, "Failed to create child surface.");
      E5RT::Status::Status(v19, 3, v18);
      E5RT::E5RTError::E5RTError(exception, v20, v19);
    }
    unint64_t v16 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v20, "CreateBufferAliasImpl");
    std::string::basic_string[abi:ne180100]<0>(v18, "Invalid offset, size specified.");
    E5RT::Status::Status(v19, 1, v18);
    E5RT::E5RTError::E5RTError(v16, v20, v19);
  }
  long long v15 = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v20, "CreateBufferAliasImpl");
  std::string::basic_string[abi:ne180100]<0>(v18, "Parent Memory object isn't adequately sized.");
  E5RT::Status::Status(v19, 1, v18);
  E5RT::E5RTError::E5RTError(v15, v20, v19);
}

void sub_19239E9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::unique_ptr<E5RT::IOBufferObject>::~unique_ptr[abi:ne180100]((CFTypeRef **)&a17);

  _Unwind_Resume(a1);
}

uint64_t E5RT::IOBufferObject::GetType(E5RT::IOBufferObject *this)
{
  return 0;
}

void E5RT::IOSurfaceObject::~IOSurfaceObject(E5RT::IOSurfaceObject *this)
{
  uint64_t v2 = (const void *)*((void *)this + 1);
  if (v2) {
    CFRelease(v2);
  }

  E5RT::AsyncEventImpl::~AsyncEventImpl(this);
}

{
  const void *v2;
  uint64_t vars8;

  uint64_t v2 = (const void *)*((void *)this + 1);
  if (v2) {
    CFRelease(v2);
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl(this);

  JUMPOUT(0x192FF16B0);
}

void E5RT::IOSurfaceObject::AllocIOSurfaceObjectImpl(E5RT::IOSurfaceObject *this, const E5RT::SurfaceDescriptor *a2)
{
  CVPixelBufferRef pixelBufferOut = 0;
  uint64_t v3 = [MEMORY[0x1E4F1CA60] dictionary];
  [v3 setValue:MEMORY[0x1E4F1CC08] forKey:*MEMORY[0x1E4F24D20]];
  uint64_t v4 = NSNumber;
  unsigned int SurfaceFormat = E5RT::SurfaceDescriptor::GetSurfaceFormat(this);
  uint64_t v6 = [v4 numberWithUnsignedInt:E5RT::SurfaceFormatToCVPB4cc(SurfaceFormat)];
  [v3 setValue:v6 forKey:*MEMORY[0x1E4F24D70]];

  uint64_t CustomRowStrides = E5RT::SurfaceDescriptor::TryGetCustomRowStrides(this);
  if (*(void *)CustomRowStrides != *(void *)(CustomRowStrides + 8))
  {
    if (E5RT::SurfaceDescriptor::GetSurfacePlaneCount(this) == 1)
    {
      uint64_t v8 = [NSNumber numberWithUnsignedLong:**(void **)CustomRowStrides];
      [v3 setValue:v8 forKey:*MEMORY[0x1E4F24CC8]];
    }
    else
    {
      uint64_t v8 = objc_opt_new();
      uint64_t v9 = *(void **)CustomRowStrides;
      uint64_t v10 = *(void **)(CustomRowStrides + 8);
      if (*(void **)CustomRowStrides != v10)
      {
        do
        {
          unint64_t v11 = [NSNumber numberWithUnsignedLong:*v9];
          [v8 addObject:v11];

          ++v9;
        }
        while (v9 != v10);
      }
      [v3 setValue:v8 forKey:*MEMORY[0x1E4F24CC8]];
    }
  }
  uint64_t SurfaceSliceCount = E5RT::SurfaceDescriptor::GetSurfaceSliceCount(this);
  unsigned int v13 = E5RT::SurfaceDescriptor::GetSurfaceFormat(this);
  if (E5RT::IsMultiSliceFormat(v13))
  {
    char v14 = [NSNumber numberWithUnsignedLong:SurfaceSliceCount];
    [v3 setValue:v14 forKey:*MEMORY[0x1E4F24D48]];
  }
  size_t SurfaceWidth = E5RT::SurfaceDescriptor::GetSurfaceWidth(this);
  size_t SurfaceHeight = E5RT::SurfaceDescriptor::GetSurfaceHeight(this);
  unsigned int v17 = E5RT::SurfaceDescriptor::GetSurfaceFormat(this);
  OSType v18 = E5RT::SurfaceFormatToCVPB4cc(v17);
  if (!CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], SurfaceWidth, SurfaceHeight, v18, (CFDictionaryRef)v3, &pixelBufferOut))operator new(); {
  exception = __cxa_allocate_exception(0x18uLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v22, "AllocIOSurfaceObjectImpl");
  std::string::basic_string[abi:ne180100]<0>(v20, "Failed to allocate IOSurface for surface.");
  E5RT::Status::Status(v21, 3, v20);
  E5RT::E5RTError::E5RTError(exception, v22, v21);
}

void sub_19239EF18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19239EF2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19239EF40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19239EF50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19239EF64(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v2, 0xA1C40BD48D6D6);

  _Unwind_Resume(a1);
}

void sub_19239EF8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19239EFA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19239EFB0(_Unwind_Exception *a1)
{
  std::unique_ptr<E5RT::IOSurfaceObject>::~unique_ptr[abi:ne180100](v2);

  _Unwind_Resume(a1);
}

void sub_19239EFC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19239EFD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19239EFE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19239EFF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19239F00C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19239F024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v23 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

E5RT::AsyncEventImpl **std::unique_ptr<E5RT::IOSurfaceObject>::~unique_ptr[abi:ne180100](E5RT::AsyncEventImpl **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = (const void *)*((void *)v2 + 1);
    if (v3) {
      CFRelease(v3);
    }
    E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

uint64_t E5RT::SurfaceObject::GetHandle<__IOSurface *>(uint64_t a1)
{
  uint64_t v1 = E5RT::SurfaceObjectImpl::TryAsIOSurfaceObject(*(void **)(a1 + 8));
  if (!v1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "GetHandle");
    std::string::basic_string[abi:ne180100]<0>(v4, "FormattedBuffer object is not backed by an IOSurface.");
    E5RT::Status::Status(v5, 1, v4);
    E5RT::E5RTError::E5RTError(exception, v6, v5);
  }
  return v1[1];
}

void sub_19239F1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t sub_19239F224(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

void E5RT::MemoryObject::~MemoryObject(E5RT::MemoryObject *this)
{
}

void sub_19239F3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *E5RT::MemoryObject::Surface(E5RT::MemoryObject *this)
{
  if (!this
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "Surface");
    std::string::basic_string[abi:ne180100]<0>(v3, "Bad cast failure.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return result;
}

{
  void *result;
  void *exception;
  void v3[3];
  unsigned char v4[8];
  void v5[3];

  if (!this
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "Surface");
    std::string::basic_string[abi:ne180100]<0>(v3, "Bad cast failure.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return result;
}

void sub_19239F574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void sub_19239F6D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

id E5RT::GetSurfaceInformation(E5RT *this, const E5RT::SurfaceDescriptor *a2)
{
  v18[6] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [NSNumber numberWithUnsignedLong:E5RT::SurfaceDescriptor::GetSurfaceWidth(this)];
  uint64_t v4 = [NSNumber numberWithUnsignedLong:E5RT::SurfaceDescriptor::GetSurfaceHeight(this)];
  size_t v5 = [NSNumber numberWithUnsignedLong:E5RT::SurfaceDescriptor::GetSurfacePlaneCount(this)];
  uint64_t v6 = [NSNumber numberWithUnsignedLongLong:E5RT::SurfaceDescriptor::GetSurfaceSliceCount(this)];
  unsigned int SurfaceFormat = E5RT::SurfaceDescriptor::GetSurfaceFormat(this);
  if (SurfaceFormat <= 0x21) {
    uint64_t v8 = E5RT_FB::EnumNamesSurfaceFormat(void)::names[SurfaceFormat];
  }
  else {
    uint64_t v8 = "";
  }
  uint64_t v9 = [NSString stringWithUTF8String:v8];
  uint64_t v10 = [MEMORY[0x1E4F1CA48] array];
  uint64_t CustomRowStrides = (void *)E5RT::SurfaceDescriptor::TryGetCustomRowStrides(this);
  unint64_t v12 = (void *)*CustomRowStrides;
  unsigned int v13 = (void *)CustomRowStrides[1];
  if ((void *)*CustomRowStrides != v13)
  {
    do
    {
      char v14 = [NSNumber numberWithLong:*v12];
      [v10 addObject:v14];

      ++v12;
    }
    while (v12 != v13);
  }
  v17[0] = @"Width";
  v17[1] = @"Height";
  v18[0] = v3;
  v18[1] = v4;
  void v17[2] = @"Planes";
  void v17[3] = @"Format";
  v18[2] = v5;
  void v18[3] = v9;
  v17[4] = @"BytesPerRowStrides";
  v17[5] = @"Slices";
  v18[4] = v10;
  v18[5] = v6;
  long long v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v18 forKeys:v17 count:6];

  return v15;
}

void sub_19239F964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id E5RT::GetTensorDataTypeInformation(E5RT *this, const E5RT::TensorDataType *a2)
{
  v13[2] = *MEMORY[0x1E4F143B8];
  int ComponentDataType = E5RT::TensorDataType::GetComponentDataType(this);
  Componentuint64_t Size = E5RT::TensorDataType::GetComponentSize((E5RT::TensorDataType::Impl **)this);
  uint64_t NumComponents = E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)this);
  uint64_t v6 = &stru_1EE39BDB0;
  if (ComponentDataType == 4)
  {
    uint64_t v7 = @"Float32";
    if (ComponentSize != 4) {
      uint64_t v7 = &stru_1EE39BDB0;
    }
    if (ComponentSize == 2) {
      uint64_t v6 = @"Float16";
    }
    else {
      uint64_t v6 = v7;
    }
  }
  else if (ComponentDataType == 1)
  {
    if ((ComponentSize - 1) < 4u) {
      uint64_t v6 = off_1E5745AA8[(char)(ComponentSize - 1)];
    }
  }
  else if (!ComponentDataType && (ComponentSize - 1) < 4u)
  {
    uint64_t v6 = off_1E5745A88[(char)(ComponentSize - 1)];
  }
  if ([(__CFString *)v6 isEqualToString:&stru_1EE39BDB0])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unknown tensor component data type.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  v12[0] = @"ComponentDataType";
  v12[1] = @"Interleave";
  v13[0] = v6;
  uint64_t v8 = [NSNumber numberWithInt:NumComponents];
  v13[1] = v8;
  uint64_t v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v13 forKeys:v12 count:2];

  return v9;
}

void sub_19239FB88(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19239FB9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id E5RT::GetTensorInformation(E5RT *this, const E5RT::TensorDescriptor *a2)
{
  v24[6] = *MEMORY[0x1E4F143B8];
  uint64_t v21 = [NSNumber numberWithUnsignedLong:E5RT::TensorDescriptor::GetRank(this)];
  if (E5RT::TensorDescriptor::HasKnownShape(this))
  {
    uint64_t v20 = [NSNumber numberWithUnsignedLong:E5RT::TensorDescriptor::GetSize((E5RT::TensorDescriptorImpl **)this)];
  }
  else
  {
    uint64_t v20 = &unk_1EE3AED40;
  }
  E5RT::TensorDescriptor::GetTensorDataType(this, (E5RT::TensorDataType *)v22);
  uint64_t v4 = E5RT::GetTensorDataTypeInformation((E5RT *)v22, v3);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v22);
  int HasKnownShape = E5RT::TensorDescriptor::HasKnownShape(this);
  uint64_t v6 = @"NO";
  if (HasKnownShape) {
    uint64_t v6 = @"YES";
  }
  uint64_t v7 = v6;
  uint64_t v8 = [MEMORY[0x1E4F1CA48] array];
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  unint64_t v11 = *(void **)TensorShape;
  uint64_t v10 = *(void **)(TensorShape + 8);
  if (*(void **)TensorShape != v10)
  {
    do
    {
      if (*v11 == -1)
      {
        unint64_t v12 = &unk_1EE3AED40;
      }
      else
      {
        unint64_t v12 = objc_msgSend(NSNumber, "numberWithUnsignedLong:");
      }
      [v8 addObject:v12];

      ++v11;
    }
    while (v11 != v10);
  }
  unsigned int v13 = [MEMORY[0x1E4F1CA48] array];
  uint64_t TensorStrides = E5RT::TensorDescriptor::GetTensorStrides(this);
  unint64_t v16 = *(void **)TensorStrides;
  long long v15 = *(void **)(TensorStrides + 8);
  if (*(void **)TensorStrides != v15)
  {
    do
    {
      unsigned int v17 = &unk_1EE3AED40;
      if (*v16 != 0x7FFFFFFFFFFFFFFFLL)
      {
        unsigned int v17 = objc_msgSend(NSNumber, "numberWithLong:");
      }
      [v13 addObject:v17];

      ++v16;
    }
    while (v16 != v15);
  }
  v23[0] = @"Rank";
  v23[1] = @"Size";
  v24[0] = v21;
  v24[1] = v20;
  v23[2] = @"DataType";
  v23[3] = @"Shape";
  v24[2] = v4;
  v24[3] = v8;
  v23[4] = @"Strides";
  v23[5] = @"HasKnownShape";
  v24[4] = v13;
  v24[5] = v7;
  OSType v18 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v24 forKeys:v23 count:6];

  return v18;
}

void sub_19239FE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

uint64_t E5RT::GetOperandDescriptorInformation@<X0>(E5RT *this@<X0>, uint64_t a2@<X8>)
{
  size_t v5 = (E5RT *)E5RT::OperandDescriptor::TryAsTensorDescriptor(this);
  if (v5)
  {
    uint64_t result = E5RT::GetTensorInformation(v5, v6);
    *(void *)a2 = result;
    *(unsigned char *)(a2 + 8) = 1;
  }
  else
  {
    uint64_t v8 = (E5RT *)E5RT::OperandDescriptor::SurfaceDescriptor(this);
    uint64_t result = E5RT::GetSurfaceInformation(v8, v9);
    *(void *)a2 = result;
    *(unsigned char *)(a2 + 8) = 0;
  }
  return result;
}

void E5RT::GetTensorDescriptor(E5RT *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v156 = *MEMORY[0x1E4F143B8];
  BYTE7(v155[1]) = 5;
  strcpy((char *)v155, "Shape");
  v132 = this;
  uint64_t v3 = sub_1923A12A0(v132, (uint64_t *)v155);
  if (SBYTE7(v155[1]) < 0) {
    operator delete(*(void **)&v155[0]);
  }
  v144 = 0;
  v145 = 0;
  v143 = 0;
  memset(v146, 0, sizeof(v146));
  long long v147 = 0u;
  long long v148 = 0u;
  obuint64_t j = v3;
  uint64_t v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", v146, v155, 16, a2);
  if (v4)
  {
    size_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    id v8 = **(id **)&v146[16];
    id v134 = **(id **)&v146[16];
    while (1)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (**(id **)&v146[16] != v8) {
          objc_enumerationMutation(obj);
        }
        uint64_t v10 = *(void **)(*(void *)&v146[8] + 8 * i);
        if (![v10 isEqualToNumber:&unk_1EE3AED40])
        {
          uint64_t v18 = [v10 unsignedIntegerValue];
          uint64_t v19 = v18;
          if (v7 < v6)
          {
            *v7++ = v18;
            continue;
          }
          int64_t v20 = (char *)v7 - (char *)v5;
          uint64_t v21 = v7 - v5;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 61)
          {
            v144 = v7;
            v145 = v6;
            v143 = v5;
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          if (((char *)v6 - (char *)v5) >> 2 > v22) {
            unint64_t v22 = ((char *)v6 - (char *)v5) >> 2;
          }
          if ((unint64_t)((char *)v6 - (char *)v5) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v22;
          }
          if (v23)
          {
            if (v23 >> 61)
            {
              v144 = v7;
              v145 = v6;
              v143 = v5;
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v24 = operator new(8 * v23);
            uint64_t v25 = (uint64_t *)&v24[8 * v21];
            uint64_t *v25 = v19;
            uint64_t v26 = v25 + 1;
            if (v7 == v5) {
              goto LABEL_45;
            }
LABEL_42:
            unint64_t v30 = (char *)(v7 - 1) - (char *)v5;
            if (v30 < 0x168)
            {
              std::string v31 = v7;
              goto LABEL_44;
            }
            if (&v24[v20 - 8 - (v30 & 0xFFFFFFFFFFFFFFF8)] > &v24[v20 - 8])
            {
              std::string v31 = v7;
              goto LABEL_44;
            }
            if ((uint64_t *)((char *)v7 - (v30 & 0xFFFFFFFFFFFFFFF8) - 8) > v7 - 1)
            {
              std::string v31 = v7;
              goto LABEL_44;
            }
            if ((unint64_t)((char *)v5 - v24) < 0x20)
            {
              std::string v31 = v7;
              goto LABEL_44;
            }
            uint64_t v39 = (v30 >> 3) + 1;
            uint64_t v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
            std::string v31 = &v7[v40 / 0xFFFFFFFFFFFFFFF8];
            uint64_t v25 = (uint64_t *)((char *)v25 - v40);
            uint64_t v41 = &v24[v20 - 16];
            char v42 = v7 - 2;
            uint64_t v43 = v39 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v44 = *(_OWORD *)v42;
              *(v41 - 1) = *((_OWORD *)v42 - 1);
              *uint64_t v41 = v44;
              v41 -= 2;
              v42 -= 4;
              v43 -= 4;
            }
            while (v43);
            if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_44:
                uint64_t v32 = *--v31;
                *--uint64_t v25 = v32;
              }
              while (v31 != v5);
            }
          }
          else
          {
            uint64_t v24 = 0;
            uint64_t v25 = (uint64_t *)(8 * v21);
            uint64_t *v25 = v19;
            uint64_t v26 = v25 + 1;
            if (v7 != v5) {
              goto LABEL_42;
            }
          }
LABEL_45:
          uint64_t v6 = (uint64_t *)&v24[8 * v23];
          if (v5) {
            operator delete(v5);
          }
          size_t v5 = v25;
          uint64_t v7 = v26;
          goto LABEL_48;
        }
        if (v7 < v6)
        {
          *v7++ = -1;
          continue;
        }
        int64_t v11 = (char *)v7 - (char *)v5;
        uint64_t v12 = v7 - v5;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61)
        {
          v144 = v7;
          v145 = v6;
          v143 = v5;
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (((char *)v6 - (char *)v5) >> 2 > v13) {
          unint64_t v13 = ((char *)v6 - (char *)v5) >> 2;
        }
        if ((unint64_t)((char *)v6 - (char *)v5) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          if (v14 >> 61)
          {
            v144 = v7;
            v145 = v6;
            v143 = v5;
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v15 = operator new(8 * v14);
          unint64_t v16 = (uint64_t *)&v15[8 * v12];
          *unint64_t v16 = -1;
          uint64_t v17 = (uint64_t)(v16 + 1);
          if (v7 == v5) {
            goto LABEL_38;
          }
        }
        else
        {
          long long v15 = 0;
          unint64_t v16 = (uint64_t *)(8 * v12);
          *(void *)(8 * v12) = -1;
          uint64_t v17 = 8 * v12 + 8;
          if (v7 == v5) {
            goto LABEL_38;
          }
        }
        unint64_t v27 = (char *)(v7 - 1) - (char *)v5;
        if (v27 >= 0x168)
        {
          if (&v15[v11 - 8 - (v27 & 0xFFFFFFFFFFFFFFF8)] > &v15[v11 - 8])
          {
            long long v28 = v7;
          }
          else if ((uint64_t *)((char *)v7 - (v27 & 0xFFFFFFFFFFFFFFF8) - 8) > v7 - 1)
          {
            long long v28 = v7;
          }
          else if ((unint64_t)((char *)v5 - v15) >= 0x20)
          {
            uint64_t v33 = (v27 >> 3) + 1;
            uint64_t v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            long long v28 = &v7[v34 / 0xFFFFFFFFFFFFFFF8];
            unint64_t v16 = (uint64_t *)((char *)v16 - v34);
            id v35 = &v15[v11 - 16];
            int v36 = v7 - 2;
            uint64_t v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v38 = *(_OWORD *)v36;
              *(v35 - 1) = *((_OWORD *)v36 - 1);
              _OWORD *v35 = v38;
              v35 -= 2;
              v36 -= 4;
              v37 -= 4;
            }
            while (v37);
            if (v33 == (v33 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_38;
            }
          }
          else
          {
            long long v28 = v7;
          }
        }
        else
        {
          long long v28 = v7;
        }
        do
        {
          uint64_t v29 = *--v28;
          *--unint64_t v16 = v29;
        }
        while (v28 != v5);
LABEL_38:
        uint64_t v6 = (uint64_t *)&v15[8 * v14];
        if (v5) {
          operator delete(v5);
        }
        size_t v5 = v16;
        uint64_t v7 = (uint64_t *)v17;
LABEL_48:
        id v8 = v134;
      }
      uint64_t v4 = [obj countByEnumeratingWithState:v146 objects:v155 count:16];
      if (!v4)
      {
        v144 = v7;
        v145 = v6;
        v143 = v5;
        break;
      }
    }
  }

  BYTE7(v155[1]) = 7;
  strcpy((char *)v155, "Strides");
  uint64_t v45 = sub_1923A12A0(v132, (uint64_t *)v155);
  if (SBYTE7(v155[1]) < 0) {
    operator delete(*(void **)&v155[0]);
  }
  id v46 = v45;
  v141 = 0;
  v142 = 0;
  v140 = 0;
  memset(v146, 0, sizeof(v146));
  long long v147 = 0u;
  long long v148 = 0u;
  id v135 = v46;
  uint64_t v47 = [v135 countByEnumeratingWithState:v146 objects:v155 count:16];
  if (v47)
  {
    v48 = 0;
    v49 = 0;
    v50 = 0;
    uint64_t v51 = **(void **)&v146[16];
    uint64_t v133 = **(void **)&v146[16];
    while (1)
    {
      for (uint64_t j = 0; j != v47; ++j)
      {
        if (**(void **)&v146[16] != v51) {
          objc_enumerationMutation(v135);
        }
        std::string v53 = *(void **)(*(void *)&v146[8] + 8 * j);
        if ([v53 isEqualToNumber:&unk_1EE3AED40])
        {
          if (v50 < v49)
          {
            *v50++ = 0x7FFFFFFFFFFFFFFFLL;
            continue;
          }
          int64_t v54 = (char *)v50 - (char *)v48;
          uint64_t v55 = v50 - v48;
          unint64_t v56 = v55 + 1;
          if ((unint64_t)(v55 + 1) >> 61)
          {
            v141 = v50;
            v142 = v49;
            v140 = v48;
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          if (((char *)v49 - (char *)v48) >> 2 > v56) {
            unint64_t v56 = ((char *)v49 - (char *)v48) >> 2;
          }
          if ((unint64_t)((char *)v49 - (char *)v48) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v57 = v56;
          }
          if (v57)
          {
            if (v57 >> 61)
            {
              v141 = v50;
              v142 = v49;
              v140 = v48;
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            std::string v58 = operator new(8 * v57);
            v59 = (uint64_t *)&v58[8 * v55];
            uint64_t *v59 = 0x7FFFFFFFFFFFFFFFLL;
            v60 = v59 + 1;
            if (v50 == v48) {
              goto LABEL_108;
            }
LABEL_105:
            unint64_t v70 = (char *)(v50 - 1) - (char *)v48;
            if (v70 < 0x168)
            {
              v71 = v50;
              goto LABEL_107;
            }
            if (&v58[v54 - 8 - (v70 & 0xFFFFFFFFFFFFFFF8)] > &v58[v54 - 8])
            {
              v71 = v50;
              goto LABEL_107;
            }
            if ((uint64_t *)((char *)v50 - (v70 & 0xFFFFFFFFFFFFFFF8) - 8) > v50 - 1)
            {
              v71 = v50;
              goto LABEL_107;
            }
            if ((unint64_t)((char *)v48 - v58) < 0x20)
            {
              v71 = v50;
              goto LABEL_107;
            }
            uint64_t v76 = (v70 >> 3) + 1;
            uint64_t v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
            v71 = &v50[v77 / 0xFFFFFFFFFFFFFFF8];
            v59 = (uint64_t *)((char *)v59 - v77);
            v78 = &v58[v54 - 16];
            v79 = v50 - 2;
            uint64_t v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v81 = *(_OWORD *)v79;
              *(v78 - 1) = *((_OWORD *)v79 - 1);
              _OWORD *v78 = v81;
              v78 -= 2;
              v79 -= 4;
              v80 -= 4;
            }
            while (v80);
            if (v76 != (v76 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_107:
                uint64_t v72 = *--v71;
                *--v59 = v72;
              }
              while (v71 != v48);
            }
          }
          else
          {
            std::string v58 = 0;
            v59 = (uint64_t *)(8 * v55);
            uint64_t *v59 = 0x7FFFFFFFFFFFFFFFLL;
            v60 = v59 + 1;
            if (v50 != v48) {
              goto LABEL_105;
            }
          }
LABEL_108:
          v49 = (uint64_t *)&v58[8 * v57];
          if (v48) {
            operator delete(v48);
          }
          v48 = v59;
          v50 = v60;
          continue;
        }
        uint64_t v61 = [v53 integerValue];
        uint64_t v62 = v61;
        if (v50 < v49)
        {
          *v50++ = v61;
          continue;
        }
        int64_t v63 = (char *)v50 - (char *)v48;
        uint64_t v64 = v50 - v48;
        unint64_t v65 = v64 + 1;
        if ((unint64_t)(v64 + 1) >> 61)
        {
          v141 = v50;
          v142 = v49;
          v140 = v48;
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if (((char *)v49 - (char *)v48) >> 2 > v65) {
          unint64_t v65 = ((char *)v49 - (char *)v48) >> 2;
        }
        if ((unint64_t)((char *)v49 - (char *)v48) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v66 = v65;
        }
        if (v66)
        {
          if (v66 >> 61)
          {
            v141 = v50;
            v142 = v49;
            v140 = v48;
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          v67 = operator new(8 * v66);
          v68 = (uint64_t *)&v67[8 * v64];
          uint64_t *v68 = v62;
          v69 = v68 + 1;
          if (v50 == v48) {
            goto LABEL_115;
          }
        }
        else
        {
          v67 = 0;
          v68 = (uint64_t *)(8 * v64);
          uint64_t *v68 = v62;
          v69 = v68 + 1;
          if (v50 == v48) {
            goto LABEL_115;
          }
        }
        unint64_t v73 = (char *)(v50 - 1) - (char *)v48;
        if (v73 >= 0x168)
        {
          if (&v67[v63 - 8 - (v73 & 0xFFFFFFFFFFFFFFF8)] > &v67[v63 - 8])
          {
            v74 = v50;
          }
          else if ((uint64_t *)((char *)v50 - (v73 & 0xFFFFFFFFFFFFFFF8) - 8) > v50 - 1)
          {
            v74 = v50;
          }
          else if ((unint64_t)((char *)v48 - v67) >= 0x20)
          {
            uint64_t v82 = (v73 >> 3) + 1;
            uint64_t v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
            v74 = &v50[v83 / 0xFFFFFFFFFFFFFFF8];
            v68 = (uint64_t *)((char *)v68 - v83);
            v84 = &v67[v63 - 16];
            v85 = v50 - 2;
            uint64_t v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v87 = *(_OWORD *)v85;
              *(v84 - 1) = *((_OWORD *)v85 - 1);
              _OWORD *v84 = v87;
              v84 -= 2;
              v85 -= 4;
              v86 -= 4;
            }
            while (v86);
            if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_115;
            }
          }
          else
          {
            v74 = v50;
          }
        }
        else
        {
          v74 = v50;
        }
        do
        {
          uint64_t v75 = *--v74;
          *--v68 = v75;
        }
        while (v74 != v48);
LABEL_115:
        v49 = (uint64_t *)&v67[8 * v66];
        if (v48) {
          operator delete(v48);
        }
        v48 = v68;
        v50 = v69;
        uint64_t v51 = v133;
      }
      uint64_t v47 = [v135 countByEnumeratingWithState:v146 objects:v155 count:16];
      if (!v47)
      {
        v141 = v50;
        v142 = v49;
        v140 = v48;
        break;
      }
    }
  }

  BYTE7(v155[1]) = 4;
  strcpy((char *)v155, "Size");
  v88 = sub_1923A12A0(v132, (uint64_t *)v155);
  [v88 unsignedIntegerValue];

  if (SBYTE7(v155[1]) < 0) {
    operator delete(*(void **)&v155[0]);
  }
  char v138 = 8;
  strcpy((char *)__p, "DataType");
  sub_1923A12A0(v132, (uint64_t *)__p);
  id v89 = (id)objc_claimAutoreleasedReturnValue();
  BYTE7(v155[1]) = 17;
  strcpy((char *)v155, "ComponentDataType");
  sub_1923A12A0(v89, (uint64_t *)v155);
  id v90 = objc_claimAutoreleasedReturnValue();
  v91 = (const char *)[v90 UTF8String];
  size_t v92 = strlen(v91);
  if (v92 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v93 = v92;
  if (v92 >= 0x17)
  {
    uint64_t v95 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v92 | 7) != 0x17) {
      uint64_t v95 = v92 | 7;
    }
    uint64_t v96 = v95 + 1;
    p_dst = operator new(v95 + 1);
    size_t v150 = v93;
    int64_t v151 = v96 | 0x8000000000000000;
    std::string __dst = p_dst;
  }
  else
  {
    HIBYTE(v151) = v92;
    p_dst = &__dst;
    if (!v92) {
      goto LABEL_150;
    }
  }
  memmove(p_dst, v91, v93);
LABEL_150:
  *((unsigned char *)p_dst + v93) = 0;

  if (SBYTE7(v155[1]) < 0) {
    operator delete(*(void **)&v155[0]);
  }
  std::string::size_type v97 = HIBYTE(v151);
  v98 = &__dst;
  if (v151 < 0)
  {
    v98 = __dst;
    std::string::size_type v97 = v150;
  }
  v154.__r_.__value_.__r.__words[0] = (std::string::size_type)v98;
  v154.__r_.__value_.__l.__size_ = v97;
  switch(v97)
  {
    case 4uLL:
      if (*(_DWORD *)v98 != 947154505) {
        goto LABEL_233;
      }
      unsigned int v99 = 1;
      goto LABEL_191;
    case 5uLL:
      if (*(_DWORD *)v98 == 829713993 && *((unsigned char *)v98 + 4) == 54)
      {
        unsigned int v99 = 1;
        unint64_t v113 = 16;
      }
      else if (*(_DWORD *)v98 == 863268425 && *((unsigned char *)v98 + 4) == 50)
      {
        unsigned int v99 = 1;
LABEL_196:
        unint64_t v113 = 32;
      }
      else
      {
        int v110 = *(_DWORD *)v98;
        int v111 = *((unsigned __int8 *)v98 + 4);
        if (v110 != 1953384789 || v111 != 56) {
          goto LABEL_233;
        }
        unsigned int v99 = 0;
LABEL_191:
        unint64_t v113 = 8;
      }
LABEL_197:
      BYTE7(v155[1]) = 10;
      strcpy((char *)v155, "Interleave");
      v114 = sub_1923A12A0(v89, (uint64_t *)v155);
      unint64_t v115 = [v114 unsignedIntegerValue];

      if (SBYTE7(v155[1]) < 0)
      {
        operator delete(*(void **)&v155[0]);
        if (v113 != 32) {
          goto LABEL_199;
        }
      }
      else if (v113 != 32)
      {
LABEL_199:
        if (v113 != 16)
        {
          unint64_t v116 = v115 - 1;
          if (v115 - 1 < 8 && ((0x8Bu >> v116) & 1) != 0)
          {
            v117 = &unk_192DB8CB8;
            goto LABEL_210;
          }
LABEL_221:
          std::to_string(&v153, v113);
          v119 = std::string::insert(&v153, 0, "Invalid component pack: size ");
          long long v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
          v154.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v120;
          v119->__r_.__value_.__l.__size_ = 0;
          v119->__r_.__value_.__r.__words[2] = 0;
          v119->__r_.__value_.__r.__words[0] = 0;
          v121 = std::string::append(&v154, ", interleave: ");
          long long v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
          *(void *)&v146[16] = *((void *)&v121->__r_.__value_.__l + 2);
          *(_OWORD *)v146 = v122;
          v121->__r_.__value_.__l.__size_ = 0;
          v121->__r_.__value_.__r.__words[2] = 0;
          v121->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v152, v115);
          if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v123 = &v152;
          }
          else {
            v123 = (std::string *)v152.__r_.__value_.__r.__words[0];
          }
          if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v152.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v152.__r_.__value_.__l.__size_;
          }
          v125 = std::string::append((std::string *)v146, (const std::string::value_type *)v123, size);
          long long v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
          *(void *)&v155[1] = *((void *)&v125->__r_.__value_.__l + 2);
          v155[0] = v126;
          v125->__r_.__value_.__l.__size_ = 0;
          v125->__r_.__value_.__r.__words[2] = 0;
          v125->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v152.__r_.__value_.__l.__data_);
            if ((v146[23] & 0x80000000) == 0) {
              goto LABEL_229;
            }
          }
          else if ((v146[23] & 0x80000000) == 0)
          {
LABEL_229:
            if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_230;
            }
            goto LABEL_238;
          }
          operator delete(*(void **)v146);
          if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_230:
            operator delete(v154.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v153.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_240:
              exception = __cxa_allocate_exception(0x18uLL);
              std::string::basic_string[abi:ne180100]<0>(v146, "ParseComponentPack");
              E5RT::Status::Status(&v154, 1, v155);
              E5RT::E5RTError::E5RTError(exception, v146, &v154);
            }
LABEL_239:
            operator delete(v153.__r_.__value_.__l.__data_);
            goto LABEL_240;
          }
LABEL_238:
          if ((SHIBYTE(v153.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_240;
          }
          goto LABEL_239;
        }
        unint64_t v116 = v115 - 1;
        if (v115 - 1 >= 8 || ((0x8Bu >> v116) & 1) == 0) {
          goto LABEL_221;
        }
        v117 = &unk_192DB8CD8;
LABEL_210:
        if (E5RT::TensorDataType::ValidateDataTypeSpec(v99, v117[v116])) {
          E5RT::TensorDataType::TensorDataType(&v139);
        }
        v118 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v155, "ParseTensorDataType");
        std::string::basic_string[abi:ne180100]<0>(v146, "Invalid component data type/pack");
        E5RT::Status::Status(&v154, 2, v146);
        E5RT::E5RTError::E5RTError(v118, v155, &v154);
      }
      unint64_t v116 = v115 - 1;
      if (v115 - 1 >= 8 || ((0x8Bu >> v116) & 1) == 0) {
        goto LABEL_221;
      }
      v117 = &unk_192DB8CF8;
      goto LABEL_210;
    case 6uLL:
      if (*(_DWORD *)v98 == 1953384789 && *((_WORD *)v98 + 2) == 13873)
      {
        unsigned int v99 = 0;
        unint64_t v113 = 16;
        goto LABEL_197;
      }
      int v101 = *(_DWORD *)v98;
      int v102 = *((unsigned __int16 *)v98 + 2);
      if (v101 != 1953384789 || v102 != 12851) {
        goto LABEL_233;
      }
      unsigned int v99 = 0;
      goto LABEL_196;
    case 7uLL:
      if (*(_DWORD *)v98 == 1634692166 && *(_DWORD *)((char *)v98 + 3) == 909210721)
      {
        unsigned int v99 = 4;
        unint64_t v113 = 16;
        goto LABEL_197;
      }
      int v105 = *(_DWORD *)v98;
      int v106 = *(_DWORD *)((char *)v98 + 3);
      if (v105 != 1634692166 || v106 != 842232929)
      {
LABEL_233:
        std::string::basic_string<std::string_view,0>(v146, (uint64_t)&v154);
        v127 = std::string::insert((std::string *)v146, 0, "Invalid component data type: ");
        long long v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
        *(void *)&v155[1] = *((void *)&v127->__r_.__value_.__l + 2);
        v155[0] = v128;
        v127->__r_.__value_.__l.__size_ = 0;
        v127->__r_.__value_.__r.__words[2] = 0;
        v127->__r_.__value_.__r.__words[0] = 0;
        if ((v146[23] & 0x80000000) != 0) {
          operator delete(*(void **)v146);
        }
        v129 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v146, "ParseComponentDataType");
        E5RT::Status::Status(&v153, 1, v155);
        E5RT::E5RTError::E5RTError(v129, v146, &v153);
      }
      unsigned int v99 = 4;
      goto LABEL_196;
    default:
      goto LABEL_233;
  }
}

void sub_1923A0F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  E5RT::Status::~Status((E5RT::Status *)&a58);
  if (a33 < 0)
  {
    operator delete(__p);
    if ((v63 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v63)
  {
LABEL_6:
    if (*(char *)(v66 - 217) < 0) {
      operator delete(*(void **)(v66 - 240));
    }
    if (a45 < 0) {
      operator delete(a40);
    }

    if (a19 < 0) {
      operator delete(a14);
    }
    if (a22) {
      operator delete(a22);
    }

    if (a25) {
      operator delete(a25);
    }

    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v65);
  goto LABEL_6;
}

id sub_1923A12A0(void *a1, uint64_t *a2)
{
  id v3 = a1;
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = (uint64_t *)*a2;
  }
  size_t v5 = [NSString stringWithUTF8String:v4];
  uint64_t v6 = [v3 valueForKey:v5];

  if (!v6)
  {
    std::operator+<char>();
    id v8 = std::string::append(&v12, " in dictionary");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v8->__r_.__value_.__r.__words[2];
    long long v13 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v12, "GetExpectedValueFromDictionary");
    E5RT::Status::Status(&v11, 1, &v13);
    E5RT::E5RTError::E5RTError(exception, &v12, &v11);
  }

  return v6;
}

void sub_1923A13E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  E5RT::Status::~Status((E5RT::Status *)&a9);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v23 & 1) == 0)
    {
LABEL_6:
      if (a21 < 0)
      {
        operator delete(a16);

        _Unwind_Resume(a1);
      }

      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v22);
  goto LABEL_6;
}

void E5RT::GetSurfaceDescriptor(E5RT *this, NSDictionary *a2)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = this;
  char v54 = 6;
  strcpy((char *)__p, "Format");
  sub_1923A12A0(v2, (uint64_t *)__p);
  id v3 = objc_claimAutoreleasedReturnValue();
  uint64_t v4 = (const char *)[v3 UTF8String];
  size_t v5 = strlen(v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v10 = v5 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t v7 = operator new(v10 + 1);
    *(void *)&__s1[8] = v6;
    *(void *)&__s1[16] = v11 | 0x8000000000000000;
    *(void *)__s1 = v7;
  }
  else
  {
    __s1[23] = v5;
    uint64_t v7 = __s1;
    if (!v5)
    {
      __s1[0] = 0;
      size_t v8 = __s1[23];
      if ((__s1[23] & 0x80000000) == 0) {
        goto LABEL_5;
      }
      goto LABEL_14;
    }
  }
  memmove(v7, v4, v6);
  v7[v6] = 0;
  size_t v8 = __s1[23];
  if ((__s1[23] & 0x80000000) == 0)
  {
LABEL_5:
    uint64_t v9 = 0;
    while (strlen(E5RT_FB::EnumNamesSurfaceFormat(void)::names[v9]) != v8
         || memcmp(__s1, E5RT_FB::EnumNamesSurfaceFormat(void)::names[v9], v8))
    {
      if (++v9 == 34) {
        goto LABEL_74;
      }
    }
    goto LABEL_19;
  }
LABEL_14:
  size_t v12 = *(void *)&__s1[8];
  if (*(void *)&__s1[8] == -1) {
    goto LABEL_74;
  }
  uint64_t v9 = 0;
  long long v13 = *(const void **)__s1;
  while (strlen(E5RT_FB::EnumNamesSurfaceFormat(void)::names[v9]) != v12
       || memcmp(v13, E5RT_FB::EnumNamesSurfaceFormat(void)::names[v9], v12))
  {
    if (++v9 == 34) {
      goto LABEL_74;
    }
  }
LABEL_19:
  std::string::size_type v14 = &E5RT_FB::EnumNamesSurfaceFormat(void)::names[v9];
  if (v14 != (char **)&unk_1E5745A80)
  {
    if ((v8 & 0x80) != 0) {
      operator delete(*(void **)__s1);
    }

    if (v54 < 0) {
      operator delete(__p[0]);
    }
    __s1[23] = 5;
    strcpy(__s1, "Width");
    long long v15 = sub_1923A12A0(v2, (uint64_t *)__s1);
    uint64_t v16 = [v15 unsignedIntegerValue];

    if ((__s1[23] & 0x80000000) != 0) {
      operator delete(*(void **)__s1);
    }
    __s1[23] = 6;
    strcpy(__s1, "Height");
    uint64_t v17 = sub_1923A12A0(v2, (uint64_t *)__s1);
    uint64_t v18 = [v17 unsignedIntegerValue];

    if ((__s1[23] & 0x80000000) != 0) {
      operator delete(*(void **)__s1);
    }
    __s1[23] = 18;
    strcpy(__s1, "BytesPerRowStrides");
    uint64_t v19 = sub_1923A12A0(v2, (uint64_t *)__s1);
    if ((__s1[23] & 0x80000000) != 0) {
      operator delete(*(void **)__s1);
    }
    v49 = v14;
    id v20 = v19;
    unint64_t v56 = 0;
    unint64_t v57 = 0;
    uint64_t v55 = 0;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    obuint64_t j = v20;
    uint64_t v21 = [obj countByEnumeratingWithState:&v59 objects:__s1 count:16];
    if (v21)
    {
      uint64_t v46 = v18;
      uint64_t v47 = v16;
      v48 = v2;
      unint64_t v22 = 0;
      int v23 = 0;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      unint64_t v26 = 0;
      uint64_t v52 = *(void *)v60;
      while (1)
      {
        uint64_t v27 = 0;
        uint64_t v50 = v21;
        do
        {
          while (1)
          {
            if (*(void *)v60 != v52) {
              objc_enumerationMutation(obj);
            }
            uint64_t v28 = [*(id *)(*((void *)&v59 + 1) + 8 * v27) unsignedIntegerValue];
            uint64_t v29 = v28;
            if ((unint64_t)v23 >= v26) {
              break;
            }
            *v23++ = v28;
            if (++v27 == v21) {
              goto LABEL_65;
            }
          }
          uint64_t v30 = v23 - v25;
          unint64_t v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 61)
          {
            uint64_t v55 = v24;
            unint64_t v56 = v23;
            unint64_t v57 = v22;
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v26 - (void)v25) >> 2 > v31) {
            unint64_t v31 = (uint64_t)(v26 - (void)v25) >> 2;
          }
          if (v26 - (unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v32 = v31;
          }
          if (v32)
          {
            if (v32 >> 61)
            {
              uint64_t v55 = v24;
              unint64_t v56 = v23;
              unint64_t v57 = v22;
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v33 = operator new(8 * v32);
            uint64_t v24 = (uint64_t *)&v33[8 * v30];
            *uint64_t v24 = v29;
            uint64_t v34 = (uint64_t)(v24 + 1);
            if (v23 == v25) {
              goto LABEL_51;
            }
          }
          else
          {
            uint64_t v33 = 0;
            uint64_t v24 = (uint64_t *)(8 * v30);
            *(void *)(8 * v30) = v29;
            uint64_t v34 = 8 * v30 + 8;
            if (v23 == v25) {
              goto LABEL_51;
            }
          }
          unint64_t v35 = (char *)(v23 - 1) - (char *)v25;
          if (v35 >= 0x168)
          {
            if (&v33[(char *)v23 - (char *)v25 - 8 - (v35 & 0xFFFFFFFFFFFFFFF8)] > &v33[(char *)v23 - (char *)v25 - 8])
            {
              int v36 = v23;
            }
            else if ((uint64_t *)((char *)v23 - (v35 & 0xFFFFFFFFFFFFFFF8) - 8) > v23 - 1)
            {
              int v36 = v23;
            }
            else if ((unint64_t)((char *)v25 - v33) >= 0x20)
            {
              uint64_t v38 = (v35 >> 3) + 1;
              uint64_t v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
              int v36 = &v23[v39 / 0xFFFFFFFFFFFFFFF8];
              uint64_t v24 = (uint64_t *)((char *)v24 - v39);
              uint64_t v40 = &v33[8 * v30 - 16];
              uint64_t v41 = v23 - 2;
              uint64_t v42 = v38 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v43 = *(_OWORD *)v41;
                *(v40 - 1) = *((_OWORD *)v41 - 1);
                *uint64_t v40 = v43;
                v40 -= 2;
                v41 -= 4;
                v42 -= 4;
              }
              while (v42);
              if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_51;
              }
            }
            else
            {
              int v36 = v23;
            }
          }
          else
          {
            int v36 = v23;
          }
          do
          {
            uint64_t v37 = *--v36;
            *--uint64_t v24 = v37;
          }
          while (v36 != v25);
LABEL_51:
          unint64_t v22 = &v33[8 * v32];
          if (v25) {
            operator delete(v25);
          }
          uint64_t v25 = v24;
          unint64_t v26 = (unint64_t)v22;
          int v23 = (uint64_t *)v34;
          uint64_t v21 = v50;
          ++v27;
        }
        while (v27 != v50);
LABEL_65:
        uint64_t v21 = [obj countByEnumeratingWithState:&v59 objects:__s1 count:16];
        if (!v21)
        {
          uint64_t v55 = v24;
          unint64_t v56 = v23;
          unint64_t v57 = v22;
          uint64_t v16 = v47;
          uint64_t v2 = v48;
          uint64_t v18 = v46;
          break;
        }
      }
    }

    __s1[23] = 6;
    strcpy(__s1, "Slices");
    long long v44 = sub_1923A12A0(v2, (uint64_t *)__s1);
    [v44 unsignedIntegerValue];

    if ((__s1[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__s1);
      if (v55 != v56) {
LABEL_69:
      }
        E5RT::SurfaceDescriptor::CreateSurfaceDescriptor((unint64_t)((char *)v49 - (char *)E5RT_FB::EnumNamesSurfaceFormat(void)::names) >> 3, v16, v18, &v55);
    }
    else if (v55 != v56)
    {
      goto LABEL_69;
    }
    E5RT::SurfaceDescriptor::CreateSurfaceDescriptor((unint64_t)((char *)v49 - (char *)E5RT_FB::EnumNamesSurfaceFormat(void)::names) >> 3, v16, v18);
  }
LABEL_74:
  exception = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(&v59, "GetSurfaceFormatFromStr");
  std::operator+<char>();
  E5RT::Status::Status(v58, 2, &v55);
  E5RT::E5RTError::E5RTError(exception, &v59, v58);
}

void sub_1923A1B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void E5RT::OperandDescriptor::~OperandDescriptor(E5RT::OperandDescriptor *this)
{
}

uint64_t E5RT::OperandDescriptor::operator==(const void *a1, const void *a2)
{
  if (!a1) {
    return 0;
  }
  if (v4)
  {
    uint64_t v5 = (uint64_t)v4;
    if (v6)
    {
      return E5RT::operator==(v5, (uint64_t)v6);
    }
    return 0;
  }
  if (!v8) {
    return 0;
  }
  uint64_t v9 = (uint64_t)v8;
  if (!v10) {
    return 0;
  }

  return E5RT::SurfaceDescriptor::operator==(v9, (uint64_t)v10);
}

uint64_t E5RT::OperandDescriptor::operator!=(const void *a1, const void *a2)
{
  return E5RT::OperandDescriptor::operator==(a1, a2) ^ 1;
}

void *E5RT::SurfaceDescriptor::SurfaceDescriptor(E5RT::SurfaceDescriptor *this)
{
  uint64_t result = E5RT::OperandDescriptor::OperandDescriptor(this);
  void *result = &unk_1EE325A20;
  result[1] = 0;
  return result;
}

{
  void *result;

  uint64_t result = E5RT::OperandDescriptor::OperandDescriptor(this);
  void *result = &unk_1EE325A20;
  result[1] = 0;
  return result;
}

void *E5RT::SurfaceDescriptor::SurfaceDescriptor(void *a1, uint64_t *a2)
{
  uint64_t result = E5RT::OperandDescriptor::OperandDescriptor(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  void *result = &unk_1EE325A20;
  result[1] = v4;
  return result;
}

{
  void *result;
  uint64_t v4;

  uint64_t result = E5RT::OperandDescriptor::OperandDescriptor(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  void *result = &unk_1EE325A20;
  result[1] = v4;
  return result;
}

void E5RT::SurfaceDescriptor::~SurfaceDescriptor(E5RT::SurfaceDescriptor *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EE325A20;
  *((void *)this + 1) = 0;
  if (v2)
  {
    id v3 = *(void **)(v2 + 40);
    if (v3)
    {
      *(void *)(v2 + 48) = v3;
      operator delete(v3);
    }
    MEMORY[0x192FF16B0](v2, 0x1010C40037D6C11);
  }

  E5RT::OperandDescriptor::~OperandDescriptor(this);
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EE325A20;
  *((void *)this + 1) = 0;
  if (v2)
  {
    id v3 = *(void **)(v2 + 40);
    if (v3)
    {
      *(void *)(v2 + 48) = v3;
      operator delete(v3);
    }
    MEMORY[0x192FF16B0](v2, 0x1010C40037D6C11);
  }

  E5RT::OperandDescriptor::~OperandDescriptor(this);
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EE325A20;
  *((void *)this + 1) = 0;
  if (v2)
  {
    id v3 = *(void **)(v2 + 40);
    if (v3)
    {
      *(void *)(v2 + 48) = v3;
      operator delete(v3);
    }
    MEMORY[0x192FF16B0](v2, 0x1010C40037D6C11);
  }
  E5RT::OperandDescriptor::~OperandDescriptor(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t E5RT::SurfaceDescriptor::GetSurfaceSliceCount(E5RT::SurfaceDescriptor *this)
{
  return *(void *)(*((void *)this + 1) + 24);
}

uint64_t E5RT::SurfaceDescriptor::GetCustomRowStrides(E5RT::SurfaceDescriptor *this)
{
  uint64_t v1 = *((void *)this + 1);
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t result = v1 + 40;
  if (v3 == v4)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "GetCustomRowStrides");
    std::string::basic_string[abi:ne180100]<0>(v6, "SurfaceDescriptor was not created with any custom row strides");
    E5RT::Status::Status(v7, 2, v6);
    E5RT::E5RTError::E5RTError(exception, v8, v7);
  }
  return result;
}

void sub_1923A2218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

BOOL E5RT::SurfaceDescriptor::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  return *(void *)v2 == *(void *)v3
      && *(void *)(v2 + 8) == *(void *)(v3 + 8)
      && *(void *)(v2 + 16) == *(void *)(v3 + 16)
      && *(void *)(v2 + 24) == *(void *)(v3 + 24)
      && *(_DWORD *)(v2 + 32) == *(_DWORD *)(v3 + 32);
}

BOOL E5RT::SurfaceDescriptor::operator!=(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  return *(void *)v2 != *(void *)v3
      || *(void *)(v2 + 8) != *(void *)(v3 + 8)
      || *(void *)(v2 + 16) != *(void *)(v3 + 16)
      || *(void *)(v2 + 24) != *(void *)(v3 + 24)
      || *(_DWORD *)(v2 + 32) != *(_DWORD *)(v3 + 32);
}

uint64_t *std::unique_ptr<E5RT::SurfaceDescriptorImpl>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 40);
    if (v3)
    {
      *(void *)(v2 + 48) = v3;
      operator delete(v3);
    }
    MEMORY[0x192FF16B0](v2, 0x1010C40037D6C11);
  }
  return a1;
}

void E5RT::SurfaceDescriptor::CreateSurfaceDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2 && a3)
  {
    if (*a4 != a4[1]) {
      operator new();
    }
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "CreateSurfaceDescriptor");
    std::string::basic_string[abi:ne180100]<0>(v6, "Invalid custom per row stride. Expect an array of strides. Received empty array.");
    E5RT::Status::Status(v7, 1, v6);
    E5RT::E5RTError::E5RTError(exception, v8, v7);
  }
  uint64_t v4 = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v8, "CreateSurfaceDescriptor");
  std::string::basic_string[abi:ne180100]<0>(v6, "Invalid surface dimensions. Specified width or height must not be 0.");
  E5RT::Status::Status(v7, 1, v6);
  E5RT::E5RTError::E5RTError(v4, v8, v7);
}

{
  void *v4;
  void *exception;
  void v6[3];
  unsigned char v7[8];
  void v8[3];

  if (a2 && a3)
  {
    if (*a4 != a4[1]) {
      operator new();
    }
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "CreateSurfaceDescriptor");
    std::string::basic_string[abi:ne180100]<0>(v6, "Invalid custom per row stride. Expect an array of strides. Received empty array.");
    E5RT::Status::Status(v7, 1, v6);
    E5RT::E5RTError::E5RTError(exception, v8, v7);
  }
  uint64_t v4 = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v8, "CreateSurfaceDescriptor");
  std::string::basic_string[abi:ne180100]<0>(v6, "Invalid surface dimensions. Specified width or height must not be 0.");
  E5RT::Status::Status(v7, 1, v6);
  E5RT::E5RTError::E5RTError(v4, v8, v7);
}

void sub_1923A2578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::unique_ptr<E5RT::SurfaceDescriptorImpl>::~unique_ptr[abi:ne180100](&a9);
  MEMORY[0x192FF16B0](v14, 0xA1C40BD48D6D6);
  std::unique_ptr<E5RT::SurfaceDescriptorImpl>::~unique_ptr[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void sub_1923A25AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<E5RT::SurfaceDescriptorImpl>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1923A25C0(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x1010C40037D6C11);
  _Unwind_Resume(a1);
}

void sub_1923A25E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if (v23) {
      goto LABEL_8;
    }
  }
  else if (v23)
  {
LABEL_8:
    __cxa_free_exception(v22);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1923A280C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::unique_ptr<E5RT::SurfaceDescriptorImpl>::~unique_ptr[abi:ne180100](&a9);
  MEMORY[0x192FF16B0](v22, 0xA1C40BD48D6D6);
  std::unique_ptr<E5RT::SurfaceDescriptorImpl>::~unique_ptr[abi:ne180100]((uint64_t *)&a10);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1923A28D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v19);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

void sub_1923A2AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::unique_ptr<E5RT::SurfaceDescriptorImpl>::~unique_ptr[abi:ne180100](&a9);
  MEMORY[0x192FF16B0](v14, 0xA1C40BD48D6D6);
  std::unique_ptr<E5RT::SurfaceDescriptorImpl>::~unique_ptr[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void sub_1923A2B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<E5RT::SurfaceDescriptorImpl>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1923A2B28(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x1010C40037D6C11);
  _Unwind_Resume(a1);
}

void sub_1923A2B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if (v23) {
      goto LABEL_8;
    }
  }
  else if (v23)
  {
LABEL_8:
    __cxa_free_exception(v22);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

id E5Common::CreateMpsGraphCompilationDescriptor(uint64_t *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_new();
  if (*((char *)a1 + 23) >= 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = (uint64_t *)*a1;
  }
  size_t v6 = [NSString stringWithUTF8String:v5];
  [v4 setEntryFunctionName:v6];

  if (v3)
  {
    uint64_t v7 = [v3 objectForKeyedSubscript:E5Common::kMpsgGraphDynamicCallableStrKey[0]];

    if (v7)
    {
      size_t v8 = [v3 objectForKeyedSubscript:E5Common::kMpsgGraphDynamicCallableStrKey[0]];
      [v4 setCallables:v8];
    }
    uint64_t v9 = [v3 objectForKeyedSubscript:E5Common::kMpsgGraphDisableTypeInferenceStrKey[0]];
    if (v9)
    {
      uint64_t v10 = [v3 objectForKeyedSubscript:E5Common::kMpsgGraphDisableTypeInferenceStrKey[0]];
      int v11 = [v10 BOOLValue];

      if (v11) {
        [v4 disableTypeInference];
      }
    }
  }
  [v4 setOptimizationLevel:0];
  if (v3)
  {
    size_t v12 = [v3 objectForKeyedSubscript:E5Common::kMpsgGraphEnableGPUQuantOpsStrKey[0]];
    if (v12)
    {
      long long v13 = [v3 objectForKeyedSubscript:E5Common::kMpsgGraphEnableGPUQuantOpsStrKey[0]];
      int v14 = [v13 BOOLValue];

      if (v14) {
        [v4 enableGPUQuantOps];
      }
    }
    long long v15 = [v3 objectForKeyedSubscript:E5Common::kMpsgGraphMaximumNumberOfEncodingThreadsStrKey[0]];
    if (v15)
    {
      uint64_t v16 = [v3 objectForKeyedSubscript:E5Common::kMpsgGraphMaximumNumberOfEncodingThreadsStrKey[0]];
      unsigned int v17 = [v16 unsignedIntValue];

      if (v17 >= 2) {
        [v4 setEnableParallelEncode:1];
      }
    }
  }

  return v4;
}

void sub_1923A2DF0(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1923A2E48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1923A2E60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1923A2E78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1923A2E90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1923A2EA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id E5Common::CreateMPSGraphExecutableFromMIL(uint64_t a1, uint64_t *a2, void *a3)
{
  id v5 = a3;
  size_t v6 = objc_opt_new();
  [v6 setCompilerOptions:1439];
  if (v5)
  {
    uint64_t v7 = [v5 objectForKeyedSubscript:E5Common::kMpsgGraphEnableShaderProfilingStrKey[0]];

    if (v7) {
      objc_msgSend(v6, "setCompilerOptions:", objc_msgSend(v6, "compilerOptions") | 0x40);
    }
  }
  size_t v8 = E5Common::CreateMpsGraphCompilationDescriptor(a2, v5);
  [v6 setCompilationDescriptor:v8];

  uint64_t v9 = (void *)[objc_alloc(MEMORY[0x1E4F35A58]) initWithMILProgram:a1 executableDescriptor:v6];

  return v9;
}

void sub_1923A2F9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1923A2FB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1923A2FC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1923A2FD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t E5RT::SurfaceFormatToCVPB4cc(unsigned int a1)
{
  if (a1 >= 0x22)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "SurfaceFormatToCVPB4cc");
    std::string::basic_string[abi:ne180100]<0>(v3, "Invalid surface format");
    E5RT::Status::Status(v4, 1, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return *(unsigned int *)&aF024800largbab[4 * a1];
}

void sub_1923A30A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void sub_1923A3118()
{
}

void sub_1923A3190(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v1 + 24);
  if (v4) {
    sub_1923B1EF4(v4);
  }
  id v5 = *v2;
  void *v2 = 0;
  if (v5) {
    operator delete(v5);
  }
  MEMORY[0x192FF16B0](v1, 0x10A1C40B4CCAB04);
  _Unwind_Resume(a1);
}

void sub_1923A31D8()
{
  uint64_t v255 = MEMORY[0x1F4188790]();
  v996[1] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v522 = 0;
  DWORD2(v522) = 0;
  HIBYTE(v517) = 0;
  LOBYTE(v516[0]) = 0;
  HIBYTE(v519) = 11;
  strcpy((char *)&v518, "Unsupported");
  char v744 = 9;
  strcpy((char *)v743, "universal");
  uint64_t v0 = std::vector<std::string>::vector[abi:ne180100](v520, (uint64_t)v743, 1uLL);
  v745[0] = v522;
  v745[1] = *(_OWORD *)v516;
  uint64_t v1 = v517;
  v516[1] = 0;
  v516[0] = 0;
  uint64_t v517 = 0;
  long long v747 = v518;
  uint64_t v746 = v1;
  uint64_t v748 = v519;
  long long v518 = 0uLL;
  uint64_t v519 = 0;
  long long v749 = *(_OWORD *)v520;
  uint64_t v750 = v521;
  *uint64_t v0 = 0;
  v0[1] = 0;
  v0[2] = 0;
  *(void *)&long long v515 = 32786;
  DWORD2(v515) = 0;
  HIBYTE(v511) = 0;
  LOBYTE(v510) = 0;
  HIBYTE(v513) = 11;
  strcpy((char *)&v512, "Unsupported");
  char v742 = 5;
  strcpy((char *)v741, "intel");
  uint64_t v2 = std::vector<std::string>::vector[abi:ne180100](v514, (uint64_t)v741, 1uLL);
  long long v751 = v515;
  long long v752 = v510;
  uint64_t v753 = v511;
  long long v510 = 0uLL;
  uint64_t v511 = 0;
  long long v754 = v512;
  uint64_t v3 = v513;
  long long v512 = 0uLL;
  uint64_t v513 = 0;
  long long v756 = *(_OWORD *)v514;
  uint64_t v755 = v3;
  v757 = v514[2];
  void *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  *(void *)&long long v509 = 256;
  DWORD2(v509) = 0;
  HIBYTE(v504) = 0;
  LOBYTE(v503[0]) = 0;
  HIBYTE(v506) = 11;
  strcpy((char *)&v505, "Unsupported");
  char v740 = 3;
  LODWORD(v739) = 7629162;
  uint64_t v4 = std::vector<std::string>::vector[abi:ne180100](v507, (uint64_t)&v739, 1uLL);
  long long v758 = v509;
  long long v759 = *(_OWORD *)v503;
  uint64_t v5 = v504;
  v503[1] = 0;
  v503[0] = 0;
  uint64_t v504 = 0;
  long long v761 = v505;
  uint64_t v760 = v5;
  uint64_t v762 = v506;
  long long v505 = 0uLL;
  uint64_t v506 = 0;
  long long v763 = *(_OWORD *)v507;
  uint64_t v764 = v508;
  *uint64_t v4 = 0;
  v4[1] = 0;
  uint64_t v4[2] = 0;
  *(void *)&long long v502 = 32774;
  DWORD2(v502) = 0;
  HIBYTE(v498) = 2;
  strcpy((char *)&v497, "M9");
  HIBYTE(v500) = 11;
  strcpy((char *)&v499, "Unsupported");
  char v736 = 2;
  strcpy((char *)v735, "M9");
  std::to_string(&v496, 8006);
  size_t v6 = std::string::insert(&v496, 0, "t");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  std::string::size_type v738 = v6->__r_.__value_.__r.__words[2];
  long long v737 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  size_t v8 = std::vector<std::string>::vector[abi:ne180100](v501, (uint64_t)v735, 2uLL);
  long long v765 = v502;
  long long v766 = v497;
  uint64_t v767 = v498;
  long long v9 = v499;
  uint64_t v10 = v500;
  long long v499 = 0uLL;
  uint64_t v500 = 0;
  long long v497 = 0uLL;
  uint64_t v498 = 0;
  long long v768 = v9;
  long long v770 = *(_OWORD *)v501;
  uint64_t v769 = v10;
  v771 = v501[2];
  *size_t v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
  *(void *)&long long v495 = 33537;
  DWORD2(v495) = 0;
  HIBYTE(v491) = 3;
  LODWORD(v490) = 3158349;
  HIBYTE(v493) = 11;
  strcpy((char *)&v492, "Unsupported");
  char v732 = 3;
  LODWORD(v731) = 3158349;
  std::to_string(&v489, 8301);
  int v11 = std::string::insert(&v489, 0, "t");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  std::string::size_type v734 = v11->__r_.__value_.__r.__words[2];
  long long v733 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  long long v13 = std::vector<std::string>::vector[abi:ne180100](v494, (uint64_t)&v731, 2uLL);
  long long v775 = v492;
  uint64_t v774 = v491;
  uint64_t v776 = v493;
  long long v772 = v495;
  long long v773 = v490;
  long long v490 = 0uLL;
  uint64_t v491 = 0;
  long long v492 = 0uLL;
  uint64_t v493 = 0;
  long long v777 = *(_OWORD *)v494;
  v778 = v494[2];
  *long long v13 = 0;
  v13[1] = 0;
  v13[2] = 0;
  *(void *)&long long v488 = 28672;
  DWORD2(v488) = 0;
  HIBYTE(v484) = 2;
  strcpy((char *)&v483, "H7");
  HIBYTE(v486) = 11;
  strcpy((char *)&v485, "Unsupported");
  char v724 = 2;
  strcpy((char *)v723, "H7");
  std::to_string(&v482, 7000);
  int v14 = std::string::insert(&v482, 0, "t");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  std::string::size_type v726 = v14->__r_.__value_.__r.__words[2];
  long long v725 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  char v728 = 3;
  char v730 = 4;
  LODWORD(v727) = 5257032;
  strcpy((char *)v729, "fiji");
  uint64_t v16 = std::vector<std::string>::vector[abi:ne180100](v487, (uint64_t)v723, 4uLL);
  long long v779 = v488;
  long long v780 = v483;
  uint64_t v781 = v484;
  long long v17 = v485;
  uint64_t v18 = v486;
  long long v485 = 0uLL;
  uint64_t v486 = 0;
  long long v483 = 0uLL;
  uint64_t v484 = 0;
  long long v782 = v17;
  long long v784 = *(_OWORD *)v487;
  uint64_t v783 = v18;
  v785 = v487[2];
  *uint64_t v16 = 0;
  v16[1] = 0;
  v16[2] = 0;
  *(void *)&long long v481 = 32784;
  DWORD2(v481) = 0;
  HIBYTE(v477) = 2;
  strcpy((char *)&v476, "H9");
  HIBYTE(v479) = 11;
  strcpy((char *)&v478, "Unsupported");
  char v716 = 2;
  strcpy((char *)v715, "H9");
  std::to_string(&v475, 8010);
  uint64_t v19 = std::string::insert(&v475, 0, "t");
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  std::string::size_type v718 = v19->__r_.__value_.__r.__words[2];
  long long v717 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  char v720 = 3;
  char v722 = 6;
  LODWORD(v719) = 5257544;
  strcpy((char *)v721, "cayman");
  uint64_t v21 = std::vector<std::string>::vector[abi:ne180100](v480, (uint64_t)v715, 4uLL);
  uint64_t v788 = v477;
  long long v789 = v478;
  uint64_t v790 = v479;
  long long v786 = v481;
  long long v787 = v476;
  long long v476 = 0uLL;
  uint64_t v477 = 0;
  long long v478 = 0uLL;
  uint64_t v479 = 0;
  long long v791 = *(_OWORD *)v480;
  v792 = v480[2];
  *uint64_t v21 = 0;
  v21[1] = 0;
  v21[2] = 0;
  *(void *)&long long v474 = 32785;
  DWORD2(v474) = 0;
  HIBYTE(v470) = 2;
  strcpy((char *)&v469, "H9");
  HIBYTE(v472) = 11;
  strcpy((char *)&v471, "Unsupported");
  char v710 = 3;
  LODWORD(v709) = 4667720;
  std::to_string(&v468, 8011);
  uint64_t v22 = std::string::insert(&v468, 0, "t");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  std::string::size_type v712 = v22->__r_.__value_.__r.__words[2];
  long long v711 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  char v714 = 4;
  strcpy((char *)v713, "myst");
  uint64_t v24 = std::vector<std::string>::vector[abi:ne180100](v473, (uint64_t)&v709, 3uLL);
  long long v794 = v469;
  uint64_t v795 = v470;
  uint64_t v797 = v472;
  long long v793 = v474;
  long long v469 = 0uLL;
  uint64_t v470 = 0;
  long long v796 = v471;
  long long v471 = 0uLL;
  uint64_t v472 = 0;
  long long v798 = *(_OWORD *)v473;
  v799 = v473[2];
  *uint64_t v24 = 0;
  v24[1] = 0;
  v24[2] = 0;
  *(void *)&long long v467 = 32789;
  DWORD2(v467) = 0;
  HIBYTE(v463) = 3;
  LODWORD(v462) = 3158344;
  HIBYTE(v465) = 4;
  strcpy((char *)&v464, "H10P");
  char v702 = 3;
  LODWORD(v701) = 3158344;
  std::to_string(&v461, 8015);
  uint64_t v25 = std::string::insert(&v461, 0, "t");
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  std::string::size_type v704 = v25->__r_.__value_.__r.__words[2];
  long long v703 = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  char v706 = 4;
  char v708 = 4;
  strcpy((char *)v705, "skye");
  strcpy((char *)v707, "H10P");
  uint64_t v27 = std::vector<std::string>::vector[abi:ne180100](v466, (uint64_t)&v701, 4uLL);
  uint64_t v802 = v463;
  long long v803 = v464;
  uint64_t v804 = v465;
  long long v800 = v467;
  long long v801 = v462;
  long long v462 = 0uLL;
  uint64_t v463 = 0;
  long long v464 = 0uLL;
  uint64_t v465 = 0;
  long long v805 = *(_OWORD *)v466;
  v806 = v466[2];
  *uint64_t v27 = 0;
  v27[1] = 0;
  v27[2] = 0;
  *(void *)&long long v460 = 32800;
  DWORD2(v460) = 0;
  HIBYTE(v456) = 3;
  LODWORD(v455) = 3223880;
  HIBYTE(v458) = 4;
  strcpy((char *)&v457, "H11P");
  char v694 = 3;
  LODWORD(v693) = 3223880;
  std::to_string(&v454, 8020);
  uint64_t v28 = std::string::insert(&v454, 0, "t");
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  std::string::size_type v696 = v28->__r_.__value_.__r.__words[2];
  long long v695 = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  char v698 = 6;
  strcpy((char *)v697, "cyprus");
  char v700 = 4;
  strcpy((char *)v699, "H11P");
  uint64_t v30 = std::vector<std::string>::vector[abi:ne180100](v459, (uint64_t)&v693, 4uLL);
  long long v808 = v455;
  uint64_t v809 = v456;
  uint64_t v811 = v458;
  long long v807 = v460;
  long long v455 = 0uLL;
  uint64_t v456 = 0;
  long long v810 = v457;
  long long v457 = 0uLL;
  uint64_t v458 = 0;
  long long v812 = *(_OWORD *)v459;
  v813 = v459[2];
  void *v30 = 0;
  v30[1] = 0;
  v30[2] = 0;
  *(void *)&long long v453 = 32807;
  DWORD2(v453) = 0;
  HIBYTE(v449) = 3;
  LODWORD(v448) = 3223880;
  HIBYTE(v451) = 4;
  strcpy((char *)&v450, "H11G");
  char v688 = 4;
  strcpy((char *)v687, "H11G");
  std::to_string(&v447, 8027);
  unint64_t v31 = std::string::insert(&v447, 0, "t");
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  std::string::size_type v690 = v31->__r_.__value_.__r.__words[2];
  long long v689 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  char v692 = 5;
  strcpy((char *)v691, "aruba");
  uint64_t v33 = std::vector<std::string>::vector[abi:ne180100](v452, (uint64_t)v687, 3uLL);
  uint64_t v816 = v449;
  long long v817 = v450;
  uint64_t v818 = v451;
  long long v814 = v453;
  long long v815 = v448;
  long long v448 = 0uLL;
  uint64_t v449 = 0;
  long long v450 = 0uLL;
  uint64_t v451 = 0;
  long long v819 = *(_OWORD *)v452;
  v820 = v452[2];
  *uint64_t v33 = 0;
  v33[1] = 0;
  v33[2] = 0;
  *(void *)&long long v446 = 32816;
  DWORD2(v446) = 0;
  HIBYTE(v442) = 3;
  LODWORD(v441) = 3289416;
  HIBYTE(v444) = 4;
  strcpy((char *)&v443, "H12P");
  char v680 = 3;
  LODWORD(v679) = 3289416;
  std::to_string(&v440, 8030);
  uint64_t v34 = std::string::insert(&v440, 0, "t");
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  std::string::size_type v682 = v34->__r_.__value_.__r.__words[2];
  long long v681 = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  char v684 = 4;
  char v686 = 4;
  strcpy((char *)v683, "cebu");
  strcpy((char *)v685, "H12P");
  int v36 = std::vector<std::string>::vector[abi:ne180100](v445, (uint64_t)&v679, 4uLL);
  long long v822 = v441;
  uint64_t v823 = v442;
  uint64_t v825 = v444;
  long long v821 = v446;
  long long v441 = 0uLL;
  uint64_t v442 = 0;
  long long v824 = v443;
  long long v443 = 0uLL;
  uint64_t v444 = 0;
  long long v826 = *(_OWORD *)v445;
  v827 = v445[2];
  *int v36 = 0;
  v36[1] = 0;
  v36[2] = 0;
  *(void *)&long long v439 = 33025;
  DWORD2(v439) = 0;
  HIBYTE(v435) = 3;
  LODWORD(v434) = 3354952;
  HIBYTE(v437) = 4;
  strcpy((char *)&v436, "H13P");
  char v672 = 3;
  LODWORD(v671) = 3354952;
  std::to_string(&v433, 8101);
  uint64_t v37 = std::string::insert(&v433, 0, "t");
  long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  std::string::size_type v674 = v37->__r_.__value_.__r.__words[2];
  long long v673 = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  char v676 = 6;
  strcpy((char *)v675, "sicily");
  char v678 = 4;
  strcpy((char *)v677, "H13P");
  uint64_t v39 = std::vector<std::string>::vector[abi:ne180100](v438, (uint64_t)&v671, 4uLL);
  uint64_t v830 = v435;
  long long v831 = v436;
  uint64_t v832 = v437;
  long long v828 = v439;
  long long v829 = v434;
  long long v434 = 0uLL;
  uint64_t v435 = 0;
  long long v436 = 0uLL;
  uint64_t v437 = 0;
  long long v833 = *(_OWORD *)v438;
  v834 = v438[2];
  *uint64_t v39 = 0;
  v39[1] = 0;
  v39[2] = 0;
  *(void *)&long long v432 = 33027;
  DWORD2(v432) = 0;
  HIBYTE(v428) = 3;
  LODWORD(v427) = 3354952;
  HIBYTE(v430) = 4;
  strcpy((char *)&v429, "H13G");
  char v666 = 4;
  strcpy((char *)v665, "H13G");
  std::to_string(&v426, 8103);
  uint64_t v40 = std::string::insert(&v426, 0, "t");
  long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  std::string::size_type v668 = v40->__r_.__value_.__r.__words[2];
  long long v667 = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  char v670 = 5;
  strcpy((char *)v669, "tonga");
  uint64_t v42 = std::vector<std::string>::vector[abi:ne180100](v431, (uint64_t)v665, 3uLL);
  long long v836 = v427;
  uint64_t v837 = v428;
  uint64_t v839 = v430;
  long long v835 = v432;
  long long v427 = 0uLL;
  uint64_t v428 = 0;
  long long v838 = v429;
  long long v429 = 0uLL;
  uint64_t v430 = 0;
  long long v840 = *(_OWORD *)v431;
  v841 = v431[2];
  void *v42 = 0;
  v42[1] = 0;
  v42[2] = 0;
  *(void *)&long long v425 = 24576;
  DWORD2(v425) = 0;
  HIBYTE(v421) = 3;
  LODWORD(v420) = 3354952;
  HIBYTE(v423) = 4;
  strcpy((char *)&v422, "H13S");
  char v660 = 4;
  strcpy((char *)v659, "H13S");
  std::to_string(&v419, 6000);
  long long v43 = std::string::insert(&v419, 0, "t");
  long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  std::string::size_type v662 = v43->__r_.__value_.__r.__words[2];
  long long v661 = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  char v664 = 5;
  strcpy((char *)v663, "jades");
  uint64_t v45 = std::vector<std::string>::vector[abi:ne180100](v424, (uint64_t)v659, 3uLL);
  uint64_t v844 = v421;
  long long v845 = v422;
  uint64_t v846 = v423;
  long long v842 = v425;
  long long v843 = v420;
  long long v420 = 0uLL;
  uint64_t v421 = 0;
  long long v422 = 0uLL;
  uint64_t v423 = 0;
  long long v847 = *(_OWORD *)v424;
  v848 = v424[2];
  *uint64_t v45 = 0;
  v45[1] = 0;
  v45[2] = 0;
  *(void *)&long long v418 = 24577;
  DWORD2(v418) = 0;
  HIBYTE(v414) = 3;
  LODWORD(v413) = 3354952;
  HIBYTE(v416) = 4;
  strcpy((char *)&v415, "H13C");
  char v654 = 4;
  strcpy((char *)v653, "H13C");
  std::to_string(&v412, 6001);
  uint64_t v46 = std::string::insert(&v412, 0, "t");
  long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
  std::string::size_type v656 = v46->__r_.__value_.__r.__words[2];
  long long v655 = v47;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  char v658 = 5;
  strcpy((char *)v657, "jadec");
  v48 = std::vector<std::string>::vector[abi:ne180100](v417, (uint64_t)v653, 3uLL);
  long long v850 = v413;
  uint64_t v851 = v414;
  uint64_t v853 = v416;
  long long v849 = v418;
  long long v413 = 0uLL;
  uint64_t v414 = 0;
  long long v852 = v415;
  long long v415 = 0uLL;
  uint64_t v416 = 0;
  long long v854 = *(_OWORD *)v417;
  v855 = v417[2];
  void *v48 = 0;
  v48[1] = 0;
  v48[2] = 0;
  *(void *)&long long v411 = 24578;
  DWORD2(v411) = 0;
  HIBYTE(v407) = 3;
  LODWORD(v406) = 3354952;
  HIBYTE(v409) = 4;
  strcpy((char *)&v408, "H13D");
  char v648 = 4;
  strcpy((char *)v647, "H13D");
  std::to_string(&v405, 6002);
  v49 = std::string::insert(&v405, 0, "t");
  long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  std::string::size_type v650 = v49->__r_.__value_.__r.__words[2];
  long long v649 = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  char v652 = 5;
  strcpy((char *)v651, "jaded");
  uint64_t v51 = std::vector<std::string>::vector[abi:ne180100](v410, (uint64_t)v647, 3uLL);
  uint64_t v858 = v407;
  long long v859 = v408;
  uint64_t v860 = v409;
  long long v856 = v411;
  long long v857 = v406;
  long long v406 = 0uLL;
  uint64_t v407 = 0;
  long long v408 = 0uLL;
  uint64_t v409 = 0;
  long long v861 = *(_OWORD *)v410;
  v862 = v410[2];
  void *v51 = 0;
  v51[1] = 0;
  v51[2] = 0;
  *(void *)&long long v404 = 33040;
  DWORD2(v404) = 0;
  HIBYTE(v400) = 3;
  LODWORD(v399) = 3420488;
  HIBYTE(v402) = 4;
  strcpy((char *)&v401, "H14P");
  char v640 = 3;
  LODWORD(v639) = 3420488;
  std::to_string(&v398, 8110);
  uint64_t v52 = std::string::insert(&v398, 0, "t");
  long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  std::string::size_type v642 = v52->__r_.__value_.__r.__words[2];
  long long v641 = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  char v644 = 5;
  strcpy((char *)v643, "ellis");
  char v646 = 4;
  strcpy((char *)v645, "H14P");
  char v54 = std::vector<std::string>::vector[abi:ne180100](v403, (uint64_t)&v639, 4uLL);
  long long v864 = v399;
  uint64_t v865 = v400;
  uint64_t v867 = v402;
  long long v863 = v404;
  long long v399 = 0uLL;
  uint64_t v400 = 0;
  long long v866 = v401;
  long long v401 = 0uLL;
  uint64_t v402 = 0;
  long long v868 = *(_OWORD *)v403;
  v869 = v403[2];
  *char v54 = 0;
  v54[1] = 0;
  v54[2] = 0;
  *(void *)&long long v397 = 33042;
  DWORD2(v397) = 0;
  HIBYTE(v393) = 3;
  LODWORD(v392) = 3420488;
  HIBYTE(v395) = 4;
  strcpy((char *)&v394, "H14G");
  char v634 = 4;
  strcpy((char *)v633, "H14G");
  std::to_string(&v391, 8112);
  uint64_t v55 = std::string::insert(&v391, 0, "t");
  long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
  std::string::size_type v636 = v55->__r_.__value_.__r.__words[2];
  long long v635 = v56;
  v55->__r_.__value_.__l.__size_ = 0;
  v55->__r_.__value_.__r.__words[2] = 0;
  v55->__r_.__value_.__r.__words[0] = 0;
  char v638 = 6;
  strcpy((char *)v637, "staten");
  unint64_t v57 = std::vector<std::string>::vector[abi:ne180100](v396, (uint64_t)v633, 3uLL);
  uint64_t v872 = v393;
  long long v873 = v394;
  uint64_t v874 = v395;
  long long v870 = v397;
  long long v871 = v392;
  long long v392 = 0uLL;
  uint64_t v393 = 0;
  long long v394 = 0uLL;
  uint64_t v395 = 0;
  long long v875 = *(_OWORD *)v396;
  v876 = v396[2];
  *unint64_t v57 = 0;
  v57[1] = 0;
  v57[2] = 0;
  *(void *)&long long v390 = 24608;
  DWORD2(v390) = 0;
  HIBYTE(v386) = 3;
  LODWORD(v385) = 3420488;
  HIBYTE(v388) = 4;
  strcpy((char *)&v387, "H14S");
  char v628 = 4;
  strcpy((char *)v627, "H14S");
  std::to_string(&v384, 6020);
  std::string v58 = std::string::insert(&v384, 0, "t");
  long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
  std::string::size_type v630 = v58->__r_.__value_.__r.__words[2];
  long long v629 = v59;
  v58->__r_.__value_.__l.__size_ = 0;
  v58->__r_.__value_.__r.__words[2] = 0;
  v58->__r_.__value_.__r.__words[0] = 0;
  char v632 = 7;
  strcpy((char *)v631, "rhodess");
  long long v60 = std::vector<std::string>::vector[abi:ne180100](v389, (uint64_t)v627, 3uLL);
  long long v878 = v385;
  uint64_t v879 = v386;
  uint64_t v881 = v388;
  long long v877 = v390;
  long long v385 = 0uLL;
  uint64_t v386 = 0;
  long long v880 = v387;
  long long v387 = 0uLL;
  uint64_t v388 = 0;
  long long v882 = *(_OWORD *)v389;
  v883 = v389[2];
  void *v60 = 0;
  v60[1] = 0;
  v60[2] = 0;
  *(void *)&long long v383 = 24609;
  DWORD2(v383) = 0;
  HIBYTE(v379) = 3;
  LODWORD(v378) = 3420488;
  HIBYTE(v381) = 4;
  strcpy((char *)&v380, "H14C");
  char v622 = 4;
  strcpy((char *)v621, "H14C");
  std::to_string(&v377, 6021);
  long long v61 = std::string::insert(&v377, 0, "t");
  long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
  std::string::size_type v624 = v61->__r_.__value_.__r.__words[2];
  long long v623 = v62;
  v61->__r_.__value_.__l.__size_ = 0;
  v61->__r_.__value_.__r.__words[2] = 0;
  v61->__r_.__value_.__r.__words[0] = 0;
  char v626 = 7;
  strcpy((char *)v625, "rhodesc");
  int v63 = std::vector<std::string>::vector[abi:ne180100](v382, (uint64_t)v621, 3uLL);
  uint64_t v886 = v379;
  long long v887 = v380;
  uint64_t v888 = v381;
  long long v884 = v383;
  long long v885 = v378;
  long long v378 = 0uLL;
  uint64_t v379 = 0;
  long long v380 = 0uLL;
  uint64_t v381 = 0;
  long long v889 = *(_OWORD *)v382;
  v890 = v382[2];
  *int v63 = 0;
  v63[1] = 0;
  v63[2] = 0;
  *(void *)&long long v376 = 24610;
  DWORD2(v376) = 0;
  HIBYTE(v372) = 3;
  LODWORD(v371) = 3420488;
  HIBYTE(v374) = 4;
  strcpy((char *)&v373, "H14D");
  char v616 = 4;
  strcpy((char *)v615, "H14D");
  std::to_string(&v370, 6022);
  uint64_t v64 = std::string::insert(&v370, 0, "t");
  long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  std::string::size_type v618 = v64->__r_.__value_.__r.__words[2];
  long long v617 = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  char v620 = 7;
  strcpy((char *)v619, "rhodesd");
  uint64_t v66 = std::vector<std::string>::vector[abi:ne180100](v375, (uint64_t)v615, 3uLL);
  long long v892 = v371;
  uint64_t v893 = v372;
  uint64_t v895 = v374;
  long long v891 = v376;
  long long v371 = 0uLL;
  uint64_t v372 = 0;
  long long v894 = v373;
  long long v373 = 0uLL;
  uint64_t v374 = 0;
  long long v896 = *(_OWORD *)v375;
  v897 = v375[2];
  *uint64_t v66 = 0;
  v66[1] = 0;
  v66[2] = 0;
  *(void *)&long long v369 = 33042;
  DWORD2(v369) = 1311977521;
  HIBYTE(v365) = 3;
  LODWORD(v364) = 3420488;
  HIBYTE(v367) = 4;
  strcpy((char *)&v366, "H14G");
  *((unsigned char *)&v362.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v362, "H14G");
  v67 = std::string::append(&v362, ".");
  long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
  v363.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v363.__r_.__value_.__l.__data_ = v68;
  v67->__r_.__value_.__l.__size_ = 0;
  v67->__r_.__value_.__r.__words[2] = 0;
  v67->__r_.__value_.__r.__words[0] = 0;
  char v361 = 4;
  strcpy(__s, "N301");
  v69 = std::string::append(&v363, __s, 4uLL);
  long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
  std::string::size_type v612 = v69->__r_.__value_.__r.__words[2];
  *(_OWORD *)v611 = v70;
  v69->__r_.__value_.__l.__size_ = 0;
  v69->__r_.__value_.__r.__words[2] = 0;
  v69->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v357, 8112);
  v71 = std::string::insert(&v357, 0, "t");
  long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
  v358.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v358.__r_.__value_.__l.__data_ = v72;
  v71->__r_.__value_.__l.__size_ = 0;
  v71->__r_.__value_.__r.__words[2] = 0;
  v71->__r_.__value_.__r.__words[0] = 0;
  unint64_t v73 = std::string::append(&v358, ".");
  long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
  v359.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v359.__r_.__value_.__l.__data_ = v74;
  v73->__r_.__value_.__l.__size_ = 0;
  v73->__r_.__value_.__r.__words[2] = 0;
  v73->__r_.__value_.__r.__words[0] = 0;
  char v356 = 4;
  strcpy(v355, "N301");
  uint64_t v75 = std::string::append(&v359, v355, 4uLL);
  long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
  std::string::size_type v614 = v75->__r_.__value_.__r.__words[2];
  long long v613 = v76;
  v75->__r_.__value_.__l.__size_ = 0;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = 0;
  uint64_t v77 = std::vector<std::string>::vector[abi:ne180100](v368, (uint64_t)v611, 2uLL);
  uint64_t v900 = v365;
  long long v901 = v366;
  uint64_t v902 = v367;
  long long v898 = v369;
  long long v899 = v364;
  long long v364 = 0uLL;
  uint64_t v365 = 0;
  long long v366 = 0uLL;
  uint64_t v367 = 0;
  long long v903 = *(_OWORD *)v368;
  v904 = v368[2];
  *uint64_t v77 = 0;
  v77[1] = 0;
  v77[2] = 0;
  *(void *)&long long v354 = 33056;
  DWORD2(v354) = 0;
  HIBYTE(v350) = 3;
  LODWORD(v349) = 3486024;
  HIBYTE(v352) = 4;
  strcpy((char *)&v351, "H15P");
  char v604 = 3;
  LODWORD(v603) = 3486024;
  std::to_string(&v348, 8120);
  v78 = std::string::insert(&v348, 0, "t");
  long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
  std::string::size_type v606 = v78->__r_.__value_.__r.__words[2];
  long long v605 = v79;
  v78->__r_.__value_.__l.__size_ = 0;
  v78->__r_.__value_.__r.__words[2] = 0;
  v78->__r_.__value_.__r.__words[0] = 0;
  char v608 = 5;
  strcpy((char *)v607, "crete");
  char v610 = 4;
  strcpy((char *)v609, "H15P");
  uint64_t v80 = std::vector<std::string>::vector[abi:ne180100](v353, (uint64_t)&v603, 4uLL);
  long long v906 = v349;
  uint64_t v907 = v350;
  uint64_t v909 = v352;
  long long v905 = v354;
  long long v349 = 0uLL;
  uint64_t v350 = 0;
  long long v908 = v351;
  long long v351 = 0uLL;
  uint64_t v352 = 0;
  long long v910 = *(_OWORD *)v353;
  v911 = v353[2];
  *uint64_t v80 = 0;
  v80[1] = 0;
  v80[2] = 0;
  *(void *)&long long v347 = 24624;
  DWORD2(v347) = 0;
  HIBYTE(v343) = 3;
  LODWORD(v342) = 3486024;
  HIBYTE(v345) = 4;
  strcpy((char *)&v344, "H15S");
  char v598 = 4;
  strcpy((char *)v597, "H15S");
  std::to_string(&v341, 6030);
  long long v81 = std::string::insert(&v341, 0, "t");
  long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
  std::string::size_type v600 = v81->__r_.__value_.__r.__words[2];
  long long v599 = v82;
  v81->__r_.__value_.__l.__size_ = 0;
  v81->__r_.__value_.__r.__words[2] = 0;
  v81->__r_.__value_.__r.__words[0] = 0;
  char v602 = 5;
  strcpy((char *)v601, "lobos");
  uint64_t v83 = std::vector<std::string>::vector[abi:ne180100](v346, (uint64_t)v597, 3uLL);
  uint64_t v914 = v343;
  long long v915 = v344;
  uint64_t v916 = v345;
  long long v912 = v347;
  long long v913 = v342;
  long long v342 = 0uLL;
  uint64_t v343 = 0;
  long long v344 = 0uLL;
  uint64_t v345 = 0;
  long long v917 = *(_OWORD *)v346;
  v918 = v346[2];
  *uint64_t v83 = 0;
  v83[1] = 0;
  v83[2] = 0;
  *(void *)&long long v340 = 24625;
  DWORD2(v340) = 0;
  HIBYTE(v336) = 3;
  LODWORD(v335) = 3486024;
  HIBYTE(v338) = 4;
  strcpy((char *)&v337, "H15C");
  char v590 = 4;
  strcpy((char *)v589, "H15C");
  std::to_string(&v334, 6031);
  v84 = std::string::insert(&v334, 0, "t");
  long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
  std::string::size_type v592 = v84->__r_.__value_.__r.__words[2];
  long long v591 = v85;
  v84->__r_.__value_.__l.__size_ = 0;
  v84->__r_.__value_.__r.__words[2] = 0;
  v84->__r_.__value_.__r.__words[0] = 0;
  char v594 = 5;
  strcpy((char *)v593, "palma");
  char v596 = 6;
  strcpy((char *)v595, "palmac");
  uint64_t v86 = std::vector<std::string>::vector[abi:ne180100](v339, (uint64_t)v589, 4uLL);
  long long v920 = v335;
  uint64_t v921 = v336;
  uint64_t v923 = v338;
  long long v919 = v340;
  long long v335 = 0uLL;
  uint64_t v336 = 0;
  long long v922 = v337;
  long long v337 = 0uLL;
  uint64_t v338 = 0;
  long long v924 = *(_OWORD *)v339;
  v925 = v339[2];
  *uint64_t v86 = 0;
  v86[1] = 0;
  v86[2] = 0;
  *(void *)&long long v333 = 24626;
  DWORD2(v333) = 0;
  HIBYTE(v329) = 3;
  LODWORD(v328) = 3486024;
  HIBYTE(v331) = 4;
  strcpy((char *)&v330, "H15D");
  char v584 = 4;
  strcpy((char *)v583, "H15D");
  std::to_string(&v327, 6032);
  long long v87 = std::string::insert(&v327, 0, "t");
  long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
  std::string::size_type v586 = v87->__r_.__value_.__r.__words[2];
  long long v585 = v88;
  v87->__r_.__value_.__l.__size_ = 0;
  v87->__r_.__value_.__r.__words[2] = 0;
  v87->__r_.__value_.__r.__words[0] = 0;
  char v588 = 6;
  strcpy((char *)v587, "palmad");
  id v89 = std::vector<std::string>::vector[abi:ne180100](v332, (uint64_t)v583, 3uLL);
  uint64_t v928 = v329;
  long long v929 = v330;
  uint64_t v930 = v331;
  long long v926 = v333;
  long long v927 = v328;
  long long v328 = 0uLL;
  uint64_t v329 = 0;
  long long v330 = 0uLL;
  uint64_t v331 = 0;
  long long v931 = *(_OWORD *)v332;
  v932 = v332[2];
  *id v89 = 0;
  v89[1] = 0;
  v89[2] = 0;
  *(void *)&long long v326 = 24628;
  DWORD2(v326) = 0;
  HIBYTE(v322) = 3;
  LODWORD(v321) = 3486024;
  HIBYTE(v324) = 4;
  strcpy((char *)&v323, "H15M");
  char v578 = 4;
  strcpy((char *)v577, "H15M");
  std::to_string(&v320, 6034);
  id v90 = std::string::insert(&v320, 0, "t");
  long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
  std::string::size_type v580 = v90->__r_.__value_.__r.__words[2];
  long long v579 = v91;
  v90->__r_.__value_.__l.__size_ = 0;
  v90->__r_.__value_.__r.__words[2] = 0;
  v90->__r_.__value_.__r.__words[0] = 0;
  char v582 = 6;
  strcpy((char *)v581, "palmam");
  size_t v92 = std::vector<std::string>::vector[abi:ne180100](v325, (uint64_t)v577, 3uLL);
  long long v934 = v321;
  uint64_t v935 = v322;
  uint64_t v937 = v324;
  long long v933 = v326;
  long long v321 = 0uLL;
  uint64_t v322 = 0;
  long long v936 = v323;
  long long v323 = 0uLL;
  uint64_t v324 = 0;
  long long v938 = *(_OWORD *)v325;
  v939 = v325[2];
  *size_t v92 = 0;
  v92[1] = 0;
  v92[2] = 0;
  *(void *)&long long v319 = 24640;
  DWORD2(v319) = 0;
  HIBYTE(v315) = 3;
  LODWORD(v314) = 3551560;
  HIBYTE(v317) = 4;
  strcpy((char *)&v316, "H16S");
  char v572 = 4;
  strcpy((char *)v571, "H16S");
  std::to_string(&v313, 6040);
  size_t v93 = std::string::insert(&v313, 0, "t");
  long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
  std::string::size_type v574 = v93->__r_.__value_.__r.__words[2];
  long long v573 = v94;
  v93->__r_.__value_.__l.__size_ = 0;
  v93->__r_.__value_.__r.__words[2] = 0;
  v93->__r_.__value_.__r.__words[0] = 0;
  char v576 = 6;
  strcpy((char *)v575, "bravas");
  uint64_t v95 = std::vector<std::string>::vector[abi:ne180100](v318, (uint64_t)v571, 3uLL);
  uint64_t v942 = v315;
  long long v943 = v316;
  uint64_t v944 = v317;
  long long v940 = v319;
  long long v941 = v314;
  long long v314 = 0uLL;
  uint64_t v315 = 0;
  long long v316 = 0uLL;
  uint64_t v317 = 0;
  long long v945 = *(_OWORD *)v318;
  v946 = v318[2];
  *uint64_t v95 = 0;
  v95[1] = 0;
  v95[2] = 0;
  *(void *)&long long v312 = 24641;
  DWORD2(v312) = 0;
  HIBYTE(v308) = 3;
  LODWORD(v307) = 3551560;
  HIBYTE(v310) = 4;
  strcpy((char *)&v309, "H16C");
  char v564 = 4;
  strcpy((char *)v563, "H16C");
  std::to_string(&v306, 6041);
  uint64_t v96 = std::string::insert(&v306, 0, "t");
  long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
  std::string::size_type v566 = v96->__r_.__value_.__r.__words[2];
  long long v565 = v97;
  v96->__r_.__value_.__l.__size_ = 0;
  v96->__r_.__value_.__r.__words[2] = 0;
  v96->__r_.__value_.__r.__words[0] = 0;
  char v568 = 5;
  strcpy((char *)v567, "brava");
  char v570 = 6;
  strcpy((char *)v569, "bravac");
  v98 = std::vector<std::string>::vector[abi:ne180100](v311, (uint64_t)v563, 4uLL);
  long long v948 = v307;
  uint64_t v949 = v308;
  uint64_t v951 = v310;
  long long v947 = v312;
  long long v307 = 0uLL;
  uint64_t v308 = 0;
  long long v950 = v309;
  long long v309 = 0uLL;
  uint64_t v310 = 0;
  long long v952 = *(_OWORD *)v311;
  v953 = v311[2];
  void *v98 = 0;
  v98[1] = 0;
  v98[2] = 0;
  *(void *)&long long v305 = 33058;
  DWORD2(v305) = 0;
  HIBYTE(v301) = 3;
  LODWORD(v300) = 3486024;
  HIBYTE(v303) = 4;
  strcpy((char *)&v302, "H15G");
  char v558 = 4;
  strcpy((char *)v557, "H15G");
  std::to_string(&v299, 8122);
  unsigned int v99 = std::string::insert(&v299, 0, "t");
  long long v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
  std::string::size_type v560 = v99->__r_.__value_.__r.__words[2];
  long long v559 = v100;
  v99->__r_.__value_.__l.__size_ = 0;
  v99->__r_.__value_.__r.__words[2] = 0;
  v99->__r_.__value_.__r.__words[0] = 0;
  char v562 = 5;
  strcpy((char *)v561, "ibiza");
  int v101 = std::vector<std::string>::vector[abi:ne180100](v304, (uint64_t)v557, 3uLL);
  uint64_t v956 = v301;
  long long v957 = v302;
  uint64_t v958 = v303;
  long long v954 = v305;
  long long v955 = v300;
  long long v300 = 0uLL;
  uint64_t v301 = 0;
  long long v302 = 0uLL;
  uint64_t v303 = 0;
  long long v959 = *(_OWORD *)v304;
  v960 = v304[2];
  *int v101 = 0;
  v101[1] = 0;
  v101[2] = 0;
  *(void *)&long long v298 = 33072;
  DWORD2(v298) = 0;
  HIBYTE(v294) = 3;
  LODWORD(v293) = 3551560;
  HIBYTE(v296) = 4;
  strcpy((char *)&v295, "H16P");
  char v550 = 3;
  LODWORD(v549) = 3551560;
  std::to_string(&v292, 8130);
  int v102 = std::string::insert(&v292, 0, "t");
  long long v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
  std::string::size_type v552 = v102->__r_.__value_.__r.__words[2];
  long long v551 = v103;
  v102->__r_.__value_.__l.__size_ = 0;
  v102->__r_.__value_.__r.__words[2] = 0;
  v102->__r_.__value_.__r.__words[0] = 0;
  char v554 = 4;
  char v556 = 4;
  strcpy((char *)v553, "coll");
  strcpy((char *)v555, "H16P");
  v104 = std::vector<std::string>::vector[abi:ne180100](v297, (uint64_t)&v549, 4uLL);
  long long v962 = v293;
  uint64_t v963 = v294;
  uint64_t v965 = v296;
  long long v961 = v298;
  long long v293 = 0uLL;
  uint64_t v294 = 0;
  long long v964 = v295;
  long long v295 = 0uLL;
  uint64_t v296 = 0;
  long long v966 = *(_OWORD *)v297;
  v967 = v297[2];
  void *v104 = 0;
  v104[1] = 0;
  v104[2] = 0;
  *(void *)&long long v291 = 33074;
  DWORD2(v291) = 0;
  HIBYTE(v287) = 3;
  LODWORD(v286) = 3551560;
  HIBYTE(v289) = 4;
  strcpy((char *)&v288, "H16G");
  char v544 = 4;
  strcpy((char *)v543, "H16G");
  std::to_string(&v285, 8132);
  int v105 = std::string::insert(&v285, 0, "t");
  long long v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
  std::string::size_type v546 = v105->__r_.__value_.__r.__words[2];
  long long v545 = v106;
  v105->__r_.__value_.__l.__size_ = 0;
  v105->__r_.__value_.__r.__words[2] = 0;
  v105->__r_.__value_.__r.__words[0] = 0;
  char v548 = 5;
  strcpy((char *)v547, "donan");
  v107 = std::vector<std::string>::vector[abi:ne180100](v290, (uint64_t)v543, 3uLL);
  uint64_t v970 = v287;
  long long v971 = v288;
  uint64_t v972 = v289;
  long long v968 = v291;
  long long v969 = v286;
  long long v286 = 0uLL;
  uint64_t v287 = 0;
  long long v288 = 0uLL;
  uint64_t v289 = 0;
  long long v973 = *(_OWORD *)v290;
  v974 = v290[2];
  void *v107 = 0;
  v107[1] = 0;
  v107[2] = 0;
  *(void *)&long long v284 = 33074;
  DWORD2(v284) = 1163414356;
  HIBYTE(v280) = 3;
  LODWORD(v279) = 3551560;
  HIBYTE(v282) = 4;
  strcpy((char *)&v281, "H16G");
  *((unsigned char *)&v277.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v277, "H16G");
  v108 = std::string::append(&v277, ".");
  long long v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
  v278.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v278.__r_.__value_.__l.__data_ = v109;
  v108->__r_.__value_.__l.__size_ = 0;
  v108->__r_.__value_.__r.__words[2] = 0;
  v108->__r_.__value_.__r.__words[0] = 0;
  char v276 = 7;
  strcpy(v275, "Exclave");
  int v110 = std::string::append(&v278, v275, 7uLL);
  long long v111 = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
  std::string::size_type v538 = v110->__r_.__value_.__r.__words[2];
  *(_OWORD *)v537 = v111;
  v110->__r_.__value_.__l.__size_ = 0;
  v110->__r_.__value_.__r.__words[2] = 0;
  v110->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v272, 8132);
  v112 = std::string::insert(&v272, 0, "t");
  long long v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
  v273.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v273.__r_.__value_.__l.__data_ = v113;
  v112->__r_.__value_.__l.__size_ = 0;
  v112->__r_.__value_.__r.__words[2] = 0;
  v112->__r_.__value_.__r.__words[0] = 0;
  v114 = std::string::append(&v273, ".");
  long long v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
  v274.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v274.__r_.__value_.__l.__data_ = v115;
  v114->__r_.__value_.__l.__size_ = 0;
  v114->__r_.__value_.__r.__words[2] = 0;
  v114->__r_.__value_.__r.__words[0] = 0;
  char v271 = 7;
  strcpy(v270, "Exclave");
  unint64_t v116 = std::string::append(&v274, v270, 7uLL);
  long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
  std::string::size_type v540 = v116->__r_.__value_.__r.__words[2];
  long long v539 = v117;
  v116->__r_.__value_.__l.__size_ = 0;
  v116->__r_.__value_.__r.__words[2] = 0;
  v116->__r_.__value_.__r.__words[0] = 0;
  char v542 = 13;
  strcpy((char *)v541, "donan-exclave");
  v118 = std::vector<std::string>::vector[abi:ne180100](v283, (uint64_t)v537, 3uLL);
  long long v976 = v279;
  uint64_t v977 = v280;
  uint64_t v979 = v282;
  long long v975 = v284;
  long long v279 = 0uLL;
  uint64_t v280 = 0;
  long long v978 = v281;
  long long v281 = 0uLL;
  uint64_t v282 = 0;
  long long v980 = *(_OWORD *)v283;
  v981 = v283[2];
  void *v118 = 0;
  v118[1] = 0;
  v118[2] = 0;
  *(void *)&long long v269 = 33088;
  DWORD2(v269) = 0;
  HIBYTE(v265) = 3;
  LODWORD(v264) = 3617096;
  HIBYTE(v267) = 4;
  strcpy((char *)&v266, "H17P");
  char v530 = 3;
  LODWORD(v529) = 3617096;
  std::to_string(&v263, 8140);
  v119 = std::string::insert(&v263, 0, "t");
  long long v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
  std::string::size_type v532 = v119->__r_.__value_.__r.__words[2];
  long long v531 = v120;
  v119->__r_.__value_.__l.__size_ = 0;
  v119->__r_.__value_.__r.__words[2] = 0;
  v119->__r_.__value_.__r.__words[0] = 0;
  char v534 = 6;
  strcpy((char *)v533, "tahiti");
  char v536 = 4;
  strcpy((char *)v535, "H17P");
  v121 = std::vector<std::string>::vector[abi:ne180100](v268, (uint64_t)&v529, 4uLL);
  uint64_t v984 = v265;
  long long v985 = v266;
  uint64_t v986 = v267;
  long long v982 = v269;
  long long v983 = v264;
  long long v264 = 0uLL;
  uint64_t v265 = 0;
  long long v266 = 0uLL;
  uint64_t v267 = 0;
  long long v987 = *(_OWORD *)v268;
  v988 = v268[2];
  void *v121 = 0;
  v121[1] = 0;
  v121[2] = 0;
  *(void *)&long long v262 = 33552;
  DWORD2(v262) = 0;
  HIBYTE(v258) = 3;
  LODWORD(v257) = 3223885;
  HIBYTE(v260) = 11;
  strcpy((char *)&v259, "Unsupported");
  char v524 = 3;
  LODWORD(v523) = 3223885;
  std::to_string(&v256, 8310);
  long long v122 = std::string::insert(&v256, 0, "t");
  long long v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
  std::string::size_type v526 = v122->__r_.__value_.__r.__words[2];
  long long v525 = v123;
  v122->__r_.__value_.__l.__size_ = 0;
  v122->__r_.__value_.__r.__words[2] = 0;
  v122->__r_.__value_.__r.__words[0] = 0;
  char v528 = 6;
  strcpy((char *)v527, "caicos");
  v124 = std::vector<std::string>::vector[abi:ne180100](__p, (uint64_t)&v523, 3uLL);
  uint64_t v125 = 0;
  long long v989 = v262;
  long long v990 = v257;
  uint64_t v991 = v258;
  long long v257 = 0uLL;
  uint64_t v258 = 0;
  long long v992 = v259;
  uint64_t v993 = v260;
  long long v259 = 0uLL;
  uint64_t v260 = 0;
  long long v994 = *(_OWORD *)__p;
  v995 = __p[2];
  void *v124 = 0;
  v124[1] = 0;
  unint64_t v126 = v255;
  v124[2] = 0;
  *(_OWORD *)uint64_t v255 = 0u;
  v127 = (void *)(v255 + 24);
  *(_DWORD *)(v255 + 32) = 1065353216;
  *(_OWORD *)(v255 + 16) = 0u;
  v253 = (void *)(v255 + 16);
  do
  {
    while (1)
    {
      long long v128 = (char *)v745 + 88 * v125;
      unint64_t v129 = std::hash<E5Common::PlatformIdentifier>::operator()((uint64_t)v127, (uint64_t)v128);
      unint64_t v130 = v129;
      unint64_t v131 = *(void *)(v126 + 8);
      uint64_t v254 = v125;
      if (!v131) {
        break;
      }
      uint8x8_t v132 = (uint8x8_t)vcnt_s8((int8x8_t)v131);
      v132.i16[0] = vaddlv_u8(v132);
      if (v132.u32[0] > 1uLL)
      {
        unint64_t v126 = v129;
        if (v129 >= v131) {
          unint64_t v126 = v129 % v131;
        }
      }
      else
      {
        unint64_t v126 = (v131 - 1) & v129;
      }
      uint64_t v133 = *(void **)(*(void *)v255 + 8 * v126);
      if (!v133) {
        break;
      }
      id v134 = (void *)*v133;
      if (!*v133) {
        break;
      }
      if (v132.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v136 = v134[1];
          if (v136 == v130)
          {
            if (E5Common::PlatformIdentifier::operator==((uint64_t)(v134 + 2), (uint64_t)v745 + 88 * v125)) {
              goto LABEL_2;
            }
          }
          else if ((v136 & (v131 - 1)) != v126)
          {
            goto LABEL_24;
          }
          id v134 = (void *)*v134;
          if (!v134) {
            goto LABEL_24;
          }
        }
      }
      while (1)
      {
        unint64_t v135 = v134[1];
        if (v135 == v130) {
          break;
        }
        if (v135 >= v131) {
          v135 %= v131;
        }
        if (v135 != v126) {
          goto LABEL_24;
        }
LABEL_13:
        id v134 = (void *)*v134;
        if (!v134) {
          goto LABEL_24;
        }
      }
      if (!E5Common::PlatformIdentifier::operator==((uint64_t)(v134 + 2), (uint64_t)v745 + 88 * v125)) {
        goto LABEL_13;
      }
LABEL_2:
      unint64_t v126 = v255;
      ++v125;
      if (v254 == 35) {
        goto LABEL_103;
      }
    }
LABEL_24:
    v137 = (char *)operator new(0x68uLL);
    char v138 = v137;
    *(void *)v137 = 0;
    *((void *)v137 + 1) = v130;
    *((_OWORD *)v137 + 1) = *(_OWORD *)v128;
    uint64_t v139 = (const std::string::value_type **)&v745[1] + 11 * v125;
    if (v128[39] < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v137 + 32), *v139, *((void *)&v745[1] + 11 * v125 + 1));
    }
    else
    {
      *((_OWORD *)v137 + 2) = *(_OWORD *)v139;
      *((void *)v137 + 6) = *((void *)&v745[2] + 11 * v125);
    }
    v140 = (const std::string::value_type **)&v747 + 11 * v125;
    if (v128[63] < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v138 + 56), *v140, *((void *)&v747 + 11 * v125 + 1));
    }
    else
    {
      *(_OWORD *)(v138 + 56) = *(_OWORD *)v140;
      *((void *)v138 + 9) = *(&v748 + 11 * v125);
    }
    *((void *)v138 + 10) = 0;
    *((void *)v138 + 11) = 0;
    *((void *)v138 + 12) = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)v138 + 10, *((void *)&v749 + 11 * v125), *((void *)&v749 + 11 * v125 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v749 + 11 * v125 + 1) - *((void *)&v749 + 11 * v125)) >> 3));
    float v141 = (float)(unint64_t)(*(void *)(v255 + 24) + 1);
    float v142 = *(float *)(v255 + 32);
    if (!v131 || (float)(v142 * (float)v131) < v141)
    {
      BOOL v145 = (v131 & (v131 - 1)) == 0;
      if (v131 < 3) {
        BOOL v145 = 0;
      }
      unint64_t v146 = (2 * v131) | !v145;
      unint64_t v147 = vcvtps_u32_f32(v141 / v142);
      if (v146 <= v147) {
        size_t prime = v147;
      }
      else {
        size_t prime = v146;
      }
      if (prime == 1)
      {
        size_t prime = 2;
        uint64_t v149 = v255;
        unint64_t v150 = v130;
      }
      else
      {
        uint64_t v149 = v255;
        unint64_t v150 = v130;
        if ((prime & (prime - 1)) != 0) {
          size_t prime = std::__next_prime(prime);
        }
      }
      unint64_t v131 = *(void *)(v149 + 8);
      if (prime <= v131)
      {
        if (prime >= v131) {
          goto LABEL_80;
        }
        unint64_t v161 = vcvtps_u32_f32((float)*(unint64_t *)(v149 + 24) / *(float *)(v149 + 32));
        if (v131 < 3 || (uint8x8_t v162 = (uint8x8_t)vcnt_s8((int8x8_t)v131), v162.i16[0] = vaddlv_u8(v162), v162.u32[0] > 1uLL))
        {
          unint64_t v161 = std::__next_prime(v161);
        }
        else
        {
          uint64_t v163 = 1 << -(char)__clz(v161 - 1);
          if (v161 >= 2) {
            unint64_t v161 = v163;
          }
        }
        if (prime <= v161) {
          size_t prime = v161;
        }
        if (prime >= v131)
        {
          unint64_t v131 = *(void *)(v149 + 8);
          uint64_t v166 = v131 - 1;
          if ((v131 & (v131 - 1)) != 0) {
            goto LABEL_93;
          }
          goto LABEL_81;
        }
        if (!prime)
        {
          v165 = *(void **)v149;
          *(void *)uint64_t v149 = 0;
          if (v165) {
            operator delete(v165);
          }
          unint64_t v131 = 0;
          *(void *)(v149 + 8) = 0;
          uint64_t v166 = -1;
          goto LABEL_81;
        }
      }
      if (prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int64_t v151 = operator new(8 * prime);
      std::string v152 = *(void **)v149;
      *(void *)uint64_t v149 = v151;
      if (v152) {
        operator delete(v152);
      }
      uint64_t v153 = 0;
      *(void *)(v149 + 8) = prime;
      do
        *(void *)(*(void *)v149 + 8 * v153++) = 0;
      while (prime != v153);
      std::string v154 = (void *)*v253;
      if (!*v253)
      {
LABEL_92:
        unint64_t v131 = prime;
        uint64_t v166 = prime - 1;
        if ((prime & (prime - 1)) != 0)
        {
LABEL_93:
          if (v150 >= v131)
          {
            unint64_t v126 = v150 % v131;
            uint64_t v143 = *(void *)v255;
            v144 = *(void **)(*(void *)v255 + 8 * (v150 % v131));
            if (!v144) {
              goto LABEL_82;
            }
          }
          else
          {
            unint64_t v126 = v150;
            uint64_t v143 = *(void *)v255;
            v144 = *(void **)(*(void *)v255 + 8 * v150);
            if (!v144) {
              goto LABEL_82;
            }
          }
          goto LABEL_33;
        }
LABEL_81:
        unint64_t v126 = v166 & v150;
        uint64_t v143 = *(void *)v255;
        v144 = *(void **)(*(void *)v255 + 8 * (v166 & v150));
        if (!v144) {
          goto LABEL_82;
        }
LABEL_33:
        *(void *)char v138 = *v144;
        goto LABEL_101;
      }
      size_t v155 = v154[1];
      size_t v156 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        size_t v157 = v155 & v156;
        *(void *)(*(void *)v149 + 8 * v157) = v253;
        for (uint64_t i = (void *)*v154; *v154; uint64_t i = (void *)*v154)
        {
          size_t v159 = i[1] & v156;
          if (v159 == v157)
          {
            std::string v154 = i;
          }
          else if (*(void *)(*(void *)v149 + 8 * v159))
          {
            *std::string v154 = *i;
            uint64_t v160 = 8 * v159;
            void *i = **(void **)(*(void *)v149 + v160);
            **(void **)(*(void *)v149 + v160) = i;
          }
          else
          {
            *(void *)(*(void *)v149 + 8 * v159) = v154;
            std::string v154 = i;
            size_t v157 = v159;
          }
        }
        goto LABEL_92;
      }
      if (v155 < prime)
      {
        *(void *)(*(void *)v149 + 8 * v155) = v253;
        v164 = (void *)*v154;
        if (*v154) {
          goto LABEL_87;
        }
        goto LABEL_79;
      }
      v155 %= prime;
      *(void *)(*(void *)v149 + 8 * v155) = v253;
      v164 = (void *)*v154;
      if (!*v154)
      {
LABEL_79:
        unint64_t v131 = prime;
LABEL_80:
        uint64_t v166 = v131 - 1;
        if ((v131 & (v131 - 1)) != 0) {
          goto LABEL_93;
        }
        goto LABEL_81;
      }
      while (1)
      {
LABEL_87:
        size_t v170 = v164[1];
        if (v170 >= prime) {
          v170 %= prime;
        }
        if (v170 == v155) {
          goto LABEL_86;
        }
        if (*(void *)(*(void *)v149 + 8 * v170))
        {
          *std::string v154 = *v164;
          uint64_t v169 = 8 * v170;
          void *v164 = **(void **)(*(void *)v149 + v169);
          **(void **)(*(void *)v149 + v169) = v164;
          v164 = v154;
LABEL_86:
          std::string v154 = v164;
          v164 = (void *)*v164;
          if (!v164) {
            goto LABEL_92;
          }
        }
        else
        {
          *(void *)(*(void *)v149 + 8 * v170) = v154;
          std::string v154 = v164;
          v164 = (void *)*v164;
          size_t v155 = v170;
          if (!v164) {
            goto LABEL_92;
          }
        }
      }
    }
    uint64_t v143 = *(void *)v255;
    v144 = *(void **)(*(void *)v255 + 8 * v126);
    if (v144) {
      goto LABEL_33;
    }
LABEL_82:
    *(void *)char v138 = *v253;
    void *v253 = v138;
    *(void *)(v143 + 8 * v126) = v253;
    if (!*(void *)v138) {
      goto LABEL_102;
    }
    unint64_t v167 = *(void *)(*(void *)v138 + 8);
    if ((v131 & (v131 - 1)) != 0)
    {
      v168 = (void *)v255;
      if (v167 >= v131) {
        v167 %= v131;
      }
    }
    else
    {
      v167 &= v131 - 1;
      v168 = (void *)v255;
    }
    v144 = (void *)(*v168 + 8 * v167);
LABEL_101:
    void *v144 = v138;
LABEL_102:
    ++*v127;
    unint64_t v126 = v255;
    ++v125;
  }
  while (v254 != 35);
LABEL_103:
  v171 = (E5RT::AsyncEventImpl *)v996;
  do
  {
    while (1)
    {
      uint64_t v172 = *((void *)v171 - 3);
      if (v172)
      {
        uint64_t v173 = *((void *)v171 - 2);
        v174 = (void *)*((void *)v171 - 3);
        if (v173 != v172)
        {
          do
          {
            if (*(char *)(v173 - 1) < 0) {
              operator delete(*(void **)(v173 - 24));
            }
            v173 -= 24;
          }
          while (v173 != v172);
          v174 = (void *)*((void *)v171 - 3);
        }
        *((void *)v171 - 2) = v172;
        operator delete(v174);
      }
      if ((*((char *)v171 - 25) & 0x80000000) == 0) {
        break;
      }
      operator delete(*((void **)v171 - 6));
      if (*((char *)v171 - 49) < 0) {
        goto LABEL_116;
      }
LABEL_105:
      v171 = (E5RT::AsyncEventImpl *)((char *)v171 - 88);
      E5RT::AsyncEventImpl::~AsyncEventImpl(v171);
      if (v171 == (E5RT::AsyncEventImpl *)v745) {
        goto LABEL_117;
      }
    }
    if ((*((char *)v171 - 49) & 0x80000000) == 0) {
      goto LABEL_105;
    }
LABEL_116:
    operator delete(*((void **)v171 - 9));
    v171 = (E5RT::AsyncEventImpl *)((char *)v171 - 88);
    E5RT::AsyncEventImpl::~AsyncEventImpl(v171);
  }
  while (v171 != (E5RT::AsyncEventImpl *)v745);
LABEL_117:
  v175 = (void **)__p[0];
  if (__p[0])
  {
    v176 = (void **)__p[1];
    v177 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v176 - 1) < 0) {
          operator delete(*(v176 - 3));
        }
        v176 -= 3;
      }
      while (v176 != v175);
      v177 = __p[0];
    }
    __p[1] = v175;
    operator delete(v177);
  }
  if (SHIBYTE(v260) < 0)
  {
    operator delete((void *)v259);
    if (SHIBYTE(v258) < 0) {
      goto LABEL_498;
    }
LABEL_127:
    if ((v528 & 0x80000000) == 0) {
      goto LABEL_128;
    }
LABEL_499:
    operator delete(v527[0]);
    if (SHIBYTE(v526) < 0) {
      goto LABEL_500;
    }
LABEL_129:
    if ((v524 & 0x80000000) == 0) {
      goto LABEL_130;
    }
LABEL_501:
    operator delete(v523);
    if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_502;
    }
LABEL_131:
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v262);
    v178 = (void **)v268[0];
    if (v268[0]) {
      goto LABEL_132;
    }
LABEL_503:
    if ((SHIBYTE(v267) & 0x80000000) == 0) {
      goto LABEL_504;
    }
LABEL_134:
    operator delete((void *)v266);
    if ((SHIBYTE(v265) & 0x80000000) == 0) {
      goto LABEL_505;
    }
LABEL_135:
    operator delete((void *)v264);
    if ((v536 & 0x80000000) == 0) {
      goto LABEL_506;
    }
LABEL_136:
    operator delete(v535[0]);
    if ((v534 & 0x80000000) == 0) {
      goto LABEL_507;
    }
LABEL_137:
    operator delete(v533[0]);
    if ((SHIBYTE(v532) & 0x80000000) == 0) {
      goto LABEL_508;
    }
LABEL_138:
    operator delete((void *)v531);
    if ((v530 & 0x80000000) == 0) {
      goto LABEL_509;
    }
LABEL_139:
    operator delete(v529);
    if ((SHIBYTE(v263.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_510;
    }
LABEL_140:
    operator delete(v263.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v269);
    v180 = (void **)v283[0];
    if (v283[0]) {
      goto LABEL_511;
    }
LABEL_141:
    if (SHIBYTE(v282) < 0) {
      goto LABEL_513;
    }
    goto LABEL_142;
  }
  if ((SHIBYTE(v258) & 0x80000000) == 0) {
    goto LABEL_127;
  }
LABEL_498:
  operator delete((void *)v257);
  if (v528 < 0) {
    goto LABEL_499;
  }
LABEL_128:
  if ((SHIBYTE(v526) & 0x80000000) == 0) {
    goto LABEL_129;
  }
LABEL_500:
  operator delete((void *)v525);
  if (v524 < 0) {
    goto LABEL_501;
  }
LABEL_130:
  if ((SHIBYTE(v256.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_131;
  }
LABEL_502:
  operator delete(v256.__r_.__value_.__l.__data_);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v262);
  v178 = (void **)v268[0];
  if (!v268[0]) {
    goto LABEL_503;
  }
LABEL_132:
  v179 = (void **)v268[1];
  if (v268[1] != v178)
  {
    do
    {
      if (*((char *)v179 - 1) < 0) {
        operator delete(*(v179 - 3));
      }
      v179 -= 3;
    }
    while (v179 != v178);
    v268[1] = v178;
    operator delete(v268[0]);
    if ((SHIBYTE(v267) & 0x80000000) == 0) {
      goto LABEL_504;
    }
    goto LABEL_134;
  }
  v268[1] = v178;
  operator delete(v178);
  if (SHIBYTE(v267) < 0) {
    goto LABEL_134;
  }
LABEL_504:
  if (SHIBYTE(v265) < 0) {
    goto LABEL_135;
  }
LABEL_505:
  if (v536 < 0) {
    goto LABEL_136;
  }
LABEL_506:
  if (v534 < 0) {
    goto LABEL_137;
  }
LABEL_507:
  if (SHIBYTE(v532) < 0) {
    goto LABEL_138;
  }
LABEL_508:
  if (v530 < 0) {
    goto LABEL_139;
  }
LABEL_509:
  if (SHIBYTE(v263.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_140;
  }
LABEL_510:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v269);
  v180 = (void **)v283[0];
  if (!v283[0]) {
    goto LABEL_141;
  }
LABEL_511:
  v234 = (void **)v283[1];
  if (v283[1] != v180)
  {
    do
    {
      if (*((char *)v234 - 1) < 0) {
        operator delete(*(v234 - 3));
      }
      v234 -= 3;
    }
    while (v234 != v180);
    v283[1] = v180;
    operator delete(v283[0]);
    if ((SHIBYTE(v282) & 0x80000000) == 0) {
      goto LABEL_142;
    }
LABEL_513:
    operator delete((void *)v281);
    if ((SHIBYTE(v280) & 0x80000000) == 0) {
      goto LABEL_143;
    }
LABEL_514:
    operator delete((void *)v279);
    if (v542 < 0) {
      goto LABEL_515;
    }
LABEL_144:
    if ((SHIBYTE(v540) & 0x80000000) == 0) {
      goto LABEL_145;
    }
LABEL_516:
    operator delete((void *)v539);
    if (SHIBYTE(v538) < 0) {
      goto LABEL_517;
    }
LABEL_146:
    if ((v271 & 0x80000000) == 0) {
      goto LABEL_147;
    }
LABEL_518:
    operator delete(*(void **)v270);
    if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_519;
    }
LABEL_148:
    if ((SHIBYTE(v273.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_149;
    }
LABEL_520:
    operator delete(v273.__r_.__value_.__l.__data_);
    if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_521;
    }
LABEL_150:
    if ((v276 & 0x80000000) == 0) {
      goto LABEL_151;
    }
LABEL_522:
    operator delete(*(void **)v275);
    if (SHIBYTE(v278.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_523;
    }
LABEL_152:
    if ((SHIBYTE(v277.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_153;
    }
LABEL_524:
    operator delete(v277.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v284);
    v181 = (void **)v290[0];
    if (!v290[0]) {
      goto LABEL_525;
    }
LABEL_154:
    v182 = (void **)v290[1];
    if (v290[1] == v181)
    {
      v290[1] = v181;
      operator delete(v181);
      if ((SHIBYTE(v289) & 0x80000000) == 0) {
        goto LABEL_526;
      }
    }
    else
    {
      do
      {
        if (*((char *)v182 - 1) < 0) {
          operator delete(*(v182 - 3));
        }
        v182 -= 3;
      }
      while (v182 != v181);
      v290[1] = v181;
      operator delete(v290[0]);
      if ((SHIBYTE(v289) & 0x80000000) == 0) {
        goto LABEL_526;
      }
    }
LABEL_156:
    operator delete((void *)v288);
    if ((SHIBYTE(v287) & 0x80000000) == 0) {
      goto LABEL_527;
    }
LABEL_157:
    operator delete((void *)v286);
    if ((v548 & 0x80000000) == 0) {
      goto LABEL_528;
    }
LABEL_158:
    operator delete(v547[0]);
    if ((SHIBYTE(v546) & 0x80000000) == 0) {
      goto LABEL_529;
    }
LABEL_159:
    operator delete((void *)v545);
    if ((v544 & 0x80000000) == 0) {
      goto LABEL_530;
    }
LABEL_160:
    operator delete(v543[0]);
    if ((SHIBYTE(v285.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_531;
    }
LABEL_161:
    operator delete(v285.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v291);
    v183 = (void **)v297[0];
    if (v297[0]) {
      goto LABEL_532;
    }
LABEL_162:
    if (SHIBYTE(v296) < 0) {
      goto LABEL_534;
    }
    goto LABEL_163;
  }
  v283[1] = v180;
  operator delete(v180);
  if (SHIBYTE(v282) < 0) {
    goto LABEL_513;
  }
LABEL_142:
  if (SHIBYTE(v280) < 0) {
    goto LABEL_514;
  }
LABEL_143:
  if ((v542 & 0x80000000) == 0) {
    goto LABEL_144;
  }
LABEL_515:
  operator delete(v541[0]);
  if (SHIBYTE(v540) < 0) {
    goto LABEL_516;
  }
LABEL_145:
  if ((SHIBYTE(v538) & 0x80000000) == 0) {
    goto LABEL_146;
  }
LABEL_517:
  operator delete(v537[0]);
  if (v271 < 0) {
    goto LABEL_518;
  }
LABEL_147:
  if ((SHIBYTE(v274.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_148;
  }
LABEL_519:
  operator delete(v274.__r_.__value_.__l.__data_);
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_520;
  }
LABEL_149:
  if ((SHIBYTE(v272.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_150;
  }
LABEL_521:
  operator delete(v272.__r_.__value_.__l.__data_);
  if (v276 < 0) {
    goto LABEL_522;
  }
LABEL_151:
  if ((SHIBYTE(v278.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_152;
  }
LABEL_523:
  operator delete(v278.__r_.__value_.__l.__data_);
  if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_524;
  }
LABEL_153:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v284);
  v181 = (void **)v290[0];
  if (v290[0]) {
    goto LABEL_154;
  }
LABEL_525:
  if (SHIBYTE(v289) < 0) {
    goto LABEL_156;
  }
LABEL_526:
  if (SHIBYTE(v287) < 0) {
    goto LABEL_157;
  }
LABEL_527:
  if (v548 < 0) {
    goto LABEL_158;
  }
LABEL_528:
  if (SHIBYTE(v546) < 0) {
    goto LABEL_159;
  }
LABEL_529:
  if (v544 < 0) {
    goto LABEL_160;
  }
LABEL_530:
  if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_161;
  }
LABEL_531:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v291);
  v183 = (void **)v297[0];
  if (!v297[0]) {
    goto LABEL_162;
  }
LABEL_532:
  v235 = (void **)v297[1];
  if (v297[1] != v183)
  {
    do
    {
      if (*((char *)v235 - 1) < 0) {
        operator delete(*(v235 - 3));
      }
      v235 -= 3;
    }
    while (v235 != v183);
    v297[1] = v183;
    operator delete(v297[0]);
    if ((SHIBYTE(v296) & 0x80000000) == 0) {
      goto LABEL_163;
    }
LABEL_534:
    operator delete((void *)v295);
    if ((SHIBYTE(v294) & 0x80000000) == 0) {
      goto LABEL_164;
    }
LABEL_535:
    operator delete((void *)v293);
    if (v556 < 0) {
      goto LABEL_536;
    }
LABEL_165:
    if ((v554 & 0x80000000) == 0) {
      goto LABEL_166;
    }
LABEL_537:
    operator delete(v553[0]);
    if (SHIBYTE(v552) < 0) {
      goto LABEL_538;
    }
LABEL_167:
    if ((v550 & 0x80000000) == 0) {
      goto LABEL_168;
    }
LABEL_539:
    operator delete(v549);
    if (SHIBYTE(v292.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_540;
    }
LABEL_169:
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v298);
    v184 = (void **)v304[0];
    if (v304[0]) {
      goto LABEL_170;
    }
LABEL_541:
    if ((SHIBYTE(v303) & 0x80000000) == 0) {
      goto LABEL_542;
    }
LABEL_172:
    operator delete((void *)v302);
    if ((SHIBYTE(v301) & 0x80000000) == 0) {
      goto LABEL_543;
    }
LABEL_173:
    operator delete((void *)v300);
    if ((v562 & 0x80000000) == 0) {
      goto LABEL_544;
    }
LABEL_174:
    operator delete(v561[0]);
    if ((SHIBYTE(v560) & 0x80000000) == 0) {
      goto LABEL_545;
    }
LABEL_175:
    operator delete((void *)v559);
    if ((v558 & 0x80000000) == 0) {
      goto LABEL_546;
    }
LABEL_176:
    operator delete(v557[0]);
    if ((SHIBYTE(v299.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_547;
    }
LABEL_177:
    operator delete(v299.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v305);
    v186 = (void **)v311[0];
    if (v311[0]) {
      goto LABEL_548;
    }
LABEL_178:
    if (SHIBYTE(v310) < 0) {
      goto LABEL_550;
    }
    goto LABEL_179;
  }
  v297[1] = v183;
  operator delete(v183);
  if (SHIBYTE(v296) < 0) {
    goto LABEL_534;
  }
LABEL_163:
  if (SHIBYTE(v294) < 0) {
    goto LABEL_535;
  }
LABEL_164:
  if ((v556 & 0x80000000) == 0) {
    goto LABEL_165;
  }
LABEL_536:
  operator delete(v555[0]);
  if (v554 < 0) {
    goto LABEL_537;
  }
LABEL_166:
  if ((SHIBYTE(v552) & 0x80000000) == 0) {
    goto LABEL_167;
  }
LABEL_538:
  operator delete((void *)v551);
  if (v550 < 0) {
    goto LABEL_539;
  }
LABEL_168:
  if ((SHIBYTE(v292.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_169;
  }
LABEL_540:
  operator delete(v292.__r_.__value_.__l.__data_);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v298);
  v184 = (void **)v304[0];
  if (!v304[0]) {
    goto LABEL_541;
  }
LABEL_170:
  v185 = (void **)v304[1];
  if (v304[1] != v184)
  {
    do
    {
      if (*((char *)v185 - 1) < 0) {
        operator delete(*(v185 - 3));
      }
      v185 -= 3;
    }
    while (v185 != v184);
    v304[1] = v184;
    operator delete(v304[0]);
    if ((SHIBYTE(v303) & 0x80000000) == 0) {
      goto LABEL_542;
    }
    goto LABEL_172;
  }
  v304[1] = v184;
  operator delete(v184);
  if (SHIBYTE(v303) < 0) {
    goto LABEL_172;
  }
LABEL_542:
  if (SHIBYTE(v301) < 0) {
    goto LABEL_173;
  }
LABEL_543:
  if (v562 < 0) {
    goto LABEL_174;
  }
LABEL_544:
  if (SHIBYTE(v560) < 0) {
    goto LABEL_175;
  }
LABEL_545:
  if (v558 < 0) {
    goto LABEL_176;
  }
LABEL_546:
  if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_177;
  }
LABEL_547:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v305);
  v186 = (void **)v311[0];
  if (!v311[0]) {
    goto LABEL_178;
  }
LABEL_548:
  v236 = (void **)v311[1];
  if (v311[1] != v186)
  {
    do
    {
      if (*((char *)v236 - 1) < 0) {
        operator delete(*(v236 - 3));
      }
      v236 -= 3;
    }
    while (v236 != v186);
    v311[1] = v186;
    operator delete(v311[0]);
    if ((SHIBYTE(v310) & 0x80000000) == 0) {
      goto LABEL_179;
    }
LABEL_550:
    operator delete((void *)v309);
    if ((SHIBYTE(v308) & 0x80000000) == 0) {
      goto LABEL_180;
    }
LABEL_551:
    operator delete((void *)v307);
    if (v570 < 0) {
      goto LABEL_552;
    }
LABEL_181:
    if ((v568 & 0x80000000) == 0) {
      goto LABEL_182;
    }
LABEL_553:
    operator delete(v567[0]);
    if (SHIBYTE(v566) < 0) {
      goto LABEL_554;
    }
LABEL_183:
    if ((v564 & 0x80000000) == 0) {
      goto LABEL_184;
    }
LABEL_555:
    operator delete(v563[0]);
    if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_556;
    }
LABEL_185:
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v312);
    v187 = (void **)v318[0];
    if (v318[0]) {
      goto LABEL_186;
    }
LABEL_557:
    if ((SHIBYTE(v317) & 0x80000000) == 0) {
      goto LABEL_558;
    }
LABEL_188:
    operator delete((void *)v316);
    if ((SHIBYTE(v315) & 0x80000000) == 0) {
      goto LABEL_559;
    }
LABEL_189:
    operator delete((void *)v314);
    if ((v576 & 0x80000000) == 0) {
      goto LABEL_560;
    }
LABEL_190:
    operator delete(v575[0]);
    if ((SHIBYTE(v574) & 0x80000000) == 0) {
      goto LABEL_561;
    }
LABEL_191:
    operator delete((void *)v573);
    if ((v572 & 0x80000000) == 0) {
      goto LABEL_562;
    }
LABEL_192:
    operator delete(v571[0]);
    if ((SHIBYTE(v313.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_563;
    }
LABEL_193:
    operator delete(v313.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v319);
    v189 = (void **)v325[0];
    if (v325[0]) {
      goto LABEL_564;
    }
LABEL_194:
    if (SHIBYTE(v324) < 0) {
      goto LABEL_566;
    }
    goto LABEL_195;
  }
  v311[1] = v186;
  operator delete(v186);
  if (SHIBYTE(v310) < 0) {
    goto LABEL_550;
  }
LABEL_179:
  if (SHIBYTE(v308) < 0) {
    goto LABEL_551;
  }
LABEL_180:
  if ((v570 & 0x80000000) == 0) {
    goto LABEL_181;
  }
LABEL_552:
  operator delete(v569[0]);
  if (v568 < 0) {
    goto LABEL_553;
  }
LABEL_182:
  if ((SHIBYTE(v566) & 0x80000000) == 0) {
    goto LABEL_183;
  }
LABEL_554:
  operator delete((void *)v565);
  if (v564 < 0) {
    goto LABEL_555;
  }
LABEL_184:
  if ((SHIBYTE(v306.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_185;
  }
LABEL_556:
  operator delete(v306.__r_.__value_.__l.__data_);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v312);
  v187 = (void **)v318[0];
  if (!v318[0]) {
    goto LABEL_557;
  }
LABEL_186:
  v188 = (void **)v318[1];
  if (v318[1] != v187)
  {
    do
    {
      if (*((char *)v188 - 1) < 0) {
        operator delete(*(v188 - 3));
      }
      v188 -= 3;
    }
    while (v188 != v187);
    v318[1] = v187;
    operator delete(v318[0]);
    if ((SHIBYTE(v317) & 0x80000000) == 0) {
      goto LABEL_558;
    }
    goto LABEL_188;
  }
  v318[1] = v187;
  operator delete(v187);
  if (SHIBYTE(v317) < 0) {
    goto LABEL_188;
  }
LABEL_558:
  if (SHIBYTE(v315) < 0) {
    goto LABEL_189;
  }
LABEL_559:
  if (v576 < 0) {
    goto LABEL_190;
  }
LABEL_560:
  if (SHIBYTE(v574) < 0) {
    goto LABEL_191;
  }
LABEL_561:
  if (v572 < 0) {
    goto LABEL_192;
  }
LABEL_562:
  if (SHIBYTE(v313.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_193;
  }
LABEL_563:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v319);
  v189 = (void **)v325[0];
  if (!v325[0]) {
    goto LABEL_194;
  }
LABEL_564:
  v237 = (void **)v325[1];
  if (v325[1] != v189)
  {
    do
    {
      if (*((char *)v237 - 1) < 0) {
        operator delete(*(v237 - 3));
      }
      v237 -= 3;
    }
    while (v237 != v189);
    v325[1] = v189;
    operator delete(v325[0]);
    if ((SHIBYTE(v324) & 0x80000000) == 0) {
      goto LABEL_195;
    }
LABEL_566:
    operator delete((void *)v323);
    if ((SHIBYTE(v322) & 0x80000000) == 0) {
      goto LABEL_196;
    }
LABEL_567:
    operator delete((void *)v321);
    if (v582 < 0) {
      goto LABEL_568;
    }
LABEL_197:
    if ((SHIBYTE(v580) & 0x80000000) == 0) {
      goto LABEL_198;
    }
LABEL_569:
    operator delete((void *)v579);
    if (v578 < 0) {
      goto LABEL_570;
    }
LABEL_199:
    if ((SHIBYTE(v320.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_200;
    }
LABEL_571:
    operator delete(v320.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v326);
    v190 = (void **)v332[0];
    if (!v332[0]) {
      goto LABEL_572;
    }
LABEL_201:
    v191 = (void **)v332[1];
    if (v332[1] == v190)
    {
      v332[1] = v190;
      operator delete(v190);
      if ((SHIBYTE(v331) & 0x80000000) == 0) {
        goto LABEL_573;
      }
    }
    else
    {
      do
      {
        if (*((char *)v191 - 1) < 0) {
          operator delete(*(v191 - 3));
        }
        v191 -= 3;
      }
      while (v191 != v190);
      v332[1] = v190;
      operator delete(v332[0]);
      if ((SHIBYTE(v331) & 0x80000000) == 0) {
        goto LABEL_573;
      }
    }
LABEL_203:
    operator delete((void *)v330);
    if ((SHIBYTE(v329) & 0x80000000) == 0) {
      goto LABEL_574;
    }
LABEL_204:
    operator delete((void *)v328);
    if ((v588 & 0x80000000) == 0) {
      goto LABEL_575;
    }
LABEL_205:
    operator delete(v587[0]);
    if ((SHIBYTE(v586) & 0x80000000) == 0) {
      goto LABEL_576;
    }
LABEL_206:
    operator delete((void *)v585);
    if ((v584 & 0x80000000) == 0) {
      goto LABEL_577;
    }
LABEL_207:
    operator delete(v583[0]);
    if ((SHIBYTE(v327.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_578;
    }
LABEL_208:
    operator delete(v327.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v333);
    v192 = (void **)v339[0];
    if (v339[0]) {
      goto LABEL_579;
    }
LABEL_209:
    if (SHIBYTE(v338) < 0) {
      goto LABEL_581;
    }
    goto LABEL_210;
  }
  v325[1] = v189;
  operator delete(v189);
  if (SHIBYTE(v324) < 0) {
    goto LABEL_566;
  }
LABEL_195:
  if (SHIBYTE(v322) < 0) {
    goto LABEL_567;
  }
LABEL_196:
  if ((v582 & 0x80000000) == 0) {
    goto LABEL_197;
  }
LABEL_568:
  operator delete(v581[0]);
  if (SHIBYTE(v580) < 0) {
    goto LABEL_569;
  }
LABEL_198:
  if ((v578 & 0x80000000) == 0) {
    goto LABEL_199;
  }
LABEL_570:
  operator delete(v577[0]);
  if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_571;
  }
LABEL_200:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v326);
  v190 = (void **)v332[0];
  if (v332[0]) {
    goto LABEL_201;
  }
LABEL_572:
  if (SHIBYTE(v331) < 0) {
    goto LABEL_203;
  }
LABEL_573:
  if (SHIBYTE(v329) < 0) {
    goto LABEL_204;
  }
LABEL_574:
  if (v588 < 0) {
    goto LABEL_205;
  }
LABEL_575:
  if (SHIBYTE(v586) < 0) {
    goto LABEL_206;
  }
LABEL_576:
  if (v584 < 0) {
    goto LABEL_207;
  }
LABEL_577:
  if (SHIBYTE(v327.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_208;
  }
LABEL_578:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v333);
  v192 = (void **)v339[0];
  if (!v339[0]) {
    goto LABEL_209;
  }
LABEL_579:
  v238 = (void **)v339[1];
  if (v339[1] != v192)
  {
    do
    {
      if (*((char *)v238 - 1) < 0) {
        operator delete(*(v238 - 3));
      }
      v238 -= 3;
    }
    while (v238 != v192);
    v339[1] = v192;
    operator delete(v339[0]);
    if ((SHIBYTE(v338) & 0x80000000) == 0) {
      goto LABEL_210;
    }
LABEL_581:
    operator delete((void *)v337);
    if ((SHIBYTE(v336) & 0x80000000) == 0) {
      goto LABEL_211;
    }
LABEL_582:
    operator delete((void *)v335);
    if (v596 < 0) {
      goto LABEL_583;
    }
LABEL_212:
    if ((v594 & 0x80000000) == 0) {
      goto LABEL_213;
    }
LABEL_584:
    operator delete(v593[0]);
    if (SHIBYTE(v592) < 0) {
      goto LABEL_585;
    }
LABEL_214:
    if ((v590 & 0x80000000) == 0) {
      goto LABEL_215;
    }
LABEL_586:
    operator delete(v589[0]);
    if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_587;
    }
LABEL_216:
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v340);
    v193 = (void **)v346[0];
    if (v346[0]) {
      goto LABEL_217;
    }
LABEL_588:
    if ((SHIBYTE(v345) & 0x80000000) == 0) {
      goto LABEL_589;
    }
LABEL_219:
    operator delete((void *)v344);
    if ((SHIBYTE(v343) & 0x80000000) == 0) {
      goto LABEL_590;
    }
LABEL_220:
    operator delete((void *)v342);
    if ((v602 & 0x80000000) == 0) {
      goto LABEL_591;
    }
LABEL_221:
    operator delete(v601[0]);
    if ((SHIBYTE(v600) & 0x80000000) == 0) {
      goto LABEL_592;
    }
LABEL_222:
    operator delete((void *)v599);
    if ((v598 & 0x80000000) == 0) {
      goto LABEL_593;
    }
LABEL_223:
    operator delete(v597[0]);
    if ((SHIBYTE(v341.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_594;
    }
LABEL_224:
    operator delete(v341.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v347);
    v195 = (void **)v353[0];
    if (v353[0]) {
      goto LABEL_595;
    }
LABEL_225:
    if (SHIBYTE(v352) < 0) {
      goto LABEL_597;
    }
    goto LABEL_226;
  }
  v339[1] = v192;
  operator delete(v192);
  if (SHIBYTE(v338) < 0) {
    goto LABEL_581;
  }
LABEL_210:
  if (SHIBYTE(v336) < 0) {
    goto LABEL_582;
  }
LABEL_211:
  if ((v596 & 0x80000000) == 0) {
    goto LABEL_212;
  }
LABEL_583:
  operator delete(v595[0]);
  if (v594 < 0) {
    goto LABEL_584;
  }
LABEL_213:
  if ((SHIBYTE(v592) & 0x80000000) == 0) {
    goto LABEL_214;
  }
LABEL_585:
  operator delete((void *)v591);
  if (v590 < 0) {
    goto LABEL_586;
  }
LABEL_215:
  if ((SHIBYTE(v334.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_216;
  }
LABEL_587:
  operator delete(v334.__r_.__value_.__l.__data_);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v340);
  v193 = (void **)v346[0];
  if (!v346[0]) {
    goto LABEL_588;
  }
LABEL_217:
  v194 = (void **)v346[1];
  if (v346[1] != v193)
  {
    do
    {
      if (*((char *)v194 - 1) < 0) {
        operator delete(*(v194 - 3));
      }
      v194 -= 3;
    }
    while (v194 != v193);
    v346[1] = v193;
    operator delete(v346[0]);
    if ((SHIBYTE(v345) & 0x80000000) == 0) {
      goto LABEL_589;
    }
    goto LABEL_219;
  }
  v346[1] = v193;
  operator delete(v193);
  if (SHIBYTE(v345) < 0) {
    goto LABEL_219;
  }
LABEL_589:
  if (SHIBYTE(v343) < 0) {
    goto LABEL_220;
  }
LABEL_590:
  if (v602 < 0) {
    goto LABEL_221;
  }
LABEL_591:
  if (SHIBYTE(v600) < 0) {
    goto LABEL_222;
  }
LABEL_592:
  if (v598 < 0) {
    goto LABEL_223;
  }
LABEL_593:
  if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_224;
  }
LABEL_594:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v347);
  v195 = (void **)v353[0];
  if (!v353[0]) {
    goto LABEL_225;
  }
LABEL_595:
  v239 = (void **)v353[1];
  if (v353[1] != v195)
  {
    do
    {
      if (*((char *)v239 - 1) < 0) {
        operator delete(*(v239 - 3));
      }
      v239 -= 3;
    }
    while (v239 != v195);
    v353[1] = v195;
    operator delete(v353[0]);
    if ((SHIBYTE(v352) & 0x80000000) == 0) {
      goto LABEL_226;
    }
LABEL_597:
    operator delete((void *)v351);
    if ((SHIBYTE(v350) & 0x80000000) == 0) {
      goto LABEL_227;
    }
LABEL_598:
    operator delete((void *)v349);
    if (v610 < 0) {
      goto LABEL_599;
    }
LABEL_228:
    if ((v608 & 0x80000000) == 0) {
      goto LABEL_229;
    }
LABEL_600:
    operator delete(v607[0]);
    if (SHIBYTE(v606) < 0) {
      goto LABEL_601;
    }
LABEL_230:
    if ((v604 & 0x80000000) == 0) {
      goto LABEL_231;
    }
LABEL_602:
    operator delete(v603);
    if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_603;
    }
LABEL_232:
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v354);
    v196 = (void **)v368[0];
    if (v368[0]) {
      goto LABEL_233;
    }
LABEL_604:
    if ((SHIBYTE(v367) & 0x80000000) == 0) {
      goto LABEL_605;
    }
LABEL_235:
    operator delete((void *)v366);
    if ((SHIBYTE(v365) & 0x80000000) == 0) {
      goto LABEL_606;
    }
LABEL_236:
    operator delete((void *)v364);
    if ((SHIBYTE(v614) & 0x80000000) == 0) {
      goto LABEL_607;
    }
LABEL_237:
    operator delete((void *)v613);
    if ((SHIBYTE(v612) & 0x80000000) == 0) {
      goto LABEL_608;
    }
LABEL_238:
    operator delete(v611[0]);
    if ((v356 & 0x80000000) == 0) {
      goto LABEL_609;
    }
LABEL_239:
    operator delete(*(void **)v355);
    if ((SHIBYTE(v359.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_610;
    }
LABEL_240:
    operator delete(v359.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v358.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_611;
    }
LABEL_241:
    operator delete(v358.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v357.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_612;
    }
LABEL_242:
    operator delete(v357.__r_.__value_.__l.__data_);
    if ((v361 & 0x80000000) == 0) {
      goto LABEL_613;
    }
LABEL_243:
    operator delete(*(void **)__s);
    if ((SHIBYTE(v363.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_614;
    }
LABEL_244:
    operator delete(v363.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v362.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_615;
    }
LABEL_245:
    operator delete(v362.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v369);
    v198 = (void **)v375[0];
    if (v375[0]) {
      goto LABEL_616;
    }
LABEL_246:
    if (SHIBYTE(v374) < 0) {
      goto LABEL_618;
    }
    goto LABEL_247;
  }
  v353[1] = v195;
  operator delete(v195);
  if (SHIBYTE(v352) < 0) {
    goto LABEL_597;
  }
LABEL_226:
  if (SHIBYTE(v350) < 0) {
    goto LABEL_598;
  }
LABEL_227:
  if ((v610 & 0x80000000) == 0) {
    goto LABEL_228;
  }
LABEL_599:
  operator delete(v609[0]);
  if (v608 < 0) {
    goto LABEL_600;
  }
LABEL_229:
  if ((SHIBYTE(v606) & 0x80000000) == 0) {
    goto LABEL_230;
  }
LABEL_601:
  operator delete((void *)v605);
  if (v604 < 0) {
    goto LABEL_602;
  }
LABEL_231:
  if ((SHIBYTE(v348.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_232;
  }
LABEL_603:
  operator delete(v348.__r_.__value_.__l.__data_);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v354);
  v196 = (void **)v368[0];
  if (!v368[0]) {
    goto LABEL_604;
  }
LABEL_233:
  v197 = (void **)v368[1];
  if (v368[1] != v196)
  {
    do
    {
      if (*((char *)v197 - 1) < 0) {
        operator delete(*(v197 - 3));
      }
      v197 -= 3;
    }
    while (v197 != v196);
    v368[1] = v196;
    operator delete(v368[0]);
    if ((SHIBYTE(v367) & 0x80000000) == 0) {
      goto LABEL_605;
    }
    goto LABEL_235;
  }
  v368[1] = v196;
  operator delete(v196);
  if (SHIBYTE(v367) < 0) {
    goto LABEL_235;
  }
LABEL_605:
  if (SHIBYTE(v365) < 0) {
    goto LABEL_236;
  }
LABEL_606:
  if (SHIBYTE(v614) < 0) {
    goto LABEL_237;
  }
LABEL_607:
  if (SHIBYTE(v612) < 0) {
    goto LABEL_238;
  }
LABEL_608:
  if (v356 < 0) {
    goto LABEL_239;
  }
LABEL_609:
  if (SHIBYTE(v359.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_240;
  }
LABEL_610:
  if (SHIBYTE(v358.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_241;
  }
LABEL_611:
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_242;
  }
LABEL_612:
  if (v361 < 0) {
    goto LABEL_243;
  }
LABEL_613:
  if (SHIBYTE(v363.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_244;
  }
LABEL_614:
  if (SHIBYTE(v362.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_245;
  }
LABEL_615:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v369);
  v198 = (void **)v375[0];
  if (!v375[0]) {
    goto LABEL_246;
  }
LABEL_616:
  v240 = (void **)v375[1];
  if (v375[1] != v198)
  {
    do
    {
      if (*((char *)v240 - 1) < 0) {
        operator delete(*(v240 - 3));
      }
      v240 -= 3;
    }
    while (v240 != v198);
    v375[1] = v198;
    operator delete(v375[0]);
    if ((SHIBYTE(v374) & 0x80000000) == 0) {
      goto LABEL_247;
    }
LABEL_618:
    operator delete((void *)v373);
    if ((SHIBYTE(v372) & 0x80000000) == 0) {
      goto LABEL_248;
    }
LABEL_619:
    operator delete((void *)v371);
    if (v620 < 0) {
      goto LABEL_620;
    }
LABEL_249:
    if ((SHIBYTE(v618) & 0x80000000) == 0) {
      goto LABEL_250;
    }
LABEL_621:
    operator delete((void *)v617);
    if (v616 < 0) {
      goto LABEL_622;
    }
LABEL_251:
    if ((SHIBYTE(v370.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_252;
    }
LABEL_623:
    operator delete(v370.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v376);
    v199 = (void **)v382[0];
    if (!v382[0]) {
      goto LABEL_624;
    }
LABEL_253:
    v200 = (void **)v382[1];
    if (v382[1] == v199)
    {
      v382[1] = v199;
      operator delete(v199);
      if ((SHIBYTE(v381) & 0x80000000) == 0) {
        goto LABEL_625;
      }
    }
    else
    {
      do
      {
        if (*((char *)v200 - 1) < 0) {
          operator delete(*(v200 - 3));
        }
        v200 -= 3;
      }
      while (v200 != v199);
      v382[1] = v199;
      operator delete(v382[0]);
      if ((SHIBYTE(v381) & 0x80000000) == 0) {
        goto LABEL_625;
      }
    }
LABEL_255:
    operator delete((void *)v380);
    if ((SHIBYTE(v379) & 0x80000000) == 0) {
      goto LABEL_626;
    }
LABEL_256:
    operator delete((void *)v378);
    if ((v626 & 0x80000000) == 0) {
      goto LABEL_627;
    }
LABEL_257:
    operator delete(v625[0]);
    if ((SHIBYTE(v624) & 0x80000000) == 0) {
      goto LABEL_628;
    }
LABEL_258:
    operator delete((void *)v623);
    if ((v622 & 0x80000000) == 0) {
      goto LABEL_629;
    }
LABEL_259:
    operator delete(v621[0]);
    if ((SHIBYTE(v377.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_630;
    }
LABEL_260:
    operator delete(v377.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v383);
    v201 = (void **)v389[0];
    if (v389[0]) {
      goto LABEL_631;
    }
LABEL_261:
    if (SHIBYTE(v388) < 0) {
      goto LABEL_633;
    }
    goto LABEL_262;
  }
  v375[1] = v198;
  operator delete(v198);
  if (SHIBYTE(v374) < 0) {
    goto LABEL_618;
  }
LABEL_247:
  if (SHIBYTE(v372) < 0) {
    goto LABEL_619;
  }
LABEL_248:
  if ((v620 & 0x80000000) == 0) {
    goto LABEL_249;
  }
LABEL_620:
  operator delete(v619[0]);
  if (SHIBYTE(v618) < 0) {
    goto LABEL_621;
  }
LABEL_250:
  if ((v616 & 0x80000000) == 0) {
    goto LABEL_251;
  }
LABEL_622:
  operator delete(v615[0]);
  if (SHIBYTE(v370.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_623;
  }
LABEL_252:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v376);
  v199 = (void **)v382[0];
  if (v382[0]) {
    goto LABEL_253;
  }
LABEL_624:
  if (SHIBYTE(v381) < 0) {
    goto LABEL_255;
  }
LABEL_625:
  if (SHIBYTE(v379) < 0) {
    goto LABEL_256;
  }
LABEL_626:
  if (v626 < 0) {
    goto LABEL_257;
  }
LABEL_627:
  if (SHIBYTE(v624) < 0) {
    goto LABEL_258;
  }
LABEL_628:
  if (v622 < 0) {
    goto LABEL_259;
  }
LABEL_629:
  if (SHIBYTE(v377.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_260;
  }
LABEL_630:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v383);
  v201 = (void **)v389[0];
  if (!v389[0]) {
    goto LABEL_261;
  }
LABEL_631:
  v241 = (void **)v389[1];
  if (v389[1] != v201)
  {
    do
    {
      if (*((char *)v241 - 1) < 0) {
        operator delete(*(v241 - 3));
      }
      v241 -= 3;
    }
    while (v241 != v201);
    v389[1] = v201;
    operator delete(v389[0]);
    if ((SHIBYTE(v388) & 0x80000000) == 0) {
      goto LABEL_262;
    }
LABEL_633:
    operator delete((void *)v387);
    if ((SHIBYTE(v386) & 0x80000000) == 0) {
      goto LABEL_263;
    }
LABEL_634:
    operator delete((void *)v385);
    if (v632 < 0) {
      goto LABEL_635;
    }
LABEL_264:
    if ((SHIBYTE(v630) & 0x80000000) == 0) {
      goto LABEL_265;
    }
LABEL_636:
    operator delete((void *)v629);
    if (v628 < 0) {
      goto LABEL_637;
    }
LABEL_266:
    if ((SHIBYTE(v384.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_267;
    }
LABEL_638:
    operator delete(v384.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v390);
    v202 = (void **)v396[0];
    if (!v396[0]) {
      goto LABEL_639;
    }
LABEL_268:
    v203 = (void **)v396[1];
    if (v396[1] == v202)
    {
      v396[1] = v202;
      operator delete(v202);
      if ((SHIBYTE(v395) & 0x80000000) == 0) {
        goto LABEL_640;
      }
    }
    else
    {
      do
      {
        if (*((char *)v203 - 1) < 0) {
          operator delete(*(v203 - 3));
        }
        v203 -= 3;
      }
      while (v203 != v202);
      v396[1] = v202;
      operator delete(v396[0]);
      if ((SHIBYTE(v395) & 0x80000000) == 0) {
        goto LABEL_640;
      }
    }
LABEL_270:
    operator delete((void *)v394);
    if ((SHIBYTE(v393) & 0x80000000) == 0) {
      goto LABEL_641;
    }
LABEL_271:
    operator delete((void *)v392);
    if ((v638 & 0x80000000) == 0) {
      goto LABEL_642;
    }
LABEL_272:
    operator delete(v637[0]);
    if ((SHIBYTE(v636) & 0x80000000) == 0) {
      goto LABEL_643;
    }
LABEL_273:
    operator delete((void *)v635);
    if ((v634 & 0x80000000) == 0) {
      goto LABEL_644;
    }
LABEL_274:
    operator delete(v633[0]);
    if ((SHIBYTE(v391.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_645;
    }
LABEL_275:
    operator delete(v391.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v397);
    v204 = (void **)v403[0];
    if (v403[0]) {
      goto LABEL_646;
    }
LABEL_276:
    if (SHIBYTE(v402) < 0) {
      goto LABEL_648;
    }
    goto LABEL_277;
  }
  v389[1] = v201;
  operator delete(v201);
  if (SHIBYTE(v388) < 0) {
    goto LABEL_633;
  }
LABEL_262:
  if (SHIBYTE(v386) < 0) {
    goto LABEL_634;
  }
LABEL_263:
  if ((v632 & 0x80000000) == 0) {
    goto LABEL_264;
  }
LABEL_635:
  operator delete(v631[0]);
  if (SHIBYTE(v630) < 0) {
    goto LABEL_636;
  }
LABEL_265:
  if ((v628 & 0x80000000) == 0) {
    goto LABEL_266;
  }
LABEL_637:
  operator delete(v627[0]);
  if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_638;
  }
LABEL_267:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v390);
  v202 = (void **)v396[0];
  if (v396[0]) {
    goto LABEL_268;
  }
LABEL_639:
  if (SHIBYTE(v395) < 0) {
    goto LABEL_270;
  }
LABEL_640:
  if (SHIBYTE(v393) < 0) {
    goto LABEL_271;
  }
LABEL_641:
  if (v638 < 0) {
    goto LABEL_272;
  }
LABEL_642:
  if (SHIBYTE(v636) < 0) {
    goto LABEL_273;
  }
LABEL_643:
  if (v634 < 0) {
    goto LABEL_274;
  }
LABEL_644:
  if (SHIBYTE(v391.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_275;
  }
LABEL_645:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v397);
  v204 = (void **)v403[0];
  if (!v403[0]) {
    goto LABEL_276;
  }
LABEL_646:
  v242 = (void **)v403[1];
  if (v403[1] != v204)
  {
    do
    {
      if (*((char *)v242 - 1) < 0) {
        operator delete(*(v242 - 3));
      }
      v242 -= 3;
    }
    while (v242 != v204);
    v403[1] = v204;
    operator delete(v403[0]);
    if ((SHIBYTE(v402) & 0x80000000) == 0) {
      goto LABEL_277;
    }
LABEL_648:
    operator delete((void *)v401);
    if ((SHIBYTE(v400) & 0x80000000) == 0) {
      goto LABEL_278;
    }
LABEL_649:
    operator delete((void *)v399);
    if (v646 < 0) {
      goto LABEL_650;
    }
LABEL_279:
    if ((v644 & 0x80000000) == 0) {
      goto LABEL_280;
    }
LABEL_651:
    operator delete(v643[0]);
    if (SHIBYTE(v642) < 0) {
      goto LABEL_652;
    }
LABEL_281:
    if ((v640 & 0x80000000) == 0) {
      goto LABEL_282;
    }
LABEL_653:
    operator delete(v639);
    if (SHIBYTE(v398.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_654;
    }
LABEL_283:
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v404);
    v205 = (void **)v410[0];
    if (v410[0]) {
      goto LABEL_284;
    }
LABEL_655:
    if ((SHIBYTE(v409) & 0x80000000) == 0) {
      goto LABEL_656;
    }
LABEL_286:
    operator delete((void *)v408);
    if ((SHIBYTE(v407) & 0x80000000) == 0) {
      goto LABEL_657;
    }
LABEL_287:
    operator delete((void *)v406);
    if ((v652 & 0x80000000) == 0) {
      goto LABEL_658;
    }
LABEL_288:
    operator delete(v651[0]);
    if ((SHIBYTE(v650) & 0x80000000) == 0) {
      goto LABEL_659;
    }
LABEL_289:
    operator delete((void *)v649);
    if ((v648 & 0x80000000) == 0) {
      goto LABEL_660;
    }
LABEL_290:
    operator delete(v647[0]);
    if ((SHIBYTE(v405.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_661;
    }
LABEL_291:
    operator delete(v405.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v411);
    v207 = (void **)v417[0];
    if (v417[0]) {
      goto LABEL_662;
    }
LABEL_292:
    if (SHIBYTE(v416) < 0) {
      goto LABEL_664;
    }
    goto LABEL_293;
  }
  v403[1] = v204;
  operator delete(v204);
  if (SHIBYTE(v402) < 0) {
    goto LABEL_648;
  }
LABEL_277:
  if (SHIBYTE(v400) < 0) {
    goto LABEL_649;
  }
LABEL_278:
  if ((v646 & 0x80000000) == 0) {
    goto LABEL_279;
  }
LABEL_650:
  operator delete(v645[0]);
  if (v644 < 0) {
    goto LABEL_651;
  }
LABEL_280:
  if ((SHIBYTE(v642) & 0x80000000) == 0) {
    goto LABEL_281;
  }
LABEL_652:
  operator delete((void *)v641);
  if (v640 < 0) {
    goto LABEL_653;
  }
LABEL_282:
  if ((SHIBYTE(v398.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_283;
  }
LABEL_654:
  operator delete(v398.__r_.__value_.__l.__data_);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v404);
  v205 = (void **)v410[0];
  if (!v410[0]) {
    goto LABEL_655;
  }
LABEL_284:
  v206 = (void **)v410[1];
  if (v410[1] != v205)
  {
    do
    {
      if (*((char *)v206 - 1) < 0) {
        operator delete(*(v206 - 3));
      }
      v206 -= 3;
    }
    while (v206 != v205);
    v410[1] = v205;
    operator delete(v410[0]);
    if ((SHIBYTE(v409) & 0x80000000) == 0) {
      goto LABEL_656;
    }
    goto LABEL_286;
  }
  v410[1] = v205;
  operator delete(v205);
  if (SHIBYTE(v409) < 0) {
    goto LABEL_286;
  }
LABEL_656:
  if (SHIBYTE(v407) < 0) {
    goto LABEL_287;
  }
LABEL_657:
  if (v652 < 0) {
    goto LABEL_288;
  }
LABEL_658:
  if (SHIBYTE(v650) < 0) {
    goto LABEL_289;
  }
LABEL_659:
  if (v648 < 0) {
    goto LABEL_290;
  }
LABEL_660:
  if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_291;
  }
LABEL_661:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v411);
  v207 = (void **)v417[0];
  if (!v417[0]) {
    goto LABEL_292;
  }
LABEL_662:
  v243 = (void **)v417[1];
  if (v417[1] != v207)
  {
    do
    {
      if (*((char *)v243 - 1) < 0) {
        operator delete(*(v243 - 3));
      }
      v243 -= 3;
    }
    while (v243 != v207);
    v417[1] = v207;
    operator delete(v417[0]);
    if ((SHIBYTE(v416) & 0x80000000) == 0) {
      goto LABEL_293;
    }
LABEL_664:
    operator delete((void *)v415);
    if ((SHIBYTE(v414) & 0x80000000) == 0) {
      goto LABEL_294;
    }
LABEL_665:
    operator delete((void *)v413);
    if (v658 < 0) {
      goto LABEL_666;
    }
LABEL_295:
    if ((SHIBYTE(v656) & 0x80000000) == 0) {
      goto LABEL_296;
    }
LABEL_667:
    operator delete((void *)v655);
    if (v654 < 0) {
      goto LABEL_668;
    }
LABEL_297:
    if ((SHIBYTE(v412.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_298;
    }
LABEL_669:
    operator delete(v412.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v418);
    v208 = (void **)v424[0];
    if (!v424[0]) {
      goto LABEL_670;
    }
LABEL_299:
    v209 = (void **)v424[1];
    if (v424[1] == v208)
    {
      v424[1] = v208;
      operator delete(v208);
      if ((SHIBYTE(v423) & 0x80000000) == 0) {
        goto LABEL_671;
      }
    }
    else
    {
      do
      {
        if (*((char *)v209 - 1) < 0) {
          operator delete(*(v209 - 3));
        }
        v209 -= 3;
      }
      while (v209 != v208);
      v424[1] = v208;
      operator delete(v424[0]);
      if ((SHIBYTE(v423) & 0x80000000) == 0) {
        goto LABEL_671;
      }
    }
LABEL_301:
    operator delete((void *)v422);
    if ((SHIBYTE(v421) & 0x80000000) == 0) {
      goto LABEL_672;
    }
LABEL_302:
    operator delete((void *)v420);
    if ((v664 & 0x80000000) == 0) {
      goto LABEL_673;
    }
LABEL_303:
    operator delete(v663[0]);
    if ((SHIBYTE(v662) & 0x80000000) == 0) {
      goto LABEL_674;
    }
LABEL_304:
    operator delete((void *)v661);
    if ((v660 & 0x80000000) == 0) {
      goto LABEL_675;
    }
LABEL_305:
    operator delete(v659[0]);
    if ((SHIBYTE(v419.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_676;
    }
LABEL_306:
    operator delete(v419.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v425);
    v210 = (void **)v431[0];
    if (v431[0]) {
      goto LABEL_677;
    }
LABEL_307:
    if (SHIBYTE(v430) < 0) {
      goto LABEL_679;
    }
    goto LABEL_308;
  }
  v417[1] = v207;
  operator delete(v207);
  if (SHIBYTE(v416) < 0) {
    goto LABEL_664;
  }
LABEL_293:
  if (SHIBYTE(v414) < 0) {
    goto LABEL_665;
  }
LABEL_294:
  if ((v658 & 0x80000000) == 0) {
    goto LABEL_295;
  }
LABEL_666:
  operator delete(v657[0]);
  if (SHIBYTE(v656) < 0) {
    goto LABEL_667;
  }
LABEL_296:
  if ((v654 & 0x80000000) == 0) {
    goto LABEL_297;
  }
LABEL_668:
  operator delete(v653[0]);
  if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_669;
  }
LABEL_298:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v418);
  v208 = (void **)v424[0];
  if (v424[0]) {
    goto LABEL_299;
  }
LABEL_670:
  if (SHIBYTE(v423) < 0) {
    goto LABEL_301;
  }
LABEL_671:
  if (SHIBYTE(v421) < 0) {
    goto LABEL_302;
  }
LABEL_672:
  if (v664 < 0) {
    goto LABEL_303;
  }
LABEL_673:
  if (SHIBYTE(v662) < 0) {
    goto LABEL_304;
  }
LABEL_674:
  if (v660 < 0) {
    goto LABEL_305;
  }
LABEL_675:
  if (SHIBYTE(v419.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_306;
  }
LABEL_676:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v425);
  v210 = (void **)v431[0];
  if (!v431[0]) {
    goto LABEL_307;
  }
LABEL_677:
  v244 = (void **)v431[1];
  if (v431[1] != v210)
  {
    do
    {
      if (*((char *)v244 - 1) < 0) {
        operator delete(*(v244 - 3));
      }
      v244 -= 3;
    }
    while (v244 != v210);
    v431[1] = v210;
    operator delete(v431[0]);
    if ((SHIBYTE(v430) & 0x80000000) == 0) {
      goto LABEL_308;
    }
LABEL_679:
    operator delete((void *)v429);
    if ((SHIBYTE(v428) & 0x80000000) == 0) {
      goto LABEL_309;
    }
LABEL_680:
    operator delete((void *)v427);
    if (v670 < 0) {
      goto LABEL_681;
    }
LABEL_310:
    if ((SHIBYTE(v668) & 0x80000000) == 0) {
      goto LABEL_311;
    }
LABEL_682:
    operator delete((void *)v667);
    if (v666 < 0) {
      goto LABEL_683;
    }
LABEL_312:
    if ((SHIBYTE(v426.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_313;
    }
LABEL_684:
    operator delete(v426.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v432);
    v211 = (void **)v438[0];
    if (!v438[0]) {
      goto LABEL_685;
    }
LABEL_314:
    v212 = (void **)v438[1];
    if (v438[1] == v211)
    {
      v438[1] = v211;
      operator delete(v211);
      if ((SHIBYTE(v437) & 0x80000000) == 0) {
        goto LABEL_686;
      }
    }
    else
    {
      do
      {
        if (*((char *)v212 - 1) < 0) {
          operator delete(*(v212 - 3));
        }
        v212 -= 3;
      }
      while (v212 != v211);
      v438[1] = v211;
      operator delete(v438[0]);
      if ((SHIBYTE(v437) & 0x80000000) == 0) {
        goto LABEL_686;
      }
    }
LABEL_316:
    operator delete((void *)v436);
    if ((SHIBYTE(v435) & 0x80000000) == 0) {
      goto LABEL_687;
    }
LABEL_317:
    operator delete((void *)v434);
    if ((v678 & 0x80000000) == 0) {
      goto LABEL_688;
    }
LABEL_318:
    operator delete(v677[0]);
    if ((v676 & 0x80000000) == 0) {
      goto LABEL_689;
    }
LABEL_319:
    operator delete(v675[0]);
    if ((SHIBYTE(v674) & 0x80000000) == 0) {
      goto LABEL_690;
    }
LABEL_320:
    operator delete((void *)v673);
    if ((v672 & 0x80000000) == 0) {
      goto LABEL_691;
    }
LABEL_321:
    operator delete(v671);
    if ((SHIBYTE(v433.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_692;
    }
LABEL_322:
    operator delete(v433.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v439);
    v213 = (void **)v445[0];
    if (v445[0]) {
      goto LABEL_693;
    }
LABEL_323:
    if (SHIBYTE(v444) < 0) {
      goto LABEL_695;
    }
    goto LABEL_324;
  }
  v431[1] = v210;
  operator delete(v210);
  if (SHIBYTE(v430) < 0) {
    goto LABEL_679;
  }
LABEL_308:
  if (SHIBYTE(v428) < 0) {
    goto LABEL_680;
  }
LABEL_309:
  if ((v670 & 0x80000000) == 0) {
    goto LABEL_310;
  }
LABEL_681:
  operator delete(v669[0]);
  if (SHIBYTE(v668) < 0) {
    goto LABEL_682;
  }
LABEL_311:
  if ((v666 & 0x80000000) == 0) {
    goto LABEL_312;
  }
LABEL_683:
  operator delete(v665[0]);
  if (SHIBYTE(v426.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_684;
  }
LABEL_313:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v432);
  v211 = (void **)v438[0];
  if (v438[0]) {
    goto LABEL_314;
  }
LABEL_685:
  if (SHIBYTE(v437) < 0) {
    goto LABEL_316;
  }
LABEL_686:
  if (SHIBYTE(v435) < 0) {
    goto LABEL_317;
  }
LABEL_687:
  if (v678 < 0) {
    goto LABEL_318;
  }
LABEL_688:
  if (v676 < 0) {
    goto LABEL_319;
  }
LABEL_689:
  if (SHIBYTE(v674) < 0) {
    goto LABEL_320;
  }
LABEL_690:
  if (v672 < 0) {
    goto LABEL_321;
  }
LABEL_691:
  if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_322;
  }
LABEL_692:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v439);
  v213 = (void **)v445[0];
  if (!v445[0]) {
    goto LABEL_323;
  }
LABEL_693:
  v245 = (void **)v445[1];
  if (v445[1] != v213)
  {
    do
    {
      if (*((char *)v245 - 1) < 0) {
        operator delete(*(v245 - 3));
      }
      v245 -= 3;
    }
    while (v245 != v213);
    v445[1] = v213;
    operator delete(v445[0]);
    if ((SHIBYTE(v444) & 0x80000000) == 0) {
      goto LABEL_324;
    }
LABEL_695:
    operator delete((void *)v443);
    if ((SHIBYTE(v442) & 0x80000000) == 0) {
      goto LABEL_325;
    }
LABEL_696:
    operator delete((void *)v441);
    if (v686 < 0) {
      goto LABEL_697;
    }
LABEL_326:
    if ((v684 & 0x80000000) == 0) {
      goto LABEL_327;
    }
LABEL_698:
    operator delete(v683[0]);
    if (SHIBYTE(v682) < 0) {
      goto LABEL_699;
    }
LABEL_328:
    if ((v680 & 0x80000000) == 0) {
      goto LABEL_329;
    }
LABEL_700:
    operator delete(v679);
    if (SHIBYTE(v440.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_701;
    }
LABEL_330:
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v446);
    v214 = (void **)v452[0];
    if (v452[0]) {
      goto LABEL_331;
    }
LABEL_702:
    if ((SHIBYTE(v451) & 0x80000000) == 0) {
      goto LABEL_703;
    }
LABEL_333:
    operator delete((void *)v450);
    if ((SHIBYTE(v449) & 0x80000000) == 0) {
      goto LABEL_704;
    }
LABEL_334:
    operator delete((void *)v448);
    if ((v692 & 0x80000000) == 0) {
      goto LABEL_705;
    }
LABEL_335:
    operator delete(v691[0]);
    if ((SHIBYTE(v690) & 0x80000000) == 0) {
      goto LABEL_706;
    }
LABEL_336:
    operator delete((void *)v689);
    if ((v688 & 0x80000000) == 0) {
      goto LABEL_707;
    }
LABEL_337:
    operator delete(v687[0]);
    if ((SHIBYTE(v447.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_708;
    }
LABEL_338:
    operator delete(v447.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v453);
    v216 = (void **)v459[0];
    if (v459[0]) {
      goto LABEL_709;
    }
LABEL_339:
    if (SHIBYTE(v458) < 0) {
      goto LABEL_711;
    }
    goto LABEL_340;
  }
  v445[1] = v213;
  operator delete(v213);
  if (SHIBYTE(v444) < 0) {
    goto LABEL_695;
  }
LABEL_324:
  if (SHIBYTE(v442) < 0) {
    goto LABEL_696;
  }
LABEL_325:
  if ((v686 & 0x80000000) == 0) {
    goto LABEL_326;
  }
LABEL_697:
  operator delete(v685[0]);
  if (v684 < 0) {
    goto LABEL_698;
  }
LABEL_327:
  if ((SHIBYTE(v682) & 0x80000000) == 0) {
    goto LABEL_328;
  }
LABEL_699:
  operator delete((void *)v681);
  if (v680 < 0) {
    goto LABEL_700;
  }
LABEL_329:
  if ((SHIBYTE(v440.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_330;
  }
LABEL_701:
  operator delete(v440.__r_.__value_.__l.__data_);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v446);
  v214 = (void **)v452[0];
  if (!v452[0]) {
    goto LABEL_702;
  }
LABEL_331:
  v215 = (void **)v452[1];
  if (v452[1] != v214)
  {
    do
    {
      if (*((char *)v215 - 1) < 0) {
        operator delete(*(v215 - 3));
      }
      v215 -= 3;
    }
    while (v215 != v214);
    v452[1] = v214;
    operator delete(v452[0]);
    if ((SHIBYTE(v451) & 0x80000000) == 0) {
      goto LABEL_703;
    }
    goto LABEL_333;
  }
  v452[1] = v214;
  operator delete(v214);
  if (SHIBYTE(v451) < 0) {
    goto LABEL_333;
  }
LABEL_703:
  if (SHIBYTE(v449) < 0) {
    goto LABEL_334;
  }
LABEL_704:
  if (v692 < 0) {
    goto LABEL_335;
  }
LABEL_705:
  if (SHIBYTE(v690) < 0) {
    goto LABEL_336;
  }
LABEL_706:
  if (v688 < 0) {
    goto LABEL_337;
  }
LABEL_707:
  if (SHIBYTE(v447.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_338;
  }
LABEL_708:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v453);
  v216 = (void **)v459[0];
  if (!v459[0]) {
    goto LABEL_339;
  }
LABEL_709:
  v246 = (void **)v459[1];
  if (v459[1] != v216)
  {
    do
    {
      if (*((char *)v246 - 1) < 0) {
        operator delete(*(v246 - 3));
      }
      v246 -= 3;
    }
    while (v246 != v216);
    v459[1] = v216;
    operator delete(v459[0]);
    if ((SHIBYTE(v458) & 0x80000000) == 0) {
      goto LABEL_340;
    }
LABEL_711:
    operator delete((void *)v457);
    if ((SHIBYTE(v456) & 0x80000000) == 0) {
      goto LABEL_341;
    }
LABEL_712:
    operator delete((void *)v455);
    if (v700 < 0) {
      goto LABEL_713;
    }
LABEL_342:
    if ((v698 & 0x80000000) == 0) {
      goto LABEL_343;
    }
LABEL_714:
    operator delete(v697[0]);
    if (SHIBYTE(v696) < 0) {
      goto LABEL_715;
    }
LABEL_344:
    if ((v694 & 0x80000000) == 0) {
      goto LABEL_345;
    }
LABEL_716:
    operator delete(v693);
    if (SHIBYTE(v454.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_717;
    }
LABEL_346:
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v460);
    v217 = (void **)v466[0];
    if (v466[0]) {
      goto LABEL_347;
    }
LABEL_718:
    if ((SHIBYTE(v465) & 0x80000000) == 0) {
      goto LABEL_719;
    }
LABEL_349:
    operator delete((void *)v464);
    if ((SHIBYTE(v463) & 0x80000000) == 0) {
      goto LABEL_720;
    }
LABEL_350:
    operator delete((void *)v462);
    if ((v708 & 0x80000000) == 0) {
      goto LABEL_721;
    }
LABEL_351:
    operator delete(v707[0]);
    if ((v706 & 0x80000000) == 0) {
      goto LABEL_722;
    }
LABEL_352:
    operator delete(v705[0]);
    if ((SHIBYTE(v704) & 0x80000000) == 0) {
      goto LABEL_723;
    }
LABEL_353:
    operator delete((void *)v703);
    if ((v702 & 0x80000000) == 0) {
      goto LABEL_724;
    }
LABEL_354:
    operator delete(v701);
    if ((SHIBYTE(v461.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_725;
    }
LABEL_355:
    operator delete(v461.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v467);
    v219 = (void **)v473[0];
    if (v473[0]) {
      goto LABEL_726;
    }
LABEL_356:
    if (SHIBYTE(v472) < 0) {
      goto LABEL_728;
    }
    goto LABEL_357;
  }
  v459[1] = v216;
  operator delete(v216);
  if (SHIBYTE(v458) < 0) {
    goto LABEL_711;
  }
LABEL_340:
  if (SHIBYTE(v456) < 0) {
    goto LABEL_712;
  }
LABEL_341:
  if ((v700 & 0x80000000) == 0) {
    goto LABEL_342;
  }
LABEL_713:
  operator delete(v699[0]);
  if (v698 < 0) {
    goto LABEL_714;
  }
LABEL_343:
  if ((SHIBYTE(v696) & 0x80000000) == 0) {
    goto LABEL_344;
  }
LABEL_715:
  operator delete((void *)v695);
  if (v694 < 0) {
    goto LABEL_716;
  }
LABEL_345:
  if ((SHIBYTE(v454.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_346;
  }
LABEL_717:
  operator delete(v454.__r_.__value_.__l.__data_);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v460);
  v217 = (void **)v466[0];
  if (!v466[0]) {
    goto LABEL_718;
  }
LABEL_347:
  v218 = (void **)v466[1];
  if (v466[1] != v217)
  {
    do
    {
      if (*((char *)v218 - 1) < 0) {
        operator delete(*(v218 - 3));
      }
      v218 -= 3;
    }
    while (v218 != v217);
    v466[1] = v217;
    operator delete(v466[0]);
    if ((SHIBYTE(v465) & 0x80000000) == 0) {
      goto LABEL_719;
    }
    goto LABEL_349;
  }
  v466[1] = v217;
  operator delete(v217);
  if (SHIBYTE(v465) < 0) {
    goto LABEL_349;
  }
LABEL_719:
  if (SHIBYTE(v463) < 0) {
    goto LABEL_350;
  }
LABEL_720:
  if (v708 < 0) {
    goto LABEL_351;
  }
LABEL_721:
  if (v706 < 0) {
    goto LABEL_352;
  }
LABEL_722:
  if (SHIBYTE(v704) < 0) {
    goto LABEL_353;
  }
LABEL_723:
  if (v702 < 0) {
    goto LABEL_354;
  }
LABEL_724:
  if (SHIBYTE(v461.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_355;
  }
LABEL_725:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v467);
  v219 = (void **)v473[0];
  if (!v473[0]) {
    goto LABEL_356;
  }
LABEL_726:
  v247 = (void **)v473[1];
  if (v473[1] != v219)
  {
    do
    {
      if (*((char *)v247 - 1) < 0) {
        operator delete(*(v247 - 3));
      }
      v247 -= 3;
    }
    while (v247 != v219);
    v473[1] = v219;
    operator delete(v473[0]);
    if ((SHIBYTE(v472) & 0x80000000) == 0) {
      goto LABEL_357;
    }
LABEL_728:
    operator delete((void *)v471);
    if ((SHIBYTE(v470) & 0x80000000) == 0) {
      goto LABEL_358;
    }
LABEL_729:
    operator delete((void *)v469);
    if (v714 < 0) {
      goto LABEL_730;
    }
LABEL_359:
    if ((SHIBYTE(v712) & 0x80000000) == 0) {
      goto LABEL_360;
    }
LABEL_731:
    operator delete((void *)v711);
    if (v710 < 0) {
      goto LABEL_732;
    }
LABEL_361:
    if ((SHIBYTE(v468.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_362;
    }
LABEL_733:
    operator delete(v468.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v474);
    v220 = (void **)v480[0];
    if (!v480[0]) {
      goto LABEL_734;
    }
LABEL_363:
    v221 = (void **)v480[1];
    if (v480[1] == v220)
    {
      v480[1] = v220;
      operator delete(v220);
      if ((SHIBYTE(v479) & 0x80000000) == 0) {
        goto LABEL_735;
      }
    }
    else
    {
      do
      {
        if (*((char *)v221 - 1) < 0) {
          operator delete(*(v221 - 3));
        }
        v221 -= 3;
      }
      while (v221 != v220);
      v480[1] = v220;
      operator delete(v480[0]);
      if ((SHIBYTE(v479) & 0x80000000) == 0) {
        goto LABEL_735;
      }
    }
LABEL_365:
    operator delete((void *)v478);
    if ((SHIBYTE(v477) & 0x80000000) == 0) {
      goto LABEL_736;
    }
LABEL_366:
    operator delete((void *)v476);
    if ((v722 & 0x80000000) == 0) {
      goto LABEL_737;
    }
LABEL_367:
    operator delete(v721[0]);
    if ((v720 & 0x80000000) == 0) {
      goto LABEL_738;
    }
LABEL_368:
    operator delete(v719);
    if ((SHIBYTE(v718) & 0x80000000) == 0) {
      goto LABEL_739;
    }
LABEL_369:
    operator delete((void *)v717);
    if ((v716 & 0x80000000) == 0) {
      goto LABEL_740;
    }
LABEL_370:
    operator delete(v715[0]);
    if ((SHIBYTE(v475.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_741;
    }
LABEL_371:
    operator delete(v475.__r_.__value_.__l.__data_);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v481);
    v222 = (void **)v487[0];
    if (v487[0]) {
      goto LABEL_742;
    }
LABEL_372:
    if (SHIBYTE(v486) < 0) {
      goto LABEL_744;
    }
    goto LABEL_373;
  }
  v473[1] = v219;
  operator delete(v219);
  if (SHIBYTE(v472) < 0) {
    goto LABEL_728;
  }
LABEL_357:
  if (SHIBYTE(v470) < 0) {
    goto LABEL_729;
  }
LABEL_358:
  if ((v714 & 0x80000000) == 0) {
    goto LABEL_359;
  }
LABEL_730:
  operator delete(v713[0]);
  if (SHIBYTE(v712) < 0) {
    goto LABEL_731;
  }
LABEL_360:
  if ((v710 & 0x80000000) == 0) {
    goto LABEL_361;
  }
LABEL_732:
  operator delete(v709);
  if (SHIBYTE(v468.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_733;
  }
LABEL_362:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v474);
  v220 = (void **)v480[0];
  if (v480[0]) {
    goto LABEL_363;
  }
LABEL_734:
  if (SHIBYTE(v479) < 0) {
    goto LABEL_365;
  }
LABEL_735:
  if (SHIBYTE(v477) < 0) {
    goto LABEL_366;
  }
LABEL_736:
  if (v722 < 0) {
    goto LABEL_367;
  }
LABEL_737:
  if (v720 < 0) {
    goto LABEL_368;
  }
LABEL_738:
  if (SHIBYTE(v718) < 0) {
    goto LABEL_369;
  }
LABEL_739:
  if (v716 < 0) {
    goto LABEL_370;
  }
LABEL_740:
  if (SHIBYTE(v475.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_371;
  }
LABEL_741:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v481);
  v222 = (void **)v487[0];
  if (!v487[0]) {
    goto LABEL_372;
  }
LABEL_742:
  v248 = (void **)v487[1];
  if (v487[1] == v222)
  {
    v487[1] = v222;
    operator delete(v222);
    if (SHIBYTE(v486) < 0) {
      goto LABEL_744;
    }
LABEL_373:
    if ((SHIBYTE(v484) & 0x80000000) == 0)
    {
LABEL_374:
      if ((v730 & 0x80000000) == 0) {
        goto LABEL_375;
      }
LABEL_746:
      operator delete(v729[0]);
      if (v728 < 0) {
        goto LABEL_747;
      }
LABEL_376:
      if ((SHIBYTE(v726) & 0x80000000) == 0) {
        goto LABEL_377;
      }
LABEL_748:
      operator delete((void *)v725);
      if (v724 < 0) {
        goto LABEL_749;
      }
LABEL_378:
      if ((SHIBYTE(v482.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_379;
      }
LABEL_750:
      operator delete(v482.__r_.__value_.__l.__data_);
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v488);
      v223 = (void **)v494[0];
      if (!v494[0]) {
        goto LABEL_751;
      }
LABEL_380:
      v224 = (void **)v494[1];
      v225 = v223;
      if (v494[1] != v223)
      {
        do
        {
          if (*((char *)v224 - 1) < 0) {
            operator delete(*(v224 - 3));
          }
          v224 -= 3;
        }
        while (v224 != v223);
        v225 = (void **)v494[0];
      }
      v494[1] = v223;
      operator delete(v225);
      if (SHIBYTE(v493) < 0) {
        goto LABEL_462;
      }
LABEL_752:
      if ((SHIBYTE(v491) & 0x80000000) == 0) {
        goto LABEL_753;
      }
LABEL_463:
      operator delete((void *)v490);
      if (SHIBYTE(v734) < 0) {
        goto LABEL_464;
      }
LABEL_754:
      if ((v732 & 0x80000000) == 0) {
        goto LABEL_755;
      }
LABEL_465:
      operator delete(v731);
      if (SHIBYTE(v489.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_466;
      }
LABEL_756:
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v495);
      v226 = (void **)v501[0];
      if (v501[0]) {
        goto LABEL_757;
      }
LABEL_467:
      if ((SHIBYTE(v500) & 0x80000000) == 0) {
        goto LABEL_468;
      }
LABEL_839:
      operator delete((void *)v499);
      if (SHIBYTE(v498) < 0) {
        goto LABEL_840;
      }
LABEL_469:
      if ((SHIBYTE(v738) & 0x80000000) == 0) {
        goto LABEL_470;
      }
LABEL_841:
      operator delete((void *)v737);
      if (v736 < 0) {
        goto LABEL_842;
      }
LABEL_471:
      if ((SHIBYTE(v496.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_472;
      }
LABEL_843:
      operator delete(v496.__r_.__value_.__l.__data_);
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v502);
      v227 = (void **)v507[0];
      if (!v507[0]) {
        goto LABEL_844;
      }
LABEL_473:
      v228 = (void **)v507[1];
      v229 = v227;
      if (v507[1] != v227)
      {
        do
        {
          if (*((char *)v228 - 1) < 0) {
            operator delete(*(v228 - 3));
          }
          v228 -= 3;
        }
        while (v228 != v227);
        v229 = (void **)v507[0];
      }
      v507[1] = v227;
      operator delete(v229);
      if (SHIBYTE(v506) < 0) {
        goto LABEL_480;
      }
LABEL_845:
      if ((SHIBYTE(v504) & 0x80000000) == 0) {
        goto LABEL_846;
      }
LABEL_481:
      operator delete(v503[0]);
      if (v740 < 0) {
        goto LABEL_482;
      }
LABEL_847:
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v509);
      v230 = (void **)v514[0];
      if (v514[0]) {
        goto LABEL_848;
      }
LABEL_483:
      if ((SHIBYTE(v513) & 0x80000000) == 0) {
        goto LABEL_484;
      }
LABEL_855:
      operator delete((void *)v512);
      if (SHIBYTE(v511) < 0) {
        goto LABEL_856;
      }
LABEL_485:
      if ((v742 & 0x80000000) == 0) {
        goto LABEL_486;
      }
LABEL_857:
      operator delete(v741[0]);
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v515);
      v231 = (void **)v520[0];
      if (!v520[0]) {
        goto LABEL_858;
      }
LABEL_487:
      v232 = (void **)v520[1];
      v233 = v231;
      if (v520[1] != v231)
      {
        do
        {
          if (*((char *)v232 - 1) < 0) {
            operator delete(*(v232 - 3));
          }
          v232 -= 3;
        }
        while (v232 != v231);
        v233 = (void **)v520[0];
      }
      v520[1] = v231;
      operator delete(v233);
      if (SHIBYTE(v519) < 0) {
        goto LABEL_494;
      }
LABEL_859:
      if ((SHIBYTE(v517) & 0x80000000) == 0) {
        goto LABEL_860;
      }
LABEL_495:
      operator delete(v516[0]);
      if (v744 < 0) {
        goto LABEL_496;
      }
      goto LABEL_861;
    }
  }
  else
  {
    do
    {
      if (*((char *)v248 - 1) < 0) {
        operator delete(*(v248 - 3));
      }
      v248 -= 3;
    }
    while (v248 != v222);
    v487[1] = v222;
    operator delete(v487[0]);
    if ((SHIBYTE(v486) & 0x80000000) == 0) {
      goto LABEL_373;
    }
LABEL_744:
    operator delete((void *)v485);
    if ((SHIBYTE(v484) & 0x80000000) == 0) {
      goto LABEL_374;
    }
  }
  operator delete((void *)v483);
  if (v730 < 0) {
    goto LABEL_746;
  }
LABEL_375:
  if ((v728 & 0x80000000) == 0) {
    goto LABEL_376;
  }
LABEL_747:
  operator delete(v727);
  if (SHIBYTE(v726) < 0) {
    goto LABEL_748;
  }
LABEL_377:
  if ((v724 & 0x80000000) == 0) {
    goto LABEL_378;
  }
LABEL_749:
  operator delete(v723[0]);
  if (SHIBYTE(v482.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_750;
  }
LABEL_379:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v488);
  v223 = (void **)v494[0];
  if (v494[0]) {
    goto LABEL_380;
  }
LABEL_751:
  if ((SHIBYTE(v493) & 0x80000000) == 0) {
    goto LABEL_752;
  }
LABEL_462:
  operator delete((void *)v492);
  if (SHIBYTE(v491) < 0) {
    goto LABEL_463;
  }
LABEL_753:
  if ((SHIBYTE(v734) & 0x80000000) == 0) {
    goto LABEL_754;
  }
LABEL_464:
  operator delete((void *)v733);
  if (v732 < 0) {
    goto LABEL_465;
  }
LABEL_755:
  if ((SHIBYTE(v489.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_756;
  }
LABEL_466:
  operator delete(v489.__r_.__value_.__l.__data_);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v495);
  v226 = (void **)v501[0];
  if (!v501[0]) {
    goto LABEL_467;
  }
LABEL_757:
  v249 = (void **)v501[1];
  v250 = v226;
  if (v501[1] != v226)
  {
    do
    {
      if (*((char *)v249 - 1) < 0) {
        operator delete(*(v249 - 3));
      }
      v249 -= 3;
    }
    while (v249 != v226);
    v250 = (void **)v501[0];
  }
  v501[1] = v226;
  operator delete(v250);
  if (SHIBYTE(v500) < 0) {
    goto LABEL_839;
  }
LABEL_468:
  if ((SHIBYTE(v498) & 0x80000000) == 0) {
    goto LABEL_469;
  }
LABEL_840:
  operator delete((void *)v497);
  if (SHIBYTE(v738) < 0) {
    goto LABEL_841;
  }
LABEL_470:
  if ((v736 & 0x80000000) == 0) {
    goto LABEL_471;
  }
LABEL_842:
  operator delete(v735[0]);
  if (SHIBYTE(v496.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_843;
  }
LABEL_472:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v502);
  v227 = (void **)v507[0];
  if (v507[0]) {
    goto LABEL_473;
  }
LABEL_844:
  if ((SHIBYTE(v506) & 0x80000000) == 0) {
    goto LABEL_845;
  }
LABEL_480:
  operator delete((void *)v505);
  if (SHIBYTE(v504) < 0) {
    goto LABEL_481;
  }
LABEL_846:
  if ((v740 & 0x80000000) == 0) {
    goto LABEL_847;
  }
LABEL_482:
  operator delete(v739);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v509);
  v230 = (void **)v514[0];
  if (!v514[0]) {
    goto LABEL_483;
  }
LABEL_848:
  v251 = (void **)v514[1];
  v252 = v230;
  if (v514[1] != v230)
  {
    do
    {
      if (*((char *)v251 - 1) < 0) {
        operator delete(*(v251 - 3));
      }
      v251 -= 3;
    }
    while (v251 != v230);
    v252 = (void **)v514[0];
  }
  v514[1] = v230;
  operator delete(v252);
  if (SHIBYTE(v513) < 0) {
    goto LABEL_855;
  }
LABEL_484:
  if ((SHIBYTE(v511) & 0x80000000) == 0) {
    goto LABEL_485;
  }
LABEL_856:
  operator delete((void *)v510);
  if (v742 < 0) {
    goto LABEL_857;
  }
LABEL_486:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v515);
  v231 = (void **)v520[0];
  if (v520[0]) {
    goto LABEL_487;
  }
LABEL_858:
  if ((SHIBYTE(v519) & 0x80000000) == 0) {
    goto LABEL_859;
  }
LABEL_494:
  operator delete((void *)v518);
  if (SHIBYTE(v517) < 0) {
    goto LABEL_495;
  }
LABEL_860:
  if (v744 < 0) {
LABEL_496:
  }
    operator delete(v743[0]);
LABEL_861:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v522);
}

void sub_1923A8DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, E5RT::AsyncEventImpl *a10, E5RT::AsyncEventImpl *a11, E5RT::AsyncEventImpl *a12, E5RT::AsyncEventImpl *a13, uint64_t a14, E5RT::AsyncEventImpl *a15, uint64_t a16, unint64_t *a17, E5RT::AsyncEventImpl *a18, E5RT::AsyncEventImpl *a19, E5RT::AsyncEventImpl *a20,E5RT::AsyncEventImpl *a21,E5RT::AsyncEventImpl *a22,E5RT::AsyncEventImpl *a23,E5RT::AsyncEventImpl *a24,E5RT::AsyncEventImpl *a25,E5RT::AsyncEventImpl *a26,E5RT::AsyncEventImpl *a27,E5RT::AsyncEventImpl *a28,E5RT::AsyncEventImpl *a29,E5RT::AsyncEventImpl *a30,E5RT::AsyncEventImpl *a31,E5RT::AsyncEventImpl *a32,E5RT::AsyncEventImpl *a33,E5RT::AsyncEventImpl *a34,E5RT::AsyncEventImpl *a35,E5RT::AsyncEventImpl *a36,E5RT::AsyncEventImpl *a37,E5RT::AsyncEventImpl *a38,E5RT::AsyncEventImpl *a39,E5RT::AsyncEventImpl *a40,E5RT::AsyncEventImpl *a41,E5RT::AsyncEventImpl *a42,E5RT::AsyncEventImpl *a43,E5RT::AsyncEventImpl *a44,E5RT::AsyncEventImpl *a45,uint64_t a46,E5RT::AsyncEventImpl *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  if (SLOBYTE(STACK[0x124F]) < 0) {
    operator delete((void *)STACK[0x1238]);
  }
  if (SLOBYTE(STACK[0x1237]) < 0) {
    operator delete((void *)STACK[0x1220]);
  }
  if (SLOBYTE(STACK[0x121F]) < 0) {
    operator delete((void *)STACK[0x1208]);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  if (a68 < 0) {
    operator delete(a63);
  }
  if (a62 < 0) {
    operator delete(a57);
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&a72);
  Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&a75);
  if (SLOBYTE(STACK[0x12AF]) < 0)
  {
    operator delete((void *)STACK[0x1298]);
    if ((SLOBYTE(STACK[0x1297]) & 0x80000000) == 0) {
      goto LABEL_15;
    }
  }
  else if ((SLOBYTE(STACK[0x1297]) & 0x80000000) == 0)
  {
LABEL_15:
    if (SLOBYTE(STACK[0x127F]) < 0) {
      goto LABEL_16;
    }
    goto LABEL_20;
  }
  operator delete((void *)STACK[0x1280]);
  if (SLOBYTE(STACK[0x127F]) < 0)
  {
LABEL_16:
    operator delete((void *)STACK[0x1268]);
    if ((SLOBYTE(STACK[0x1267]) & 0x80000000) == 0)
    {
LABEL_22:
      if (a74 < 0) {
        operator delete(a73);
      }
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x220]);
      Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x2E8]);
      if (SLOBYTE(STACK[0x12F7]) < 0)
      {
        operator delete((void *)STACK[0x12E0]);
        if ((SLOBYTE(STACK[0x12DF]) & 0x80000000) == 0) {
          goto LABEL_26;
        }
      }
      else if ((SLOBYTE(STACK[0x12DF]) & 0x80000000) == 0)
      {
LABEL_26:
        if ((SLOBYTE(STACK[0x12C7]) & 0x80000000) == 0) {
          goto LABEL_28;
        }
        goto LABEL_27;
      }
      operator delete((void *)STACK[0x12C8]);
      if ((SLOBYTE(STACK[0x12C7]) & 0x80000000) == 0)
      {
LABEL_28:
        if (SLOBYTE(STACK[0x247]) < 0)
        {
          operator delete((void *)STACK[0x230]);
          if ((SLOBYTE(STACK[0x297]) & 0x80000000) == 0) {
            goto LABEL_30;
          }
        }
        else if ((SLOBYTE(STACK[0x297]) & 0x80000000) == 0)
        {
LABEL_30:
          if (SLOBYTE(STACK[0x277]) < 0) {
            goto LABEL_31;
          }
          goto LABEL_37;
        }
        operator delete((void *)STACK[0x280]);
        if (SLOBYTE(STACK[0x277]) < 0)
        {
LABEL_31:
          operator delete((void *)STACK[0x260]);
          if ((SLOBYTE(STACK[0x25F]) & 0x80000000) == 0) {
            goto LABEL_32;
          }
          goto LABEL_38;
        }
LABEL_37:
        if ((SLOBYTE(STACK[0x25F]) & 0x80000000) == 0)
        {
LABEL_32:
          if (SLOBYTE(STACK[0x2B7]) < 0) {
            goto LABEL_33;
          }
          goto LABEL_39;
        }
LABEL_38:
        operator delete((void *)STACK[0x248]);
        if (SLOBYTE(STACK[0x2B7]) < 0)
        {
LABEL_33:
          operator delete((void *)STACK[0x2A0]);
          if ((SLOBYTE(STACK[0x2E7]) & 0x80000000) == 0)
          {
LABEL_41:
            if (SLOBYTE(STACK[0x2CF]) < 0) {
              operator delete((void *)STACK[0x2B8]);
            }
            E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x330]);
            Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x358]);
            if (SLOBYTE(STACK[0x1347]) < 0) {
              operator delete((void *)STACK[0x1330]);
            }
            if (SLOBYTE(STACK[0x132F]) < 0) {
              operator delete((void *)STACK[0x1318]);
            }
            if (SLOBYTE(STACK[0x1317]) < 0) {
              operator delete((void *)STACK[0x1300]);
            }
            if (SLOBYTE(STACK[0x357]) < 0) {
              operator delete((void *)STACK[0x340]);
            }
            E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x3A0]);
            Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x3C8]);
            if (SLOBYTE(STACK[0x13A7]) < 0)
            {
              operator delete((void *)STACK[0x1390]);
              if ((SLOBYTE(STACK[0x138F]) & 0x80000000) == 0) {
                goto LABEL_56;
              }
            }
            else if ((SLOBYTE(STACK[0x138F]) & 0x80000000) == 0)
            {
LABEL_56:
              if (SLOBYTE(STACK[0x1377]) < 0) {
                goto LABEL_57;
              }
              goto LABEL_61;
            }
            operator delete((void *)STACK[0x1378]);
            if (SLOBYTE(STACK[0x1377]) < 0)
            {
LABEL_57:
              operator delete((void *)STACK[0x1360]);
              if ((SLOBYTE(STACK[0x135F]) & 0x80000000) == 0)
              {
LABEL_63:
                if (SLOBYTE(STACK[0x3C7]) < 0) {
                  operator delete((void *)STACK[0x3B0]);
                }
                E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x410]);
                Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x438]);
                if (SLOBYTE(STACK[0x13EF]) < 0)
                {
                  operator delete((void *)STACK[0x13D8]);
                  if ((SLOBYTE(STACK[0x13D7]) & 0x80000000) == 0) {
                    goto LABEL_67;
                  }
                }
                else if ((SLOBYTE(STACK[0x13D7]) & 0x80000000) == 0)
                {
LABEL_67:
                  if ((SLOBYTE(STACK[0x13BF]) & 0x80000000) == 0) {
                    goto LABEL_69;
                  }
                  goto LABEL_68;
                }
                operator delete((void *)STACK[0x13C0]);
                if ((SLOBYTE(STACK[0x13BF]) & 0x80000000) == 0)
                {
LABEL_69:
                  if (SLOBYTE(STACK[0x437]) < 0) {
                    operator delete((void *)STACK[0x420]);
                  }
                  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x480]);
                  Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x4A8]);
                  if (SLOBYTE(STACK[0x144F]) < 0)
                  {
                    operator delete((void *)STACK[0x1438]);
                    if ((SLOBYTE(STACK[0x1437]) & 0x80000000) == 0) {
                      goto LABEL_76;
                    }
                  }
                  else if ((SLOBYTE(STACK[0x1437]) & 0x80000000) == 0)
                  {
LABEL_76:
                    if (SLOBYTE(STACK[0x141F]) < 0) {
                      goto LABEL_77;
                    }
                    goto LABEL_81;
                  }
                  operator delete((void *)STACK[0x1420]);
                  if (SLOBYTE(STACK[0x141F]) < 0)
                  {
LABEL_77:
                    operator delete((void *)STACK[0x1408]);
                    if ((SLOBYTE(STACK[0x1407]) & 0x80000000) == 0)
                    {
LABEL_83:
                      if (SLOBYTE(STACK[0x4A7]) < 0) {
                        operator delete((void *)STACK[0x490]);
                      }
                      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x4F0]);
                      Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x518]);
                      if (SLOBYTE(STACK[0x1497]) < 0)
                      {
                        operator delete((void *)STACK[0x1480]);
                        if ((SLOBYTE(STACK[0x147F]) & 0x80000000) == 0) {
                          goto LABEL_87;
                        }
                      }
                      else if ((SLOBYTE(STACK[0x147F]) & 0x80000000) == 0)
                      {
LABEL_87:
                        if ((SLOBYTE(STACK[0x1467]) & 0x80000000) == 0) {
                          goto LABEL_89;
                        }
                        goto LABEL_88;
                      }
                      operator delete((void *)STACK[0x1468]);
                      if ((SLOBYTE(STACK[0x1467]) & 0x80000000) == 0)
                      {
LABEL_89:
                        if (SLOBYTE(STACK[0x517]) < 0) {
                          operator delete((void *)STACK[0x500]);
                        }
                        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x560]);
                        Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x588]);
                        if (SLOBYTE(STACK[0x14DF]) < 0)
                        {
                          operator delete((void *)STACK[0x14C8]);
                          if ((SLOBYTE(STACK[0x14C7]) & 0x80000000) == 0) {
                            goto LABEL_96;
                          }
                        }
                        else if ((SLOBYTE(STACK[0x14C7]) & 0x80000000) == 0)
                        {
LABEL_96:
                          if ((SLOBYTE(STACK[0x14AF]) & 0x80000000) == 0) {
                            goto LABEL_98;
                          }
                          goto LABEL_97;
                        }
                        operator delete((void *)STACK[0x14B0]);
                        if ((SLOBYTE(STACK[0x14AF]) & 0x80000000) == 0)
                        {
LABEL_98:
                          if (SLOBYTE(STACK[0x587]) < 0) {
                            operator delete((void *)STACK[0x570]);
                          }
                          E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x5D0]);
                          Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x5F8]);
                          if (SLOBYTE(STACK[0x1527]) < 0) {
                            operator delete((void *)STACK[0x1510]);
                          }
                          if (SLOBYTE(STACK[0x150F]) < 0) {
                            operator delete((void *)STACK[0x14F8]);
                          }
                          if (SLOBYTE(STACK[0x14F7]) < 0) {
                            operator delete((void *)STACK[0x14E0]);
                          }
                          if (SLOBYTE(STACK[0x5F7]) < 0) {
                            operator delete((void *)STACK[0x5E0]);
                          }
                          E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x640]);
                          Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x668]);
                          if (SLOBYTE(STACK[0x1587]) < 0)
                          {
                            operator delete((void *)STACK[0x1570]);
                            if ((SLOBYTE(STACK[0x156F]) & 0x80000000) == 0) {
                              goto LABEL_113;
                            }
                          }
                          else if ((SLOBYTE(STACK[0x156F]) & 0x80000000) == 0)
                          {
LABEL_113:
                            if (SLOBYTE(STACK[0x1557]) < 0) {
                              goto LABEL_114;
                            }
                            goto LABEL_118;
                          }
                          operator delete((void *)STACK[0x1558]);
                          if (SLOBYTE(STACK[0x1557]) < 0)
                          {
LABEL_114:
                            operator delete((void *)STACK[0x1540]);
                            if ((SLOBYTE(STACK[0x153F]) & 0x80000000) == 0)
                            {
LABEL_120:
                              if (SLOBYTE(STACK[0x667]) < 0) {
                                operator delete((void *)STACK[0x650]);
                              }
                              E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x6B0]);
                              Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x6D8]);
                              if (SLOBYTE(STACK[0x15CF]) < 0)
                              {
                                operator delete((void *)STACK[0x15B8]);
                                if ((SLOBYTE(STACK[0x15B7]) & 0x80000000) == 0) {
                                  goto LABEL_124;
                                }
                              }
                              else if ((SLOBYTE(STACK[0x15B7]) & 0x80000000) == 0)
                              {
LABEL_124:
                                if ((SLOBYTE(STACK[0x159F]) & 0x80000000) == 0) {
                                  goto LABEL_126;
                                }
                                goto LABEL_125;
                              }
                              operator delete((void *)STACK[0x15A0]);
                              if ((SLOBYTE(STACK[0x159F]) & 0x80000000) == 0)
                              {
LABEL_126:
                                if (SLOBYTE(STACK[0x6D7]) < 0) {
                                  operator delete((void *)STACK[0x6C0]);
                                }
                                E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x720]);
                                Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x748]);
                                if (SLOBYTE(STACK[0x162F]) < 0)
                                {
                                  operator delete((void *)STACK[0x1618]);
                                  if ((SLOBYTE(STACK[0x1617]) & 0x80000000) == 0) {
                                    goto LABEL_133;
                                  }
                                }
                                else if ((SLOBYTE(STACK[0x1617]) & 0x80000000) == 0)
                                {
LABEL_133:
                                  if (SLOBYTE(STACK[0x15FF]) < 0) {
                                    goto LABEL_134;
                                  }
                                  goto LABEL_138;
                                }
                                operator delete((void *)STACK[0x1600]);
                                if (SLOBYTE(STACK[0x15FF]) < 0)
                                {
LABEL_134:
                                  operator delete((void *)STACK[0x15E8]);
                                  if ((SLOBYTE(STACK[0x15E7]) & 0x80000000) == 0)
                                  {
LABEL_140:
                                    if (SLOBYTE(STACK[0x747]) < 0) {
                                      operator delete((void *)STACK[0x730]);
                                    }
                                    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x790]);
                                    Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x858]);
                                    if (SLOBYTE(STACK[0x165F]) < 0) {
                                      operator delete((void *)STACK[0x1648]);
                                    }
                                    if (SLOBYTE(STACK[0x1647]) < 0) {
                                      operator delete((void *)STACK[0x1630]);
                                    }
                                    if (SLOBYTE(STACK[0x7B7]) < 0)
                                    {
                                      operator delete((void *)STACK[0x7A0]);
                                      if ((SLOBYTE(STACK[0x807]) & 0x80000000) == 0) {
                                        goto LABEL_148;
                                      }
                                    }
                                    else if ((SLOBYTE(STACK[0x807]) & 0x80000000) == 0)
                                    {
LABEL_148:
                                      if (SLOBYTE(STACK[0x7E7]) < 0) {
                                        goto LABEL_149;
                                      }
                                      goto LABEL_155;
                                    }
                                    operator delete((void *)STACK[0x7F0]);
                                    if (SLOBYTE(STACK[0x7E7]) < 0)
                                    {
LABEL_149:
                                      operator delete((void *)STACK[0x7D0]);
                                      if ((SLOBYTE(STACK[0x7CF]) & 0x80000000) == 0) {
                                        goto LABEL_150;
                                      }
                                      goto LABEL_156;
                                    }
LABEL_155:
                                    if ((SLOBYTE(STACK[0x7CF]) & 0x80000000) == 0)
                                    {
LABEL_150:
                                      if (SLOBYTE(STACK[0x827]) < 0) {
                                        goto LABEL_151;
                                      }
                                      goto LABEL_157;
                                    }
LABEL_156:
                                    operator delete((void *)STACK[0x7B8]);
                                    if (SLOBYTE(STACK[0x827]) < 0)
                                    {
LABEL_151:
                                      operator delete((void *)STACK[0x810]);
                                      if ((SLOBYTE(STACK[0x857]) & 0x80000000) == 0)
                                      {
LABEL_159:
                                        if (SLOBYTE(STACK[0x83F]) < 0) {
                                          operator delete((void *)STACK[0x828]);
                                        }
                                        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x8A0]);
                                        Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x8C8]);
                                        if (SLOBYTE(STACK[0x16AF]) < 0)
                                        {
                                          operator delete((void *)STACK[0x1698]);
                                          if ((SLOBYTE(STACK[0x1697]) & 0x80000000) == 0) {
                                            goto LABEL_163;
                                          }
                                        }
                                        else if ((SLOBYTE(STACK[0x1697]) & 0x80000000) == 0)
                                        {
LABEL_163:
                                          if ((SLOBYTE(STACK[0x167F]) & 0x80000000) == 0) {
                                            goto LABEL_165;
                                          }
                                          goto LABEL_164;
                                        }
                                        operator delete((void *)STACK[0x1680]);
                                        if ((SLOBYTE(STACK[0x167F]) & 0x80000000) == 0)
                                        {
LABEL_165:
                                          if (SLOBYTE(STACK[0x8C7]) < 0) {
                                            operator delete((void *)STACK[0x8B0]);
                                          }
                                          E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x910]);
                                          Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x938]);
                                          if (SLOBYTE(STACK[0x16F7]) < 0)
                                          {
                                            operator delete((void *)STACK[0x16E0]);
                                            if ((SLOBYTE(STACK[0x16DF]) & 0x80000000) == 0) {
                                              goto LABEL_172;
                                            }
                                          }
                                          else if ((SLOBYTE(STACK[0x16DF]) & 0x80000000) == 0)
                                          {
LABEL_172:
                                            if ((SLOBYTE(STACK[0x16C7]) & 0x80000000) == 0) {
                                              goto LABEL_174;
                                            }
                                            goto LABEL_173;
                                          }
                                          operator delete((void *)STACK[0x16C8]);
                                          if ((SLOBYTE(STACK[0x16C7]) & 0x80000000) == 0)
                                          {
LABEL_174:
                                            if (SLOBYTE(STACK[0x937]) < 0) {
                                              operator delete((void *)STACK[0x920]);
                                            }
                                            E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x980]);
                                            Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x9A8]);
                                            if (SLOBYTE(STACK[0x173F]) < 0) {
                                              operator delete((void *)STACK[0x1728]);
                                            }
                                            if (SLOBYTE(STACK[0x1727]) < 0) {
                                              operator delete((void *)STACK[0x1710]);
                                            }
                                            if (SLOBYTE(STACK[0x170F]) < 0) {
                                              operator delete((void *)STACK[0x16F8]);
                                            }
                                            if (SLOBYTE(STACK[0x9A7]) < 0) {
                                              operator delete((void *)STACK[0x990]);
                                            }
                                            E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x9F0]);
                                            Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0xA18]);
                                            if (SLOBYTE(STACK[0x1787]) < 0) {
                                              operator delete((void *)STACK[0x1770]);
                                            }
                                            if (SLOBYTE(STACK[0x176F]) < 0) {
                                              operator delete((void *)STACK[0x1758]);
                                            }
                                            if (SLOBYTE(STACK[0x1757]) < 0) {
                                              operator delete((void *)STACK[0x1740]);
                                            }
                                            if (SLOBYTE(STACK[0xA17]) < 0) {
                                              operator delete((void *)STACK[0xA00]);
                                            }
                                            E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0xA60]);
                                            Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0xA88]);
                                            if (SLOBYTE(STACK[0x17E7]) < 0)
                                            {
                                              operator delete((void *)STACK[0x17D0]);
                                              if ((SLOBYTE(STACK[0x17CF]) & 0x80000000) == 0) {
                                                goto LABEL_197;
                                              }
                                            }
                                            else if ((SLOBYTE(STACK[0x17CF]) & 0x80000000) == 0)
                                            {
LABEL_197:
                                              if (SLOBYTE(STACK[0x17B7]) < 0) {
                                                goto LABEL_198;
                                              }
                                              goto LABEL_202;
                                            }
                                            operator delete((void *)STACK[0x17B8]);
                                            if (SLOBYTE(STACK[0x17B7]) < 0)
                                            {
LABEL_198:
                                              operator delete((void *)STACK[0x17A0]);
                                              if ((SLOBYTE(STACK[0x179F]) & 0x80000000) == 0)
                                              {
LABEL_204:
                                                if (SLOBYTE(STACK[0xA87]) < 0) {
                                                  operator delete((void *)STACK[0xA70]);
                                                }
                                                E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0xAD0]);
                                                Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0xAF8]);
                                                if (SLOBYTE(STACK[0x182F]) < 0)
                                                {
                                                  operator delete((void *)STACK[0x1818]);
                                                  if ((SLOBYTE(STACK[0x1817]) & 0x80000000) == 0) {
                                                    goto LABEL_208;
                                                  }
                                                }
                                                else if ((SLOBYTE(STACK[0x1817]) & 0x80000000) == 0)
                                                {
LABEL_208:
                                                  if ((SLOBYTE(STACK[0x17FF]) & 0x80000000) == 0) {
                                                    goto LABEL_210;
                                                  }
                                                  goto LABEL_209;
                                                }
                                                operator delete((void *)STACK[0x1800]);
                                                if ((SLOBYTE(STACK[0x17FF]) & 0x80000000) == 0)
                                                {
LABEL_210:
                                                  if (SLOBYTE(STACK[0xAF7]) < 0) {
                                                    operator delete((void *)STACK[0xAE0]);
                                                  }
                                                  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0xB40]);
                                                  Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0xB68]);
                                                  if (SLOBYTE(STACK[0x1877]) < 0)
                                                  {
                                                    operator delete((void *)STACK[0x1860]);
                                                    if ((SLOBYTE(STACK[0x185F]) & 0x80000000) == 0) {
                                                      goto LABEL_217;
                                                    }
                                                  }
                                                  else if ((SLOBYTE(STACK[0x185F]) & 0x80000000) == 0)
                                                  {
LABEL_217:
                                                    if ((SLOBYTE(STACK[0x1847]) & 0x80000000) == 0) {
                                                      goto LABEL_219;
                                                    }
                                                    goto LABEL_218;
                                                  }
                                                  operator delete((void *)STACK[0x1848]);
                                                  if ((SLOBYTE(STACK[0x1847]) & 0x80000000) == 0)
                                                  {
LABEL_219:
                                                    if (SLOBYTE(STACK[0xB67]) < 0) {
                                                      operator delete((void *)STACK[0xB50]);
                                                    }
                                                    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0xBB0]);
                                                    Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0xBD8]);
                                                    if (SLOBYTE(STACK[0x18BF]) < 0)
                                                    {
                                                      operator delete((void *)STACK[0x18A8]);
                                                      if ((SLOBYTE(STACK[0x18A7]) & 0x80000000) == 0) {
                                                        goto LABEL_226;
                                                      }
                                                    }
                                                    else if ((SLOBYTE(STACK[0x18A7]) & 0x80000000) == 0)
                                                    {
LABEL_226:
                                                      if ((SLOBYTE(STACK[0x188F]) & 0x80000000) == 0) {
                                                        goto LABEL_228;
                                                      }
                                                      goto LABEL_227;
                                                    }
                                                    operator delete((void *)STACK[0x1890]);
                                                    if ((SLOBYTE(STACK[0x188F]) & 0x80000000) == 0)
                                                    {
LABEL_228:
                                                      if (SLOBYTE(STACK[0xBD7]) < 0) {
                                                        operator delete((void *)STACK[0xBC0]);
                                                      }
                                                      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0xC20]);
                                                      Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0xC48]);
                                                      if (SLOBYTE(STACK[0x1907]) < 0)
                                                      {
                                                        operator delete((void *)STACK[0x18F0]);
                                                        if ((SLOBYTE(STACK[0x18EF]) & 0x80000000) == 0) {
                                                          goto LABEL_235;
                                                        }
                                                      }
                                                      else if ((SLOBYTE(STACK[0x18EF]) & 0x80000000) == 0)
                                                      {
LABEL_235:
                                                        if ((SLOBYTE(STACK[0x18D7]) & 0x80000000) == 0) {
                                                          goto LABEL_237;
                                                        }
                                                        goto LABEL_236;
                                                      }
                                                      operator delete((void *)STACK[0x18D8]);
                                                      if ((SLOBYTE(STACK[0x18D7]) & 0x80000000) == 0)
                                                      {
LABEL_237:
                                                        if (SLOBYTE(STACK[0xC47]) < 0) {
                                                          operator delete((void *)STACK[0xC30]);
                                                        }
                                                        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0xC90]);
                                                        Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0xCB8]);
                                                        if (SLOBYTE(STACK[0x1967]) < 0) {
                                                          operator delete((void *)STACK[0x1950]);
                                                        }
                                                        if (SLOBYTE(STACK[0x194F]) < 0) {
                                                          operator delete((void *)STACK[0x1938]);
                                                        }
                                                        if (SLOBYTE(STACK[0x1937]) < 0) {
                                                          operator delete((void *)STACK[0x1920]);
                                                        }
                                                        if (SLOBYTE(STACK[0x191F]) < 0) {
                                                          operator delete((void *)STACK[0x1908]);
                                                        }
                                                        if (SLOBYTE(STACK[0xCB7]) < 0) {
                                                          operator delete((void *)STACK[0xCA0]);
                                                        }
                                                        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0xD00]);
                                                        Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0xD28]);
                                                        if (SLOBYTE(STACK[0x19C7]) < 0)
                                                        {
                                                          operator delete((void *)STACK[0x19B0]);
                                                          if ((SLOBYTE(STACK[0x19AF]) & 0x80000000) == 0) {
                                                            goto LABEL_254;
                                                          }
                                                        }
                                                        else if ((SLOBYTE(STACK[0x19AF]) & 0x80000000) == 0)
                                                        {
LABEL_254:
                                                          if (SLOBYTE(STACK[0x1997]) < 0) {
                                                            goto LABEL_255;
                                                          }
                                                          goto LABEL_259;
                                                        }
                                                        operator delete((void *)STACK[0x1998]);
                                                        if (SLOBYTE(STACK[0x1997]) < 0)
                                                        {
LABEL_255:
                                                          operator delete((void *)STACK[0x1980]);
                                                          if ((SLOBYTE(STACK[0x197F]) & 0x80000000) == 0)
                                                          {
LABEL_261:
                                                            if (SLOBYTE(STACK[0xD27]) < 0) {
                                                              operator delete((void *)STACK[0xD10]);
                                                            }
                                                            E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0xD70]);
                                                            Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0xD98]);
                                                            if (SLOBYTE(STACK[0x1A0F]) < 0)
                                                            {
                                                              operator delete((void *)STACK[0x19F8]);
                                                              if ((SLOBYTE(STACK[0x19F7]) & 0x80000000) == 0) {
                                                                goto LABEL_265;
                                                              }
                                                            }
                                                            else if ((SLOBYTE(STACK[0x19F7]) & 0x80000000) == 0)
                                                            {
LABEL_265:
                                                              if ((SLOBYTE(STACK[0x19DF]) & 0x80000000) == 0) {
                                                                goto LABEL_267;
                                                              }
                                                              goto LABEL_266;
                                                            }
                                                            operator delete((void *)STACK[0x19E0]);
                                                            if ((SLOBYTE(STACK[0x19DF]) & 0x80000000) == 0)
                                                            {
LABEL_267:
                                                              if (SLOBYTE(STACK[0xD97]) < 0) {
                                                                operator delete((void *)STACK[0xD80]);
                                                              }
                                                              E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0xDE0]);
                                                              Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0xE08]);
                                                              if (SLOBYTE(STACK[0x1A6F]) < 0)
                                                              {
                                                                operator delete((void *)STACK[0x1A58]);
                                                                if ((SLOBYTE(STACK[0x1A57]) & 0x80000000) == 0) {
                                                                  goto LABEL_274;
                                                                }
                                                              }
                                                              else if ((SLOBYTE(STACK[0x1A57]) & 0x80000000) == 0)
                                                              {
LABEL_274:
                                                                if (SLOBYTE(STACK[0x1A3F]) < 0) {
                                                                  goto LABEL_275;
                                                                }
                                                                goto LABEL_279;
                                                              }
                                                              operator delete((void *)STACK[0x1A40]);
                                                              if (SLOBYTE(STACK[0x1A3F]) < 0)
                                                              {
LABEL_275:
                                                                operator delete((void *)STACK[0x1A28]);
                                                                if ((SLOBYTE(STACK[0x1A27]) & 0x80000000) == 0)
                                                                {
LABEL_281:
                                                                  if (SLOBYTE(STACK[0xE07]) < 0) {
                                                                    operator delete((void *)STACK[0xDF0]);
                                                                  }
                                                                  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0xE50]);
                                                                  Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0xE78]);
                                                                  if (SLOBYTE(STACK[0x1ACF]) < 0)
                                                                  {
                                                                    operator delete((void *)STACK[0x1AB8]);
                                                                    if ((SLOBYTE(STACK[0x1AB7]) & 0x80000000) == 0) {
                                                                      goto LABEL_285;
                                                                    }
                                                                  }
                                                                  else if ((SLOBYTE(STACK[0x1AB7]) & 0x80000000) == 0)
                                                                  {
LABEL_285:
                                                                    if (SLOBYTE(STACK[0x1A9F]) < 0) {
                                                                      goto LABEL_286;
                                                                    }
                                                                    goto LABEL_290;
                                                                  }
                                                                  operator delete((void *)STACK[0x1AA0]);
                                                                  if (SLOBYTE(STACK[0x1A9F]) < 0)
                                                                  {
LABEL_286:
                                                                    operator delete((void *)STACK[0x1A88]);
                                                                    if ((SLOBYTE(STACK[0x1A87]) & 0x80000000) == 0)
                                                                    {
LABEL_292:
                                                                      if (SLOBYTE(STACK[0xE77]) < 0) {
                                                                        operator delete((void *)STACK[0xE60]);
                                                                      }
                                                                      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0xEC0]);
                                                                      Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0xEE8]);
                                                                      if (SLOBYTE(STACK[0x1B17]) < 0)
                                                                      {
                                                                        operator delete((void *)STACK[0x1B00]);
                                                                        if ((SLOBYTE(STACK[0x1AFF]) & 0x80000000) == 0) {
                                                                          goto LABEL_296;
                                                                        }
                                                                      }
                                                                      else if ((SLOBYTE(STACK[0x1AFF]) & 0x80000000) == 0)
                                                                      {
LABEL_296:
                                                                        if ((SLOBYTE(STACK[0x1AE7]) & 0x80000000) == 0) {
                                                                          goto LABEL_298;
                                                                        }
                                                                        goto LABEL_297;
                                                                      }
                                                                      operator delete((void *)STACK[0x1AE8]);
                                                                      if ((SLOBYTE(STACK[0x1AE7]) & 0x80000000) == 0)
                                                                      {
LABEL_298:
                                                                        if (SLOBYTE(STACK[0xEE7]) < 0) {
                                                                          operator delete((void *)STACK[0xED0]);
                                                                        }
                                                                        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0xF30]);
                                                                        Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0xF58]);
                                                                        if (SLOBYTE(STACK[0x1B77]) < 0)
                                                                        {
                                                                          operator delete((void *)STACK[0x1B60]);
                                                                          if ((SLOBYTE(STACK[0x1B5F]) & 0x80000000) == 0) {
                                                                            goto LABEL_305;
                                                                          }
                                                                        }
                                                                        else if ((SLOBYTE(STACK[0x1B5F]) & 0x80000000) == 0)
                                                                        {
LABEL_305:
                                                                          if (SLOBYTE(STACK[0x1B47]) < 0) {
                                                                            goto LABEL_306;
                                                                          }
                                                                          goto LABEL_310;
                                                                        }
                                                                        operator delete((void *)STACK[0x1B48]);
                                                                        if (SLOBYTE(STACK[0x1B47]) < 0)
                                                                        {
LABEL_306:
                                                                          operator delete((void *)STACK[0x1B30]);
                                                                          if ((SLOBYTE(STACK[0x1B2F]) & 0x80000000) == 0)
                                                                          {
LABEL_312:
                                                                            if (SLOBYTE(STACK[0xF57]) < 0) {
                                                                              operator delete((void *)STACK[0xF40]);
                                                                            }
                                                                            E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0xFA0]);
                                                                            Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0xFC8]);
                                                                            if (SLOBYTE(STACK[0x1BD7]) < 0)
                                                                            {
                                                                              operator delete((void *)STACK[0x1BC0]);
                                                                              if ((SLOBYTE(STACK[0x1BBF]) & 0x80000000) == 0) {
                                                                                goto LABEL_316;
                                                                              }
                                                                            }
                                                                            else if ((SLOBYTE(STACK[0x1BBF]) & 0x80000000) == 0)
                                                                            {
LABEL_316:
                                                                              if (SLOBYTE(STACK[0x1BA7]) < 0) {
                                                                                goto LABEL_317;
                                                                              }
                                                                              goto LABEL_321;
                                                                            }
                                                                            operator delete((void *)STACK[0x1BA8]);
                                                                            if (SLOBYTE(STACK[0x1BA7]) < 0)
                                                                            {
LABEL_317:
                                                                              operator delete((void *)STACK[0x1B90]);
                                                                              if ((SLOBYTE(STACK[0x1B8F]) & 0x80000000) == 0)
                                                                              {
LABEL_323:
                                                                                uint64_t v75 = (E5RT::AsyncEventImpl *)a17;
                                                                                if (SLOBYTE(STACK[0xFC7]) < 0) {
                                                                                  operator delete((void *)STACK[0xFB0]);
                                                                                }
                                                                                E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x1010]);
                                                                                Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x1038]);
                                                                                if (SLOBYTE(STACK[0x1C07]) < 0) {
                                                                                  operator delete((void *)STACK[0x1BF0]);
                                                                                }
                                                                                if (SLOBYTE(STACK[0x1BEF]) < 0) {
                                                                                  operator delete((void *)STACK[0x1BD8]);
                                                                                }
                                                                                if (SLOBYTE(STACK[0x1037]) < 0) {
                                                                                  operator delete((void *)STACK[0x1020]);
                                                                                }
                                                                                E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x1080]);
                                                                                Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x10A8]);
                                                                                if (SLOBYTE(STACK[0x1C37]) < 0) {
                                                                                  operator delete((void *)STACK[0x1C20]);
                                                                                }
                                                                                if (SLOBYTE(STACK[0x1C1F]) < 0) {
                                                                                  operator delete((void *)STACK[0x1C08]);
                                                                                }
                                                                                if (SLOBYTE(STACK[0x10A7]) < 0) {
                                                                                  operator delete((void *)STACK[0x1090]);
                                                                                }
                                                                                E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x10F0]);
                                                                                Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x1100]);
                                                                                if (SLOBYTE(STACK[0x1C4F]) < 0) {
                                                                                  operator delete((void *)STACK[0x1C38]);
                                                                                }
                                                                                E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x1148]);
                                                                                Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x1158]);
                                                                                if (SLOBYTE(STACK[0x1C67]) < 0) {
                                                                                  operator delete((void *)STACK[0x1C50]);
                                                                                }
                                                                                E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x11A0]);
                                                                                Espresso::AOT::AbstractMILCompiler::Options::~Options((Espresso::AOT::AbstractMILCompiler::Options *)&STACK[0x11B0]);
                                                                                if (SLOBYTE(STACK[0x1C7F]) < 0) {
                                                                                  operator delete((void *)STACK[0x1C68]);
                                                                                }
                                                                                E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x11F8]);
                                                                                if (&STACK[0x1C80] != a17)
                                                                                {
                                                                                  do
                                                                                  {
                                                                                    uint64_t v75 = (E5RT::AsyncEventImpl *)((char *)v75 - 88);
                                                                                    sub_1923B1270(v75);
                                                                                  }
                                                                                  while (v75 != (E5RT::AsyncEventImpl *)&STACK[0x1C80]);
                                                                                }
                                                                                _Unwind_Resume(a1);
                                                                              }
LABEL_322:
                                                                              operator delete((void *)STACK[0x1B78]);
                                                                              goto LABEL_323;
                                                                            }
LABEL_321:
                                                                            if ((SLOBYTE(STACK[0x1B8F]) & 0x80000000) == 0) {
                                                                              goto LABEL_323;
                                                                            }
                                                                            goto LABEL_322;
                                                                          }
LABEL_311:
                                                                          operator delete((void *)STACK[0x1B18]);
                                                                          goto LABEL_312;
                                                                        }
LABEL_310:
                                                                        if ((SLOBYTE(STACK[0x1B2F]) & 0x80000000) == 0) {
                                                                          goto LABEL_312;
                                                                        }
                                                                        goto LABEL_311;
                                                                      }
LABEL_297:
                                                                      operator delete((void *)STACK[0x1AD0]);
                                                                      goto LABEL_298;
                                                                    }
LABEL_291:
                                                                    operator delete((void *)STACK[0x1A70]);
                                                                    goto LABEL_292;
                                                                  }
LABEL_290:
                                                                  if ((SLOBYTE(STACK[0x1A87]) & 0x80000000) == 0) {
                                                                    goto LABEL_292;
                                                                  }
                                                                  goto LABEL_291;
                                                                }
LABEL_280:
                                                                operator delete((void *)STACK[0x1A10]);
                                                                goto LABEL_281;
                                                              }
LABEL_279:
                                                              if ((SLOBYTE(STACK[0x1A27]) & 0x80000000) == 0) {
                                                                goto LABEL_281;
                                                              }
                                                              goto LABEL_280;
                                                            }
LABEL_266:
                                                            operator delete((void *)STACK[0x19C8]);
                                                            goto LABEL_267;
                                                          }
LABEL_260:
                                                          operator delete((void *)STACK[0x1968]);
                                                          goto LABEL_261;
                                                        }
LABEL_259:
                                                        if ((SLOBYTE(STACK[0x197F]) & 0x80000000) == 0) {
                                                          goto LABEL_261;
                                                        }
                                                        goto LABEL_260;
                                                      }
LABEL_236:
                                                      operator delete((void *)STACK[0x18C0]);
                                                      goto LABEL_237;
                                                    }
LABEL_227:
                                                    operator delete((void *)STACK[0x1878]);
                                                    goto LABEL_228;
                                                  }
LABEL_218:
                                                  operator delete((void *)STACK[0x1830]);
                                                  goto LABEL_219;
                                                }
LABEL_209:
                                                operator delete((void *)STACK[0x17E8]);
                                                goto LABEL_210;
                                              }
LABEL_203:
                                              operator delete((void *)STACK[0x1788]);
                                              goto LABEL_204;
                                            }
LABEL_202:
                                            if ((SLOBYTE(STACK[0x179F]) & 0x80000000) == 0) {
                                              goto LABEL_204;
                                            }
                                            goto LABEL_203;
                                          }
LABEL_173:
                                          operator delete((void *)STACK[0x16B0]);
                                          goto LABEL_174;
                                        }
LABEL_164:
                                        operator delete((void *)STACK[0x1668]);
                                        goto LABEL_165;
                                      }
LABEL_158:
                                      operator delete((void *)STACK[0x840]);
                                      goto LABEL_159;
                                    }
LABEL_157:
                                    if ((SLOBYTE(STACK[0x857]) & 0x80000000) == 0) {
                                      goto LABEL_159;
                                    }
                                    goto LABEL_158;
                                  }
LABEL_139:
                                  operator delete((void *)STACK[0x15D0]);
                                  goto LABEL_140;
                                }
LABEL_138:
                                if ((SLOBYTE(STACK[0x15E7]) & 0x80000000) == 0) {
                                  goto LABEL_140;
                                }
                                goto LABEL_139;
                              }
LABEL_125:
                              operator delete((void *)STACK[0x1588]);
                              goto LABEL_126;
                            }
LABEL_119:
                            operator delete((void *)STACK[0x1528]);
                            goto LABEL_120;
                          }
LABEL_118:
                          if ((SLOBYTE(STACK[0x153F]) & 0x80000000) == 0) {
                            goto LABEL_120;
                          }
                          goto LABEL_119;
                        }
LABEL_97:
                        operator delete((void *)STACK[0x1498]);
                        goto LABEL_98;
                      }
LABEL_88:
                      operator delete((void *)STACK[0x1450]);
                      goto LABEL_89;
                    }
LABEL_82:
                    operator delete((void *)STACK[0x13F0]);
                    goto LABEL_83;
                  }
LABEL_81:
                  if ((SLOBYTE(STACK[0x1407]) & 0x80000000) == 0) {
                    goto LABEL_83;
                  }
                  goto LABEL_82;
                }
LABEL_68:
                operator delete((void *)STACK[0x13A8]);
                goto LABEL_69;
              }
LABEL_62:
              operator delete((void *)STACK[0x1348]);
              goto LABEL_63;
            }
LABEL_61:
            if ((SLOBYTE(STACK[0x135F]) & 0x80000000) == 0) {
              goto LABEL_63;
            }
            goto LABEL_62;
          }
LABEL_40:
          operator delete((void *)STACK[0x2D0]);
          goto LABEL_41;
        }
LABEL_39:
        if ((SLOBYTE(STACK[0x2E7]) & 0x80000000) == 0) {
          goto LABEL_41;
        }
        goto LABEL_40;
      }
LABEL_27:
      operator delete((void *)STACK[0x12B0]);
      goto LABEL_28;
    }
LABEL_21:
    operator delete((void *)STACK[0x1250]);
    goto LABEL_22;
  }
LABEL_20:
  if ((SLOBYTE(STACK[0x1267]) & 0x80000000) == 0) {
    goto LABEL_22;
  }
  goto LABEL_21;
}

void sub_1923ACC4C()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  v407[2] = *(void **)MEMORY[0x1E4F143B8];
  v314[2] = xmmword_192DB8F48;
  v314[3] = unk_192DB8F58;
  v314[4] = xmmword_192DB8F68;
  v314[5] = unk_192DB8F78;
  v314[0] = xmmword_192DB8F28;
  uint64_t v261 = 0;
  v314[1] = unk_192DB8F38;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v260, (unsigned int *)v314, 6);
  v313[2] = xmmword_192DB8FA8;
  v313[3] = unk_192DB8FB8;
  v313[4] = xmmword_192DB8FC8;
  v313[5] = unk_192DB8FD8;
  v313[0] = xmmword_192DB8F88;
  v313[1] = unk_192DB8F98;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v259, (unsigned int *)v313, 6);
  sub_1923B13F0(&v262, &v261, (uint64_t)v260, (uint64_t)v259);
  uint64_t v315 = v262;
  long long v316 = v263;
  v317[0] = v264;
  v317[1] = v265;
  if (v265)
  {
    v264[2] = v317;
    std::string v263 = &v264;
    long long v264 = 0;
    uint64_t v265 = 0;
  }
  else
  {
    long long v316 = v317;
  }
  v318 = v266;
  v319[0] = v267;
  v319[1] = v268;
  if (v268)
  {
    v267[2] = v319;
    long long v266 = &v267;
    uint64_t v267 = 0;
    v268 = 0;
  }
  else
  {
    v318 = v319;
  }
  v312[2] = xmmword_192DB9008;
  v312[3] = unk_192DB9018;
  v312[4] = xmmword_192DB9028;
  v312[5] = unk_192DB9038;
  v312[0] = xmmword_192DB8FE8;
  uint64_t v251 = 24576;
  v312[1] = unk_192DB8FF8;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v250, (unsigned int *)v312, 6);
  v311[2] = xmmword_192DB9128;
  v311[3] = unk_192DB9138;
  v311[4] = xmmword_192DB9148;
  v311[5] = unk_192DB9158;
  v311[0] = xmmword_192DB9108;
  v311[1] = unk_192DB9118;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v249, (unsigned int *)v311, 6);
  sub_1923B13F0((uint64_t *)&v252, &v251, (uint64_t)v250, (uint64_t)v249);
  v319[2] = v252;
  std::string v320 = v253;
  v321[0] = v254;
  v321[1] = v255;
  if (v255)
  {
    v254[2] = v321;
    v253 = &v254;
    uint64_t v254 = 0;
    uint64_t v255 = 0;
  }
  else
  {
    std::string v320 = v321;
  }
  uint64_t v322 = v256;
  v323[0] = v257;
  v323[1] = v258;
  if (v258)
  {
    v257[2] = v323;
    std::string v256 = &v257;
    long long v257 = 0;
    uint64_t v258 = 0;
  }
  else
  {
    uint64_t v322 = v323;
  }
  v310[2] = xmmword_192DB9068;
  v310[3] = unk_192DB9078;
  v310[4] = xmmword_192DB9088;
  v310[5] = unk_192DB9098;
  v310[0] = xmmword_192DB9048;
  uint64_t v241 = 24577;
  v310[1] = unk_192DB9058;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v240, (unsigned int *)v310, 6);
  v309[2] = xmmword_192DB9128;
  v309[3] = unk_192DB9138;
  v309[4] = xmmword_192DB9148;
  v309[5] = unk_192DB9158;
  v309[0] = xmmword_192DB9108;
  v309[1] = unk_192DB9118;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v239, (unsigned int *)v309, 6);
  sub_1923B13F0((uint64_t *)&v242, &v241, (uint64_t)v240, (uint64_t)v239);
  v323[2] = v242;
  uint64_t v324 = v243;
  v325[0] = v244;
  v325[1] = v245;
  if (v245)
  {
    v244[2] = v325;
    v243 = &v244;
    v244 = 0;
    v245 = 0;
  }
  else
  {
    uint64_t v324 = v325;
  }
  long long v326 = v246;
  v327[0] = v247;
  v327[1] = v248;
  if (v248)
  {
    v247[2] = v327;
    v246 = &v247;
    v247 = 0;
    v248 = 0;
  }
  else
  {
    long long v326 = v327;
  }
  v308[2] = xmmword_192DB90C8;
  v308[3] = unk_192DB90D8;
  v308[4] = xmmword_192DB90E8;
  v308[5] = unk_192DB90F8;
  v308[0] = xmmword_192DB90A8;
  uint64_t v231 = 24578;
  v308[1] = unk_192DB90B8;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v230, (unsigned int *)v308, 6);
  v307[2] = xmmword_192DB9128;
  v307[3] = unk_192DB9138;
  v307[4] = xmmword_192DB9148;
  v307[5] = unk_192DB9158;
  v307[0] = xmmword_192DB9108;
  v307[1] = unk_192DB9118;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v229, (unsigned int *)v307, 6);
  sub_1923B13F0((uint64_t *)&v232, &v231, (uint64_t)v230, (uint64_t)v229);
  v327[2] = v232;
  long long v328 = v233;
  v329[0] = v234;
  v329[1] = v235;
  if (v235)
  {
    v234[2] = v329;
    v233 = &v234;
    v234 = 0;
    v235 = 0;
  }
  else
  {
    long long v328 = v329;
  }
  long long v330 = v236;
  v331[0] = v237;
  v331[1] = v238;
  if (v238)
  {
    v237[2] = v331;
    v236 = &v237;
    v237 = 0;
    v238 = 0;
  }
  else
  {
    long long v330 = v331;
  }
  v306[2] = xmmword_192DB9188;
  v306[3] = unk_192DB9198;
  v306[4] = xmmword_192DB91A8;
  v306[5] = unk_192DB91B8;
  v306[0] = xmmword_192DB9168;
  uint64_t v221 = 24608;
  v306[1] = unk_192DB9178;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v220, (unsigned int *)v306, 6);
  v305[2] = xmmword_192DB96C8;
  v305[3] = unk_192DB96D8;
  v305[4] = xmmword_192DB96E8;
  v305[5] = unk_192DB96F8;
  v305[0] = xmmword_192DB96A8;
  v305[1] = unk_192DB96B8;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v219, (unsigned int *)v305, 6);
  sub_1923B13F0((uint64_t *)&v222, &v221, (uint64_t)v220, (uint64_t)v219);
  v331[2] = v222;
  v332 = v223;
  v333[0] = v224;
  v333[1] = v225;
  if (v225)
  {
    v224[2] = v333;
    v223 = &v224;
    v224 = 0;
    v225 = 0;
  }
  else
  {
    v332 = v333;
  }
  std::string v334 = v226;
  v335[0] = v227;
  v335[1] = v228;
  if (v228)
  {
    v227[2] = v335;
    v226 = &v227;
    v227 = 0;
    v228 = 0;
  }
  else
  {
    std::string v334 = v335;
  }
  v304[2] = xmmword_192DB91E8;
  v304[3] = unk_192DB91F8;
  v304[4] = xmmword_192DB9208;
  v304[5] = unk_192DB9218;
  v304[0] = xmmword_192DB91C8;
  uint64_t v211 = 24609;
  v304[1] = unk_192DB91D8;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v210, (unsigned int *)v304, 6);
  v303[2] = xmmword_192DB96C8;
  v303[3] = unk_192DB96D8;
  v303[4] = xmmword_192DB96E8;
  v303[5] = unk_192DB96F8;
  v303[0] = xmmword_192DB96A8;
  v303[1] = unk_192DB96B8;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v209, (unsigned int *)v303, 6);
  sub_1923B13F0((uint64_t *)&v212, &v211, (uint64_t)v210, (uint64_t)v209);
  v335[2] = v212;
  uint64_t v336 = v213;
  v337[0] = v214;
  v337[1] = v215;
  if (v215)
  {
    v214[2] = v337;
    v213 = &v214;
    v214 = 0;
    v215 = 0;
  }
  else
  {
    uint64_t v336 = v337;
  }
  uint64_t v338 = v216;
  v339[0] = v217;
  v339[1] = v218;
  if (v218)
  {
    v217[2] = v339;
    v216 = &v217;
    v217 = 0;
    v218 = 0;
  }
  else
  {
    uint64_t v338 = v339;
  }
  v302[2] = xmmword_192DB9248;
  v302[3] = unk_192DB9258;
  v302[4] = xmmword_192DB9268;
  v302[5] = unk_192DB9278;
  v302[0] = xmmword_192DB9228;
  uint64_t v201 = 24610;
  v302[1] = unk_192DB9238;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v200, (unsigned int *)v302, 6);
  v301[2] = xmmword_192DB96C8;
  v301[3] = unk_192DB96D8;
  v301[4] = xmmword_192DB96E8;
  v301[5] = unk_192DB96F8;
  v301[0] = xmmword_192DB96A8;
  v301[1] = unk_192DB96B8;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v199, (unsigned int *)v301, 6);
  sub_1923B13F0((uint64_t *)&v202, &v201, (uint64_t)v200, (uint64_t)v199);
  v339[2] = v202;
  long long v340 = v203;
  v341[0] = v204;
  v341[1] = v205;
  if (v205)
  {
    v204[2] = v341;
    v203 = &v204;
    v204 = 0;
    v205 = 0;
  }
  else
  {
    long long v340 = v341;
  }
  long long v342 = v206;
  v343[0] = v207;
  v343[1] = v208;
  if (v208)
  {
    v207[2] = v343;
    v206 = &v207;
    v207 = 0;
    v208 = 0;
  }
  else
  {
    long long v342 = v343;
  }
  uint64_t v191 = 24624;
  v300[2] = xmmword_192DB92A8;
  v300[3] = unk_192DB92B8;
  v300[4] = xmmword_192DB92C8;
  v300[5] = unk_192DB92D8;
  v300[0] = xmmword_192DB9288;
  v300[1] = unk_192DB9298;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v190, (unsigned int *)v300, 6);
  v299[2] = xmmword_192DB96C8;
  v299[3] = unk_192DB96D8;
  v299[4] = xmmword_192DB96E8;
  v299[5] = unk_192DB96F8;
  v299[0] = xmmword_192DB96A8;
  v299[1] = unk_192DB96B8;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v189, (unsigned int *)v299, 6);
  sub_1923B13F0((uint64_t *)&v192, &v191, (uint64_t)v190, (uint64_t)v189);
  v343[2] = v192;
  long long v344 = v193;
  v345[0] = v194;
  v345[1] = v195;
  if (v195)
  {
    v194[2] = v345;
    v193 = &v194;
    v194 = 0;
    v195 = 0;
  }
  else
  {
    long long v344 = v345;
  }
  v346 = v196;
  v347[0] = v197;
  v347[1] = v198;
  if (v198)
  {
    v197[2] = v347;
    v196 = &v197;
    v197 = 0;
    v198 = 0;
  }
  else
  {
    v346 = v347;
  }
  uint64_t v181 = 24625;
  v298[2] = xmmword_192DB9308;
  v298[3] = unk_192DB9318;
  v298[4] = xmmword_192DB9328;
  v298[5] = unk_192DB9338;
  v298[0] = xmmword_192DB92E8;
  v298[1] = unk_192DB92F8;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v180, (unsigned int *)v298, 6);
  v297[2] = xmmword_192DB96C8;
  v297[3] = unk_192DB96D8;
  v297[4] = xmmword_192DB96E8;
  v297[5] = unk_192DB96F8;
  v297[0] = xmmword_192DB96A8;
  v297[1] = unk_192DB96B8;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v179, (unsigned int *)v297, 6);
  sub_1923B13F0((uint64_t *)&v182, &v181, (uint64_t)v180, (uint64_t)v179);
  v347[2] = v182;
  std::string v348 = v183;
  v349[0] = v184;
  v349[1] = v185;
  if (v185)
  {
    v184[2] = v349;
    v183 = &v184;
    v184 = 0;
    v185 = 0;
  }
  else
  {
    std::string v348 = v349;
  }
  uint64_t v350 = v186;
  v351[0] = v187;
  v351[1] = v188;
  if (v188)
  {
    v187[2] = v351;
    v186 = &v187;
    v187 = 0;
    v188 = 0;
  }
  else
  {
    uint64_t v350 = v351;
  }
  uint64_t v171 = 24626;
  v296[2] = xmmword_192DB9308;
  v296[3] = unk_192DB9318;
  v296[4] = xmmword_192DB9328;
  v296[5] = unk_192DB9338;
  v296[0] = xmmword_192DB92E8;
  v296[1] = unk_192DB92F8;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v170, (unsigned int *)v296, 6);
  v295[2] = xmmword_192DB96C8;
  v295[3] = unk_192DB96D8;
  v295[4] = xmmword_192DB96E8;
  v295[5] = unk_192DB96F8;
  v295[0] = xmmword_192DB96A8;
  v295[1] = unk_192DB96B8;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v169, (unsigned int *)v295, 6);
  sub_1923B13F0((uint64_t *)&v172, &v171, (uint64_t)v170, (uint64_t)v169);
  v351[2] = v172;
  uint64_t v352 = v173;
  v353[0] = v174;
  v353[1] = v175;
  if (v175)
  {
    v174[2] = v353;
    uint64_t v173 = &v174;
    v174 = 0;
    v175 = 0;
  }
  else
  {
    uint64_t v352 = v353;
  }
  long long v354 = v176;
  v355[0] = v177;
  v355[1] = v178;
  if (v178)
  {
    v177[2] = v355;
    v176 = &v177;
    v177 = 0;
    v178 = 0;
  }
  else
  {
    long long v354 = v355;
  }
  uint64_t v161 = 24628;
  v294[2] = xmmword_192DB9308;
  v294[3] = unk_192DB9318;
  v294[4] = xmmword_192DB9328;
  v294[5] = unk_192DB9338;
  v294[0] = xmmword_192DB92E8;
  v294[1] = unk_192DB92F8;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v160, (unsigned int *)v294, 6);
  v293[2] = xmmword_192DB96C8;
  v293[3] = unk_192DB96D8;
  v293[4] = xmmword_192DB96E8;
  v293[5] = unk_192DB96F8;
  v293[0] = xmmword_192DB96A8;
  v293[1] = unk_192DB96B8;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v159, (unsigned int *)v293, 6);
  sub_1923B13F0((uint64_t *)&v162, &v161, (uint64_t)v160, (uint64_t)v159);
  v355[2] = v162;
  char v356 = v163;
  v357[0] = v164;
  v357[1] = v165;
  if (v165)
  {
    v164[2] = v357;
    uint64_t v163 = &v164;
    v164 = 0;
    v165 = 0;
  }
  else
  {
    char v356 = v357;
  }
  std::string v358 = v166;
  v359[0] = v167;
  v359[1] = v168;
  if (v168)
  {
    v167[2] = v359;
    uint64_t v166 = &v167;
    unint64_t v167 = 0;
    v168 = 0;
  }
  else
  {
    std::string v358 = v359;
  }
  uint64_t v151 = 33074;
  v292[2] = xmmword_192DB9668;
  v292[3] = unk_192DB9678;
  v292[4] = xmmword_192DB9688;
  v292[5] = unk_192DB9698;
  v292[0] = xmmword_192DB9648;
  v292[1] = unk_192DB9658;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v150, (unsigned int *)v292, 6);
  v291[2] = xmmword_192DB96C8;
  v291[3] = unk_192DB96D8;
  v291[4] = xmmword_192DB96E8;
  v291[5] = unk_192DB96F8;
  v291[0] = xmmword_192DB96A8;
  v291[1] = unk_192DB96B8;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v149, (unsigned int *)v291, 6);
  sub_1923B13F0((uint64_t *)&v152, &v151, (uint64_t)v150, (uint64_t)v149);
  v359[2] = v152;
  v360 = v153;
  v361[0] = v154;
  v361[1] = v155;
  if (v155)
  {
    v154[2] = v361;
    uint64_t v153 = &v154;
    std::string v154 = 0;
    size_t v155 = 0;
  }
  else
  {
    v360 = v361;
  }
  std::string v362 = v156;
  v363[0] = v157;
  v363[1] = v158;
  if (v158)
  {
    v157[2] = v363;
    size_t v156 = &v157;
    size_t v157 = 0;
    v158 = 0;
  }
  else
  {
    std::string v362 = v363;
  }
  uint64_t v141 = 24640;
  v290[2] = xmmword_192DB92A8;
  v290[3] = unk_192DB92B8;
  v290[4] = xmmword_192DB92C8;
  v290[5] = unk_192DB92D8;
  v290[0] = xmmword_192DB9288;
  v290[1] = unk_192DB9298;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v140, (unsigned int *)v290, 6);
  v289[2] = xmmword_192DB96C8;
  v289[3] = unk_192DB96D8;
  v289[4] = xmmword_192DB96E8;
  v289[5] = unk_192DB96F8;
  v289[0] = xmmword_192DB96A8;
  v289[1] = unk_192DB96B8;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v139, (unsigned int *)v289, 6);
  sub_1923B13F0((uint64_t *)&v142, &v141, (uint64_t)v140, (uint64_t)v139);
  v363[2] = v142;
  long long v364 = v143;
  v365[0] = v144;
  v365[1] = v145;
  if (v145)
  {
    v144[2] = v365;
    uint64_t v143 = &v144;
    v144 = 0;
    BOOL v145 = 0;
  }
  else
  {
    long long v364 = v365;
  }
  long long v366 = v146;
  v367[0] = v147;
  v367[1] = v148;
  if (v148)
  {
    v147[2] = v367;
    unint64_t v146 = &v147;
    unint64_t v147 = 0;
    long long v148 = 0;
  }
  else
  {
    long long v366 = v367;
  }
  uint64_t v131 = 24641;
  v288[2] = xmmword_192DB9308;
  v288[3] = unk_192DB9318;
  v288[4] = xmmword_192DB9328;
  v288[5] = unk_192DB9338;
  v288[0] = xmmword_192DB92E8;
  v288[1] = unk_192DB92F8;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v130, (unsigned int *)v288, 6);
  v287[2] = xmmword_192DB96C8;
  v287[3] = unk_192DB96D8;
  v287[4] = xmmword_192DB96E8;
  v287[5] = unk_192DB96F8;
  v287[0] = xmmword_192DB96A8;
  v287[1] = unk_192DB96B8;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v129, (unsigned int *)v287, 6);
  sub_1923B13F0((uint64_t *)&v132, &v131, (uint64_t)v130, (uint64_t)v129);
  v367[2] = v132;
  v368 = v133;
  v369[0] = v134;
  v369[1] = v135;
  if (v135)
  {
    v134[2] = v369;
    uint64_t v133 = &v134;
    id v134 = 0;
    unint64_t v135 = 0;
  }
  else
  {
    v368 = v369;
  }
  std::string v370 = v136;
  v371[0] = v137;
  v371[1] = v138;
  if (v138)
  {
    v137[2] = v371;
    uint64_t v136 = &v137;
    v137 = 0;
    char v138 = 0;
  }
  else
  {
    std::string v370 = v371;
  }
  v286[2] = xmmword_192DB9368;
  v286[3] = unk_192DB9378;
  v286[4] = xmmword_192DB9388;
  v286[5] = unk_192DB9398;
  v286[0] = xmmword_192DB9348;
  uint64_t v121 = 32816;
  v286[1] = unk_192DB9358;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v120, (unsigned int *)v286, 6);
  v285[2] = xmmword_192DB9428;
  v285[3] = unk_192DB9438;
  v285[4] = xmmword_192DB9448;
  v285[5] = unk_192DB9458;
  v285[0] = xmmword_192DB9408;
  v285[1] = unk_192DB9418;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v119, (unsigned int *)v285, 6);
  sub_1923B13F0((uint64_t *)&v122, &v121, (uint64_t)v120, (uint64_t)v119);
  v371[2] = v122;
  uint64_t v372 = v123;
  v373[0] = v124;
  v373[1] = v125;
  if (v125)
  {
    v124[2] = v373;
    long long v123 = &v124;
    v124 = 0;
    uint64_t v125 = 0;
  }
  else
  {
    uint64_t v372 = v373;
  }
  uint64_t v374 = v126;
  v375[0] = v127;
  v375[1] = v128;
  if (v128)
  {
    v127[2] = v375;
    unint64_t v126 = &v127;
    v127 = 0;
    long long v128 = 0;
  }
  else
  {
    uint64_t v374 = v375;
  }
  v284[2] = xmmword_192DB93C8;
  v284[3] = unk_192DB93D8;
  v284[4] = xmmword_192DB93E8;
  v284[5] = unk_192DB93F8;
  v284[0] = xmmword_192DB93A8;
  uint64_t v111 = 33025;
  v284[1] = unk_192DB93B8;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v110, (unsigned int *)v284, 6);
  v283[2] = xmmword_192DB9428;
  v283[3] = unk_192DB9438;
  v283[4] = xmmword_192DB9448;
  v283[5] = unk_192DB9458;
  v283[0] = xmmword_192DB9408;
  v283[1] = unk_192DB9418;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v109, (unsigned int *)v283, 6);
  sub_1923B13F0((uint64_t *)&v112, &v111, (uint64_t)v110, (uint64_t)v109);
  v375[2] = v112;
  long long v376 = v113;
  v377[0] = v114;
  v377[1] = v115;
  if (v115)
  {
    v114[2] = v377;
    long long v113 = &v114;
    v114 = 0;
    long long v115 = 0;
  }
  else
  {
    long long v376 = v377;
  }
  long long v378 = v116;
  v379[0] = v117;
  v379[1] = v118;
  if (v118)
  {
    v117[2] = v379;
    unint64_t v116 = &v117;
    long long v117 = 0;
    v118 = 0;
  }
  else
  {
    long long v378 = v379;
  }
  v282[2] = xmmword_192DB9488;
  v282[3] = unk_192DB9498;
  v282[4] = xmmword_192DB94A8;
  v282[5] = unk_192DB94B8;
  v282[0] = xmmword_192DB9468;
  uint64_t v101 = 33027;
  v282[1] = unk_192DB9478;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v100, (unsigned int *)v282, 6);
  v281[2] = xmmword_192DB96C8;
  v281[3] = unk_192DB96D8;
  v281[4] = xmmword_192DB96E8;
  v281[5] = unk_192DB96F8;
  v281[0] = xmmword_192DB96A8;
  v281[1] = unk_192DB96B8;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v99, (unsigned int *)v281, 6);
  sub_1923B13F0((uint64_t *)&v102, &v101, (uint64_t)v100, (uint64_t)v99);
  v379[2] = v102;
  long long v380 = v103;
  v381[0] = v104;
  v381[1] = v105;
  if (v105)
  {
    v104[2] = v381;
    long long v103 = &v104;
    v104 = 0;
    int v105 = 0;
  }
  else
  {
    long long v380 = v381;
  }
  v382 = v106;
  v383[0] = v107;
  v383[1] = v108;
  if (v108)
  {
    v107[2] = v383;
    long long v106 = &v107;
    v107 = 0;
    v108 = 0;
  }
  else
  {
    v382 = v383;
  }
  v280[2] = xmmword_192DB94E8;
  v280[3] = unk_192DB94F8;
  v280[4] = xmmword_192DB9508;
  v280[5] = unk_192DB9518;
  v280[0] = xmmword_192DB94C8;
  uint64_t v91 = 33040;
  v280[1] = unk_192DB94D8;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v90, (unsigned int *)v280, 6);
  v279[2] = xmmword_192DB9548;
  v279[3] = unk_192DB9558;
  v279[4] = xmmword_192DB9568;
  v279[5] = unk_192DB9578;
  v279[0] = xmmword_192DB9528;
  v279[1] = unk_192DB9538;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v89, (unsigned int *)v279, 6);
  sub_1923B13F0((uint64_t *)&v92, &v91, (uint64_t)v90, (uint64_t)v89);
  v383[2] = v92;
  std::string v384 = v93;
  v385[0] = v94;
  v385[1] = v95;
  if (v95)
  {
    v94[2] = v385;
    size_t v93 = &v94;
    long long v94 = 0;
    uint64_t v95 = 0;
  }
  else
  {
    std::string v384 = v385;
  }
  uint64_t v386 = v96;
  v387[0] = v97;
  v387[1] = v98;
  if (v98)
  {
    v97[2] = v387;
    uint64_t v96 = &v97;
    long long v97 = 0;
    v98 = 0;
  }
  else
  {
    uint64_t v386 = v387;
  }
  uint64_t v81 = 33042;
  v278[2] = xmmword_192DB95A8;
  v278[3] = unk_192DB95B8;
  v278[4] = xmmword_192DB95C8;
  v278[5] = unk_192DB95D8;
  v278[0] = xmmword_192DB9588;
  v278[1] = unk_192DB9598;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v80, (unsigned int *)v278, 6);
  v277[2] = xmmword_192DB96C8;
  v277[3] = unk_192DB96D8;
  v277[4] = xmmword_192DB96E8;
  v277[5] = unk_192DB96F8;
  v277[0] = xmmword_192DB96A8;
  v277[1] = unk_192DB96B8;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v79, (unsigned int *)v277, 6);
  sub_1923B13F0((uint64_t *)&v82, &v81, (uint64_t)v80, (uint64_t)v79);
  v387[2] = v82;
  uint64_t v388 = v83;
  v389[0] = v84;
  v389[1] = v85;
  if (v85)
  {
    v84[2] = v389;
    uint64_t v83 = &v84;
    v84 = 0;
    long long v85 = 0;
  }
  else
  {
    uint64_t v388 = v389;
  }
  long long v390 = v86;
  v391[0] = v87;
  v391[1] = v88;
  if (v88)
  {
    v87[2] = v391;
    uint64_t v86 = &v87;
    long long v87 = 0;
    long long v88 = 0;
  }
  else
  {
    long long v390 = v391;
  }
  uint64_t v71 = 33056;
  v276[2] = xmmword_192DB9608;
  v276[3] = unk_192DB9618;
  v276[4] = xmmword_192DB9628;
  v276[5] = unk_192DB9638;
  v276[0] = xmmword_192DB95E8;
  v276[1] = unk_192DB95F8;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v70, (unsigned int *)v276, 6);
  v275[2] = xmmword_192DB9788;
  v275[3] = unk_192DB9798;
  v275[4] = xmmword_192DB97A8;
  v275[5] = unk_192DB97B8;
  v275[0] = xmmword_192DB9768;
  v275[1] = unk_192DB9778;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v69, (unsigned int *)v275, 6);
  sub_1923B13F0((uint64_t *)&v72, &v71, (uint64_t)v70, (uint64_t)v69);
  v391[2] = v72;
  long long v392 = v73;
  v393[0] = v74;
  v393[1] = v75;
  if (v75)
  {
    v74[2] = v393;
    unint64_t v73 = &v74;
    long long v74 = 0;
    uint64_t v75 = 0;
  }
  else
  {
    long long v392 = v393;
  }
  long long v394 = v76;
  v395[0] = v77;
  v395[1] = v78;
  if (v78)
  {
    v77[2] = v395;
    long long v76 = &v77;
    uint64_t v77 = 0;
    v78 = 0;
  }
  else
  {
    long long v394 = v395;
  }
  uint64_t v61 = 33058;
  v274[2] = xmmword_192DB9668;
  v274[3] = unk_192DB9678;
  v274[4] = xmmword_192DB9688;
  v274[5] = unk_192DB9698;
  v274[0] = xmmword_192DB9648;
  v274[1] = unk_192DB9658;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v60, (unsigned int *)v274, 6);
  v273[2] = xmmword_192DB96C8;
  v273[3] = unk_192DB96D8;
  v273[4] = xmmword_192DB96E8;
  v273[5] = unk_192DB96F8;
  v273[0] = xmmword_192DB96A8;
  v273[1] = unk_192DB96B8;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v59, (unsigned int *)v273, 6);
  sub_1923B13F0((uint64_t *)&v62, &v61, (uint64_t)v60, (uint64_t)v59);
  v395[2] = v62;
  v396 = v63;
  v397[0] = v64;
  v397[1] = v65;
  if (v65)
  {
    v64[2] = v397;
    int v63 = &v64;
    uint64_t v64 = 0;
    long long v65 = 0;
  }
  else
  {
    v396 = v397;
  }
  std::string v398 = v66;
  v399[0] = v67;
  v399[1] = v68;
  if (v68)
  {
    v67[2] = v399;
    uint64_t v66 = &v67;
    v67 = 0;
    long long v68 = 0;
  }
  else
  {
    std::string v398 = v399;
  }
  uint64_t v51 = 33072;
  v272[2] = xmmword_192DB9728;
  v272[3] = unk_192DB9738;
  v272[4] = xmmword_192DB9748;
  v272[5] = unk_192DB9758;
  v272[0] = xmmword_192DB9708;
  v272[1] = unk_192DB9718;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v50, (unsigned int *)v272, 6);
  v271[2] = xmmword_192DB9788;
  v271[3] = unk_192DB9798;
  v271[4] = xmmword_192DB97A8;
  v271[5] = unk_192DB97B8;
  v271[0] = xmmword_192DB9768;
  v271[1] = unk_192DB9778;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v49, (unsigned int *)v271, 6);
  sub_1923B13F0((uint64_t *)&v52, &v51, (uint64_t)v50, (uint64_t)v49);
  v399[2] = v52;
  uint64_t v400 = v53;
  v401[0] = v54;
  v401[1] = v55;
  if (v55)
  {
    v54[2] = v401;
    long long v53 = &v54;
    char v54 = 0;
    uint64_t v55 = 0;
  }
  else
  {
    uint64_t v400 = v401;
  }
  uint64_t v402 = v56;
  v403[0] = v57;
  v403[1] = v58;
  if (v58)
  {
    v57[2] = v403;
    long long v56 = &v57;
    unint64_t v57 = 0;
    std::string v58 = 0;
  }
  else
  {
    uint64_t v402 = v403;
  }
  uint64_t v41 = 33088;
  v270[2] = xmmword_192DB9728;
  v270[3] = unk_192DB9738;
  v270[4] = xmmword_192DB9748;
  v270[5] = unk_192DB9758;
  v270[0] = xmmword_192DB9708;
  v270[1] = unk_192DB9718;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v40, (unsigned int *)v270, 6);
  v269[2] = xmmword_192DB9788;
  v269[3] = unk_192DB9798;
  v269[4] = xmmword_192DB97A8;
  v269[5] = unk_192DB97B8;
  v269[0] = xmmword_192DB9768;
  v269[1] = unk_192DB9778;
  std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](v39, (unsigned int *)v269, 6);
  unint64_t v1 = (unint64_t)&v42;
  sub_1923B13F0((uint64_t *)&v42, &v41, (uint64_t)v40, (uint64_t)v39);
  v403[2] = v42;
  long long v404 = v43;
  v405[0] = v44;
  v405[1] = v45;
  if (v45)
  {
    v44[2] = v405;
    long long v43 = &v44;
    long long v44 = 0;
    uint64_t v45 = 0;
  }
  else
  {
    long long v404 = v405;
  }
  long long v406 = v46;
  v407[0] = v47;
  v407[1] = v48;
  if (v48)
  {
    v47[2] = v407;
    uint64_t v46 = &v47;
    long long v47 = 0;
    v48 = 0;
  }
  else
  {
    long long v406 = v407;
  }
  uint64_t v2 = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  long long v38 = (uint64_t *)(v0 + 16);
  *(_OWORD *)uint64_t v0 = 0u;
  *(_DWORD *)(v0 + 32) = 1065353216;
  do
  {
    unint64_t v3 = *(&v315 + 7 * v2);
    unint64_t v4 = *(void *)(v0 + 8);
    if (v4)
    {
      uint8x8_t v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
      v5.i16[0] = vaddlv_u8(v5);
      if (v5.u32[0] > 1uLL)
      {
        unint64_t v1 = *(&v315 + 7 * v2);
        if (v4 <= v3) {
          unint64_t v1 = v3 % v4;
        }
      }
      else
      {
        unint64_t v1 = (v4 - 1) & v3;
      }
      size_t v6 = *(void **)(*(void *)v0 + 8 * v1);
      if (v6)
      {
        long long v7 = (void *)*v6;
        if (v7)
        {
          if (v5.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v9 = v7[1];
              if (v9 == v3)
              {
                if (v7[2] == v3) {
                  goto LABEL_233;
                }
              }
              else if ((v9 & (v4 - 1)) != v1)
              {
                goto LABEL_160;
              }
              long long v7 = (void *)*v7;
              if (!v7) {
                goto LABEL_160;
              }
            }
          }
          do
          {
            unint64_t v8 = v7[1];
            if (v8 == v3)
            {
              if (v7[2] == v3) {
                goto LABEL_233;
              }
            }
            else
            {
              if (v8 >= v4) {
                v8 %= v4;
              }
              if (v8 != v1) {
                break;
              }
            }
            long long v7 = (void *)*v7;
          }
          while (v7);
        }
      }
    }
LABEL_160:
    uint64_t v10 = (uint64_t *)operator new(0x48uLL);
    *uint64_t v10 = 0;
    v10[1] = v3;
    uint64_t v10[2] = v3;
    v10[4] = 0;
    v10[3] = (uint64_t)(v10 + 4);
    v10[5] = 0;
    std::map<Espresso::AOT::BackendIdentifier,double>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__tree_node<std::__value_type<Espresso::AOT::BackendIdentifier,double>,void *> *,long>>>(v10 + 3, (unsigned int *)*(&v315 + 7 * v2 + 1), (unsigned int *)&v317[7 * v2]);
    v10[7] = 0;
    v10[8] = 0;
    v10[6] = (uint64_t)(v10 + 7);
    std::map<Espresso::AOT::BackendIdentifier,double>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__tree_node<std::__value_type<Espresso::AOT::BackendIdentifier,double>,void *> *,long>>>(v10 + 6, (unsigned int *)v319[7 * v2 - 1], (unsigned int *)&v319[7 * v2]);
    float v11 = (float)(unint64_t)(*(void *)(v0 + 24) + 1);
    float v12 = *(float *)(v0 + 32);
    if (!v4 || (float)(v12 * (float)v4) < v11)
    {
      BOOL v15 = (v4 & (v4 - 1)) == 0;
      if (v4 < 3) {
        BOOL v15 = 0;
      }
      unint64_t v16 = (2 * v4) | !v15;
      unint64_t v17 = vcvtps_u32_f32(v11 / v12);
      if (v16 <= v17) {
        size_t prime = v17;
      }
      else {
        size_t prime = v16;
      }
      if (prime == 1)
      {
        size_t prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        size_t prime = std::__next_prime(prime);
      }
      unint64_t v4 = *(void *)(v0 + 8);
      if (prime <= v4)
      {
        if (prime >= v4) {
          goto LABEL_210;
        }
        unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(v0 + 24) / *(float *)(v0 + 32));
        if (v4 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
        {
          unint64_t v29 = std::__next_prime(v29);
        }
        else
        {
          uint64_t v31 = 1 << -(char)__clz(v29 - 1);
          if (v29 >= 2) {
            unint64_t v29 = v31;
          }
        }
        if (prime <= v29) {
          size_t prime = v29;
        }
        if (prime >= v4)
        {
          unint64_t v4 = *(void *)(v0 + 8);
          uint64_t v34 = v4 - 1;
          if ((v4 & (v4 - 1)) == 0) {
            goto LABEL_211;
          }
LABEL_223:
          if (v4 <= v3)
          {
            unint64_t v1 = v3 % v4;
            long long v13 = *(void **)v0;
            int v14 = *(uint64_t **)(*(void *)v0 + 8 * (v3 % v4));
            if (!v14) {
              goto LABEL_212;
            }
          }
          else
          {
            unint64_t v1 = v3;
            long long v13 = *(void **)v0;
            int v14 = *(uint64_t **)(*(void *)v0 + 8 * v3);
            if (!v14) {
              goto LABEL_212;
            }
          }
LABEL_163:
          *uint64_t v10 = *v14;
LABEL_231:
          uint64_t *v14 = (uint64_t)v10;
          goto LABEL_232;
        }
        if (!prime)
        {
          uint64_t v33 = *(void **)v0;
          *(void *)uint64_t v0 = 0;
          if (v33) {
            operator delete(v33);
          }
          unint64_t v4 = 0;
          *(void *)(v0 + 8) = 0;
          uint64_t v34 = -1;
          goto LABEL_211;
        }
      }
      if (prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v19 = operator new(8 * prime);
      long long v20 = *(void **)v0;
      *(void *)uint64_t v0 = v19;
      if (v20) {
        operator delete(v20);
      }
      uint64_t v21 = 0;
      *(void *)(v0 + 8) = prime;
      do
        *(void *)(*(void *)v0 + 8 * v21++) = 0;
      while (prime != v21);
      uint64_t v22 = (void *)*v38;
      if (!*v38)
      {
LABEL_222:
        unint64_t v4 = prime;
        uint64_t v34 = prime - 1;
        if ((prime & (prime - 1)) != 0) {
          goto LABEL_223;
        }
LABEL_211:
        unint64_t v1 = v34 & v3;
        long long v13 = *(void **)v0;
        int v14 = *(uint64_t **)(*(void *)v0 + 8 * (v34 & v3));
        if (!v14) {
          goto LABEL_212;
        }
        goto LABEL_163;
      }
      size_t v23 = v22[1];
      size_t v24 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        size_t v25 = v23 & v24;
        *(void *)(*(void *)v0 + 8 * v25) = v38;
        for (uint64_t i = (void *)*v22; *v22; uint64_t i = (void *)*v22)
        {
          size_t v27 = i[1] & v24;
          if (v27 == v25)
          {
            uint64_t v22 = i;
          }
          else if (*(void *)(*(void *)v0 + 8 * v27))
          {
            *uint64_t v22 = *i;
            uint64_t v28 = 8 * v27;
            void *i = **(void **)(*(void *)v0 + v28);
            **(void **)(*(void *)v0 + v28) = i;
          }
          else
          {
            *(void *)(*(void *)v0 + 8 * v27) = v22;
            uint64_t v22 = i;
            size_t v25 = v27;
          }
        }
        goto LABEL_222;
      }
      if (v23 < prime)
      {
        *(void *)(*(void *)v0 + 8 * v23) = v38;
        long long v32 = (void *)*v22;
        if (*v22) {
          goto LABEL_217;
        }
        goto LABEL_209;
      }
      v23 %= prime;
      *(void *)(*(void *)v0 + 8 * v23) = v38;
      long long v32 = (void *)*v22;
      if (!*v22)
      {
LABEL_209:
        unint64_t v4 = prime;
LABEL_210:
        uint64_t v34 = v4 - 1;
        if ((v4 & (v4 - 1)) != 0) {
          goto LABEL_223;
        }
        goto LABEL_211;
      }
      while (1)
      {
LABEL_217:
        size_t v37 = v32[1];
        if (v37 >= prime) {
          v37 %= prime;
        }
        if (v37 == v23) {
          goto LABEL_216;
        }
        if (*(void *)(*(void *)v0 + 8 * v37))
        {
          *uint64_t v22 = *v32;
          uint64_t v36 = 8 * v37;
          *long long v32 = **(void **)(*(void *)v0 + v36);
          **(void **)(*(void *)v0 + v36) = v32;
          long long v32 = v22;
LABEL_216:
          uint64_t v22 = v32;
          long long v32 = (void *)*v32;
          if (!v32) {
            goto LABEL_222;
          }
        }
        else
        {
          *(void *)(*(void *)v0 + 8 * v37) = v22;
          uint64_t v22 = v32;
          long long v32 = (void *)*v32;
          size_t v23 = v37;
          if (!v32) {
            goto LABEL_222;
          }
        }
      }
    }
    long long v13 = *(void **)v0;
    int v14 = *(uint64_t **)(*(void *)v0 + 8 * v1);
    if (v14) {
      goto LABEL_163;
    }
LABEL_212:
    *uint64_t v10 = *v38;
    *long long v38 = (uint64_t)v10;
    v13[v1] = v38;
    if (*v10)
    {
      unint64_t v35 = *(void *)(*v10 + 8);
      if ((v4 & (v4 - 1)) != 0)
      {
        if (v35 >= v4) {
          v35 %= v4;
        }
      }
      else
      {
        v35 &= v4 - 1;
      }
      int v14 = (uint64_t *)(*(void *)v0 + 8 * v35);
      goto LABEL_231;
    }
LABEL_232:
    ++*(void *)(v0 + 24);
LABEL_233:
    ++v2;
  }
  while (v2 != 23);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v406, v407[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v404, v405[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v402, v403[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v400, v401[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v398, v399[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v396, v397[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v394, v395[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v392, v393[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v390, v391[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v388, v389[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v386, v387[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v384, v385[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v382, v383[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v380, v381[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v378, v379[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v376, v377[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v374, v375[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v372, v373[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v370, v371[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v368, v369[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v366, v367[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v364, v365[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v362, v363[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v360, v361[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v358, v359[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v356, v357[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v354, v355[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v352, v353[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v350, v351[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v348, v349[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v346, v347[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v344, v345[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v342, v343[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v340, v341[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v338, v339[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v336, v337[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v334, v335[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v332, v333[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v330, v331[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v328, v329[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v326, v327[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v324, v325[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v322, v323[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v320, v321[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v318, v319[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v316, v317[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v46, v47);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v43, v44);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v39, v39[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v40, v40[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v56, v57);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v53, v54);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v49, v49[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v50, v50[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v66, v67);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v63, v64);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v59, v59[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v60, v60[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v76, v77);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v73, v74);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v69, v69[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v70, v70[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v86, v87);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v83, v84);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v79, v79[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v80, v80[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v96, v97);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v93, v94);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v89, v89[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v90, v90[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v106, v107);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v103, v104);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v99, v99[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v100, v100[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v116, v117);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v113, v114);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v109, v109[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v110, v110[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v126, v127);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v123, v124);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v119, v119[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v120, v120[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v136, v137);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v133, v134);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v129, v129[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v130, v130[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v146, v147);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v143, v144);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v139, v139[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v140, v140[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v156, v157);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v153, v154);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v149, v149[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v150, v150[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v166, v167);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v163, v164);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v159, v159[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v160, v160[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v176, v177);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v173, v174);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v169, v169[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v170, v170[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v186, v187);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v183, v184);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v179, v179[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v180, v180[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v196, v197);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v193, v194);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v189, v189[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v190, v190[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v206, v207);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v203, v204);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v199, v199[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v200, v200[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v216, v217);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v213, v214);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v209, v209[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v210, v210[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v226, v227);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v223, v224);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v219, v219[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v220, v220[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v236, v237);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v233, v234);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v229, v229[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v230, v230[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v246, v247);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v243, v244);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v239, v239[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v240, v240[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v256, v257);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v253, v254);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v249, v249[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v250, v250[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v266, v267);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v263, v264);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v259, v259[1]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v260, v260[1]);
}

void sub_1923AFA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unint64_t *a25)
{
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x458], (void *)STACK[0x460]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x478], (void *)STACK[0x480]);
  sub_1923B1540((uint64_t)&STACK[0x518]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x4D8], (void *)STACK[0x4E0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x4F8], (void *)STACK[0x500]);
  sub_1923B1540((uint64_t)&STACK[0x598]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x558], (void *)STACK[0x560]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x578], (void *)STACK[0x580]);
  sub_1923B1540((uint64_t)&STACK[0x618]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x5D8], (void *)STACK[0x5E0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x5F8], (void *)STACK[0x600]);
  sub_1923B1540((uint64_t)&STACK[0x698]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x658], (void *)STACK[0x660]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x678], (void *)STACK[0x680]);
  sub_1923B1540((uint64_t)&STACK[0x718]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x6D8], (void *)STACK[0x6E0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x6F8], (void *)STACK[0x700]);
  sub_1923B1540((uint64_t)&STACK[0x798]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x758], (void *)STACK[0x760]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x778], (void *)STACK[0x780]);
  sub_1923B1540((uint64_t)&STACK[0x818]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x7D8], (void *)STACK[0x7E0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x7F8], (void *)STACK[0x800]);
  sub_1923B1540((uint64_t)&STACK[0x898]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x858], (void *)STACK[0x860]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x878], (void *)STACK[0x880]);
  sub_1923B1540((uint64_t)&STACK[0x918]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x8D8], (void *)STACK[0x8E0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x8F8], (void *)STACK[0x900]);
  sub_1923B1540((uint64_t)&STACK[0x998]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x958], (void *)STACK[0x960]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x978], (void *)STACK[0x980]);
  sub_1923B1540((uint64_t)&STACK[0xA18]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x9D8], (void *)STACK[0x9E0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0x9F8], (void *)STACK[0xA00]);
  sub_1923B1540((uint64_t)&STACK[0xA98]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xA58], (void *)STACK[0xA60]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xA78], (void *)STACK[0xA80]);
  sub_1923B1540((uint64_t)&STACK[0xB18]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xAD8], (void *)STACK[0xAE0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xAF8], (void *)STACK[0xB00]);
  sub_1923B1540((uint64_t)&STACK[0xB98]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xB58], (void *)STACK[0xB60]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xB78], (void *)STACK[0xB80]);
  sub_1923B1540((uint64_t)&STACK[0xC18]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xBD8], (void *)STACK[0xBE0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xBF8], (void *)STACK[0xC00]);
  sub_1923B1540((uint64_t)&STACK[0xC98]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xC58], (void *)STACK[0xC60]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xC78], (void *)STACK[0xC80]);
  sub_1923B1540((uint64_t)&STACK[0xD18]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xCD8], (void *)STACK[0xCE0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xCF8], (void *)STACK[0xD00]);
  sub_1923B1540((uint64_t)&STACK[0xD98]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xD58], (void *)STACK[0xD60]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xD78], (void *)STACK[0xD80]);
  sub_1923B1540((uint64_t)&STACK[0xE18]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xDD8], (void *)STACK[0xDE0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xDF8], (void *)STACK[0xE00]);
  sub_1923B1540((uint64_t)&STACK[0xE98]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xE58], (void *)STACK[0xE60]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xE78], (void *)STACK[0xE80]);
  sub_1923B1540((uint64_t)&STACK[0xF18]);
  long long v26 = a25;
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xED8], (void *)STACK[0xEE0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xEF8], (void *)STACK[0xF00]);
  sub_1923B1540((uint64_t)&STACK[0xF98]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xF58], (void *)STACK[0xF60]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&STACK[0xF78], (void *)STACK[0xF80]);
  if (&STACK[0x2110] != a25)
  {
    do
    {
      v26 -= 7;
      sub_1923B1540((uint64_t)v26);
    }
    while (v26 != &STACK[0x2110]);
  }
  _Unwind_Resume(a1);
}

void E5PlatformManagerImpl::~E5PlatformManagerImpl(E5PlatformManagerImpl *this)
{
  E5PlatformManagerImpl::~E5PlatformManagerImpl(this);

  JUMPOUT(0x192FF16B0);
}

{
  void **v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  uint64_t v2 = (void **)*((void *)this + 8);
  if (v2)
  {
    do
    {
      unint64_t v3 = *v2;
      std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)(v2 + 6), v2[7]);
      std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)(v2 + 3), v2[4]);
      operator delete(v2);
      uint64_t v2 = (void **)v3;
    }
    while (v3);
  }
  unint64_t v4 = (void *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4) {
    operator delete(v4);
  }
  uint8x8_t v5 = (void *)*((void *)this + 3);
  if (v5)
  {
    do
    {
      size_t v6 = (void *)*v5;
      sub_1923B1270((E5RT::AsyncEventImpl *)(v5 + 2));
      operator delete(v5);
      uint8x8_t v5 = v6;
    }
    while (v6);
  }
  long long v7 = (void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v7) {
    operator delete(v7);
  }
}

BOOL E5PlatformManagerImpl::IsSupported(uint64_t a1, uint64_t a2)
{
  return sub_1923B1664((void *)(a1 + 8), a2) != 0;
}

void *E5PlatformManagerImpl::PlatformNamesForId(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_1923B1664((void *)(a1 + 8), a2);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid platform id");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return v2 + 10;
}

void sub_1923B0354(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *E5PlatformManagerImpl::PlatformIdsForFamilyName@<X0>(void *result@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  for (uint64_t i = (unsigned __int8 *)result[3]; i; uint64_t i = *(unsigned __int8 **)i)
  {
    if ((char)i[55] < 0)
    {
      if (*((void *)i + 5))
      {
LABEL_8:
        uint64_t result = (void *)sub_1923B17A0(i + 32, a2);
        if (result) {
          uint64_t result = std::__hash_table<E5Common::PlatformIdentifier,std::hash<E5Common::PlatformIdentifier>,std::equal_to<E5Common::PlatformIdentifier>,std::allocator<E5Common::PlatformIdentifier>>::__emplace_unique_key_args<E5Common::PlatformIdentifier,E5Common::PlatformIdentifier const&>(a3, (uint64_t)(i + 16), (_OWORD *)i + 1);
        }
      }
    }
    else if (i[55])
    {
      goto LABEL_8;
    }
  }
  return result;
}

void sub_1923B03F8(_Unwind_Exception *a1)
{
  std::unordered_set<E5Common::PlatformIdentifier>::~unordered_set[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void E5PlatformManagerImpl::ParsePlatformFamilyNames(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  BYTE7(v29) = 1;
  LOWORD(__p[0]) = 44;
  E5Common::StringUtils::Split(a2, (char *)__p, (uint64_t)&v31);
  if (SBYTE7(v29) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  uint8x8_t v5 = (unsigned __int8 *)v31;
  size_t v6 = v32;
  if (v31 == v32) {
    goto LABEL_49;
  }
  while (2)
  {
    *(_OWORD *)long long __p = 0u;
    long long v29 = 0u;
    int v30 = 1065353216;
    long long v7 = *(unsigned __int8 **)(a1 + 24);
    if (!v7)
    {
      __p[0] = 0;
      goto LABEL_5;
    }
    do
    {
      if ((char)v7[55] < 0)
      {
        if (!*((void *)v7 + 5)) {
          goto LABEL_8;
        }
LABEL_13:
        E5Common::StringUtils::ToLower(v7 + 32, (uint64_t)&__s1);
        E5Common::StringUtils::ToLower(v5, (uint64_t)v33);
        unsigned __int8 v8 = v37;
        if ((v37 & 0x80u) == 0) {
          size_t v9 = v37;
        }
        else {
          size_t v9 = __n;
        }
        unint64_t v10 = v34;
        int v11 = (char)v34;
        if ((v34 & 0x80u) != 0) {
          unint64_t v10 = (unint64_t)v33[1];
        }
        if (v9 != v10)
        {
          BOOL v21 = 0;
          if (((char)v34 & 0x80000000) == 0) {
            goto LABEL_35;
          }
          goto LABEL_39;
        }
        if ((v34 & 0x80u) == 0) {
          float v12 = v33;
        }
        else {
          float v12 = (void **)v33[0];
        }
        if ((char)v37 < 0)
        {
          BOOL v21 = memcmp(__s1, v12, __n) == 0;
        }
        else
        {
          if (!v37)
          {
            BOOL v21 = 1;
            if (((char)v34 & 0x80000000) == 0)
            {
LABEL_35:
              if ((v8 & 0x80) == 0) {
                goto LABEL_36;
              }
              goto LABEL_40;
            }
LABEL_39:
            operator delete(v33[0]);
            if ((v37 & 0x80) == 0)
            {
LABEL_36:
              if (!v21) {
                goto LABEL_8;
              }
LABEL_41:
              std::__hash_table<E5Common::PlatformIdentifier,std::hash<E5Common::PlatformIdentifier>,std::equal_to<E5Common::PlatformIdentifier>,std::allocator<E5Common::PlatformIdentifier>>::__emplace_unique_key_args<E5Common::PlatformIdentifier,E5Common::PlatformIdentifier const&>((uint64_t)__p, (uint64_t)(v7 + 16), (_OWORD *)v7 + 1);
              goto LABEL_8;
            }
LABEL_40:
            operator delete(__s1);
            if (!v21) {
              goto LABEL_8;
            }
            goto LABEL_41;
          }
          uint64_t v13 = v37 - 1;
          p_s1 = &__s1;
          do
          {
            int v16 = *(unsigned __int8 *)p_s1;
            p_s1 = (void **)((char *)p_s1 + 1);
            int v15 = v16;
            int v18 = *(unsigned __int8 *)v12;
            float v12 = (void **)((char *)v12 + 1);
            int v17 = v18;
            BOOL v20 = v13-- != 0;
            BOOL v21 = v15 == v17;
          }
          while (v15 == v17 && v20);
        }
        if ((v11 & 0x80000000) == 0) {
          goto LABEL_35;
        }
        goto LABEL_39;
      }
      if (v7[55]) {
        goto LABEL_13;
      }
LABEL_8:
      long long v7 = *(unsigned __int8 **)v7;
    }
    while (v7);
    uint64_t v22 = (uint64_t *)v29;
    if ((void)v29)
    {
      do
      {
        std::__hash_table<E5Common::PlatformIdentifier,std::hash<E5Common::PlatformIdentifier>,std::equal_to<E5Common::PlatformIdentifier>,std::allocator<E5Common::PlatformIdentifier>>::__emplace_unique_key_args<E5Common::PlatformIdentifier,E5Common::PlatformIdentifier const&>(a3, (uint64_t)(v22 + 2), (_OWORD *)v22 + 1);
        uint64_t v22 = (uint64_t *)*v22;
      }
      while (v22);
      size_t v23 = (void *)v29;
      if ((void)v29)
      {
        do
        {
          size_t v24 = (void *)*v23;
          E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v23 + 2));
          operator delete(v23);
          size_t v23 = v24;
        }
        while (v24);
      }
    }
    size_t v25 = __p[0];
    __p[0] = 0;
    if (v25) {
      operator delete(v25);
    }
LABEL_5:
    v5 += 24;
    if (v5 != v6) {
      continue;
    }
    break;
  }
  uint8x8_t v5 = (unsigned __int8 *)v31;
LABEL_49:
  if (v5)
  {
    long long v26 = v32;
    size_t v27 = v5;
    if (v32 != v5)
    {
      do
      {
        if ((char)*(v26 - 1) < 0) {
          operator delete(*((void **)v26 - 3));
        }
        v26 -= 24;
      }
      while (v26 != v5);
      size_t v27 = v31;
    }
    long long v32 = v5;
    operator delete(v27);
  }
}

void sub_1923B0690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void E5PlatformManagerImpl::GetSupportedPlatforms(E5PlatformManagerImpl *this@<X0>, uint64_t a2@<X8>)
{
  v15[0] = 0;
  v15[1] = 0;
  int v14 = v15;
  unint64_t v3 = (uint64_t *)*((void *)this + 3);
  if (v3)
  {
    unint64_t v4 = (void *)((char *)this + 8);
    do
    {
      uint8x8_t v5 = sub_1923B1664(v4, (uint64_t)(v3 + 2));
      if (!v5)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Invalid platform id");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v16 = (const void **)v5[10];
      size_t v6 = std::__tree<std::__value_type<std::string,E5Common::PlatformIdentifier>,std::__map_value_compare<std::string,std::__value_type<std::string,E5Common::PlatformIdentifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,E5Common::PlatformIdentifier>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v14, v16, (uint64_t)&std::piecewise_construct, (long long **)&v16);
      long long v7 = (uint64_t *)v3[2];
      *((_DWORD *)v6 + 16) = *((_DWORD *)v3 + 6);
      v6[7] = v7;
      unint64_t v3 = (uint64_t *)*v3;
    }
    while (v3);
    unsigned __int8 v8 = (uint64_t *)v14;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    if (v8 != (uint64_t *)v15)
    {
      do
      {
        size_t v9 = sub_1923B1664(v4, (uint64_t)(v8 + 7));
        if (!v9) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((void **)a2, *(void *)(a2 + 8), (std::string *)v9[10], (std::string *)v9[11], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9[11] - v9[10]) >> 3));
        unint64_t v10 = (char *)v8[1];
        if (v10)
        {
          do
          {
            int v11 = (char **)v10;
            unint64_t v10 = *(char **)v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            int v11 = (char **)v8[2];
            BOOL v12 = *v11 == (char *)v8;
            unsigned __int8 v8 = (uint64_t *)v11;
          }
          while (!v12);
        }
        unsigned __int8 v8 = (uint64_t *)v11;
      }
      while (v11 != v15);
    }
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  std::__tree<std::__value_type<std::string,E5Common::PlatformIdentifier>,std::__map_value_compare<std::string,std::__value_type<std::string,E5Common::PlatformIdentifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,E5Common::PlatformIdentifier>>>::destroy((uint64_t)&v14, v15[0]);
}

void sub_1923B0878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void sub_1923B0890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, char *a11)
{
  __cxa_free_exception(v11);
  std::__tree<std::__value_type<std::string,E5Common::PlatformIdentifier>,std::__map_value_compare<std::string,std::__value_type<std::string,E5Common::PlatformIdentifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,E5Common::PlatformIdentifier>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_1923B08B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::vector<std::string>::~vector[abi:ne180100](v11);
  std::__tree<std::__value_type<std::string,E5Common::PlatformIdentifier>,std::__map_value_compare<std::string,std::__value_type<std::string,E5Common::PlatformIdentifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,E5Common::PlatformIdentifier>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_1923B08D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void E5PlatformManagerImpl::GetSupportedPlatformFamilies(E5PlatformManagerImpl *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v2 = (uint64_t *)*((void *)this + 3);
  if (v2)
  {
    unint64_t v4 = 0;
    do
    {
      char v6 = *((unsigned char *)v2 + 55);
      if (v6 < 0)
      {
        if (v2[5])
        {
LABEL_12:
          long long v7 = v4;
          if (*(std::string **)a2 != v4)
          {
            if (v6 >= 0) {
              uint64_t v8 = *((unsigned __int8 *)v2 + 55);
            }
            else {
              uint64_t v8 = v2[5];
            }
            if (v6 >= 0) {
              size_t v9 = (unsigned __int8 *)(v2 + 4);
            }
            else {
              size_t v9 = (unsigned __int8 *)v2[4];
            }
            long long v7 = *(std::string **)a2;
            while (1)
            {
              uint64_t v10 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
              if ((v10 & 0x80u) == 0) {
                std::string::size_type size = HIBYTE(v7->__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v7->__r_.__value_.__l.__size_;
              }
              if (size == v8)
              {
                if ((v10 & 0x80) != 0)
                {
                  if (!memcmp(v7->__r_.__value_.__l.__data_, v9, v7->__r_.__value_.__l.__size_)) {
                    break;
                  }
                }
                else
                {
                  if (!*((unsigned char *)&v7->__r_.__value_.__s + 23)) {
                    break;
                  }
                  uint64_t v12 = 0;
                  while (v7->__r_.__value_.__s.__data_[v12] == v9[v12])
                  {
                    if (v10 == ++v12) {
                      goto LABEL_31;
                    }
                  }
                }
              }
              if (++v7 == v4) {
                goto LABEL_32;
              }
            }
          }
LABEL_31:
          if (v7 == v4)
          {
LABEL_32:
            if ((unint64_t)v4 < *(void *)(a2 + 16))
            {
              if (v6 < 0)
              {
                std::string::__init_copy_ctor_external(v4, (const std::string::value_type *)v2[4], v2[5]);
              }
              else
              {
                long long v5 = *((_OWORD *)v2 + 2);
                v4->__r_.__value_.__r.__words[2] = v2[6];
                *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
              }
              *(void *)(a2 + 8) = ++v4;
            }
            else
            {
              unint64_t v4 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a2, (uint64_t)(v2 + 4));
            }
            *(void *)(a2 + 8) = v4;
          }
        }
      }
      else if (*((unsigned char *)v2 + 55))
      {
        goto LABEL_12;
      }
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
}

void sub_1923B0A60(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  std::vector<std::string>::~vector[abi:ne180100]((void **)v1);
  _Unwind_Resume(a1);
}

void sub_1923B0A78(_Unwind_Exception *a1)
{
  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void E5PlatformManagerImpl::GetSupportedPlatformIds(E5PlatformManagerImpl *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  for (uint64_t i = (uint64_t *)*((void *)this + 3); i; uint64_t i = (uint64_t *)*i)
  {
    long long v4 = *((_OWORD *)i + 1);
    std::__hash_table<E5Common::PlatformIdentifier,std::hash<E5Common::PlatformIdentifier>,std::equal_to<E5Common::PlatformIdentifier>,std::allocator<E5Common::PlatformIdentifier>>::__emplace_unique_key_args<E5Common::PlatformIdentifier,E5Common::PlatformIdentifier>(a2, (uint64_t)&v4, &v4);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v4);
  }
}

void sub_1923B0AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&a9);
  std::unordered_set<E5Common::PlatformIdentifier>::~unordered_set[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

uint64_t E5PlatformManagerImpl::GetBasePlatform(uint64_t a1, uint64_t a2)
{
  if (a2 <= 32773)
  {
    if (a2 >= 24576)
    {
      switch(a2)
      {
        case 24576:
        case 24577:
        case 24578:
          return 33025;
        case 24579:
        case 24580:
        case 24581:
        case 24582:
        case 24583:
        case 24584:
        case 24585:
        case 24586:
        case 24587:
        case 24588:
        case 24589:
        case 24590:
        case 24591:
        case 24592:
        case 24593:
        case 24594:
        case 24595:
        case 24596:
        case 24597:
        case 24598:
        case 24599:
        case 24600:
        case 24601:
        case 24602:
        case 24603:
        case 24604:
        case 24605:
        case 24606:
        case 24607:
        case 24611:
        case 24612:
        case 24613:
        case 24614:
        case 24615:
        case 24616:
        case 24617:
        case 24618:
        case 24619:
        case 24620:
        case 24621:
        case 24622:
        case 24623:
        case 24627:
        case 24629:
        case 24630:
        case 24631:
        case 24632:
        case 24633:
        case 24634:
        case 24635:
        case 24636:
        case 24637:
        case 24638:
        case 24639:
          goto LABEL_22;
        case 24608:
        case 24609:
        case 24610:
          return 33040;
        case 24624:
        case 24625:
        case 24626:
        case 24628:
          return 33056;
        case 24640:
        case 24641:
          return 33072;
        default:
          if (a2 != 28672) {
            goto LABEL_22;
          }
          return a2;
      }
    }
    if (!a2 || a2 == 256) {
      return a2;
    }
LABEL_22:
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v7, "GetBasePlatform");
    std::string::basic_string[abi:ne180100]<0>(v5, "Unsupported platform");
    E5RT::Status::Status(v6, 1, v5);
    E5RT::E5RTError::E5RTError(exception, v7, v6);
  }
  if (a2 > 33024)
  {
    switch(a2)
    {
      case 33025:
      case 33027:
        return 33025;
      case 33026:
      case 33028:
      case 33029:
      case 33030:
      case 33031:
      case 33032:
      case 33033:
      case 33034:
      case 33035:
      case 33036:
      case 33037:
      case 33038:
      case 33039:
      case 33041:
      case 33043:
      case 33044:
      case 33045:
      case 33046:
      case 33047:
      case 33048:
      case 33049:
      case 33050:
      case 33051:
      case 33052:
      case 33053:
      case 33054:
      case 33055:
      case 33057:
      case 33059:
      case 33060:
      case 33061:
      case 33062:
      case 33063:
      case 33064:
      case 33065:
      case 33066:
      case 33067:
      case 33068:
      case 33069:
      case 33070:
      case 33071:
      case 33073:
      case 33075:
      case 33076:
      case 33077:
      case 33078:
      case 33079:
      case 33080:
      case 33081:
      case 33082:
      case 33083:
      case 33084:
      case 33085:
      case 33086:
      case 33087:
        goto LABEL_22;
      case 33040:
      case 33042:
        return 33040;
      case 33056:
      case 33058:
        return 33056;
      case 33072:
      case 33074:
        return 33072;
      case 33088:
        return a2;
      default:
        if (a2 != 33537 && a2 != 33552) {
          goto LABEL_22;
        }
        return a2;
    }
  }
  char v3 = a2 - 6;
  if ((unint64_t)(a2 - 32774) > 0x2A) {
    goto LABEL_22;
  }
  if (((1 << v3) & 0x40000009C01) != 0) {
    return a2;
  }
  if (((1 << v3) & 0x204000000) == 0) {
    goto LABEL_22;
  }
  return 32800;
}

void sub_1923B0D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if (v23)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void sub_1923B1270(E5RT::AsyncEventImpl *this)
{
  uint64_t v2 = *((void *)this + 8);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 9);
    long long v4 = (void *)*((void *)this + 8);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      long long v4 = (void *)*((void *)this + 8);
    }
    *((void *)this + 9) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 63) < 0)
  {
    operator delete(*((void **)this + 5));
    if ((*((char *)this + 39) & 0x80000000) == 0)
    {
LABEL_11:
      long long v5 = this;
      goto LABEL_13;
    }
  }
  else if ((*((char *)this + 39) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(*((void **)this + 2));
  long long v5 = this;

LABEL_13:
  E5RT::AsyncEventImpl::~AsyncEventImpl(v5);
}

void Espresso::AOT::AbstractMILCompiler::Options::~Options(Espresso::AOT::AbstractMILCompiler::Options *this)
{
  uint64_t v2 = *((void *)this + 6);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 7);
    long long v4 = (void *)*((void *)this + 6);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      long long v4 = (void *)*((void *)this + 6);
    }
    *((void *)this + 7) = v2;
    operator delete(v4);
  }
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
    if ((*((char *)this + 23) & 0x80000000) == 0) {
      return;
    }
LABEL_13:
    operator delete(*(void **)this);
    return;
  }
  operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0) {
    goto LABEL_13;
  }
}

void sub_1923B13F0(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v8 = (unsigned int *)v9;
  std::map<Espresso::AOT::BackendIdentifier,double>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__tree_node<std::__value_type<Espresso::AOT::BackendIdentifier,double>,void *> *,long>>>((uint64_t *)&v8, *(unsigned int **)a3, (unsigned int *)(a3 + 8));
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v10 = (unsigned int *)v11;
  std::map<Espresso::AOT::BackendIdentifier,double>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__tree_node<std::__value_type<Espresso::AOT::BackendIdentifier,double>,void *> *,long>>>((uint64_t *)&v10, *(unsigned int **)a4, (unsigned int *)(a4 + 8));
  uint64_t v7 = *a2;
  a1[2] = 0;
  *a1 = v7;
  a1[1] = (uint64_t)(a1 + 2);
  a1[3] = 0;
  std::map<Espresso::AOT::BackendIdentifier,double>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__tree_node<std::__value_type<Espresso::AOT::BackendIdentifier,double>,void *> *,long>>>(a1 + 1, v8, (unsigned int *)v9);
  a1[5] = 0;
  a1[4] = (uint64_t)(a1 + 5);
  a1 += 4;
  a1[2] = 0;
  std::map<Espresso::AOT::BackendIdentifier,double>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__tree_node<std::__value_type<Espresso::AOT::BackendIdentifier,double>,void *> *,long>>>(a1, v10, (unsigned int *)v11);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v10, v11[0]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v8, v9[0]);
}

void sub_1923B14D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(v9, *v11);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(v10, *v12);
  sub_1923B1580((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1923B1504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(v13, a13);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_1923B1528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t sub_1923B1540(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(a1 + 32, *(void **)(a1 + 40));
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(v2, *(void **)(a1 + 16));
  return a1;
}

uint64_t sub_1923B1580(uint64_t a1)
{
  return a1;
}

void *sub_1923B1664(void *a1, uint64_t a2)
{
  unint64_t v4 = std::hash<E5Common::PlatformIdentifier>::operator()((uint64_t)(a1 + 3), a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v8 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v8 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(void **)(*a1 + 8 * v8);
  if (!v10) {
    return 0;
  }
  uint64_t v9 = (void *)*v10;
  if (*v10)
  {
    if (v7.u32[0] < 2uLL)
    {
      uint64_t v11 = *(void *)&v5 - 1;
      while (1)
      {
        uint64_t v13 = v9[1];
        if (v6 == v13)
        {
          if (E5Common::PlatformIdentifier::operator==((uint64_t)(v9 + 2), a2)) {
            return v9;
          }
        }
        else if ((v13 & v11) != v8)
        {
          return 0;
        }
        uint64_t v9 = (void *)*v9;
        if (!v9) {
          return v9;
        }
      }
    }
    do
    {
      unint64_t v12 = v9[1];
      if (v6 == v12)
      {
        if (E5Common::PlatformIdentifier::operator==((uint64_t)(v9 + 2), a2)) {
          return v9;
        }
      }
      else
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
        if (v12 != v8) {
          return 0;
        }
      }
      uint64_t v9 = (void *)*v9;
    }
    while (v9);
  }
  return v9;
}

BOOL sub_1923B17A0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  E5Common::StringUtils::ToLower(a1, (uint64_t)&__s1);
  E5Common::StringUtils::ToLower(a2, (uint64_t)__p);
  unsigned __int8 v3 = v22;
  if ((v22 & 0x80u) == 0) {
    size_t v4 = v22;
  }
  else {
    size_t v4 = __n;
  }
  unint64_t v5 = v19;
  int v6 = (char)v19;
  if ((v19 & 0x80u) != 0) {
    unint64_t v5 = (unint64_t)__p[1];
  }
  if (v4 != v5)
  {
    BOOL v16 = 0;
    if (((char)v19 & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_26;
  }
  if ((v19 & 0x80u) == 0) {
    uint8x8_t v7 = __p;
  }
  else {
    uint8x8_t v7 = (void **)__p[0];
  }
  if ((char)v22 < 0)
  {
    BOOL v16 = memcmp(__s1, v7, __n) == 0;
    goto LABEL_22;
  }
  if (v22)
  {
    uint64_t v8 = v22 - 1;
    p_s1 = &__s1;
    do
    {
      int v11 = *(unsigned __int8 *)p_s1;
      p_s1 = (void **)((char *)p_s1 + 1);
      int v10 = v11;
      int v13 = *(unsigned __int8 *)v7;
      uint8x8_t v7 = (void **)((char *)v7 + 1);
      int v12 = v13;
      BOOL v15 = v8-- != 0;
      BOOL v16 = v10 == v12;
    }
    while (v10 == v12 && v15);
LABEL_22:
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_23;
    }
LABEL_26:
    operator delete(__p[0]);
    if ((v22 & 0x80) == 0) {
      return v16;
    }
    goto LABEL_27;
  }
  BOOL v16 = 1;
  if ((char)v19 < 0) {
    goto LABEL_26;
  }
LABEL_23:
  if ((v3 & 0x80) == 0) {
    return v16;
  }
LABEL_27:
  operator delete(__s1);
  return v16;
}

void sub_1923B18B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_set<E5Common::PlatformIdentifier>::~unordered_set[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unsigned __int8 v3 = (void *)*v2;
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  size_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t *std::unique_ptr<std::__hash_node<E5Common::PlatformIdentifier,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<E5Common::PlatformIdentifier,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16)) {
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t **std::__tree<std::__value_type<std::string,E5Common::PlatformIdentifier>,std::__map_value_compare<std::string,std::__value_type<std::string,E5Common::PlatformIdentifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,E5Common::PlatformIdentifier>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint8x8_t v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    if (v8 >= 0) {
      int v10 = a2;
    }
    else {
      int v10 = *a2;
    }
    while (1)
    {
      while (1)
      {
        int v11 = (uint64_t **)v6;
        int v14 = (const void *)v6[4];
        int v12 = v6 + 4;
        int v13 = v14;
        int v15 = *((char *)v12 + 23);
        if (v15 >= 0) {
          size_t v16 = *((unsigned __int8 *)v12 + 23);
        }
        else {
          size_t v16 = v12[1];
        }
        if (v15 >= 0) {
          int v17 = v12;
        }
        else {
          int v17 = v13;
        }
        if (v16 >= v9) {
          size_t v18 = v9;
        }
        else {
          size_t v18 = v16;
        }
        int v19 = memcmp(v10, v17, v18);
        BOOL v20 = v9 < v16;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        if (!v20) {
          break;
        }
        int v6 = *v11;
        uint8x8_t v7 = v11;
        if (!*v11) {
          goto LABEL_27;
        }
      }
      int v21 = memcmp(v17, v10, v18);
      BOOL v22 = v16 < v9;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22) {
        return v11;
      }
      int v6 = v11[1];
      if (!v6)
      {
        uint8x8_t v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    int v11 = a1 + 1;
LABEL_27:
    int v23 = operator new(0x48uLL);
    size_t v24 = (std::string *)(v23 + 4);
    size_t v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)v25, *((void *)v25 + 1));
    }
    else
    {
      long long v26 = *v25;
      void v23[6] = *((void *)v25 + 2);
      *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v26;
    }
    v23[7] = 0;
    v23[8] = 0;
    *int v23 = 0;
    v23[1] = 0;
    v23[2] = v11;
    *uint8x8_t v7 = v23;
    size_t v27 = (uint64_t *)**a1;
    uint64_t v28 = v23;
    if (v27)
    {
      *a1 = v27;
      uint64_t v28 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_1923B1B08(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,E5Common::PlatformIdentifier>,std::__map_value_compare<std::string,std::__value_type<std::string,E5Common::PlatformIdentifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,E5Common::PlatformIdentifier>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,E5Common::PlatformIdentifier>,std::__map_value_compare<std::string,std::__value_type<std::string,E5Common::PlatformIdentifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,E5Common::PlatformIdentifier>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,E5Common::PlatformIdentifier>,std::__map_value_compare<std::string,std::__value_type<std::string,E5Common::PlatformIdentifier>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,E5Common::PlatformIdentifier>>>::destroy(a1, *((void *)a2 + 1));
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(a2 + 56));
    if (a2[55] < 0)
    {
      operator delete(*((void **)a2 + 4));
      size_t v4 = a2;
    }
    else
    {
      size_t v4 = a2;
    }
    operator delete(v4);
  }
}

void *std::__hash_table<E5Common::PlatformIdentifier,std::hash<E5Common::PlatformIdentifier>,std::equal_to<E5Common::PlatformIdentifier>,std::allocator<E5Common::PlatformIdentifier>>::__emplace_unique_key_args<E5Common::PlatformIdentifier,E5Common::PlatformIdentifier>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint8x8_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::hash<E5Common::PlatformIdentifier>::operator()(a1 + 24, a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    int v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      int v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v13[1];
            if (v15 == v9)
            {
              if (E5Common::PlatformIdentifier::operator==((uint64_t)(v13 + 2), a2)) {
                return v13;
              }
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            int v13 = (void *)*v13;
            if (!v13) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (E5Common::PlatformIdentifier::operator==((uint64_t)(v13 + 2), a2)) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          int v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  size_t v16 = (void *)(a1 + 16);
  int v13 = operator new(0x20uLL);
  *int v13 = 0;
  v13[1] = v9;
  *((_OWORD *)v13 + 1) = *a3;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (v10 && (float)(v18 * (float)v10) >= v17)
  {
    uint64_t v19 = *(void *)a1;
    BOOL v20 = *(void **)(*(void *)a1 + 8 * v3);
    if (v20)
    {
LABEL_26:
      *int v13 = *v20;
LABEL_61:
      *BOOL v20 = v13;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v21 = 1;
    if (v10 >= 3) {
      BOOL v21 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v10);
    unint64_t v23 = vcvtps_u32_f32(v17 / v18);
    if (v22 <= v23) {
      size_t prime = v23;
    }
    else {
      size_t prime = v22;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v25 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v25) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v25)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v25 < 3uLL || (uint8x8_t v27 = (uint8x8_t)vcnt_s8(v25), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime < *(void *)&v25) {
LABEL_37:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v3 = v9 % v10;
        uint64_t v19 = *(void *)a1;
        BOOL v20 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v20) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v9;
        uint64_t v19 = *(void *)a1;
        BOOL v20 = *(void **)(*(void *)a1 + 8 * v9);
        if (v20) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v29 & v9;
      uint64_t v19 = *(void *)a1;
      BOOL v20 = *(void **)(*(void *)a1 + 8 * (v29 & v9));
      if (v20) {
        goto LABEL_26;
      }
    }
  }
  *int v13 = *v16;
  *size_t v16 = v13;
  *(void *)(v19 + 8 * v3) = v16;
  if (*v13)
  {
    unint64_t v30 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10) {
        v30 %= v10;
      }
    }
    else
    {
      v30 &= v10 - 1;
    }
    BOOL v20 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*v7;
  return v13;
}

void sub_1923B1EE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<E5Common::PlatformIdentifier,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<E5Common::PlatformIdentifier,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1923B1EF4(void *a1)
{
  do
  {
    uint64_t v2 = (void *)*a1;
    sub_1923B1270((E5RT::AsyncEventImpl *)(a1 + 2));
    operator delete(a1);
    a1 = v2;
  }
  while (v2);
}

void *E5RT::SurfaceObject::SurfaceObject(E5RT::SurfaceObject *this)
{
  uint64_t result = E5RT::MemoryObject::MemoryObject(this);
  void *result = &unk_1EE3249C0;
  result[1] = 0;
  return result;
}

{
  void *result;

  uint64_t result = E5RT::MemoryObject::MemoryObject(this);
  void *result = &unk_1EE3249C0;
  result[1] = 0;
  return result;
}

void E5RT::SurfaceObject::~SurfaceObject(E5RT::SurfaceObject *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EE3249C0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  E5RT::MemoryObject::~MemoryObject(this);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EE3249C0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  E5RT::MemoryObject::~MemoryObject(this);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EE3249C0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  E5RT::MemoryObject::~MemoryObject(this);

  JUMPOUT(0x192FF16B0);
}

void E5RT::SurfaceObject::AllocSurface(E5RT::SurfaceDescriptor *a1, int a2)
{
  if (!a2)
  {
    E5RT::SurfaceDescriptor::GetSurfaceFormat(a1);
    E5RT::SurfaceDescriptor::GetSurfaceWidth(a1);
    E5RT::SurfaceDescriptor::GetSurfaceHeight(a1);
    uint64_t v5 = 0x2B23404400000000;
    long long v6 = 0u;
    long long v7 = 0u;
    kdebug_trace();
    E5RT::IOSurfaceObject::AllocIOSurfaceObjectImpl(a1, v3);
  }
  exception = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(&v5, "AllocSurface");
  std::string::basic_string[abi:ne180100]<0>(v8, "Invalid storage type.");
  E5RT::Status::Status(v9, 1, v8);
  E5RT::E5RTError::E5RTError(exception, &v5, v9);
}

void sub_1923B22FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v4 = v2;
  if (v4) {
    sub_19239F224(v4);
  }
  MEMORY[0x192FF16B0](v3, 0xA1C40BD48D6D6);
  std::unique_ptr<E5RT::IOSurfaceObject>::~unique_ptr[abi:ne180100]((E5RT::AsyncEventImpl **)va1);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_1923B2350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  E5RT::Status::~Status((E5RT::Status *)(v25 - 40));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if (v24)
    {
LABEL_8:
      __cxa_free_exception(v23);
      _Unwind_Resume(a1);
    }
  }
  else if (v24)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void *E5RT::SurfaceObjectImpl::TryAsIOSurfaceObject(void *this)
{
  if (this) {
  return this;
  }
}

uint64_t E5RT::InitializeSurfaceRandomly(E5RT *this, const E5RT::SurfaceDescriptor *a2, E5RT::SurfaceObject *a3, unsigned int a4)
{
  if (a4 < a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__token, "InitializeSurfaceRandomly");
    std::string::basic_string[abi:ne180100]<0>(v58, "Max should be >= min.");
    E5RT::Status::Status(v59, 1, v58);
    E5RT::E5RTError::E5RTError(exception, &__token, v59);
  }
  unsigned int v5 = a3;
  int SurfaceFormat = E5RT::SurfaceDescriptor::GetSurfaceFormat(this);
  if ((SurfaceFormat - 1) < 2) {
    goto LABEL_5;
  }
  if (SurfaceFormat != 7)
  {
    if (SurfaceFormat != 4)
    {
      uint64_t v55 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&__token, "InitializeSurfaceRandomly");
      std::string::basic_string[abi:ne180100]<0>(v58, "Unsupported surface format for random initialization.");
      E5RT::Status::Status(v59, 1, v58);
      E5RT::E5RTError::E5RTError(v55, &__token, v59);
    }
LABEL_5:
    uint64_t SurfaceHeight = E5RT::SurfaceDescriptor::GetSurfaceHeight(this);
    uint64_t v10 = E5RT::MemoryObject::Surface(a2);
    uint64_t v11 = (__IOSurface *)E5RT::SurfaceObject::GetHandle<__IOSurface *>(v10);
    size_t v12 = IOSurfaceGetBytesPerRow(v11) * SurfaceHeight;
    int v13 = E5RT::MemoryObject::Surface(a2);
    unint64_t v14 = (__IOSurface *)E5RT::SurfaceObject::GetHandle<__IOSurface *>(v13);
    uint64_t result = (uint64_t)IOSurfaceGetBaseAddress(v14);
    if (v12)
    {
      uint64_t v16 = result;
      for (uint64_t i = 0; i != v12; ++i)
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9302660, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_1E9302660))
        {
          *((unsigned char *)&__token.__r_.__value_.__s + 23) = 12;
          strcpy((char *)&__token, "/dev/urandom");
          std::random_device::random_device(v58, &__token);
          if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__token.__r_.__value_.__l.__data_);
          }
          uint32_t v18 = arc4random();
          dword_1E9302670 = v18;
          uint64_t v19 = 5;
          uint64_t v20 = 1;
          do
          {
            int v21 = 1812433253 * (v18 ^ (v18 >> 30));
            uint32_t v18 = v21 + v20;
            *((_DWORD *)&qword_1E9302660 + v19) = v19 + v21 - 4;
            ++v20;
            ++v19;
          }
          while (v19 != 628);
          qword_1E9303030 = 0;
          std::random_device::~random_device(v58);
          __cxa_guard_release(&qword_1E9302660);
        }
        __token.__r_.__value_.__s.__data_[0] = v5;
        __token.__r_.__value_.__s.__data_[1] = a4;
        uint64_t result = std::uniform_int_distribution<unsigned char>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)&__token, (uint64_t)&dword_1E9302670, (unsigned __int8 *)&__token);
        *(unsigned char *)(v16 + i) = result;
      }
    }
    return result;
  }
  uint64_t v22 = E5RT::SurfaceDescriptor::GetSurfaceHeight(this);
  unint64_t v23 = E5RT::MemoryObject::Surface(a2);
  int v24 = (__IOSurface *)E5RT::SurfaceObject::GetHandle<__IOSurface *>(v23);
  size_t v25 = IOSurfaceGetBytesPerRow(v24) * v22;
  unint64_t v26 = E5RT::MemoryObject::Surface(a2);
  uint8x8_t v27 = (__IOSurface *)E5RT::SurfaceObject::GetHandle<__IOSurface *>(v26);
  uint64_t result = (uint64_t)IOSurfaceGetBaseAddress(v27);
  if (v25 >= 2)
  {
    uint64_t v28 = 0;
    size_t v29 = v25 >> 1;
    _H0 = (short float)v5;
    _H1 = (short float)a4;
    __asm
    {
      FCVT            S0, H0
      FCVT            S1, H1
    }
    long long v38 = &OBJC_IVAR___ETTask__dumpData;
    float v39 = _S1 - _S0;
    uint64_t v40 = &dword_1E9301C98;
    uint64_t v41 = &unk_1E9302000;
    do
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9302668, memory_order_acquire) & 1) == 0)
      {
        uint64_t v46 = result;
        float v56 = v39;
        float v57 = _S0;
        long long v47 = v38;
        v48 = v40;
        v49 = v41;
        int v50 = __cxa_guard_acquire(&qword_1E9302668);
        uint64_t v41 = v49;
        uint64_t v40 = v48;
        float v39 = v56;
        _S0 = v57;
        long long v38 = v47;
        int v51 = v50;
        uint64_t result = v46;
        if (v51)
        {
          *((unsigned char *)&__token.__r_.__value_.__s + 23) = 12;
          strcpy((char *)&__token, "/dev/urandom");
          std::random_device::random_device(v58, &__token);
          if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__token.__r_.__value_.__l.__data_);
          }
          uint32_t v52 = arc4random();
          v47[806] = v52;
          for (uint64_t j = 1; j != 624; ++j)
          {
            uint32_t v52 = j + 1812433253 * (v52 ^ (v52 >> 30));
            v48[j] = v52;
          }
          v49[203] = 0;
          std::random_device::~random_device(v58);
          __cxa_guard_release(&qword_1E9302668);
          uint64_t v41 = v49;
          uint64_t v40 = v48;
          uint64_t result = v46;
          float v39 = v56;
          _S0 = v57;
          long long v38 = v47;
        }
      }
      uint64_t v42 = *((void *)v40 + 312);
      unint64_t v43 = (v42 + 1) % 0x270uLL;
      uint64_t v44 = v42;
      LODWORD(v42) = v40[(v42 + 397) % 0x270uLL] ^ ((v40[v43] & 0x7FFFFFFE | v40[v42] & 0x80000000) >> 1) ^ (v40[v43] << 31 >> 31) & 0x9908B0DF;
      v40[v44] = v42;
      *((void *)v40 + 312) = v43;
      LODWORD(v42) = ((v42 ^ (v42 >> 11)) << 7) & 0x9D2C5680 ^ v42 ^ (v42 >> 11);
      _S2 = _S0
          + (float)(v39
                  * (float)((float)((v42 << 15) & 0xEFC60000 ^ v42 ^ (((v42 << 15) & 0xEFC60000 ^ v42) >> 18))
                          * 2.3283e-10));
      __asm { FCVT            H2, S2 }
      *(_WORD *)(result + 2 * v28++) = LOWORD(_S2);
    }
    while (v28 != v29);
  }
  return result;
}

void sub_1923B2934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::random_device a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

void sub_1923B296C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::random_device a10)
{
}

void sub_1923B298C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_1E9302660);
  _Unwind_Resume(a1);
}

void sub_1923B29B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if (v23) {
      goto LABEL_8;
    }
  }
  else if (v23)
  {
LABEL_8:
    __cxa_free_exception(v22);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::uniform_int_distribution<unsigned char>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v3 = a3[1];
  int v4 = *a3;
  if (v3 == v4) {
    return v3;
  }
  unsigned int v5 = v3 - v4 + 1;
  if (v3 - v4 != -1)
  {
    uint64_t v6 = __clz(v5);
    uint64_t v7 = 31;
    if (((v5 << v6) & 0x7FFFFFFF) != 0) {
      uint64_t v7 = 32;
    }
    unint64_t v8 = v7 - v6;
    unint64_t v9 = v8 >> 5;
    if ((v8 & 0x1F) != 0) {
      ++v9;
    }
    if (v9 <= v8) {
      unsigned int v10 = 0xFFFFFFFF >> -(v8 / v9);
    }
    else {
      unsigned int v10 = 0;
    }
    unint64_t v11 = *(void *)(a2 + 2496);
    do
    {
      uint64_t v12 = 4 * v11;
      unint64_t v13 = v11 + 397;
      unint64_t v11 = (v11 + 1) % 0x270;
      unsigned int v14 = *(_DWORD *)(a2 + 4 * (v13 % 0x270)) ^ ((*(_DWORD *)(a2 + 4 * v11) & 0x7FFFFFFE | *(_DWORD *)(a2 + v12) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v11) << 31) >> 31) & 0x9908B0DF;
      *(_DWORD *)(a2 + v12) = v14;
      unsigned int v15 = ((v14 ^ (v14 >> 11)) << 7) & 0x9D2C5680 ^ v14 ^ (v14 >> 11);
      unsigned int v16 = ((v15 << 15) & 0xEFC60000 ^ v15 ^ (((v15 << 15) & 0xEFC60000 ^ v15) >> 18)) & v10;
    }
    while (v16 >= v5);
    *(void *)(a2 + 2496) = v11;
    LOBYTE(v3) = v4 + v16;
    return v3;
  }
  uint64_t v18 = *(void *)(a2 + 2496);
  unint64_t v19 = (v18 + 1) % 0x270uLL;
  unsigned int v20 = *(_DWORD *)(a2 + 4 * ((v18 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a2 + 4 * v19) & 0x7FFFFFFE | *(_DWORD *)(a2 + 4 * v18) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v19) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(a2 + 4 * v18) = v20;
  *(void *)(a2 + 2496) = v19;
  unsigned int v21 = ((v20 ^ (v20 >> 11)) << 7) & 0x9D2C5680 ^ v20 ^ (v20 >> 11);
  return (v21 ^ (((v21 << 15) & 0x3C40000 ^ v21) >> 18));
}

uint64_t E5RT::TensorDataType::ValidateDataTypeSpec(unsigned int a1, unsigned int a2)
{
  if (a2 >= 0xA) {
    unsigned int v2 = 1;
  }
  else {
    unsigned int v2 = (0x1F8u >> a2) & 1;
  }
  if (a1 == 4) {
    int v3 = v2;
  }
  else {
    int v3 = 1;
  }
  if (a1 - 2 >= 2) {
    unsigned int v4 = v3;
  }
  else {
    unsigned int v4 = 0;
  }
  if (a1 >= 2) {
    return v4;
  }
  else {
    return 1;
  }
}

void *E5RT::TensorDataType::Impl::Impl(void *this, const E5RT::TensorDataType::Impl *a2)
{
  *this = *(void *)a2;
  return this;
}

{
  *this = *(void *)a2;
  return this;
}

void *E5RT::TensorDataType::Impl::Impl(void *result, void *a2)
{
  void *result = *a2;
  return result;
}

{
  void *result = *a2;
  return result;
}

uint64_t E5RT::TensorDataType::Impl::GetComponentDataType(E5RT::TensorDataType::Impl *this)
{
  return *(unsigned int *)this;
}

uint64_t E5RT::TensorDataType::Impl::GetComponentPack(E5RT::TensorDataType::Impl *this)
{
  return *((unsigned int *)this + 1);
}

BOOL E5RT::TensorDataType::Impl::IsType<float>(E5RT::TensorDataType::Impl *a1)
{
  return *(_DWORD *)a1 == 4 && E5RT::TensorDataType::Impl::GetComponentSize(a1) == 4;
}

BOOL _ZNK4E5RT14TensorDataType4Impl6IsTypeIDF16_EEbv(E5RT::TensorDataType::Impl *a1)
{
  return *(_DWORD *)a1 == 4 && E5RT::TensorDataType::Impl::GetComponentSize(a1) == 2;
}

BOOL E5RT::TensorDataType::Impl::IsType<unsigned char>(E5RT::TensorDataType::Impl *a1)
{
  return (*(_DWORD *)a1 | 2) == 2 && E5RT::TensorDataType::Impl::GetComponentSize(a1) == 1;
}

BOOL E5RT::TensorDataType::Impl::IsType<BOOL>(E5RT::TensorDataType::Impl *a1)
{
  return (*(_DWORD *)a1 | 2) == 2 && E5RT::TensorDataType::Impl::GetComponentSize(a1) == 1;
}

BOOL E5RT::TensorDataType::Impl::IsType<signed char>(E5RT::TensorDataType::Impl *a1)
{
  return (*(_DWORD *)a1 | 2) == 3 && E5RT::TensorDataType::Impl::GetComponentSize(a1) == 1;
}

BOOL E5RT::TensorDataType::Impl::IsType<unsigned short>(E5RT::TensorDataType::Impl *a1)
{
  return (*(_DWORD *)a1 | 2) == 2 && E5RT::TensorDataType::Impl::GetComponentSize(a1) == 2;
}

BOOL E5RT::TensorDataType::Impl::IsType<short>(E5RT::TensorDataType::Impl *a1)
{
  return (*(_DWORD *)a1 | 2) == 3 && E5RT::TensorDataType::Impl::GetComponentSize(a1) == 2;
}

BOOL E5RT::TensorDataType::Impl::IsType<unsigned int>(E5RT::TensorDataType::Impl *a1)
{
  return (*(_DWORD *)a1 | 2) == 2 && E5RT::TensorDataType::Impl::GetComponentSize(a1) == 4;
}

BOOL E5RT::TensorDataType::Impl::IsType<int>(E5RT::TensorDataType::Impl *a1)
{
  return (*(_DWORD *)a1 | 2) == 3 && E5RT::TensorDataType::Impl::GetComponentSize(a1) == 4;
}

void sub_1923B2F64(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v2, 0x1000C4000313F17);
  uint64_t v4 = *(void *)(v1 + 8);
  *(void *)(v1 + 8) = 0;
  if (v4) {
    MEMORY[0x192FF16B0](v4, 0x1000C4000313F17);
  }
  _Unwind_Resume(a1);
}

uint64_t E5RT::TensorDataType::GetComponentPack(E5RT::TensorDataType *this)
{
  return *(unsigned int *)(*((void *)this + 1) + 4);
}

void sub_1923B312C(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v2, 0x1000C4000313F17);
  uint64_t v4 = *(void *)(v1 + 8);
  *(void *)(v1 + 8) = 0;
  if (v4) {
    MEMORY[0x192FF16B0](v4, 0x1000C4000313F17);
  }
  _Unwind_Resume(a1);
}

BOOL E5RT::TensorDataType::IsType<float>(uint64_t a1)
{
  uint64_t v1 = *(E5RT::TensorDataType::Impl **)(a1 + 8);
  return *(_DWORD *)v1 == 4 && E5RT::TensorDataType::Impl::GetComponentSize(v1) == 4;
}

BOOL _ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv(uint64_t a1)
{
  uint64_t v1 = *(E5RT::TensorDataType::Impl **)(a1 + 8);
  return *(_DWORD *)v1 == 4 && E5RT::TensorDataType::Impl::GetComponentSize(v1) == 2;
}

BOOL E5RT::TensorDataType::IsType<BOOL>(uint64_t a1)
{
  uint64_t v1 = *(E5RT::TensorDataType::Impl **)(a1 + 8);
  return (*(_DWORD *)v1 | 2) == 2 && E5RT::TensorDataType::Impl::GetComponentSize(v1) == 1;
}

BOOL E5RT::TensorDataType::IsType<unsigned char>(uint64_t a1)
{
  uint64_t v1 = *(E5RT::TensorDataType::Impl **)(a1 + 8);
  return (*(_DWORD *)v1 | 2) == 2 && E5RT::TensorDataType::Impl::GetComponentSize(v1) == 1;
}

BOOL E5RT::TensorDataType::IsType<signed char>(uint64_t a1)
{
  uint64_t v1 = *(E5RT::TensorDataType::Impl **)(a1 + 8);
  return (*(_DWORD *)v1 | 2) == 3 && E5RT::TensorDataType::Impl::GetComponentSize(v1) == 1;
}

BOOL E5RT::TensorDataType::IsType<unsigned short>(uint64_t a1)
{
  uint64_t v1 = *(E5RT::TensorDataType::Impl **)(a1 + 8);
  return (*(_DWORD *)v1 | 2) == 2 && E5RT::TensorDataType::Impl::GetComponentSize(v1) == 2;
}

BOOL E5RT::TensorDataType::IsType<short>(uint64_t a1)
{
  uint64_t v1 = *(E5RT::TensorDataType::Impl **)(a1 + 8);
  return (*(_DWORD *)v1 | 2) == 3 && E5RT::TensorDataType::Impl::GetComponentSize(v1) == 2;
}

BOOL E5RT::TensorDataType::IsType<unsigned int>(uint64_t a1)
{
  uint64_t v1 = *(E5RT::TensorDataType::Impl **)(a1 + 8);
  return (*(_DWORD *)v1 | 2) == 2 && E5RT::TensorDataType::Impl::GetComponentSize(v1) == 4;
}

BOOL E5RT::TensorDataType::IsType<int>(uint64_t a1)
{
  uint64_t v1 = *(E5RT::TensorDataType::Impl **)(a1 + 8);
  return (*(_DWORD *)v1 | 2) == 3 && E5RT::TensorDataType::Impl::GetComponentSize(v1) == 4;
}

BOOL E5RT::operator==(uint64_t a1, uint64_t a2)
{
  int v3 = *(E5RT::TensorDataType::Impl **)(a1 + 8);
  if (*(_DWORD *)v3 != **(_DWORD **)(a2 + 8)) {
    return 0;
  }
  int NumComponents = E5RT::TensorDataType::Impl::GetNumComponents(v3);
  if (NumComponents != E5RT::TensorDataType::Impl::GetNumComponents(*(E5RT::TensorDataType::Impl **)(a2 + 8))) {
    return 0;
  }
  Componentuint64_t Size = E5RT::TensorDataType::Impl::GetComponentSize(*(E5RT::TensorDataType::Impl **)(a1 + 8));
  return ComponentSize == E5RT::TensorDataType::Impl::GetComponentSize(*(E5RT::TensorDataType::Impl **)(a2 + 8));
}

BOOL E5RT::operator!=(uint64_t a1, uint64_t a2)
{
  int v3 = *(E5RT::TensorDataType::Impl **)(a1 + 8);
  if (*(_DWORD *)v3 != **(_DWORD **)(a2 + 8)) {
    return 1;
  }
  int NumComponents = E5RT::TensorDataType::Impl::GetNumComponents(v3);
  if (NumComponents != E5RT::TensorDataType::Impl::GetNumComponents(*(E5RT::TensorDataType::Impl **)(a2 + 8))) {
    return 1;
  }
  Componentuint64_t Size = E5RT::TensorDataType::Impl::GetComponentSize(*(E5RT::TensorDataType::Impl **)(a1 + 8));
  return ComponentSize != E5RT::TensorDataType::Impl::GetComponentSize(*(E5RT::TensorDataType::Impl **)(a2 + 8));
}

uint64_t E5RT::BufferObject::GetHandle<E5RT::HeapAllocatedBufferHandle>(uint64_t a1)
{
  uint64_t v1 = E5RT::BufferObjectImpl::TryAsHeapAllocatedBufferObject(*(void **)(a1 + 8));
  if (!v1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "GetHandle");
    std::string::basic_string[abi:ne180100]<0>(v4, "Buffer object is not backed by an HeapAllocated.");
    E5RT::Status::Status(v5, 2, v4);
    E5RT::E5RTError::E5RTError(exception, v6, v5);
  }
  return v1[2];
}

void sub_1923B3584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::BufferObject::CreateBufferFromHandle<E5RT::HeapAllocatedBufferHandle>(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2) {
      operator new();
    }
  }
  exception = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v5, "CreateBufferFromHandle");
  std::string::basic_string[abi:ne180100]<0>(v3, "Invalid heap allocated handle.");
  E5RT::Status::Status(v4, 1, v3);
  E5RT::E5RTError::E5RTError(exception, v5, v4);
}

void sub_1923B3760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (a2) {
    sub_19239C714(a2);
  }
  MEMORY[0x192FF16B0](v6, 0xA1C40BD48D6D6);
  std::unique_ptr<E5RT::HeapAllocatedBufferObject>::~unique_ptr[abi:ne180100]((E5RT::HeapAllocatedBufferObject **)va);
  _Unwind_Resume(a1);
}

void sub_1923B379C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<E5RT::HeapAllocatedBufferObject>::~unique_ptr[abi:ne180100]((E5RT::HeapAllocatedBufferObject **)va);
  _Unwind_Resume(a1);
}

void sub_1923B37B0(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;
  MEMORY[0x192FF16B0](v2, 0x1081C408B6691DALL);
  _Unwind_Resume(a1);
}

void sub_1923B37D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::HeapAllocatedBufferObject::~HeapAllocatedBufferObject(E5RT::HeapAllocatedBufferObject *this)
{
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    MEMORY[0x192FF1690](v2, 0x1000C8077774924);
  }

  E5RT::AsyncEventImpl::~AsyncEventImpl(this);
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    MEMORY[0x192FF1690](v2, 0x1000C8077774924);
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl(this);

  JUMPOUT(0x192FF16B0);
}

void E5RT::HeapAllocatedBufferObject::HeapAllocatedBufferObject(E5RT::HeapAllocatedBufferObject *this)
{
  uint64_t v1 = E5RT::BufferObjectImpl::BufferObjectImpl(this);
  *uint64_t v1 = &unk_1EE325CF8;
  *((unsigned char *)v1 + 8) = 0;
  v1[3] = 0;
  v1[4] = 0;
  v1[2] = 0;
  operator new[]();
}

void sub_1923B39B0(_Unwind_Exception *a1)
{
  uint64_t v3 = *((void *)v1 + 4);
  *((void *)v1 + 4) = 0;
  if (v3) {
    MEMORY[0x192FF1690](v3, 0x1000C8077774924);
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void E5RT::HeapAllocatedBufferObject::CreateBufferAliasImpl(E5RT::HeapAllocatedBufferObject *this)
{
  exception = __cxa_allocate_exception(0x18uLL);
  v5[23] = 21;
  strcpy(v5, "CreateBufferAliasImpl");
  uint64_t v2 = (char *)operator new(0x38uLL);
  long long v3 = xmmword_192DA90A0;
  strcpy(v2, "HeapAllocatedBuffer does not supported alias buffer.");
  E5RT::Status::Status(v4, 2, &v2);
  E5RT::E5RTError::E5RTError(exception, v5, v4);
}

void sub_1923B3AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v22 & 1) == 0) {
      goto LABEL_5;
    }
  }
  else if (!v22)
  {
LABEL_5:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v21);
  _Unwind_Resume(a1);
}

void sub_1923B3B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v18);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1923B3B08);
}

uint64_t E5RT::HeapAllocatedBufferObject::GetSize(E5RT::HeapAllocatedBufferObject *this)
{
  return *((void *)this + 3);
}

uint64_t E5RT::HeapAllocatedBufferObject::GetDataSpan(E5RT::HeapAllocatedBufferObject *this)
{
  if (*((void *)this + 3)) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

{
  if (*((void *)this + 3)) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t E5RT::HeapAllocatedBufferObject::GetType(E5RT::HeapAllocatedBufferObject *this)
{
  return 1;
}

void **std::vector<E5RT::TensorDimensionImpl>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    long long v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      unsigned int v5 = v3 - 40;
      uint64_t v6 = v3 - 40;
      uint64_t v7 = v3 - 40;
      do
      {
        unint64_t v8 = *(void (***)(char *))v7;
        v7 -= 40;
        (*v8)(v6);
        v5 -= 40;
        BOOL v9 = v6 == v2;
        uint64_t v6 = v7;
      }
      while (!v9);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1923B401C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](a12);
  E5RT::TensorDataType::~TensorDataType(v31);
  uint64_t v33 = *v30;
  if (*v30)
  {
    *(void *)(v28 + 56) = v33;
    operator delete(v33);
    unsigned __int8 v34 = *v29;
    if (!*v29)
    {
LABEL_3:
      std::vector<E5RT::TensorDimensionImpl>::~vector[abi:ne180100]((void **)v28);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    unsigned __int8 v34 = *v29;
    if (!*v29) {
      goto LABEL_3;
    }
  }
  *(void *)(v28 + 32) = v34;
  operator delete(v34);
  std::vector<E5RT::TensorDimensionImpl>::~vector[abi:ne180100]((void **)v28);
  _Unwind_Resume(a1);
}

uint64_t E5RT::TensorDescriptorImpl::operator[](void *a1, unint64_t a2)
{
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "operator[]");
    std::string::basic_string[abi:ne180100]<0>(v4, "Invalid ND axis index (>= tensor rank).");
    E5RT::Status::Status(v5, 1, v4);
    E5RT::E5RTError::E5RTError(exception, v6, v5);
  }
  return *a1 + 40 * a2;
}

void sub_1923B4248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::TensorDescriptorImpl::GetNumElements(E5RT::TensorDescriptorImpl *this)
{
  if (!*((unsigned char *)this + 104))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "GetNumElements");
    std::string::basic_string[abi:ne180100]<0>(v3, "Tensor number of elements cannot be queried because all dimensions are not known.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return *((void *)this + 11);
}

void sub_1923B436C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::TensorDescriptorImpl::GetByteOffset(uint64_t a1, uint64_t *a2)
{
  if (!*(unsigned char *)(a1 + 104))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "GetByteOffset");
    std::string::basic_string[abi:ne180100]<0>(v12, "Tensor byte offset cannot be queried because all dimensions are not known.");
    E5RT::Status::Status(v13, 2, v12);
    E5RT::E5RTError::E5RTError(exception, v14, v13);
  }
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  unint64_t v4 = (v2 - *a2) >> 3;
  if (v4 != 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3))
  {
    unint64_t v11 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "GetByteOffset");
    std::string::basic_string[abi:ne180100]<0>(v12, "Invalid co-ordinate specification.");
    E5RT::Status::Status(v13, 1, v12);
    E5RT::E5RTError::E5RTError(v11, v14, v13);
  }
  if (v2 == v3) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  if (v4 <= 1) {
    unint64_t v4 = 1;
  }
  do
  {
    unint64_t v7 = *(void *)(v3 + 8 * v5);
    if (v7 >= *(void *)(*(void *)(a1 + 24) + 8 * v5))
    {
      BOOL v9 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v14, "GetByteOffset");
      std::string::basic_string[abi:ne180100]<0>(v12, "Invalid element co-ordinate");
      E5RT::Status::Status(v13, 4, v12);
      E5RT::E5RTError::E5RTError(v9, v14, v13);
    }
    v6 += *(void *)(*(void *)(a1 + 48) + 8 * v5++) * v7;
  }
  while (v4 != v5);
  return v6;
}

void sub_1923B4610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (v23) {
    __cxa_free_exception(v22);
  }
  _Unwind_Resume(a1);
}

void *E5RT::TensorDescriptor::TensorDescriptor(E5RT::TensorDescriptor *this)
{
  uint64_t result = E5RT::OperandDescriptor::OperandDescriptor(this);
  void *result = &unk_1EE325930;
  result[1] = 0;
  return result;
}

{
  void *result;

  uint64_t result = E5RT::OperandDescriptor::OperandDescriptor(this);
  void *result = &unk_1EE325930;
  result[1] = 0;
  return result;
}

void *E5RT::TensorDescriptor::TensorDescriptor(void *a1, uint64_t *a2)
{
  uint64_t result = E5RT::OperandDescriptor::OperandDescriptor(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  void *result = &unk_1EE325930;
  result[1] = v4;
  return result;
}

{
  void *result;
  uint64_t v4;

  uint64_t result = E5RT::OperandDescriptor::OperandDescriptor(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  void *result = &unk_1EE325930;
  result[1] = v4;
  return result;
}

void E5RT::TensorDescriptor::~TensorDescriptor(E5RT::TensorDescriptor *this)
{
  uint64_t v2 = (E5RT::TensorDescriptorImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE325930;
  *((void *)this + 1) = 0;
  if (v2)
  {
    E5RT::TensorDescriptorImpl::~TensorDescriptorImpl(v2);
    MEMORY[0x192FF16B0]();
  }

  E5RT::OperandDescriptor::~OperandDescriptor(this);
}

{
  E5RT::TensorDescriptorImpl *v2;
  uint64_t vars8;

  uint64_t v2 = (E5RT::TensorDescriptorImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE325930;
  *((void *)this + 1) = 0;
  if (v2)
  {
    E5RT::TensorDescriptorImpl::~TensorDescriptorImpl(v2);
    MEMORY[0x192FF16B0]();
  }

  E5RT::OperandDescriptor::~OperandDescriptor(this);
}

{
  E5RT::TensorDescriptorImpl *v2;
  uint64_t vars8;

  uint64_t v2 = (E5RT::TensorDescriptorImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE325930;
  *((void *)this + 1) = 0;
  if (v2)
  {
    E5RT::TensorDescriptorImpl::~TensorDescriptorImpl(v2);
    MEMORY[0x192FF16B0]();
  }
  E5RT::OperandDescriptor::~OperandDescriptor(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t E5RT::TensorDescriptor::operator[](uint64_t a1, unint64_t a2)
{
  return E5RT::TensorDescriptorImpl::operator[](*(void **)(a1 + 8), a2);
}

uint64_t E5RT::TensorDescriptor::GetTensorDataType@<X0>(E5RT::TensorDescriptor *this@<X0>, E5RT::TensorDataType *a2@<X8>)
{
  return E5RT::TensorDataType::TensorDataType(a2, (const E5RT::TensorDataType *)(*((void *)this + 1) + 72));
}

uint64_t E5RT::TensorDescriptor::GetComponentAxis(E5RT::TensorDescriptor *this)
{
  return *(void *)(*((void *)this + 1) + 112);
}

uint64_t E5RT::TensorDescriptor::GetNumElements(E5RT::TensorDescriptorImpl **this)
{
  return E5RT::TensorDescriptorImpl::GetNumElements(this[1]);
}

uint64_t E5RT::TensorDescriptor::GetByteOffset(uint64_t a1, uint64_t *a2)
{
  return E5RT::TensorDescriptorImpl::GetByteOffset(*(void *)(a1 + 8), a2);
}

void E5RT::TensorDescriptor::CreateTensorDescSlice(uint64_t a1, uint64_t a2, unint64_t **a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(unint64_t **)a2;
  unint64_t v5 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3;
  uint64_t v6 = *(unint64_t **)(v3 + 24);
  unint64_t v7 = *(unint64_t **)(v3 + 32);
  if (v5 == v7 - v6)
  {
    unint64_t v8 = *a3;
    if (v5 == a3[1] - *a3)
    {
      if (v7 != v6)
      {
        if (v5 <= 1) {
          unint64_t v5 = 1;
        }
        do
        {
          unint64_t v10 = *v4++;
          unint64_t v9 = v10;
          unint64_t v11 = *v6++;
          BOOL v12 = v11 >= v9;
          unint64_t v13 = v11 - v9;
          if (!v12)
          {
            exception = __cxa_allocate_exception(0x18uLL);
            std::string::basic_string[abi:ne180100]<0>(v20, "CreateTensorDescSlice");
            std::string::basic_string[abi:ne180100]<0>(v18, "Invalid offset component.");
            E5RT::Status::Status(v19, 1, v18);
            E5RT::E5RTError::E5RTError(exception, v20, v19);
          }
          if (*v8 > v13)
          {
            unsigned int v15 = __cxa_allocate_exception(0x18uLL);
            std::string::basic_string[abi:ne180100]<0>(v20, "CreateTensorDescSlice");
            std::string::basic_string[abi:ne180100]<0>(v18, "Invalid length component.");
            E5RT::Status::Status(v19, 1, v18);
            E5RT::E5RTError::E5RTError(v15, v20, v19);
          }
          ++v8;
          --v5;
        }
        while (v5);
      }
      E5RT::TensorDescriptor::CreateTensorDescriptorWithStrides(a3, (void *)(v3 + 48), (E5RT::TensorDataType::Impl **)(v3 + 72));
    }
    float v17 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v20, "CreateTensorDescSlice");
    std::string::basic_string[abi:ne180100]<0>(v18, "Invalid length vector.");
    E5RT::Status::Status(v19, 1, v18);
    E5RT::E5RTError::E5RTError(v17, v20, v19);
  }
  unsigned int v16 = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v20, "CreateTensorDescSlice");
  std::string::basic_string[abi:ne180100]<0>(v18, "Invalid offset vector.");
  E5RT::Status::Status(v19, 1, v18);
  E5RT::E5RTError::E5RTError(v16, v20, v19);
}

void sub_1923B4BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (v23) {
    __cxa_free_exception(v22);
  }
  _Unwind_Resume(a1);
}

void E5RT::TensorDescriptor::CreateTensorDescriptorWithStrides(void *a1, void *a2, E5RT::TensorDataType::Impl **this)
{
  E5RT::TensorDataType::GetNumComponents(this);
  E5RT::TensorDataType::GetElementSize(this);
  if (a2[1] - *a2 == a1[1] - *a1) {
    operator new();
  }
  exception = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v9, "CreateTensorDescriptorWithStrides");
  std::string::basic_string[abi:ne180100]<0>(v7, "Stride and length must be specified for all dimensions.");
  E5RT::Status::Status(v8, 1, v7);
  E5RT::E5RTError::E5RTError(exception, v9, v8);
}

void sub_1923B4E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, E5RT::TensorDescriptorImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, E5RT::TensorDescriptorImpl *a14)
{
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100](&a9);
  MEMORY[0x192FF16B0](v14, 0xA1C40BD48D6D6);
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void sub_1923B4E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100]((E5RT::TensorDescriptorImpl **)va);
  _Unwind_Resume(a1);
}

void sub_1923B4EA8(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;
  MEMORY[0x192FF16B0](v2, 0x10B0C40553E7BE0);
  _Unwind_Resume(a1);
}

void sub_1923B4ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::TensorDescriptor::CreateTensorDescSlice(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v3 + 24);
  uint64_t v4 = *(void *)(v3 + 32);
  int v22 = 0;
  int v23 = 0;
  unsigned int v21 = 0;
  uint64_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  if (v4 == v5)
  {
    if (v7 == (a2[1] - *a2) >> 3) {
      goto LABEL_12;
    }
  }
  else
  {
    if (v6 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = (char *)operator new(v4 - v5);
    unsigned int v21 = v8;
    int v23 = &v8[8 * v7];
    bzero(v8, v6 & 0xFFFFFFFFFFFFFFF8);
    int v22 = v23;
    uint64_t v9 = *a2;
    if (v7 == (a2[1] - *a2) >> 3)
    {
      uint64_t v10 = 0;
      if (v7 <= 1) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = v7;
      }
      do
      {
        unint64_t v12 = *(void *)(v9 + 8 * v10);
        unint64_t v13 = *(void *)(v5 + 8 * v10);
        BOOL v14 = v13 >= v12;
        unint64_t v15 = v13 - v12;
        if (!v14)
        {
          exception = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v20, "CreateTensorDescSlice");
          std::string::basic_string[abi:ne180100]<0>(v18, "Invalid offset component.");
          E5RT::Status::Status(v19, 1, v18);
          E5RT::E5RTError::E5RTError(exception, v20, v19);
        }
        *(void *)&v8[8 * v10++] = v15;
      }
      while (v11 != v10);
LABEL_12:
      E5RT::TensorDescriptor::CreateTensorDescriptorWithStrides(&v21, (void *)(v3 + 48), (E5RT::TensorDataType::Impl **)(v3 + 72));
    }
  }
  float v17 = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v20, "CreateTensorDescSlice");
  std::string::basic_string[abi:ne180100]<0>(v18, "Invalid offset vector.");
  E5RT::Status::Status(v19, 1, v18);
  E5RT::E5RTError::E5RTError(v17, v20, v19);
}

void sub_1923B5168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23)
{
  if (v23) {
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

E5RT::TensorDescriptorImpl **std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100](E5RT::TensorDescriptorImpl **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    E5RT::TensorDescriptorImpl::~TensorDescriptorImpl(v2);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

void E5RT::TensorDescriptor::CreateTensorDescriptorWithAlignments(void *a1, void *a2, E5RT::TensorDataType::Impl **this)
{
  E5RT::TensorDataType::GetNumComponents(this);
  E5RT::TensorDataType::GetElementSize(this);
  if (a2[1] - *a2 == a1[1] - *a1) {
    operator new();
  }
  exception = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v9, "CreateTensorDescriptorWithAlignments");
  std::string::basic_string[abi:ne180100]<0>(v7, "Alignment and length must be specified for all dimensions.");
  E5RT::Status::Status(v8, 1, v7);
  E5RT::E5RTError::E5RTError(exception, v9, v8);
}

void sub_1923B5424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, E5RT::TensorDescriptorImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, E5RT::TensorDescriptorImpl *a14)
{
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100](&a9);
  MEMORY[0x192FF16B0](v14, 0xA1C40BD48D6D6);
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void sub_1923B5458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100]((E5RT::TensorDescriptorImpl **)va);
  _Unwind_Resume(a1);
}

void sub_1923B546C(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;
  MEMORY[0x192FF16B0](v2, 0x10B0C40553E7BE0);
  _Unwind_Resume(a1);
}

void sub_1923B5494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::TensorDescriptor::CreateTensorDescriptorWithAlignmentsAndSize(void *a1, void *a2, int a3, E5RT::TensorDataType::Impl **this)
{
  E5RT::TensorDataType::GetNumComponents(this);
  E5RT::TensorDataType::GetElementSize(this);
  if (a2[1] - *a2 == a1[1] - *a1) {
    operator new();
  }
  exception = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v10, "CreateTensorDescriptorWithAlignmentsAndSize");
  std::string::basic_string[abi:ne180100]<0>(v8, "Alignment and length must be specified for all dimensions.");
  E5RT::Status::Status(v9, 1, v8);
  E5RT::E5RTError::E5RTError(exception, v10, v9);
}

void sub_1923B5670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, E5RT::TensorDescriptorImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, E5RT::TensorDescriptorImpl *a14)
{
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100](&a9);
  MEMORY[0x192FF16B0](v14, 0xA1C40BD48D6D6);
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void sub_1923B56A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100]((E5RT::TensorDescriptorImpl **)va);
  _Unwind_Resume(a1);
}

void sub_1923B56B8(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;
  MEMORY[0x192FF16B0](v2, 0x10B0C40553E7BE0);
  _Unwind_Resume(a1);
}

void sub_1923B56E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::TensorDescriptor::CreateTensorDescriptorWithStridesComponentAxis(void *a1, void *a2, E5RT::TensorDataType::Impl **this)
{
  E5RT::TensorDataType::GetNumComponents(this);
  E5RT::TensorDataType::GetElementSize(this);
  if (a2[1] - *a2 == a1[1] - *a1) {
    operator new();
  }
  exception = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v9, "CreateTensorDescriptorWithStridesComponentAxis");
  std::string::basic_string[abi:ne180100]<0>(v7, "Stride and length must be specified for all dimensions.");
  E5RT::Status::Status(v8, 1, v7);
  E5RT::E5RTError::E5RTError(exception, v9, v8);
}

void sub_1923B58BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, E5RT::TensorDescriptorImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, E5RT::TensorDescriptorImpl *a14)
{
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100](&a9);
  MEMORY[0x192FF16B0](v14, 0xA1C40BD48D6D6);
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void sub_1923B58F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100]((E5RT::TensorDescriptorImpl **)va);
  _Unwind_Resume(a1);
}

void sub_1923B5904(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;
  MEMORY[0x192FF16B0](v2, 0x10B0C40553E7BE0);
  _Unwind_Resume(a1);
}

void sub_1923B592C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::TensorDescriptor::CreateTensorDescriptorWithStridesAndSize(void *a1, void *a2, int a3, E5RT::TensorDataType::Impl **this)
{
  E5RT::TensorDataType::GetNumComponents(this);
  E5RT::TensorDataType::GetElementSize(this);
  if (a2[1] - *a2 == a1[1] - *a1) {
    operator new();
  }
  exception = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v10, "CreateTensorDescriptorWithStridesAndSize");
  std::string::basic_string[abi:ne180100]<0>(v8, "Stride and length must be specified for all dimensions.");
  E5RT::Status::Status(v9, 1, v8);
  E5RT::E5RTError::E5RTError(exception, v10, v9);
}

void sub_1923B5B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, E5RT::TensorDescriptorImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, E5RT::TensorDescriptorImpl *a14)
{
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100](&a9);
  MEMORY[0x192FF16B0](v14, 0xA1C40BD48D6D6);
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void sub_1923B5B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100]((E5RT::TensorDescriptorImpl **)va);
  _Unwind_Resume(a1);
}

void sub_1923B5B50(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;
  MEMORY[0x192FF16B0](v2, 0x10B0C40553E7BE0);
  _Unwind_Resume(a1);
}

void sub_1923B5B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::TensorDescriptor::SetDefaultTensorShape(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  std::allocate_shared[abi:ne180100]<std::vector<unsigned long>,std::allocator<std::vector<unsigned long>>,std::vector<unsigned long> const&,void>(a2, &v6);
  long long v3 = v6;
  long long v6 = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 128);
  *(_OWORD *)(v2 + 120) = v3;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)&v6 + 1);
    if (!*((void *)&v6 + 1)) {
      return;
    }
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)*((void *)&v6 + 1);
    if (!*((void *)&v6 + 1)) {
      return;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t E5RT::operator==(uint64_t a1, uint64_t a2)
{
  if (E5RT::operator!=(*(void *)(a1 + 8) + 72, *(void *)(a2 + 8) + 72)) {
    return 0;
  }
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = *(void **)(a2 + 8);
  long long v6 = (const void *)v4[3];
  size_t v7 = v4[4] - (void)v6;
  unint64_t v8 = (const void *)v5[3];
  if (v7 != v5[4] - (void)v8) {
    return 0;
  }
  if (!memcmp(v6, v8, v7)
    && (uint64_t v9 = (const void *)v4[6], v10 = v4[7] - (void)v9, v11 = (const void *)v5[6], v10 == v5[7] - (void)v11)
    && !memcmp(v9, v11, v10))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

uint64_t E5RT::operator!=(uint64_t a1, uint64_t a2)
{
  if (E5RT::operator!=(*(void *)(a1 + 8) + 72, *(void *)(a2 + 8) + 72)) {
    return 1;
  }
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = *(void **)(a2 + 8);
  long long v6 = (const void *)v4[3];
  size_t v7 = v4[4] - (void)v6;
  unint64_t v8 = (const void *)v5[3];
  if (v7 != v5[4] - (void)v8) {
    return 1;
  }
  if (memcmp(v6, v8, v7)) {
    return 1;
  }
  uint64_t v9 = (const void *)v4[6];
  size_t v10 = v4[7] - (void)v9;
  uint64_t v11 = (const void *)v5[6];
  if (v10 != v5[7] - (void)v11) {
    return 1;
  }
  uint64_t result = memcmp(v9, v11, v10);
  if (result) {
    return 1;
  }
  return result;
}

void *std::allocate_shared[abi:ne180100]<std::vector<unsigned long>,std::allocator<std::vector<unsigned long>>,std::vector<unsigned long> const&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t result = operator new(0x30uLL);
  uint64_t v5 = result;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  long long v6 = result + 3;
  void *result = &unk_1EE300FD8;
  result[4] = 0;
  result[5] = 0;
  size_t v7 = *(const void **)a1;
  int64_t v8 = *(void *)(a1 + 8) - *(void *)a1;
  if (v8)
  {
    if (v8 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = (char *)operator new(v8);
    void v5[3] = v9;
    v5[4] = v9;
    size_t v10 = &v9[8 * (v8 >> 3)];
    v5[5] = v10;
    uint64_t result = memcpy(v9, v7, v8);
    v5[4] = v10;
  }
  *a2 = v6;
  a2[1] = v5;
  return result;
}

void sub_1923B5EAC(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[1].__shared_owners_ = (uint64_t)v4;
    operator delete(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<unsigned long>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE300FD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<unsigned long>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE300FD8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<std::vector<unsigned long>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

uint64_t std::__split_buffer<E5RT::TensorDimensionImpl>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 40);
    *(void *)(a1 + 16) = i - 40;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<E5RT::TensorDimensionImpl>::emplace_back<E5RT::TensorDimensionImpl>(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(__n128 **)(a1 + 16);
  if (v4 == *(__n128 **)(a1 + 24))
  {
    long long v6 = *(__n128 **)a1;
    uint64_t v5 = *(__n128 **)(a1 + 8);
    if ((unint64_t)v5 <= *(void *)a1)
    {
      unint64_t v12 = 0x999999999999999ALL * (((char *)v4 - (char *)v6) >> 3);
      if (v4 == v6) {
        unint64_t v12 = 1;
      }
      if (v12 >= 0x666666666666667) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v13 = v12 >> 2;
      uint64_t v14 = 40 * v12;
      unint64_t v15 = (char *)operator new(40 * v12);
      unsigned int v16 = v15;
      float v17 = (__n128 *)&v15[40 * v13];
      uint64_t v18 = &v15[v14];
      if (v4 == v5)
      {
        *(void *)a1 = v15;
        *(void *)(a1 + 8) = v17;
        *(void *)(a1 + 16) = v17;
        *(void *)(a1 + 24) = v18;
      }
      else
      {
        uint64_t v19 = ((char *)v4 - (char *)v5) / 40;
        unsigned int v20 = (char *)v17 + 40 * v19;
        uint64_t v21 = 40 * v19;
        int v22 = v17;
        do
        {
          __n128 v23 = E5RT::TensorDimensionImpl::TensorDimensionImpl(v22, v5);
          int v22 = (__n128 *)((char *)v22 + 40);
          uint64_t v5 = (__n128 *)((char *)v5 + 40);
          v21 -= 40;
        }
        while (v21);
        long long v6 = *(__n128 **)a1;
        int v24 = *(void (****)(void, __n128))(a1 + 8);
        size_t v25 = *(void (****)(void, __n128))(a1 + 16);
        *(void *)a1 = v16;
        *(void *)(a1 + 8) = v17;
        *(void *)(a1 + 16) = v20;
        *(void *)(a1 + 24) = v18;
        if (v25 != v24)
        {
          unint64_t v26 = v25 - 5;
          uint8x8_t v27 = v26;
          uint64_t v28 = v26;
          do
          {
            size_t v29 = *v28;
            v28 -= 5;
            (*v29)(v27, v23);
            v26 -= 5;
            BOOL v30 = v27 == v24;
            uint8x8_t v27 = v28;
          }
          while (!v30);
        }
      }
      if (v6) {
        operator delete(v6);
      }
      uint64_t v4 = *(__n128 **)(a1 + 16);
    }
    else
    {
      int64_t v7 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v5 - *(void *)a1) >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      if (v5 == v4)
      {
        uint64_t v11 = (__n128 *)((char *)v5 - 40 * v9);
      }
      else
      {
        do
        {
          E5RT::TensorDimensionImpl::operator=((__n128 *)((char *)v5 + 40 * v10), v5);
          uint64_t v5 = (__n128 *)((char *)v5 + 40);
        }
        while (v5 != v4);
        uint64_t v4 = *(__n128 **)(a1 + 8);
        uint64_t v11 = (__n128 *)((char *)v5 + 40 * v10);
      }
      *(void *)(a1 + 8) = (char *)v4 + 40 * v10;
      *(void *)(a1 + 16) = v11;
      uint64_t v4 = v11;
    }
  }
  E5RT::TensorDimensionImpl::TensorDimensionImpl(v4, a2);
  *(void *)(a1 + 16) += 40;
}

void sub_1923B6200(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<E5RT::TensorDimensionImpl>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void E5RT::TensorDescriptorImpl::~TensorDescriptorImpl(E5RT::TensorDescriptorImpl *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    E5RT::TensorDataType::~TensorDataType((E5RT::TensorDescriptorImpl *)((char *)this + 72));
    uint64_t v3 = (void *)*((void *)this + 6);
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDescriptorImpl *)((char *)this + 72));
  uint64_t v3 = (void *)*((void *)this + 6);
  if (v3)
  {
LABEL_4:
    *((void *)this + 7) = v3;
    operator delete(v3);
  }
LABEL_5:
  uint64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 4) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void (****)(void))this;
  if (*(void *)this)
  {
    long long v6 = (void (***)(void))*((void *)this + 1);
    int64_t v7 = *(void **)this;
    if (v6 != v5)
    {
      uint64_t v8 = v6 - 5;
      uint64_t v9 = v6 - 5;
      uint64_t v10 = v6 - 5;
      do
      {
        uint64_t v11 = *v10;
        v10 -= 5;
        (*v11)(v9);
        v8 -= 5;
        BOOL v12 = v9 == v5;
        uint64_t v9 = v10;
      }
      while (!v12);
      int64_t v7 = *(void **)this;
    }
    *((void *)this + 1) = v5;
    operator delete(v7);
  }
}

void (***sub_1923B6338(void (***a1)(void), void (***a2)(void)))(void)
{
  uint64_t v3 = a1;
  uint64_t v4 = a1;
  do
  {
    uint64_t v5 = *v4;
    v4 += 5;
    (*v5)();
    v3 += 5;
    uint64_t result = v4;
  }
  while (v4 != a2);
  return result;
}

uint64_t sub_1923B639C(uint64_t a1, uint64_t (***a2)(void))
{
  uint64_t v3 = a1 - 40;
  uint64_t v4 = (uint64_t (***)(void))(a1 - 40);
  uint64_t v5 = (uint64_t (***)(void))(a1 - 40);
  do
  {
    long long v6 = *v5;
    v5 -= 5;
    uint64_t result = (*v6)(v4);
    v3 -= 40;
    BOOL v8 = v4 == a2;
    uint64_t v4 = v5;
  }
  while (!v8);
  return result;
}

void *E5RT::TensorDimension::TensorDimension(void *this)
{
  *this = &unk_1EE325800;
  return this;
}

{
  *this = &unk_1EE325800;
  return this;
}

void E5RT::TensorDimensionImpl::~TensorDimensionImpl(E5RT::TensorDimensionImpl *this)
{
}

void E5RT::TensorDimension::~TensorDimension(E5RT::TensorDimension *this)
{
}

uint64_t E5RT::TensorDimension::GetDimIndex(E5RT::TensorDimension *this)
{
  return *(void *)(*((void *)this + 1) + 16);
}

uint64_t E5RT::TensorDimension::GetLength(E5RT::TensorDimension *this)
{
  return *(void *)(*((void *)this + 1) + 24);
}

uint64_t E5RT::TensorDimension::GetStride(E5RT::TensorDimension *this)
{
  return *(void *)(*((void *)this + 1) + 32);
}

void E5RT::ElementwiseOperationImplementation<float,float>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = (char *)E5RT::BufferObject::GetDataSpan(a2);
  BOOL v12 = (char *)E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v111, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v111);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v111);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v107 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_35;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_37;
  }
  uint64_t v22 = v20[v21];
  __n128 v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_36;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_27:
      if (v26 <= NumElements)
      {
        uint64_t v60 = v20[v19];
        uint64_t v61 = v23[v19];
        size_t v62 = 4 * NumComponents * v26;
        if (NumElements / v26 <= 1) {
          uint64_t v63 = 1;
        }
        else {
          uint64_t v63 = NumElements / v26;
        }
        do
        {
          memcpy(v12, DataSpan, v62);
          DataSpan += v60;
          v12 += v61;
          --v63;
        }
        while (v63);
      }
      goto LABEL_54;
    }
    uint64_t v52 = *(void *)(v25 + 8 * v19);
    uint64_t v53 = v52 * v28;
    uint64_t v54 = v30 * v52;
    int64_t v55 = Rank - 3;
    while (1)
    {
      uint64_t v56 = v20[v55];
      uint64_t v57 = v56 - v53;
      uint64_t v58 = v23[v55];
      if (v57 != v58 - v54) {
        break;
      }
      uint64_t v59 = *(void *)(v25 + 8 * v55);
      uint64_t v54 = v58 * v59;
      uint64_t v53 = v59 * v56;
      BOOL v33 = v55-- <= 0;
      if (v33) {
        goto LABEL_27;
      }
    }
    if (v21 < 1) {
      goto LABEL_36;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_36:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_37:
    char v64 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_41;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_36;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_36;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      uint64_t v49 = v23[v35];
      size_t v50 = 4 * NumComponents * v47;
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        memcpy(v12, DataSpan, v50);
        DataSpan += v48;
        v12 += v49;
        --v51;
      }
      while (v51);
    }
    goto LABEL_54;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_35:
  if (Rank) {
    goto LABEL_36;
  }
  char v64 = 0;
LABEL_41:
  uint64_t v65 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v108 = 0;
  long long v109 = 0;
  int v110 = 0;
  v67 = *(const void **)v65;
  uint64_t v66 = *(void *)(v65 + 8);
  int64_t v68 = v66 - *(void *)v65;
  if (v66 == *(void *)v65)
  {
    v104 = 0;
    long long v70 = 0;
    if (Rank > 5)
    {
LABEL_48:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v114, 2, v112);
      E5RT::E5RTError::E5RTError(exception, v113, v114);
    }
  }
  else
  {
    if (v68 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    v69 = operator new(v66 - *(void *)v65);
    long long v70 = (char *)&v69[v68 >> 3];
    v108 = v69;
    int v110 = v70;
    v104 = v69;
    memcpy(v69, v67, v68);
    long long v109 = v70;
  }
  uint64_t v71 = v104;
  switch(Rank)
  {
    case 0uLL:
      v113[0] = v12;
      v112[0] = DataSpan;
      v114[0] = NumComponents;
      uint64_t v72 = *(void *)(a5 + 24);
      if (!v72) {
        goto LABEL_89;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v72 + 48))(v72, v113, v112, v114);
LABEL_52:
      if (v104) {
        break;
      }
      goto LABEL_54;
    case 1uLL:
      if (v70 - (char *)v104 <= 7)
      {
        unsigned int v99 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v114, 1, v112);
        E5RT::E5RTError::E5RTError(v99, v113, v114);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *v104 && NumElements * v107 == **v18 * *v104)
      {
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = NumElements * NumComponents;
        uint64_t v93 = *(void *)(a5 + 24);
        if (!v93) {
          goto LABEL_89;
        }
        goto LABEL_82;
      }
      uint64_t v75 = ((v70 - (char *)v104) >> 3) - 1;
      if ((v64 & 1) == 0)
      {
        uint64_t v94 = v104[v75] * NumComponents;
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = v94;
        uint64_t v93 = *(void *)(a5 + 24);
        if (!v93) {
          goto LABEL_89;
        }
        goto LABEL_82;
      }
      if (v104[v75])
      {
        uint64_t v76 = 0;
        uint64_t v77 = *(void *)(*TensorStrides + 8 * v75);
        uint64_t v78 = (*v18)[v75];
        while (1)
        {
          v113[0] = v12;
          v112[0] = DataSpan;
          v114[0] = NumComponents;
          uint64_t v79 = *(void *)(a5 + 24);
          if (!v79) {
            goto LABEL_89;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v79 + 48))(v79, v113, v112, v114);
          DataSpan += v77;
          v12 += v78;
          if ((unint64_t)++v76 >= v104[v75]) {
            goto LABEL_53;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923B6FCC((void *)*TensorStrides, (uint64_t)DataSpan, *v18, (uint64_t)v12, (uint64_t)&v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 3uLL:
      sub_1923B72FC(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 4uLL:
      sub_1923B7628(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 5uLL:
      uint64_t v80 = v70 - (char *)v104;
      if (v70 - (char *)v104 <= 39)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v114, 1, v112);
        E5RT::E5RTError::E5RTError(v100, v113, v114);
      }
      uint64_t v81 = (void *)*TensorStrides;
      long long v82 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *v104 && NumElements * v107 == **v18 * *v104)
      {
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = NumElements * NumComponents;
        uint64_t v93 = *(void *)(a5 + 24);
        if (!v93) {
          goto LABEL_89;
        }
LABEL_82:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v113, v112, v114);
      }
      else
      {
        uint64_t v84 = v80 >> 3;
        uint64_t v85 = (v80 >> 3) - 5;
        uint64_t v86 = (v80 >> 3) - 1;
        unint64_t v87 = v104[v85];
        if (v104[v84 - 3] * v104[v84 - 4] * v104[v84 - 2] * v104[v86] == 1)
        {
          if (v87)
          {
            uint64_t v88 = 0;
            uint64_t v89 = v86;
            uint64_t v90 = v81[v89];
            uint64_t v91 = v82[v89];
            while (1)
            {
              v113[0] = v12;
              v112[0] = DataSpan;
              v114[0] = NumComponents;
              uint64_t v92 = *(void *)(a5 + 24);
              if (!v92) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v92 + 48))(v92, v113, v112, v114);
              DataSpan += v90;
              v12 += v91;
              if ((unint64_t)++v88 >= v104[v85]) {
                goto LABEL_53;
              }
            }
LABEL_89:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v101 = v85;
          uint64_t v102 = v104[v85];
          uint64_t v95 = v81[v85];
          uint64_t v96 = v82[v85];
          v104[v85] = 1;
          if (v87)
          {
            unint64_t v97 = v87;
            unint64_t v98 = NumElements / v87;
            do
            {
              sub_1923B7628(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, v98, v64, a5);
              DataSpan += v95;
              v12 += v96;
              --v97;
            }
            while (v97);
          }
          uint64_t v71 = v104;
          v104[v101] = v102;
        }
      }
      return;
    default:
      goto LABEL_48;
  }
LABEL_53:
  operator delete(v71);
LABEL_54:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v111);
}

void sub_1923B6E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a16;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a16;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923B6FCC(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923B7288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923B72FC(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923B6FCC(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923B75B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923B7628(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923B72FC(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923B78DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void _ZN4E5RT34ElementwiseOperationImplementationIDF16_fEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923B8584((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923B88B4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923B8BE0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923B8BE0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923B8380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923B8584(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923B8840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923B88B4(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923B8584(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923B8B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923B8BE0(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923B88B4(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923B8E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned int,float>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923B9B3C((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923B9E6C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923BA198(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923BA198(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923B9938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923B9B3C(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923B9DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923B9E6C(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923B9B3C(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923BA124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923BA198(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923B9E6C(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923BA44C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<int,float>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923BB0F4((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923BB424(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923BB750(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923BB750(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923BAEF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923BB0F4(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923BB3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923BB424(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923BB0F4(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923BB6DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923BB750(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923BB424(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923BBA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned short,float>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923BC6AC((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923BC9DC(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923BCD08(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923BCD08(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923BC4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923BC6AC(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923BC968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923BC9DC(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923BC6AC(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923BCC94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923BCD08(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923BC9DC(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923BCFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<short,float>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923BDC64((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923BDF94(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923BE2C0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923BE2C0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923BDA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923BDC64(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923BDF20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923BDF94(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923BDC64(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923BE24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923BE2C0(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923BDF94(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923BE574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned char,float>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923BF21C((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923BF54C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923BF878(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923BF878(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923BF018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923BF21C(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923BF4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923BF54C(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923BF21C(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923BF804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923BF878(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923BF54C(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923BFB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<signed char,float>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923C07D4((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923C0B04(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923C0E30(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923C0E30(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923C05D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923C07D4(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923C0A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923C0B04(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923C07D4(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923C0DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923C0E30(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923C0B04(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923C10E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void _ZN4E5RT34ElementwiseOperationImplementationIfDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923C1D8C((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923C20BC(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923C23E8(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923C23E8(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923C1B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923C1D8C(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923C2048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923C20BC(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923C1D8C(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923C2374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923C23E8(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923C20BC(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923C269C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void _ZN4E5RT34ElementwiseOperationImplementationIDF16_DF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = (char *)E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = (char *)E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v111, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v111);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v111);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v107 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_35;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_37;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_36;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_27:
      if (v26 <= NumElements)
      {
        uint64_t v60 = v20[v19];
        uint64_t v61 = v23[v19];
        size_t v62 = 2 * NumComponents * v26;
        if (NumElements / v26 <= 1) {
          uint64_t v63 = 1;
        }
        else {
          uint64_t v63 = NumElements / v26;
        }
        do
        {
          memcpy(v12, DataSpan, v62);
          DataSpan += v60;
          v12 += v61;
          --v63;
        }
        while (v63);
      }
      goto LABEL_54;
    }
    uint64_t v52 = *(void *)(v25 + 8 * v19);
    uint64_t v53 = v52 * v28;
    uint64_t v54 = v30 * v52;
    int64_t v55 = Rank - 3;
    while (1)
    {
      uint64_t v56 = v20[v55];
      uint64_t v57 = v56 - v53;
      uint64_t v58 = v23[v55];
      if (v57 != v58 - v54) {
        break;
      }
      uint64_t v59 = *(void *)(v25 + 8 * v55);
      uint64_t v54 = v58 * v59;
      uint64_t v53 = v59 * v56;
      BOOL v33 = v55-- <= 0;
      if (v33) {
        goto LABEL_27;
      }
    }
    if (v21 < 1) {
      goto LABEL_36;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_36:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_37:
    char v64 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_41;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_36;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_36;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      uint64_t v49 = v23[v35];
      size_t v50 = 2 * NumComponents * v47;
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        memcpy(v12, DataSpan, v50);
        DataSpan += v48;
        v12 += v49;
        --v51;
      }
      while (v51);
    }
    goto LABEL_54;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_35:
  if (Rank) {
    goto LABEL_36;
  }
  char v64 = 0;
LABEL_41:
  uint64_t v65 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v108 = 0;
  long long v109 = 0;
  int v110 = 0;
  uint64_t v67 = *(const void **)v65;
  uint64_t v66 = *(void *)(v65 + 8);
  int64_t v68 = v66 - *(void *)v65;
  if (v66 == *(void *)v65)
  {
    v104 = 0;
    int64_t v70 = 0;
    if (Rank > 5)
    {
LABEL_48:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v114, 2, v112);
      E5RT::E5RTError::E5RTError(exception, v113, v114);
    }
  }
  else
  {
    if (v68 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    v69 = operator new(v66 - *(void *)v65);
    int64_t v70 = (char *)&v69[v68 >> 3];
    v108 = v69;
    int v110 = v70;
    v104 = v69;
    memcpy(v69, v67, v68);
    long long v109 = v70;
  }
  uint64_t v71 = v104;
  switch(Rank)
  {
    case 0uLL:
      v113[0] = v12;
      v112[0] = DataSpan;
      v114[0] = NumComponents;
      uint64_t v72 = *(void *)(a5 + 24);
      if (!v72) {
        goto LABEL_89;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v72 + 48))(v72, v113, v112, v114);
LABEL_52:
      if (v104) {
        break;
      }
      goto LABEL_54;
    case 1uLL:
      if (v70 - (char *)v104 <= 7)
      {
        unint64_t v99 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v114, 1, v112);
        E5RT::E5RTError::E5RTError(v99, v113, v114);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *v104 && NumElements * v107 == **v18 * *v104)
      {
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = NumElements * NumComponents;
        uint64_t v93 = *(void *)(a5 + 24);
        if (!v93) {
          goto LABEL_89;
        }
        goto LABEL_82;
      }
      uint64_t v75 = ((v70 - (char *)v104) >> 3) - 1;
      if ((v64 & 1) == 0)
      {
        uint64_t v94 = v104[v75] * NumComponents;
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = v94;
        uint64_t v93 = *(void *)(a5 + 24);
        if (!v93) {
          goto LABEL_89;
        }
        goto LABEL_82;
      }
      if (v104[v75])
      {
        uint64_t v76 = 0;
        uint64_t v77 = *(void *)(*TensorStrides + 8 * v75);
        uint64_t v78 = (*v18)[v75];
        while (1)
        {
          v113[0] = v12;
          v112[0] = DataSpan;
          v114[0] = NumComponents;
          uint64_t v79 = *(void *)(a5 + 24);
          if (!v79) {
            goto LABEL_89;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v79 + 48))(v79, v113, v112, v114);
          DataSpan += v77;
          v12 += v78;
          if ((unint64_t)++v76 >= v104[v75]) {
            goto LABEL_53;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923C3240((void *)*TensorStrides, (uint64_t)DataSpan, *v18, (uint64_t)v12, (uint64_t)&v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 3uLL:
      sub_1923C3570(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 4uLL:
      sub_1923C389C(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 5uLL:
      uint64_t v80 = v70 - (char *)v104;
      if (v70 - (char *)v104 <= 39)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v114, 1, v112);
        E5RT::E5RTError::E5RTError(v100, v113, v114);
      }
      uint64_t v81 = (void *)*TensorStrides;
      long long v82 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *v104 && NumElements * v107 == **v18 * *v104)
      {
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = NumElements * NumComponents;
        uint64_t v93 = *(void *)(a5 + 24);
        if (!v93) {
          goto LABEL_89;
        }
LABEL_82:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v113, v112, v114);
      }
      else
      {
        uint64_t v84 = v80 >> 3;
        uint64_t v85 = (v80 >> 3) - 5;
        uint64_t v86 = (v80 >> 3) - 1;
        unint64_t v87 = v104[v85];
        if (v104[v84 - 3] * v104[v84 - 4] * v104[v84 - 2] * v104[v86] == 1)
        {
          if (v87)
          {
            uint64_t v88 = 0;
            uint64_t v89 = v86;
            uint64_t v90 = v81[v89];
            uint64_t v91 = v82[v89];
            while (1)
            {
              v113[0] = v12;
              v112[0] = DataSpan;
              v114[0] = NumComponents;
              uint64_t v92 = *(void *)(a5 + 24);
              if (!v92) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v92 + 48))(v92, v113, v112, v114);
              DataSpan += v90;
              v12 += v91;
              if ((unint64_t)++v88 >= v104[v85]) {
                goto LABEL_53;
              }
            }
LABEL_89:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v101 = v85;
          uint64_t v102 = v104[v85];
          uint64_t v95 = v81[v85];
          uint64_t v96 = v82[v85];
          v104[v85] = 1;
          if (v87)
          {
            unint64_t v97 = v87;
            unint64_t v98 = NumElements / v87;
            do
            {
              sub_1923C389C(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, v98, v64, a5);
              DataSpan += v95;
              v12 += v96;
              --v97;
            }
            while (v97);
          }
          uint64_t v71 = v104;
          v104[v101] = v102;
        }
      }
      return;
    default:
      goto LABEL_48;
  }
LABEL_53:
  operator delete(v71);
LABEL_54:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v111);
}

void sub_1923C3098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a16;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a16;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923C3240(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923C34FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923C3570(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923C3240(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923C3828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923C389C(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923C3570(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923C3B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void _ZN4E5RT34ElementwiseOperationImplementationIjDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923C47F8((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923C4B28(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923C4E54(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923C4E54(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923C45F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923C47F8(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923C4AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923C4B28(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923C47F8(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923C4DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923C4E54(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923C4B28(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923C5108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void _ZN4E5RT34ElementwiseOperationImplementationIiDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923C5DB0((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923C60E0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923C640C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923C640C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923C5BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923C5DB0(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923C606C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923C60E0(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923C5DB0(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923C6398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923C640C(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923C60E0(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923C66C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void _ZN4E5RT34ElementwiseOperationImplementationItDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923C7368((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923C7698(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923C79C4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923C79C4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923C7164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923C7368(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923C7624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923C7698(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923C7368(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923C7950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923C79C4(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923C7698(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923C7C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void _ZN4E5RT34ElementwiseOperationImplementationIsDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923C8920((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923C8C50(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923C8F7C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923C8F7C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923C871C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923C8920(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923C8BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923C8C50(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923C8920(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923C8F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923C8F7C(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923C8C50(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923C9230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void _ZN4E5RT34ElementwiseOperationImplementationIhDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923C9ED8((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923CA208(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923CA534(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923CA534(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923C9CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923C9ED8(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923CA194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923CA208(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923C9ED8(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923CA4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923CA534(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923CA208(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923CA7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void _ZN4E5RT34ElementwiseOperationImplementationIaDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923CB490((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923CB7C0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923CBAEC(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923CBAEC(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923CB28C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923CB490(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923CB74C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923CB7C0(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923CB490(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923CBA78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923CBAEC(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923CB7C0(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923CBDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<float,unsigned int>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923CCA48((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923CCD78(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923CD0A4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923CD0A4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923CC844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923CCA48(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923CCD04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923CCD78(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923CCA48(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923CD030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923CD0A4(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923CCD78(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923CD358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void _ZN4E5RT34ElementwiseOperationImplementationIDF16_jEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923CE000((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923CE330(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923CE65C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923CE65C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923CDDFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923CE000(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923CE2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923CE330(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923CE000(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923CE5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923CE65C(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923CE330(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923CE910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned int,unsigned int>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = (char *)E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = (char *)E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v111, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v111);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v111);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v107 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_35;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_37;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_36;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_27:
      if (v26 <= NumElements)
      {
        uint64_t v60 = v20[v19];
        uint64_t v61 = v23[v19];
        size_t v62 = 4 * NumComponents * v26;
        if (NumElements / v26 <= 1) {
          uint64_t v63 = 1;
        }
        else {
          uint64_t v63 = NumElements / v26;
        }
        do
        {
          memcpy(v12, DataSpan, v62);
          DataSpan += v60;
          v12 += v61;
          --v63;
        }
        while (v63);
      }
      goto LABEL_54;
    }
    uint64_t v52 = *(void *)(v25 + 8 * v19);
    uint64_t v53 = v52 * v28;
    uint64_t v54 = v30 * v52;
    int64_t v55 = Rank - 3;
    while (1)
    {
      uint64_t v56 = v20[v55];
      uint64_t v57 = v56 - v53;
      uint64_t v58 = v23[v55];
      if (v57 != v58 - v54) {
        break;
      }
      uint64_t v59 = *(void *)(v25 + 8 * v55);
      uint64_t v54 = v58 * v59;
      uint64_t v53 = v59 * v56;
      BOOL v33 = v55-- <= 0;
      if (v33) {
        goto LABEL_27;
      }
    }
    if (v21 < 1) {
      goto LABEL_36;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_36:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_37:
    char v64 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_41;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_36;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_36;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      uint64_t v49 = v23[v35];
      size_t v50 = 4 * NumComponents * v47;
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        memcpy(v12, DataSpan, v50);
        DataSpan += v48;
        v12 += v49;
        --v51;
      }
      while (v51);
    }
    goto LABEL_54;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_35:
  if (Rank) {
    goto LABEL_36;
  }
  char v64 = 0;
LABEL_41:
  uint64_t v65 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v108 = 0;
  long long v109 = 0;
  int v110 = 0;
  uint64_t v67 = *(const void **)v65;
  uint64_t v66 = *(void *)(v65 + 8);
  int64_t v68 = v66 - *(void *)v65;
  if (v66 == *(void *)v65)
  {
    v104 = 0;
    int64_t v70 = 0;
    if (Rank > 5)
    {
LABEL_48:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v114, 2, v112);
      E5RT::E5RTError::E5RTError(exception, v113, v114);
    }
  }
  else
  {
    if (v68 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    v69 = operator new(v66 - *(void *)v65);
    int64_t v70 = (char *)&v69[v68 >> 3];
    v108 = v69;
    int v110 = v70;
    v104 = v69;
    memcpy(v69, v67, v68);
    long long v109 = v70;
  }
  uint64_t v71 = v104;
  switch(Rank)
  {
    case 0uLL:
      v113[0] = v12;
      v112[0] = DataSpan;
      v114[0] = NumComponents;
      uint64_t v72 = *(void *)(a5 + 24);
      if (!v72) {
        goto LABEL_89;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v72 + 48))(v72, v113, v112, v114);
LABEL_52:
      if (v104) {
        break;
      }
      goto LABEL_54;
    case 1uLL:
      if (v70 - (char *)v104 <= 7)
      {
        unint64_t v99 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v114, 1, v112);
        E5RT::E5RTError::E5RTError(v99, v113, v114);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *v104 && NumElements * v107 == **v18 * *v104)
      {
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = NumElements * NumComponents;
        uint64_t v93 = *(void *)(a5 + 24);
        if (!v93) {
          goto LABEL_89;
        }
        goto LABEL_82;
      }
      uint64_t v75 = ((v70 - (char *)v104) >> 3) - 1;
      if ((v64 & 1) == 0)
      {
        uint64_t v94 = v104[v75] * NumComponents;
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = v94;
        uint64_t v93 = *(void *)(a5 + 24);
        if (!v93) {
          goto LABEL_89;
        }
        goto LABEL_82;
      }
      if (v104[v75])
      {
        uint64_t v76 = 0;
        uint64_t v77 = *(void *)(*TensorStrides + 8 * v75);
        uint64_t v78 = (*v18)[v75];
        while (1)
        {
          v113[0] = v12;
          v112[0] = DataSpan;
          v114[0] = NumComponents;
          uint64_t v79 = *(void *)(a5 + 24);
          if (!v79) {
            goto LABEL_89;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v79 + 48))(v79, v113, v112, v114);
          DataSpan += v77;
          v12 += v78;
          if ((unint64_t)++v76 >= v104[v75]) {
            goto LABEL_53;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923CF4B4((void *)*TensorStrides, (uint64_t)DataSpan, *v18, (uint64_t)v12, (uint64_t)&v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 3uLL:
      sub_1923CF7E4(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 4uLL:
      sub_1923CFB10(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 5uLL:
      uint64_t v80 = v70 - (char *)v104;
      if (v70 - (char *)v104 <= 39)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v114, 1, v112);
        E5RT::E5RTError::E5RTError(v100, v113, v114);
      }
      uint64_t v81 = (void *)*TensorStrides;
      long long v82 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *v104 && NumElements * v107 == **v18 * *v104)
      {
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = NumElements * NumComponents;
        uint64_t v93 = *(void *)(a5 + 24);
        if (!v93) {
          goto LABEL_89;
        }
LABEL_82:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v113, v112, v114);
      }
      else
      {
        uint64_t v84 = v80 >> 3;
        uint64_t v85 = (v80 >> 3) - 5;
        uint64_t v86 = (v80 >> 3) - 1;
        unint64_t v87 = v104[v85];
        if (v104[v84 - 3] * v104[v84 - 4] * v104[v84 - 2] * v104[v86] == 1)
        {
          if (v87)
          {
            uint64_t v88 = 0;
            uint64_t v89 = v86;
            uint64_t v90 = v81[v89];
            uint64_t v91 = v82[v89];
            while (1)
            {
              v113[0] = v12;
              v112[0] = DataSpan;
              v114[0] = NumComponents;
              uint64_t v92 = *(void *)(a5 + 24);
              if (!v92) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v92 + 48))(v92, v113, v112, v114);
              DataSpan += v90;
              v12 += v91;
              if ((unint64_t)++v88 >= v104[v85]) {
                goto LABEL_53;
              }
            }
LABEL_89:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v101 = v85;
          uint64_t v102 = v104[v85];
          uint64_t v95 = v81[v85];
          uint64_t v96 = v82[v85];
          v104[v85] = 1;
          if (v87)
          {
            unint64_t v97 = v87;
            unint64_t v98 = NumElements / v87;
            do
            {
              sub_1923CFB10(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, v98, v64, a5);
              DataSpan += v95;
              v12 += v96;
              --v97;
            }
            while (v97);
          }
          uint64_t v71 = v104;
          v104[v101] = v102;
        }
      }
      return;
    default:
      goto LABEL_48;
  }
LABEL_53:
  operator delete(v71);
LABEL_54:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v111);
}

void sub_1923CF30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a16;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a16;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923CF4B4(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923CF770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923CF7E4(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923CF4B4(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923CFA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923CFB10(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923CF7E4(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923CFDC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<int,unsigned int>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923D0A6C((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923D0D9C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923D10C8(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923D10C8(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923D0868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923D0A6C(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923D0D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923D0D9C(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923D0A6C(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923D1054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923D10C8(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923D0D9C(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923D137C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned short,unsigned int>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923D2024((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923D2354(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923D2680(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923D2680(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923D1E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923D2024(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923D22E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923D2354(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923D2024(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923D260C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923D2680(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923D2354(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923D2934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<short,unsigned int>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923D35DC((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923D390C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923D3C38(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923D3C38(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923D33D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923D35DC(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923D3898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923D390C(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923D35DC(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923D3BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923D3C38(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923D390C(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923D3EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned char,unsigned int>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923D4B94((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923D4EC4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923D51F0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923D51F0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923D4990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923D4B94(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923D4E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923D4EC4(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923D4B94(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923D517C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923D51F0(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923D4EC4(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923D54A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<signed char,unsigned int>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923D614C((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923D647C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923D67A8(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923D67A8(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923D5F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923D614C(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923D6408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923D647C(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923D614C(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923D6734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923D67A8(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923D647C(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923D6A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<float,int>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923D7704((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923D7A34(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923D7D60(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923D7D60(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923D7500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923D7704(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923D79C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923D7A34(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923D7704(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923D7CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923D7D60(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923D7A34(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923D8014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void _ZN4E5RT34ElementwiseOperationImplementationIDF16_iEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923D8CBC((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923D8FEC(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923D9318(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923D9318(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923D8AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923D8CBC(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923D8F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923D8FEC(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923D8CBC(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923D92A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923D9318(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923D8FEC(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923D95CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned int,int>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923DA274((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923DA5A4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923DA8D0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923DA8D0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923DA070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923DA274(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923DA530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923DA5A4(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923DA274(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923DA85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923DA8D0(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923DA5A4(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923DAB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<int,int>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = (char *)E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = (char *)E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v111, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v111);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v111);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v107 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_35;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_37;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_36;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_27:
      if (v26 <= NumElements)
      {
        uint64_t v60 = v20[v19];
        uint64_t v61 = v23[v19];
        size_t v62 = 4 * NumComponents * v26;
        if (NumElements / v26 <= 1) {
          uint64_t v63 = 1;
        }
        else {
          uint64_t v63 = NumElements / v26;
        }
        do
        {
          memcpy(v12, DataSpan, v62);
          DataSpan += v60;
          v12 += v61;
          --v63;
        }
        while (v63);
      }
      goto LABEL_54;
    }
    uint64_t v52 = *(void *)(v25 + 8 * v19);
    uint64_t v53 = v52 * v28;
    uint64_t v54 = v30 * v52;
    int64_t v55 = Rank - 3;
    while (1)
    {
      uint64_t v56 = v20[v55];
      uint64_t v57 = v56 - v53;
      uint64_t v58 = v23[v55];
      if (v57 != v58 - v54) {
        break;
      }
      uint64_t v59 = *(void *)(v25 + 8 * v55);
      uint64_t v54 = v58 * v59;
      uint64_t v53 = v59 * v56;
      BOOL v33 = v55-- <= 0;
      if (v33) {
        goto LABEL_27;
      }
    }
    if (v21 < 1) {
      goto LABEL_36;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_36:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_37:
    char v64 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_41;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_36;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_36;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      uint64_t v49 = v23[v35];
      size_t v50 = 4 * NumComponents * v47;
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        memcpy(v12, DataSpan, v50);
        DataSpan += v48;
        v12 += v49;
        --v51;
      }
      while (v51);
    }
    goto LABEL_54;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_35:
  if (Rank) {
    goto LABEL_36;
  }
  char v64 = 0;
LABEL_41:
  uint64_t v65 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v108 = 0;
  long long v109 = 0;
  int v110 = 0;
  uint64_t v67 = *(const void **)v65;
  uint64_t v66 = *(void *)(v65 + 8);
  int64_t v68 = v66 - *(void *)v65;
  if (v66 == *(void *)v65)
  {
    v104 = 0;
    int64_t v70 = 0;
    if (Rank > 5)
    {
LABEL_48:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v114, 2, v112);
      E5RT::E5RTError::E5RTError(exception, v113, v114);
    }
  }
  else
  {
    if (v68 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    v69 = operator new(v66 - *(void *)v65);
    int64_t v70 = (char *)&v69[v68 >> 3];
    v108 = v69;
    int v110 = v70;
    v104 = v69;
    memcpy(v69, v67, v68);
    long long v109 = v70;
  }
  uint64_t v71 = v104;
  switch(Rank)
  {
    case 0uLL:
      v113[0] = v12;
      v112[0] = DataSpan;
      v114[0] = NumComponents;
      uint64_t v72 = *(void *)(a5 + 24);
      if (!v72) {
        goto LABEL_89;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v72 + 48))(v72, v113, v112, v114);
LABEL_52:
      if (v104) {
        break;
      }
      goto LABEL_54;
    case 1uLL:
      if (v70 - (char *)v104 <= 7)
      {
        unint64_t v99 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v114, 1, v112);
        E5RT::E5RTError::E5RTError(v99, v113, v114);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *v104 && NumElements * v107 == **v18 * *v104)
      {
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = NumElements * NumComponents;
        uint64_t v93 = *(void *)(a5 + 24);
        if (!v93) {
          goto LABEL_89;
        }
        goto LABEL_82;
      }
      uint64_t v75 = ((v70 - (char *)v104) >> 3) - 1;
      if ((v64 & 1) == 0)
      {
        uint64_t v94 = v104[v75] * NumComponents;
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = v94;
        uint64_t v93 = *(void *)(a5 + 24);
        if (!v93) {
          goto LABEL_89;
        }
        goto LABEL_82;
      }
      if (v104[v75])
      {
        uint64_t v76 = 0;
        uint64_t v77 = *(void *)(*TensorStrides + 8 * v75);
        uint64_t v78 = (*v18)[v75];
        while (1)
        {
          v113[0] = v12;
          v112[0] = DataSpan;
          v114[0] = NumComponents;
          uint64_t v79 = *(void *)(a5 + 24);
          if (!v79) {
            goto LABEL_89;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v79 + 48))(v79, v113, v112, v114);
          DataSpan += v77;
          v12 += v78;
          if ((unint64_t)++v76 >= v104[v75]) {
            goto LABEL_53;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923DB728((void *)*TensorStrides, (uint64_t)DataSpan, *v18, (uint64_t)v12, (uint64_t)&v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 3uLL:
      sub_1923DBA58(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 4uLL:
      sub_1923DBD84(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 5uLL:
      uint64_t v80 = v70 - (char *)v104;
      if (v70 - (char *)v104 <= 39)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v114, 1, v112);
        E5RT::E5RTError::E5RTError(v100, v113, v114);
      }
      uint64_t v81 = (void *)*TensorStrides;
      long long v82 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *v104 && NumElements * v107 == **v18 * *v104)
      {
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = NumElements * NumComponents;
        uint64_t v93 = *(void *)(a5 + 24);
        if (!v93) {
          goto LABEL_89;
        }
LABEL_82:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v113, v112, v114);
      }
      else
      {
        uint64_t v84 = v80 >> 3;
        uint64_t v85 = (v80 >> 3) - 5;
        uint64_t v86 = (v80 >> 3) - 1;
        unint64_t v87 = v104[v85];
        if (v104[v84 - 3] * v104[v84 - 4] * v104[v84 - 2] * v104[v86] == 1)
        {
          if (v87)
          {
            uint64_t v88 = 0;
            uint64_t v89 = v86;
            uint64_t v90 = v81[v89];
            uint64_t v91 = v82[v89];
            while (1)
            {
              v113[0] = v12;
              v112[0] = DataSpan;
              v114[0] = NumComponents;
              uint64_t v92 = *(void *)(a5 + 24);
              if (!v92) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v92 + 48))(v92, v113, v112, v114);
              DataSpan += v90;
              v12 += v91;
              if ((unint64_t)++v88 >= v104[v85]) {
                goto LABEL_53;
              }
            }
LABEL_89:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v101 = v85;
          uint64_t v102 = v104[v85];
          uint64_t v95 = v81[v85];
          uint64_t v96 = v82[v85];
          v104[v85] = 1;
          if (v87)
          {
            unint64_t v97 = v87;
            unint64_t v98 = NumElements / v87;
            do
            {
              sub_1923DBD84(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, v98, v64, a5);
              DataSpan += v95;
              v12 += v96;
              --v97;
            }
            while (v97);
          }
          uint64_t v71 = v104;
          v104[v101] = v102;
        }
      }
      return;
    default:
      goto LABEL_48;
  }
LABEL_53:
  operator delete(v71);
LABEL_54:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v111);
}

void sub_1923DB580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a16;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a16;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923DB728(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923DB9E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923DBA58(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923DB728(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923DBD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923DBD84(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923DBA58(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923DC038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned short,int>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923DCCE0((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923DD010(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923DD33C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923DD33C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923DCADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923DCCE0(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923DCF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923DD010(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923DCCE0(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923DD2C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923DD33C(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923DD010(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923DD5F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<short,int>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923DE298((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923DE5C8(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923DE8F4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923DE8F4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923DE094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923DE298(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923DE554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923DE5C8(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923DE298(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923DE880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923DE8F4(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923DE5C8(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923DEBA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned char,int>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923DF850((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923DFB80(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923DFEAC(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923DFEAC(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923DF64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923DF850(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923DFB0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923DFB80(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923DF850(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923DFE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923DFEAC(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923DFB80(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923E0160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<signed char,int>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923E0E08((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923E1138(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923E1464(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923E1464(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923E0C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923E0E08(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923E10C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923E1138(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923E0E08(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923E13F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923E1464(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923E1138(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923E1718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<float,unsigned short>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923E23C0((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923E26F0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923E2A1C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923E2A1C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923E21BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923E23C0(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923E267C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923E26F0(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923E23C0(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923E29A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923E2A1C(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923E26F0(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923E2CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void _ZN4E5RT34ElementwiseOperationImplementationIDF16_tEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923E3978((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923E3CA8(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923E3FD4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923E3FD4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923E3774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923E3978(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923E3C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923E3CA8(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923E3978(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923E3F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923E3FD4(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923E3CA8(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923E4288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned int,unsigned short>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923E4F30((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923E5260(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923E558C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923E558C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923E4D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923E4F30(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923E51EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923E5260(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923E4F30(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923E5518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923E558C(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923E5260(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923E5840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<int,unsigned short>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923E64E8((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923E6818(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923E6B44(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923E6B44(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923E62E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923E64E8(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923E67A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923E6818(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923E64E8(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923E6AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923E6B44(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923E6818(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923E6DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned short,unsigned short>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = (char *)E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = (char *)E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v111, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v111);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v111);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v107 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_35;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_37;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_36;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_27:
      if (v26 <= NumElements)
      {
        uint64_t v60 = v20[v19];
        uint64_t v61 = v23[v19];
        size_t v62 = 2 * NumComponents * v26;
        if (NumElements / v26 <= 1) {
          uint64_t v63 = 1;
        }
        else {
          uint64_t v63 = NumElements / v26;
        }
        do
        {
          memcpy(v12, DataSpan, v62);
          DataSpan += v60;
          v12 += v61;
          --v63;
        }
        while (v63);
      }
      goto LABEL_54;
    }
    uint64_t v52 = *(void *)(v25 + 8 * v19);
    uint64_t v53 = v52 * v28;
    uint64_t v54 = v30 * v52;
    int64_t v55 = Rank - 3;
    while (1)
    {
      uint64_t v56 = v20[v55];
      uint64_t v57 = v56 - v53;
      uint64_t v58 = v23[v55];
      if (v57 != v58 - v54) {
        break;
      }
      uint64_t v59 = *(void *)(v25 + 8 * v55);
      uint64_t v54 = v58 * v59;
      uint64_t v53 = v59 * v56;
      BOOL v33 = v55-- <= 0;
      if (v33) {
        goto LABEL_27;
      }
    }
    if (v21 < 1) {
      goto LABEL_36;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_36:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_37:
    char v64 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_41;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_36;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_36;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      uint64_t v49 = v23[v35];
      size_t v50 = 2 * NumComponents * v47;
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        memcpy(v12, DataSpan, v50);
        DataSpan += v48;
        v12 += v49;
        --v51;
      }
      while (v51);
    }
    goto LABEL_54;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_35:
  if (Rank) {
    goto LABEL_36;
  }
  char v64 = 0;
LABEL_41:
  uint64_t v65 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v108 = 0;
  long long v109 = 0;
  int v110 = 0;
  uint64_t v67 = *(const void **)v65;
  uint64_t v66 = *(void *)(v65 + 8);
  int64_t v68 = v66 - *(void *)v65;
  if (v66 == *(void *)v65)
  {
    v104 = 0;
    int64_t v70 = 0;
    if (Rank > 5)
    {
LABEL_48:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v114, 2, v112);
      E5RT::E5RTError::E5RTError(exception, v113, v114);
    }
  }
  else
  {
    if (v68 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    v69 = operator new(v66 - *(void *)v65);
    int64_t v70 = (char *)&v69[v68 >> 3];
    v108 = v69;
    int v110 = v70;
    v104 = v69;
    memcpy(v69, v67, v68);
    long long v109 = v70;
  }
  uint64_t v71 = v104;
  switch(Rank)
  {
    case 0uLL:
      v113[0] = v12;
      v112[0] = DataSpan;
      v114[0] = NumComponents;
      uint64_t v72 = *(void *)(a5 + 24);
      if (!v72) {
        goto LABEL_89;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v72 + 48))(v72, v113, v112, v114);
LABEL_52:
      if (v104) {
        break;
      }
      goto LABEL_54;
    case 1uLL:
      if (v70 - (char *)v104 <= 7)
      {
        unint64_t v99 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v114, 1, v112);
        E5RT::E5RTError::E5RTError(v99, v113, v114);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *v104 && NumElements * v107 == **v18 * *v104)
      {
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = NumElements * NumComponents;
        uint64_t v93 = *(void *)(a5 + 24);
        if (!v93) {
          goto LABEL_89;
        }
        goto LABEL_82;
      }
      uint64_t v75 = ((v70 - (char *)v104) >> 3) - 1;
      if ((v64 & 1) == 0)
      {
        uint64_t v94 = v104[v75] * NumComponents;
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = v94;
        uint64_t v93 = *(void *)(a5 + 24);
        if (!v93) {
          goto LABEL_89;
        }
        goto LABEL_82;
      }
      if (v104[v75])
      {
        uint64_t v76 = 0;
        uint64_t v77 = *(void *)(*TensorStrides + 8 * v75);
        uint64_t v78 = (*v18)[v75];
        while (1)
        {
          v113[0] = v12;
          v112[0] = DataSpan;
          v114[0] = NumComponents;
          uint64_t v79 = *(void *)(a5 + 24);
          if (!v79) {
            goto LABEL_89;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v79 + 48))(v79, v113, v112, v114);
          DataSpan += v77;
          v12 += v78;
          if ((unint64_t)++v76 >= v104[v75]) {
            goto LABEL_53;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923E799C((void *)*TensorStrides, (uint64_t)DataSpan, *v18, (uint64_t)v12, (uint64_t)&v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 3uLL:
      sub_1923E7CCC(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 4uLL:
      sub_1923E7FF8(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 5uLL:
      uint64_t v80 = v70 - (char *)v104;
      if (v70 - (char *)v104 <= 39)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v114, 1, v112);
        E5RT::E5RTError::E5RTError(v100, v113, v114);
      }
      uint64_t v81 = (void *)*TensorStrides;
      long long v82 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *v104 && NumElements * v107 == **v18 * *v104)
      {
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = NumElements * NumComponents;
        uint64_t v93 = *(void *)(a5 + 24);
        if (!v93) {
          goto LABEL_89;
        }
LABEL_82:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v113, v112, v114);
      }
      else
      {
        uint64_t v84 = v80 >> 3;
        uint64_t v85 = (v80 >> 3) - 5;
        uint64_t v86 = (v80 >> 3) - 1;
        unint64_t v87 = v104[v85];
        if (v104[v84 - 3] * v104[v84 - 4] * v104[v84 - 2] * v104[v86] == 1)
        {
          if (v87)
          {
            uint64_t v88 = 0;
            uint64_t v89 = v86;
            uint64_t v90 = v81[v89];
            uint64_t v91 = v82[v89];
            while (1)
            {
              v113[0] = v12;
              v112[0] = DataSpan;
              v114[0] = NumComponents;
              uint64_t v92 = *(void *)(a5 + 24);
              if (!v92) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v92 + 48))(v92, v113, v112, v114);
              DataSpan += v90;
              v12 += v91;
              if ((unint64_t)++v88 >= v104[v85]) {
                goto LABEL_53;
              }
            }
LABEL_89:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v101 = v85;
          uint64_t v102 = v104[v85];
          uint64_t v95 = v81[v85];
          uint64_t v96 = v82[v85];
          v104[v85] = 1;
          if (v87)
          {
            unint64_t v97 = v87;
            unint64_t v98 = NumElements / v87;
            do
            {
              sub_1923E7FF8(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, v98, v64, a5);
              DataSpan += v95;
              v12 += v96;
              --v97;
            }
            while (v97);
          }
          uint64_t v71 = v104;
          v104[v101] = v102;
        }
      }
      return;
    default:
      goto LABEL_48;
  }
LABEL_53:
  operator delete(v71);
LABEL_54:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v111);
}

void sub_1923E77F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a16;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a16;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923E799C(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923E7C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923E7CCC(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923E799C(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923E7F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923E7FF8(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923E7CCC(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923E82AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<short,unsigned short>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923E8F54((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923E9284(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923E95B0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923E95B0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923E8D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923E8F54(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923E9210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923E9284(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923E8F54(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923E953C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923E95B0(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923E9284(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923E9864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned char,unsigned short>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923EA50C((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923EA83C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923EAB68(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923EAB68(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923EA308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923EA50C(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923EA7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923EA83C(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923EA50C(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923EAAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923EAB68(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923EA83C(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923EAE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<signed char,unsigned short>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923EBAC4((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923EBDF4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923EC120(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923EC120(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923EB8C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923EBAC4(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923EBD80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923EBDF4(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923EBAC4(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923EC0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923EC120(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923EBDF4(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923EC3D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<float,short>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923ED07C((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923ED3AC(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923ED6D8(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923ED6D8(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923ECE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923ED07C(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923ED338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923ED3AC(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923ED07C(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923ED664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923ED6D8(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923ED3AC(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923ED98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void _ZN4E5RT34ElementwiseOperationImplementationIDF16_sEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923EE634((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923EE964(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923EEC90(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923EEC90(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923EE430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923EE634(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923EE8F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923EE964(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923EE634(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923EEC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923EEC90(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923EE964(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923EEF44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned int,short>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923EFBEC((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923EFF1C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923F0248(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923F0248(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923EF9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923EFBEC(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923EFEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923EFF1C(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923EFBEC(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923F01D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923F0248(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923EFF1C(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923F04FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<int,short>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923F11A4((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923F14D4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923F1800(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923F1800(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923F0FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923F11A4(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923F1460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923F14D4(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923F11A4(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923F178C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923F1800(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923F14D4(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923F1AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned short,short>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923F275C((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923F2A8C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923F2DB8(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923F2DB8(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923F2558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923F275C(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923F2A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923F2A8C(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923F275C(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923F2D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923F2DB8(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923F2A8C(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923F306C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<short,short>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = (char *)E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = (char *)E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v111, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v111);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v111);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v107 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_35;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_37;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_36;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_27:
      if (v26 <= NumElements)
      {
        uint64_t v60 = v20[v19];
        uint64_t v61 = v23[v19];
        size_t v62 = 2 * NumComponents * v26;
        if (NumElements / v26 <= 1) {
          uint64_t v63 = 1;
        }
        else {
          uint64_t v63 = NumElements / v26;
        }
        do
        {
          memcpy(v12, DataSpan, v62);
          DataSpan += v60;
          v12 += v61;
          --v63;
        }
        while (v63);
      }
      goto LABEL_54;
    }
    uint64_t v52 = *(void *)(v25 + 8 * v19);
    uint64_t v53 = v52 * v28;
    uint64_t v54 = v30 * v52;
    int64_t v55 = Rank - 3;
    while (1)
    {
      uint64_t v56 = v20[v55];
      uint64_t v57 = v56 - v53;
      uint64_t v58 = v23[v55];
      if (v57 != v58 - v54) {
        break;
      }
      uint64_t v59 = *(void *)(v25 + 8 * v55);
      uint64_t v54 = v58 * v59;
      uint64_t v53 = v59 * v56;
      BOOL v33 = v55-- <= 0;
      if (v33) {
        goto LABEL_27;
      }
    }
    if (v21 < 1) {
      goto LABEL_36;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_36:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_37:
    char v64 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_41;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_36;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_36;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      uint64_t v49 = v23[v35];
      size_t v50 = 2 * NumComponents * v47;
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        memcpy(v12, DataSpan, v50);
        DataSpan += v48;
        v12 += v49;
        --v51;
      }
      while (v51);
    }
    goto LABEL_54;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_35:
  if (Rank) {
    goto LABEL_36;
  }
  char v64 = 0;
LABEL_41:
  uint64_t v65 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v108 = 0;
  long long v109 = 0;
  int v110 = 0;
  uint64_t v67 = *(const void **)v65;
  uint64_t v66 = *(void *)(v65 + 8);
  int64_t v68 = v66 - *(void *)v65;
  if (v66 == *(void *)v65)
  {
    v104 = 0;
    int64_t v70 = 0;
    if (Rank > 5)
    {
LABEL_48:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v114, 2, v112);
      E5RT::E5RTError::E5RTError(exception, v113, v114);
    }
  }
  else
  {
    if (v68 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    v69 = operator new(v66 - *(void *)v65);
    int64_t v70 = (char *)&v69[v68 >> 3];
    v108 = v69;
    int v110 = v70;
    v104 = v69;
    memcpy(v69, v67, v68);
    long long v109 = v70;
  }
  uint64_t v71 = v104;
  switch(Rank)
  {
    case 0uLL:
      v113[0] = v12;
      v112[0] = DataSpan;
      v114[0] = NumComponents;
      uint64_t v72 = *(void *)(a5 + 24);
      if (!v72) {
        goto LABEL_89;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v72 + 48))(v72, v113, v112, v114);
LABEL_52:
      if (v104) {
        break;
      }
      goto LABEL_54;
    case 1uLL:
      if (v70 - (char *)v104 <= 7)
      {
        unint64_t v99 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v114, 1, v112);
        E5RT::E5RTError::E5RTError(v99, v113, v114);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *v104 && NumElements * v107 == **v18 * *v104)
      {
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = NumElements * NumComponents;
        uint64_t v93 = *(void *)(a5 + 24);
        if (!v93) {
          goto LABEL_89;
        }
        goto LABEL_82;
      }
      uint64_t v75 = ((v70 - (char *)v104) >> 3) - 1;
      if ((v64 & 1) == 0)
      {
        uint64_t v94 = v104[v75] * NumComponents;
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = v94;
        uint64_t v93 = *(void *)(a5 + 24);
        if (!v93) {
          goto LABEL_89;
        }
        goto LABEL_82;
      }
      if (v104[v75])
      {
        uint64_t v76 = 0;
        uint64_t v77 = *(void *)(*TensorStrides + 8 * v75);
        uint64_t v78 = (*v18)[v75];
        while (1)
        {
          v113[0] = v12;
          v112[0] = DataSpan;
          v114[0] = NumComponents;
          uint64_t v79 = *(void *)(a5 + 24);
          if (!v79) {
            goto LABEL_89;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v79 + 48))(v79, v113, v112, v114);
          DataSpan += v77;
          v12 += v78;
          if ((unint64_t)++v76 >= v104[v75]) {
            goto LABEL_53;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923F3C10((void *)*TensorStrides, (uint64_t)DataSpan, *v18, (uint64_t)v12, (uint64_t)&v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 3uLL:
      sub_1923F3F40(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 4uLL:
      sub_1923F426C(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, NumElements, v64, a5);
      goto LABEL_52;
    case 5uLL:
      uint64_t v80 = v70 - (char *)v104;
      if (v70 - (char *)v104 <= 39)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v113, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v112, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v114, 1, v112);
        E5RT::E5RTError::E5RTError(v100, v113, v114);
      }
      uint64_t v81 = (void *)*TensorStrides;
      long long v82 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *v104 && NumElements * v107 == **v18 * *v104)
      {
        v113[0] = v12;
        v112[0] = DataSpan;
        v114[0] = NumElements * NumComponents;
        uint64_t v93 = *(void *)(a5 + 24);
        if (!v93) {
          goto LABEL_89;
        }
LABEL_82:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v113, v112, v114);
      }
      else
      {
        uint64_t v84 = v80 >> 3;
        uint64_t v85 = (v80 >> 3) - 5;
        uint64_t v86 = (v80 >> 3) - 1;
        unint64_t v87 = v104[v85];
        if (v104[v84 - 3] * v104[v84 - 4] * v104[v84 - 2] * v104[v86] == 1)
        {
          if (v87)
          {
            uint64_t v88 = 0;
            uint64_t v89 = v86;
            uint64_t v90 = v81[v89];
            uint64_t v91 = v82[v89];
            while (1)
            {
              v113[0] = v12;
              v112[0] = DataSpan;
              v114[0] = NumComponents;
              uint64_t v92 = *(void *)(a5 + 24);
              if (!v92) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v92 + 48))(v92, v113, v112, v114);
              DataSpan += v90;
              v12 += v91;
              if ((unint64_t)++v88 >= v104[v85]) {
                goto LABEL_53;
              }
            }
LABEL_89:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v101 = v85;
          uint64_t v102 = v104[v85];
          uint64_t v95 = v81[v85];
          uint64_t v96 = v82[v85];
          v104[v85] = 1;
          if (v87)
          {
            unint64_t v97 = v87;
            unint64_t v98 = NumElements / v87;
            do
            {
              sub_1923F426C(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v108, NumComponents, ElementSize, v107, v98, v64, a5);
              DataSpan += v95;
              v12 += v96;
              --v97;
            }
            while (v97);
          }
          uint64_t v71 = v104;
          v104[v101] = v102;
        }
      }
      return;
    default:
      goto LABEL_48;
  }
LABEL_53:
  operator delete(v71);
LABEL_54:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v111);
}

void sub_1923F3A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a16;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a16;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923F3C10(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923F3ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923F3F40(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923F3C10(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923F41F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923F426C(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923F3F40(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923F4520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned char,short>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923F51C8((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923F54F8(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923F5824(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923F5824(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923F4FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923F51C8(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923F5484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923F54F8(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923F51C8(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923F57B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923F5824(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923F54F8(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923F5AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<signed char,short>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923F6780((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923F6AB0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923F6DDC(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923F6DDC(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923F657C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923F6780(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923F6A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923F6AB0(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923F6780(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923F6D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923F6DDC(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923F6AB0(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923F7090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<float,unsigned char>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923F7D38((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923F8068(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923F8394(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923F8394(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923F7B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923F7D38(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923F7FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923F8068(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923F7D38(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923F8320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923F8394(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923F8068(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923F8648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void _ZN4E5RT34ElementwiseOperationImplementationIDF16_hEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923F92F0((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923F9620(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923F994C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923F994C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923F90EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923F92F0(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923F95AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923F9620(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923F92F0(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923F98D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923F994C(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923F9620(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923F9C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned int,unsigned char>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923FA8A8((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923FABD8(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923FAF04(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923FAF04(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923FA6A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923FA8A8(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923FAB64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923FABD8(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923FA8A8(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923FAE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923FAF04(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923FABD8(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923FB1B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<int,unsigned char>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923FBE60((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923FC190(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923FC4BC(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923FC4BC(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923FBC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923FBE60(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923FC11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923FC190(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923FBE60(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923FC448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923FC4BC(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923FC190(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923FC770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned short,unsigned char>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923FD418((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923FD748(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923FDA74(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923FDA74(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923FD214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923FD418(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923FD6D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923FD748(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923FD418(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923FDA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923FDA74(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923FD748(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923FDD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<short,unsigned char>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v112);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          long long v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        long long v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  long long v109 = 0;
  int v110 = 0;
  uint64_t v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    long long __p = 0;
    uint64_t v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = operator new(v68 - *(void *)v67);
    uint64_t v72 = (char *)&v71[v70 >> 3];
    long long v109 = v71;
    uint64_t v111 = v72;
    long long __p = (char *)v71;
    memcpy(v71, v69, v70);
    int v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        long long v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923FE9D0((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1923FED00(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_1923FF02C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        uint64_t v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      long long v82 = (void *)*TensorStrides;
      uint64_t v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_1923FF02C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1923FE7CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923FE9D0(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          uint64_t v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_1923FEC8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1923FED00(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          uint64_t result = sub_1923FE9D0(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        uint64_t v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1923FEFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1923FF02C(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  uint64_t v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  unsigned int v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          uint64_t result = sub_1923FED00(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        uint64_t v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1923FF2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned char,unsigned char>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  uint64_t TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  Datauint64_t Span = (char *)E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = (char *)E5RT::BufferObject::GetDataSpan(a4);
  uint64_t TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v110, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v110);
  Elementuint64_t Size = E5RT::TensorDataType::GetElementSize(v110);
  unint64_t v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  uint64_t TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v105 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_35;
  }
  unsigned int v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_37;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_36;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_27:
      if (v26 <= NumElements)
      {
        uint64_t v60 = v20[v19];
        size_t v61 = v26 * NumComponents;
        uint64_t v62 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v63 = 1;
        }
        else {
          uint64_t v63 = NumElements / v26;
        }
        do
        {
          memcpy(v12, DataSpan, v61);
          DataSpan += v60;
          v12 += v62;
          --v63;
        }
        while (v63);
      }
      goto LABEL_54;
    }
    uint64_t v52 = *(void *)(v25 + 8 * v19);
    uint64_t v53 = v52 * v28;
    uint64_t v54 = v30 * v52;
    int64_t v55 = Rank - 3;
    while (1)
    {
      uint64_t v56 = v20[v55];
      uint64_t v57 = v56 - v53;
      uint64_t v58 = v23[v55];
      if (v57 != v58 - v54) {
        break;
      }
      uint64_t v59 = *(void *)(v25 + 8 * v55);
      uint64_t v54 = v58 * v59;
      uint64_t v53 = v59 * v56;
      BOOL v33 = v55-- <= 0;
      if (v33) {
        goto LABEL_27;
      }
    }
    if (v21 < 1) {
      goto LABEL_36;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_36:
    unsigned int v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_37:
    char v64 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_41;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_36;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_36;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      size_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        memcpy(v12, DataSpan, v49);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_54;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_35:
  if (Rank) {
    goto LABEL_36;
  }
  char v64 = 0;
LABEL_41:
  uint64_t v65 = E5RT::TensorDescriptor::GetTensorShape(a1);
  uint64_t v107 = 0;
  v108 = 0;
  long long v109 = 0;
  uint64_t v67 = *(const void **)v65;
  uint64_t v66 = *(void *)(v65 + 8);
  int64_t v68 = v66 - *(void *)v65;
  if (v66 == *(void *)v65)
  {
    long long __p = 0;
    int64_t v70 = 0;
    if (Rank > 5)
    {
LABEL_48:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v112, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v111, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v113, 2, v111);
      E5RT::E5RTError::E5RTError(exception, v112, v113);
    }
  }
  else
  {
    if (v68 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    v69 = (char *)operator new(v66 - *(void *)v65);
    int64_t v70 = &v69[8 * (v68 >> 3)];
    long long __p = v69;
    uint64_t v107 = v69;
    long long v109 = v70;
    memcpy(v69, v67, v68);
    v108 = v70;
  }
  switch(Rank)
  {
    case 0uLL:
      v112[0] = v12;
      v111[0] = DataSpan;
      v113[0] = NumComponents;
      uint64_t v71 = *(void *)(a5 + 24);
      if (!v71) {
        goto LABEL_89;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v71 + 48))(v71, v112, v111, v113);
LABEL_52:
      if (__p) {
        break;
      }
      goto LABEL_54;
    case 1uLL:
      if (v70 - __p <= 7)
      {
        unint64_t v98 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v112, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v111, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v113, 1, v111);
        E5RT::E5RTError::E5RTError(v98, v112, v113);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v105 == **v18 * *(void *)__p)
      {
        v112[0] = v12;
        v111[0] = DataSpan;
        v113[0] = NumElements * NumComponents;
        uint64_t v92 = *(void *)(a5 + 24);
        if (!v92) {
          goto LABEL_89;
        }
        goto LABEL_82;
      }
      uint64_t v74 = ((v70 - __p) >> 3) - 1;
      if ((v64 & 1) == 0)
      {
        uint64_t v93 = *(void *)&__p[8 * v74] * NumComponents;
        v112[0] = v12;
        v111[0] = DataSpan;
        v113[0] = v93;
        uint64_t v92 = *(void *)(a5 + 24);
        if (!v92) {
          goto LABEL_89;
        }
        goto LABEL_82;
      }
      if (*(void *)&__p[8 * v74])
      {
        uint64_t v75 = 0;
        uint64_t v76 = *(void *)(*TensorStrides + 8 * v74);
        uint64_t v77 = (*v18)[v74];
        while (1)
        {
          v112[0] = v12;
          v111[0] = DataSpan;
          v113[0] = NumComponents;
          uint64_t v78 = *(void *)(a5 + 24);
          if (!v78) {
            goto LABEL_89;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v78 + 48))(v78, v112, v111, v113);
          DataSpan += v76;
          v12 += v77;
          if ((unint64_t)++v75 >= *(void *)&__p[8 * v74]) {
            goto LABEL_53;
          }
        }
      }
      break;
    case 2uLL:
      sub_1923FFE90((void *)*TensorStrides, (uint64_t)DataSpan, *v18, (uint64_t)v12, (uint64_t)&v107, NumComponents, ElementSize, v105, NumElements, v64, a5);
      goto LABEL_52;
    case 3uLL:
      sub_1924001C0(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v107, NumComponents, ElementSize, v105, NumElements, v64, a5);
      goto LABEL_52;
    case 4uLL:
      sub_1924004EC(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v107, NumComponents, ElementSize, v105, NumElements, v64, a5);
      goto LABEL_52;
    case 5uLL:
      uint64_t v79 = v70 - __p;
      if (v70 - __p <= 39)
      {
        unint64_t v99 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v112, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v111, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v113, 1, v111);
        E5RT::E5RTError::E5RTError(v99, v112, v113);
      }
      uint64_t v80 = (void *)*TensorStrides;
      uint64_t v81 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v105 == **v18 * *(void *)__p)
      {
        v112[0] = v12;
        v111[0] = DataSpan;
        v113[0] = NumElements * NumComponents;
        uint64_t v92 = *(void *)(a5 + 24);
        if (!v92) {
          goto LABEL_89;
        }
LABEL_82:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v92 + 48))(v92, v112, v111, v113);
      }
      else
      {
        uint64_t v83 = v79 >> 3;
        uint64_t v84 = (v79 >> 3) - 5;
        uint64_t v85 = (v79 >> 3) - 1;
        unint64_t v86 = *(void *)&__p[8 * v84];
        if (*(void *)&__p[8 * v83 - 24]
           * *(void *)&__p[8 * v83 - 32]
           * *(void *)&__p[8 * v83 - 16]
           * *(void *)&__p[8 * v85] == 1)
        {
          if (v86)
          {
            uint64_t v87 = 0;
            uint64_t v88 = v85;
            uint64_t v89 = v80[v88];
            uint64_t v90 = v81[v88];
            while (1)
            {
              v112[0] = v12;
              v111[0] = DataSpan;
              v113[0] = NumComponents;
              uint64_t v91 = *(void *)(a5 + 24);
              if (!v91) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v91 + 48))(v91, v112, v111, v113);
              DataSpan += v89;
              v12 += v90;
              if ((unint64_t)++v87 >= *(void *)&__p[8 * v84]) {
                goto LABEL_53;
              }
            }
LABEL_89:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v100 = v84;
          uint64_t v101 = *(void *)&__p[8 * v84];
          uint64_t v94 = v80[v84];
          uint64_t v95 = v81[v84];
          *(void *)&__p[8 * v84] = 1;
          if (v86)
          {
            unint64_t v96 = v86;
            unint64_t v97 = NumElements / v86;
            do
            {
              sub_1924004EC(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v107, NumComponents, ElementSize, v105, v97, v64, a5);
              DataSpan += v94;
              v12 += v95;
              --v96;
            }
            while (v96);
          }
          *(void *)&__p[8 * v100] = v101;
        }
      }
      return;
    default:
      goto LABEL_48;
  }
LABEL_53:
  operator delete(__p);
LABEL_54:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v110);
}