void sub_19251123C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  if (a29 < 0)
  {
    operator delete(__p);
    if ((a36 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
LABEL_6:
    if (*(char *)(v36 - 73) < 0)
    {
      operator delete(*(void **)(v36 - 96));
      if ((*(char *)(v36 - 49) & 0x80000000) == 0) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
    }
    else if ((*(char *)(v36 - 49) & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(*(void **)(v36 - 72));
    _Unwind_Resume(exception_object);
  }
  operator delete(a31);
  goto LABEL_6;
}

void *Espresso::AOT::MILCompilerForJitCall::MILCompilerForJitCall(void *a1, const Espresso::AOT::AOTCompilerOptions *a2, uint64_t a3)
{
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v18, a2);
  v6 = *(void **)a3;
  unint64_t v7 = *(void *)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  v8 = *(void **)(a3 + 16);
  __p[0] = v6;
  __p[1] = (void *)v7;
  v9 = *(void **)(a3 + 24);
  v16[0] = v8;
  v16[1] = v9;
  int v17 = *(_DWORD *)(a3 + 32);
  if (v9)
  {
    unint64_t v10 = v8[1];
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v10 >= v7) {
        v10 %= v7;
      }
    }
    else
    {
      v10 &= v7 - 1;
    }
    *((void *)v6 + v10) = v16;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
  }
  Espresso::AOT::AbstractMILCompiler::AbstractMILCompiler((uint64_t)a1, (const Espresso::AOT::AOTCompilerOptions *)v18, (uint64_t)__p);
  v11 = (void **)v16[0];
  if (v16[0])
  {
    do
    {
      v14 = (void **)*v11;
      if (*((char *)v11 + 63) < 0)
      {
        operator delete(v11[5]);
        if (*((char *)v11 + 39) < 0) {
LABEL_16:
        }
          operator delete(v11[2]);
      }
      else if (*((char *)v11 + 39) < 0)
      {
        goto LABEL_16;
      }
      operator delete(v11);
      v11 = v14;
    }
    while (v14);
  }
  v12 = __p[0];
  __p[0] = 0;
  if (v12) {
    operator delete(v12);
  }
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v18);
  *a1 = &unk_1EE36B478;
  Espresso::AOT::MILCompilerForJitCall::ExtractOptions(a2, (uint64_t)(a1 + 33));
  a1[36] = 0;
  a1[37] = 0;
  a1[38] = 0;
  return a1;
}

void sub_1925118B4(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractMILCompiler::~AbstractMILCompiler(v1);
  _Unwind_Resume(a1);
}

void sub_1925118C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void Espresso::AOT::MILCompilerForJitCall::ExtractOptions(Espresso::AOT::MILCompilerForJitCall *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t Output = Espresso::AOT::AOTCompilerOptions::GetOutput(this);
  if ((*(char *)(Output + 23) & 0x80000000) == 0)
  {
    long long v5 = *(_OWORD *)Output;
    unint64_t v6 = *(void *)(Output + 16);
    *(void *)(a2 + 16) = v6;
    *(_OWORD *)a2 = v5;
    unint64_t v7 = HIBYTE(v6);
    if ((v7 & 0x80u) != 0) {
      unint64_t v7 = *(void *)(a2 + 8);
    }
    if (v7) {
      return;
    }
LABEL_9:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "--output is required and must be non-empty.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)Output, *(void *)(Output + 8));
  uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  if (!v8) {
    goto LABEL_9;
  }
}

void sub_1925119BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::MILCompilerForJitCall::Options::AssertValid(uint64_t this)
{
  if ((*(char *)(this + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(this + 23)) {
      return this;
    }
LABEL_5:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "--output is required and must be non-empty.");
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  if (!*(void *)(this + 8)) {
    goto LABEL_5;
  }
  return this;
}

void sub_192511A58(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForJitCall::Run(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v45 = 0x2B23831400000000;
  long long v46 = 0u;
  long long v47 = 0u;
  kdebug_trace();
  unint64_t v6 = a3;
  uint64_t v5 = *a3;
  if (v6[1] - v5 != 24)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Only one entry point is supported.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t Function = MIL::IRProgram::GetFunction();
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)Function + 40))(Function);
  v9 = (char ***)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 56))(v8);
  unint64_t v10 = **v9;
  if ((*v9)[1] - v10 != 16)
  {
    v31 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v31, "Only one op in block is supported.");
    v31->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(v31, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t v11 = *(void *)v10;
  uint64_t v12 = (*(uint64_t (**)(void))(**(void **)v10 + 64))(*(void *)v10);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v12 + 128))(v12) & 1) == 0)
  {
    v32 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v32, "Only call op in block is supported.");
    v32->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(v32, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 64))(v11);
  (*(void (**)(void **__return_ptr))(*(void *)v13 + 120))(v43);
  uint64_t v14 = MIL::IRProgram::GetFunction();
  Espresso::AOT::MakeIRProgramWithFunction(v14, 1, (uint64_t)v43, &v42);
  memset(&v41, 0, sizeof(v41));
  char v15 = *(unsigned char *)(a1 + 287);
  if (v15 >= 0) {
    v16 = (std::string *)(a1 + 264);
  }
  else {
    v16 = *(std::string **)(a1 + 264);
  }
  if (v15 >= 0) {
    uint64_t v17 = *(unsigned __int8 *)(a1 + 287);
  }
  else {
    uint64_t v17 = *(void *)(a1 + 272);
  }
  std::string::append[abi:ne180100]<char const*,0>(&v41.__pn_, v16, (std::string *)((char *)v16 + v17));
  memset(&__dst, 0, sizeof(__dst));
  uint64_t v18 = *(unsigned __int8 *)(v5 + 23);
  if ((v18 & 0x80u) == 0) {
    v19 = (std::string *)v5;
  }
  else {
    v19 = *(std::string **)v5;
  }
  if ((v18 & 0x80u) != 0) {
    uint64_t v18 = *(void *)(v5 + 8);
  }
  std::string::append[abi:ne180100]<char const*,0>(&__dst, v19, (std::string *)((char *)v19 + v18));
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__dst, (uint64_t)&v41, &v40);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::__create_directories(&v40, 0);
  memset(&__dst, 0, sizeof(__dst));
  std::string::append[abi:ne180100]<char const*,0>(&__dst, (std::string *)"jit_call.mil", (std::string *)"");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__dst, (uint64_t)&v40, &v39);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::path::__string_view v20 = std::__fs::filesystem::path::__parent_path(&v41);
  if (v20.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v20.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v22 = (v20.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v22 = v20.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v23 = v22 + 1;
    p_dst = (std::string *)operator new(v22 + 1);
    __dst.__r_.__value_.__l.__size_ = v20.__size_;
    __dst.__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_26;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v20.__size_;
  p_dst = &__dst;
  if (v20.__size_) {
LABEL_26:
  }
    memmove(p_dst, v20.__data_, v20.__size_);
  p_dst->__r_.__value_.__s.__data_[v20.__size_] = 0;
  __base.__pn_ = __dst;
  std::__fs::filesystem::path::lexically_relative(&v38, &v39, &__base);
  if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__base.__pn_.__r_.__value_.__l.__data_);
  }
  memset(&__base, 0, sizeof(__base));
  std::string::append[abi:ne180100]<char const*,0>(&__base.__pn_, (std::string *)"weights.bin", (std::string *)"");
  std::__fs::filesystem::operator/[abi:ne180100](&__base, (uint64_t)&v40, (std::__fs::filesystem::path *)&__dst);
  if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__base.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v38.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
  }
  else if ((SHIBYTE(v38.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_31:
    std::__fs::filesystem::path __base = v38;
    goto LABEL_34;
  }
  std::string::__init_copy_ctor_external(&__base.__pn_, v38.__pn_.__r_.__value_.__l.__data_, v38.__pn_.__r_.__value_.__l.__size_);
LABEL_34:
  v24 = (void **)(a1 + 288);
  if (*(char *)(a1 + 311) < 0) {
    operator delete(*v24);
  }
  *(_OWORD *)v24 = *(_OWORD *)&__base.__pn_.__r_.__value_.__l.__data_;
  *(void *)(a1 + 304) = *((void *)&__base.__pn_.__r_.__value_.__l + 2);
  uint64_t v25 = v42;
  if (SHIBYTE(v39.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&pn, v39.__pn_.__r_.__value_.__l.__data_, v39.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string pn = v39.__pn_;
  }
  if (SHIBYTE(v40.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v35, v40.__pn_.__r_.__value_.__l.__data_, v40.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string v35 = v40.__pn_;
  }
  if (Espresso::AOT::AOTCompilerBackend::IsOnDeviceCompilation((Espresso::AOT::AOTCompilerBackend *)a1))
  {
    memset(&__base, 0, sizeof(__base));
    std::string::append[abi:ne180100]<char const*,0>(&__base.__pn_, (std::string *)"", (std::string *)"");
  }
  else if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__base.__pn_, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  }
  else
  {
    __base.__pn_ = __dst;
  }
  if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v34, __base.__pn_.__r_.__value_.__l.__data_, __base.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string v34 = __base.__pn_;
  }
  Espresso::MILUtil::SerializeProgram(v25, (uint64_t)&pn, (uint64_t)&v35, (uint64_t)&v34, 0x100000004, 0);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v34.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_52:
      if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_53;
      }
      goto LABEL_58;
    }
  }
  else if ((SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_52;
  }
  operator delete(__base.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_53:
    if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_54;
    }
LABEL_59:
    operator delete(pn.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v39.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_60;
  }
LABEL_58:
  operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_59;
  }
LABEL_54:
  if ((SHIBYTE(v39.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_55:
    std::string __p = v39.__pn_;
    goto LABEL_61;
  }
LABEL_60:
  std::string::__init_copy_ctor_external(&__p, v39.__pn_.__r_.__value_.__l.__data_, v39.__pn_.__r_.__value_.__l.__size_);
LABEL_61:
  __base.__pn_ = __p;
  memset(&__p, 0, sizeof(__p));
  std::__fs::filesystem::__status(&__base, 0);
  unsigned __int8 v26 = v49;
  if ((SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_63;
    }
LABEL_66:
    operator delete(__p.__r_.__value_.__l.__data_);
    int v27 = v26;
    if (v26 == 255) {
      goto LABEL_86;
    }
    goto LABEL_67;
  }
  operator delete(__base.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_66;
  }
LABEL_63:
  int v27 = v26;
  if (v26 == 255)
  {
LABEL_86:
    v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v29, "Failed in serializing JITCall MIL program on disk.");
    __cxa_throw(v29, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_67:
  if (!v27) {
    goto LABEL_86;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v38.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_70:
      if ((SHIBYTE(v39.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_71;
      }
      goto LABEL_82;
    }
  }
  else if ((SHIBYTE(v38.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_70;
  }
  operator delete(v38.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v39.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_71:
    if ((SHIBYTE(v40.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_72;
    }
    goto LABEL_83;
  }
LABEL_82:
  operator delete(v39.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v40.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_72:
    if ((SHIBYTE(v41.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_73;
    }
    goto LABEL_84;
  }
LABEL_83:
  operator delete(v40.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v41.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_73:
    uint64_t v28 = v42;
    uint64_t v42 = 0;
    if (!v28) {
      goto LABEL_75;
    }
    goto LABEL_74;
  }
LABEL_84:
  operator delete(v41.__pn_.__r_.__value_.__l.__data_);
  uint64_t v28 = v42;
  uint64_t v42 = 0;
  if (v28) {
LABEL_74:
  }
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
LABEL_75:
  if (v44 < 0) {
    operator delete(v43[0]);
  }
  if (E5RT::g_trace_analysis_level >= v45) {
    kdebug_trace();
  }
}

void sub_192512250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (*(char *)(v60 - 73) < 0) {
    operator delete(*(void **)(v60 - 96));
  }
  if (a48 < 0) {
    operator delete(__p);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  if (*(char *)(v60 - 169) < 0)
  {
    operator delete(*(void **)(v60 - 192));
    uint64_t v62 = *(void *)(v60 - 168);
    *(void *)(v60 - 168) = 0;
    if (!v62)
    {
LABEL_11:
      if ((*(char *)(v60 - 137) & 0x80000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v62 = *(void *)(v60 - 168);
    *(void *)(v60 - 168) = 0;
    if (!v62) {
      goto LABEL_11;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v62 + 8))(v62);
  if ((*(char *)(v60 - 137) & 0x80000000) == 0)
  {
LABEL_12:
    E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v60 - 136));
    _Unwind_Resume(a1);
  }
LABEL_15:
  operator delete(*(void **)(v60 - 160));
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v60 - 136));
  _Unwind_Resume(a1);
}

void sub_19251251C(_Unwind_Exception *a1)
{
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v1 - 136));
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForJitCall::GetOutputPaths(Espresso::AOT::MILCompilerForJitCall *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (*((char *)this + 311) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 36), *((void *)this + 37));
  }
  else {
    std::string __p = *(std::string *)((unsigned char *)this + 12);
  }
  std::vector<std::string>::vector[abi:ne180100](a2, (uint64_t)&__p, 1uLL);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1925125D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::MILCompilerForJitCall::GetOptions(Espresso::AOT::MILCompilerForJitCall *this)
{
  return (uint64_t)this + 264;
}

void Espresso::AOT::MILCompilerForJitCall::~MILCompilerForJitCall(void **this)
{
  Espresso::AOT::MILCompilerForJitCall::~MILCompilerForJitCall(this);

  JUMPOUT(0x192FF16B0);
}

{
  void **v2;
  Espresso::AOT::AOTCompilerBackend *v3;
  void **v4;
  void *v5;
  uint64_t vars8;

  *this = &unk_1EE36B478;
  if (*((char *)this + 311) < 0)
  {
    operator delete(this[36]);
    if ((*((char *)this + 287) & 0x80000000) == 0)
    {
LABEL_3:
      *this = &unk_1EE36B370;
      v2 = (void **)this[29];
      if (!v2) {
        goto LABEL_4;
      }
LABEL_11:
      uint64_t v4 = (void **)this[30];
      if (v4 == v2)
      {
        this[30] = v2;
        operator delete(v2);
        if (*((char *)this + 231) < 0) {
          goto LABEL_18;
        }
      }
      else
      {
        do
        {
          if (*((char *)v4 - 1) < 0) {
            operator delete(*(v4 - 3));
          }
          v4 -= 3;
        }
        while (v4 != v2);
        uint64_t v5 = this[29];
        this[30] = v2;
        operator delete(v5);
        if (*((char *)this + 231) < 0) {
          goto LABEL_18;
        }
      }
LABEL_5:
      if ((*((char *)this + 207) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_19;
    }
  }
  else if ((*((char *)this + 287) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[33]);
  *this = &unk_1EE36B370;
  v2 = (void **)this[29];
  if (v2) {
    goto LABEL_11;
  }
LABEL_4:
  if ((*((char *)this + 231) & 0x80000000) == 0) {
    goto LABEL_5;
  }
LABEL_18:
  operator delete(this[26]);
  if ((*((char *)this + 207) & 0x80000000) == 0)
  {
LABEL_6:
    v3 = (Espresso::AOT::AOTCompilerBackend *)this;
    goto LABEL_8;
  }
LABEL_19:
  operator delete(this[23]);
  v3 = (Espresso::AOT::AOTCompilerBackend *)this;

LABEL_8:
  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(v3);
}

void Espresso::AOT::Backends::CostModel::ConcatOpEstimator::EstimateComputeResources(Espresso::AOT::Backends::CostModel::ConcatOpEstimator *this, const MIL::IROperation *a2)
{
}

void sub_192512A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  *char v15 = 0;
  MEMORY[0x192FF16B0](v16, 0x1000C401CC6BE04);
  _Unwind_Resume(a1);
}

void *Espresso::AOT::MILCompilerForClassicCpu::MILCompilerForClassicCpu(void *a1, const Espresso::AOT::AOTCompilerOptions *a2, uint64_t a3)
{
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v18, a2);
  unint64_t v6 = *(void **)a3;
  unint64_t v7 = *(void *)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v8 = *(void **)(a3 + 16);
  __p[0] = v6;
  __p[1] = (void *)v7;
  v9 = *(void **)(a3 + 24);
  v16[0] = v8;
  v16[1] = v9;
  int v17 = *(_DWORD *)(a3 + 32);
  if (v9)
  {
    unint64_t v10 = v8[1];
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v10 >= v7) {
        v10 %= v7;
      }
    }
    else
    {
      v10 &= v7 - 1;
    }
    *((void *)v6 + v10) = v16;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
  }
  Espresso::AOT::AbstractMILCompiler::AbstractMILCompiler((uint64_t)a1, (const Espresso::AOT::AOTCompilerOptions *)v18, (uint64_t)__p);
  uint64_t v11 = (void **)v16[0];
  if (v16[0])
  {
    do
    {
      uint64_t v14 = (void **)*v11;
      if (*((char *)v11 + 63) < 0)
      {
        operator delete(v11[5]);
        if (*((char *)v11 + 39) < 0) {
LABEL_16:
        }
          operator delete(v11[2]);
      }
      else if (*((char *)v11 + 39) < 0)
      {
        goto LABEL_16;
      }
      operator delete(v11);
      uint64_t v11 = v14;
    }
    while (v14);
  }
  uint64_t v12 = __p[0];
  __p[0] = 0;
  if (v12) {
    operator delete(v12);
  }
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v18);
  *a1 = &unk_1EE36B588;
  Espresso::AOT::MILCompilerForClassicCpu::ExtractOptions(a2, (uint64_t)(a1 + 33));
  a1[37] = 0;
  a1[38] = 0;
  a1[39] = 0;
  return a1;
}

void sub_192512BA0(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractMILCompiler::~AbstractMILCompiler(v1);
  _Unwind_Resume(a1);
}

void sub_192512BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void Espresso::AOT::MILCompilerForClassicCpu::ExtractOptions(Espresso::AOT::MILCompilerForClassicCpu *this@<X0>, uint64_t a2@<X8>)
{
  HIBYTE(__p[2]) = 3;
  LODWORD(__p[0]) = 7696483;
  Espresso::AOT::AOTCompilerOptions::GetOptions((uint64_t)this, (uint64_t)__p, (uint64_t)v24);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  uint64_t Output = Espresso::AOT::AOTCompilerOptions::GetOutput(this);
  if (*(char *)(Output + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)Output, *(void *)(Output + 8));
  }
  else
  {
    long long v6 = *(_OWORD *)Output;
    *(void *)(a2 + 16) = *(void *)(Output + 16);
    *(_OWORD *)a2 = v6;
  }
  *(_WORD *)(a2 + 24) = 0;
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "use-fast-reshape");
  unint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v24, (uint64_t)__p);
  uint64_t v8 = v7;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if (!v8) {
      goto LABEL_12;
    }
  }
  else if (!v7)
  {
    goto LABEL_12;
  }
  if (*((_DWORD *)v8 + 16)) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  *(unsigned char *)(a2 + 24) = *((unsigned char *)v8 + 40);
LABEL_12:
  char v22 = 2;
  strcpy((char *)v21, "e5");
  Espresso::AOT::AOTCompilerOptions::GetOptions((uint64_t)this, (uint64_t)v21, (uint64_t)__p);
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  char v22 = 12;
  strcpy((char *)v21, "dump-ir-only");
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(__p, (uint64_t)v21);
  unint64_t v10 = v9;
  if (v22 < 0)
  {
    operator delete(v21[0]);
    if (!v10) {
      goto LABEL_20;
    }
  }
  else if (!v9)
  {
    goto LABEL_20;
  }
  if (*((_DWORD *)v10 + 16)) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  *(unsigned char *)(a2 + 25) = *((unsigned char *)v10 + 40);
LABEL_20:
  uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *(void *)(a2 + 8);
  }
  if (!v11)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "--output is required and must be non-empty.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t v12 = (void **)__p[2];
  if (__p[2])
  {
    do
    {
      uint64_t v13 = (void **)*v12;
      uint64_t v14 = *((unsigned int *)v12 + 16);
      if (v14 != -1) {
        ((void (*)(void **, void **))off_1EE39B988[v14])(v21, v12 + 5);
      }
      *((_DWORD *)v12 + 16) = -1;
      if (*((char *)v12 + 39) < 0) {
        operator delete(v12[2]);
      }
      operator delete(v12);
      uint64_t v12 = v13;
    }
    while (v13);
  }
  char v15 = __p[0];
  __p[0] = 0;
  if (v15) {
    operator delete(v15);
  }
  uint64_t v16 = (void **)v25;
  if (v25)
  {
    do
    {
      int v17 = (void **)*v16;
      uint64_t v18 = *((unsigned int *)v16 + 16);
      if (v18 != -1) {
        ((void (*)(void **, void **))off_1EE39B988[v18])(__p, v16 + 5);
      }
      *((_DWORD *)v16 + 16) = -1;
      if (*((char *)v16 + 39) < 0) {
        operator delete(v16[2]);
      }
      operator delete(v16);
      uint64_t v16 = v17;
    }
    while (v17);
  }
  v19 = v24[0];
  v24[0] = 0;
  if (v19) {
    operator delete(v19);
  }
}

void sub_192512EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>::~unordered_map[abi:ne180100]((uint64_t)&a16);
  if (*(char *)(v24 + 23) < 0) {
    operator delete(*(void **)v24);
  }
  std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>::~unordered_map[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::MILCompilerForClassicCpu::Options::AssertValid(uint64_t this)
{
  if ((*(char *)(this + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(this + 23)) {
      return this;
    }
LABEL_5:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "--output is required and must be non-empty.");
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  if (!*(void *)(this + 8)) {
    goto LABEL_5;
  }
  return this;
}

void sub_192512FDC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForClassicCpu::AddNetProperties(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v7 = (uint64_t **)(*a4 + 472);
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&__p, "useValueInference");
  v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v8 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v7, &__p, (uint64_t)&std::piecewise_construct, &v56);
  MEMORY[0x192FF0F50]((char *)v8 + 56, "1");
  uint64_t v52 = a3;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v9 = *a4;
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 18;
  strcpy((char *)&__p, "ane_compiler_batch");
  for (i = *(uint64_t ***)(v9 + 480); i; i = (uint64_t **)*i)
  {
    int v11 = *((char *)i + 55);
    if (v11 >= 0) {
      unint64_t v12 = *((unsigned __int8 *)i + 55);
    }
    else {
      unint64_t v12 = (unint64_t)i[5];
    }
    if (v11 >= 0) {
      uint64_t v13 = (uint64_t *)(i + 4);
    }
    else {
      uint64_t v13 = i[4];
    }
    if (v12 >= 0x12) {
      size_t v14 = 18;
    }
    else {
      size_t v14 = v12;
    }
    int v15 = memcmp(&__p, v13, v14);
    BOOL v16 = v15 < 0;
    if (!v15) {
      BOOL v16 = v12 > 0x12;
    }
    if (!v16)
    {
      int v17 = memcmp(v13, &__p, v14);
      BOOL v18 = v12 < 0x12;
      if (v17) {
        BOOL v18 = v17 < 0;
      }
      if (!v18)
      {
        uint64_t v20 = v52;
        uint64_t Function = MIL::IRProgram::GetFunction();
        if (Espresso::AOT::HasFlexibleShapeWithRangeConfig(Function)) {
          goto LABEL_28;
        }
        goto LABEL_31;
      }
      ++i;
    }
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 18;
  strcpy((char *)&__p, "ane_compiler_batch");
  v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v9 + 472), &__p, (uint64_t)&std::piecewise_construct, &v56);
  MEMORY[0x192FF0F50]((char *)v19 + 56, "1");
  uint64_t v20 = v52;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    uint64_t v22 = MIL::IRProgram::GetFunction();
    if (!Espresso::AOT::HasFlexibleShapeWithRangeConfig(v22)) {
      goto LABEL_31;
    }
  }
  else
  {
    uint64_t v21 = MIL::IRProgram::GetFunction();
    if (!Espresso::AOT::HasFlexibleShapeWithRangeConfig(v21)) {
      goto LABEL_31;
    }
  }
LABEL_28:
  if (*(unsigned char *)(a1 + 288))
  {
    uint64_t v24 = (uint64_t **)(*a4 + 472);
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&__p, "fast_reshape");
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    uint64_t v25 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v24, &__p, (uint64_t)&std::piecewise_construct, &v56);
    MEMORY[0x192FF0F50]((char *)v25 + 56, "1");
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
LABEL_31:
  unsigned __int8 v26 = (std::__shared_weak_count *)a4[1];
  uint64_t v53 = *a4;
  v54 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a2 + 48))(&v63, a2);
  uint64_t v27 = MIL::IRProgram::GetFunction();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 64))(&v61, a2, v20);
  (*(void (**)(uint64_t))(*(void *)v61 + 48))(v61);
  uint64_t v58 = v63;
  v59 = v64;
  if (v64) {
    atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 32))(v27);
  if (*(char *)(v28 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v28, *(void *)(v28 + 8));
  }
  else
  {
    long long v29 = *(_OWORD *)v28;
    __p.__r_.__value_.__r.__words[2] = *(void *)(v28 + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v29;
  }
  MIL::Builder::BlockBuilder::Make();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v30 = v59;
  if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  v31 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v27 + 128))(v27);
  v33 = v31 + 1;
  std::string v34 = (void *)*v31;
  if ((void *)*v31 != v31 + 1)
  {
    do
    {
      if (E5Common::Utils::IsPixelBuffer((E5Common::Utils *)v34[7], v32))
      {
        std::string v35 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType((MIL::IRValueType *)v34[7]);
        v36 = (MIL::IRPixelBufferValueType *)MIL::IRMemoryLayoutValueType::AsPixelBufferType(v35);
        int PixelFormatType = MIL::IRPixelBufferValueType::GetPixelFormatType(v36);
        switch(PixelFormatType)
        {
          case 1:
            std::__fs::filesystem::path v38 = &unk_192DC55E0;
            break;
          case 2:
            std::__fs::filesystem::path v38 = &unk_192DC55DC;
            break;
          case 12:
            break;
          case 14:
            std::__fs::filesystem::path v38 = &unk_192DC55D8;
            break;
          default:
            std::__fs::filesystem::path v38 = &unk_192DC55E4;
            break;
        }
        if (v38
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          MIL::IRPixelFormatTypeToString();
          v48 = std::string::insert(&v55, 0, "Unsupported IRPixelFormatType: ");
          long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
          v56.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v49;
          v48->__r_.__value_.__l.__size_ = 0;
          v48->__r_.__value_.__r.__words[2] = 0;
          v48->__r_.__value_.__r.__words[0] = 0;
          std::logic_error::logic_error(exception, &v56);
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
          __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
        }
        unsigned int v39 = PixelFormatType & 0xFFFFFFFD;
        if ((PixelFormatType & 0xFFFFFFFD) == 0xC
          && *(void *)(MIL::Builder::BlockBuilder::GetOperationsByInput() + 24) != 1)
        {
          v50 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v50, "Found multiple consumers for a pixel buffer which is not supported.");
          v50->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
          __cxa_throw(v50, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
        }
        BOOL v40 = v39 == 12;
        v56.__r_.__value_.__r.__words[0] = (std::string::size_type)(v34 + 4);
        *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v53 + 328), v34 + 4, (uint64_t)&std::piecewise_construct, (long long **)&v56)+ 16) = v40;
        v56.__r_.__value_.__r.__words[0] = (std::string::size_type)(v34 + 4);
        *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v53 + 328), v34 + 4, (uint64_t)&std::piecewise_construct, (long long **)&v56)+ 17) = v40;
        v56.__r_.__value_.__r.__words[0] = (std::string::size_type)(v34 + 4);
        *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v53 + 328), v34 + 4, (uint64_t)&std::piecewise_construct, (long long **)&v56)+ 14) = 1065353216;
        v56.__r_.__value_.__r.__words[0] = (std::string::size_type)(v34 + 4);
        *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v53 + 328), v34 + 4, (uint64_t)&std::piecewise_construct, (long long **)&v56)+ 15) = 0;
        v56.__r_.__value_.__r.__words[0] = (std::string::size_type)(v34 + 4);
        *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v53 + 328), v34 + 4, (uint64_t)&std::piecewise_construct, (long long **)&v56)+ 18) = 0;
        v56.__r_.__value_.__r.__words[0] = (std::string::size_type)(v34 + 4);
        *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v53 + 328), v34 + 4, (uint64_t)&std::piecewise_construct, (long long **)&v56)+ 19) = 0;
        v56.__r_.__value_.__r.__words[0] = (std::string::size_type)(v34 + 4);
        *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v53 + 328), v34 + 4, (uint64_t)&std::piecewise_construct, (long long **)&v56)+ 20) = 0;
        v56.__r_.__value_.__r.__words[0] = (std::string::size_type)(v34 + 4);
        *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v53 + 328), v34 + 4, (uint64_t)&std::piecewise_construct, (long long **)&v56)+ 21) = 0;
      }
      std::__fs::filesystem::path v41 = (void *)v34[1];
      if (v41)
      {
        do
        {
          uint64_t v42 = v41;
          std::__fs::filesystem::path v41 = (void *)*v41;
        }
        while (v41);
      }
      else
      {
        do
        {
          uint64_t v42 = (void *)v34[2];
          BOOL v43 = *v42 == (void)v34;
          std::string v34 = v42;
        }
        while (!v43);
      }
      std::string v34 = v42;
    }
    while (v42 != v33);
  }
  uint64_t v44 = v60;
  uint64_t v60 = 0;
  if (v44) {
    (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
  }
  uint64_t v45 = v62;
  if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  long long v46 = v64;
  if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
  if (v54)
  {
    if (!atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
}

void sub_192513884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36)
{
  if (a34 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::MILCompilerForClassicCpu::Run(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  uint64_t v67 = 0x2B23806000000000;
  long long v68 = 0u;
  long long v69 = 0u;
  kdebug_trace();
  long long v6 = a3;
  uint64_t v5 = *a3;
  if (v6[1] - v5 != 24)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Only one entry point is supported.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t Function = MIL::IRProgram::GetFunction();
  v72.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE37CDD0;
  v73 = &v72;
  char v8 = MIL::Util::Walk();
  if (v73 == &v72)
  {
    (*(void (**)(std::__fs::filesystem::path *))(v72.__pn_.__r_.__value_.__r.__words[0] + 32))(&v72);
  }
  else if (v73)
  {
    (*(void (**)(std::__fs::filesystem::path *))(v73->__pn_.__r_.__value_.__r.__words[0] + 40))(v73);
  }
  if ((v8 & 1) == 0)
  {
    v37 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v37, "Nested functions are not supported.");
    v37->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(v37, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  char v66 = 4;
  strcpy((char *)v65, "main");
  Espresso::AOT::MakeIRProgramWithFunction(Function, 1, v5, &v64);
  Espresso::AOT::ReplacePixelBufferByTensor(v64, (uint64_t *)&v63);
  Espresso::AOT::ReplaceTensorBufferByTensor(v63, (uint64_t *)&v72);
  std::string::size_type v9 = v72.__pn_.__r_.__value_.__r.__words[0];
  v72.__pn_.__r_.__value_.__r.__words[0] = 0;
  uint64_t v10 = v63;
  std::string::size_type v63 = v9;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    std::string::size_type v11 = v72.__pn_.__r_.__value_.__r.__words[0];
    v72.__pn_.__r_.__value_.__r.__words[0] = 0;
    if (v11) {
      (*(void (**)(std::string::size_type))(*(void *)v11 + 8))(v11);
    }
  }
  Espresso::AOT::ReplaceGatherNDWithGather(v63, (uint64_t *)&v72);
  std::string::size_type v12 = v72.__pn_.__r_.__value_.__r.__words[0];
  v72.__pn_.__r_.__value_.__r.__words[0] = 0;
  uint64_t v13 = v63;
  std::string::size_type v63 = v12;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    std::string::size_type v14 = v72.__pn_.__r_.__value_.__r.__words[0];
    v72.__pn_.__r_.__value_.__r.__words[0] = 0;
    if (v14) {
      (*(void (**)(std::string::size_type))(*(void *)v14 + 8))(v14);
    }
  }
  memset(&v62, 0, sizeof(v62));
  char v15 = *(unsigned char *)(a1 + 287);
  if (v15 >= 0) {
    BOOL v16 = (std::string *)(a1 + 264);
  }
  else {
    BOOL v16 = *(std::string **)(a1 + 264);
  }
  if (v15 >= 0) {
    uint64_t v17 = *(unsigned __int8 *)(a1 + 287);
  }
  else {
    uint64_t v17 = *(void *)(a1 + 272);
  }
  std::string::append[abi:ne180100]<char const*,0>(&v62.__pn_, v16, (std::string *)((char *)v16 + v17));
  memset(&v72, 0, sizeof(v72));
  uint64_t v18 = *(unsigned __int8 *)(v5 + 23);
  if ((v18 & 0x80u) == 0) {
    v19 = (std::string *)v5;
  }
  else {
    v19 = *(std::string **)v5;
  }
  if ((v18 & 0x80u) != 0) {
    uint64_t v18 = *(void *)(v5 + 8);
  }
  std::string::append[abi:ne180100]<char const*,0>(&v72.__pn_, v19, (std::string *)((char *)v19 + v18));
  std::__fs::filesystem::operator/[abi:ne180100](&v72, (uint64_t)&v62, &v61);
  if (SHIBYTE(v72.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v72.__pn_.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::__create_directories(&v61, 0);
  __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&__dst.__pn_.__r_.__value_.__r.__words[1] = xmmword_192DAB6B0;
  strcpy(__dst.__pn_.__r_.__value_.__l.__data_, "ESPRESSO_VALUE_INFERENCE_DUMP_PATH");
  if (SHIBYTE(v61.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&pn, v61.__pn_.__r_.__value_.__l.__data_, v61.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string pn = v61.__pn_;
  }
  Espresso::scoped_env_var_kv::scoped_env_var_kv(&v72.__pn_, (long long *)&__dst, (uint64_t)&pn);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(pn.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_31:
      if (*(unsigned char *)(a1 + 289)) {
        goto LABEL_32;
      }
LABEL_41:
      espresso_tmp_enable_montreal(1);
      uint64_t v51 = v63;
      if (v63) {
        operator new();
      }
      uint64_t v52 = 0;
      std::string::size_type v63 = 0;
      *((unsigned char *)&__dst.__pn_.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&__dst, "main");
      Espresso::MILTranslator::TranslateProgram((MIL::PassManager *)&v51, (uint64_t)&__dst, 0, 1, 1, 0, &v53);
      if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
      }
      uint64_t v21 = v52;
      if (v52 && !atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
      if (!v53)
      {
        std::__fs::filesystem::path v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v38, "Failed to translate MIL program to Espresso network.");
        __cxa_throw(v38, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      uint64_t v22 = v64;
      std::basic_string_view<_CharT, _Traits>::size_type v23 = v54;
      v50[0] = v53;
      v50[1] = v54;
      if (v54) {
        atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::AOT::MILCompilerForClassicCpu::AddNetProperties(a1, v22, (uint64_t)v65, v50);
      if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
      memset(&__dst, 0, sizeof(__dst));
      std::string::append[abi:ne180100]<char const*,0>(&__dst.__pn_, (std::string *)"model.espresso.net", (std::string *)"");
      std::__fs::filesystem::operator/[abi:ne180100](&__dst, (uint64_t)&v61, (std::__fs::filesystem::path *)&pn);
      if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
      }
      std::__fs::filesystem::path::__string_view v24 = std::__fs::filesystem::path::__parent_path(&v62);
      if (v24.__size_ >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v24.__size_ >= 0x17)
      {
        std::basic_string_view<_CharT, _Traits>::size_type v26 = (v24.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v24.__size_ | 7) != 0x17) {
          std::basic_string_view<_CharT, _Traits>::size_type v26 = v24.__size_ | 7;
        }
        std::basic_string_view<_CharT, _Traits>::size_type v27 = v26 + 1;
        p_dst = operator new(v26 + 1);
        __dst.__pn_.__r_.__value_.__l.__size_ = v24.__size_;
        __dst.__pn_.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
        __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((unsigned char *)&__dst.__pn_.__r_.__value_.__s + 23) = v24.__size_;
        p_dst = &__dst;
        if (!v24.__size_)
        {
LABEL_86:
          p_dst[v24.__size_] = 0;
          std::__fs::filesystem::path __base = __dst;
          std::__fs::filesystem::path::lexically_relative((std::__fs::filesystem::path *)&__p, (const std::__fs::filesystem::path *)&pn, &__base);
          if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__base.__pn_.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_88;
            }
          }
          else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_88:
            __dst.__pn_ = __p;
            goto LABEL_91;
          }
          std::string::__init_copy_ctor_external(&__dst.__pn_, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
LABEL_91:
          uint64_t v28 = (void **)(a1 + 296);
          if (*(char *)(a1 + 319) < 0) {
            operator delete(*v28);
          }
          *(_OWORD *)uint64_t v28 = *(_OWORD *)&__dst.__pn_.__r_.__value_.__l.__data_;
          *(void *)(a1 + 312) = *((void *)&__dst.__pn_.__r_.__value_.__l + 2);
          uint64_t v48 = v53;
          long long v49 = v54;
          if (v54) {
            atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&__str, pn.__r_.__value_.__l.__data_, pn.__r_.__value_.__l.__size_);
          }
          else {
            std::string __str = pn;
          }
          char v46 = 0;
          LOBYTE(v45) = 0;
          char v44 = 0;
          LOBYTE(v43) = 0;
          Espresso::dump_network(&v48, &__str, (uint64_t)&v45, (uint64_t)&v43);
          if (v44 < 0)
          {
            operator delete(v43);
            if ((v46 & 0x80000000) == 0)
            {
LABEL_100:
              if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_101;
              }
              goto LABEL_105;
            }
          }
          else if ((v46 & 0x80000000) == 0)
          {
            goto LABEL_100;
          }
          operator delete(v45);
          if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_101:
            long long v29 = v49;
            if (!v49) {
              goto LABEL_108;
            }
LABEL_106:
            if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
LABEL_108:
            memset(&__base, 0, sizeof(__base));
            std::string::append[abi:ne180100]<char const*,0>(&__base.__pn_, (std::string *)"model.espresso.net", (std::string *)"");
            std::__fs::filesystem::operator/[abi:ne180100](&__base, (uint64_t)&v61, &__dst);
            std::__fs::filesystem::__status(&__dst, 0);
            char v30 = 0;
            if (v42.__pn_.__r_.__value_.__s.__data_[0]
              && v42.__pn_.__r_.__value_.__s.__data_[0] != 255)
            {
              memset(&v41, 0, sizeof(v41));
              std::string::append[abi:ne180100]<char const*,0>(&v41.__pn_, (std::string *)"model.espresso.shape", (std::string *)"");
              std::__fs::filesystem::operator/[abi:ne180100](&v41, (uint64_t)&v61, &v42);
              std::__fs::filesystem::__status(&v42, 0);
              char v30 = 0;
              if (v40.__pn_.__r_.__value_.__s.__data_[0]
                && v40.__pn_.__r_.__value_.__s.__data_[0] != 255)
              {
                memset(&v39, 0, sizeof(v39));
                std::string::append[abi:ne180100]<char const*,0>(&v39, (std::string *)"model.espresso.weights", (std::string *)"");
                std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v39, (uint64_t)&v61, &v40);
                std::__fs::filesystem::__status(&v40, 0);
                if (v71) {
                  BOOL v31 = v71 == 255;
                }
                else {
                  BOOL v31 = 1;
                }
                char v30 = !v31;
                if (SHIBYTE(v40.__pn_.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v40.__pn_.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v39.__r_.__value_.__l.__data_);
                }
              }
              if (SHIBYTE(v42.__pn_.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v42.__pn_.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v41.__pn_.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v41.__pn_.__r_.__value_.__l.__data_);
              }
            }
            if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
              if ((SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_128:
                if (v30) {
                  goto LABEL_129;
                }
                goto LABEL_135;
              }
            }
            else if ((SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_128;
            }
            operator delete(__base.__pn_.__r_.__value_.__l.__data_);
            if (v30)
            {
LABEL_129:
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(__p.__r_.__value_.__l.__data_);
                if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_131:
                  v32 = v54;
                  if (!v54) {
                    goto LABEL_139;
                  }
                  goto LABEL_138;
                }
              }
              else if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                goto LABEL_131;
              }
              operator delete(pn.__r_.__value_.__l.__data_);
              v32 = v54;
              if (!v54) {
                goto LABEL_139;
              }
LABEL_138:
              if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                std::__shared_weak_count::__release_weak(v32);
                Espresso::scoped_env_var_kv::~scoped_env_var_kv((const char **)&v72.__pn_.__r_.__value_.__l.__data_);
                if (SHIBYTE(v61.__pn_.__r_.__value_.__r.__words[2]) < 0) {
                  goto LABEL_151;
                }
LABEL_140:
                if (SHIBYTE(v62.__pn_.__r_.__value_.__r.__words[2]) < 0) {
                  goto LABEL_152;
                }
LABEL_141:
                uint64_t v34 = v63;
                std::string::size_type v63 = 0;
                if (!v34) {
                  goto LABEL_143;
                }
                goto LABEL_142;
              }
LABEL_139:
              Espresso::scoped_env_var_kv::~scoped_env_var_kv((const char **)&v72.__pn_.__r_.__value_.__l.__data_);
              if (SHIBYTE(v61.__pn_.__r_.__value_.__r.__words[2]) < 0) {
                goto LABEL_151;
              }
              goto LABEL_140;
            }
LABEL_135:
            v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v33, "Failed in serializing Espresso network files on disk.");
            __cxa_throw(v33, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
LABEL_105:
          operator delete(__str.__r_.__value_.__l.__data_);
          long long v29 = v49;
          if (!v49) {
            goto LABEL_108;
          }
          goto LABEL_106;
        }
      }
      memmove(p_dst, v24.__data_, v24.__size_);
      goto LABEL_86;
    }
  }
  else if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
  if (!*(unsigned char *)(a1 + 289)) {
    goto LABEL_41;
  }
LABEL_32:
  memset(&pn, 0, sizeof(pn));
  std::string::append[abi:ne180100]<char const*,0>(&pn, (std::string *)"classic_cpu_mil_model", (std::string *)"");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&pn, (uint64_t)&v61, &__dst);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(pn.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::__create_directories(&__dst, 0);
  memset(&__p, 0, sizeof(__p));
  std::string::append[abi:ne180100]<char const*,0>(&__p, (std::string *)"model.mil", (std::string *)"");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)&__dst, (std::__fs::filesystem::path *)&pn);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(&__base, 0, sizeof(__base));
  std::string::append[abi:ne180100]<char const*,0>(&__base.__pn_, (std::string *)"model.weights", (std::string *)"");
  std::__fs::filesystem::operator/[abi:ne180100](&__base, (uint64_t)&__dst, (std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__base.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__base.__pn_.__r_.__value_.__l.__data_);
    uint64_t v20 = v63;
    if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_38;
    }
  }
  else
  {
    uint64_t v20 = v63;
    if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_38:
      std::string v57 = pn;
      goto LABEL_45;
    }
  }
  std::string::__init_copy_ctor_external(&v57, pn.__r_.__value_.__l.__data_, pn.__r_.__value_.__l.__size_);
LABEL_45:
  if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v56, __dst.__pn_.__r_.__value_.__l.__data_, __dst.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string v56 = __dst.__pn_;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v55, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v55 = __p;
  }
  Espresso::MILUtil::SerializeProgram(v20, (uint64_t)&v57, (uint64_t)&v56, (uint64_t)&v55, 0x100000004, 0);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v55.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_53:
      if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_54;
      }
      goto LABEL_60;
    }
  }
  else if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_53;
  }
  operator delete(v56.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_54:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_61;
  }
LABEL_60:
  operator delete(v57.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_55:
    if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_56;
    }
LABEL_62:
    operator delete(pn.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_63;
    }
    goto LABEL_139;
  }
LABEL_61:
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_62;
  }
LABEL_56:
  if ((SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_139;
  }
LABEL_63:
  operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
  Espresso::scoped_env_var_kv::~scoped_env_var_kv((const char **)&v72.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v61.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_140;
  }
LABEL_151:
  operator delete(v61.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v62.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_141;
  }
LABEL_152:
  operator delete(v62.__pn_.__r_.__value_.__l.__data_);
  uint64_t v34 = v63;
  std::string::size_type v63 = 0;
  if (v34) {
LABEL_142:
  }
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
LABEL_143:
  uint64_t v35 = v64;
  uint64_t v64 = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  if (v66 < 0) {
    operator delete(v65[0]);
  }
  if (E5RT::g_trace_analysis_level >= v67) {
    kdebug_trace();
  }
}

void sub_192514740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a32 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a32 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a27);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v76 - 121) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a21);
  if ((*(char *)(v76 - 121) & 0x80000000) == 0)
  {
LABEL_6:
    if ((a68 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(*(void **)(v76 - 144));
  if ((a68 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a72 & 0x80000000) == 0)
    {
LABEL_16:
      if (a74 < 0) {
        operator delete(a73);
      }
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
      Espresso::scoped_env_var_kv::~scoped_env_var_kv((const char **)(v76 - 104));
      if (a76 < 0) {
        operator delete(a75);
      }
      if (*(char *)(v76 - 225) < 0)
      {
        operator delete(*(void **)(v76 - 248));
        uint64_t v78 = *(void *)(v76 - 224);
        *(void *)(v76 - 224) = 0;
        if (!v78)
        {
LABEL_22:
          uint64_t v79 = *(void *)(v76 - 216);
          *(void *)(v76 - 216) = 0;
          if (!v79) {
            goto LABEL_23;
          }
          goto LABEL_27;
        }
      }
      else
      {
        uint64_t v78 = *(void *)(v76 - 224);
        *(void *)(v76 - 224) = 0;
        if (!v78) {
          goto LABEL_22;
        }
      }
      (*(void (**)(uint64_t))(*(void *)v78 + 8))(v78);
      uint64_t v79 = *(void *)(v76 - 216);
      *(void *)(v76 - 216) = 0;
      if (!v79)
      {
LABEL_23:
        if ((*(char *)(v76 - 185) & 0x80000000) == 0)
        {
LABEL_29:
          E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v76 - 184));
          _Unwind_Resume(a1);
        }
LABEL_28:
        operator delete(*(void **)(v76 - 208));
        goto LABEL_29;
      }
LABEL_27:
      (*(void (**)(uint64_t))(*(void *)v79 + 8))(v79);
      if ((*(char *)(v76 - 185) & 0x80000000) == 0) {
        goto LABEL_29;
      }
      goto LABEL_28;
    }
LABEL_15:
    operator delete(a69);
    goto LABEL_16;
  }
LABEL_14:
  operator delete(a63);
  if ((a72 & 0x80000000) == 0) {
    goto LABEL_16;
  }
  goto LABEL_15;
}

void sub_192514B9C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x192514B94);
}

void sub_192514BAC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a62 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v62 - 121) & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((*(char *)(v62 - 121) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(v62 - 144));
LABEL_6:
  JUMPOUT(0x192514AD8);
}

void sub_192514BE0()
{
}

void sub_192514BE8()
{
}

void sub_192514BF0()
{
  if (*(char *)(v0 - 81) < 0) {
    JUMPOUT(0x192514AE4);
  }
  JUMPOUT(0x192514AE8);
}

void sub_192514C08()
{
}

void sub_192514C10()
{
  uint64_t v1 = *(void *)(v0 - 224);
  *(void *)(v0 - 224) = 0;
  if (v1) {
    JUMPOUT(0x192514B28);
  }
  JUMPOUT(0x192514AFCLL);
}

void sub_192514C24()
{
  uint64_t v1 = *(void *)(v0 - 224);
  *(void *)(v0 - 224) = 0;
  if (v1) {
    JUMPOUT(0x192514B28);
  }
  JUMPOUT(0x192514AFCLL);
}

void sub_192514C38()
{
  uint64_t v1 = *(void *)(v0 - 216);
  *(void *)(v0 - 216) = 0;
  if (v1) {
    JUMPOUT(0x192514B58);
  }
  JUMPOUT(0x192514B08);
}

void sub_192514C4C()
{
  if ((*(char *)(v0 - 185) & 0x80000000) == 0) {
    JUMPOUT(0x192514B8CLL);
  }
  JUMPOUT(0x192514B84);
}

void sub_192514C5C()
{
  std::function<BOOL ()(MIL::IROperation const&)>::~function((void *)(v0 - 104));
  JUMPOUT(0x192514B8CLL);
}

void sub_192514C6C()
{
}

void Espresso::AOT::MILCompilerForClassicCpu::GetOutputPaths(Espresso::AOT::MILCompilerForClassicCpu *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (*((char *)this + 319) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 37), *((void *)this + 38));
  }
  else {
    std::string __p = *(std::string *)((char *)this + 296);
  }
  std::vector<std::string>::vector[abi:ne180100](a2, (uint64_t)&__p, 1uLL);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_192514D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::MILCompilerForClassicCpu::GetOptions(Espresso::AOT::MILCompilerForClassicCpu *this)
{
  return (uint64_t)this + 264;
}

void Espresso::AOT::MILCompilerForClassicCpu::~MILCompilerForClassicCpu(void **this)
{
  Espresso::AOT::MILCompilerForClassicCpu::~MILCompilerForClassicCpu(this);

  JUMPOUT(0x192FF16B0);
}

{
  void **v2;
  Espresso::AOT::AOTCompilerBackend *v3;
  void **v4;
  void *v5;
  uint64_t vars8;

  *this = &unk_1EE36B588;
  if (*((char *)this + 319) < 0)
  {
    operator delete(this[37]);
    if ((*((char *)this + 287) & 0x80000000) == 0)
    {
LABEL_3:
      *this = &unk_1EE36B370;
      v2 = (void **)this[29];
      if (!v2) {
        goto LABEL_4;
      }
LABEL_11:
      uint64_t v4 = (void **)this[30];
      if (v4 == v2)
      {
        this[30] = v2;
        operator delete(v2);
        if (*((char *)this + 231) < 0) {
          goto LABEL_18;
        }
      }
      else
      {
        do
        {
          if (*((char *)v4 - 1) < 0) {
            operator delete(*(v4 - 3));
          }
          v4 -= 3;
        }
        while (v4 != v2);
        uint64_t v5 = this[29];
        this[30] = v2;
        operator delete(v5);
        if (*((char *)this + 231) < 0) {
          goto LABEL_18;
        }
      }
LABEL_5:
      if ((*((char *)this + 207) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_19;
    }
  }
  else if ((*((char *)this + 287) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[33]);
  *this = &unk_1EE36B370;
  v2 = (void **)this[29];
  if (v2) {
    goto LABEL_11;
  }
LABEL_4:
  if ((*((char *)this + 231) & 0x80000000) == 0) {
    goto LABEL_5;
  }
LABEL_18:
  operator delete(this[26]);
  if ((*((char *)this + 207) & 0x80000000) == 0)
  {
LABEL_6:
    v3 = (Espresso::AOT::AOTCompilerBackend *)this;
    goto LABEL_8;
  }
LABEL_19:
  operator delete(this[23]);
  v3 = (Espresso::AOT::AOTCompilerBackend *)this;

LABEL_8:
  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(v3);
}

void std::__function::__func<Espresso::AOT::MILCompilerForClassicCpu::Run(MIL::IRProgram const&,std::vector<std::string> const&)::$_0,std::allocator<Espresso::AOT::MILCompilerForClassicCpu::Run(MIL::IRProgram const&,std::vector<std::string> const&)::$_0>,BOOL ()(MIL::IROperation const&)>::~__func()
{
}

void *std::__function::__func<Espresso::AOT::MILCompilerForClassicCpu::Run(MIL::IRProgram const&,std::vector<std::string> const&)::$_0,std::allocator<Espresso::AOT::MILCompilerForClassicCpu::Run(MIL::IRProgram const&,std::vector<std::string> const&)::$_0>,BOOL ()(MIL::IROperation const&)>::__clone()
{
  result = operator new(0x10uLL);
  void *result = &unk_1EE37CDD0;
  return result;
}

void std::__function::__func<Espresso::AOT::MILCompilerForClassicCpu::Run(MIL::IRProgram const&,std::vector<std::string> const&)::$_0,std::allocator<Espresso::AOT::MILCompilerForClassicCpu::Run(MIL::IRProgram const&,std::vector<std::string> const&)::$_0>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37CDD0;
}

uint64_t std::__function::__func<Espresso::AOT::MILCompilerForClassicCpu::Run(MIL::IRProgram const&,std::vector<std::string> const&)::$_0,std::allocator<Espresso::AOT::MILCompilerForClassicCpu::Run(MIL::IRProgram const&,std::vector<std::string> const&)::$_0>,BOOL ()(MIL::IROperation const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
  return (*(unsigned int (**)(uint64_t))(*(void *)v2 + 128))(v2) ^ 1;
}

uint64_t std::__function::__func<Espresso::AOT::MILCompilerForClassicCpu::Run(MIL::IRProgram const&,std::vector<std::string> const&)::$_0,std::allocator<Espresso::AOT::MILCompilerForClassicCpu::Run(MIL::IRProgram const&,std::vector<std::string> const&)::$_0>,BOOL ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT24MILCompilerForClassicCpu3RunERKN3MIL9IRProgramERKNSt3__16vectorINS6_12basic_string"
                     "IcNS6_11char_traitsIcEENS6_9allocatorIcEEEENSB_ISD_EEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN8Espresso3AOT24MILCompilerForClassicCpu3RunERKN3MIL9IRProgramERKNSt3__16vectorINS6_12b"
                                "asic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENSB_ISD_EEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT24MILCompilerForClassicCpu3RunERKN3MIL9IRProgramERKNSt3__16vectorINS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENSB_ISD_EEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT24MILCompilerForClassicCpu3RunERKN3MIL9IRProgramERKNSt3__16vectorINS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENSB_ISD_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<Espresso::AOT::MILCompilerForClassicCpu::Run(MIL::IRProgram const&,std::vector<std::string> const&)::$_0,std::allocator<Espresso::AOT::MILCompilerForClassicCpu::Run(MIL::IRProgram const&,std::vector<std::string> const&)::$_0>,BOOL ()(MIL::IROperation const&)>::target_type()
{
}

float Espresso::AOT::DTrees::avg_poolAneCp()
{
  return 40.0;
}

float Espresso::AOT::DTrees::avg_poolAneDp()
{
  return 40.0;
}

float Espresso::AOT::DTrees::avg_poolAneEp()
{
  return 40.0;
}

float Espresso::AOT::DTrees::avg_poolCpuCp()
{
  return 6.0;
}

float Espresso::AOT::DTrees::avg_poolCpuDp()
{
  return 6.0;
}

float Espresso::AOT::DTrees::avg_poolCpuEp()
{
  return 6.0;
}

float Espresso::AOT::DTrees::avg_poolGpuCp()
{
  return 18.0;
}

float Espresso::AOT::DTrees::avg_poolGpuDp()
{
  return 18.0;
}

float Espresso::AOT::DTrees::avg_poolGpuEp()
{
  return 18.0;
}

void Espresso::AOT::GetNetworkVersionInformation(Espresso::AOT *this@<X0>, std::string *a2@<X8>)
{
  char v26 = 15;
  strcpy((char *)__s2, "network_version");
  uint64_t v4 = (char *)*((void *)this + 60);
  if (!v4) {
    goto LABEL_32;
  }
  uint64_t v5 = (char *)this + 480;
  long long v6 = (char *)this + 480;
  do
  {
    unint64_t v7 = v4[55];
    int v8 = (char)v7;
    if ((v7 & 0x80u) != 0) {
      unint64_t v7 = *((void *)v4 + 5);
    }
    if (v8 >= 0) {
      std::string::size_type v9 = v4 + 32;
    }
    else {
      std::string::size_type v9 = (const void *)*((void *)v4 + 4);
    }
    if (v7 >= 0xF) {
      size_t v10 = 15;
    }
    else {
      size_t v10 = v7;
    }
    BOOL v11 = v7 < 0xF;
    int v12 = memcmp(v9, __s2, v10);
    BOOL v13 = v12 < 0;
    if (!v12) {
      BOOL v13 = v11;
    }
    BOOL v14 = !v13;
    if (v13) {
      char v15 = (char **)(v4 + 8);
    }
    else {
      char v15 = (char **)v4;
    }
    if (v14) {
      long long v6 = v4;
    }
    uint64_t v4 = *v15;
  }
  while (*v15);
  if (v6 == v5) {
    goto LABEL_32;
  }
  unint64_t v16 = v6[55];
  int v17 = (char)v16;
  if ((v16 & 0x80u) != 0) {
    unint64_t v16 = *((void *)v6 + 5);
  }
  if (v17 >= 0) {
    uint64_t v18 = v6 + 32;
  }
  else {
    uint64_t v18 = (const void *)*((void *)v6 + 4);
  }
  if (v16 >= 0xF) {
    size_t v19 = 15;
  }
  else {
    size_t v19 = v16;
  }
  BOOL v20 = v16 > 0xF;
  int v21 = memcmp(__s2, v18, v19);
  BOOL v22 = v21 < 0;
  if (!v21) {
    BOOL v22 = v20;
  }
  if (v22)
  {
LABEL_32:
    char v23 = 0;
    a2->__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    if (v6[79] < 0)
    {
      std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)v6 + 7), *((void *)v6 + 8));
    }
    else
    {
      long long v24 = *(_OWORD *)(v6 + 56);
      a2->__r_.__value_.__r.__words[2] = *((void *)v6 + 9);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v24;
    }
    char v23 = 1;
  }
  a2[1].__r_.__value_.__s.__data_[0] = v23;
}

void Espresso::AOT::GetIntermediateBlobOffsets(Espresso::AOT *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a2;
  std::string __p = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v5 = (void *)*((void *)this + 6);
  uint64_t v4 = (void *)*((void *)this + 7);
  if (v5 == v4)
  {
    char v30 = 0;
    uint64_t v58 = 0;
    v59 = 0;
    goto LABEL_72;
  }
  uint64_t v51 = this;
  long long v6 = 0;
  unint64_t v7 = 0;
  int v8 = 0;
  uint64_t v9 = v61;
  uint64_t v53 = (void *)*((void *)this + 7);
  do
  {
    while (1)
    {
      unint64_t v10 = ((*v5 - 1) & 0xFFFFFFFFFFFFC000) + 0x4000;
      if (v6 >= v7) {
        break;
      }
      *v6++ = v10;
      uint64_t v9 = (uint64_t)v6;
      if (++v5 == v4) {
        goto LABEL_33;
      }
    }
    uint64_t v11 = v6 - v8;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
    {
      uint64_t v61 = v9;
      uint64_t v62 = v7;
      std::string __p = v8;
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    if (((char *)v7 - (char *)v8) >> 2 > v12) {
      unint64_t v12 = ((char *)v7 - (char *)v8) >> 2;
    }
    if ((unint64_t)((char *)v7 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      if (v13 >> 61)
      {
        uint64_t v61 = v9;
        uint64_t v62 = v7;
        std::string __p = v8;
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      BOOL v14 = operator new(8 * v13);
      char v15 = (unint64_t *)&v14[8 * v11];
      *char v15 = v10;
      uint64_t v9 = (uint64_t)(v15 + 1);
      if (v6 == v8) {
        goto LABEL_19;
      }
    }
    else
    {
      BOOL v14 = 0;
      char v15 = (unint64_t *)(8 * v11);
      *(void *)(8 * v11) = v10;
      uint64_t v9 = 8 * v11 + 8;
      if (v6 == v8) {
        goto LABEL_19;
      }
    }
    unint64_t v16 = (char *)(v6 - 1) - (char *)v8;
    if (v16 < 0x168)
    {
      int v17 = v6;
      goto LABEL_18;
    }
    if (&v14[(char *)v6 - (char *)v8 - 8 - (v16 & 0xFFFFFFFFFFFFFFF8)] > &v14[(char *)v6 - (char *)v8 - 8])
    {
      int v17 = v6;
      do
      {
LABEL_18:
        unint64_t v18 = *--v17;
        *--char v15 = v18;
      }
      while (v17 != v8);
      goto LABEL_19;
    }
    if ((unint64_t *)((char *)v6 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8) > v6 - 1)
    {
      int v17 = v6;
      goto LABEL_18;
    }
    if ((unint64_t)((char *)v8 - v14) < 0x20)
    {
      int v17 = v6;
      goto LABEL_18;
    }
    uint64_t v19 = (v16 >> 3) + 1;
    uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    int v17 = &v6[v20 / 0xFFFFFFFFFFFFFFF8];
    char v15 = (unint64_t *)((char *)v15 - v20);
    int v21 = &v14[8 * v11 - 16];
    BOOL v22 = v6 - 2;
    uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      *int v21 = v24;
      v21 -= 2;
      v22 -= 4;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_18;
    }
LABEL_19:
    unint64_t v7 = (unint64_t *)&v14[8 * v13];
    if (v8) {
      operator delete(v8);
    }
    int v8 = v15;
    uint64_t v4 = v53;
    ++v5;
    long long v6 = (unint64_t *)v9;
  }
  while (v5 != v53);
LABEL_33:
  uint64_t v61 = v9;
  uint64_t v62 = v7;
  v59 = 0;
  std::string __p = v8;
  std::string v57 = 0;
  uint64_t v58 = 0;
  uint64_t v25 = v9 - (void)v8;
  if ((unint64_t *)v9 != v8)
  {
    char v26 = 0;
    std::basic_string_view<_CharT, _Traits>::size_type v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    char v30 = 0;
    unint64_t v31 = v25 >> 3;
    if (v31 <= 1) {
      uint64_t v32 = 1;
    }
    else {
      uint64_t v32 = v31;
    }
    uint64_t v33 = v58;
    uint64_t v54 = v32;
    while (v26 < v27)
    {
      *(void *)char v26 = v29;
      uint64_t v33 = (uint64_t)(v26 + 8);
LABEL_39:
      v29 += v8[v28++];
      char v26 = (char *)v33;
      if (v28 == v32)
      {
        uint64_t v58 = v33;
        v59 = v27;
        goto LABEL_71;
      }
    }
    uint64_t v34 = (v26 - v30) >> 3;
    unint64_t v35 = v34 + 1;
    if ((unint64_t)(v34 + 1) >> 61)
    {
      uint64_t v58 = v33;
      v59 = v27;
      std::string v57 = v30;
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    if ((v27 - v30) >> 2 > v35) {
      unint64_t v35 = (v27 - v30) >> 2;
    }
    if ((unint64_t)(v27 - v30) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v36 = v35;
    }
    if (v36)
    {
      if (v36 >> 61)
      {
        uint64_t v58 = v33;
        v59 = v27;
        std::string v57 = v30;
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v37 = v36;
      std::__fs::filesystem::path v38 = operator new(8 * v36);
      unint64_t v36 = v37;
      std::string v39 = &v38[8 * v34];
      *(void *)std::string v39 = v29;
      uint64_t v33 = (uint64_t)(v39 + 8);
      if (v26 == v30) {
        goto LABEL_55;
      }
LABEL_52:
      unint64_t v40 = v26 - 8 - v30;
      if (v40 < 0x168)
      {
        std::__fs::filesystem::path v41 = v26;
        goto LABEL_54;
      }
      if (&v38[v26 - v30 - 8 - (v40 & 0xFFFFFFFFFFFFFFF8)] > &v38[v26 - v30 - 8])
      {
        std::__fs::filesystem::path v41 = v26;
        goto LABEL_54;
      }
      if (&v26[-(v40 & 0xFFFFFFFFFFFFFFF8) - 8] > v26 - 8)
      {
        std::__fs::filesystem::path v41 = v26;
        goto LABEL_54;
      }
      if ((unint64_t)(v30 - v38) < 0x20)
      {
        std::__fs::filesystem::path v41 = v26;
        goto LABEL_54;
      }
      uint64_t v43 = (v40 >> 3) + 1;
      uint64_t v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
      std::__fs::filesystem::path v41 = &v26[-v44];
      v39 -= v44;
      uint64_t v45 = &v38[8 * v34 - 16];
      char v46 = v26 - 16;
      uint64_t v47 = v43 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v48 = *(_OWORD *)v46;
        *(v45 - 1) = *((_OWORD *)v46 - 1);
        *uint64_t v45 = v48;
        v45 -= 2;
        v46 -= 32;
        v47 -= 4;
      }
      while (v47);
      if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_54:
          uint64_t v42 = *((void *)v41 - 1);
          v41 -= 8;
          *((void *)v39 - 1) = v42;
          v39 -= 8;
        }
        while (v41 != v30);
      }
    }
    else
    {
      std::__fs::filesystem::path v38 = 0;
      std::string v39 = (char *)(8 * v34);
      *(void *)(8 * v34) = v29;
      uint64_t v33 = 8 * v34 + 8;
      if (v26 != v30) {
        goto LABEL_52;
      }
    }
LABEL_55:
    std::basic_string_view<_CharT, _Traits>::size_type v27 = &v38[8 * v36];
    if (v30) {
      operator delete(v30);
    }
    char v30 = v39;
    uint64_t v32 = v54;
    goto LABEL_39;
  }
  char v30 = 0;
LABEL_71:
  this = v51;
  uint64_t v3 = a2;
LABEL_72:
  std::string v57 = v30;
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_DWORD *)(v3 + 32) = 1065353216;
  long long v49 = (uint64_t *)*((void *)this + 3);
  if (v49)
  {
    do
    {
      if (*((char *)v49 + 39) < 0) {
        std::string::__init_copy_ctor_external(&v55, (const std::string::value_type *)v49[2], v49[3]);
      }
      else {
        std::string v55 = *(std::string *)(v49 + 2);
      }
      int v56 = *((_DWORD *)v49 + 10);
      uint64_t v50 = *(void *)&v30[8 * v56];
      std::string::size_type v63 = &v55;
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, (uint64_t)&v55, (uint64_t)&std::piecewise_construct, (long long **)&v63)[5] = v50;
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55.__r_.__value_.__l.__data_);
      }
      long long v49 = (uint64_t *)*v49;
    }
    while (v49);
LABEL_81:
    uint64_t v58 = (uint64_t)v30;
    operator delete(v30);
  }
  else if (v30)
  {
    goto LABEL_81;
  }
  if (__p)
  {
    uint64_t v61 = (uint64_t)__p;
    operator delete(__p);
  }
}

void sub_1925156DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25)
{
  if (v25) {
    operator delete(v25);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::GetOperandAliases(int8x8_t *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v51 = v52;
  v52[0] = 0;
  v54[0] = 0;
  v54[1] = 0;
  v52[1] = 0;
  uint64_t v53 = v54;
  Espresso::ANECompilerEngine::ane_name_translator::fill_name_table(&v51, (const Espresso::net *)this);
  int8x8_t v5 = this[4];
  if (*(void *)&this[5] != *(void *)&v5)
  {
    for (unint64_t i = 0; i < (uint64_t)(*(void *)&this[5] - *(void *)&v5) >> 4; ++i)
    {
      uint64_t v7 = *(void *)(*(void *)&v5 + 16 * i);
      int v8 = *(const void **)(v7 + 64);
      if (v8
      {
        unint64_t v10 = *(std::__shared_weak_count **)(v7 + 72);
        long long v49 = v9;
        uint64_t v50 = v10;
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        LODWORD(__p.__r_.__value_.__l.__data_) = *(_DWORD *)(*(uint64_t (**)(void *))(*(void *)v9 + 320))(v9);
        int v11 = is_ane(&__p);
      }
      else
      {
        unint64_t v10 = 0;
        int v11 = 0;
        long long v49 = 0;
        uint64_t v50 = 0;
      }
      int8x8_t v12 = this[8];
      if (!*(void *)&v12) {
        goto LABEL_102;
      }
      uint8x8_t v13 = (uint8x8_t)vcnt_s8(v12);
      v13.i16[0] = vaddlv_u8(v13);
      if (v13.u32[0] > 1uLL)
      {
        unint64_t v14 = i;
        if (i >= *(void *)&v12) {
          unint64_t v14 = i % *(void *)&v12;
        }
      }
      else
      {
        unint64_t v14 = (*(void *)&v12 - 1) & i;
      }
      char v15 = *(void **)(*(void *)&this[7] + 8 * v14);
      if (!v15 || (unint64_t v16 = (void *)*v15) == 0) {
LABEL_102:
      }
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      if (v13.u32[0] < 2uLL)
      {
        uint64_t v17 = *(void *)&v12 - 1;
        while (1)
        {
          uint64_t v19 = v16[1];
          if (i == v19)
          {
            if (v16[2] == i) {
              goto LABEL_30;
            }
          }
          else if ((v19 & v17) != v14)
          {
            goto LABEL_102;
          }
          unint64_t v16 = (void *)*v16;
          if (!v16) {
            goto LABEL_102;
          }
        }
      }
      while (1)
      {
        unint64_t v18 = v16[1];
        if (i == v18) {
          break;
        }
        if (v18 >= *(void *)&v12) {
          v18 %= *(void *)&v12;
        }
        if (v18 != v14) {
          goto LABEL_102;
        }
LABEL_20:
        unint64_t v16 = (void *)*v16;
        if (!v16) {
          goto LABEL_102;
        }
      }
      if (v16[2] != i) {
        goto LABEL_20;
      }
LABEL_30:
      uint64_t v21 = v16[3];
      uint64_t v20 = v16[4];
      while (v21 != v20)
      {
        __p.__r_.__value_.__r.__words[0] = v21;
        BOOL v22 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, v21, (uint64_t)&std::piecewise_construct, (long long **)&__p);
        if (!v11) {
          goto LABEL_32;
        }
        uint64_t v23 = v22;
        Espresso::ANECompilerEngine::ane_name_translator::ane_name((uint64_t)&v51, (char *)v21, &__p);
        uint64_t v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        uint64_t v26 = *(unsigned __int8 *)(v21 + 23);
        int v27 = (char)v26;
        if ((v26 & 0x80u) != 0) {
          uint64_t v26 = *(void *)(v21 + 8);
        }
        if (size == v26)
        {
          if (v27 >= 0) {
            uint64_t v28 = (unsigned __int8 *)v21;
          }
          else {
            uint64_t v28 = *(unsigned __int8 **)v21;
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            if (!memcmp(__p.__r_.__value_.__l.__data_, v28, __p.__r_.__value_.__l.__size_)) {
              goto LABEL_31;
            }
          }
          else
          {
            if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
              goto LABEL_32;
            }
            p_p = &__p;
            while (p_p->__r_.__value_.__s.__data_[0] == *v28)
            {
              p_p = (std::string *)((char *)p_p + 1);
              ++v28;
              if (!--v24)
              {
                if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
                  goto LABEL_32;
                }
                goto LABEL_31;
              }
            }
          }
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)(v23 + 5), (uint64_t)&__p, (uint64_t)&__p);
        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_31:
        }
          operator delete(__p.__r_.__value_.__l.__data_);
LABEL_32:
        v21 += 24;
      }
      int8x8_t v30 = this[13];
      if (!*(void *)&v30) {
        goto LABEL_103;
      }
      uint8x8_t v31 = (uint8x8_t)vcnt_s8(v30);
      v31.i16[0] = vaddlv_u8(v31);
      if (v31.u32[0] > 1uLL)
      {
        unint64_t v32 = i;
        if (i >= *(void *)&v30) {
          unint64_t v32 = i % *(void *)&v30;
        }
      }
      else
      {
        unint64_t v32 = (*(void *)&v30 - 1) & i;
      }
      uint64_t v33 = *(void **)(*(void *)&this[12] + 8 * v32);
      if (!v33 || (uint64_t v34 = (void *)*v33) == 0) {
LABEL_103:
      }
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      if (v31.u32[0] < 2uLL)
      {
        uint64_t v35 = *(void *)&v30 - 1;
        while (1)
        {
          uint64_t v37 = v34[1];
          if (i == v37)
          {
            if (v34[2] == i) {
              goto LABEL_74;
            }
          }
          else if ((v37 & v35) != v32)
          {
            goto LABEL_103;
          }
          uint64_t v34 = (void *)*v34;
          if (!v34) {
            goto LABEL_103;
          }
        }
      }
      while (2)
      {
        unint64_t v36 = v34[1];
        if (i != v36)
        {
          if (v36 >= *(void *)&v30) {
            v36 %= *(void *)&v30;
          }
          if (v36 != v32) {
            goto LABEL_103;
          }
LABEL_64:
          uint64_t v34 = (void *)*v34;
          if (!v34) {
            goto LABEL_103;
          }
          continue;
        }
        break;
      }
      if (v34[2] != i) {
        goto LABEL_64;
      }
LABEL_74:
      uint64_t v39 = v34[3];
      uint64_t v38 = v34[4];
      while (2)
      {
        if (v39 != v38)
        {
          __p.__r_.__value_.__r.__words[0] = v39;
          unint64_t v40 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, v39, (uint64_t)&std::piecewise_construct, (long long **)&__p);
          if (v11)
          {
            std::__fs::filesystem::path v41 = v40;
            Espresso::ANECompilerEngine::ane_name_translator::ane_name((uint64_t)&v51, (char *)v39, &__p);
            uint64_t v42 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v43 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v43 = __p.__r_.__value_.__l.__size_;
            }
            uint64_t v44 = *(unsigned __int8 *)(v39 + 23);
            int v45 = (char)v44;
            if ((v44 & 0x80u) != 0) {
              uint64_t v44 = *(void *)(v39 + 8);
            }
            if (v43 != v44) {
              goto LABEL_96;
            }
            if (v45 >= 0) {
              char v46 = (unsigned __int8 *)v39;
            }
            else {
              char v46 = *(unsigned __int8 **)v39;
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              if (memcmp(__p.__r_.__value_.__l.__data_, v46, __p.__r_.__value_.__l.__size_)) {
                goto LABEL_96;
              }
              goto LABEL_75;
            }
            if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
            {
              uint64_t v47 = &__p;
              while (v47->__r_.__value_.__s.__data_[0] == *v46)
              {
                uint64_t v47 = (std::string *)((char *)v47 + 1);
                ++v46;
                if (!--v42)
                {
                  if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
                    goto LABEL_76;
                  }
                  goto LABEL_75;
                }
              }
LABEL_96:
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)(v41 + 5), (uint64_t)&__p, (uint64_t)&__p);
              if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_75:
              }
                operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
LABEL_76:
          v39 += 24;
          continue;
        }
        break;
      }
      if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      int8x8_t v5 = this[4];
    }
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v53, v54[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v51, v52[0]);
}

void sub_192515CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  Espresso::ANECompilerEngine::ane_name_translator::~ane_name_translator((Espresso::ANECompilerEngine::ane_name_translator *)va);
  std::unordered_map<std::string,Espresso::AOT::MemOptimizer::AllocInfo>::~unordered_map[abi:ne180100](v6);
  _Unwind_Resume(a1);
}

void sub_192515CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  Espresso::ANECompilerEngine::ane_name_translator::~ane_name_translator((Espresso::ANECompilerEngine::ane_name_translator *)&a17);
  std::unordered_map<std::string,Espresso::AOT::MemOptimizer::AllocInfo>::~unordered_map[abi:ne180100](v17);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::GetPlatformForLayer(uint64_t *a1, int a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (void *)(*a1 + 40);
  if ((*(char *)(*a1 + 63) & 0x80000000) == 0)
  {
    int v5 = *(unsigned __int8 *)(*a1 + 63);
    switch(*(unsigned char *)(*a1 + 63))
    {
      case 4:
        goto LABEL_67;
      case 6:
        if (*(_DWORD *)v4 != 1601594724 || *(_WORD *)(*a1 + 44) != 28783) {
          goto LABEL_69;
        }
        goto LABEL_46;
      case 0xF:
        if (*v4 != 0x715F636974617473 || *(void *)(*a1 + 47) != 0x657A69746E617571) {
          goto LABEL_66;
        }
        return *(unsigned int *)(v3 + 8);
      case 0x10:
        goto LABEL_33;
      case 0x11:
        if (*v4 == 0x645F636974617473 && *(void *)(*a1 + 48) == 0x7A69746E61757165 && *(unsigned char *)(*a1 + 56) == 101) {
          return *(unsigned int *)(v3 + 8);
        }
        if (v5 == 16) {
          goto LABEL_33;
        }
LABEL_66:
        if (v5 != 4) {
          goto LABEL_69;
        }
LABEL_67:
        if (*(_DWORD *)v4 == 1953718627) {
          return *(unsigned int *)(v3 + 8);
        }
        goto LABEL_69;
      default:
        goto LABEL_69;
    }
  }
  uint64_t v7 = *(void *)(v3 + 48);
  if (v7 == 6 && *(_DWORD *)*v4 == 1601594724 && *(_WORD *)(*v4 + 4) == 28783)
  {
LABEL_46:
    BOOL v22 = *(const void **)(v3 + 64);
    if (!v22
    {
      int8x8_t v30 = 0;
      uint8x8_t v31 = 0;
      Espresso::throw_exception_selector<Espresso::generic_error>("Unable to cast to dev op kernel");
    }
    uint64_t v17 = *(std::__shared_weak_count **)(v3 + 72);
    int8x8_t v30 = v23;
    uint8x8_t v31 = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = (const Espresso::dev_op_params_t *)(*(uint64_t (**)(void *))(*(void *)v23 + 320))(v23);
    Espresso::dev_op_params_t::dev_op_params_t((Espresso::dev_op_params_t *)&v28, v24);
    uint64_t v20 = v28;
    Espresso::dev_op_params_t::~dev_op_params_t((Espresso::dev_op_params_t *)&v28);
    if (!v17) {
      return v20;
    }
    goto LABEL_51;
  }
  if (v7 == 15)
  {
    if (*(void *)*v4 == 0x715F636974617473 && *(void *)(*v4 + 7) == 0x657A69746E617571) {
      return *(unsigned int *)(v3 + 8);
    }
    uint64_t v7 = *(void *)(v3 + 48);
  }
  if (v7 == 17)
  {
    if (*(void *)*v4 == 0x645F636974617473
      && *(void *)(*v4 + 8) == 0x7A69746E61757165
      && *(unsigned char *)(*v4 + 16) == 101)
    {
      return *(unsigned int *)(v3 + 8);
    }
    uint64_t v7 = *(void *)(v3 + 48);
  }
  if (v7 != 4)
  {
LABEL_31:
    if (v7 != 16) {
      goto LABEL_69;
    }
    uint64_t v4 = (void *)*v4;
LABEL_33:
    uint64_t v13 = *v4;
    uint64_t v12 = v4[1];
    if (v13 != 0x5F747865746E6F63 || v12 != 0x726566736E617274) {
LABEL_69:
    }
      Espresso::throw_exception_selector<Espresso::generic_error>("Unsupported layer type when trying to identify platform");
    char v15 = *(const void **)(v3 + 64);
    if (!v15
    {
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      Espresso::throw_exception_selector<Espresso::generic_error>("Unable to cast to context transfer kernel");
    }
    uint64_t v17 = *(std::__shared_weak_count **)(v3 + 72);
    uint64_t v28 = v16;
    uint64_t v29 = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = (*(uint64_t (**)(void *))(*(void *)v16 + 320))(v16);
    uint64_t v19 = 20;
    if (a2) {
      uint64_t v19 = 16;
    }
    uint64_t v20 = *(unsigned int *)(v18 + v19);
    if (!v17) {
      return v20;
    }
LABEL_51:
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      return v20;
    }
    return v20;
  }
  if (*(_DWORD *)*v4 != 1953718627)
  {
    uint64_t v7 = *(void *)(v3 + 48);
    goto LABEL_31;
  }
  return *(unsigned int *)(v3 + 8);
}

void sub_192516174(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192516188(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 32);
  _Unwind_Resume(a1);
}

void sub_19251619C(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 32);
  _Unwind_Resume(a1);
}

void sub_1925161B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::GetBlobRowAlignment(int a1, uint64_t a2)
{
  uint64_t v2 = 1;
  if (a1 <= 10005)
  {
    if ((a1 - 100) < 2 || !a1) {
      goto LABEL_9;
    }
LABEL_14:
    Espresso::throw_exception_selector<Espresso::generic_error>("Unsupported platform encountered while querying for blob alignment.");
  }
  if ((a1 - 10006) < 3)
  {
    uint64_t v2 = 64;
    goto LABEL_9;
  }
  if (a1 != 50005 && a1 != 50008) {
    goto LABEL_14;
  }
LABEL_9:
  if (!a2) {
    return v2;
  }
  if (((v2 - 1) & a2) != 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid row stride specified for ANE (not aligned)");
  }
  return a2;
}

float Espresso::AOT::GetTensorShape@<S0>(Espresso::AOT *this@<X0>, const Espresso::layer_nd_shape *a2@<X1>, char **a3@<X8>)
{
  uint64_t v3 = a2;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v5 = *((int *)this + 5);
  if (!v5)
  {
    uint64_t v39 = (char *)operator new(0x20uLL);
    a3[1] = v39 + 32;
    a3[2] = v39 + 32;
    LODWORD(result) = 1;
    *(_OWORD *)uint64_t v39 = xmmword_192DC57C0;
    *((_OWORD *)v39 + 1) = unk_192DC57D0;
    *a3 = v39;
    if ((unint64_t)v3 >= 2) {
      goto LABEL_42;
    }
    return result;
  }
  if ((v5 & 0x80000000) != 0) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v7 = 4 * v5;
  int v8 = (char *)operator new(4 * v5);
  uint64_t v9 = (int *)v8;
  unint64_t v10 = (int *)&v8[4 * v5];
  if (v5 <= 1) {
    uint64_t v11 = 1;
  }
  else {
    uint64_t v11 = v5;
  }
  size_t v12 = 4 * v11;
  BOOL v13 = v7 >= 4 * v11;
  size_t v14 = v7 - 4 * v11;
  if (v13) {
    size_t v15 = v14;
  }
  else {
    size_t v15 = 0;
  }
  bzero(&v8[v12], v15);
  memcpy(v9, this, v12);
  unint64_t v16 = 0;
  std::string __p = v9;
  uint64_t v17 = v9;
  do
  {
    uint64_t v19 = *v17;
    unint64_t v20 = (unint64_t)a3[2];
    if ((unint64_t)v16 < v20)
    {
      *(void *)unint64_t v16 = v19;
      uint64_t v18 = (uint64_t)(v16 + 8);
      goto LABEL_11;
    }
    uint64_t v21 = *a3;
    uint64_t v22 = v16 - *a3;
    uint64_t v23 = v22 >> 3;
    unint64_t v24 = (v22 >> 3) + 1;
    if (v24 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v25 = v20 - (void)v21;
    if (v25 >> 2 > v24) {
      unint64_t v24 = v25 >> 2;
    }
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v26 = v24;
    }
    if (v26)
    {
      if (v26 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v27 = operator new(8 * v26);
      uint64_t v28 = &v27[8 * v23];
      *(void *)uint64_t v28 = v19;
      uint64_t v18 = (uint64_t)(v28 + 8);
      if (v16 == v21) {
        goto LABEL_27;
      }
    }
    else
    {
      int v27 = 0;
      uint64_t v28 = (char *)(8 * v23);
      *(void *)(8 * v23) = v19;
      uint64_t v18 = 8 * v23 + 8;
      if (v16 == v21) {
        goto LABEL_27;
      }
    }
    unint64_t v29 = v16 - 8 - v21;
    if (v29 < 0x168)
    {
      int8x8_t v30 = v16;
      goto LABEL_26;
    }
    if (&v27[v22 - 8 - (v29 & 0xFFFFFFFFFFFFFFF8)] > &v27[v22 - 8])
    {
      int8x8_t v30 = v16;
      do
      {
LABEL_26:
        uint64_t v31 = *((void *)v30 - 1);
        v30 -= 8;
        *((void *)v28 - 1) = v31;
        v28 -= 8;
      }
      while (v30 != v21);
      goto LABEL_27;
    }
    if (&v16[-(v29 & 0xFFFFFFFFFFFFFFF8) - 8] > v16 - 8)
    {
      int8x8_t v30 = v16;
      goto LABEL_26;
    }
    if ((unint64_t)(v16 - v27 - v22) < 0x20)
    {
      int8x8_t v30 = v16;
      goto LABEL_26;
    }
    uint64_t v32 = (v29 >> 3) + 1;
    uint64_t v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    int8x8_t v30 = &v16[-v33];
    v28 -= v33;
    uint64_t v34 = &v27[8 * v23 - 16];
    uint64_t v35 = v16 - 16;
    uint64_t v36 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      *uint64_t v34 = v37;
      v34 -= 2;
      v35 -= 32;
      v36 -= 4;
    }
    while (v36);
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_26;
    }
LABEL_27:
    *a3 = v28;
    a3[1] = (char *)v18;
    a3[2] = &v27[8 * v26];
    if (v21) {
      operator delete(v21);
    }
LABEL_11:
    a3[1] = (char *)v18;
    ++v17;
    unint64_t v16 = (char *)v18;
  }
  while (v17 != v10);
  operator delete(__p);
  uint64_t v3 = a2;
  if ((unint64_t)a2 < 2) {
    return result;
  }
LABEL_42:
  if ((unint64_t)(a3[1] - *a3) <= 0x17) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Detected interleave > 1 for a tensor with < 3 dimensions");
  }
  unint64_t v40 = a3[1];
  float result = (float)*((unint64_t *)v40 - 3) / (float)(unint64_t)v3;
  *((void *)v40 - 3) = vcvtps_u32_f32(result);
  return result;
}

void sub_192516584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13)
{
  size_t v15 = *(void **)v13;
  if (!*(void *)v13) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v13 + 8) = v15;
  operator delete(v15);
  _Unwind_Resume(exception_object);
}

void *Espresso::AOT::GetTensorAlignment@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v4 = a3;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v6 = 1;
  if (a2 <= 10005)
  {
    if ((a2 - 100) < 2 || !a2) {
      goto LABEL_9;
    }
LABEL_16:
    Espresso::throw_exception_selector<Espresso::generic_error>("Unsupported platform encountered while querying for blob alignment.");
  }
  if ((a2 - 10006) < 3)
  {
    uint64_t v6 = 64;
    goto LABEL_9;
  }
  if (a2 != 50005 && a2 != 50008) {
    goto LABEL_16;
  }
LABEL_9:
  if (a3)
  {
    if (((v6 - 1) & a3) != 0) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Invalid row stride specified for ANE (not aligned)");
    }
    uint64_t v9 = a3;
    unint64_t v7 = *(int *)(a1 + 20);
    if (v7) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v4 = v6;
    uint64_t v9 = v6;
    unint64_t v7 = *(int *)(a1 + 20);
    if (v7)
    {
LABEL_12:
      float result = std::vector<unsigned long>::insert(a4, 0, v7, &v9);
      *(void *)(a4[1] - 8) = 1;
      return result;
    }
  }
  float result = operator new(0x20uLL);
  a4[1] = (unint64_t)(result + 4);
  a4[2] = (unint64_t)(result + 4);
  void *result = v4;
  result[1] = v4;
  result[2] = v4;
  result[3] = 1;
  *a4 = (unint64_t)result;
  return result;
}

void sub_192516714(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

const double *std::vector<unsigned long>::insert(unint64_t *a1, void *a2, unint64_t a3, uint64_t *a4)
{
  unint64_t v4 = *a1;
  uint64_t v5 = (uint64_t)a2 - *a1;
  uint64_t v6 = (const double *)(*a1 + (v5 & 0xFFFFFFFFFFFFFFF8));
  if (!a3) {
    return v6;
  }
  unint64_t v7 = (const double *)a4;
  uint64_t v10 = v5 >> 3;
  unint64_t v12 = a1[1];
  unint64_t v11 = a1[2];
  if (a3 <= (uint64_t)(v11 - v12) >> 3)
  {
    unint64_t v19 = (uint64_t)(v12 - (void)v6) >> 3;
    uint64_t v20 = a3;
    if (a3 <= v19)
    {
      unint64_t v21 = a1[1];
      unint64_t v19 = a3;
      goto LABEL_42;
    }
    unint64_t v21 = v12 + 8 * (a3 - v19);
    unint64_t v22 = v20 * 8 - (v12 - (void)v6) - 8;
    if (v22 >= 0x98)
    {
      if (v12 >= (unint64_t)(a4 + 1)
        || (uint64_t v23 = (uint64_t *)a1[1], v12 + (v22 & 0xFFFFFFFFFFFFFFF8) + 8 <= (unint64_t)a4))
      {
        uint64_t v44 = (v22 >> 3) + 1;
        uint64_t v23 = (uint64_t *)(v12 + 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL));
        int64x2_t v45 = vdupq_lane_s64(*a4, 0);
        char v46 = (int64x2_t *)(v12 + 16);
        uint64_t v47 = v44 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v46[-1] = v45;
          *char v46 = v45;
          v46 += 2;
          v47 -= 4;
        }
        while (v47);
        if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_41:
          a1[1] = v21;
          if ((const double *)v12 == v6) {
            return v6;
          }
LABEL_42:
          long long v48 = (char *)&v6[v20];
          int64_t v49 = v21 - (void)&v6[v20];
          uint64_t v50 = v49 >> 3;
          uint64_t v51 = (uint64_t *)(v21 - v20 * 8);
          uint64_t v52 = (void *)v21;
          if ((unint64_t)v51 < v12)
          {
            unint64_t v53 = (v5 & 0xFFFFFFFFFFFFFFF8) + v49;
            uint64_t v54 = (char *)(v53 + v4);
            unint64_t v55 = v53 + v4 + 8;
            if (v12 > v55) {
              unint64_t v55 = v12;
            }
            unint64_t v56 = v55 + ~v4 - v53;
            if (v56 < 0x58)
            {
              uint64_t v52 = (void *)v21;
            }
            else
            {
              unint64_t v57 = v21 - (void)v54;
              uint64_t v52 = (void *)v21;
              if (v57 >= 0x20)
              {
                uint64_t v58 = (v56 >> 3) + 1;
                uint64_t v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
                uint64_t v51 = (uint64_t *)((char *)v51 + v59);
                uint64_t v52 = (void *)(v21 + v59);
                uint64_t v60 = (_OWORD *)(v21 + 16);
                uint64_t v61 = (long long *)(8 * v50 + 8 * v10 + v4 + 16);
                uint64_t v62 = v58 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v63 = *v61;
                  *(v60 - 1) = *(v61 - 1);
                  *uint64_t v60 = v63;
                  v60 += 2;
                  v61 += 2;
                  v62 -= 4;
                }
                while (v62);
                if (v58 == (v58 & 0x3FFFFFFFFFFFFFFCLL)) {
                  goto LABEL_53;
                }
              }
            }
            do
            {
              uint64_t v64 = *v51++;
              *v52++ = v64;
            }
            while ((unint64_t)v51 < v12);
          }
LABEL_53:
          a1[1] = (unint64_t)v52;
          if ((char *)v21 != v48) {
            memmove((void *)(v21 - 8 * v50), v6, v49);
          }
          if (v6 <= v7)
          {
            if (a1[1] <= (unint64_t)v7) {
              unint64_t v65 = 0;
            }
            else {
              unint64_t v65 = a3;
            }
            v7 += v65;
          }
          if (v19 >= 0xA && (v6 >= v7 + 1 || (unint64_t)v7 >= v4 + (v5 & 0xFFFFFFFFFFFFFFF8) + 8 * v19))
          {
            char v66 = (double *)&v6[v19 & 0xFFFFFFFFFFFFFFFCLL];
            unint64_t v67 = v19 & 3;
            float64x2_t v69 = vld1q_dup_f64(v7);
            v70 = (float64x2_t *)(v4 + 8 * v10 + 16);
            unint64_t v71 = v19 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v70[-1] = v69;
              float64x2_t *v70 = v69;
              v70 += 2;
              v71 -= 4;
            }
            while (v71);
            if (v19 == (v19 & 0xFFFFFFFFFFFFFFFCLL)) {
              return v6;
            }
          }
          else
          {
            char v66 = (double *)v6;
            unint64_t v67 = v19;
          }
          do
          {
            *v66++ = *v7;
            --v67;
          }
          while (v67);
          return v6;
        }
      }
    }
    else
    {
      uint64_t v23 = (uint64_t *)a1[1];
    }
    do
      *v23++ = *a4;
    while (v23 != (uint64_t *)v21);
    goto LABEL_41;
  }
  unint64_t v13 = a3 + ((uint64_t)(v12 - v4) >> 3);
  if (v13 >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v15 = v11 - v4;
  if (v15 >> 2 > v13) {
    unint64_t v13 = v15 >> 2;
  }
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v16 = v13;
  }
  if (v16)
  {
    if (v16 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v17 = v16;
    uint64_t v18 = operator new(8 * v16);
    unint64_t v16 = v17;
  }
  else
  {
    uint64_t v18 = 0;
  }
  uint64_t v24 = v5 >> 3;
  unint64_t v25 = (unint64_t)&v18[8 * v10];
  unint64_t v26 = (char *)(v25 + 8 * a3);
  unint64_t v27 = (a3 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  uint64_t v28 = (char *)v25;
  if (v27 < 0x13) {
    goto LABEL_75;
  }
  if (v25 < (unint64_t)(v7 + 1))
  {
    uint64_t v28 = (char *)v25;
    if (&v18[8 * a3 + (v5 & 0xFFFFFFFFFFFFFFF8)] > (unsigned char *)v7) {
      goto LABEL_75;
    }
  }
  unint64_t v29 = v27 + 1;
  uint64_t v28 = (char *)(v25 + 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL));
  int64x2_t v30 = vdupq_lane_s64(*(void *)v7, 0);
  uint64_t v31 = (int64x2_t *)&v18[8 * v24 + 16];
  uint64_t v32 = v29 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v31[-1] = v30;
    int64x2_t *v31 = v30;
    v31 += 2;
    v32 -= 4;
  }
  while (v32);
  if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_75:
    do
    {
      *(double *)uint64_t v28 = *v7;
      v28 += 8;
    }
    while (v28 != v26);
  }
  unint64_t v33 = v25;
  if ((void *)v4 != a2)
  {
    uint64_t v34 = v6;
    unint64_t v33 = v25;
    if ((unint64_t)(v5 - 8) < 0x68) {
      goto LABEL_76;
    }
    uint64_t v34 = v6;
    unint64_t v33 = v25;
    if ((v5 & 0xFFFFFFFFFFFFFFF8) + v4 - (unint64_t)&v18[v5 & 0xFFFFFFFFFFFFFFF8] < 0x20) {
      goto LABEL_76;
    }
    unint64_t v35 = ((unint64_t)(v5 - 8) >> 3) + 1;
    uint64_t v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v34 = &v6[v36 / 0xFFFFFFFFFFFFFFF8];
    unint64_t v33 = v25 - v36;
    uint64_t v37 = 8 * v24 - 16;
    uint64_t v38 = &v18[v37];
    uint64_t v39 = (long long *)(v4 + v37);
    uint64_t v40 = v35 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v41 = *v39;
      *(v38 - 1) = *(v39 - 1);
      *uint64_t v38 = v41;
      v38 -= 2;
      v39 -= 2;
      v40 -= 4;
    }
    while (v40);
    if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_76:
      do
      {
        uint64_t v42 = *((void *)v34-- - 1);
        *(void *)(v33 - 8) = v42;
        v33 -= 8;
      }
      while (v34 != (const double *)v4);
    }
  }
  std::string::size_type v43 = &v18[8 * v16];
  if ((const double *)v12 != v6) {
    memmove(v26, v6, v12 - (void)v6);
  }
  *a1 = v33;
  a1[1] = (unint64_t)&v26[v12 - (void)v6];
  a1[2] = (unint64_t)v43;
  if (v4) {
    operator delete((void *)v4);
  }
  return (const double *)v25;
}

BOOL Espresso::AOT::AreSurfaceDescriptorsEnabled(Espresso::AOT *this, const Espresso::net *a2)
{
  uint64_t v3 = (char *)operator new(0x28uLL);
  strcpy(v3, "experimental.aot.enable_surface_desc");
  unint64_t v4 = (char *)*((void *)this + 60);
  if (!v4) {
    goto LABEL_32;
  }
  uint64_t v5 = (char *)this + 480;
  uint64_t v6 = (char *)this + 480;
  do
  {
    unint64_t v7 = v4[55];
    int v8 = (char)v7;
    if ((v7 & 0x80u) != 0) {
      unint64_t v7 = *((void *)v4 + 5);
    }
    if (v8 >= 0) {
      uint64_t v9 = v4 + 32;
    }
    else {
      uint64_t v9 = (const void *)*((void *)v4 + 4);
    }
    if (v7 >= 0x24) {
      size_t v10 = 36;
    }
    else {
      size_t v10 = v7;
    }
    BOOL v11 = v7 < 0x24;
    int v12 = memcmp(v9, v3, v10);
    BOOL v13 = v12 < 0;
    if (!v12) {
      BOOL v13 = v11;
    }
    BOOL v14 = !v13;
    if (v13) {
      uint64_t v15 = (char **)(v4 + 8);
    }
    else {
      uint64_t v15 = (char **)v4;
    }
    if (v14) {
      uint64_t v6 = v4;
    }
    unint64_t v4 = *v15;
  }
  while (*v15);
  if (v6 == v5) {
    goto LABEL_32;
  }
  unint64_t v16 = v6[55];
  int v17 = (char)v16;
  if ((v16 & 0x80u) != 0) {
    unint64_t v16 = *((void *)v6 + 5);
  }
  uint64_t v18 = v17 >= 0 ? v6 + 32 : (char *)*((void *)v6 + 4);
  size_t v19 = v16 >= 0x24 ? 36 : v16;
  BOOL v20 = v16 > 0x24;
  int v21 = memcmp(v3, v18, v19);
  BOOL v22 = v21 < 0;
  if (!v21) {
    BOOL v22 = v20;
  }
  if (v22)
  {
LABEL_32:
    operator delete(v3);
    return 0;
  }
  operator delete(v3);
  uint64_t v24 = (unsigned __int8 *)(v6 + 56);
  int v25 = v6[79];
  if ((v25 & 0x80000000) == 0)
  {
    if (v25 != 1) {
      return 0;
    }
    return *v24 == 49;
  }
  if (*((void *)v6 + 8) == 1)
  {
    uint64_t v24 = *(unsigned __int8 **)v24;
    return *v24 == 49;
  }
  return 0;
}

uint64_t Espresso::AOT::MapTransformParamsToSurfaceFormat(Espresso::AOT *this, const vimage2espresso_param *a2, const Espresso::layer_nd_shape *a3)
{
  uint64_t bias_g_low = SLODWORD(a2->bias_g);
  if (bias_g_low < 3) {
    return 1;
  }
  if ((bias_g_low & 0x80000000) != 0) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  size_t v6 = 4 * bias_g_low;
  unint64_t v7 = (char *)operator new(4 * bias_g_low);
  memcpy(v7, a2, v6);
  uint64_t v8 = *(int *)&v7[v6 - 12];
  operator delete(v7);
  if (v8 == 1) {
    return 1;
  }
  if ((unint64_t)(v8 - 3) > 1) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Invalid number of components for surface.");
  }
  if (*((_DWORD *)this + 2)) {
    return 2;
  }
  else {
    return 3;
  }
}

void sub_192516DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::GetSurfaceFormatGivenBlobProperties(uint64_t a1, Espresso::AOT *this, vimage2espresso_param *a3)
{
  if (a1 && (v3 = *(unsigned int **)(a1 + 16), (uint64_t v4 = (uint64_t)(*(void *)(a1 + 24) - (void)v3) >> 2) != 0))
  {
    if (v4 != 1) {
      Espresso::throw_exception_selector<Espresso::generic_error>("Multiple 4cc formats specification is not yet supported.");
    }
    uint64_t v5 = (E5RT *)*v3;
    return E5RT::CVPB4ccToSurfaceFormat(v5);
  }
  else
  {
    if (!this) {
      Espresso::throw_exception_selector<Espresso::generic_error>("Surface format could not be determined.");
    }
    return Espresso::AOT::MapTransformParamsToSurfaceFormat(this, a3, (const Espresso::layer_nd_shape *)a3);
  }
}

uint64_t Espresso::AOT::GetBlobNumericalProperties(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(a1 + 136), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *((void *)v2 + 5) + 112;
}

uint64_t Espresso::AOT::GetBlobTransformParams(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 336);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = a1 + 336;
  int v4 = *(char *)(a2 + 23);
  size_t v5 = v4 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(void *)(a2 + 8);
  size_t v6 = v4 >= 0 ? (const void *)a2 : *(const void **)a2;
  uint64_t v7 = a1 + 336;
  do
  {
    int v8 = *(char *)(v2 + 55);
    if (v8 >= 0) {
      size_t v9 = *(unsigned __int8 *)(v2 + 55);
    }
    else {
      size_t v9 = *(void *)(v2 + 40);
    }
    if (v8 >= 0) {
      size_t v10 = (const void *)(v2 + 32);
    }
    else {
      size_t v10 = *(const void **)(v2 + 32);
    }
    if (v5 >= v9) {
      size_t v11 = v9;
    }
    else {
      size_t v11 = v5;
    }
    int v12 = memcmp(v10, v6, v11);
    BOOL v13 = v9 < v5;
    if (v12) {
      BOOL v13 = v12 < 0;
    }
    BOOL v14 = !v13;
    if (v13) {
      uint64_t v15 = (uint64_t *)(v2 + 8);
    }
    else {
      uint64_t v15 = (uint64_t *)v2;
    }
    if (v14) {
      uint64_t v7 = v2;
    }
    uint64_t v2 = *v15;
  }
  while (*v15);
  if (v7 == v3) {
    return 0;
  }
  uint64_t v18 = *(const void **)(v7 + 32);
  uint64_t v17 = v7 + 32;
  unint64_t v16 = v18;
  int v19 = *(char *)(v17 + 23);
  if (v19 >= 0) {
    size_t v20 = *(unsigned __int8 *)(v17 + 23);
  }
  else {
    size_t v20 = *(void *)(v17 + 8);
  }
  if (v19 >= 0) {
    int v21 = (const void *)v17;
  }
  else {
    int v21 = v16;
  }
  if (v20 >= v5) {
    size_t v22 = v5;
  }
  else {
    size_t v22 = v20;
  }
  int v23 = memcmp(v6, v21, v22);
  BOOL v24 = v5 < v20;
  if (v23) {
    BOOL v24 = v23 < 0;
  }
  if (v24) {
    return 0;
  }
  else {
    return v17 + 24;
  }
}

uint64_t Espresso::AOT::ShouldBlobBeSerializedAsTensor(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1) {
    return a3 ^ 1 | (a2 == 0);
  }
  BOOL v3 = *(void *)(a1 + 16) == *(void *)(a1 + 24);
  if (a2) {
    BOOL v3 = 0;
  }
  return a3 ^ 1 | v3;
}

void Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(int8x8_t *this, const Espresso::net *a2)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  BOOL v3 = Espresso::AOT::AreSurfaceDescriptorsEnabled((Espresso::AOT *)this, a2);
  int8x8_t v5 = this[4];
  int8x8_t v4 = this[5];
  if (*(void *)&v4 != *(void *)&v5)
  {
    unint64_t v6 = 0;
    BOOL v7 = v3;
    do
    {
      uint64_t v8 = *(void *)(*(void *)&v5 + 16 * v6);
      size_t v9 = (int **)(v8 + 40);
      int v10 = *(char *)(v8 + 63);
      if (v10 < 0)
      {
        if (*(void *)(v8 + 48) != 6) {
          goto LABEL_4;
        }
        int v12 = *v9;
        int v13 = *v12;
        int v14 = *((unsigned __int16 *)v12 + 2);
        if (v13 != 1601594724 || v14 != 28783) {
          goto LABEL_4;
        }
      }
      else
      {
        if (v10 != 6) {
          goto LABEL_4;
        }
        if (*(_DWORD *)v9 != 1601594724 || *(_WORD *)(v8 + 44) != 28783) {
          goto LABEL_4;
        }
      }
      unint64_t v16 = *(const void **)(v8 + 64);
      if (!v16
      {
        v93 = 0;
        v94 = 0;
        Espresso::throw_exception_selector<Espresso::generic_error>("Unable to cast to dev_op kernel");
      }
      uint64_t v18 = *(std::__shared_weak_count **)(v8 + 72);
      v93 = v17;
      v94 = v18;
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v92 = 0;
      int v92 = *(_DWORD *)(*(uint64_t (**)(void *))(*(void *)v17 + 320))(v17);
      if (!is_cpu(&v92))
      {
        if (is_gpu(&v92))
        {
          int8x8_t v22 = this[8];
          if (!*(void *)&v22) {
            goto LABEL_194;
          }
          uint8x8_t v23 = (uint8x8_t)vcnt_s8(v22);
          v23.i16[0] = vaddlv_u8(v23);
          if (v23.u32[0] > 1uLL)
          {
            unint64_t v24 = v6;
            if (v6 >= *(void *)&v22) {
              unint64_t v24 = v6 % *(void *)&v22;
            }
          }
          else
          {
            unint64_t v24 = (*(void *)&v22 - 1) & v6;
          }
          uint64_t v47 = *(void **)(*(void *)&this[7] + 8 * v24);
          if (!v47) {
            goto LABEL_194;
          }
          long long v48 = (void *)*v47;
          if (!v48) {
            goto LABEL_194;
          }
          if (v23.u32[0] < 2uLL)
          {
            uint64_t v49 = *(void *)&v22 - 1;
            while (1)
            {
              uint64_t v51 = v48[1];
              if (v6 == v51)
              {
                if (v48[2] == v6) {
                  goto LABEL_103;
                }
              }
              else if ((v51 & v49) != v24)
              {
                goto LABEL_194;
              }
              long long v48 = (void *)*v48;
              if (!v48) {
                goto LABEL_194;
              }
            }
          }
          while (1)
          {
            unint64_t v50 = v48[1];
            if (v6 == v50)
            {
              if (v48[2] == v6)
              {
LABEL_103:
                int8x8_t v52 = this[13];
                if (v52)
                {
                  uint8x8_t v53 = (uint8x8_t)vcnt_s8(v52);
                  v53.i16[0] = vaddlv_u8(v53);
                  if (v53.u32[0] > 1uLL)
                  {
                    unint64_t v54 = v6;
                    if (v6 >= *(void *)&v52) {
                      unint64_t v54 = v6 % *(void *)&v52;
                    }
                  }
                  else
                  {
                    unint64_t v54 = (*(void *)&v52 - 1) & v6;
                  }
                  long long v63 = *(void **)(*(void *)&this[12] + 8 * v54);
                  if (v63)
                  {
                    uint64_t v64 = (void *)*v63;
                    if (*v63)
                    {
                      if (v53.u32[0] < 2uLL)
                      {
                        uint64_t v65 = *(void *)&v52 - 1;
                        while (1)
                        {
                          uint64_t v67 = v64[1];
                          if (v6 == v67)
                          {
                            if (v64[2] == v6) {
                              goto LABEL_143;
                            }
                          }
                          else if ((v67 & v65) != v54)
                          {
                            goto LABEL_194;
                          }
                          uint64_t v64 = (void *)*v64;
                          if (!v64) {
                            goto LABEL_194;
                          }
                        }
                      }
                      do
                      {
                        unint64_t v66 = v64[1];
                        if (v6 == v66)
                        {
                          if (v64[2] == v6)
                          {
LABEL_143:
                            v98[0] = &unk_1EE37D400;
                            v98[1] = this;
                            v98[2] = v7;
                            v99 = v98;
                            char v91 = 3;
                            LODWORD(__p[0]) = 5591111;
                            uint64_t v69 = v48[3];
                            uint64_t v68 = v48[4];
                            if (v69 != v68)
                            {
                              while (1)
                              {
                                if (!v99) {
LABEL_200:
                                }
                                  std::__throw_bad_function_call[abi:ne180100]();
                                if (((*(uint64_t (**)(void *, uint64_t))(*v99 + 48))(v99, v69) & 1) == 0) {
                                  break;
                                }
                                v69 += 24;
                                if (v69 == v68) {
                                  goto LABEL_147;
                                }
                              }
                              v86 = __p;
                              if (v91 < 0) {
                                v86 = (void **)__p[0];
                              }
                              v95 = v86;
                              v87 = "Layer input to %s op has invalid numerical properties.";
LABEL_214:
                              Espresso::throw_exception_selector<Espresso::generic_error,char const*&>(v87, &v95);
                            }
LABEL_147:
                            uint64_t v71 = v64[3];
                            uint64_t v70 = v64[4];
                            if (v71 != v70)
                            {
                              while (1)
                              {
                                if (!v99) {
                                  goto LABEL_200;
                                }
                                if (((*(uint64_t (**)(void *, uint64_t))(*v99 + 48))(v99, v71) & 1) == 0) {
                                  break;
                                }
                                v71 += 24;
                                if (v71 == v70) {
                                  goto LABEL_151;
                                }
                              }
                              v88 = __p;
                              if (v91 < 0) {
                                v88 = (void **)__p[0];
                              }
                              v95 = v88;
                              v87 = "Layer output of %s op has invalid numerical properties.";
                              goto LABEL_214;
                            }
LABEL_151:
                            if (v91 < 0)
                            {
                              operator delete(__p[0]);
                              int64x2_t v45 = v99;
                              if (v99 == v98) {
                                goto LABEL_183;
                              }
                            }
                            else
                            {
                              int64x2_t v45 = v99;
                              if (v99 == v98)
                              {
LABEL_183:
                                (*(void (**)(void *))(v98[0] + 32))(v98);
                                char v46 = v94;
                                if (v94) {
                                  goto LABEL_189;
                                }
                                goto LABEL_3;
                              }
                            }
LABEL_186:
                            if (v45) {
                              (*(void (**)(void *))(*v45 + 40))(v45);
                            }
                            char v46 = v94;
                            if (v94) {
                              goto LABEL_189;
                            }
                            goto LABEL_3;
                          }
                        }
                        else
                        {
                          if (v66 >= *(void *)&v52) {
                            v66 %= *(void *)&v52;
                          }
                          if (v66 != v54) {
                            break;
                          }
                        }
                        uint64_t v64 = (void *)*v64;
                      }
                      while (v64);
                    }
                  }
                }
LABEL_194:
                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
              }
            }
            else
            {
              if (v50 >= *(void *)&v22) {
                v50 %= *(void *)&v22;
              }
              if (v50 != v24) {
                goto LABEL_194;
              }
            }
            long long v48 = (void *)*v48;
            if (!v48) {
              goto LABEL_194;
            }
          }
        }
        if (!is_ane(&v92)) {
          Espresso::throw_exception_selector<Espresso::generic_error>("Unsupported platform encountered for dev op kernel.");
        }
        int8x8_t v33 = this[8];
        if (!*(void *)&v33) {
          goto LABEL_194;
        }
        uint8x8_t v34 = (uint8x8_t)vcnt_s8(v33);
        v34.i16[0] = vaddlv_u8(v34);
        if (v34.u32[0] > 1uLL)
        {
          unint64_t v35 = v6;
          if (v6 >= *(void *)&v33) {
            unint64_t v35 = v6 % *(void *)&v33;
          }
        }
        else
        {
          unint64_t v35 = (*(void *)&v33 - 1) & v6;
        }
        unint64_t v55 = *(void **)(*(void *)&this[7] + 8 * v35);
        if (!v55) {
          goto LABEL_194;
        }
        unint64_t v56 = (void *)*v55;
        if (!v56) {
          goto LABEL_194;
        }
        if (v34.u32[0] < 2uLL)
        {
          uint64_t v57 = *(void *)&v33 - 1;
          while (1)
          {
            uint64_t v59 = v56[1];
            if (v6 == v59)
            {
              if (v56[2] == v6) {
                goto LABEL_123;
              }
            }
            else if ((v59 & v57) != v35)
            {
              goto LABEL_194;
            }
            unint64_t v56 = (void *)*v56;
            if (!v56) {
              goto LABEL_194;
            }
          }
        }
        while (1)
        {
          unint64_t v58 = v56[1];
          if (v6 == v58)
          {
            if (v56[2] == v6)
            {
LABEL_123:
              int8x8_t v60 = this[13];
              if (!*(void *)&v60) {
                goto LABEL_194;
              }
              uint8x8_t v61 = (uint8x8_t)vcnt_s8(v60);
              v61.i16[0] = vaddlv_u8(v61);
              if (v61.u32[0] > 1uLL)
              {
                unint64_t v62 = v6;
                if (v6 >= *(void *)&v60) {
                  unint64_t v62 = v6 % *(void *)&v60;
                }
              }
              else
              {
                unint64_t v62 = (*(void *)&v60 - 1) & v6;
              }
              std::__fs::filesystem::path v72 = *(void **)(*(void *)&this[12] + 8 * v62);
              if (!v72) {
                goto LABEL_194;
              }
              v73 = (void *)*v72;
              if (!*v72) {
                goto LABEL_194;
              }
              if (v61.u32[0] < 2uLL)
              {
                uint64_t v74 = *(void *)&v60 - 1;
                while (1)
                {
                  uint64_t v76 = v73[1];
                  if (v6 == v76)
                  {
                    if (v73[2] == v6) {
                      goto LABEL_171;
                    }
                  }
                  else if ((v76 & v74) != v62)
                  {
                    goto LABEL_194;
                  }
                  v73 = (void *)*v73;
                  if (!v73) {
                    goto LABEL_194;
                  }
                }
              }
              while (1)
              {
                unint64_t v75 = v73[1];
                if (v6 == v75)
                {
                  if (v73[2] == v6)
                  {
LABEL_171:
                    v96[0] = &unk_1EE37D458;
                    v96[1] = this;
                    v96[2] = v7;
                    v97 = v96;
                    char v91 = 3;
                    LODWORD(__p[0]) = 4542017;
                    uint64_t v78 = v56[3];
                    uint64_t v77 = v56[4];
                    if (v78 == v77)
                    {
LABEL_175:
                      uint64_t v80 = v73[3];
                      uint64_t v79 = v73[4];
                      if (v80 == v79)
                      {
LABEL_179:
                        if (v91 < 0)
                        {
                          operator delete(__p[0]);
                          int64x2_t v45 = v97;
                          if (v97 != v96) {
                            goto LABEL_186;
                          }
                        }
                        else
                        {
                          int64x2_t v45 = v97;
                          if (v97 != v96) {
                            goto LABEL_186;
                          }
                        }
                        (*(void (**)(void *))(v96[0] + 32))(v96);
                        char v46 = v94;
                        if (v94) {
                          goto LABEL_189;
                        }
                        goto LABEL_3;
                      }
                      while (1)
                      {
                        if (!v97) {
                          goto LABEL_199;
                        }
                        if (((*(uint64_t (**)(void *, uint64_t))(*v97 + 48))(v97, v80) & 1) == 0) {
                          break;
                        }
                        v80 += 24;
                        if (v80 == v79) {
                          goto LABEL_179;
                        }
                      }
                      v89 = __p;
                      if (v91 < 0) {
                        v89 = (void **)__p[0];
                      }
                      v95 = v89;
                      v85 = "Layer output of %s op has invalid numerical properties.";
                    }
                    else
                    {
                      while (1)
                      {
                        if (!v97) {
LABEL_199:
                        }
                          std::__throw_bad_function_call[abi:ne180100]();
                        if (((*(uint64_t (**)(void *, uint64_t))(*v97 + 48))(v97, v78) & 1) == 0) {
                          break;
                        }
                        v78 += 24;
                        if (v78 == v77) {
                          goto LABEL_175;
                        }
                      }
                      v84 = __p;
                      if (v91 < 0) {
                        v84 = (void **)__p[0];
                      }
                      v95 = v84;
                      v85 = "Layer input to %s op has invalid numerical properties.";
                    }
                    Espresso::throw_exception_selector<Espresso::generic_error,char const*&>(v85, &v95);
                  }
                }
                else
                {
                  if (v75 >= *(void *)&v60) {
                    v75 %= *(void *)&v60;
                  }
                  if (v75 != v62) {
                    goto LABEL_194;
                  }
                }
                v73 = (void *)*v73;
                if (!v73) {
                  goto LABEL_194;
                }
              }
            }
          }
          else
          {
            if (v58 >= *(void *)&v33) {
              v58 %= *(void *)&v33;
            }
            if (v58 != v35) {
              goto LABEL_194;
            }
          }
          unint64_t v56 = (void *)*v56;
          if (!v56) {
            goto LABEL_194;
          }
        }
      }
      int8x8_t v19 = this[8];
      if (!*(void *)&v19) {
        goto LABEL_194;
      }
      uint8x8_t v20 = (uint8x8_t)vcnt_s8(v19);
      v20.i16[0] = vaddlv_u8(v20);
      if (v20.u32[0] > 1uLL)
      {
        unint64_t v21 = v6;
        if (v6 >= *(void *)&v19) {
          unint64_t v21 = v6 % *(void *)&v19;
        }
      }
      else
      {
        unint64_t v21 = (*(void *)&v19 - 1) & v6;
      }
      int v25 = *(void **)(*(void *)&this[7] + 8 * v21);
      if (!v25) {
        goto LABEL_194;
      }
      unint64_t v26 = (void *)*v25;
      if (!v26) {
        goto LABEL_194;
      }
      if (v20.u32[0] < 2uLL)
      {
        uint64_t v27 = *(void *)&v19 - 1;
        while (1)
        {
          uint64_t v29 = v26[1];
          if (v6 == v29)
          {
            if (v26[2] == v6) {
              goto LABEL_48;
            }
          }
          else if ((v29 & v27) != v21)
          {
            goto LABEL_194;
          }
          unint64_t v26 = (void *)*v26;
          if (!v26) {
            goto LABEL_194;
          }
        }
      }
      while (1)
      {
        unint64_t v28 = v26[1];
        if (v6 == v28) {
          break;
        }
        if (v28 >= *(void *)&v19) {
          v28 %= *(void *)&v19;
        }
        if (v28 != v21) {
          goto LABEL_194;
        }
LABEL_38:
        unint64_t v26 = (void *)*v26;
        if (!v26) {
          goto LABEL_194;
        }
      }
      if (v26[2] != v6) {
        goto LABEL_38;
      }
LABEL_48:
      int8x8_t v30 = this[13];
      if (!*(void *)&v30) {
        goto LABEL_194;
      }
      uint8x8_t v31 = (uint8x8_t)vcnt_s8(v30);
      v31.i16[0] = vaddlv_u8(v31);
      if (v31.u32[0] > 1uLL)
      {
        unint64_t v32 = v6;
        if (v6 >= *(void *)&v30) {
          unint64_t v32 = v6 % *(void *)&v30;
        }
      }
      else
      {
        unint64_t v32 = (*(void *)&v30 - 1) & v6;
      }
      uint64_t v36 = *(void **)(*(void *)&this[12] + 8 * v32);
      if (!v36) {
        goto LABEL_194;
      }
      uint64_t v37 = (void *)*v36;
      if (!*v36) {
        goto LABEL_194;
      }
      if (v31.u32[0] < 2uLL)
      {
        uint64_t v38 = *(void *)&v30 - 1;
        while (1)
        {
          uint64_t v40 = v37[1];
          if (v6 == v40)
          {
            if (v37[2] == v6) {
              goto LABEL_72;
            }
          }
          else if ((v40 & v38) != v32)
          {
            goto LABEL_194;
          }
          uint64_t v37 = (void *)*v37;
          if (!v37) {
            goto LABEL_194;
          }
        }
      }
      while (2)
      {
        unint64_t v39 = v37[1];
        if (v6 != v39)
        {
          if (v39 >= *(void *)&v30) {
            v39 %= *(void *)&v30;
          }
          if (v39 != v32) {
            goto LABEL_194;
          }
LABEL_62:
          uint64_t v37 = (void *)*v37;
          if (!v37) {
            goto LABEL_194;
          }
          continue;
        }
        break;
      }
      if (v37[2] != v6) {
        goto LABEL_62;
      }
LABEL_72:
      v100[0] = &unk_1EE37D3A8;
      v100[1] = this;
      v100[2] = v7;
      v101 = v100;
      char v91 = 3;
      LODWORD(__p[0]) = 5591107;
      uint64_t v42 = v26[3];
      uint64_t v41 = v26[4];
      if (v42 != v41)
      {
        while (1)
        {
          if (!v101) {
LABEL_195:
          }
            std::__throw_bad_function_call[abi:ne180100]();
          if (((*(uint64_t (**)(void *, uint64_t))(*v101 + 48))(v101, v42) & 1) == 0) {
            break;
          }
          v42 += 24;
          if (v42 == v41) {
            goto LABEL_76;
          }
        }
        v81 = __p;
        if (v91 < 0) {
          v81 = (void **)__p[0];
        }
        v95 = v81;
        v82 = "Layer input to %s op has invalid numerical properties.";
LABEL_204:
        Espresso::throw_exception_selector<Espresso::generic_error,char const*&>(v82, &v95);
      }
LABEL_76:
      uint64_t v44 = v37[3];
      uint64_t v43 = v37[4];
      if (v44 != v43)
      {
        while (1)
        {
          if (!v101) {
            goto LABEL_195;
          }
          if (((*(uint64_t (**)(void *, uint64_t))(*v101 + 48))(v101, v44) & 1) == 0) {
            break;
          }
          v44 += 24;
          if (v44 == v43) {
            goto LABEL_80;
          }
        }
        v83 = __p;
        if (v91 < 0) {
          v83 = (void **)__p[0];
        }
        v95 = v83;
        v82 = "Layer output of %s op has invalid numerical properties.";
        goto LABEL_204;
      }
LABEL_80:
      if (v91 < 0)
      {
        operator delete(__p[0]);
        int64x2_t v45 = v101;
        if (v101 == v100) {
          goto LABEL_84;
        }
        goto LABEL_186;
      }
      int64x2_t v45 = v101;
      if (v101 != v100) {
        goto LABEL_186;
      }
LABEL_84:
      (*(void (**)(void *))(v100[0] + 32))(v100);
      char v46 = v94;
      if (!v94) {
        goto LABEL_3;
      }
LABEL_189:
      if (!atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
LABEL_3:
      int8x8_t v5 = this[4];
      int8x8_t v4 = this[5];
LABEL_4:
      ++v6;
    }
    while (v6 < (uint64_t)(*(void *)&v4 - *(void *)&v5) >> 4);
  }
}

void sub_192517C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192517C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192517C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::function<BOOL ()(std::string const&)>::~function(&a20);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_192517CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::function<BOOL ()(std::string const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

size_t Espresso::AOT::GetANENameForE5Platform@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int64_t v4 = *(void *)a1;
  if (v4 > 32806)
  {
    if (v4 <= 33024)
    {
      if (v4 == 32807)
      {
LABEL_16:
        int8x8_t v5 = Espresso::ANECompilerEngine::ANEArchitectureH11;
        goto LABEL_29;
      }
      if (v4 == 32816)
      {
        int8x8_t v5 = Espresso::ANECompilerEngine::ANEArchitectureH12;
        goto LABEL_29;
      }
LABEL_38:
      std::to_string(&v16, v4);
      int v13 = std::string::insert(&v16, 0, "Invalid platform id: ");
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      int64_t v18 = v13->__r_.__value_.__r.__words[2];
      long long v17 = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      if (v18 >= 0) {
        uint64_t v15 = (const char *)&v17;
      }
      else {
        uint64_t v15 = (const char *)v17;
      }
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>(v15);
    }
    switch(v4)
    {
      case 33025:
        int8x8_t v5 = Espresso::ANECompilerEngine::ANEArchitectureH13;
        break;
      case 33026:
      case 33028:
      case 33029:
      case 33030:
      case 33031:
      case 33032:
      case 33033:
      case 33034:
      case 33035:
      case 33036:
      case 33037:
      case 33038:
      case 33039:
      case 33041:
      case 33043:
      case 33044:
      case 33045:
      case 33046:
      case 33047:
      case 33048:
      case 33049:
      case 33050:
      case 33051:
      case 33052:
      case 33053:
      case 33054:
      case 33055:
      case 33057:
      case 33059:
      case 33060:
      case 33061:
      case 33062:
      case 33063:
      case 33064:
      case 33065:
      case 33066:
      case 33067:
      case 33068:
      case 33069:
      case 33070:
      case 33071:
      case 33073:
      case 33075:
      case 33076:
      case 33077:
      case 33078:
      case 33079:
      case 33080:
      case 33081:
      case 33082:
      case 33083:
      case 33084:
      case 33085:
      case 33086:
      case 33087:
        goto LABEL_38;
      case 33027:
LABEL_9:
        int8x8_t v5 = Espresso::ANECompilerEngine::ANEArchitectureH13G;
        break;
      case 33040:
        int8x8_t v5 = Espresso::ANECompilerEngine::ANEArchitectureH14;
        break;
      case 33042:
LABEL_7:
        if (*(_DWORD *)(a1 + 8) == 1311977521) {
          unint64_t v6 = Espresso::ANECompilerEngine::ANEArchitectureH14GN301;
        }
        else {
          unint64_t v6 = Espresso::ANECompilerEngine::ANEArchitectureH14G;
        }
        BOOL v7 = (const char *)[(__CFString *)*v6 UTF8String];
        size_t result = strlen(v7);
        if (result > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_22;
        }
        goto LABEL_30;
      case 33056:
        int8x8_t v5 = Espresso::ANECompilerEngine::ANEArchitectureH15;
        break;
      case 33058:
LABEL_3:
        int8x8_t v5 = Espresso::ANECompilerEngine::ANEArchitectureH15G;
        break;
      case 33072:
        int8x8_t v5 = Espresso::ANECompilerEngine::ANEArchitectureH16;
        break;
      case 33074:
LABEL_10:
        int8x8_t v5 = &Espresso::ANECompilerEngine::ANEArchitectureH16G;
        break;
      case 33088:
        int8x8_t v5 = Espresso::ANECompilerEngine::ANEArchitectureH17;
        break;
      default:
        if (v4 == 33537)
        {
          int8x8_t v5 = Espresso::ANECompilerEngine::ANEArchitectureM10;
        }
        else
        {
          if (v4 != 33552) {
            goto LABEL_38;
          }
          int8x8_t v5 = Espresso::ANECompilerEngine::ANEArchitectureM11;
        }
        break;
    }
  }
  else
  {
    switch(v4)
    {
      case 24576:
      case 24577:
      case 24578:
        goto LABEL_9;
      case 24579:
      case 24580:
      case 24581:
      case 24582:
      case 24583:
      case 24584:
      case 24585:
      case 24586:
      case 24587:
      case 24588:
      case 24589:
      case 24590:
      case 24591:
      case 24592:
      case 24593:
      case 24594:
      case 24595:
      case 24596:
      case 24597:
      case 24598:
      case 24599:
      case 24600:
      case 24601:
      case 24602:
      case 24603:
      case 24604:
      case 24605:
      case 24606:
      case 24607:
      case 24611:
      case 24612:
      case 24613:
      case 24614:
      case 24615:
      case 24616:
      case 24617:
      case 24618:
      case 24619:
      case 24620:
      case 24621:
      case 24622:
      case 24623:
      case 24627:
      case 24629:
      case 24630:
      case 24631:
      case 24632:
      case 24633:
      case 24634:
      case 24635:
      case 24636:
      case 24637:
      case 24638:
      case 24639:
        goto LABEL_38;
      case 24608:
      case 24609:
      case 24610:
        goto LABEL_7;
      case 24624:
      case 24625:
      case 24626:
      case 24628:
        goto LABEL_3;
      case 24640:
      case 24641:
        goto LABEL_10;
      default:
        if (v4 != 32774)
        {
          if (v4 == 32800) {
            goto LABEL_16;
          }
          goto LABEL_38;
        }
        int8x8_t v5 = Espresso::ANECompilerEngine::ANEArchitectureM9;
        break;
    }
  }
LABEL_29:
  BOOL v7 = (const char *)[(__CFString *)*v5 UTF8String];
  size_t result = strlen(v7);
  if (result > 0x7FFFFFFFFFFFFFF7) {
LABEL_22:
  }
    std::string::__throw_length_error[abi:ne180100]();
LABEL_30:
  size_t v9 = result;
  if (result >= 0x17)
  {
    uint64_t v10 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v10 = result | 7;
    }
    uint64_t v11 = v10 + 1;
    int v12 = operator new(v10 + 1);
    a2[1] = v9;
    a2[2] = v11 | 0x8000000000000000;
    *a2 = v12;
    a2 = v12;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result) {
      goto LABEL_37;
    }
  }
  size_t result = (size_t)memmove(a2, v7, v9);
LABEL_37:
  *((unsigned char *)a2 + v9) = 0;
  return result;
}

void sub_192518044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::E5FuncToConfigName(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  int v5 = *(char *)(a1 + 23);
  if (a2)
  {
    if (v5 < 0)
    {
      std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
      int v7 = *(char *)(a3 + 23);
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
    }
    else
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a4->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
      int v7 = *(char *)(a3 + 23);
      if ((v7 & 0x80000000) == 0)
      {
LABEL_4:
        std::string::size_type v8 = v7;
LABEL_9:
        std::string::erase(a4, 0, v8);
        return;
      }
    }
    std::string::size_type v8 = *(void *)(a3 + 8);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
    size_t v9 = *(const std::string::value_type **)a1;
    std::string::size_type v10 = *(void *)(a1 + 8);
    std::string::__init_copy_ctor_external(a4, v9, v10);
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a4->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
}

void sub_192518334(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v47, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    long long v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          unint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = v15[1];
            if (v23 == v11)
            {
              uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v25 = v15[3];
              }
              if (v25 == v17)
              {
                unint64_t v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  for (unint64_t i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    unint64_t v26 = (const void **)((char *)v26 + 1);
                    if (!--v24) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              unint64_t v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                for (j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  unint64_t v21 = (const void **)((char *)v21 + 1);
                  if (!--v19) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  unint64_t v28 = (char *)operator new(0x50uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  char v48 = 0;
  *(void *)unint64_t v28 = 0;
  *((void *)v28 + 1) = v11;
  uint64_t v29 = (std::string *)(v28 + 16);
  int8x8_t v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)v30, *((void *)v30 + 1));
  }
  else
  {
    long long v31 = *v30;
    *((void *)v28 + 4) = *((void *)v30 + 2);
    *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v31;
  }
  *(_OWORD *)(v28 + 56) = 0u;
  *(_OWORD *)(v28 + 40) = 0u;
  *((_DWORD *)v28 + 18) = 1065353216;
  char v48 = 1;
  float v32 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    BOOL v36 = 1;
    if (v12 >= 3) {
      BOOL v36 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v37 = v36 | (2 * v12);
    unint64_t v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38) {
      size_t prime = v38;
    }
    else {
      size_t prime = v37;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v40) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v40)
    {
      unint64_t v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v40 < 3uLL || (uint8x8_t v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        unint64_t v41 = std::__next_prime(v41);
      }
      else
      {
        uint64_t v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2) {
          unint64_t v41 = v43;
        }
      }
      if (prime <= v41) {
        size_t prime = v41;
      }
      if (prime < *(void *)&v40) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint8x8_t v34 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        unint64_t v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint8x8_t v34 = *(void **)(*(void *)a1 + 8 * v11);
        unint64_t v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v44 & v11;
      uint8x8_t v34 = *(void **)(*(void *)a1 + 8 * (v44 & v11));
      unint64_t v35 = (void *)v47[0];
      if (v34) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *unint64_t v35 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v47[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v47[0])
    {
      unint64_t v45 = *(void *)(*(void *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12) {
          v45 %= v12;
        }
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  uint8x8_t v34 = *(void **)(*(void *)a1 + 8 * v4);
  unint64_t v35 = (void *)v47[0];
  if (!v34) {
    goto LABEL_81;
  }
LABEL_57:
  *unint64_t v35 = *v34;
  *uint8x8_t v34 = v47[0];
LABEL_92:
  uint64_t v15 = (uint64_t *)v47[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_1925187B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_1925187C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_0,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_0>,BOOL ()(std::string const&)>::~__func()
{
}

__n128 std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_0,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_0>,BOOL ()(std::string const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE37D3A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_0,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_0>,BOOL ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37D3A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_0,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_0>,BOOL ()(std::string const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(*(void *)(a1 + 8) + 136), (unsigned __int8 *)a2);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v5 = *((void *)v4 + 5);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = v6 + 336;
  uint64_t v8 = *(void *)(v6 + 336);
  if (v8)
  {
    uint64_t v60 = *(void *)(a1 + 8);
    char v9 = *(unsigned char *)(a2 + 23);
    if (v9 >= 0) {
      size_t v10 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v10 = *(void *)(a2 + 8);
    }
    if (v9 >= 0) {
      unint64_t v11 = (const void *)a2;
    }
    else {
      unint64_t v11 = *(const void **)a2;
    }
    uint64_t v12 = v6 + 336;
    uint64_t v13 = v8;
    do
    {
      int v14 = *(char *)(v13 + 55);
      if (v14 >= 0) {
        size_t v15 = *(unsigned __int8 *)(v13 + 55);
      }
      else {
        size_t v15 = *(void *)(v13 + 40);
      }
      if (v14 >= 0) {
        char v16 = (const void *)(v13 + 32);
      }
      else {
        char v16 = *(const void **)(v13 + 32);
      }
      if (v10 >= v15) {
        size_t v17 = v15;
      }
      else {
        size_t v17 = v10;
      }
      int v18 = memcmp(v16, v11, v17);
      BOOL v19 = v15 < v10;
      if (v18) {
        BOOL v19 = v18 < 0;
      }
      BOOL v20 = !v19;
      if (v19) {
        unint64_t v21 = (uint64_t *)(v13 + 8);
      }
      else {
        unint64_t v21 = (uint64_t *)v13;
      }
      if (v20) {
        uint64_t v12 = v13;
      }
      uint64_t v13 = *v21;
    }
    while (*v21);
    if (v12 == v7)
    {
      uint64_t v6 = v60;
      BOOL v30 = *(void *)(v5 + 128) == *(void *)(v5 + 136);
      if (!*(unsigned char *)(a1 + 16)) {
        return !*(_DWORD *)(v5 + 120) && *(_DWORD *)(v5 + 124) == 1;
      }
    }
    else
    {
      uint64_t v24 = *(const void **)(v12 + 32);
      uint64_t v23 = v12 + 32;
      int8x8_t v22 = v24;
      int v25 = *(char *)(v23 + 23);
      if (v25 >= 0) {
        size_t v26 = *(unsigned __int8 *)(v23 + 23);
      }
      else {
        size_t v26 = *(void *)(v23 + 8);
      }
      if (v25 >= 0) {
        uint64_t v27 = (const void *)v23;
      }
      else {
        uint64_t v27 = v22;
      }
      if (v26 >= v10) {
        size_t v28 = v10;
      }
      else {
        size_t v28 = v26;
      }
      int v29 = memcmp(v11, v27, v28);
      BOOL v30 = v10 < v26;
      if (v29) {
        BOOL v30 = v29 < 0;
      }
      uint64_t v6 = v60;
      if (*(void *)(v5 + 128) != *(void *)(v5 + 136)) {
        BOOL v30 = 0;
      }
      if (!*(unsigned char *)(a1 + 16)) {
        return !*(_DWORD *)(v5 + 120) && *(_DWORD *)(v5 + 124) == 1;
      }
    }
  }
  else
  {
    BOOL v30 = *(void *)(v5 + 128) == *(void *)(v5 + 136);
    if (!*(unsigned char *)(a1 + 16)) {
      return !*(_DWORD *)(v5 + 120) && *(_DWORD *)(v5 + 124) == 1;
    }
  }
  if (v30) {
    return !*(_DWORD *)(v5 + 120) && *(_DWORD *)(v5 + 124) == 1;
  }
  if (!v8) {
    goto LABEL_91;
  }
  int v31 = *(char *)(a2 + 23);
  size_t v32 = v31 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(void *)(a2 + 8);
  float v33 = v31 >= 0 ? (const void *)a2 : *(const void **)a2;
  uint64_t v34 = v7;
  do
  {
    int v35 = *(char *)(v8 + 55);
    if (v35 >= 0) {
      size_t v36 = *(unsigned __int8 *)(v8 + 55);
    }
    else {
      size_t v36 = *(void *)(v8 + 40);
    }
    if (v35 >= 0) {
      unint64_t v37 = (const void *)(v8 + 32);
    }
    else {
      unint64_t v37 = *(const void **)(v8 + 32);
    }
    if (v32 >= v36) {
      size_t v38 = v36;
    }
    else {
      size_t v38 = v32;
    }
    int v39 = memcmp(v37, v33, v38);
    BOOL v40 = v36 < v32;
    if (v39) {
      BOOL v40 = v39 < 0;
    }
    BOOL v41 = !v40;
    if (v40) {
      uint8x8_t v42 = (uint64_t *)(v8 + 8);
    }
    else {
      uint8x8_t v42 = (uint64_t *)v8;
    }
    if (v41) {
      uint64_t v34 = v8;
    }
    uint64_t v8 = *v42;
  }
  while (*v42);
  if (v34 == v7)
  {
LABEL_91:
    int8x8_t v52 = 0;
  }
  else
  {
    unint64_t v45 = *(const void **)(v34 + 32);
    uint64_t v44 = v34 + 32;
    uint64_t v43 = v45;
    int v46 = *(char *)(v44 + 23);
    if (v46 >= 0) {
      size_t v47 = *(unsigned __int8 *)(v44 + 23);
    }
    else {
      size_t v47 = *(void *)(v44 + 8);
    }
    if (v46 >= 0) {
      char v48 = (const void *)v44;
    }
    else {
      char v48 = v43;
    }
    if (v47 >= v32) {
      size_t v49 = v32;
    }
    else {
      size_t v49 = v47;
    }
    int v50 = memcmp(v33, v48, v49);
    BOOL v51 = v32 < v47;
    if (v50) {
      BOOL v51 = v50 < 0;
    }
    if (v51) {
      int8x8_t v52 = 0;
    }
    else {
      int8x8_t v52 = (Espresso::AOT *)(v44 + 24);
    }
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v64, (const Espresso::layer_shape *)v61, 0);
  unint64_t v55 = *(unsigned int **)(v5 + 128);
  uint64_t v56 = (uint64_t)(*(void *)(v5 + 136) - (void)v55) >> 2;
  if (!v56)
  {
    if (v52)
    {
      int v57 = Espresso::AOT::MapTransformParamsToSurfaceFormat(v52, &v64, v54);
      goto LABEL_97;
    }
    uint64_t v59 = "Surface format could not be determined.";
LABEL_104:
    Espresso::throw_exception_selector<Espresso::generic_error>(v59);
  }
  if (v56 != 1)
  {
    uint64_t v59 = "Multiple 4cc formats specification is not yet supported.";
    goto LABEL_104;
  }
  int v57 = E5RT::CVPB4ccToSurfaceFormat((E5RT *)*v55);
LABEL_97:
  int v58 = v57;
  if (__p)
  {
    long long v63 = __p;
    operator delete(__p);
  }
  return (v58 - 1) < 2;
}

void sub_192518B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_0,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_0>,BOOL ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT44ValidateBlobNumericalPropsForLayersInNetworkERKNS_3netEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN8Espresso3AOT44ValidateBlobNumericalPropsForLayersInNetworkERKNS_3netEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT44ValidateBlobNumericalPropsForLayersInNetworkERKNS_3netEE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT44ValidateBlobNumericalPropsForLayersInNetworkERKNS_3netEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_0,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_0>,BOOL ()(std::string const&)>::target_type()
{
}

unsigned __int8 *anonymous namespace'::GetBlobShape(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  __n128 result = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(a2 + 136), a3);
  if (!result) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v5 = *((void *)result + 5);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  long long v6 = *(_OWORD *)(v5 + 24);
  *(_OWORD *)a1 = *(_OWORD *)(v5 + 8);
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(v5 + 40);
  if (a1 + 40 != v5 + 48) {
    return (unsigned __int8 *)std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(a1 + 40), *(char **)(v5 + 48), *(void *)(v5 + 56), (uint64_t)(*(void *)(v5 + 56) - *(void *)(v5 + 48)) >> 2);
  }
  return result;
}

void sub_192518CBC(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_1,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_1>,BOOL ()(std::string const&)>::~__func()
{
}

__n128 std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_1,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_1>,BOOL ()(std::string const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE37D400;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_1,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_1>,BOOL ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37D400;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_1,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_1>,BOOL ()(std::string const&)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2;
  unint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(*(void *)(a1 + 8) + 136), a2);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v5 = *((void *)v4 + 5);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(v6 + 336);
  if (!v7) {
    goto LABEL_43;
  }
  uint64_t v8 = v6 + 336;
  int v9 = (char)v2[23];
  if (v9 >= 0) {
    size_t v10 = v2[23];
  }
  else {
    size_t v10 = *((void *)v2 + 1);
  }
  if (v9 < 0) {
    uint64_t v2 = *(unsigned __int8 **)v2;
  }
  uint64_t v11 = v6 + 336;
  do
  {
    int v12 = *(char *)(v7 + 55);
    if (v12 >= 0) {
      size_t v13 = *(unsigned __int8 *)(v7 + 55);
    }
    else {
      size_t v13 = *(void *)(v7 + 40);
    }
    if (v12 >= 0) {
      int v14 = (const void *)(v7 + 32);
    }
    else {
      int v14 = *(const void **)(v7 + 32);
    }
    if (v10 >= v13) {
      size_t v15 = v13;
    }
    else {
      size_t v15 = v10;
    }
    int v16 = memcmp(v14, v2, v15);
    BOOL v17 = v13 < v10;
    if (v16) {
      BOOL v17 = v16 < 0;
    }
    BOOL v18 = !v17;
    if (v17) {
      BOOL v19 = (uint64_t *)(v7 + 8);
    }
    else {
      BOOL v19 = (uint64_t *)v7;
    }
    if (v18) {
      uint64_t v11 = v7;
    }
    uint64_t v7 = *v19;
  }
  while (*v19);
  if (v11 == v8)
  {
LABEL_43:
    BOOL v28 = *(void *)(v5 + 128) == *(void *)(v5 + 136);
    if (!*(unsigned char *)(a1 + 16)) {
      return *(_DWORD *)(v5 + 124) == 1;
    }
  }
  else
  {
    int8x8_t v22 = *(const void **)(v11 + 32);
    uint64_t v21 = v11 + 32;
    BOOL v20 = v22;
    int v23 = *(char *)(v21 + 23);
    if (v23 >= 0) {
      size_t v24 = *(unsigned __int8 *)(v21 + 23);
    }
    else {
      size_t v24 = *(void *)(v21 + 8);
    }
    if (v23 >= 0) {
      int v25 = (const void *)v21;
    }
    else {
      int v25 = v20;
    }
    if (v24 >= v10) {
      size_t v26 = v10;
    }
    else {
      size_t v26 = v24;
    }
    int v27 = memcmp(v2, v25, v26);
    BOOL v28 = v10 < v24;
    if (v27) {
      BOOL v28 = v27 < 0;
    }
    if (*(void *)(v5 + 128) != *(void *)(v5 + 136)) {
      BOOL v28 = 0;
    }
    if (!*(unsigned char *)(a1 + 16)) {
      return *(_DWORD *)(v5 + 124) == 1;
    }
  }
  if (!v28) {
    return 0;
  }
  return *(_DWORD *)(v5 + 124) == 1;
}

uint64_t std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_1,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_1>,BOOL ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT44ValidateBlobNumericalPropsForLayersInNetworkERKNS_3netEE3$_1") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN8Espresso3AOT44ValidateBlobNumericalPropsForLayersInNetworkERKNS_3netEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT44ValidateBlobNumericalPropsForLayersInNetworkERKNS_3netEE3$_1")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT44ValidateBlobNumericalPropsForLayersInNetworkERKNS_3netEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_1,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_1>,BOOL ()(std::string const&)>::target_type()
{
}

void std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_2,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_2>,BOOL ()(std::string const&)>::~__func()
{
}

__n128 std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_2,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_2>,BOOL ()(std::string const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE37D458;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_2,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_2>,BOOL ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37D458;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_2,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_2>,BOOL ()(std::string const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(*(void *)(a1 + 8) + 136), (unsigned __int8 *)a2);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v5 = *((void *)v4 + 5);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = v6 + 336;
  uint64_t v8 = *(void *)(v6 + 336);
  if (!v8)
  {
    BOOL v30 = *(void *)(v5 + 128) == *(void *)(v5 + 136);
    if (!*(unsigned char *)(a1 + 16)) {
      goto LABEL_89;
    }
LABEL_47:
    if (v30) {
      goto LABEL_89;
    }
    if (!v8) {
      goto LABEL_99;
    }
    int v31 = *(char *)(a2 + 23);
    size_t v32 = v31 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(void *)(a2 + 8);
    float v33 = v31 >= 0 ? (const void *)a2 : *(const void **)a2;
    uint64_t v34 = v7;
    do
    {
      int v35 = *(char *)(v8 + 55);
      if (v35 >= 0) {
        size_t v36 = *(unsigned __int8 *)(v8 + 55);
      }
      else {
        size_t v36 = *(void *)(v8 + 40);
      }
      if (v35 >= 0) {
        unint64_t v37 = (const void *)(v8 + 32);
      }
      else {
        unint64_t v37 = *(const void **)(v8 + 32);
      }
      if (v32 >= v36) {
        size_t v38 = v36;
      }
      else {
        size_t v38 = v32;
      }
      int v39 = memcmp(v37, v33, v38);
      BOOL v40 = v36 < v32;
      if (v39) {
        BOOL v40 = v39 < 0;
      }
      BOOL v41 = !v40;
      if (v40) {
        uint8x8_t v42 = (uint64_t *)(v8 + 8);
      }
      else {
        uint8x8_t v42 = (uint64_t *)v8;
      }
      if (v41) {
        uint64_t v34 = v8;
      }
      uint64_t v8 = *v42;
    }
    while (*v42);
    if (v34 == v7)
    {
LABEL_99:
      int8x8_t v52 = 0;
    }
    else
    {
      unint64_t v45 = *(const void **)(v34 + 32);
      uint64_t v44 = v34 + 32;
      uint64_t v43 = v45;
      int v46 = *(char *)(v44 + 23);
      if (v46 >= 0) {
        size_t v47 = *(unsigned __int8 *)(v44 + 23);
      }
      else {
        size_t v47 = *(void *)(v44 + 8);
      }
      if (v46 >= 0) {
        char v48 = (const void *)v44;
      }
      else {
        char v48 = v43;
      }
      if (v47 >= v32) {
        size_t v49 = v32;
      }
      else {
        size_t v49 = v47;
      }
      int v50 = memcmp(v33, v48, v49);
      BOOL v51 = v32 < v47;
      if (v50) {
        BOOL v51 = v50 < 0;
      }
      if (v51) {
        int8x8_t v52 = 0;
      }
      else {
        int8x8_t v52 = (Espresso::AOT *)(v44 + 24);
      }
    }
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v71, (const Espresso::layer_shape *)&v69, 0);
    int v58 = *(unsigned int **)(v5 + 128);
    uint64_t v59 = (uint64_t)(*(void *)(v5 + 136) - (void)v58) >> 2;
    if (v59)
    {
      if (v59 == 1)
      {
        int v60 = E5RT::CVPB4ccToSurfaceFormat((E5RT *)*v58);
LABEL_105:
        int v61 = v60;
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (v61 == 6)
        {
          if (*(_DWORD *)(v5 + 124) != 2) {
            return 0;
          }
          unint64_t v62 = (char *)__p + 4;
        }
        else
        {
          unint64_t v62 = (char *)__p + 4;
          int v63 = v61 - 3;
          if (v61 - 3) <= 0x1A && ((0x7807261u >> v63)) {
            unint64_t v62 = (char *)&v69 + 4 * qword_192DC5B68[v63];
          }
        }
        return v62 - (char *)&v69 == 44;
      }
      uint64_t v65 = "Multiple 4cc formats specification is not yet supported.";
    }
    else
    {
      if (v52)
      {
        int v60 = Espresso::AOT::MapTransformParamsToSurfaceFormat(v52, &v71, v57);
        goto LABEL_105;
      }
      uint64_t v65 = "Surface format could not be determined.";
    }
    Espresso::throw_exception_selector<Espresso::generic_error>(v65);
  }
  uint64_t v66 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a2 + 23);
  if (v9 >= 0) {
    size_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v10 = *(void *)(a2 + 8);
  }
  if (v9 >= 0) {
    uint64_t v11 = (const void *)a2;
  }
  else {
    uint64_t v11 = *(const void **)a2;
  }
  uint64_t v12 = v6 + 336;
  uint64_t v13 = v8;
  do
  {
    int v14 = *(char *)(v13 + 55);
    if (v14 >= 0) {
      size_t v15 = *(unsigned __int8 *)(v13 + 55);
    }
    else {
      size_t v15 = *(void *)(v13 + 40);
    }
    if (v14 >= 0) {
      int v16 = (const void *)(v13 + 32);
    }
    else {
      int v16 = *(const void **)(v13 + 32);
    }
    if (v10 >= v15) {
      size_t v17 = v15;
    }
    else {
      size_t v17 = v10;
    }
    int v18 = memcmp(v16, v11, v17);
    BOOL v19 = v15 < v10;
    if (v18) {
      BOOL v19 = v18 < 0;
    }
    BOOL v20 = !v19;
    if (v19) {
      uint64_t v21 = (uint64_t *)(v13 + 8);
    }
    else {
      uint64_t v21 = (uint64_t *)v13;
    }
    if (v20) {
      uint64_t v12 = v13;
    }
    uint64_t v13 = *v21;
  }
  while (*v21);
  if (v12 == v7)
  {
    uint64_t v6 = v66;
    BOOL v30 = *(void *)(v5 + 128) == *(void *)(v5 + 136);
    if (!*(unsigned char *)(a1 + 16)) {
      goto LABEL_89;
    }
    goto LABEL_47;
  }
  size_t v24 = *(const void **)(v12 + 32);
  uint64_t v23 = v12 + 32;
  int8x8_t v22 = v24;
  int v25 = *(char *)(v23 + 23);
  if (v25 >= 0) {
    size_t v26 = *(unsigned __int8 *)(v23 + 23);
  }
  else {
    size_t v26 = *(void *)(v23 + 8);
  }
  if (v25 >= 0) {
    int v27 = (const void *)v23;
  }
  else {
    int v27 = v22;
  }
  if (v26 >= v10) {
    size_t v28 = v10;
  }
  else {
    size_t v28 = v26;
  }
  int v29 = memcmp(v11, v27, v28);
  BOOL v30 = v10 < v26;
  if (v29) {
    BOOL v30 = v29 < 0;
  }
  uint64_t v6 = v66;
  if (*(void *)(v5 + 128) != *(void *)(v5 + 136)) {
    BOOL v30 = 0;
  }
  if (*(unsigned char *)(a1 + 16)) {
    goto LABEL_47;
  }
LABEL_89:
  int v53 = *(_DWORD *)(v5 + 120);
  BOOL v55 = v53 == 4 || (v53 - 1) < 2;
  *(void *)&v71.scale = operator new(0x28uLL);
  *(_OWORD *)&v71.is_image_bgr = xmmword_192DBF190;
  strcpy(*(char **)&v71.scale, "experimental.ane.enable_int16_resample");
  char v68 = 1;
  LOWORD(v67) = 48;
  Espresso::map_const_get<std::map<std::string,std::string>>(v6 + 472, (uint64_t)&v71, (uint64_t)&v67, &v69);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v69.__r_.__value_.__l.__size_ != 1)
    {
      BOOL v56 = 0;
      operator delete(v69.__r_.__value_.__l.__data_);
      if ((v68 & 0x80000000) == 0) {
        goto LABEL_119;
      }
      goto LABEL_118;
    }
    BOOL v56 = *v69.__r_.__value_.__l.__data_ == 49;
    operator delete(v69.__r_.__value_.__l.__data_);
    if ((v68 & 0x80000000) == 0) {
      goto LABEL_119;
    }
LABEL_118:
    operator delete(v67);
    goto LABEL_119;
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) != 1)
  {
    BOOL v56 = 0;
    if ((v68 & 0x80000000) == 0) {
      goto LABEL_119;
    }
    goto LABEL_118;
  }
  BOOL v56 = v69.__r_.__value_.__s.__data_[0] == 49;
  if (v68 < 0) {
    goto LABEL_118;
  }
LABEL_119:
  if (SHIBYTE(v71.bias_g) < 0)
  {
    operator delete(*(void **)&v71.scale);
    if (!v56) {
      return v55;
    }
  }
  else if (!v56)
  {
    return v55;
  }
  return v53 == 7 || v55;
}

void sub_19251947C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_2,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_2>,BOOL ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN8Espresso3AOT44ValidateBlobNumericalPropsForLayersInNetworkERKNS_3netEE3$_2") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN8Espresso3AOT44ValidateBlobNumericalPropsForLayersInNetworkERKNS_3netEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8Espresso3AOT44ValidateBlobNumericalPropsForLayersInNetworkERKNS_3netEE3$_2")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8Espresso3AOT44ValidateBlobNumericalPropsForLayersInNetworkERKNS_3netEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_2,std::allocator<Espresso::AOT::ValidateBlobNumericalPropsForLayersInNetwork(Espresso::net const&)::$_2>,BOOL ()(std::string const&)>::target_type()
{
}

void *Espresso::AOT::MemOptimizer::InterferenceGraph::InterferenceGraph(void *this)
{
  *this = &unk_1EE36AFB8;
  return this;
}

void *Espresso::AOT::MemOptimizer::InterferenceGraphBuilder::InterferenceGraphBuilder(void *this)
{
  *this = &unk_1EE36B040;
  return this;
}

void Espresso::AOT::MemOptimizer::InterferenceGraphBuilder::CreateBuilder(Espresso::AOT::MemOptimizer::InterferenceGraphBuilder *this)
{
}

void Espresso::AOT::MemOptimizer::InterferenceGraphBuilder::Finalize(const void **a1)
{
  uint64_t v1 = *a1;
  if (v1)
  {
    {
      operator new();
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::invalid_argument::invalid_argument[abi:ne180100](exception, "Supplied builder argument is invalid");
  __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
}

void sub_192519744(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void InterferenceGraphImpl::~InterferenceGraphImpl(InterferenceGraphImpl *this)
{
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<InterferenceGraphImpl::Node>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = (void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    operator delete(v4);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<InterferenceGraphImpl::Node>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = (void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    operator delete(v4);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t InterferenceGraphImpl::GetNodeCount(InterferenceGraphImpl *this)
{
  return *((void *)this + 4);
}

BOOL InterferenceGraphImpl::HasNode(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>((void *)(a1 + 8), a2) != 0;
}

uint64_t InterferenceGraphImpl::GetAllocSize(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>((void *)(a1 + 8), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *(void *)(v2[5] + 32);
}

uint64_t InterferenceGraphImpl::GetAllocId(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>((void *)(a1 + 8), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return *(void *)(v2[5] + 24);
}

BOOL InterferenceGraphImpl::HasEdge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = (void *)(a1 + 8);
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>((void *)(a1 + 8), a2);
  if (!v5
    || (uint64_t v6 = v5[5],
        (uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v4, a3)) == 0))
  {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v14 = v7[5];
  uint64_t v8 = v14;
  char v9 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::find<E5RT::AsyncEvent const*>((void *)(v6 + 40), &v14);
  uint64_t v14 = v6;
  size_t v10 = std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,std::map<unsigned long long,std::unordered_set<E5RT::AsyncTask *>>>>>::find<E5RT::AsyncEvent const*>((void *)(v8 + 40), &v14);
  if ((v9 != 0) != (v10 != 0))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Inconsistent adjacency information in interference graph");
    __cxa_throw(exception, MEMORY[0x1E4FBA328], MEMORY[0x1E4FBA1B0]);
  }
  if (v9) {
    BOOL v11 = v10 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  return !v11;
}

void sub_1925199B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *InterferenceGraphImpl::GetNodeNames@<X0>(void *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  for (unint64_t i = (uint64_t *)this[3]; i; unint64_t i = (uint64_t *)*i)
  {
    if (*((char *)i + 39) < 0)
    {
      unint64_t v4 = (uint64_t *)i[2];
      uint64_t v5 = i[3];
    }
    else
    {
      unint64_t v4 = i + 2;
      uint64_t v5 = *((unsigned __int8 *)i + 39);
    }
    *(void *)&long long v6 = v4;
    *((void *)&v6 + 1) = v5;
    this = std::__hash_table<std::string_view,std::hash<std::string_view>,std::equal_to<std::string_view>,std::allocator<std::string_view>>::__emplace_unique_key_args<std::string_view,std::string_view const&>(a2, (uint64_t)&v6, &v6);
  }
  return this;
}

void sub_192519A38(_Unwind_Exception *a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *InterferenceGraphImpl::GetNodeNeighbors@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  __n128 result = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>((void *)(a1 + 8), a2);
  if (!result) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  for (unint64_t i = *(void **)(result[5] + 56); i; unint64_t i = (void *)*i)
  {
    long long v6 = (uint64_t **)i[2];
    if (*((char *)v6 + 23) < 0)
    {
      long long v6 = (uint64_t **)*v6;
      uint64_t v7 = *(void *)(i[2] + 8);
    }
    else
    {
      uint64_t v7 = *((unsigned __int8 *)v6 + 23);
    }
    *(void *)&long long v8 = v6;
    *((void *)&v8 + 1) = v7;
    __n128 result = std::__hash_table<std::string_view,std::hash<std::string_view>,std::equal_to<std::string_view>,std::allocator<std::string_view>>::__emplace_unique_key_args<std::string_view,std::string_view const&>(a3, (uint64_t)&v8, &v8);
  }
  return result;
}

void sub_192519AE0(_Unwind_Exception *a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_192519AF4(_Unwind_Exception *a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<InterferenceGraphImpl::Node>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2)
  {
    unint64_t v3 = *(void **)(v2 + 56);
    if (v3)
    {
      do
      {
        unint64_t v4 = (void *)*v3;
        operator delete(v3);
        unint64_t v3 = v4;
      }
      while (v4);
    }
    uint64_t v5 = *(void **)(v2 + 40);
    *(void *)(v2 + 40) = 0;
    if (v5) {
      operator delete(v5);
    }
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x192FF16B0](v2, 0x10B2C40939C3E4BLL);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    long long v6 = *(void **)a1;
    operator delete(v6);
  }
}

uint64_t *std::unique_ptr<InterferenceGraphImpl::Node>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    unint64_t v3 = *(void **)(v2 + 56);
    if (v3)
    {
      do
      {
        unint64_t v4 = (void *)*v3;
        operator delete(v3);
        unint64_t v3 = v4;
      }
      while (v4);
    }
    uint64_t v5 = *(void **)(v2 + 40);
    *(void *)(v2 + 40) = 0;
    if (v5) {
      operator delete(v5);
    }
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x192FF16B0](v2, 0x10B2C40939C3E4BLL);
  }
  return a1;
}

void InterferenceGraphBuilderImpl::AddNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3)
  {
    if (a3)
    {
      if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>((void *)(a1 + 8), a2))operator new(); {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      }
      std::operator+<char>();
      long long v6 = std::string::append(&v8, " already exists");
      long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v9.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      std::logic_error::logic_error(exception, &v9);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
      __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
    }
    unint64_t v4 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v4, "Invalid alloc size");
  }
  else
  {
    unint64_t v4 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v4, "Invalid name");
  }
  __cxa_throw(v4, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
}

void sub_192519E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  _Unwind_Resume(a1);
}

void *InterferenceGraphBuilderImpl::AddEdge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  size_t v7 = *(void *)(a2 + 8);
  if ((v6 & 0x80u) == 0) {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
  int v10 = (char)v9;
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *(void *)(a3 + 8);
  }
  if (v8 != v9) {
    goto LABEL_17;
  }
  if (v10 >= 0) {
    BOOL v11 = (unsigned __int8 *)a3;
  }
  else {
    BOOL v11 = *(unsigned __int8 **)a3;
  }
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v11, v7)) {
      goto LABEL_17;
    }
LABEL_15:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Cannot have the same node on both ends of an edge");
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  if (!v6) {
    goto LABEL_15;
  }
  uint64_t v12 = (unsigned __int8 *)a2;
  while (*v12 == *v11)
  {
    ++v12;
    ++v11;
    if (!--v6) {
      goto LABEL_15;
    }
  }
LABEL_17:
  uint64_t v14 = (void *)(a1 + 8);
  size_t v15 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>((void *)(a1 + 8), a2);
  int v16 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v14, a3);
  if (!v15)
  {
    BOOL v20 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    uint64_t v21 = std::string::append(&v26, " does not exist");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(v20, &v27);
    v20->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(v20, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  if (!v16)
  {
    uint64_t v23 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    size_t v24 = std::string::append(&v26, " does not exist");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(v23, &v27);
    v23->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(v23, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  std::string::size_type v17 = v15[5];
  v27.__r_.__value_.__r.__words[0] = v16[5];
  std::string::size_type v18 = v27.__r_.__value_.__r.__words[0];
  std::__hash_table<MIL::Builder::OperationBuilder *,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,std::allocator<MIL::Builder::OperationBuilder *>>::__emplace_unique_key_args<MIL::Builder::OperationBuilder *,MIL::Builder::OperationBuilder *>(v17 + 40, (uint64_t *)&v27, &v27);
  v27.__r_.__value_.__r.__words[0] = v17;
  return std::__hash_table<MIL::Builder::OperationBuilder *,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,std::allocator<MIL::Builder::OperationBuilder *>>::__emplace_unique_key_args<MIL::Builder::OperationBuilder *,MIL::Builder::OperationBuilder *>(v18 + 40, (uint64_t *)&v27, &v27);
}

void sub_19251A1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if (v22) {
      goto LABEL_8;
    }
  }
  else if (v22)
  {
LABEL_8:
    __cxa_free_exception(v21);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<InterferenceGraphImpl::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<InterferenceGraphImpl::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<InterferenceGraphImpl::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<InterferenceGraphImpl::Node>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v47, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      size_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          uint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = v15[1];
            if (v23 == v11)
            {
              uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v25 = v15[3];
              }
              if (v25 == v17)
              {
                std::string v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  for (unint64_t i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    std::string v26 = (const void **)((char *)v26 + 1);
                    if (!--v24) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            size_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              uint64_t v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                for (j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  uint64_t v21 = (const void **)((char *)v21 + 1);
                  if (!--v19) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          size_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  size_t v28 = operator new(0x30uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  char v48 = 0;
  *size_t v28 = 0;
  v28[1] = v11;
  int v29 = (std::string *)(v28 + 2);
  BOOL v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)v30, *((void *)v30 + 1));
  }
  else
  {
    long long v31 = *v30;
    v28[4] = *((void *)v30 + 2);
    *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v31;
  }
  v28[5] = 0;
  char v48 = 1;
  float v32 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    BOOL v36 = 1;
    if (v12 >= 3) {
      BOOL v36 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v37 = v36 | (2 * v12);
    unint64_t v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38) {
      size_t prime = v38;
    }
    else {
      size_t prime = v37;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v40) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v40)
    {
      unint64_t v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v40 < 3uLL || (uint8x8_t v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        unint64_t v41 = std::__next_prime(v41);
      }
      else
      {
        uint64_t v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2) {
          unint64_t v41 = v43;
        }
      }
      if (prime <= v41) {
        size_t prime = v41;
      }
      if (prime < *(void *)&v40) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v34 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        int v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v34 = *(void **)(*(void *)a1 + 8 * v11);
        int v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v44 & v11;
      uint64_t v34 = *(void **)(*(void *)a1 + 8 * (v44 & v11));
      int v35 = (void *)v47[0];
      if (v34) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *int v35 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v47[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v47[0])
    {
      unint64_t v45 = *(void *)(*(void *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12) {
          v45 %= v12;
        }
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  uint64_t v34 = *(void **)(*(void *)a1 + 8 * v4);
  int v35 = (void *)v47[0];
  if (!v34) {
    goto LABEL_81;
  }
LABEL_57:
  *int v35 = *v34;
  *uint64_t v34 = v47[0];
LABEL_92:
  size_t v15 = (uint64_t *)v47[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_19251A6A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<InterferenceGraphImpl::Node>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<InterferenceGraphImpl::Node>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19251A6BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<InterferenceGraphImpl::Node>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<InterferenceGraphImpl::Node>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<InterferenceGraphImpl::Node>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<InterferenceGraphImpl::Node>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<InterferenceGraphImpl::Node>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t Espresso::AOT::MILCompilerForMLC::MILCompilerForMLC(uint64_t a1, const Espresso::AOT::AOTCompilerOptions *a2, uint64_t a3)
{
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v18, a2);
  uint64_t v6 = *(void **)a3;
  unint64_t v7 = *(void *)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  unint64_t v8 = *(void **)(a3 + 16);
  __p[0] = v6;
  __p[1] = (void *)v7;
  unint64_t v9 = *(void **)(a3 + 24);
  v16[0] = v8;
  v16[1] = v9;
  int v17 = *(_DWORD *)(a3 + 32);
  if (v9)
  {
    unint64_t v10 = v8[1];
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v10 >= v7) {
        v10 %= v7;
      }
    }
    else
    {
      v10 &= v7 - 1;
    }
    *((void *)v6 + v10) = v16;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
  }
  Espresso::AOT::AbstractMILCompiler::AbstractMILCompiler(a1, (const Espresso::AOT::AOTCompilerOptions *)v18, (uint64_t)__p);
  unint64_t v11 = (void **)v16[0];
  if (v16[0])
  {
    do
    {
      uint64_t v14 = (void **)*v11;
      if (*((char *)v11 + 63) < 0)
      {
        operator delete(v11[5]);
        if (*((char *)v11 + 39) < 0) {
LABEL_16:
        }
          operator delete(v11[2]);
      }
      else if (*((char *)v11 + 39) < 0)
      {
        goto LABEL_16;
      }
      operator delete(v11);
      unint64_t v11 = v14;
    }
    while (v14);
  }
  unint64_t v12 = __p[0];
  __p[0] = 0;
  if (v12) {
    operator delete(v12);
  }
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v18);
  *(void *)a1 = &unk_1EE36B280;
  Espresso::AOT::AOTCompilerBackend::IsOnDeviceCompilation((Espresso::AOT::AOTCompilerBackend *)a1);
  Espresso::AOT::MILCompilerForMLC::ExtractOptions(a2, a1 + 264);
  *(void *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  return a1;
}

void sub_19251A878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_19251A894(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractMILCompiler::~AbstractMILCompiler(v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForMLC::ExtractOptions(Espresso::AOT::MILCompilerForMLC *this@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 4) = 0;
  uint64_t v5 = (std::string *)(a2 + 8);
  uint64_t Input = Espresso::AOT::AOTCompilerOptions::GetInput(this);
  if (*(char *)(Input + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)Input, *(void *)(Input + 8));
  }
  else
  {
    long long v7 = *(_OWORD *)Input;
    v5->__r_.__value_.__r.__words[2] = *(void *)(Input + 16);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v7;
  }
  *(unsigned char *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 32) = 0;
  *(unsigned char *)(a2 + 64) = 0;
  uint64_t Output = Espresso::AOT::AOTCompilerOptions::GetOutput(this);
  unint64_t v9 = (std::string *)(a2 + 72);
  if (*(char *)(Output + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)Output, *(void *)(Output + 8));
  }
  else
  {
    long long v10 = *(_OWORD *)Output;
    *(void *)(a2 + 88) = *(void *)(Output + 16);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  strcpy((char *)(a2 + 96), "macosx.internal");
  *(_WORD *)(a2 + 119) = 15;
  *(unsigned char *)(a2 + 124) = 0;
  *(_OWORD *)(a2 + 128) = 0u;
  unint64_t v11 = (void **)(a2 + 128);
  *(_OWORD *)(a2 + 224) = 0u;
  unint64_t v12 = (char *)(a2 + 224);
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 237) = 0u;
  __p[23] = 3;
  strcpy(__p, "cpu");
  Espresso::AOT::AOTCompilerOptions::GetOptions((uint64_t)this, (uint64_t)__p, (uint64_t)v72);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  __p[23] = 17;
  strcpy(__p, "preferred-backend");
  uint8x8_t v13 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v72, (uint64_t)__p);
  uint64_t v14 = v13;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (!v14) {
      goto LABEL_19;
    }
  }
  else if (!v13)
  {
    goto LABEL_19;
  }
  if (*((_DWORD *)v14 + 16) != 3) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  if (*((char *)v14 + 63) < 0)
  {
    size_t v15 = (void *)v14[5];
    if (v14[6] == 8) {
      goto LABEL_18;
    }
LABEL_19:
    int v16 = 0;
    goto LABEL_20;
  }
  size_t v15 = v14 + 5;
  if (*((unsigned char *)v14 + 63) != 8) {
    goto LABEL_19;
  }
LABEL_18:
  if (*v15 != 0x736E6E622F636C6DLL) {
    goto LABEL_19;
  }
  int v16 = 1;
LABEL_20:
  *(_DWORD *)(a2 + 248) = v16;
  __p[23] = 12;
  strcpy(__p, "experimental");
  int v17 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v72, (uint64_t)__p);
  unint64_t v18 = v17;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (!v18) {
      goto LABEL_42;
    }
  }
  else if (!v17)
  {
    goto LABEL_42;
  }
  if (*((_DWORD *)v18 + 16) != 3) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  std::string::operator=((std::string *)(a2 + 224), (const std::string *)(v18 + 5));
  uint64_t v19 = *(unsigned __int8 *)(a2 + 247);
  BOOL v20 = (v19 & 0x80u) != 0;
  if ((v19 & 0x80u) != 0) {
    uint64_t v19 = *(void *)(a2 + 232);
  }
  if (v20) {
    unint64_t v12 = *(char **)(a2 + 224);
  }
  if (v19 >= 10)
  {
    uint64_t v21 = &v12[v19];
    int v22 = v12;
    do
    {
      uint64_t v23 = (char *)memchr(v22, 98, v19 - 9);
      if (!v23) {
        break;
      }
      if (*(void *)v23 == 0x6172672D736E6E62 && *((_WORD *)v23 + 4) == 26736)
      {
        if (v23 != v21 && v23 - v12 != -1)
        {
          *(_DWORD *)(a2 + 248) = 1;
          goto LABEL_132;
        }
        break;
      }
      int v22 = v23 + 1;
      uint64_t v19 = v21 - (unsigned char *)v22;
    }
    while (v21 - (unsigned char *)v22 >= 10);
  }
LABEL_42:
  if (*(_DWORD *)(a2 + 248) == 1) {
    goto LABEL_132;
  }
  __p[23] = 13;
  strcpy(__p, "force-loopkit");
  uint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v72, (uint64_t)__p);
  std::string v26 = v25;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (!v26) {
      goto LABEL_49;
    }
  }
  else if (!v25)
  {
    goto LABEL_49;
  }
  if (*((_DWORD *)v26 + 16)) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  *(unsigned char *)(a2 + 252) = *((unsigned char *)v26 + 40);
LABEL_49:
  __p[23] = 8;
  strcpy(__p, "deadline");
  std::string v27 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v72, (uint64_t)__p);
  size_t v28 = v27;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (v28) {
      goto LABEL_51;
    }
LABEL_54:
    int v29 = 1;
    goto LABEL_55;
  }
  if (!v27) {
    goto LABEL_54;
  }
LABEL_51:
  if (*((_DWORD *)v28 + 16) != 1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  int v29 = *((_DWORD *)v28 + 10);
LABEL_55:
  *(_DWORD *)a2 = v29;
  *(unsigned char *)(a2 + 4) = 1;
  __p[23] = 4;
  strcpy(__p, "nano");
  BOOL v30 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v72, (uint64_t)__p);
  long long v31 = v30;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (!v31) {
      goto LABEL_61;
    }
  }
  else if (!v30)
  {
    goto LABEL_61;
  }
  if (*((_DWORD *)v31 + 16)) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  *(unsigned char *)(a2 + 32) = *((unsigned char *)v31 + 40);
LABEL_61:
  __p[23] = 6;
  strcpy(__p, "header");
  float v32 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v72, (uint64_t)__p);
  float v33 = v32;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (!v33) {
      goto LABEL_72;
    }
  }
  else if (!v32)
  {
    goto LABEL_72;
  }
  if (*((_DWORD *)v33 + 16) != 3) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  uint64_t v34 = (const std::string *)(v33 + 5);
  if (*(unsigned char *)(a2 + 64))
  {
    std::string::operator=((std::string *)(a2 + 40), v34);
  }
  else
  {
    if (*((char *)v33 + 63) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(a2 + 40), (const std::string::value_type *)v33[5], v33[6]);
    }
    else
    {
      long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      *(void *)(a2 + 56) = v33[7];
      *(_OWORD *)(a2 + 40) = v35;
    }
    *(unsigned char *)(a2 + 64) = 1;
  }
LABEL_72:
  __p[23] = 3;
  strcpy(__p, "sdk");
  BOOL v36 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v72, (uint64_t)__p);
  unint64_t v37 = v36;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (!v37) {
      goto LABEL_78;
    }
  }
  else if (!v36)
  {
    goto LABEL_78;
  }
  if (*((_DWORD *)v37 + 16) != 3) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  std::string::operator=((std::string *)(a2 + 96), (const std::string *)(v37 + 5));
LABEL_78:
  __p[23] = 4;
  strcpy(__p, "size");
  unint64_t v38 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v72, (uint64_t)__p);
  int v39 = v38;
  if ((__p[23] & 0x80000000) == 0)
  {
    if (!v38) {
      goto LABEL_80;
    }
LABEL_83:
    if (*((_DWORD *)v39 + 16) != 1) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    *(_DWORD *)(a2 + 120) = *((_DWORD *)v39 + 10);
    *(unsigned char *)(a2 + 124) = 1;
    if (!*(unsigned char *)(a2 + 32)) {
      goto LABEL_116;
    }
    goto LABEL_85;
  }
  operator delete(*(void **)__p);
  if (v39) {
    goto LABEL_83;
  }
LABEL_80:
  if (!*(unsigned char *)(a2 + 32))
  {
LABEL_116:
    __p[23] = 6;
    strcpy(__p, "target");
    int v50 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v72, (uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if (v50)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "--cpu-target is not supported for E5 compilation.");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
      __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
    }
    Espresso::AOT::CompilerOptionsForE5::CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)__p, this);
    uint64_t Platforms = Espresso::AOT::CompilerOptionsForE5::GetPlatforms((Espresso::AOT::CompilerOptionsForE5 *)__p);
    if (*(void *)(Platforms + 24) != 1)
    {
      int v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v63, "Only one platform is supported.");
      __cxa_throw(v63, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    Espresso::AOT::MILCompilerForMLC::Target::SetPlatform(a2 + 128, *(void *)(*(void *)(Platforms + 16) + 16));
    CpuTargetOS = (const std::string *)Espresso::AOT::CompilerOptionsForE5::GetCpuTargetOS((Espresso::AOT::CompilerOptionsForE5 *)__p);
    std::string::operator=((std::string *)(a2 + 152), CpuTargetOS);
    CpuTargetArch = (const std::string *)Espresso::AOT::CompilerOptionsForE5::GetCpuTargetArch((Espresso::AOT::CompilerOptionsForE5 *)__p);
    std::string::operator=((std::string *)(a2 + 128), CpuTargetArch);
    Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)__p);
    goto LABEL_125;
  }
LABEL_85:
  char v71 = 2;
  strcpy((char *)v70, "e5");
  Espresso::AOT::AOTCompilerOptions::GetOptions((uint64_t)this, (uint64_t)v70, (uint64_t)__p);
  if (v71 < 0) {
    operator delete(v70[0]);
  }
  char v71 = 9;
  strcpy((char *)v70, "platforms");
  int8x8_t v40 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(__p, (uint64_t)v70);
  if (v71 < 0) {
    operator delete(v70[0]);
  }
  char v71 = 13;
  strcpy((char *)v70, "cpu-target-os");
  unint64_t v41 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(__p, (uint64_t)v70);
  if (v71 < 0) {
    operator delete(v70[0]);
  }
  char v71 = 15;
  strcpy((char *)v70, "cpu-target-arch");
  uint8x8_t v42 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(__p, (uint64_t)v70);
  if (v71 < 0) {
    operator delete(v70[0]);
  }
  if (v40 || v41 || v42)
  {
    int v61 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v61, "E5 options are not supported for Nano compilation.");
    v61->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(v61, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t v43 = *(void ***)&__p[16];
  if (*(void *)&__p[16])
  {
    do
    {
      unint64_t v44 = (void **)*v43;
      uint64_t v45 = *((unsigned int *)v43 + 16);
      if (v45 != -1) {
        ((void (*)(void **, void **))off_1EE39B9A8[v45])(v70, v43 + 5);
      }
      *((_DWORD *)v43 + 16) = -1;
      if (*((char *)v43 + 39) < 0) {
        operator delete(v43[2]);
      }
      operator delete(v43);
      uint64_t v43 = v44;
    }
    while (v44);
  }
  int v46 = *(void **)__p;
  *(void *)std::string __p = 0;
  if (v46) {
    operator delete(v46);
  }
  if (!*(unsigned char *)(a2 + 32)) {
    goto LABEL_116;
  }
  __p[23] = 6;
  strcpy(__p, "target");
  size_t v47 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v72, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (!v47)
  {
    vimage2espresso_param v64 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v64, "--cpu-target is required for Nano compilation.");
    v64->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(v64, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  if (*((_DWORD *)v47 + 16) != 3) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  Espresso::AOT::MILCompilerForMLC::Target::Target((uint64_t)__p, (uint64_t)(v47 + 5));
  if (*(char *)(a2 + 151) < 0) {
    operator delete(*v11);
  }
  *(_OWORD *)unint64_t v11 = *(_OWORD *)__p;
  *(void *)(a2 + 144) = *(void *)&__p[16];
  __p[23] = 0;
  __p[0] = 0;
  char v48 = (void **)(a2 + 152);
  if (*(char *)(a2 + 175) < 0) {
    operator delete(*v48);
  }
  *(_OWORD *)char v48 = v66;
  *(void *)(a2 + 168) = v67;
  HIBYTE(v67) = 0;
  LOBYTE(v66) = 0;
  size_t v49 = (void **)(a2 + 176);
  if (*(char *)(a2 + 199) < 0)
  {
    operator delete(*v49);
    int v54 = SHIBYTE(v67);
    *(_OWORD *)size_t v49 = v68;
    *(void *)(a2 + 192) = v69;
    HIBYTE(v69) = 0;
    LOBYTE(v68) = 0;
    if (v54 < 0) {
      operator delete((void *)v66);
    }
  }
  else
  {
    *(_OWORD *)size_t v49 = v68;
    *(void *)(a2 + 192) = v69;
    HIBYTE(v69) = 0;
    LOBYTE(v68) = 0;
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
LABEL_125:
  __p[23] = 3;
  strcpy(__p, "api");
  BOOL v55 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v72, (uint64_t)__p);
  BOOL v56 = v55;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (v56) {
      goto LABEL_127;
    }
  }
  else if (v55)
  {
LABEL_127:
    if (*((_DWORD *)v56 + 16) != 3) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    std::string::operator=((std::string *)(a2 + 200), (const std::string *)(v56 + 5));
    goto LABEL_132;
  }
  if (!*(unsigned char *)(a2 + 32)) {
    MEMORY[0x192FF0F50](a2 + 200, "main");
  }
LABEL_132:
  Espresso::AOT::MILCompilerForMLC::Options::AssertValid((Espresso::AOT::MILCompilerForMLC::Options *)a2);
  int v57 = v73;
  if (v73)
  {
    do
    {
      int v58 = (void **)*v57;
      uint64_t v59 = *((unsigned int *)v57 + 16);
      if (v59 != -1) {
        ((void (*)(unsigned char *, void **))off_1EE39B9A8[v59])(__p, v57 + 5);
      }
      *((_DWORD *)v57 + 16) = -1;
      if (*((char *)v57 + 39) < 0) {
        operator delete(v57[2]);
      }
      operator delete(v57);
      int v57 = v58;
    }
    while (v58);
  }
  int v60 = (void *)v72[0];
  v72[0] = 0;
  if (v60) {
    operator delete(v60);
  }
}

void sub_19251B410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>::~unordered_map[abi:ne180100](v15 - 120);
  Espresso::AOT::MILCompilerForMLC::Options::~Options(v14);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForMLC::Options::AssertValid(Espresso::AOT::MILCompilerForMLC::Options *this)
{
  uint64_t v2 = *((unsigned __int8 *)this + 31);
  if ((*((char *)this + 31) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 31)) {
      goto LABEL_3;
    }
LABEL_25:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Input file must be non-empty.");
    goto LABEL_49;
  }
  if (!*((void *)this + 2)) {
    goto LABEL_25;
  }
LABEL_3:
  memset(&v10, 0, sizeof(v10));
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = (std::string *)((char *)this + 8);
  }
  else {
    uint64_t v3 = (std::string *)*((void *)this + 1);
  }
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *((void *)this + 2);
  }
  std::string::append[abi:ne180100]<char const*,0>(&v10.__pn_, v3, (std::string *)((char *)v3 + v2));
  std::__fs::filesystem::__status(&v10, 0);
  if (SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__pn_.__r_.__value_.__l.__data_);
  }
  if (v9.__r_.__value_.__s.__data_[0] == 255 || !v9.__r_.__value_.__s.__data_[0])
  {
    uint64_t v6 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    long long v7 = std::string::append(&v9, " does not exist.");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v10.__pn_.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__pn_.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(v6, &v10.__pn_);
    v6->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(v6, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  if ((*((char *)this + 95) & 0x80000000) == 0)
  {
    if (*((unsigned char *)this + 95)) {
      goto LABEL_14;
    }
LABEL_27:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "--output is required and must be non-empty.");
    goto LABEL_49;
  }
  if (!*((void *)this + 10)) {
    goto LABEL_27;
  }
LABEL_14:
  if (*((_DWORD *)this + 62) == 1) {
    return;
  }
  if (*((unsigned char *)this + 32))
  {
    if (*((unsigned char *)this + 64))
    {
      if (*((char *)this + 63) < 0)
      {
        if (*((void *)this + 6)) {
          goto LABEL_19;
        }
      }
      else if (*((unsigned char *)this + 63))
      {
        goto LABEL_19;
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "--cpu-header is required.");
    goto LABEL_49;
  }
LABEL_19:
  if (*((unsigned char *)this + 124) && (*((_DWORD *)this + 30) & 0x80000000) != 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "--cpu-size must be a positive integer.");
    goto LABEL_49;
  }
  if (*((char *)this + 151) < 0)
  {
    if (!*((void *)this + 17)) {
      goto LABEL_41;
    }
  }
  else if (!*((unsigned char *)this + 151))
  {
    goto LABEL_41;
  }
  if (*((char *)this + 175) < 0)
  {
    if (!*((void *)this + 20)) {
      goto LABEL_41;
    }
  }
  else if (!*((unsigned char *)this + 175))
  {
LABEL_41:
    uint64_t v5 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v5, "Target is required.");
    __cxa_throw(v5, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (*((char *)this + 199) < 0)
  {
    if (!*((void *)this + 23)) {
      goto LABEL_41;
    }
  }
  else if (!*((unsigned char *)this + 199))
  {
    goto LABEL_41;
  }
  if (*((char *)this + 223) < 0)
  {
    if (*((void *)this + 26)) {
      goto LABEL_37;
    }
LABEL_43:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "--cpu-api is a required argument");
    goto LABEL_49;
  }
  if (!*((unsigned char *)this + 223)) {
    goto LABEL_43;
  }
LABEL_37:
  if (*((unsigned char *)this + 4) && (*(_DWORD *)this & 0x80000000) != 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "--cpu-deadline must be a positive integer.");
LABEL_49:
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
}

void sub_19251B898(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19251B8AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19251B8C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19251B8D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19251B8E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19251B8FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForMLC::Target::SetPlatform(uint64_t a1, uint64_t a2)
{
  if (a2 > 33024)
  {
    switch(a2)
    {
      case 33025:
      case 33027:
      case 33040:
      case 33042:
      case 33056:
      case 33072:
      case 33074:
LABEL_6:
        char v2 = 52;
LABEL_7:
        char v4 = 9;
        uint64_t v5 = 0x31612D656C707061;
        break;
      case 33026:
      case 33028:
      case 33029:
      case 33030:
      case 33031:
      case 33032:
      case 33033:
      case 33034:
      case 33035:
      case 33036:
      case 33037:
      case 33038:
      case 33039:
      case 33041:
      case 33043:
      case 33044:
      case 33045:
      case 33046:
      case 33047:
      case 33048:
      case 33049:
      case 33050:
      case 33051:
      case 33052:
      case 33053:
      case 33054:
      case 33055:
      case 33057:
      case 33058:
      case 33059:
      case 33060:
      case 33061:
      case 33062:
      case 33063:
      case 33064:
      case 33065:
      case 33066:
      case 33067:
      case 33068:
      case 33069:
      case 33070:
      case 33071:
      case 33073:
        goto LABEL_20;
      default:
        if (a2 == 33537 || a2 == 33552)
        {
          char v2 = 0;
          char v4 = 8;
          uint64_t v5 = 0x35732D656C707061;
        }
        else
        {
LABEL_20:
          char v4 = 7;
          uint64_t v5 = 0x636972656E6567;
        }
        break;
    }
  }
  else
  {
    char v4 = 7;
    uint64_t v5 = 0x6C6C6577736168;
    switch(a2)
    {
      case 32774:
        char v2 = 0;
        char v4 = 8;
        uint64_t v5 = 0x34732D656C707061;
        break;
      case 32775:
      case 32776:
      case 32777:
      case 32778:
      case 32779:
      case 32780:
      case 32781:
      case 32782:
      case 32783:
      case 32787:
      case 32788:
      case 32790:
      case 32791:
      case 32792:
      case 32793:
      case 32794:
      case 32795:
      case 32796:
      case 32797:
      case 32798:
      case 32799:
      case 32801:
      case 32802:
      case 32803:
      case 32804:
      case 32805:
      case 32806:
      case 32808:
      case 32809:
      case 32810:
      case 32811:
      case 32812:
      case 32813:
      case 32814:
      case 32815:
        goto LABEL_20;
      case 32784:
      case 32785:
        char v2 = 48;
        goto LABEL_7;
      case 32786:
        break;
      case 32789:
        char v2 = 49;
        goto LABEL_7;
      case 32800:
      case 32807:
        char v2 = 50;
        goto LABEL_7;
      case 32816:
        char v2 = 51;
        goto LABEL_7;
      default:
        switch(a2)
        {
          case 24576:
          case 24577:
          case 24578:
          case 24608:
          case 24609:
            goto LABEL_6;
          case 24579:
          case 24580:
          case 24581:
          case 24582:
          case 24583:
          case 24584:
          case 24585:
          case 24586:
          case 24587:
          case 24588:
          case 24589:
          case 24590:
          case 24591:
          case 24592:
          case 24593:
          case 24594:
          case 24595:
          case 24596:
          case 24597:
          case 24598:
          case 24599:
          case 24600:
          case 24601:
          case 24602:
          case 24603:
          case 24604:
          case 24605:
          case 24606:
          case 24607:
            goto LABEL_20;
          default:
            if (a2 != 28672) {
              goto LABEL_20;
            }
            char v2 = 0;
            char v4 = 8;
            uint64_t v5 = 0x38612D656C707061;
            break;
        }
        break;
    }
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  *(void *)(a1 + 48) = v5;
  *(unsigned char *)(a1 + 56) = v2;
  *(unsigned char *)(a1 + 57) = 0;
  *(unsigned char *)(a1 + 71) = v4;
}

uint64_t Espresso::AOT::MILCompilerForMLC::Target::Target(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v3 = (std::string *)(a1 + 48);
  char v4 = (void **)(a1 + 24);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __str = *(std::string *)a2;
  }
  v25[0] = &__str;
  v25[1] = &v26;
  uint64_t v26 = 0;
  Espresso::AOT::MILCompilerForMLC::Target::Target(std::string const&)::$_1::operator()(&__p, (uint64_t)v25, 45);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(std::string *)a1 = __p;
  uint64_t v5 = v26;
  uint64_t v6 = (char *)operator new(0x30uLL);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  *(_WORD *)&v22[50] = 0;
  *(_DWORD *)&v22[52] = 0;
  *(void *)&v22[56] = 0x8000000000000030;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_192DA88D0;
  strcpy(v6, "--cpu-target: invalid target triple format");
  strcpy(v22, "et triple formatvalid target tri--cpu-target: in*");
  if (v5 == -1)
  {
    *(void *)&v22[48] = v4;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, &__p);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  operator delete(v6);
  Espresso::AOT::MILCompilerForMLC::Target::Target(std::string const&)::$_1::operator()(&__p, (uint64_t)v25, 45);
  uint64_t v7 = v26;
  long long v8 = operator new(0x30uLL);
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  *(_OWORD *)&v23.__r_.__value_.__r.__words[1] = *(_OWORD *)&v22[48];
  _OWORD *v8 = *(_OWORD *)&v22[32];
  v8[1] = *(_OWORD *)&v22[16];
  *(_OWORD *)((char *)v8 + 26) = *(_OWORD *)v22;
  *((unsigned char *)v8 + 42) = 0;
  if (v7 == -1)
  {
    *(void *)&v22[48] = v4;
    uint64_t v19 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v19, &v23);
    v19->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(v19, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  operator delete(v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_ == 5)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_13;
    }
LABEL_19:
    BOOL v13 = 0;
    goto LABEL_20;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 5) {
    goto LABEL_19;
  }
  p_p = &__p;
LABEL_13:
  int data = (int)p_p->__r_.__value_.__l.__data_;
  int v11 = p_p->__r_.__value_.__s.__data_[4];
  BOOL v13 = data == 1819308129 && v11 == 101;
LABEL_20:
  uint64_t v14 = (char *)operator new(0x28uLL);
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  *(_OWORD *)&v23.__r_.__value_.__r.__words[1] = xmmword_192DB2880;
  strcpy(v14, "--cpu-target: unsupported target env");
  if (!v13)
  {
    *(void *)&v22[48] = v4;
    BOOL v20 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v20, &v23);
    v20->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(v20, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  operator delete(v14);
  Espresso::AOT::MILCompilerForMLC::Target::Target(std::string const&)::$_1::operator()(&v23, (uint64_t)v25, 58);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v4);
  }
  *(std::string *)char v4 = v23;
  uint64_t v15 = v26;
  int v16 = operator new(0x30uLL);
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  *(_OWORD *)&v23.__r_.__value_.__r.__words[1] = *(_OWORD *)&v22[48];
  _OWORD *v16 = *(_OWORD *)&v22[32];
  v16[1] = *(_OWORD *)&v22[16];
  *(_OWORD *)((char *)v16 + 26) = *(_OWORD *)v22;
  *((unsigned char *)v16 + 42) = 0;
  if (v15 == -1)
  {
    *(void *)&v22[48] = v4;
    uint64_t v21 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v21, &v23);
    v21->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(v21, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  operator delete(v16);
  std::string::operator=(v3, &__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(__str.__r_.__value_.__l.__data_);
  return a1;
}

void sub_19251C160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  float v33 = v31;
  if (*(char *)(v29 + 71) < 0)
  {
    operator delete(*v30);
    if ((*(char *)(v29 + 47) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((*(char *)(v29 + 47) & 0x80000000) == 0)
  {
LABEL_3:
    if (*(char *)(v29 + 23) < 0) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  operator delete(*v33);
  if (*(char *)(v29 + 23) < 0)
  {
LABEL_4:
    operator delete(*(void **)v29);
    _Unwind_Resume(a1);
  }
LABEL_7:
  _Unwind_Resume(a1);
}

void sub_19251C274()
{
  if (*(char *)(v0 - 41) < 0) {
    JUMPOUT(0x19251C240);
  }
  JUMPOUT(0x19251C1CCLL);
}

__n128 Espresso::AOT::MILCompilerForMLC::Target::Target(std::string const&)::$_1::operator()(void *a1, uint64_t a2, std::string::value_type __c)
{
  std::string::size_type v5 = std::string::find(*(const std::string **)a2, __c, 0);
  **(void **)(a2 + 8) = v5;
  uint64_t v6 = *(const std::string **)a2;
  if ((*(char *)(*(void *)a2 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned __int8 *)(*(void *)a2 + 23) >= v5) {
      size_t v7 = v5;
    }
    else {
      size_t v7 = *(unsigned __int8 *)(*(void *)a2 + 23);
    }
    if (v7 <= 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_6;
    }
LABEL_31:
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (const std::string *)v6->__r_.__value_.__r.__words[0];
  if (*(void *)(*(void *)a2 + 8) >= v5) {
    size_t v7 = v5;
  }
  else {
    size_t v7 = *(void *)(*(void *)a2 + 8);
  }
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_31;
  }
LABEL_6:
  if (v7 >= 0x17)
  {
    uint64_t v18 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v18 = v7 | 7;
    }
    uint64_t v19 = v18 + 1;
    long long v8 = operator new(v18 + 1);
    a1[1] = v7;
    a1[2] = v19 | 0x8000000000000000;
    *a1 = v8;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v7;
    long long v8 = a1;
    if (!v7)
    {
      *(unsigned char *)a1 = 0;
      std::string v9 = *(const std::string **)a2;
      uint64_t v10 = **(void **)(a2 + 8);
      unint64_t v11 = v10 + 1;
      int v12 = *(char *)(*(void *)a2 + 23);
      if ((v12 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }
  }
  memmove(v8, v6, v7);
  *((unsigned char *)v8 + v7) = 0;
  std::string v9 = *(const std::string **)a2;
  uint64_t v10 = **(void **)(a2 + 8);
  unint64_t v11 = v10 + 1;
  int v12 = *(char *)(*(void *)a2 + 23);
  if ((v12 & 0x80000000) == 0)
  {
LABEL_9:
    std::string::size_type size = v12;
    if (v11 <= v12)
    {
      size_t v14 = v12 - v11;
      if (v14 <= 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_11;
      }
LABEL_21:
      std::string::__throw_length_error[abi:ne180100]();
    }
LABEL_32:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
LABEL_19:
  std::string::size_type size = v9->__r_.__value_.__l.__size_;
  if (size < v11) {
    goto LABEL_32;
  }
  std::string v9 = (const std::string *)v9->__r_.__value_.__r.__words[0];
  size_t v14 = size - v11;
  if (size - v11 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_21;
  }
LABEL_11:
  if (v14 >= 0x17)
  {
    uint64_t v20 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v20 = v14 | 7;
    }
    uint64_t v21 = v20 + 1;
    p_dst = (__n128 *)operator new(v20 + 1);
    __dst.n128_u64[1] = v14;
    unint64_t v23 = v21 | 0x8000000000000000;
    __dst.n128_u64[0] = (unint64_t)p_dst;
LABEL_25:
    memmove(p_dst, (char *)&v9->__r_.__value_.__l.__data_ + v10 + 1, v14);
    p_dst->n128_u8[size - v10 - 1] = 0;
    int v16 = *(std::string **)a2;
    if ((SHIBYTE(v16->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_14;
    }
LABEL_26:
    operator delete(v16->__r_.__value_.__l.__data_);
    goto LABEL_14;
  }
  HIBYTE(v23) = v14;
  p_dst = &__dst;
  if (size != v11) {
    goto LABEL_25;
  }
  __dst.n128_u8[size - v10 - 1] = 0;
  int v16 = *(std::string **)a2;
  if (SHIBYTE(v16->__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_26;
  }
LABEL_14:
  __n128 result = __dst;
  v16->__r_.__value_.__r.__words[2] = v23;
  *(__n128 *)&v16->__r_.__value_.__l.__data_ = result;
  return result;
}

void sub_19251C4B8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::MILCompilerForMLC::Target::str(Espresso::AOT::MILCompilerForMLC::Target *this@<X0>, std::string *a2@<X8>)
{
  int v3 = *((char *)this + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)this + 23);
  }
  else {
    size_t v4 = *((void *)this + 1);
  }
  unint64_t v5 = v4 + 7;
  if (v4 + 7 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 7;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4 + 7;
    if (!v4) {
      goto LABEL_15;
    }
  }
  if (v3 >= 0) {
    uint64_t v10 = this;
  }
  else {
    uint64_t v10 = *(Espresso::AOT::MILCompilerForMLC::Target **)this;
  }
  memmove(p_dst, v10, v4);
LABEL_15:
  strcpy((char *)p_dst + v4, "-apple-");
  int v11 = *((char *)this + 47);
  if (v11 >= 0) {
    int v12 = (char *)this + 24;
  }
  else {
    int v12 = (const std::string::value_type *)*((void *)this + 3);
  }
  if (v11 >= 0) {
    std::string::size_type v13 = *((unsigned __int8 *)this + 47);
  }
  else {
    std::string::size_type v13 = *((void *)this + 4);
  }
  size_t v14 = std::string::append(&__dst, v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  int v16 = std::string::append(&v26, ":");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  uint64_t v20 = (const std::string::value_type *)*((void *)this + 6);
  uint64_t v19 = (char *)this + 48;
  uint64_t v18 = v20;
  int v21 = v19[23];
  if (v21 >= 0) {
    int v22 = v19;
  }
  else {
    int v22 = v18;
  }
  if (v21 >= 0) {
    std::string::size_type v23 = v19[23];
  }
  else {
    std::string::size_type v23 = *((void *)v19 + 1);
  }
  uint64_t v24 = std::string::append(&v27, v22, v23);
  *a2 = *v24;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v27.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_29:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_33:
      operator delete(__dst.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_29;
  }
  operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_33;
  }
}

void sub_19251C6B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::MILCompilerForMLC::GetOptions(Espresso::AOT::MILCompilerForMLC *this)
{
  return (uint64_t)this + 264;
}

uint64_t Espresso::AOT::MILCompilerForMLC::Run(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v43 = 0x2B23816800000000;
  long long v44 = 0u;
  long long v45 = 0u;
  kdebug_trace();
  if (!*(unsigned char *)(a1 + 296))
  {
    uint64_t v6 = a3;
    uint64_t v5 = *a3;
    if (v6[1] - v5 != 24)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Only one entry point is supported.");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
      __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
    }
    uint64_t Function = MIL::IRProgram::GetFunction();
    if (Espresso::AOT::HasFlexibleShapeWithEnumeratedConfig(Function))
    {
      std::operator+<char>();
      std::string v26 = std::string::append(&v42.__pn_, " has flexible shape with enumerated config which is not supported on MLC.");
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v42.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__pn_.__r_.__value_.__l.__data_);
      }
      size_t v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v28, &__dst);
      __cxa_throw(v28, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 4;
    strcpy((char *)&__dst, "main");
    Espresso::AOT::MakeIRProgramWithFunction(Function, 1, v5, &v41);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    memset(&v42, 0, sizeof(v42));
    uint64_t v8 = *(unsigned __int8 *)(a1 + 359);
    if ((v8 & 0x80u) == 0) {
      uint64_t v9 = (std::string *)(a1 + 336);
    }
    else {
      uint64_t v9 = *(std::string **)(a1 + 336);
    }
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *(void *)(a1 + 344);
    }
    std::string::append[abi:ne180100]<char const*,0>(&v42.__pn_, v9, (std::string *)((char *)v9 + v8));
    memset(&__dst, 0, sizeof(__dst));
    uint64_t v10 = *(unsigned __int8 *)(v5 + 23);
    if ((v10 & 0x80u) == 0) {
      int v11 = (std::string *)v5;
    }
    else {
      int v11 = *(std::string **)v5;
    }
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *(void *)(v5 + 8);
    }
    std::string::append[abi:ne180100]<char const*,0>(&__dst, v11, (std::string *)((char *)v11 + v10));
    std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__dst, (uint64_t)&v42, &v40);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    std::__fs::filesystem::__create_directories(&v40, 0);
    std::__fs::filesystem::__status(&v40, 0);
    std::string::size_type v13 = Espresso::espresso_os_log_subsystem(0, v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG)) {
      Espresso::AOT::MILCompilerForMLC::Run((uint64_t *)&v40, (uint64_t)v39, v13);
    }
    memset(&__dst, 0, sizeof(__dst));
    std::string::append[abi:ne180100]<char const*,0>(&__dst, (std::string *)"mlc_mil_model", (std::string *)"");
    std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__dst, (uint64_t)&v40, &v38);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    std::__fs::filesystem::__create_directories(&v38, 0);
    memset(&__dst, 0, sizeof(__dst));
    std::string::append[abi:ne180100]<char const*,0>(&__dst, (std::string *)"model.mil", (std::string *)"");
    std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__dst, (uint64_t)&v38, &v37);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      uint64_t v14 = v41;
      if ((SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v14 = v41;
      if ((SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_25:
        std::string pn = v37.__pn_;
        goto LABEL_28;
      }
    }
    std::string::__init_copy_ctor_external(&pn, v37.__pn_.__r_.__value_.__l.__data_, v37.__pn_.__r_.__value_.__l.__size_);
LABEL_28:
    char v35 = 0;
    LOBYTE(v34) = 0;
    char v33 = 0;
    LOBYTE(__p) = 0;
    Espresso::MILUtil::SerializeProgram(v14, (uint64_t)&pn, (uint64_t)&v34, (uint64_t)&__p, 0x100000004, 0);
    if (v33 < 0)
    {
      operator delete(__p);
      if ((v35 & 0x80000000) == 0)
      {
LABEL_30:
        if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_31;
        }
LABEL_46:
        operator delete(pn.__r_.__value_.__l.__data_);
LABEL_31:
        memset(&__dst, 0, sizeof(__dst));
        std::string::append[abi:ne180100]<char const*,0>(&__dst, (std::string *)"model.mlc", (std::string *)"");
        std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__dst, (uint64_t)&v40, &v31);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        std::__fs::filesystem::path::__string_view v15 = std::__fs::filesystem::path::__parent_path(&v42);
        if (v15.__size_ >= 0x7FFFFFFFFFFFFFF8) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v15.__size_ >= 0x17)
        {
          std::basic_string_view<_CharT, _Traits>::size_type v17 = (v15.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v15.__size_ | 7) != 0x17) {
            std::basic_string_view<_CharT, _Traits>::size_type v17 = v15.__size_ | 7;
          }
          std::basic_string_view<_CharT, _Traits>::size_type v18 = v17 + 1;
          p_dst = (std::string *)operator new(v17 + 1);
          __dst.__r_.__value_.__l.__size_ = v15.__size_;
          __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v15.__size_;
          p_dst = &__dst;
          if (!v15.__size_)
          {
LABEL_41:
            p_dst->__r_.__value_.__s.__data_[v15.__size_] = 0;
            std::string v29 = __dst;
            std::__fs::filesystem::path::lexically_relative(&v30, &v31, (const std::__fs::filesystem::path *)&v29);
            if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v29.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_43;
              }
            }
            else if ((SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_43:
              std::string __dst = v30.__pn_;
              goto LABEL_49;
            }
            std::string::__init_copy_ctor_external(&__dst, v30.__pn_.__r_.__value_.__l.__data_, v30.__pn_.__r_.__value_.__l.__size_);
LABEL_49:
            uint64_t v19 = (void **)(a1 + 520);
            if (*(char *)(a1 + 543) < 0) {
              operator delete(*v19);
            }
            *(_OWORD *)uint64_t v19 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
            *(void *)(a1 + 536) = *((void *)&__dst.__r_.__value_.__l + 2);
            std::__fs::filesystem::__remove(&v31, 0);
            if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&__dst, v31.__pn_.__r_.__value_.__l.__data_, v31.__pn_.__r_.__value_.__l.__size_);
            }
            else {
              std::string __dst = v31.__pn_;
            }
            std::string::operator=((std::string *)(a1 + 336), &__dst);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_56;
              }
            }
            else if ((SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_56:
              std::string v29 = v37.__pn_;
              goto LABEL_59;
            }
            std::string::__init_copy_ctor_external(&v29, v37.__pn_.__r_.__value_.__l.__data_, v37.__pn_.__r_.__value_.__l.__size_);
LABEL_59:
            Espresso::AOT::MILCompilerForMLC::AssembleArguments(a1, (uint64_t)&v29, &__dst.__r_.__value_.__l.__data_);
            if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v29.__r_.__value_.__l.__data_);
            }
            std::__fs::filesystem::__remove_all(&v38, 0);
            std::string::size_type v21 = __dst.__r_.__value_.__r.__words[0];
            if (__dst.__r_.__value_.__r.__words[0])
            {
              std::string::size_type size = __dst.__r_.__value_.__l.__size_;
              std::string::size_type v23 = (void *)__dst.__r_.__value_.__r.__words[0];
              if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
              {
                do
                {
                  if (*(char *)(size - 1) < 0) {
                    operator delete(*(void **)(size - 24));
                  }
                  size -= 24;
                }
                while (size != v21);
                std::string::size_type v23 = (void *)__dst.__r_.__value_.__r.__words[0];
              }
              __dst.__r_.__value_.__l.__size_ = v21;
              operator delete(v23);
            }
            if (SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v30.__pn_.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_71:
                if ((SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_72;
                }
                goto LABEL_82;
              }
            }
            else if ((SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_71;
            }
            operator delete(v31.__pn_.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v37.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_72:
              if ((SHIBYTE(v38.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_73;
              }
              goto LABEL_83;
            }
LABEL_82:
            operator delete(v37.__pn_.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v38.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_73:
              if ((SHIBYTE(v40.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_74;
              }
              goto LABEL_84;
            }
LABEL_83:
            operator delete(v38.__pn_.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v40.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_74:
              if ((SHIBYTE(v42.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_75;
              }
              goto LABEL_85;
            }
LABEL_84:
            operator delete(v40.__pn_.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v42.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_75:
              uint64_t result = v41;
              uint64_t v41 = 0;
              if (!result) {
                goto LABEL_77;
              }
              goto LABEL_76;
            }
LABEL_85:
            operator delete(v42.__pn_.__r_.__value_.__l.__data_);
            uint64_t result = v41;
            uint64_t v41 = 0;
            if (!result)
            {
LABEL_77:
              if (E5RT::g_trace_analysis_level < v43) {
                return result;
              }
              return kdebug_trace();
            }
LABEL_76:
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
            goto LABEL_77;
          }
        }
        memmove(p_dst, v15.__data_, v15.__size_);
        goto LABEL_41;
      }
    }
    else if ((v35 & 0x80000000) == 0)
    {
      goto LABEL_30;
    }
    operator delete(v34);
    if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_46;
  }
  Espresso::AOT::MILCompilerForMLC::RunNano(a1);
  return kdebug_trace();
}

void sub_19251CE34()
{
  __cxa_free_exception(v0);
  JUMPOUT(0x19251D014);
}

void sub_19251CE44(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 137) < 0)
  {
    operator delete(*(void **)(v1 - 160));
    E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v1 - 136));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19251D0E0);
}

void sub_19251CE74()
{
}

void sub_19251CE7C(_Unwind_Exception *a1)
{
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_19251CE90(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v2 - 136));
  _Unwind_Resume(a1);
}

void sub_19251CEAC()
{
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v0 - 96));
  JUMPOUT(0x19251CF18);
}

void sub_19251CEB4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__fs::filesystem::path *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
}

void sub_19251CECC()
{
}

void sub_19251CEE4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x19251CF18);
}

void sub_19251CEFC()
{
  if (*(char *)(v0 - 73) < 0) {
    operator delete(*(void **)(v0 - 96));
  }
  JUMPOUT(0x19251CF18);
}

void sub_19251CF14(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x19251D060);
}

void sub_19251CF2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    JUMPOUT(0x19251CF24);
  }
  JUMPOUT(0x19251D060);
}

void sub_19251CF40()
{
  if (*(char *)(v0 - 73) < 0) {
    JUMPOUT(0x19251D06CLL);
  }
  JUMPOUT(0x19251D070);
}

void sub_19251CF58(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a24 < 0)
  {
    operator delete(__p);
    if ((a30 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a30 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a36 & 0x80000000) == 0) {
LABEL_8:
    }
      JUMPOUT(0x19251D070);
LABEL_9:
    JUMPOUT(0x19251D06CLL);
  }
  operator delete(a25);
  if ((a36 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_9;
}

void sub_19251CFA0()
{
  if (*(char *)(v0 - 73) < 0) {
    JUMPOUT(0x19251D07CLL);
  }
  JUMPOUT(0x19251D080);
}

void sub_19251CFB8()
{
}

void sub_19251CFC0()
{
  if (*(char *)(v0 - 73) < 0) {
    JUMPOUT(0x19251D08CLL);
  }
  JUMPOUT(0x19251D090);
}

void sub_19251CFD8()
{
}

void sub_19251CFE0()
{
}

void sub_19251CFE8()
{
}

void sub_19251CFF0()
{
  if (*(char *)(v0 - 73) < 0) {
    JUMPOUT(0x19251D09CLL);
  }
  JUMPOUT(0x19251D0A0);
}

void sub_19251D008()
{
}

void sub_19251D010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (*(char *)(v42 - 73) < 0)
  {
    operator delete(*(void **)(v42 - 96));
    E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v42 - 136));
    _Unwind_Resume(a1);
  }
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v42 - 136));
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForMLC::RunNano(uint64_t a1)
{
  memset(&__p, 0, sizeof(__p));
  char v2 = *(unsigned char *)(a1 + 295);
  if (v2 >= 0) {
    int v3 = (std::string *)(a1 + 272);
  }
  else {
    int v3 = *(std::string **)(a1 + 272);
  }
  if (v2 >= 0) {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 295);
  }
  else {
    uint64_t v4 = *(void *)(a1 + 280);
  }
  std::string::append[abi:ne180100]<char const*,0>(&__p, v3, (std::string *)((char *)v3 + v4));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v23 = __p;
  }
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 24))(&__p, a1);
  std::string::size_type size = __p.__r_.__value_.__l.__size_;
  std::string::size_type v5 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
  {
    do
    {
      memset(&v21, 0, sizeof(v21));
      int v7 = *(char *)(v5 + 23);
      BOOL v8 = v7 < 0;
      if (v7 >= 0) {
        uint64_t v9 = (std::string *)v5;
      }
      else {
        uint64_t v9 = *(std::string **)v5;
      }
      uint64_t v10 = *(unsigned __int8 *)(v5 + 23);
      if (v8) {
        uint64_t v10 = *(void *)(v5 + 8);
      }
      std::string::append[abi:ne180100]<char const*,0>(&v21, v9, (std::string *)((char *)v9 + v10));
      std::__fs::filesystem::path::__string_view v11 = std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)&v21);
      if (v11.__size_)
      {
        if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v12 = (std::string::size_type)&v21;
        }
        else {
          std::string::size_type v12 = v21.__r_.__value_.__r.__words[0];
        }
        std::string::erase(&v21, (std::string::size_type)&v11.__data_[-v12], 0xFFFFFFFFFFFFFFFFLL);
      }
      std::string::size_type v13 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
      char v14 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v13 = v21.__r_.__value_.__l.__size_;
      }
      if (v13)
      {
        std::__fs::filesystem::__create_directories((const std::__fs::filesystem::path *)&v21, 0);
        char v14 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
      }
      if (v14 < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
      v5 += 24;
    }
    while (v5 != size);
    std::string::size_type v5 = __p.__r_.__value_.__r.__words[0];
  }
  if (v5)
  {
    std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
    int v16 = (void *)v5;
    if (__p.__r_.__value_.__l.__size_ != v5)
    {
      do
      {
        if (*(char *)(v15 - 1) < 0) {
          operator delete(*(void **)(v15 - 24));
        }
        v15 -= 24;
      }
      while (v15 != v5);
      int v16 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v5;
    operator delete(v16);
  }
  Espresso::AOT::MILCompilerForMLC::AssembleArguments(a1, (uint64_t)&v23, &__p.__r_.__value_.__l.__data_);
  std::string::size_type v18 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v19 = __p.__r_.__value_.__l.__size_;
    uint64_t v20 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v19 - 1) < 0) {
          operator delete(*(void **)(v19 - 24));
        }
        v19 -= 24;
      }
      while (v19 != v18);
      uint64_t v20 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v18;
    operator delete(v20);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_19251D334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *Espresso::AOT::MILCompilerForMLC::SetOutput(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 14, a2);
}

void Espresso::AOT::MILCompilerForMLC::AssembleArguments(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  v98[19] = *MEMORY[0x1E4F143B8];
  HIBYTE(__p[2]) = 10;
  strcpy((char *)__p, "e5compiler");
  std::vector<std::string>::vector[abi:ne180100](a3, (uint64_t)__p, 1uLL);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  int v6 = *(char *)(a2 + 23);
  int v7 = *(const std::string::value_type **)a2;
  std::string::size_type v8 = *(void *)(a2 + 8);
  if (v6 >= 0) {
    uint64_t v9 = (std::string::value_type *)a2;
  }
  else {
    uint64_t v9 = *(std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    size_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v10 = *(void *)(a2 + 8);
  }
  std::__fs::filesystem::path::__string_view v11 = (std::string::value_type *)memchr(v9, 32, v10);
  if (v11) {
    std::string::size_type v12 = v11;
  }
  else {
    std::string::size_type v12 = &v9[v10];
  }
  uint64_t v13 = MEMORY[0x1E4FBA418];
  if (v12 - v9 == v10)
  {
    unint64_t v14 = (unint64_t)a3[1];
    if (v14 >= (unint64_t)a3[2])
    {
      a3[1] = (char *)std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, a2);
      uint64_t v20 = (char *)(a1 + 336);
      size_t v21 = *(unsigned __int8 *)(a1 + 359);
      if (*(char *)(a1 + 359) < 0) {
        goto LABEL_51;
      }
    }
    else
    {
      if (v6 < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a3[1], v7, v8);
      }
      else
      {
        long long v15 = *(_OWORD *)a2;
        *(void *)(v14 + 16) = *(void *)(a2 + 16);
        *(_OWORD *)unint64_t v14 = v15;
      }
      a3[1] = (char *)(v14 + 24);
      a3[1] = (char *)(v14 + 24);
      uint64_t v20 = (char *)(a1 + 336);
      size_t v21 = *(unsigned __int8 *)(a1 + 359);
      if (*(char *)(a1 + 359) < 0) {
        goto LABEL_51;
      }
    }
  }
  else
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
    uint64_t v16 = *(unsigned __int8 *)(a2 + 23);
    if ((v16 & 0x80u) == 0) {
      std::basic_string_view<_CharT, _Traits>::size_type v17 = (std::string::value_type *)a2;
    }
    else {
      std::basic_string_view<_CharT, _Traits>::size_type v17 = *(std::string::value_type **)a2;
    }
    if ((v16 & 0x80u) != 0) {
      uint64_t v16 = *(void *)(a2 + 8);
    }
    std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(__p, v17, &v17[v16], 0x27u, 0x5Cu);
    std::stringbuf::str();
    unint64_t v18 = (unint64_t)a3[1];
    if (v18 >= (unint64_t)a3[2])
    {
      int v22 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a3, (uint64_t)&v94);
      int v23 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
      a3[1] = v22;
      if (v23 < 0) {
        operator delete(v94.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v19 = *(_OWORD *)&v94.__r_.__value_.__l.__data_;
      *(void *)(v18 + 16) = *((void *)&v94.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v18 = v19;
      a3[1] = (char *)(v18 + 24);
    }
    __p[0] = *(void **)v13;
    *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(v13 + 24);
    __p[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
    if (v97 < 0) {
      operator delete(v96);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x192FF15B0](v98);
    uint64_t v20 = (char *)(a1 + 336);
    size_t v21 = *(unsigned __int8 *)(a1 + 359);
    if (*(char *)(a1 + 359) < 0)
    {
LABEL_51:
      uint64_t v34 = *(char **)(a1 + 336);
      size_t v35 = *(void *)(a1 + 344);
      BOOL v36 = &v34[v35];
      std::__fs::filesystem::path v37 = (char *)memchr(v34, 32, v35);
      if (v37) {
        uint64_t v25 = v37;
      }
      else {
        uint64_t v25 = v36;
      }
      if ((v21 & 0x80) != 0) {
        goto LABEL_55;
      }
      goto LABEL_34;
    }
  }
  uint64_t v24 = (char *)memchr(v20, 32, v21);
  if (v24) {
    uint64_t v25 = v24;
  }
  else {
    uint64_t v25 = &v20[v21];
  }
  if ((v21 & 0x80) != 0)
  {
LABEL_55:
    if (v25 == (char *)(*(void *)(a1 + 336) + *(void *)(a1 + 344))) {
      goto LABEL_56;
    }
LABEL_35:
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
    std::string v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"--output=", 9);
    uint64_t v27 = *(unsigned __int8 *)(a1 + 359);
    if ((v27 & 0x80u) == 0) {
      size_t v28 = v20;
    }
    else {
      size_t v28 = *(unsigned char **)(a1 + 336);
    }
    if ((v27 & 0x80u) != 0) {
      uint64_t v27 = *(void *)(a1 + 344);
    }
    std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(v26, v28, &v28[v27], 0x27u, 0x5Cu);
    std::stringbuf::str();
    unint64_t v29 = (unint64_t)a3[1];
    if (v29 >= (unint64_t)a3[2])
    {
      std::__fs::filesystem::path v31 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a3, (uint64_t)&v94);
      int v32 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
      a3[1] = v31;
      if (v32 < 0) {
        operator delete(v94.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v30 = *(_OWORD *)&v94.__r_.__value_.__l.__data_;
      *(void *)(v29 + 16) = *((void *)&v94.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v29 = v30;
      a3[1] = (char *)(v29 + 24);
    }
    __p[0] = *(void **)v13;
    *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(v13 + 24);
    __p[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
    if (v97 < 0) {
      operator delete(v96);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x192FF15B0](v98);
    int v33 = *(char *)(a1 + 511);
    if ((v33 & 0x80000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_47;
  }
LABEL_34:
  if (v25 != &v20[v21]) {
    goto LABEL_35;
  }
LABEL_56:
  std::operator+<char>();
  unint64_t v38 = (unint64_t)a3[1];
  if (v38 < (unint64_t)a3[2])
  {
    long long v39 = *(_OWORD *)__p;
    *(void **)(v38 + 16) = __p[2];
    *(_OWORD *)unint64_t v38 = v39;
    a3[1] = (char *)(v38 + 24);
    int v33 = *(char *)(a1 + 511);
    if (v33 < 0) {
      goto LABEL_47;
    }
LABEL_61:
    if (!(_BYTE)v33) {
      goto LABEL_72;
    }
    goto LABEL_62;
  }
  std::__fs::filesystem::path v40 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a3, (uint64_t)__p);
  int v41 = SHIBYTE(__p[2]);
  a3[1] = v40;
  if ((v41 & 0x80000000) == 0)
  {
    int v33 = *(char *)(a1 + 511);
    if (v33 < 0) {
      goto LABEL_47;
    }
    goto LABEL_61;
  }
  operator delete(__p[0]);
  int v33 = *(char *)(a1 + 511);
  if ((v33 & 0x80000000) == 0) {
    goto LABEL_61;
  }
LABEL_47:
  if (!*(void *)(a1 + 496)) {
    goto LABEL_72;
  }
LABEL_62:
  *((unsigned char *)&v94.__r_.__value_.__s + 23) = 1;
  LOWORD(v94.__r_.__value_.__l.__data_) = 44;
  E5Common::StringUtils::Split((uint64_t *)(a1 + 488), (char *)&v94, (uint64_t)__p);
  if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    uint64_t v42 = (std::string *)__p[0];
    uint64_t v43 = (std::string *)__p[1];
    if (__p[0] != __p[1]) {
      goto LABEL_66;
    }
LABEL_77:
    if (!v42) {
      goto LABEL_72;
    }
LABEL_78:
    char v48 = (void **)__p[1];
    if (__p[1] == v42)
    {
      __p[1] = v42;
      operator delete(v42);
      if (*(_DWORD *)(a1 + 512) != 1) {
        goto LABEL_80;
      }
    }
    else
    {
      do
      {
        if (*((char *)v48 - 1) < 0) {
          operator delete(*(v48 - 3));
        }
        v48 -= 3;
      }
      while (v48 != (void **)v42);
      __p[1] = v42;
      operator delete(__p[0]);
      if (*(_DWORD *)(a1 + 512) != 1) {
        goto LABEL_80;
      }
    }
LABEL_73:
    HIBYTE(__p[2]) = 12;
    strcpy((char *)__p, "--bnns-graph");
    unint64_t v46 = (unint64_t)a3[1];
    if (v46 < (unint64_t)a3[2])
    {
      long long v47 = *(_OWORD *)__p;
      *(void **)(v46 + 16) = __p[2];
      *(_OWORD *)unint64_t v46 = v47;
      a3[1] = (char *)(v46 + 24);
      return;
    }
    goto LABEL_152;
  }
  operator delete(v94.__r_.__value_.__l.__data_);
  uint64_t v42 = (std::string *)__p[0];
  uint64_t v43 = (std::string *)__p[1];
  if (__p[0] == __p[1]) {
    goto LABEL_77;
  }
  do
  {
LABEL_66:
    while (1)
    {
      std::string::insert(v42, 0, "--");
      unint64_t v44 = (unint64_t)a3[1];
      if (v44 < (unint64_t)a3[2]) {
        break;
      }
      a3[1] = (char *)std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, (uint64_t)v42++);
      if (v42 == v43) {
        goto LABEL_71;
      }
    }
    if (SHIBYTE(v42->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a3[1], v42->__r_.__value_.__l.__data_, v42->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v45 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      *(void *)(v44 + 16) = *((void *)&v42->__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v44 = v45;
    }
    a3[1] = (char *)(v44 + 24);
    a3[1] = (char *)(v44 + 24);
    ++v42;
  }
  while (v42 != v43);
LABEL_71:
  uint64_t v42 = (std::string *)__p[0];
  if (__p[0]) {
    goto LABEL_78;
  }
LABEL_72:
  if (*(_DWORD *)(a1 + 512) == 1) {
    goto LABEL_73;
  }
LABEL_80:
  if (*(unsigned char *)(a1 + 296))
  {
    HIBYTE(__p[2]) = 8;
    strcpy((char *)__p, "--static");
    unint64_t v49 = (unint64_t)a3[1];
    if (v49 >= (unint64_t)a3[2])
    {
      int8x8_t v52 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a3, (uint64_t)__p);
      int v53 = SHIBYTE(__p[2]);
      a3[1] = v52;
      if (v53 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v50 = *(_OWORD *)__p;
      *(void **)(v49 + 16) = __p[2];
      *(_OWORD *)unint64_t v49 = v50;
      a3[1] = (char *)(v49 + 24);
    }
    if (!*(unsigned char *)(a1 + 328)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    std::operator+<char>();
    unint64_t v51 = (unint64_t)a3[1];
    if (v51 < (unint64_t)a3[2]) {
      goto LABEL_94;
    }
  }
  else
  {
    HIBYTE(__p[2]) = 8;
    strcpy((char *)__p, "--binary");
    unint64_t v51 = (unint64_t)a3[1];
    if (v51 < (unint64_t)a3[2])
    {
LABEL_94:
      long long v54 = *(_OWORD *)__p;
      *(void **)(v51 + 16) = __p[2];
      *(_OWORD *)unint64_t v51 = v54;
      a3[1] = (char *)(v51 + 24);
      goto LABEL_97;
    }
  }
  BOOL v55 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a3, (uint64_t)__p);
  int v56 = SHIBYTE(__p[2]);
  a3[1] = v55;
  if (v56 < 0) {
    operator delete(__p[0]);
  }
LABEL_97:
  std::operator+<char>();
  unint64_t v57 = (unint64_t)a3[1];
  if (v57 >= (unint64_t)a3[2])
  {
    uint64_t v59 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a3, (uint64_t)__p);
    int v60 = SHIBYTE(__p[2]);
    a3[1] = v59;
    if (v60 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v58 = *(_OWORD *)__p;
    *(void **)(v57 + 16) = __p[2];
    *(_OWORD *)unint64_t v57 = v58;
    a3[1] = (char *)(v57 + 24);
  }
  std::operator+<char>();
  unint64_t v61 = (unint64_t)a3[1];
  if (v61 >= (unint64_t)a3[2])
  {
    int v63 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a3, (uint64_t)__p);
    int v64 = SHIBYTE(__p[2]);
    a3[1] = v63;
    if (v64 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v62 = *(_OWORD *)__p;
    *(void **)(v61 + 16) = __p[2];
    *(_OWORD *)unint64_t v61 = v62;
    a3[1] = (char *)(v61 + 24);
  }
  Espresso::AOT::MILCompilerForMLC::Target::str((Espresso::AOT::MILCompilerForMLC::Target *)(a1 + 392), &v94);
  uint64_t v65 = std::string::insert(&v94, 0, "--target=");
  long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
  __p[2] = (void *)v65->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v66;
  v65->__r_.__value_.__l.__size_ = 0;
  v65->__r_.__value_.__r.__words[2] = 0;
  v65->__r_.__value_.__r.__words[0] = 0;
  unint64_t v67 = (unint64_t)a3[1];
  if (v67 < (unint64_t)a3[2])
  {
    long long v68 = *(_OWORD *)__p;
    *(void **)(v67 + 16) = __p[2];
    *(_OWORD *)unint64_t v67 = v68;
    memset(__p, 0, 24);
    a3[1] = (char *)(v67 + 24);
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_107;
    }
LABEL_111:
    if (!*(unsigned char *)(a1 + 268)) {
      goto LABEL_117;
    }
LABEL_112:
    std::to_string(&v94, *(_DWORD *)(a1 + 264));
    char v71 = std::string::insert(&v94, 0, "--deadline=");
    long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
    __p[2] = (void *)v71->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v72;
    v71->__r_.__value_.__l.__size_ = 0;
    v71->__r_.__value_.__r.__words[2] = 0;
    v71->__r_.__value_.__r.__words[0] = 0;
    unint64_t v73 = (unint64_t)a3[1];
    if (v73 >= (unint64_t)a3[2])
    {
      unint64_t v75 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a3, (uint64_t)__p);
      int v76 = SHIBYTE(__p[2]);
      a3[1] = v75;
      if (v76 < 0)
      {
        operator delete(__p[0]);
        if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_117;
        }
      }
      else if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_117;
      }
    }
    else
    {
      long long v74 = *(_OWORD *)__p;
      *(void **)(v73 + 16) = __p[2];
      *(_OWORD *)unint64_t v73 = v74;
      memset(__p, 0, 24);
      a3[1] = (char *)(v73 + 24);
      if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_117;
      }
    }
    operator delete(v94.__r_.__value_.__l.__data_);
    if (!*(unsigned char *)(a1 + 388)) {
      goto LABEL_130;
    }
    goto LABEL_118;
  }
  uint64_t v69 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a3, (uint64_t)__p);
  int v70 = SHIBYTE(__p[2]);
  a3[1] = v69;
  if (v70 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_111;
    }
  }
  else if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_111;
  }
LABEL_107:
  operator delete(v94.__r_.__value_.__l.__data_);
  if (*(unsigned char *)(a1 + 268)) {
    goto LABEL_112;
  }
LABEL_117:
  if (!*(unsigned char *)(a1 + 388)) {
    goto LABEL_130;
  }
LABEL_118:
  std::to_string(&v94, *(_DWORD *)(a1 + 384));
  uint64_t v77 = std::string::insert(&v94, 0, "--size=");
  long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
  __p[2] = (void *)v77->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v78;
  v77->__r_.__value_.__l.__size_ = 0;
  v77->__r_.__value_.__r.__words[2] = 0;
  v77->__r_.__value_.__r.__words[0] = 0;
  unint64_t v79 = (unint64_t)a3[1];
  if (v79 >= (unint64_t)a3[2])
  {
    v81 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a3, (uint64_t)__p);
    int v82 = SHIBYTE(__p[2]);
    a3[1] = v81;
    if (v82 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v80 = *(_OWORD *)__p;
    *(void **)(v79 + 16) = __p[2];
    *(_OWORD *)unint64_t v79 = v80;
    memset(__p, 0, 24);
    a3[1] = (char *)(v79 + 24);
  }
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v94.__r_.__value_.__l.__data_);
  }
LABEL_130:
  v84 = *a3;
  v83 = (void **)a3[1];
  if (*a3 == (char *)v83)
  {
LABEL_146:
    if (v84 != (char *)v83) {
      return;
    }
  }
  else
  {
    do
    {
      uint64_t v85 = v84[23];
      BOOL v86 = (v85 & 0x80u) != 0;
      if ((v85 & 0x80u) != 0) {
        uint64_t v85 = *((void *)v84 + 1);
      }
      if (v86) {
        v87 = *(char **)v84;
      }
      else {
        v87 = v84;
      }
      if (v85 >= 8)
      {
        v88 = &v87[v85];
        v89 = v87;
        do
        {
          v90 = (char *)memchr(v89, 117, v85 - 7);
          if (!v90) {
            break;
          }
          if (*(void *)v90 == 0x736E6E622D657375)
          {
            if (v90 == v88 || v90 - v87 == -1) {
              break;
            }
            goto LABEL_146;
          }
          v89 = v90 + 1;
          uint64_t v85 = v88 - (unsigned char *)v89;
        }
        while (v88 - (unsigned char *)v89 >= 8);
      }
      v84 += 24;
    }
    while (v84 != (char *)v83);
  }
  if (*(unsigned char *)(a1 + 516))
  {
    HIBYTE(__p[2]) = 16;
    strcpy((char *)__p, "--use-bnns=false");
    if (v83 < (void **)a3[2]) {
      goto LABEL_149;
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 296)) {
      return;
    }
    HIBYTE(__p[2]) = 15;
    strcpy((char *)__p, "--use-bnns=true");
    if (v83 < (void **)a3[2])
    {
LABEL_149:
      long long v91 = *(_OWORD *)__p;
      v83[2] = __p[2];
      *(_OWORD *)v83 = v91;
      a3[1] = (char *)(v83 + 3);
      return;
    }
  }
LABEL_152:
  int v92 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a3, (uint64_t)__p);
  int v93 = SHIBYTE(__p[2]);
  a3[1] = v92;
  if (v93 < 0) {
    operator delete(__p[0]);
  }
}

void sub_19251DF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::vector<std::string>::~vector[abi:ne180100](v21);
  _Unwind_Resume(a1);
}

void anonymous namespace'::RunCommand(uint64_t *a1, const char *a2)
{
  int v3 = Espresso::espresso_os_log_subsystem(0, a2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    int v32 = 0;
    int v33 = 0;
    uint64_t v34 = 0;
    uint64_t v4 = *a1;
    if (a1[1] != *a1) {
      goto LABEL_3;
    }
LABEL_40:
    uint64_t v27 = 0;
    goto LABEL_41;
  }
  int v32 = 0;
  int v33 = 0;
  uint64_t v34 = 0;
  uint64_t v4 = *a1;
  if (a1[1] == *a1) {
    goto LABEL_40;
  }
LABEL_3:
  std::string::size_type v5 = 0;
  unint64_t v6 = 0;
  do
  {
    int v7 = (uint64_t **)(v4 + 24 * v6);
    if (*((char *)v7 + 23) < 0)
    {
      int v7 = (uint64_t **)*v7;
      std::string::size_type v8 = v34;
      if (v5 < v34)
      {
LABEL_4:
        *(void *)std::string::size_type v5 = v7;
        v5 += 8;
        goto LABEL_5;
      }
    }
    else
    {
      std::string::size_type v8 = v34;
      if (v5 < v34) {
        goto LABEL_4;
      }
    }
    uint64_t v9 = v32;
    size_t v10 = (char *)(v5 - v32);
    uint64_t v11 = (v5 - v32) >> 3;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v8 - v32;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      long long v15 = operator new(8 * v14);
      uint64_t v16 = (char *)v15 + 8 * v11;
      *(void *)uint64_t v16 = v7;
      uint64_t v17 = (uint64_t)(v16 + 8);
      if (v5 == v9) {
        goto LABEL_19;
      }
LABEL_23:
      unint64_t v18 = v5 - 8 - v9;
      if (v18 >= 0x168)
      {
        if (&v10[(void)v15 - 8 - (v18 & 0xFFFFFFFFFFFFFFF8)] > &v10[(void)v15 - 8])
        {
          long long v19 = v5;
        }
        else if (&v5[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] > v5 - 8)
        {
          long long v19 = v5;
        }
        else if ((unint64_t)(v5 - &v10[(void)v15]) >= 0x20)
        {
          uint64_t v21 = (v18 >> 3) + 1;
          uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
          long long v19 = &v5[-v22];
          v16 -= v22;
          int v23 = (char *)v15 + 8 * v11 - 16;
          uint64_t v24 = v5 - 16;
          uint64_t v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v26 = *(_OWORD *)v24;
            *(v23 - 1) = *((_OWORD *)v24 - 1);
            *int v23 = v26;
            v23 -= 2;
            v24 -= 32;
            v25 -= 4;
          }
          while (v25);
          if (v21 == (v21 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_26:
            std::string::size_type v5 = v32;
            int v32 = v16;
            int v33 = (void *)v17;
            uint64_t v34 = (char *)v15 + 8 * v14;
            if (!v5) {
              goto LABEL_21;
            }
LABEL_20:
            operator delete(v5);
            goto LABEL_21;
          }
        }
        else
        {
          long long v19 = v5;
        }
      }
      else
      {
        long long v19 = v5;
      }
      do
      {
        uint64_t v20 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v19 != v9);
      goto LABEL_26;
    }
    long long v15 = 0;
    uint64_t v16 = (char *)(8 * v11);
    *(void *)(8 * v11) = v7;
    uint64_t v17 = 8 * v11 + 8;
    if (v5 != v9) {
      goto LABEL_23;
    }
LABEL_19:
    int v32 = v16;
    int v33 = (void *)v17;
    uint64_t v34 = (char *)v15 + 8 * v14;
    if (v5) {
      goto LABEL_20;
    }
LABEL_21:
    std::string::size_type v5 = (char *)v17;
LABEL_5:
    int v33 = v5;
    ++v6;
    uint64_t v4 = *a1;
  }
  while (v6 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  uint64_t v27 = v32;
LABEL_41:
  size_t v28 = (char *)mlc_services_compile();
  if (!v28 || *v28)
  {
    std::string::basic_string[abi:ne180100]<0>(v31, v28);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v30);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  free(v28);
  if (v27) {
    operator delete(v27);
  }
}

void sub_19251E41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      if (a21 < 0)
      {
        operator delete(a16);
        if (!v24)
        {
LABEL_8:
          if (!v23) {
            goto LABEL_9;
          }
          goto LABEL_12;
        }
      }
      else if (!v24)
      {
        goto LABEL_8;
      }
      free(v24);
      if (!v23) {
LABEL_9:
      }
        _Unwind_Resume(a1);
LABEL_12:
      operator delete(v23);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void Espresso::AOT::MILCompilerForMLC::Run(uint64_t a1, uint64_t a2)
{
  Espresso::AOT::MILCompilerForMLC::AssembleArguments(a1, a2, (char **)&__p);
  int v3 = (void **)__p;
  if (__p)
  {
    uint64_t v4 = v7;
    std::string::size_type v5 = __p;
    if (v7 != __p)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 3;
      }
      while (v4 != v3);
      std::string::size_type v5 = __p;
    }
    int v7 = v3;
    operator delete(v5);
  }
}

void sub_19251E538(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

std::string *Espresso::AOT::MILCompilerForMLC::SetTargetOS(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 416), a2);
}

std::string *Espresso::AOT::MILCompilerForMLC::SetTargetArch(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 392), a2);
}

std::string *Espresso::AOT::MILCompilerForMLC::GetOutputPaths@<X0>(Espresso::AOT::MILCompilerForMLC *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if (!*((unsigned char *)this + 296))
  {
    unint64_t v6 = (char *)this + 520;
LABEL_7:
    uint64_t result = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a2, (uint64_t)v6);
    *(void *)(a2 + 8) = result;
    return result;
  }
  uint64_t v4 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a2, (uint64_t)this + 336);
  std::string::size_type v5 = v4;
  *(void *)(a2 + 8) = v4;
  if (!*((unsigned char *)this + 328)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  unint64_t v6 = (char *)this + 304;
  if ((unint64_t)v4 >= *(void *)(a2 + 16)) {
    goto LABEL_7;
  }
  if (*((char *)this + 327) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 38), *((void *)this + 39));
  }
  else
  {
    long long v7 = *(_OWORD *)v6;
    v4->__r_.__value_.__r.__words[2] = *((void *)this + 40);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
  }
  uint64_t result = v5 + 1;
  *(void *)(a2 + 8) = v5 + 1;
  *(void *)(a2 + 8) = v5 + 1;
  return result;
}

void sub_19251E620(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  std::vector<std::string>::~vector[abi:ne180100]((void **)v1);
  _Unwind_Resume(a1);
}

void sub_19251E638(_Unwind_Exception *a1)
{
  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MLCNanoAOTCompilerBackendFactory::~MLCNanoAOTCompilerBackendFactory(Espresso::AOT::MLCNanoAOTCompilerBackendFactory *this)
{
  Espresso::AOT::AOTCompilerBackendFactory::~AOTCompilerBackendFactory(this);

  JUMPOUT(0x192FF16B0);
}

void *Espresso::AOT::MLCNanoAOTCompilerBackendFactory::MLCNanoAOTCompilerBackendFactory(Espresso::AOT::MLCNanoAOTCompilerBackendFactory *this)
{
  uint64_t result = Espresso::AOT::AOTCompilerBackendFactory::AOTCompilerBackendFactory(this);
  void *result = &unk_1EE36B6C8;
  return result;
}

{
  void *result;

  uint64_t result = Espresso::AOT::AOTCompilerBackendFactory::AOTCompilerBackendFactory(this);
  void *result = &unk_1EE36B6C8;
  return result;
}

void Espresso::AOT::MLCNanoAOTCompilerBackendFactory::Instantiate(uint64_t a1, uint64_t a2)
{
  char v7 = 3;
  LODWORD(v6) = 7696483;
  char v5 = 4;
  strcpy((char *)__p, "nano");
  v2[0] = 1;
  int v3 = 0;
  Espresso::AOT::AOTCompilerOptions::SetOption(a2, &v6, (long long *)__p, (uint64_t)v2);
  if (v3 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE39B9A8[v3])(&v8, v2);
  }
  int v3 = -1;
  if (v5 < 0)
  {
    operator delete(__p[0]);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete((void *)v6);
LABEL_5:
  std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForMLC,Espresso::AOT::AOTCompilerOptions,std::unordered_map<std::string,std::string>>();
}

void sub_19251E7F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0)
  {
    operator delete(__p);
    if ((a25 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if ((a25 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a20);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForMLC,Espresso::AOT::AOTCompilerOptions,std::unordered_map<std::string,std::string>>()
{
}

void sub_19251E96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  MEMORY[0x192FF16B0](v14, 0x10F3C40CB988097);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MLCNanoAOTCompilerBackendFactory::GetBackendName(char *a1@<X8>)
{
  a1[23] = 4;
  strcpy(a1, "nano");
}

void Espresso::AOT::MILCompilerForMLC::~MILCompilerForMLC(void **this)
{
  Espresso::AOT::MILCompilerForMLC::~MILCompilerForMLC(this);

  JUMPOUT(0x192FF16B0);
}

{
  void **v2;
  Espresso::AOT::AOTCompilerBackend *v3;
  void **v4;
  void *v5;
  uint64_t vars8;

  *this = &unk_1EE36B280;
  if ((*((char *)this + 543) & 0x80000000) == 0)
  {
    Espresso::AOT::MILCompilerForMLC::Options::~Options(this + 33);
    *this = &unk_1EE36B370;
    uint64_t v2 = (void **)this[29];
    if (!v2) {
      goto LABEL_3;
    }
LABEL_9:
    uint64_t v4 = (void **)this[30];
    if (v4 == v2)
    {
      this[30] = v2;
      operator delete(v2);
      if (*((char *)this + 231) < 0) {
        goto LABEL_16;
      }
    }
    else
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 3;
      }
      while (v4 != v2);
      char v5 = this[29];
      this[30] = v2;
      operator delete(v5);
      if (*((char *)this + 231) < 0) {
        goto LABEL_16;
      }
    }
LABEL_4:
    if ((*((char *)this + 207) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
  operator delete(this[65]);
  Espresso::AOT::MILCompilerForMLC::Options::~Options(this + 33);
  *this = &unk_1EE36B370;
  uint64_t v2 = (void **)this[29];
  if (v2) {
    goto LABEL_9;
  }
LABEL_3:
  if ((*((char *)this + 231) & 0x80000000) == 0) {
    goto LABEL_4;
  }
LABEL_16:
  operator delete(this[26]);
  if ((*((char *)this + 207) & 0x80000000) == 0)
  {
LABEL_5:
    int v3 = (Espresso::AOT::AOTCompilerBackend *)this;
    goto LABEL_7;
  }
LABEL_17:
  operator delete(this[23]);
  int v3 = (Espresso::AOT::AOTCompilerBackend *)this;

LABEL_7:
  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(v3);
}

void Espresso::AOT::MILCompilerForMLC::Options::~Options(void **this)
{
  if (*((char *)this + 247) < 0)
  {
    operator delete(this[28]);
    if ((*((char *)this + 223) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 199) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((char *)this + 223) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[25]);
  if ((*((char *)this + 199) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 175) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(this[22]);
  if ((*((char *)this + 175) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*((char *)this + 151) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(this[19]);
  if ((*((char *)this + 151) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*((char *)this + 119) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(this[16]);
  if ((*((char *)this + 119) & 0x80000000) == 0)
  {
LABEL_7:
    if ((*((char *)this + 95) & 0x80000000) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    operator delete(this[9]);
    if (!*((unsigned char *)this + 64)) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
LABEL_15:
  operator delete(this[12]);
  if (*((char *)this + 95) < 0) {
    goto LABEL_16;
  }
LABEL_8:
  if (!*((unsigned char *)this + 64))
  {
LABEL_18:
    if ((*((char *)this + 31) & 0x80000000) == 0) {
      return;
    }
LABEL_21:
    operator delete(this[1]);
    return;
  }
LABEL_17:
  if ((*((char *)this + 63) & 0x80000000) == 0) {
    goto LABEL_18;
  }
  operator delete(this[5]);
  if (*((char *)this + 31) < 0) {
    goto LABEL_21;
  }
}

void *std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(void *a1, unsigned char *a2, unsigned char *a3, unsigned __int8 __c, unsigned __int8 a5)
{
  memset(&v15, 0, sizeof(v15));
  std::string::push_back(&v15, __c);
  for (; a2 != a3; ++a2)
  {
    int v10 = *a2;
    if (v10 == a5 || v10 == __c)
    {
      std::string::push_back(&v15, a5);
      LOBYTE(v10) = *a2;
    }
    std::string::push_back(&v15, v10);
  }
  std::string::push_back(&v15, __c);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v11 = &v15;
  }
  else {
    uint64_t v11 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v15.__r_.__value_.__l.__size_;
  }
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v11, size);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  return v13;
}

void sub_19251ED5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::MILCompilerForMLC::Run(uint64_t *a1, uint64_t a2, os_log_t log)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (*((char *)a1 + 23) >= 0) {
    int v3 = a1;
  }
  else {
    int v3 = (uint64_t *)*a1;
  }
  int v4 = *(_DWORD *)(a2 + 4);
  int v5 = 136315394;
  long long v6 = v3;
  __int16 v7 = 1024;
  int v8 = v4;
  _os_log_debug_impl(&dword_1920CB000, log, OS_LOG_TYPE_DEBUG, "MILCompilerForMLC: Run(): Created directory @ %s. Permissions (octal) = 0%o", (uint8_t *)&v5, 0x12u);
}

void anonymous namespace'::RunCommand(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl(&dword_1920CB000, log, OS_LOG_TYPE_DEBUG, "Invoking MLCompiler", v1, 2u);
}

BOOL Espresso::AOT::CostGraph::Edge::operator==(uint64_t a1, uint64_t a2)
{
  return *(void *)a1 == *(void *)a2 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
}

BOOL Espresso::AOT::CostGraph::Node::operator==(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *a2;
  if (v2 - *a1 != a2[1] - *a2) {
    return 0;
  }
  if (v3 == v2) {
    return 1;
  }
  do
  {
    BOOL result = *(double *)(v3 + 8) == *(double *)(v4 + 8) && *(void *)v3 == *(void *)v4;
    v3 += 16;
    v4 += 16;
  }
  while (result && v3 != v2);
  return result;
}

void sub_19251EF90(_Unwind_Exception *a1)
{
  Espresso::AOT::CostGraph::~CostGraph(v1);
  _Unwind_Resume(a1);
}

void sub_19251EFA4(_Unwind_Exception *a1)
{
  Espresso::AOT::CostGraph::~CostGraph(v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::CostGraph::CostGraph(void **a1, char *a2, void **a3)
{
  int v5 = (char *)*a1;
  long long v6 = a2;
  if (v5 != a2)
  {
    int v8 = v5;
    do
    {
      int v10 = (void *)*((void *)v8 - 3);
      v8 -= 24;
      uint64_t v9 = v10;
      if (v10)
      {
        *((void *)v5 - 2) = v9;
        operator delete(v9);
      }
      int v5 = v8;
    }
    while (v8 != a2);
    long long v6 = *a3;
  }
  *a1 = a2;

  operator delete(v6);
}

void nitro::drop_hints_and_lower_to_fp(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)a1)
  {
    if (*(unsigned char *)(a1 + 40) != 9)
    {
LABEL_63:
      nitro::SExp::SExp(a3, a1);
      return;
    }
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v29, (const nitro::ndarray_container *)(*(void *)(a1 + 32) + 8));
    if ((v29 - 2) > 9) {
      unsigned int v6 = 1;
    }
    else {
      unsigned int v6 = dword_192DC60F8[v29 - 2];
    }
    if ((a2 - 2) > 9)
    {
      if (v6 <= 1)
      {
LABEL_56:
        if (v34[0])
        {
          v34[1] = v34[0];
          operator delete(v34[0]);
        }
        if (v31)
        {
          int v32 = v31;
          operator delete(v31);
        }
        uint64_t v27 = (std::__shared_weak_count *)*((void *)&v30 + 1);
        if (*((void *)&v30 + 1))
        {
          if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        goto LABEL_63;
      }
    }
    else if (v6 <= dword_192DC60F8[(int)a2 - 2])
    {
      goto LABEL_56;
    }
    nitro::ndarray_container::cast_to_primitive((nitro::ndarray_container *)&v29, a2, (nitro::ndarray_container *)&__p);
    switch(*(unsigned char *)(a1 + 40))
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_55;
        }
        uint64_t v9 = *(void *)(a1 + 32);
        if (!v9) {
          goto LABEL_54;
        }
        if (*(char *)(v9 + 31) < 0) {
          operator delete(*(void **)(v9 + 8));
        }
        uint64_t v10 = v9;
        uint64_t v11 = 0x1012C404EF22A49;
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_55;
        }
        uint64_t v22 = *(void *)(a1 + 32);
        if (!v22) {
          goto LABEL_54;
        }
        int v23 = *(void **)(v22 + 8);
        if (v23)
        {
          *(void *)(v22 + 16) = v23;
          operator delete(v23);
        }
        uint64_t v10 = v22;
        uint64_t v11 = 0x1080C409938AC02;
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_55;
        }
        uint64_t v24 = *(void *)(a1 + 32);
        if (!v24) {
          goto LABEL_54;
        }
        uint64_t v10 = std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(v24);
        goto LABEL_49;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_55;
        }
        uint64_t v25 = *(void *)(a1 + 32);
        if (!v25) {
          goto LABEL_54;
        }
        uint64_t v10 = std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(v25);
LABEL_49:
        uint64_t v11 = 0x1020C405E66F15BLL;
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 32), 0xFFFFFFFFFFFFFFFFLL) != 1) {
          goto LABEL_55;
        }
        int v26 = *(void **)(a1 + 32);
        if (!v26) {
          goto LABEL_54;
        }
        uint64_t v10 = (uint64_t)std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(v26);
        uint64_t v11 = 0x10B0C4002311774;
        break;
      default:
        goto LABEL_55;
    }
    MEMORY[0x192FF16B0](v10, v11);
LABEL_54:
    *(void *)(a1 + 32) = 0;
LABEL_55:
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 40) = 9;
    operator new();
  }
  uint64_t v7 = *(void *)(a1 + 48);
  if (*(void *)(a1 + 56) != v7)
  {
    if (*(char *)(v7 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 8), *(void *)(v7 + 16));
    }
    else
    {
      long long v8 = *(_OWORD *)(v7 + 8);
      __p.__r_.__value_.__r.__words[2] = *(void *)(v7 + 24);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__p.__r_.__value_.__l.__size_ != 4) {
        goto LABEL_29;
      }
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 4) {
        goto LABEL_29;
      }
      p_p = &__p;
    }
    if (LODWORD(p_p->__r_.__value_.__l.__data_) == 1414416712)
    {
      nitro::drop_hints_and_lower_to_fp(*(void *)(a1 + 48) + 144, a2);
LABEL_36:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      return;
    }
LABEL_29:
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(unsigned char *)(a3 + 40) = 0;
    *(_WORD *)a3 = 0;
    uint64_t v13 = std::vector<nitro::SExp>::__push_back_slow_path<nitro::SExp const&>((void **)(a3 + 48), *(void *)(a1 + 48));
    uint64_t v14 = *(void *)(a1 + 48);
    uint64_t v15 = *(void *)(a1 + 56);
    *(void *)(a3 + 56) = v13;
    if (0x8E38E38E38E38E39 * ((v15 - v14) >> 3) >= 2)
    {
      unint64_t v16 = 1;
      uint64_t v17 = 72;
      do
      {
        nitro::drop_hints_and_lower_to_fp(v14 + v17, a2);
        unint64_t v21 = *(void *)(a3 + 56);
        if (v21 < *(void *)(a3 + 64))
        {
          *(_WORD *)unint64_t v21 = v29;
          long long v18 = v30;
          *(void *)(v21 + 24) = v31;
          *(void *)(v21 + 32) = 0;
          *(_OWORD *)(v21 + 8) = v18;
          std::__fs::filesystem::path v31 = 0;
          long long v30 = 0uLL;
          *(unsigned char *)(v21 + 40) = 0;
          char v19 = v33;
          *(void *)(v21 + 32) = v32;
          *(unsigned char *)(v21 + 40) = v19;
          *(unsigned char *)(v21 + 40) = v33;
          char v33 = 0;
          *(void *)(v21 + 48) = 0;
          *(void *)(v21 + 56) = 0;
          *(void *)(v21 + 64) = 0;
          *(_OWORD *)(v21 + 48) = *(_OWORD *)v34;
          *(void *)(v21 + 64) = v35;
          v34[0] = 0;
          v34[1] = 0;
          uint64_t v35 = 0;
          uint64_t v20 = (char *)(v21 + 72);
        }
        else
        {
          uint64_t v20 = std::vector<nitro::SExp>::__push_back_slow_path<nitro::SExp>((void **)(a3 + 48), (uint64_t)&v29);
        }
        *(void *)(a3 + 56) = v20;
        nitro::SExp::~SExp((nitro::SExp *)&v29);
        ++v16;
        uint64_t v14 = *(void *)(a1 + 48);
        v17 += 72;
      }
      while (v16 < 0x8E38E38E38E38E39 * ((*(void *)(a1 + 56) - v14) >> 3));
    }
    goto LABEL_36;
  }

  nitro::SExp::SExp(a3, a1);
}

void sub_19251F68C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray_container::~ndarray_container(nitro::ndarray_container *this)
{
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void nitro::nitro_program::load(uint64_t *a1, const void **a2, uint64_t a3)
{
  v239[19] = *MEMORY[0x1E4F143B8];
  unsigned int v6 = operator new(0xB0uLL);
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = &unk_1EE384868;
  uint64_t v7 = Espresso::network_ensemble::network_ensemble((Espresso::network_ensemble *)(v6 + 3));
  long long v8 = (std::__shared_weak_count *)a1[1];
  *a1 = (uint64_t)v7;
  a1[1] = (uint64_t)v6;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  int v9 = *((char *)a2 + 23);
  if (v9 >= 0) {
    size_t v10 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v10 = (size_t)a2[1];
  }
  unint64_t v11 = v10 + 13;
  if (v10 + 13 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v11 >= 0x17)
  {
    uint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v13 = v11 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (std::string *)operator new(v13 + 1);
    __dst.__r_.__value_.__l.__size_ = v10 + 13;
    __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v10 + 13;
    if (!v10) {
      goto LABEL_18;
    }
  }
  if (v9 >= 0) {
    uint64_t v15 = a2;
  }
  else {
    uint64_t v15 = *a2;
  }
  memmove(p_dst, v15, v10);
LABEL_18:
  strcpy((char *)p_dst + v10, "/code.nitroir");
  std::ifstream::basic_ifstream((uint64_t *)&v230);
  if (*(_DWORD *)((char *)v233 + *(void *)(v230 - 24))) {
    nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_0::operator()();
  }
  __p[0] = &v230;
  __p[1] = 0;
  int64_t v214 = 0;
  uint64_t v215 = 0;
  __src.__r_.__value_.__s.__data_[1] = 0;
  uint64_t v228 = 0;
  uint64_t v229 = 0;
  uint64_t v227 = 0;
  *(_OWORD *)&__src.__r_.__value_.__r.__words[1] = 0u;
  long long v225 = 0u;
  char v226 = 0;
  nitro::SExp::load((nitro::SExp *)&__src, (uint64_t)__p);
  nitro::drop_hints_and_lower_to_fp((uint64_t)&__src, a3, (uint64_t)&v222);
  nitro::SExp::operator=((uint64_t)&__src, (uint64_t)&v222);
  nitro::SExp::~SExp((nitro::SExp *)&v222);
  nitro::ir::parse_tree((uint64_t *)&v222, (nitro::ir *)&__src, v16);
  uint64_t v17 = (char *)operator new(0x90uLL);
  long long v18 = (std::__shared_weak_count *)v17;
  *((void *)v17 + 2) = 0;
  *((void *)v17 + 1) = 0;
  *(void *)uint64_t v17 = &unk_1EE380E70;
  char v19 = v17 + 24;
  *(_OWORD *)(v17 + 88) = 0u;
  *((void *)v17 + 17) = 0;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *(_OWORD *)(v17 + 72) = 0u;
  *((_DWORD *)v17 + 24) = 1065353216;
  *(_OWORD *)(v17 + 120) = 0u;
  *(_OWORD *)(v17 + 104) = 0u;
  *((_DWORD *)v17 + 34) = 1065353216;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v17 + 1, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit((atomic_ullong *volatile)v17 + 2, 1uLL, memory_order_relaxed);
  *((void *)v17 + 3) = v17 + 24;
  *((void *)v17 + 4) = v17;
  if (!atomic_fetch_add((atomic_ullong *volatile)v17 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(char *))(*(void *)v17 + 16))(v17);
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v20 = (std::__shared_weak_count *)a1[3];
  a1[2] = (uint64_t)v19;
  a1[3] = (uint64_t)v18;
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  unint64_t v21 = (nitro::nitro_class *)a1[2];
  nitro::nitro_class::load_nitro_class(v21, v22);
  uint64_t v23 = v222;
  *(void *)&long long v222 = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 40))(v23);
  }
  nitro::SExp::~SExp((nitro::SExp *)&__src);
  *(void *)&long long v230 = *MEMORY[0x1E4FBA3F8];
  uint64_t v208 = v230;
  uint64_t v209 = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  *(void *)((char *)&v230 + *(void *)(v230 - 24)) = v209;
  MEMORY[0x192FF1040](&v231);
  std::istream::~istream();
  MEMORY[0x192FF15B0](v239);
  int v24 = *((char *)a2 + 23);
  if (v24 >= 0) {
    size_t v25 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v25 = (size_t)a2[1];
  }
  unint64_t v26 = v25 + 11;
  if (v25 + 11 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v26 >= 0x17)
  {
    uint64_t v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17) {
      uint64_t v28 = v26 | 7;
    }
    uint64_t v29 = v28 + 1;
    uint64_t v27 = (long long *)operator new(v28 + 1);
    *((void *)&v222 + 1) = v25 + 11;
    int64_t v223 = v29 | 0x8000000000000000;
    *(void *)&long long v222 = v27;
  }
  else
  {
    int64_t v223 = 0;
    long long v222 = 0uLL;
    uint64_t v27 = &v222;
    HIBYTE(v223) = v25 + 11;
    if (!v25) {
      goto LABEL_40;
    }
  }
  if (v24 >= 0) {
    long long v30 = a2;
  }
  else {
    long long v30 = *a2;
  }
  memmove(v27, v30, v25);
LABEL_40:
  strcpy((char *)v27 + v25, "/_nespresso");
  if (v223 >= 0) {
    std::__fs::filesystem::path v31 = (const char *)&v222;
  }
  else {
    std::__fs::filesystem::path v31 = (const char *)v222;
  }
  int v32 = opendir(v31);
  if (v32)
  {
    closedir(v32);
    goto LABEL_62;
  }
  int v33 = *((char *)a2 + 23);
  if (v33 >= 0) {
    size_t v34 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v34 = (size_t)a2[1];
  }
  unint64_t v35 = v34 + 8;
  if (v34 + 8 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v35 >= 0x17)
  {
    uint64_t v37 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17) {
      uint64_t v37 = v35 | 7;
    }
    uint64_t v38 = v37 + 1;
    uint64_t v36 = (long long *)operator new(v37 + 1);
    *((void *)&v230 + 1) = v34 + 8;
    unint64_t v231 = v38 | 0x8000000000000000;
    *(void *)&long long v230 = v36;
    goto LABEL_55;
  }
  unint64_t v231 = 0;
  long long v230 = 0uLL;
  uint64_t v36 = &v230;
  HIBYTE(v231) = v34 + 8;
  if (v34)
  {
LABEL_55:
    if (v33 >= 0) {
      long long v39 = a2;
    }
    else {
      long long v39 = *a2;
    }
    memmove(v36, v39, v34);
  }
  strcpy((char *)v36 + v34, "/_coreml");
  if (SHIBYTE(v223) < 0) {
    operator delete((void *)v222);
  }
  long long v222 = v230;
  int64_t v223 = v231;
LABEL_62:
  int v40 = *((char *)a2 + 23);
  if (v40 >= 0) {
    size_t v41 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v41 = (size_t)a2[1];
  }
  unint64_t v42 = v41 + 22;
  if (v41 + 22 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v43 = *a1;
  if (v42 >= 0x17)
  {
    uint64_t v45 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v42 | 7) != 0x17) {
      uint64_t v45 = v42 | 7;
    }
    uint64_t v46 = v45 + 1;
    unint64_t v44 = (long long *)operator new(v45 + 1);
    *((void *)&v230 + 1) = v41 + 22;
    unint64_t v231 = v46 | 0x8000000000000000;
    *(void *)&long long v230 = v44;
  }
  else
  {
    unint64_t v231 = 0;
    long long v230 = 0uLL;
    unint64_t v44 = &v230;
    HIBYTE(v231) = v41 + 22;
    if (!v41) {
      goto LABEL_76;
    }
  }
  if (v40 >= 0) {
    long long v47 = a2;
  }
  else {
    long long v47 = *a2;
  }
  memmove(v44, v47, v41);
LABEL_76:
  strcpy((char *)v44 + v41, "/networks.espresso.net");
  BOOL root_network = Espresso::network_ensemble::load_root_network(v43, (uint64_t)&v230);
  BOOL v49 = root_network;
  v210 = a2;
  if (SHIBYTE(v231) < 0)
  {
    operator delete((void *)v230);
    v211 = a1;
    if (v49) {
      goto LABEL_78;
    }
  }
  else
  {
    v211 = a1;
    if (root_network)
    {
LABEL_78:
      long long v50 = *(uint64_t **)(*a1 + 16);
      if (!v50) {
        goto LABEL_225;
      }
      unint64_t v51 = (uint64_t **)(a1 + 6);
      while (1)
      {
        if (*((char *)v50 + 39) < 0) {
          std::string::__init_copy_ctor_external(&__src, (const std::string::value_type *)v50[2], v50[3]);
        }
        else {
          std::string __src = *(std::string *)(v50 + 2);
        }
        uint64_t v52 = v50[6];
        *(void *)&long long v225 = v50[5];
        *((void *)&v225 + 1) = v52;
        if (v52) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v52 + 8), 1uLL, memory_order_relaxed);
        }
        nitro::model_metadata::model_metadata((nitro::model_metadata *)&v230);
        int v53 = SHIBYTE(v223);
        if (v223 >= 0) {
          size_t v54 = HIBYTE(v223);
        }
        else {
          size_t v54 = *((void *)&v222 + 1);
        }
        unint64_t v55 = v54 + 1;
        if (v54 + 1 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v55 >= 0x17)
        {
          uint64_t v57 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v55 | 7) != 0x17) {
            uint64_t v57 = v55 | 7;
          }
          uint64_t v58 = v57 + 1;
          int v56 = (char *)operator new(v57 + 1);
          v220.__r_.__value_.__r.__words[2] = v58 | 0x8000000000000000;
          v220.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
          v220.__r_.__value_.__l.__size_ = v54 + 1;
        }
        else
        {
          memset(&v220, 0, sizeof(v220));
          int v56 = (char *)&v220;
          *((unsigned char *)&v220.__r_.__value_.__s + 23) = v54 + 1;
          if (!v54) {
            goto LABEL_101;
          }
        }
        if (v53 >= 0) {
          uint64_t v59 = &v222;
        }
        else {
          uint64_t v59 = (long long *)v222;
        }
        memmove(v56, v59, v54);
LABEL_101:
        *(_WORD *)&v56[v54] = 47;
        if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_src = &__src;
        }
        else {
          p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
        }
        if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__src.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __src.__r_.__value_.__l.__size_;
        }
        long long v62 = std::string::append(&v220, (const std::string::value_type *)p_src, size);
        long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
        v221.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v63;
        v62->__r_.__value_.__l.__size_ = 0;
        v62->__r_.__value_.__r.__words[2] = 0;
        v62->__r_.__value_.__r.__words[0] = 0;
        int v64 = std::string::append(&v221, ".meta");
        long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
        int64_t v214 = v64->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v65;
        v64->__r_.__value_.__l.__size_ = 0;
        v64->__r_.__value_.__r.__words[2] = 0;
        v64->__r_.__value_.__r.__words[0] = 0;
        nitro::model_metadata::load_model_metadata((char **)&v230);
        if (SHIBYTE(v214) < 0)
        {
          operator delete(__p[0]);
          if ((SHIBYTE(v221.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_109:
            if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_122;
            }
            goto LABEL_110;
          }
        }
        else if ((SHIBYTE(v221.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_109;
        }
        operator delete(v221.__r_.__value_.__l.__data_);
        if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
LABEL_122:
        }
          operator delete(v220.__r_.__value_.__l.__data_);
LABEL_110:
        __p[0] = &__src;
        long long v66 = std::__tree<std::__value_type<std::string,nitro::model_metadata>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::model_metadata>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::model_metadata>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v51, (const void **)&__src.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)__p);
        if (v66 + 7 != (uint64_t *)&v230)
        {
          std::vector<std::vector<long long>>::__assign_with_size[abi:ne180100]<std::vector<long long>*,std::vector<long long>*>((uint64_t)(v66 + 7), (char **)v230, *((uint64_t *)&v230 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v230 + 1) - v230) >> 3));
          std::vector<std::vector<long long>>::__assign_with_size[abi:ne180100]<std::vector<long long>*,std::vector<long long>*>((uint64_t)(v66 + 10), v232, v233[0], 0xAAAAAAAAAAAAAAABLL * ((v233[0] - (uint64_t)v232) >> 3));
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v66 + 13), v234, v235, 0xAAAAAAAAAAAAAAABLL * (((char *)v235 - (char *)v234) >> 3));
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v66 + 16), v236, v237, 0xAAAAAAAAAAAAAAABLL * (((char *)v237 - (char *)v236) >> 3));
        }
        *((unsigned char *)v66 + 152) = v238;
        a1 = v211;
        uint64_t v67 = *v211;
        long long v212 = v225;
        if (*((void *)&v225 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v225 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        output_names = (long long **)nitro::model_metadata::get_output_names((nitro::model_metadata *)&v230);
        Espresso::network_ensemble::setup_network(v67, (std::__shared_weak_count **)&v212, output_names);
        uint64_t v69 = (std::__shared_weak_count *)*((void *)&v212 + 1);
        if (*((void *)&v212 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v212 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
        nitro::model_metadata::~model_metadata((nitro::model_metadata *)&v230);
        int v70 = (std::__shared_weak_count *)*((void *)&v225 + 1);
        if (*((void *)&v225 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v225 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
        if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__src.__r_.__value_.__l.__data_);
          long long v50 = (uint64_t *)*v50;
          if (!v50) {
            goto LABEL_225;
          }
        }
        else
        {
          long long v50 = (uint64_t *)*v50;
          if (!v50) {
            goto LABEL_225;
          }
        }
      }
    }
  }
  if (v223 >= 0) {
    char v71 = (const char *)&v222;
  }
  else {
    char v71 = (const char *)v222;
  }
  long long v72 = opendir(v71);
  if (v72)
  {
    while (1)
    {
      unint64_t v73 = readdir(v72);
      if (!v73)
      {
        closedir(v72);
        a1 = v211;
        goto LABEL_225;
      }
      d_name = v73->d_name;
      size_t v75 = strlen(v73->d_name);
      if (v75 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      std::string::size_type v76 = v75;
      if (v75 >= 0x17) {
        break;
      }
      *((unsigned char *)&__src.__r_.__value_.__s + 23) = v75;
      uint64_t v77 = &__src;
      if (v75) {
        goto LABEL_140;
      }
LABEL_141:
      v77[v76] = 0;
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type v80 = __src.__r_.__value_.__l.__size_;
        if (__src.__r_.__value_.__l.__size_ <= 9) {
          goto LABEL_131;
        }
        v81 = (std::string *)__src.__r_.__value_.__r.__words[0];
        goto LABEL_146;
      }
      std::string::size_type v80 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
      if (HIBYTE(__src.__r_.__value_.__r.__words[2]) >= 0xAu)
      {
        v81 = &__src;
LABEL_146:
        int v82 = (char *)v81 + v80;
        BOOL v83 = *(void *)(v82 - 9) == 0x6C65646F6D6C6D2ELL && *(v82 - 1) == 99;
        std::string::size_type v84 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
        if (v83)
        {
          if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::size_type v84 = __src.__r_.__value_.__l.__size_;
            uint64_t v85 = (std::string *)__src.__r_.__value_.__r.__words[0];
          }
          else
          {
            uint64_t v85 = &__src;
          }
          if (v84 >= v84 - 9) {
            size_t v86 = v84 - 9;
          }
          else {
            size_t v86 = v84;
          }
          if (v86 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v86 >= 0x17)
          {
            uint64_t v88 = (v86 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v86 | 7) != 0x17) {
              uint64_t v88 = v86 | 7;
            }
            uint64_t v89 = v88 + 1;
            v87 = operator new(v88 + 1);
            __p[1] = (void *)v86;
            int64_t v214 = v89 | 0x8000000000000000;
            __p[0] = v87;
LABEL_165:
            memmove(v87, v85, v86);
            goto LABEL_166;
          }
          HIBYTE(v214) = v86;
          v87 = __p;
          if (v86) {
            goto LABEL_165;
          }
LABEL_166:
          *((unsigned char *)v87 + v86) = 0;
          nitro::model_metadata::model_metadata((nitro::model_metadata *)&v230);
          int v90 = SHIBYTE(v223);
          if (v223 >= 0) {
            size_t v91 = HIBYTE(v223);
          }
          else {
            size_t v91 = *((void *)&v222 + 1);
          }
          unint64_t v92 = v91 + 1;
          if (v91 + 1 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v92 >= 0x17)
          {
            uint64_t v94 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v92 | 7) != 0x17) {
              uint64_t v94 = v92 | 7;
            }
            uint64_t v95 = v94 + 1;
            int v93 = (char *)operator new(v94 + 1);
            v219.__r_.__value_.__l.__size_ = v91 + 1;
            v219.__r_.__value_.__r.__words[2] = v95 | 0x8000000000000000;
            v219.__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
          }
          else
          {
            memset(&v219, 0, sizeof(v219));
            int v93 = (char *)&v219;
            *((unsigned char *)&v219.__r_.__value_.__s + 23) = v91 + 1;
            if (!v91) {
              goto LABEL_180;
            }
          }
          if (v90 >= 0) {
            v96 = &v222;
          }
          else {
            v96 = (long long *)v222;
          }
          memmove(v93, v96, v91);
LABEL_180:
          *(_WORD *)&v93[v91] = 47;
          if (v214 >= 0) {
            char v97 = __p;
          }
          else {
            char v97 = (void **)__p[0];
          }
          if (v214 >= 0) {
            std::string::size_type v98 = HIBYTE(v214);
          }
          else {
            std::string::size_type v98 = (std::string::size_type)__p[1];
          }
          v99 = std::string::append(&v219, (const std::string::value_type *)v97, v98);
          long long v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
          v220.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v220.__r_.__value_.__l.__data_ = v100;
          v99->__r_.__value_.__l.__size_ = 0;
          v99->__r_.__value_.__r.__words[2] = 0;
          v99->__r_.__value_.__r.__words[0] = 0;
          v101 = std::string::append(&v220, ".meta");
          long long v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
          v221.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v102;
          v101->__r_.__value_.__l.__size_ = 0;
          v101->__r_.__value_.__r.__words[2] = 0;
          v101->__r_.__value_.__r.__words[0] = 0;
          nitro::model_metadata::load_model_metadata((char **)&v230);
          if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v221.__r_.__value_.__l.__data_);
            if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
            {
LABEL_219:
              operator delete(v220.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v219.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_189;
              }
              goto LABEL_220;
            }
          }
          else if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
          {
            goto LABEL_219;
          }
          if ((SHIBYTE(v219.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_189;
          }
LABEL_220:
          operator delete(v219.__r_.__value_.__l.__data_);
LABEL_189:
          v221.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          v103 = std::__tree<std::__value_type<std::string,nitro::model_metadata>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::model_metadata>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::model_metadata>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1 + 6, (const void **)__p, (uint64_t)&std::piecewise_construct, (long long **)&v221);
          if (v103 + 7 != (uint64_t *)&v230)
          {
            std::vector<std::vector<long long>>::__assign_with_size[abi:ne180100]<std::vector<long long>*,std::vector<long long>*>((uint64_t)(v103 + 7), (char **)v230, *((uint64_t *)&v230 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v230 + 1) - v230) >> 3));
            std::vector<std::vector<long long>>::__assign_with_size[abi:ne180100]<std::vector<long long>*,std::vector<long long>*>((uint64_t)(v103 + 10), v232, v233[0], 0xAAAAAAAAAAAAAAABLL * ((v233[0] - (uint64_t)v232) >> 3));
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v103 + 13), v234, v235, 0xAAAAAAAAAAAAAAABLL * (((char *)v235 - (char *)v234) >> 3));
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v103 + 16), v236, v237, 0xAAAAAAAAAAAAAAABLL * (((char *)v237 - (char *)v236) >> 3));
          }
          *((unsigned char *)v103 + 152) = v238;
          int v104 = SHIBYTE(v223);
          if (v223 >= 0) {
            size_t v105 = HIBYTE(v223);
          }
          else {
            size_t v105 = *((void *)&v222 + 1);
          }
          unint64_t v106 = v105 + 1;
          if (v105 + 1 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          v107 = (void *)*v211;
          if (v106 >= 0x17)
          {
            uint64_t v109 = (v106 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v106 | 7) != 0x17) {
              uint64_t v109 = v106 | 7;
            }
            uint64_t v110 = v109 + 1;
            v108 = (char *)operator new(v109 + 1);
            v219.__r_.__value_.__l.__size_ = v105 + 1;
            v219.__r_.__value_.__r.__words[2] = v110 | 0x8000000000000000;
            v219.__r_.__value_.__r.__words[0] = (std::string::size_type)v108;
          }
          else
          {
            memset(&v219, 0, sizeof(v219));
            v108 = (char *)&v219;
            *((unsigned char *)&v219.__r_.__value_.__s + 23) = v105 + 1;
            if (!v105) {
              goto LABEL_205;
            }
          }
          if (v104 >= 0) {
            v111 = &v222;
          }
          else {
            v111 = (long long *)v222;
          }
          memmove(v108, v111, v105);
LABEL_205:
          *(_WORD *)&v108[v105] = 47;
          if (v214 >= 0) {
            v112 = __p;
          }
          else {
            v112 = (void **)__p[0];
          }
          if (v214 >= 0) {
            std::string::size_type v113 = HIBYTE(v214);
          }
          else {
            std::string::size_type v113 = (std::string::size_type)__p[1];
          }
          v114 = std::string::append(&v219, (const std::string::value_type *)v112, v113);
          long long v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
          v220.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v220.__r_.__value_.__l.__data_ = v115;
          v114->__r_.__value_.__l.__size_ = 0;
          v114->__r_.__value_.__r.__words[2] = 0;
          v114->__r_.__value_.__r.__words[0] = 0;
          v116 = std::string::append(&v220, ".mlmodelc/model.espresso.net");
          long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
          v221.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v117;
          v116->__r_.__value_.__l.__size_ = 0;
          v116->__r_.__value_.__r.__words[2] = 0;
          v116->__r_.__value_.__r.__words[0] = 0;
          v118 = (long long **)nitro::model_metadata::get_output_names((nitro::model_metadata *)&v230);
          Espresso::network_ensemble::load_network(v107, (long long *)__p, (uint64_t)&v221, v118);
          if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v221.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v220.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_213:
              if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0) {
                goto LABEL_223;
              }
              goto LABEL_214;
            }
          }
          else if ((SHIBYTE(v220.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_213;
          }
          operator delete(v220.__r_.__value_.__l.__data_);
          if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0) {
LABEL_223:
          }
            operator delete(v219.__r_.__value_.__l.__data_);
LABEL_214:
          uint64_t v119 = *v211;
          v221.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          v120 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v119, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (long long **)&v221);
          std::string::operator=((std::string *)(v120[5] + 424), &__dst);
          nitro::model_metadata::~model_metadata((nitro::model_metadata *)&v230);
          if (SHIBYTE(v214) < 0) {
            operator delete(__p[0]);
          }
          if ((*((unsigned char *)&__src.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_131:
          }
            operator delete(__src.__r_.__value_.__l.__data_);
        }
        else if ((*((unsigned char *)&__src.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          goto LABEL_131;
        }
      }
    }
    uint64_t v78 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v75 | 7) != 0x17) {
      uint64_t v78 = v75 | 7;
    }
    uint64_t v79 = v78 + 1;
    uint64_t v77 = operator new(v78 + 1);
    __src.__r_.__value_.__l.__size_ = v76;
    __src.__r_.__value_.__r.__words[2] = v79 | 0x8000000000000000;
    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
LABEL_140:
    memmove(v77, d_name, v76);
    goto LABEL_141;
  }
LABEL_225:
  int v121 = *((char *)v210 + 23);
  if (v121 >= 0) {
    size_t v122 = *((unsigned __int8 *)v210 + 23);
  }
  else {
    size_t v122 = (size_t)v210[1];
  }
  unint64_t v123 = v122 + 14;
  if (v122 + 14 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v123 >= 0x17)
  {
    uint64_t v125 = (v123 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v123 | 7) != 0x17) {
      uint64_t v125 = v123 | 7;
    }
    uint64_t v126 = v125 + 1;
    v124 = operator new(v125 + 1);
    __src.__r_.__value_.__l.__size_ = v122 + 14;
    __src.__r_.__value_.__r.__words[2] = v126 | 0x8000000000000000;
    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v124;
  }
  else
  {
    memset(&__src, 0, sizeof(__src));
    v124 = &__src;
    *((unsigned char *)&__src.__r_.__value_.__s + 23) = v122 + 14;
    if (!v122) {
      goto LABEL_239;
    }
  }
  if (v121 >= 0) {
    v127 = v210;
  }
  else {
    v127 = *v210;
  }
  memmove(v124, v127, v122);
LABEL_239:
  strcpy((char *)v124 + v122, "/program.nitro");
  std::ifstream::basic_ifstream((uint64_t *)&v230);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__src.__r_.__value_.__l.__data_);
  }
  __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v230;
  *(_OWORD *)&__src.__r_.__value_.__r.__words[1] = 0uLL;
  *(void *)&long long v225 = 0;
  if (*(_DWORD *)((char *)v233 + *(void *)(v230 - 24))) {
    nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_1::operator()();
  }
  v221.__r_.__value_.__r.__words[0] = 0;
  v221.__r_.__value_.__s.__data_[8] = 0;
  nitro::archive_detail::deserialize_hard_or_soft_fail<nitro::iarchive,nitro::flexible_type>::exec((uint64_t)&__src, (uint64_t)&v221);
  v220.__r_.__value_.__r.__words[0] = 0;
  v220.__r_.__value_.__s.__data_[8] = 0;
  v219.__r_.__value_.__r.__words[0] = 0;
  v219.__r_.__value_.__s.__data_[8] = 0;
  v217 = 0;
  char v218 = 0;
  nitro::archive_detail::deserialize_hard_or_soft_fail<nitro::iarchive,nitro::flexible_type>::exec((uint64_t)&__src, (uint64_t)&v220);
  nitro::archive_detail::deserialize_hard_or_soft_fail<nitro::iarchive,nitro::flexible_type>::exec((uint64_t)&__src, (uint64_t)&v219);
  nitro::archive_detail::deserialize_hard_or_soft_fail<nitro::iarchive,nitro::flexible_type>::exec((uint64_t)&__src, (uint64_t)&v217);
  nitro::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::get((unsigned __int8 *)&v220, (uint64_t)__p);
  v128 = a1 + 10;
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)(a1 + 9), (char *)a1[10]);
  v129 = (char *)__p[1];
  a1[9] = (uint64_t)__p[0];
  a1[10] = (uint64_t)v129;
  int64_t v130 = v214;
  a1[11] = v214;
  if (v130)
  {
    *((void *)v129 + 2) = v128;
    __p[0] = &__p[1];
    __p[1] = 0;
    int64_t v214 = 0;
    v129 = 0;
  }
  else
  {
    a1[9] = (uint64_t)v128;
  }
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)__p, v129);
  nitro::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::get((unsigned __int8 *)&v219, (uint64_t)__p);
  v131 = a1 + 13;
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)(a1 + 12), (char *)a1[13]);
  v132 = (char *)__p[1];
  a1[12] = (uint64_t)__p[0];
  a1[13] = (uint64_t)v132;
  int64_t v133 = v214;
  a1[14] = v214;
  if (v133)
  {
    *((void *)v132 + 2) = v131;
    __p[0] = &__p[1];
    __p[1] = 0;
    int64_t v214 = 0;
    v132 = 0;
  }
  else
  {
    a1[12] = (uint64_t)v131;
  }
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)__p, v132);
  nitro::flexible_type_converter<std::map<std::string,nitro::flexible_type>>::get((unsigned __int8 *)&v217, (uint64_t **)__p);
  v134 = a1 + 16;
  std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::destroy((uint64_t)(a1 + 15), (void *)a1[16]);
  v135 = __p[1];
  a1[15] = (uint64_t)__p[0];
  a1[16] = (uint64_t)v135;
  int64_t v136 = v214;
  a1[17] = v214;
  if (v136)
  {
    v135[2] = v134;
    __p[0] = &__p[1];
    __p[1] = 0;
    int64_t v214 = 0;
    v135 = 0;
  }
  else
  {
    a1[15] = (uint64_t)v134;
  }
  std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::destroy((uint64_t)__p, v135);
  switch(v218)
  {
    case 2:
      if (atomic_fetch_add(v217, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        v137 = v217;
        if (v217)
        {
          if (*((char *)v217 + 31) < 0) {
            operator delete((void *)v217[1]);
          }
          v138 = v137;
          uint64_t v139 = 0x1012C404EF22A49;
          goto LABEL_288;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v217, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        v144 = v217;
        if (v217)
        {
          v145 = (void *)v217[1];
          if (v145)
          {
            v217[2] = (atomic_ullong)v145;
            operator delete(v145);
          }
          v138 = v144;
          uint64_t v139 = 0x1080C409938AC02;
          goto LABEL_288;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v217, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        v140 = v217;
        if (v217)
        {
          atomic_ullong v141 = v217[1];
          if (!v141) {
            goto LABEL_277;
          }
          uint64_t v142 = v217[2];
          v143 = (void *)v217[1];
          if (v142 != v141)
          {
            do
            {
              v142 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v140 + 3), v142);
            }
            while (v142 != v141);
            v143 = (void *)v140[1];
          }
          v140[2] = v141;
          goto LABEL_276;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v217, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        v140 = v217;
        if (v217)
        {
          atomic_ullong v146 = v217[1];
          if (v146)
          {
            uint64_t v147 = v217[2];
            atomic_ullong v148 = v217[1];
            if (v147 != v146)
            {
              do
                uint64_t v147 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v147 - 32);
              while (v147 != v146);
              atomic_ullong v148 = v140[1];
            }
            v140[2] = v146;
            v143 = (void *)v148;
LABEL_276:
            operator delete(v143);
          }
LABEL_277:
          v138 = v140;
          uint64_t v139 = 0x1020C405E66F15BLL;
          goto LABEL_288;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v217, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        v149 = v217;
        if (v217)
        {
          v150 = (void *)v217[7];
          if (v150)
          {
            v217[8] = (atomic_ullong)v150;
            operator delete(v150);
          }
          v151 = (void *)v149[4];
          if (v151)
          {
            v149[5] = (atomic_ullong)v151;
            operator delete(v151);
          }
          v152 = (std::__shared_weak_count *)v149[3];
          if (v152 && !atomic_fetch_add(&v152->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
            std::__shared_weak_count::__release_weak(v152);
          }
          v138 = v149;
          uint64_t v139 = 0x10B0C4002311774;
LABEL_288:
          MEMORY[0x192FF16B0](v138, v139);
        }
      }
      break;
    default:
      break;
  }
  switch(v219.__r_.__value_.__s.__data_[8])
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)v219.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::string::size_type v153 = v219.__r_.__value_.__r.__words[0];
        if (v219.__r_.__value_.__r.__words[0])
        {
          if (*(char *)(v219.__r_.__value_.__r.__words[0] + 31) < 0) {
            operator delete(*(void **)(v219.__r_.__value_.__r.__words[0] + 8));
          }
          v154 = (void *)v153;
          uint64_t v155 = 0x1012C404EF22A49;
          goto LABEL_326;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)v219.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::string::size_type v160 = v219.__r_.__value_.__r.__words[0];
        if (v219.__r_.__value_.__r.__words[0])
        {
          v161 = *(void **)(v219.__r_.__value_.__r.__words[0] + 8);
          if (v161)
          {
            *(void *)(v219.__r_.__value_.__r.__words[0] + 16) = v161;
            operator delete(v161);
          }
          v154 = (void *)v160;
          uint64_t v155 = 0x1080C409938AC02;
          goto LABEL_326;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)v219.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::string::size_type v156 = v219.__r_.__value_.__r.__words[0];
        if (v219.__r_.__value_.__r.__words[0])
        {
          uint64_t v157 = *(void *)(v219.__r_.__value_.__r.__words[0] + 8);
          if (!v157) {
            goto LABEL_315;
          }
          uint64_t v158 = *(void *)(v219.__r_.__value_.__r.__words[0] + 16);
          v159 = *(void **)(v219.__r_.__value_.__r.__words[0] + 8);
          if (v158 != v157)
          {
            do
            {
              v158 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v156 + 24, v158);
            }
            while (v158 != v157);
            v159 = *(void **)(v156 + 8);
          }
          *(void *)(v156 + 16) = v157;
          goto LABEL_314;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)v219.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::string::size_type v156 = v219.__r_.__value_.__r.__words[0];
        if (v219.__r_.__value_.__r.__words[0])
        {
          uint64_t v162 = *(void *)(v219.__r_.__value_.__r.__words[0] + 8);
          if (v162)
          {
            uint64_t v163 = *(void *)(v219.__r_.__value_.__r.__words[0] + 16);
            v164 = *(void **)(v219.__r_.__value_.__r.__words[0] + 8);
            if (v163 != v162)
            {
              do
                uint64_t v163 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v163 - 32);
              while (v163 != v162);
              v164 = *(void **)(v156 + 8);
            }
            *(void *)(v156 + 16) = v162;
            v159 = v164;
LABEL_314:
            operator delete(v159);
          }
LABEL_315:
          v154 = (void *)v156;
          uint64_t v155 = 0x1020C405E66F15BLL;
          goto LABEL_326;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)v219.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        v165 = (void *)v219.__r_.__value_.__r.__words[0];
        if (v219.__r_.__value_.__r.__words[0])
        {
          v166 = *(void **)(v219.__r_.__value_.__r.__words[0] + 56);
          if (v166)
          {
            *(void *)(v219.__r_.__value_.__r.__words[0] + 64) = v166;
            operator delete(v166);
          }
          v167 = (void *)v165[4];
          if (v167)
          {
            v165[5] = v167;
            operator delete(v167);
          }
          v168 = (std::__shared_weak_count *)v165[3];
          if (v168 && !atomic_fetch_add(&v168->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
            std::__shared_weak_count::__release_weak(v168);
          }
          v154 = v165;
          uint64_t v155 = 0x10B0C4002311774;
LABEL_326:
          MEMORY[0x192FF16B0](v154, v155);
        }
      }
      break;
    default:
      break;
  }
  switch(v220.__r_.__value_.__s.__data_[8])
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)v220.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::string::size_type v169 = v220.__r_.__value_.__r.__words[0];
        if (v220.__r_.__value_.__r.__words[0])
        {
          if (*(char *)(v220.__r_.__value_.__r.__words[0] + 31) < 0) {
            operator delete(*(void **)(v220.__r_.__value_.__r.__words[0] + 8));
          }
          v170 = (void *)v169;
          uint64_t v171 = 0x1012C404EF22A49;
          goto LABEL_364;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)v220.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::string::size_type v176 = v220.__r_.__value_.__r.__words[0];
        if (v220.__r_.__value_.__r.__words[0])
        {
          v177 = *(void **)(v220.__r_.__value_.__r.__words[0] + 8);
          if (v177)
          {
            *(void *)(v220.__r_.__value_.__r.__words[0] + 16) = v177;
            operator delete(v177);
          }
          v170 = (void *)v176;
          uint64_t v171 = 0x1080C409938AC02;
          goto LABEL_364;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)v220.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::string::size_type v172 = v220.__r_.__value_.__r.__words[0];
        if (v220.__r_.__value_.__r.__words[0])
        {
          uint64_t v173 = *(void *)(v220.__r_.__value_.__r.__words[0] + 8);
          if (!v173) {
            goto LABEL_353;
          }
          uint64_t v174 = *(void *)(v220.__r_.__value_.__r.__words[0] + 16);
          v175 = *(void **)(v220.__r_.__value_.__r.__words[0] + 8);
          if (v174 != v173)
          {
            do
            {
              v174 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v172 + 24, v174);
            }
            while (v174 != v173);
            v175 = *(void **)(v172 + 8);
          }
          *(void *)(v172 + 16) = v173;
          goto LABEL_352;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)v220.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::string::size_type v172 = v220.__r_.__value_.__r.__words[0];
        if (v220.__r_.__value_.__r.__words[0])
        {
          uint64_t v178 = *(void *)(v220.__r_.__value_.__r.__words[0] + 8);
          if (v178)
          {
            uint64_t v179 = *(void *)(v220.__r_.__value_.__r.__words[0] + 16);
            v180 = *(void **)(v220.__r_.__value_.__r.__words[0] + 8);
            if (v179 != v178)
            {
              do
                uint64_t v179 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v179 - 32);
              while (v179 != v178);
              v180 = *(void **)(v172 + 8);
            }
            *(void *)(v172 + 16) = v178;
            v175 = v180;
LABEL_352:
            operator delete(v175);
          }
LABEL_353:
          v170 = (void *)v172;
          uint64_t v171 = 0x1020C405E66F15BLL;
          goto LABEL_364;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)v220.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        v181 = (void *)v220.__r_.__value_.__r.__words[0];
        if (v220.__r_.__value_.__r.__words[0])
        {
          v182 = *(void **)(v220.__r_.__value_.__r.__words[0] + 56);
          if (v182)
          {
            *(void *)(v220.__r_.__value_.__r.__words[0] + 64) = v182;
            operator delete(v182);
          }
          v183 = (void *)v181[4];
          if (v183)
          {
            v181[5] = v183;
            operator delete(v183);
          }
          v184 = (std::__shared_weak_count *)v181[3];
          if (v184 && !atomic_fetch_add(&v184->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
            std::__shared_weak_count::__release_weak(v184);
          }
          v170 = v181;
          uint64_t v171 = 0x10B0C4002311774;
LABEL_364:
          MEMORY[0x192FF16B0](v170, v171);
        }
      }
      break;
    default:
      break;
  }
  switch(v221.__r_.__value_.__s.__data_[8])
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)v221.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::string::size_type v185 = v221.__r_.__value_.__r.__words[0];
        if (v221.__r_.__value_.__r.__words[0])
        {
          if (*(char *)(v221.__r_.__value_.__r.__words[0] + 31) < 0) {
            operator delete(*(void **)(v221.__r_.__value_.__r.__words[0] + 8));
          }
          v186 = (void *)v185;
          uint64_t v187 = 0x1012C404EF22A49;
          goto LABEL_402;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)v221.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::string::size_type v192 = v221.__r_.__value_.__r.__words[0];
        if (v221.__r_.__value_.__r.__words[0])
        {
          v193 = *(void **)(v221.__r_.__value_.__r.__words[0] + 8);
          if (v193)
          {
            *(void *)(v221.__r_.__value_.__r.__words[0] + 16) = v193;
            operator delete(v193);
          }
          v186 = (void *)v192;
          uint64_t v187 = 0x1080C409938AC02;
          goto LABEL_402;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)v221.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::string::size_type v188 = v221.__r_.__value_.__r.__words[0];
        if (v221.__r_.__value_.__r.__words[0])
        {
          uint64_t v189 = *(void *)(v221.__r_.__value_.__r.__words[0] + 8);
          if (!v189) {
            goto LABEL_391;
          }
          uint64_t v190 = *(void *)(v221.__r_.__value_.__r.__words[0] + 16);
          v191 = *(void **)(v221.__r_.__value_.__r.__words[0] + 8);
          if (v190 != v189)
          {
            do
            {
              v190 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v188 + 24, v190);
            }
            while (v190 != v189);
            v191 = *(void **)(v188 + 8);
          }
          *(void *)(v188 + 16) = v189;
          goto LABEL_390;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)v221.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::string::size_type v188 = v221.__r_.__value_.__r.__words[0];
        if (v221.__r_.__value_.__r.__words[0])
        {
          uint64_t v194 = *(void *)(v221.__r_.__value_.__r.__words[0] + 8);
          if (v194)
          {
            uint64_t v195 = *(void *)(v221.__r_.__value_.__r.__words[0] + 16);
            v196 = *(void **)(v221.__r_.__value_.__r.__words[0] + 8);
            if (v195 != v194)
            {
              do
                uint64_t v195 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v195 - 32);
              while (v195 != v194);
              v196 = *(void **)(v188 + 8);
            }
            *(void *)(v188 + 16) = v194;
            v191 = v196;
LABEL_390:
            operator delete(v191);
          }
LABEL_391:
          v186 = (void *)v188;
          uint64_t v187 = 0x1020C405E66F15BLL;
          goto LABEL_402;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)v221.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        v197 = (void *)v221.__r_.__value_.__r.__words[0];
        if (v221.__r_.__value_.__r.__words[0])
        {
          v198 = *(void **)(v221.__r_.__value_.__r.__words[0] + 56);
          if (v198)
          {
            *(void *)(v221.__r_.__value_.__r.__words[0] + 64) = v198;
            operator delete(v198);
          }
          v199 = (void *)v197[4];
          if (v199)
          {
            v197[5] = v199;
            operator delete(v199);
          }
          v200 = (std::__shared_weak_count *)v197[3];
          if (v200 && !atomic_fetch_add(&v200->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
            std::__shared_weak_count::__release_weak(v200);
          }
          v186 = v197;
          uint64_t v187 = 0x10B0C4002311774;
LABEL_402:
          MEMORY[0x192FF16B0](v186, v187);
        }
      }
      break;
    default:
      break;
  }
  *(void *)&long long v230 = v208;
  *(void *)((char *)&v230 + *(void *)(v208 - 24)) = v209;
  MEMORY[0x192FF1040](&v231);
  std::istream::~istream();
  MEMORY[0x192FF15B0](v239);
  nitro::nitro_builtins::register_builtins((uint64_t)(a1 + 18));
  v201 = (uint64_t *)a1[2];
  long long v230 = 0uLL;
  unint64_t v231 = 0;
  nitro::nitro_class::make_instance(v201, (uint64_t *)&v230, (nitro::nitro_instance **)&__src);
  long long v202 = *(_OWORD *)&__src.__r_.__value_.__l.__data_;
  *(_OWORD *)&__src.__r_.__value_.__l.__data_ = 0uLL;
  v203 = (std::__shared_weak_count *)a1[5];
  *((_OWORD *)a1 + 2) = v202;
  if (v203 && !atomic_fetch_add(&v203->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
    std::__shared_weak_count::__release_weak(v203);
  }
  v204 = (std::__shared_weak_count *)__src.__r_.__value_.__l.__size_;
  if (__src.__r_.__value_.__l.__size_
    && !atomic_fetch_add((atomic_ullong *volatile)(__src.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
    std::__shared_weak_count::__release_weak(v204);
  }
  uint64_t v205 = v230;
  if ((void)v230)
  {
    uint64_t v206 = *((void *)&v230 + 1);
    v207 = (void *)v230;
    if (*((void *)&v230 + 1) != (void)v230)
    {
      do
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v206 - 32));
      while (v206 != v205);
      v207 = (void *)v230;
    }
    *((void *)&v230 + 1) = v205;
    operator delete(v207);
  }
  *((unsigned char *)&__src.__r_.__value_.__s + 23) = 3;
  LODWORD(__src.__r_.__value_.__l.__data_) = 4802118;
  *(void *)&long long v230 = &unk_1EE379D58;
  *((void *)&v230 + 1) = a1;
  v232 = (char **)&v230;
  nitro::nitro_execution_context::register_builtin((uint64_t)(a1 + 18), &__src, &v230);
  if (v232 == (char **)&v230)
  {
    (*(void (**)(long long *))(v230 + 32))(&v230);
    if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_418;
    }
  }
  else
  {
    if (v232) {
      (*((void (**)(void))*v232 + 5))();
    }
    if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_418:
      if ((SHIBYTE(v223) & 0x80000000) == 0) {
        goto LABEL_419;
      }
      goto LABEL_423;
    }
  }
  operator delete(__src.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v223) & 0x80000000) == 0)
  {
LABEL_419:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_424:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
LABEL_423:
  operator delete((void *)v222);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_424;
  }
}

void sub_192521568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a45 < 0) {
    operator delete(*(void **)(v45 + 64));
  }
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", 106);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"fin.good()", 10);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", "operator()", 55, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      long long v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        int v9 = __p;
      }
      else {
        int v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", "operator()", 55, 1);
    std::stringbuf::str();
    uint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  long long v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1925220A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

uint64_t nitro::SExp::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (long long *)(a2 + 8);
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v5 = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)v5);
  }
  long long v6 = *v4;
  *(void *)(v5 + 16) = *((void *)v4 + 2);
  *(_OWORD *)uint64_t v5 = v6;
  *(unsigned char *)(a2 + 31) = 0;
  *(unsigned char *)(a2 + 8) = 0;
  if (a2 != a1)
  {
    uint64_t v7 = (atomic_ullong *volatile *)(a1 + 32);
    switch(*(unsigned char *)(a1 + 40))
    {
      case 2:
        if (atomic_fetch_add(*v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v8 = *v7;
          if (!*v7) {
            goto LABEL_42;
          }
          if (*((char *)v8 + 31) < 0) {
            operator delete((void *)v8[1]);
          }
          atomic_ullong *volatile v9 = v8;
          uint64_t v10 = 0x1012C404EF22A49;
          goto LABEL_41;
        }
        break;
      case 3:
        if (atomic_fetch_add(*v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v11 = *v7;
          if (!*v7) {
            goto LABEL_42;
          }
          unint64_t v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = (atomic_ullong)v12;
            operator delete(v12);
          }
          atomic_ullong *volatile v9 = v11;
          uint64_t v10 = 0x1080C409938AC02;
          goto LABEL_41;
        }
        break;
      case 4:
        if (atomic_fetch_add(*v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v13 = *v7;
          if (!*v7) {
            goto LABEL_42;
          }
          atomic_ullong v14 = v13[1];
          if (v14)
          {
            uint64_t v15 = v13[2];
            uint64_t v16 = (void *)v13[1];
            if (v15 != v14)
            {
              do
              {
                v15 -= 16;
                std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v13 + 3), v15);
              }
              while (v15 != v14);
              uint64_t v16 = (void *)v13[1];
            }
            v13[2] = v14;
            goto LABEL_29;
          }
          goto LABEL_30;
        }
        break;
      case 5:
        if (atomic_fetch_add(*v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v13 = *v7;
          if (!*v7) {
            goto LABEL_42;
          }
          atomic_ullong v17 = v13[1];
          if (v17)
          {
            uint64_t v18 = v13[2];
            char v19 = (void *)v13[1];
            if (v18 != v17)
            {
              do
                uint64_t v18 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v18 - 32);
              while (v18 != v17);
              char v19 = (void *)v13[1];
            }
            v13[2] = v17;
            uint64_t v16 = v19;
LABEL_29:
            operator delete(v16);
          }
LABEL_30:
          atomic_ullong *volatile v9 = v13;
          uint64_t v10 = 0x1020C405E66F15BLL;
          goto LABEL_41;
        }
        break;
      case 9:
        if (atomic_fetch_add(*v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v20 = *v7;
          if (*v7)
          {
            unsigned __int8 v21 = (void *)v20[7];
            if (v21)
            {
              v20[8] = (atomic_ullong)v21;
              operator delete(v21);
            }
            uint64_t v22 = (void *)v20[4];
            if (v22)
            {
              v20[5] = (atomic_ullong)v22;
              operator delete(v22);
            }
            uint64_t v23 = (std::__shared_weak_count *)v20[3];
            if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
            atomic_ullong *volatile v9 = v20;
            uint64_t v10 = 0x10B0C4002311774;
LABEL_41:
            MEMORY[0x192FF16B0](v9, v10);
          }
LABEL_42:
          *uint64_t v7 = 0;
        }
        break;
      default:
        break;
    }
    unsigned __int8 v24 = *(atomic_ullong **)(a2 + 32);
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
    *uint64_t v7 = v24;
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
    *(unsigned char *)(a2 + 40) = 0;
  }
  size_t v25 = (void **)(a1 + 48);
  uint64_t v26 = *(void *)(a1 + 48);
  if (v26)
  {
    uint64_t v27 = *(void *)(a1 + 56);
    uint64_t v28 = *(void **)(a1 + 48);
    if (v27 != v26)
    {
      do
        nitro::SExp::~SExp((nitro::SExp *)(v27 - 72));
      while (v27 != v26);
      uint64_t v28 = *v25;
    }
    *(void *)(a1 + 56) = v26;
    operator delete(v28);
    *size_t v25 = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  return a1;
}

uint64_t std::pair<std::string const,std::shared_ptr<Espresso::net>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_4;
  }
  if (*(char *)(a1 + 23) < 0) {
LABEL_4:
  }
    operator delete(*(void **)a1);
  return a1;
}

void nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", 106);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"fin.good()", 10);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", "operator()", 120, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      atomic_ullong *volatile v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        atomic_ullong *volatile v9 = __p;
      }
      else {
        atomic_ullong *volatile v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    atomic_ullong *volatile v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", "operator()", 120, 1);
    std::stringbuf::str();
    atomic_ullong *volatile v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      atomic_ullong v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    atomic_ullong v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  uint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1925227F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void **std::vector<nitro::nitro_variable>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v3 - 32));
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t nitro::nitro_execution_context::register_builtin(uint64_t a1, const std::string *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unint64_t symbol_id = nitro::get_symbol_id(a2);
  unint64_t v6 = symbol_id;
  atomic_ullong *volatile v8 = (uint64_t **)(a1 + 80);
  uint64_t v7 = *(uint64_t **)(a1 + 80);
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        atomic_ullong *volatile v9 = (uint64_t **)v7;
        unint64_t v10 = v7[4];
        if (symbol_id >= v10) {
          break;
        }
        uint64_t v7 = *v9;
        atomic_ullong *volatile v8 = v9;
        if (!*v9) {
          goto LABEL_8;
        }
      }
      if (v10 >= symbol_id) {
        break;
      }
      uint64_t v7 = v9[1];
      if (!v7)
      {
        atomic_ullong *volatile v8 = v9 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    atomic_ullong *volatile v9 = (uint64_t **)(a1 + 80);
LABEL_8:
    atomic_ullong *volatile v11 = (uint64_t *)v9;
    atomic_ullong *volatile v9 = (uint64_t **)operator new(0x48uLL);
    v9[4] = (uint64_t *)v6;
    v9[8] = 0;
    void *v9 = 0;
    v9[1] = 0;
    v9[2] = v11;
    void *v8 = (uint64_t *)v9;
    uint64_t v12 = **(void **)(a1 + 72);
    atomic_ullong *volatile v13 = (uint64_t *)v9;
    if (v12)
    {
      *(void *)(a1 + 72) = v12;
      atomic_ullong *volatile v13 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 80), v13);
    ++*(void *)(a1 + 88);
  }
  atomic_ullong v14 = (void *)a3[3];
  if (v14)
  {
    if (v14 == a3)
    {
      atomic_ullong v17 = v16;
      (*(void (**)(void *, void *))(*a3 + 24))(a3, v16);
    }
    else
    {
      atomic_ullong v17 = (void *)(*(uint64_t (**)(void *))(*v14 + 16))(v14);
    }
  }
  else
  {
    atomic_ullong v17 = 0;
  }
  std::__function::__value_func<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::swap[abi:ne180100](v16, v9 + 5);
  uint64_t result = (uint64_t)v17;
  if (v17 == v16) {
    return (*(uint64_t (**)(void *))(v16[0] + 32))(v16);
  }
  if (v17) {
    return (*(uint64_t (**)(void))(*v17 + 40))();
  }
  return result;
}

void *std::function<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void nitro::nitro_program::run(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v142 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(uint64_t ***)(a1 + 80);
  if (!v4) {
LABEL_168:
  }
    nitro::nitro_program::run(std::string,std::map<std::string,nitro::flexible_type> const&)::$_0::operator()();
  unint64_t v6 = (uint64_t **)(a1 + 72);
  int v7 = *((char *)a2 + 23);
  if (v7 >= 0) {
    size_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v8 = (size_t)a2[1];
  }
  if (v7 >= 0) {
    atomic_ullong *volatile v9 = a2;
  }
  else {
    atomic_ullong *volatile v9 = *a2;
  }
  while (1)
  {
    int v10 = *((char *)v4 + 55);
    if (v10 >= 0) {
      size_t v11 = *((unsigned __int8 *)v4 + 55);
    }
    else {
      size_t v11 = (size_t)v4[5];
    }
    if (v10 >= 0) {
      uint64_t v12 = (uint64_t *)(v4 + 4);
    }
    else {
      uint64_t v12 = v4[4];
    }
    if (v11 >= v8) {
      size_t v13 = v8;
    }
    else {
      size_t v13 = v11;
    }
    int v14 = memcmp(v9, v12, v13);
    BOOL v15 = v8 < v11;
    if (v14) {
      BOOL v15 = v14 < 0;
    }
    if (v15) {
      goto LABEL_9;
    }
    int v16 = memcmp(v12, v9, v13);
    BOOL v17 = v11 < v8;
    if (v16) {
      BOOL v17 = v16 < 0;
    }
    if (!v17) {
      break;
    }
    ++v4;
LABEL_9:
    uint64_t v4 = (uint64_t **)*v4;
    if (!v4) {
      goto LABEL_168;
    }
  }
  uint64_t v122 = a1;
  v134 = 0;
  v135 = 0;
  unint64_t v136 = 0;
  *(void *)&long long v139 = a2;
  uint64_t v18 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (long long **)&v139);
  char v19 = v18[7];
  atomic_ullong *volatile v20 = v18[8];
  if (v19 != v20)
  {
    v120 = (uint64_t **)(a1 + 120);
    do
    {
      if (*((char *)v19 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v133, (const std::string::value_type *)*v19, v19[1]);
      }
      else
      {
        long long v21 = *(_OWORD *)v19;
        v133.__r_.__value_.__r.__words[2] = v19[2];
        *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v21;
      }
      uint64_t v22 = *(uint64_t ***)(a3 + 8);
      if (v22)
      {
        if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v133.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v133.__r_.__value_.__l.__size_;
        }
        if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unsigned __int8 v24 = &v133;
        }
        else {
          unsigned __int8 v24 = (std::string *)v133.__r_.__value_.__r.__words[0];
        }
        do
        {
          int v25 = *((char *)v22 + 55);
          if (v25 >= 0) {
            size_t v26 = *((unsigned __int8 *)v22 + 55);
          }
          else {
            size_t v26 = (size_t)v22[5];
          }
          if (v25 >= 0) {
            uint64_t v27 = (uint64_t *)(v22 + 4);
          }
          else {
            uint64_t v27 = v22[4];
          }
          if (v26 >= size) {
            size_t v28 = size;
          }
          else {
            size_t v28 = v26;
          }
          int v29 = memcmp(v24, v27, v28);
          BOOL v30 = size < v26;
          if (v29) {
            BOOL v30 = v29 < 0;
          }
          if (!v30)
          {
            int v31 = memcmp(v27, v24, v28);
            BOOL v32 = v26 < size;
            if (v31) {
              BOOL v32 = v31 < 0;
            }
            if (!v32)
            {
              uint64_t v33 = std::map<std::string,nitro::flexible_type>::at(a3, (const void **)&v133.__r_.__value_.__l.__data_);
              long long v139 = 0uLL;
              LOBYTE(v141) = 0;
              v140 = 0;
              if (&v140 != (atomic_ullong **)v33)
              {
                size_t v34 = (atomic_ullong *)*v33;
                LOBYTE(v141) = *((unsigned char *)v33 + 8);
                v140 = v34;
                LOBYTE(v141) = *((unsigned char *)v33 + 8);
                if (v141 - 2 < 4 || v141 == 9) {
                  atomic_fetch_add(v140, 1uLL);
                }
              }
              unint64_t v35 = v135;
              if ((unint64_t)v135 < v136) {
                goto LABEL_90;
              }
              goto LABEL_91;
            }
            ++v22;
          }
          uint64_t v22 = (uint64_t **)*v22;
        }
        while (v22);
      }
      uint64_t v36 = *(uint64_t ***)(v122 + 128);
      if (!v36)
      {
LABEL_161:
        if (*((int *)global_logger() + 169) <= 6)
        {
          v87 = (file_logger *)global_logger();
          started = file_logger::start_stream(v87, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", "run", 234, 1);
          uint64_t v89 = pthread_getspecific(*((void *)started + 74));
          if (v89 && *((unsigned char *)v89 + 280)) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89 + 2, (uint64_t)"Argument ", 9);
          }
          if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v132, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
          }
          else {
            std::string v132 = v133;
          }
          int v90 = (char *)pthread_getspecific(*((void *)started + 74));
          if (v90 && v90[280])
          {
            size_t v91 = v90 + 16;
            if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v92 = &v132;
            }
            else {
              unint64_t v92 = (std::string *)v132.__r_.__value_.__r.__words[0];
            }
            if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v93 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v93 = v132.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)v92, v93);
          }
          uint64_t v94 = pthread_getspecific(*((void *)started + 74));
          if (v94 && *((unsigned char *)v94 + 280)) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94 + 2, (uint64_t)" not provided", 13);
          }
          uint64_t v95 = pthread_getspecific(*((void *)started + 74));
          if (v95)
          {
            if (*((unsigned char *)v95 + 280))
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95 + 2, (uint64_t)"\n", 1);
              file_logger::stream_flush(started);
              if (*((_DWORD *)started + 150) == 7)
              {
                __print_back_trace();
                exception = __cxa_allocate_exception(8uLL);
                void *exception = "LOG_FATAL encountered";
                __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
              }
            }
          }
          if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v132.__r_.__value_.__l.__data_);
          }
        }
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v139);
        v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v139, (uint64_t)"Check failed (", 14);
        char v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", 106);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)":", 1);
        std::string::size_type v98 = (void *)std::ostream::operator<<();
        v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"): ", 3);
        long long v100 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"false", 5);
        std::ios_base::getloc((const std::ios_base *)((char *)v100 + *(void *)(*v100 - 24)));
        v101 = std::locale::use_facet(&v126, MEMORY[0x1E4FBA258]);
        ((void (*)(const std::locale::facet *, uint64_t))v101->__vftable[2].~facet_0)(v101, 10);
        std::locale::~locale(&v126);
        std::ostream::put();
        std::ostream::flush();
        if (*((int *)global_logger() + 169) <= 6)
        {
          long long v102 = (file_logger *)global_logger();
          v103 = file_logger::start_stream(v102, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", "operator()", 235, 1);
          std::stringbuf::str();
          int v104 = (char *)pthread_getspecific(*((void *)v103 + 74));
          if (v104 && v104[280])
          {
            size_t v105 = v104 + 16;
            if (v138 >= 0) {
              unint64_t v106 = v137;
            }
            else {
              unint64_t v106 = (void **)v137[0];
            }
            if (v138 >= 0) {
              uint64_t v107 = HIBYTE(v138);
            }
            else {
              uint64_t v107 = (uint64_t)v137[1];
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)v106, v107);
          }
          if (SHIBYTE(v138) < 0) {
            operator delete(v137[0]);
          }
        }
        __print_back_trace();
        if (*((int *)global_logger() + 169) <= 6)
        {
          v108 = (file_logger *)global_logger();
          uint64_t v109 = file_logger::start_stream(v108, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", "operator()", 235, 1);
          std::stringbuf::str();
          uint64_t v110 = (char *)pthread_getspecific(*((void *)v109 + 74));
          if (v110 && v110[280])
          {
            v111 = v110 + 16;
            if ((v128 & 0x80u) == 0) {
              locale = &v126;
            }
            else {
              locale = v126.__locale_;
            }
            if ((v128 & 0x80u) == 0) {
              uint64_t v113 = v128;
            }
            else {
              uint64_t v113 = (uint64_t)v127;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)locale, v113);
          }
          v114 = pthread_getspecific(*((void *)v109 + 74));
          if (v114)
          {
            if (*((unsigned char *)v114 + 280))
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114 + 2, (uint64_t)"\n", 1);
              file_logger::stream_flush(v109);
              if (*((_DWORD *)v109 + 150) == 7)
              {
                __print_back_trace();
                long long v117 = __cxa_allocate_exception(8uLL);
                *long long v117 = "LOG_FATAL encountered";
                __cxa_throw(v117, MEMORY[0x1E4FBA308], 0);
              }
            }
          }
          if ((char)v128 < 0) {
            operator delete(v126.__locale_);
          }
        }
        long long v115 = __cxa_allocate_exception(0x18uLL);
        std::stringbuf::str();
      }
      if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v37 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v37 = v133.__r_.__value_.__l.__size_;
      }
      if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v38 = &v133;
      }
      else {
        uint64_t v38 = (std::string *)v133.__r_.__value_.__r.__words[0];
      }
      while (1)
      {
        int v39 = *((char *)v36 + 55);
        if (v39 >= 0) {
          size_t v40 = *((unsigned __int8 *)v36 + 55);
        }
        else {
          size_t v40 = (size_t)v36[5];
        }
        if (v39 >= 0) {
          size_t v41 = (uint64_t *)(v36 + 4);
        }
        else {
          size_t v41 = v36[4];
        }
        if (v40 >= v37) {
          size_t v42 = v37;
        }
        else {
          size_t v42 = v40;
        }
        int v43 = memcmp(v38, v41, v42);
        BOOL v44 = v37 < v40;
        if (v43) {
          BOOL v44 = v43 < 0;
        }
        if (v44) {
          goto LABEL_68;
        }
        int v45 = memcmp(v41, v38, v42);
        BOOL v46 = v40 < v37;
        if (v45) {
          BOOL v46 = v45 < 0;
        }
        if (!v46) {
          break;
        }
        ++v36;
LABEL_68:
        uint64_t v36 = (uint64_t **)*v36;
        if (!v36) {
          goto LABEL_161;
        }
      }
      v126.__locale_ = (std::locale::__imp *)&v133;
      long long v47 = std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v120, (const void **)&v133.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v126);
      v140 = 0;
      long long v139 = 0uLL;
      LOBYTE(v141) = 0;
      if (&v140 != v47 + 7)
      {
        v140 = v47[7];
        LOBYTE(v141) = *((unsigned char *)v47 + 64);
        if (v141 - 2 < 4 || v141 == 9) {
          atomic_fetch_add(v140, 1uLL);
        }
      }
      unint64_t v35 = v135;
      if ((unint64_t)v135 < v136)
      {
LABEL_90:
        *(_OWORD *)unint64_t v35 = v139;
        long long v139 = 0uLL;
        *((void *)v35 + 2) = 0;
        v35[24] = 0;
        char v48 = (char)v141;
        *((void *)v35 + 2) = v140;
        v35[24] = v48;
        v35[24] = (char)v141;
        LOBYTE(v141) = 0;
        BOOL v49 = v35 + 32;
        goto LABEL_92;
      }
LABEL_91:
      BOOL v49 = std::vector<nitro::nitro_variable>::__push_back_slow_path<nitro::nitro_variable>(&v134, (uint64_t)&v139);
LABEL_92:
      v135 = v49;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v139);
      if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v133.__r_.__value_.__l.__data_);
      }
      v19 += 3;
    }
    while (v19 != v20);
  }
  nitro::nitro_instance::get_member_function(*(nitro::nitro_instance **)(v122 + 32), (const std::string *)a2, (nitro::nitro_function *)&v126);
  nitro::nitro_function::run((uint64_t *)&v126, (uint64_t *)&v134, (unint64_t *)(v122 + 144), (uint64_t)v137);
  if (v137[0])
  {
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)a4 = a4 + 8;
  }
  else
  {
    uint64_t v58 = v138;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)a4 = a4 + 8;
    v133.__r_.__value_.__r.__words[0] = (uint64_t)(*(void *)(v58 + 16) - *(void *)(v58 + 8)) >> 4;
    std::string::size_type v59 = v133.__r_.__value_.__r.__words[0];
    int v60 = (uint64_t **)(v122 + 96);
    *(void *)&long long v139 = a2;
    unint64_t v61 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v122 + 96), a2, (uint64_t)&std::piecewise_construct, (long long **)&v139);
    unint64_t v125 = 0xAAAAAAAAAAAAAAABLL * (v61[8] - v61[7]);
    if (v59 != v125)
    {
      *(void *)&long long v139 = &v133;
      *((void *)&v139 + 1) = &v125;
      nitro::nitro_program::run(std::string,std::map<std::string,nitro::flexible_type> const&)::$_2::operator()();
    }
    uint64_t v62 = *(void *)(v58 + 8);
    if (*(void *)(v58 + 16) != v62)
    {
      unint64_t v63 = 0;
      unint64_t v123 = (uint64_t **)(v122 + 96);
      do
      {
        int v64 = (uint64_t **)(v62 + 16 * v63);
        if (*((unsigned char *)v64 + 8) == 9)
        {
          nitro::ndarray_container::canonicalize((nitro::ndarray_container *)(*v64 + 1), (uint64_t)&v139);
          operator new();
        }
        *(void *)&long long v139 = a2;
        *(void *)&long long v139 = &std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v60, a2, (uint64_t)&std::piecewise_construct, (long long **)&v139)[7][3 * v63];
        long long v65 = std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a4, (const void **)v139, (uint64_t)&std::piecewise_construct, (long long **)&v139);
        long long v66 = v65;
        uint64_t v67 = v65 + 7;
        if (v64 != v65 + 7)
        {
          switch(*((unsigned char *)v65 + 64))
          {
            case 2:
              if (atomic_fetch_add(*v67, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v68 = *v67;
                if (*v67)
                {
                  if (*((char *)v68 + 31) < 0) {
                    operator delete((void *)v68[1]);
                  }
                  MEMORY[0x192FF16B0](v68, 0x1012C404EF22A49);
                }
                goto LABEL_158;
              }
              break;
            case 3:
              if (atomic_fetch_add(*v67, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v74 = *v67;
                if (*v67)
                {
                  size_t v75 = (void *)v74[1];
                  if (v75)
                  {
                    v74[2] = (atomic_ullong)v75;
                    operator delete(v75);
                  }
                  MEMORY[0x192FF16B0](v74, 0x1080C409938AC02);
                }
                goto LABEL_158;
              }
              break;
            case 4:
              if (atomic_fetch_add(*v67, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v69 = *v67;
                if (*v67)
                {
                  atomic_ullong v70 = v69[1];
                  if (v70)
                  {
                    uint64_t v71 = v69[2];
                    long long v72 = (void *)v69[1];
                    atomic_ullong *volatile v121 = *v67;
                    if (v71 != v70)
                    {
                      uint64_t v73 = (uint64_t)(v69 + 3);
                      do
                      {
                        v71 -= 16;
                        std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v73, v71);
                      }
                      while (v71 != v70);
                      atomic_ullong *volatile v69 = v121;
                      int v60 = v123;
                      long long v72 = (void *)v121[1];
                    }
                    v69[2] = v70;
                    operator delete(v72);
                    atomic_ullong *volatile v69 = v121;
                  }
                  MEMORY[0x192FF16B0](v69, 0x1020C405E66F15BLL);
                }
                goto LABEL_158;
              }
              break;
            case 5:
              if (atomic_fetch_add(*v67, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v76 = *v67;
                if (!*v67) {
                  goto LABEL_158;
                }
                atomic_ullong v77 = v76[1];
                if (v77)
                {
                  uint64_t v78 = v76[2];
                  uint64_t v79 = (void *)v76[1];
                  if (v78 != v77)
                  {
                    do
                      uint64_t v78 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v78 - 32);
                    while (v78 != v77);
                    uint64_t v79 = (void *)v76[1];
                  }
                  v76[2] = v77;
                  operator delete(v79);
                }
                atomic_ullong *volatile v80 = v76;
                uint64_t v81 = 0x1020C405E66F15BLL;
                goto LABEL_157;
              }
              break;
            case 9:
              if (atomic_fetch_add(*v67, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v82 = *v67;
                if (*v67)
                {
                  BOOL v83 = (void *)v82[7];
                  if (v83)
                  {
                    v82[8] = (atomic_ullong)v83;
                    operator delete(v83);
                  }
                  std::string::size_type v84 = (void *)v82[4];
                  if (v84)
                  {
                    v82[5] = (atomic_ullong)v84;
                    operator delete(v84);
                  }
                  uint64_t v85 = (std::__shared_weak_count *)v82[3];
                  if (v85 && !atomic_fetch_add(&v85->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                    std::__shared_weak_count::__release_weak(v85);
                  }
                  atomic_ullong *volatile v80 = v82;
                  uint64_t v81 = 0x10B0C4002311774;
LABEL_157:
                  MEMORY[0x192FF16B0](v80, v81);
                }
LABEL_158:
                *uint64_t v67 = 0;
              }
              break;
            default:
              break;
          }
          size_t v86 = *v64;
          *((unsigned char *)v67 + 8) = *((unsigned char *)v64 + 8);
          *uint64_t v67 = v86;
          LODWORD(v86) = *((unsigned __int8 *)v64 + 8);
          *((unsigned char *)v66 + 64) = (_BYTE)v86;
          switch((int)v86)
          {
            case 2:
            case 3:
            case 4:
            case 5:
            case 9:
              atomic_fetch_add(*v67, 1uLL);
              break;
            default:
              break;
          }
        }
        ++v63;
        uint64_t v62 = *(void *)(v58 + 8);
      }
      while (v63 < (*(void *)(v58 + 16) - v62) >> 4);
    }
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v137);
  long long v50 = v131;
  if (v131)
  {
    do
    {
      unint64_t v51 = (void *)*v50;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v50 + 3));
      operator delete(v50);
      long long v50 = v51;
    }
    while (v51);
  }
  uint64_t v52 = __p;
  std::string __p = 0;
  if (v52) {
    operator delete(v52);
  }
  int v53 = v129;
  if (v129 && !atomic_fetch_add(&v129->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
  }
  size_t v54 = v127;
  if (v127 && !atomic_fetch_add(&v127->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v54);
  }
  unint64_t v55 = (char *)v134;
  if (v134)
  {
    int v56 = v135;
    uint64_t v57 = v134;
    if (v135 != v134)
    {
      do
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v56 - 32));
      while (v56 != v55);
      uint64_t v57 = v134;
    }
    v135 = v55;
    operator delete(v57);
  }
}

void sub_192523D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,uint64_t a63)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  a47 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a47 + *(void *)(a47 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a48 = MEMORY[0x1E4FBA470] + 16;
  if (a61 < 0) {
    operator delete(a56);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a64);
  if (a37 < 0) {
    operator delete(a32);
  }
  std::vector<nitro::nitro_variable>::~vector[abi:ne180100](&a39);
  _Unwind_Resume(a1);
}

void nitro::nitro_program::run(std::string,std::map<std::string,nitro::flexible_type> const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", 106);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_inputs.count(function)", 24);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", "operator()", 224, 1);
    std::stringbuf::str();
    int v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      size_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        atomic_ullong *volatile v9 = __p;
      }
      else {
        atomic_ullong *volatile v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", "operator()", 224, 1);
    std::stringbuf::str();
    size_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      int v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        BOOL v15 = v23;
      }
      else {
        BOOL v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    BOOL v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  uint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192524280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,nitro::flexible_type>::at(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(uint64_t ***)(a1 + 8);
  if (!v2) {
LABEL_25:
  }
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  int v3 = *((char *)a2 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v4 = (size_t)a2[1];
  }
  if (v3 >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *a2;
  }
  while (1)
  {
    while (1)
    {
      int v6 = *((char *)v2 + 55);
      if (v6 >= 0) {
        size_t v7 = *((unsigned __int8 *)v2 + 55);
      }
      else {
        size_t v7 = (size_t)v2[5];
      }
      if (v6 >= 0) {
        size_t v8 = (uint64_t *)(v2 + 4);
      }
      else {
        size_t v8 = v2[4];
      }
      if (v7 >= v4) {
        size_t v9 = v4;
      }
      else {
        size_t v9 = v7;
      }
      int v10 = memcmp(v5, v8, v9);
      BOOL v11 = v4 < v7;
      if (v10) {
        BOOL v11 = v10 < 0;
      }
      if (!v11) {
        break;
      }
      uint64_t v2 = (uint64_t **)*v2;
      if (!v2) {
        goto LABEL_25;
      }
    }
    int v12 = memcmp(v8, v5, v9);
    BOOL v13 = v7 < v4;
    if (v12) {
      BOOL v13 = v12 < 0;
    }
    if (!v13) {
      return (uint64_t *)(v2 + 7);
    }
    uint64_t v2 = (uint64_t **)v2[1];
    if (!v2) {
      goto LABEL_25;
    }
  }
}

void nitro::nitro_program::run(std::string,std::map<std::string,nitro::flexible_type> const&)::$_2::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", 106);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  size_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"retlist.size()", 14);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_outputs[function].size()", 26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  size_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  size_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  size_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  int v10 = (void *)std::ostream::operator<<();
  BOOL v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", "operator()", 245, 1);
    std::stringbuf::str();
    int v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      BOOL v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v18 = (file_logger *)global_logger();
    char v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", "operator()", 245, 1);
    std::stringbuf::str();
    atomic_ullong *volatile v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unsigned __int8 v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        uint64_t v22 = v30;
      }
      else {
        uint64_t v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unsigned __int8 v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  int v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192524784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::nitro_function::~nitro_function(nitro::nitro_function *this)
{
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    do
    {
      int v3 = (void *)*v2;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  size_t v4 = (void *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    int v6 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v6) {
      return;
    }
  }
  else
  {
    int v6 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v6) {
      return;
    }
  }
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

uint64_t std::pair<std::string const,std::vector<std::string>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    size_t v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      size_t v4 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

double nitro::nitro_program::get_blob_shape@<D0>(uint64_t a1@<X0>, std::string *a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v8 = std::map<std::string,nitro::flexible_type>::at(a1 + 72, (const void **)&a2->__r_.__value_.__l.__data_);
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  if (*v8 != v10)
  {
    char v11 = a3[23];
    if (v11 >= 0) {
      uint64_t v12 = a3[23];
    }
    else {
      uint64_t v12 = *((void *)a3 + 1);
    }
    if (v11 >= 0) {
      BOOL v13 = a3;
    }
    else {
      BOOL v13 = *(unsigned __int8 **)a3;
    }
    while (1)
    {
      uint64_t v14 = *(unsigned __int8 *)(v9 + 23);
      if ((v14 & 0x80u) == 0) {
        uint64_t v15 = *(unsigned __int8 *)(v9 + 23);
      }
      else {
        uint64_t v15 = *(void *)(v9 + 8);
      }
      if (v15 == v12)
      {
        if ((v14 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v9, v13, *(void *)(v9 + 8))) {
            break;
          }
        }
        else
        {
          if (!*(unsigned char *)(v9 + 23)) {
            break;
          }
          uint64_t v16 = 0;
          while (*(unsigned __int8 *)(v9 + v16) == v13[v16])
          {
            if (v14 == ++v16) {
              goto LABEL_19;
            }
          }
        }
      }
      v9 += 24;
      if (v9 == v10) {
        goto LABEL_23;
      }
    }
  }
LABEL_19:
  if (v10 == v9)
  {
LABEL_23:
    uint64_t v22 = std::map<std::string,nitro::flexible_type>::at(a1 + 96, (const void **)&a2->__r_.__value_.__l.__data_);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    if (*v22 != v24)
    {
      char v25 = a3[23];
      if (v25 >= 0) {
        uint64_t v26 = a3[23];
      }
      else {
        uint64_t v26 = *((void *)a3 + 1);
      }
      if (v25 < 0) {
        a3 = *(unsigned char **)a3;
      }
      while (1)
      {
        uint64_t v27 = *(unsigned __int8 *)(v23 + 23);
        if ((v27 & 0x80u) == 0) {
          uint64_t v28 = *(unsigned __int8 *)(v23 + 23);
        }
        else {
          uint64_t v28 = *(void *)(v23 + 8);
        }
        if (v28 == v26)
        {
          if ((v27 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v23, a3, *(void *)(v23 + 8))) {
              break;
            }
          }
          else
          {
            if (!*(unsigned char *)(v23 + 23)) {
              break;
            }
            uint64_t v29 = 0;
            while (*(unsigned __int8 *)(v23 + v29) == a3[v29])
            {
              if (v27 == ++v29) {
                goto LABEL_41;
              }
            }
          }
        }
        v23 += 24;
        if (v23 == v24) {
          goto LABEL_53;
        }
      }
    }
LABEL_41:
    if (v24 == v23)
    {
LABEL_53:
      *(void *)(a4 + 56) = 0;
      *(_OWORD *)(a4 + 40) = 0u;
      *(_OWORD *)(a4 + 24) = 0u;
      uint64_t v37 = 0x100000001;
      v19.n128_u64[1] = 0x100000001;
      *(__n128 *)a4 = v19;
      v19.n128_u64[0] = 0xFFFFFFFF00000001;
      *(void *)(a4 + 16) = 0xFFFFFFFF00000001;
      return v19.n128_f64[0];
    }
    nitro::nitro_instance::get_member_function(*(nitro::nitro_instance **)(a1 + 32), a2, (nitro::nitro_function *)v39);
    uint64_t output_type = nitro::nitro_function::get_output_type((nitro::nitro_function *)v39);
    if (*(_DWORD *)(output_type + 32) != 2) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    v19.n128_u64[0] = (unint64_t)nitro::variable_type::get_layer_shape((nitro::variable_type *)(**(void **)output_type- 0x5555555555555548 * ((v23 - *v22) >> 3)), v31, a4);
    BOOL v32 = v43;
    if (v43)
    {
      do
      {
        uint64_t v33 = (void *)*v32;
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v32 + 3));
        operator delete(v32);
        BOOL v32 = v33;
      }
      while (v33);
    }
  }
  else
  {
    nitro::nitro_instance::get_member_function(*(nitro::nitro_instance **)(a1 + 32), a2, (nitro::nitro_function *)v39);
    input_types = (void *)nitro::nitro_function::get_input_types((nitro::nitro_function *)v39);
    v19.n128_u64[0] = (unint64_t)nitro::variable_type::get_layer_shape((nitro::variable_type *)(*input_types- 0x5555555555555548 * ((v9 - *v8) >> 3)), v18, a4);
    atomic_ullong *volatile v20 = v43;
    if (v43)
    {
      do
      {
        unsigned __int8 v21 = (void *)*v20;
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v20 + 3));
        operator delete(v20);
        atomic_ullong *volatile v20 = v21;
      }
      while (v21);
    }
  }
  size_t v34 = __p;
  std::string __p = 0;
  if (v34) {
    operator delete(v34);
  }
  unint64_t v35 = v41;
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *, __n128))v35->__on_zero_shared)(v35, v19);
    std::__shared_weak_count::__release_weak(v35);
  }
  uint64_t v36 = v40;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *, __n128))v36->__on_zero_shared)(v36, v19);
    std::__shared_weak_count::__release_weak(v36);
  }
  return v19.n128_f64[0];
}

void sub_192524D7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nitro::nitro_function::~nitro_function((nitro::nitro_function *)va);
  _Unwind_Resume(a1);
}

int32x2_t nitro::variable_type::get_layer_shape@<D0>(nitro::variable_type *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *((_DWORD *)this + 8);
  if (!v4)
  {
    *(void *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(void *)&long long v9 = 0x100000001;
    *((void *)&v9 + 1) = 0x100000001;
    *(_OWORD *)a3 = v9;
    int32x2_t result = (int32x2_t)1;
LABEL_12:
    *(int32x2_t *)(a3 + 16) = result;
    return result;
  }
  if (v4 != 1)
  {
    char v11 = Espresso::espresso_os_log_subsystem(0, a2);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      nitro::variable_type::get_layer_shape(v11);
    }

    *(void *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(void *)&long long v12 = 0x100000001;
    *((void *)&v12 + 1) = 0x100000001;
    *(_OWORD *)a3 = v12;
    int32x2_t result = (int32x2_t)0xFFFFFFFF00000001;
    goto LABEL_12;
  }
  v24[0] = 0;
  v24[1] = 0;
  v25[0] = 0;
  uint64_t v5 = (int32x4_t *)*((void *)this + 1);
  uint64_t v6 = *((void *)this + 2) - (void)v5;
  if (v6)
  {
    unint64_t v7 = v6 >> 3;
    if ((unint64_t)(v6 >> 3) <= 1) {
      unint64_t v7 = 1;
    }
    if (v7 >= 8)
    {
      unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      BOOL v13 = v5 + 2;
      uint64_t v14 = (int32x4_t *)v25;
      unint64_t v15 = v7 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        int32x4_t v17 = v13[-2];
        int32x4_t v16 = v13[-1];
        int32x4_t v19 = *v13;
        int32x4_t v18 = v13[1];
        v13 += 4;
        v14[-1] = vuzp1q_s32(v17, v16);
        *uint64_t v14 = vuzp1q_s32(v19, v18);
        v14 += 2;
        v15 -= 8;
      }
      while (v15);
      if (v7 == v8) {
        goto LABEL_18;
      }
    }
    else
    {
      unint64_t v8 = 0;
    }
    unint64_t v20 = v7 - v8;
    unsigned __int8 v21 = (_DWORD *)v24 + v8;
    uint64_t v22 = &v5->i64[v8];
    do
    {
      uint64_t v23 = *v22++;
      *v21++ = v23;
      --v20;
    }
    while (v20);
  }
LABEL_18:
  v25[1] = (unint64_t)v6 >> 3;
  return Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v24, 0, a3);
}

nitro::ndarray_container *nitro::ndarray_container::ndarray_container(nitro::ndarray_container *this, const nitro::ndarray_container *a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  uint64_t v4 = *((void *)a2 + 2);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)this + 2) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  uint64_t v6 = (unsigned char *)*((void *)a2 + 3);
  uint64_t v5 = (unsigned char *)*((void *)a2 + 4);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = (char *)operator new(v5 - v6);
    *((void *)this + 3) = v8;
    *((void *)this + 4) = v8;
    long long v9 = &v8[8 * (v7 >> 3)];
    *((void *)this + 5) = v9;
    memcpy(v8, v6, v7);
    *((void *)this + 4) = v9;
  }
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  char v11 = (unsigned char *)*((void *)a2 + 6);
  uint64_t v10 = (unsigned char *)*((void *)a2 + 7);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    BOOL v13 = (char *)operator new(v10 - v11);
    *((void *)this + 6) = v13;
    *((void *)this + 7) = v13;
    uint64_t v14 = &v13[8 * (v12 >> 3)];
    *((void *)this + 8) = v14;
    memcpy(v13, v11, v12);
    *((void *)this + 7) = v14;
  }
  *((void *)this + 9) = *((void *)a2 + 9);
  return this;
}

void sub_192525004(_Unwind_Exception *a1)
{
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 56) = v6;
    operator delete(v6);
  }
  int64_t v7 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 32) = v7;
    operator delete(v7);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<void>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t nitro::SExp::SExp(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(void *)(a1 + 32) = 0;
  uint64_t v5 = (atomic_ullong *volatile *)(a1 + 32);
  *(unsigned char *)(a1 + 40) = 0;
  if (a2 != a1)
  {
    uint64_t v6 = *(atomic_ullong **)(a2 + 32);
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
    *uint64_t v5 = v6;
    int v7 = *(unsigned __int8 *)(a2 + 40);
    *(unsigned char *)(a1 + 40) = v7;
    if ((v7 - 2) < 4 || v7 == 9) {
      atomic_fetch_add(*v5, 1uLL);
    }
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 56);
  if (v8 != v9)
  {
    if (0x8E38E38E38E38E39 * ((v8 - v9) >> 3) >= 0x38E38E38E38E38FLL) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = (char *)operator new(v8 - v9);
    uint64_t v11 = 0;
    *(void *)(a1 + 48) = v10;
    *(void *)(a1 + 56) = v10;
    *(void *)(a1 + 64) = &v10[8 * ((v8 - v9) >> 3)];
    do
    {
      nitro::SExp::SExp((nitro::SExp *)&v10[v11], (const nitro::SExp *)(v9 + v11));
      v11 += 72;
    }
    while (v9 + v11 != v8);
    *(void *)(a1 + 56) = &v10[v11];
  }
  return a1;
}

void sub_192525214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__exception_guard_exceptions<std::vector<nitro::SExp>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  switch(*(unsigned char *)(v9 + 40))
  {
    case 2:
      if (atomic_fetch_add(*v11, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_24;
      }
      atomic_ullong *volatile v13 = *v11;
      if (!*v11) {
        goto LABEL_23;
      }
      if (*((char *)v13 + 31) < 0) {
        operator delete((void *)v13[1]);
      }
      uint64_t v14 = (uint64_t)v13;
      uint64_t v15 = 0x1012C404EF22A49;
      break;
    case 3:
      if (atomic_fetch_add(*v11, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_24;
      }
      atomic_ullong *volatile v16 = *v11;
      if (!*v11) {
        goto LABEL_23;
      }
      int32x4_t v17 = (void *)v16[1];
      if (v17)
      {
        v16[2] = (atomic_ullong)v17;
        operator delete(v17);
      }
      uint64_t v14 = (uint64_t)v16;
      uint64_t v15 = 0x1080C409938AC02;
      break;
    case 4:
      if (atomic_fetch_add(*v11, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_24;
      }
      if (!*v11) {
        goto LABEL_23;
      }
      uint64_t v14 = std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair((uint64_t)*v11);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(*v11, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_24;
      }
      if (!*v11) {
        goto LABEL_23;
      }
      uint64_t v14 = std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair((uint64_t)*v11);
LABEL_18:
      uint64_t v15 = 0x1020C405E66F15BLL;
      break;
    case 9:
      if (atomic_fetch_add(*v11, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_24;
      }
      if (!*v11) {
        goto LABEL_23;
      }
      uint64_t v14 = (uint64_t)std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(*(void **)v11);
      uint64_t v15 = 0x10B0C4002311774;
      break;
    default:
      goto LABEL_24;
  }
  MEMORY[0x192FF16B0](v14, v15);
LABEL_23:
  *uint64_t v11 = 0;
LABEL_24:
  *(void *)(v9 + 32) = 0;
  *(unsigned char *)(v9 + 40) = 0;
  if (*(char *)(v9 + 31) < 0) {
    operator delete(*v10);
  }
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<nitro::SExp>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***a1)
{
  if (!*((unsigned char *)a1 + 8))
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (char *)**a1;
    if (v3)
    {
      long long v4 = (char *)v2[1];
      uint64_t v5 = **a1;
      if (v4 != v3)
      {
        do
          nitro::SExp::~SExp((nitro::SExp *)(v4 - 72));
        while (v4 != v3);
        uint64_t v5 = **a1;
      }
      v2[1] = v3;
      operator delete(v5);
    }
  }
  return a1;
}

void nitro::SExp::~SExp(nitro::SExp *this)
{
  uint64_t v2 = (char *)*((void *)this + 6);
  if (v2)
  {
    uint64_t v3 = (char *)*((void *)this + 7);
    long long v4 = v2;
    if (v3 != v2)
    {
      do
        nitro::SExp::~SExp((nitro::SExp *)(v3 - 72));
      while (v3 != v2);
      long long v4 = (char *)*((void *)this + 6);
    }
    *((void *)this + 7) = v2;
    operator delete(v4);
  }
  switch(*((unsigned char *)this + 40))
  {
    case 2:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 4), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v5 = *((void *)this + 4);
        if (v5)
        {
          if (*(char *)(v5 + 31) < 0) {
            operator delete(*(void **)(v5 + 8));
          }
          uint64_t v6 = (void *)v5;
          uint64_t v7 = 0x1012C404EF22A49;
          goto LABEL_43;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 4), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = (void *)*((void *)this + 4);
        if (v8)
        {
          uint64_t v9 = (void *)v8[1];
          if (v9)
          {
            v8[2] = v9;
            operator delete(v9);
          }
          uint64_t v6 = v8;
          uint64_t v7 = 0x1080C409938AC02;
          goto LABEL_43;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 4), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = (void *)*((void *)this + 4);
        if (v10)
        {
          uint64_t v11 = v10[1];
          if (!v11) {
            goto LABEL_32;
          }
          uint64_t v12 = v10[2];
          atomic_ullong *volatile v13 = (void *)v10[1];
          if (v12 != v11)
          {
            do
            {
              v12 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v10 + 3), v12);
            }
            while (v12 != v11);
            atomic_ullong *volatile v13 = (void *)v10[1];
          }
          v10[2] = v11;
          goto LABEL_31;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 4), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = (void *)*((void *)this + 4);
        if (v10)
        {
          uint64_t v14 = v10[1];
          if (v14)
          {
            uint64_t v15 = v10[2];
            atomic_ullong *volatile v16 = (void *)v10[1];
            if (v15 != v14)
            {
              do
                uint64_t v15 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v15 - 32);
              while (v15 != v14);
              atomic_ullong *volatile v16 = (void *)v10[1];
            }
            v10[2] = v14;
            atomic_ullong *volatile v13 = v16;
LABEL_31:
            operator delete(v13);
          }
LABEL_32:
          uint64_t v6 = v10;
          uint64_t v7 = 0x1020C405E66F15BLL;
          goto LABEL_43;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 4), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        int32x4_t v17 = (void *)*((void *)this + 4);
        if (v17)
        {
          int32x4_t v18 = (void *)v17[7];
          if (v18)
          {
            v17[8] = v18;
            operator delete(v18);
          }
          int32x4_t v19 = (void *)v17[4];
          if (v19)
          {
            v17[5] = v19;
            operator delete(v19);
          }
          unint64_t v20 = (std::__shared_weak_count *)v17[3];
          if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
          uint64_t v6 = v17;
          uint64_t v7 = 0x10B0C4002311774;
LABEL_43:
          MEMORY[0x192FF16B0](v6, v7);
        }
      }
      break;
    default:
      break;
  }
  *((void *)this + 4) = 0;
  *((unsigned char *)this + 40) = 0;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void std::vector<std::vector<long long>>::__assign_with_size[abi:ne180100]<std::vector<long long>*,std::vector<long long>*>(uint64_t a1, char **a2, uint64_t a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v10 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a1) >> 3) < __sz)
  {
    if (v10)
    {
      uint64_t v11 = *(char ***)(a1 + 8);
      uint64_t v12 = *(char ***)a1;
      if (v11 != v10)
      {
        atomic_ullong *volatile v13 = *(char ***)(a1 + 8);
        do
        {
          uint64_t v15 = *(v13 - 3);
          v13 -= 3;
          uint64_t v14 = v15;
          if (v15)
          {
            *(v11 - 2) = v14;
            operator delete(v14);
          }
          uint64_t v11 = v13;
        }
        while (v13 != v10);
        uint64_t v12 = *(char ***)a1;
      }
      *(void *)(a1 + 8) = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_40;
    }
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v21 = 2 * v20;
    if (2 * v20 <= __sz) {
      uint64_t v21 = __sz;
    }
    unint64_t v22 = v20 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v21;
    if (v22 > 0xAAAAAAAAAAAAAAALL) {
LABEL_40:
    }
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    uint64_t v23 = 3 * v22;
    uint64_t v24 = operator new(24 * v22);
    *(void *)a1 = v24;
    *(void *)(a1 + 8) = v24;
    *(void *)(a1 + 16) = &v24[v23];
    char v25 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<long long>>,std::vector<long long>*,std::vector<long long>*,std::vector<long long>*>(v9, (uint64_t)v6, a3, v24);
LABEL_31:
    *(void *)(a1 + 8) = v25;
    return;
  }
  atomic_ullong *volatile v16 = *(char ***)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (v16 - v10) < __sz)
  {
    uint64_t v17 = (uint64_t)&a2[v16 - v10];
    if (v16 != v10)
    {
      uint64_t v18 = 8 * (v16 - v10);
      do
      {
        if (v6 != v10) {
          std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v10, *v6, v6[1], (v6[1] - *v6) >> 3);
        }
        v6 += 3;
        v10 += 3;
        v18 -= 24;
      }
      while (v18);
      uint64_t v10 = *(char ***)(a1 + 8);
    }
    char v25 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<long long>>,std::vector<long long>*,std::vector<long long>*,std::vector<long long>*>(v9, v17, a3, v10);
    goto LABEL_31;
  }
  if (a2 != (char **)a3)
  {
    int32x4_t v19 = *(char ***)a1;
    do
    {
      if (v6 != v10) {
        std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v10, *v6, v6[1], (v6[1] - *v6) >> 3);
      }
      v6 += 3;
      v10 += 3;
      v19 += 3;
    }
    while (v6 != (char **)a3);
    atomic_ullong *volatile v16 = *(char ***)(a1 + 8);
    if (v16 == v19) {
      goto LABEL_39;
    }
    goto LABEL_35;
  }
  int32x4_t v19 = *(char ***)a1;
  if (v16 != v10)
  {
LABEL_35:
    uint64_t v26 = v16;
    do
    {
      uint64_t v28 = *(v26 - 3);
      v26 -= 3;
      uint64_t v27 = v28;
      if (v28)
      {
        *(v16 - 2) = v27;
        operator delete(v27);
      }
      atomic_ullong *volatile v16 = v26;
    }
    while (v26 != v19);
  }
LABEL_39:
  *(void *)(a1 + 8) = v19;
}

void sub_192525954(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_19252595C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<long long>>,std::vector<long long>*,std::vector<long long>*,std::vector<long long>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      uint64_t v9 = *(const void **)v6;
      uint64_t v8 = *(void *)(v6 + 8);
      int64_t v10 = v8 - *(void *)v6;
      if (v8 != *(void *)v6)
      {
        if (v10 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v11 = (char *)operator new(v8 - *(void *)v6);
        *a4 = v11;
        a4[1] = v11;
        uint64_t v7 = &v11[8 * (v10 >> 3)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_192525A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[3];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

uint64_t std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    long long v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        v3 -= 16;
        std::allocator<nitro::flexible_type>::destroy[abi:ne180100](a1 + 24, v3);
      }
      while (v3 != v2);
      long long v4 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

void **std::vector<nitro::flexible_type>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    long long v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 16;
        std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v2);
      long long v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void std::allocator<nitro::flexible_type>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  switch(*(unsigned char *)(a2 + 8))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v3 = *(atomic_ullong *volatile *)a2;
        if (*(void *)a2)
        {
          if (*((char *)v3 + 31) < 0) {
            operator delete((void *)v3[1]);
          }
          atomic_ullong *volatile v4 = v3;
          uint64_t v5 = 0x1012C404EF22A49;
          goto LABEL_38;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v6 = *(atomic_ullong *volatile *)a2;
        if (*(void *)a2)
        {
          uint64_t v7 = (void *)v6[1];
          if (v7)
          {
            v6[2] = (atomic_ullong)v7;
            operator delete(v7);
          }
          atomic_ullong *volatile v4 = v6;
          uint64_t v5 = 0x1080C409938AC02;
          goto LABEL_38;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)a2;
        if (*(void *)a2)
        {
          atomic_ullong v9 = v8[1];
          if (!v9) {
            goto LABEL_27;
          }
          atomic_ullong v10 = v8[2];
          uint64_t v11 = (void *)v8[1];
          if (v10 != v9)
          {
            do
            {
              v10 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v8 + 3, v10);
            }
            while (v10 != v9);
            uint64_t v11 = (void *)v8[1];
          }
          v8[2] = v9;
          goto LABEL_26;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)a2;
        if (*(void *)a2)
        {
          atomic_ullong v12 = v8[1];
          if (v12)
          {
            uint64_t v13 = v8[2];
            uint64_t v14 = (void *)v8[1];
            if (v13 != v12)
            {
              do
                uint64_t v13 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v13 - 32);
              while (v13 != v12);
              uint64_t v14 = (void *)v8[1];
            }
            v8[2] = v12;
            uint64_t v11 = v14;
LABEL_26:
            operator delete(v11);
          }
LABEL_27:
          atomic_ullong *volatile v4 = v8;
          uint64_t v5 = 0x1020C405E66F15BLL;
          goto LABEL_38;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v15 = *(atomic_ullong *volatile *)a2;
        if (*(void *)a2)
        {
          atomic_ullong *volatile v16 = (void *)v15[7];
          if (v16)
          {
            v15[8] = (atomic_ullong)v16;
            operator delete(v16);
          }
          uint64_t v17 = (void *)v15[4];
          if (v17)
          {
            v15[5] = (atomic_ullong)v17;
            operator delete(v17);
          }
          uint64_t v18 = (std::__shared_weak_count *)v15[3];
          if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
          atomic_ullong *volatile v4 = v15;
          uint64_t v5 = 0x10B0C4002311774;
LABEL_38:
          MEMORY[0x192FF16B0](v4, v5);
        }
      }
      break;
    default:
      break;
  }
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 0;
}

uint64_t std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    atomic_ullong *volatile v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v3 - 32);
      while ((void *)v3 != v2);
      atomic_ullong *volatile v4 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 24))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2)
        {
          if (*(char *)(v2 + 31) < 0) {
            operator delete(*(void **)(v2 + 8));
          }
          uint64_t v3 = (void *)v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_38;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v5 = *(void **)(a1 + 16);
        if (v5)
        {
          atomic_ullong *volatile v6 = (void *)v5[1];
          if (v6)
          {
            v5[2] = v6;
            operator delete(v6);
          }
          uint64_t v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_38;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void **)(a1 + 16);
        if (v7)
        {
          uint64_t v8 = v7[1];
          if (!v8) {
            goto LABEL_27;
          }
          uint64_t v9 = v7[2];
          atomic_ullong v10 = (void *)v7[1];
          if (v9 != v8)
          {
            do
            {
              v9 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v7 + 3, v9);
            }
            while (v9 != v8);
            atomic_ullong v10 = (void *)v7[1];
          }
          v7[2] = v8;
          goto LABEL_26;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void **)(a1 + 16);
        if (v7)
        {
          uint64_t v11 = v7[1];
          if (v11)
          {
            uint64_t v12 = v7[2];
            uint64_t v13 = (void *)v7[1];
            if (v12 != v11)
            {
              do
                uint64_t v12 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v12 - 32);
              while (v12 != v11);
              uint64_t v13 = (void *)v7[1];
            }
            v7[2] = v11;
            atomic_ullong v10 = v13;
LABEL_26:
            operator delete(v10);
          }
LABEL_27:
          uint64_t v3 = v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_38;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v14 = *(void **)(a1 + 16);
        if (v14)
        {
          atomic_ullong *volatile v15 = (void *)v14[7];
          if (v15)
          {
            v14[8] = v15;
            operator delete(v15);
          }
          atomic_ullong *volatile v16 = (void *)v14[4];
          if (v16)
          {
            v14[5] = v16;
            operator delete(v16);
          }
          uint64_t v17 = (std::__shared_weak_count *)v14[3];
          if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          uint64_t v3 = v14;
          uint64_t v4 = 0x10B0C4002311774;
LABEL_38:
          MEMORY[0x192FF16B0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  switch(*(unsigned char *)(a1 + 8))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v18 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          if (*((char *)v18 + 31) < 0) {
            operator delete((void *)v18[1]);
          }
          atomic_ullong *volatile v19 = v18;
          uint64_t v20 = 0x1012C404EF22A49;
          goto LABEL_76;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v21 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          unint64_t v22 = (void *)v21[1];
          if (v22)
          {
            v21[2] = (atomic_ullong)v22;
            operator delete(v22);
          }
          atomic_ullong *volatile v19 = v21;
          uint64_t v20 = 0x1080C409938AC02;
          goto LABEL_76;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v23 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          atomic_ullong v24 = v23[1];
          if (!v24) {
            goto LABEL_65;
          }
          atomic_ullong v25 = v23[2];
          uint64_t v26 = (void *)v23[1];
          if (v25 != v24)
          {
            do
            {
              v25 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v23 + 3, v25);
            }
            while (v25 != v24);
            uint64_t v26 = (void *)v23[1];
          }
          v23[2] = v24;
          goto LABEL_64;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v23 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          atomic_ullong v27 = v23[1];
          if (v27)
          {
            uint64_t v28 = v23[2];
            uint64_t v29 = (void *)v23[1];
            if (v28 != v27)
            {
              do
                uint64_t v28 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v28 - 32);
              while (v28 != v27);
              uint64_t v29 = (void *)v23[1];
            }
            v23[2] = v27;
            uint64_t v26 = v29;
LABEL_64:
            operator delete(v26);
          }
LABEL_65:
          atomic_ullong *volatile v19 = v23;
          uint64_t v20 = 0x1020C405E66F15BLL;
          goto LABEL_76;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v30 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          unsigned __int8 v31 = (void *)v30[7];
          if (v31)
          {
            v30[8] = (atomic_ullong)v31;
            operator delete(v31);
          }
          BOOL v32 = (void *)v30[4];
          if (v32)
          {
            v30[5] = (atomic_ullong)v32;
            operator delete(v32);
          }
          uint64_t v33 = (std::__shared_weak_count *)v30[3];
          if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
          atomic_ullong *volatile v19 = v30;
          uint64_t v20 = 0x10B0C4002311774;
LABEL_76:
          MEMORY[0x192FF16B0](v19, v20);
        }
      }
      break;
    default:
      break;
  }
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  return a1;
}

void *std::__function::__value_func<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        int32x2_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        int32x2_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      int32x2_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1925265AC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void nitro::nitro_variable::~nitro_variable(nitro::nitro_variable *this)
{
  switch(*((unsigned char *)this + 24))
  {
    case 2:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 2), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v2 = *((void *)this + 2);
        if (v2)
        {
          if (*(char *)(v2 + 31) < 0) {
            operator delete(*(void **)(v2 + 8));
          }
          uint64_t v3 = (void *)v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_38;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 2), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v5 = (void *)*((void *)this + 2);
        if (v5)
        {
          atomic_ullong *volatile v6 = (void *)v5[1];
          if (v6)
          {
            v5[2] = v6;
            operator delete(v6);
          }
          uint64_t v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_38;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 2), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = (void *)*((void *)this + 2);
        if (v7)
        {
          uint64_t v8 = v7[1];
          if (!v8) {
            goto LABEL_27;
          }
          uint64_t v9 = v7[2];
          atomic_ullong v10 = (void *)v7[1];
          if (v9 != v8)
          {
            do
            {
              v9 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v7 + 3), v9);
            }
            while (v9 != v8);
            atomic_ullong v10 = (void *)v7[1];
          }
          v7[2] = v8;
          goto LABEL_26;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 2), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = (void *)*((void *)this + 2);
        if (v7)
        {
          uint64_t v11 = v7[1];
          if (v11)
          {
            uint64_t v12 = v7[2];
            uint64_t v13 = (void *)v7[1];
            if (v12 != v11)
            {
              do
                uint64_t v12 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v12 - 32);
              while (v12 != v11);
              uint64_t v13 = (void *)v7[1];
            }
            v7[2] = v11;
            atomic_ullong v10 = v13;
LABEL_26:
            operator delete(v10);
          }
LABEL_27:
          uint64_t v3 = v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_38;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 2), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v14 = (void *)*((void *)this + 2);
        if (v14)
        {
          atomic_ullong *volatile v15 = (void *)v14[7];
          if (v15)
          {
            v14[8] = v15;
            operator delete(v15);
          }
          atomic_ullong *volatile v16 = (void *)v14[4];
          if (v16)
          {
            v14[5] = v16;
            operator delete(v16);
          }
          uint64_t v17 = (std::__shared_weak_count *)v14[3];
          if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          uint64_t v3 = v14;
          uint64_t v4 = 0x10B0C4002311774;
LABEL_38:
          MEMORY[0x192FF16B0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *((void *)this + 2) = 0;
  *((unsigned char *)this + 24) = 0;
  atomic_ullong *volatile v18 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v18)
  {
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void file_logger::stream_flush(file_logger *this)
{
  uint64_t v2 = pthread_getspecific(*((void *)this + 74));
  if (v2)
  {
    uint64_t v3 = v2;
    int v4 = v2[74];
    std::ostream::flush();
    std::stringbuf::str();
    if ((v12 & 0x80u) == 0) {
      uint64_t v5 = v11;
    }
    else {
      uint64_t v5 = (void **)v11[0];
    }
    file_logger::_lograw(this, *((_DWORD *)this + 150), (const char *)v5);
    if (*((_DWORD *)this + v4 + 236))
    {
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 608));
      uint64_t v6 = *((void *)this + 4 * v4 + 89);
      if (v6)
      {
        if ((char)v12 < 0)
        {
          uint64_t v8 = *((void *)v3 + 36);
          uint64_t v9 = (void **)v11[0];
          unint64_t v7 = (unint64_t)v11[1];
        }
        else
        {
          unint64_t v7 = v12;
          uint64_t v8 = *((void *)v3 + 36);
          uint64_t v9 = v11;
        }
        int v14 = v4;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v9 + v8;
        uint64_t v13 = (char *)(v7 - v8);
        (*(void (**)(uint64_t, int *, std::string *, char **))(*(void *)v6 + 48))(v6, &v14, &__p, &v13);
      }
      *((void *)v3 + 36) = 0;
      pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 608));
    }
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    std::string::operator=((std::string *)(v3 + 22), &__p);
    std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)(v3 + 6));
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (((char)v12 & 0x80000000) == 0) {
        return;
      }
LABEL_16:
      operator delete(v11[0]);
      return;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((char)v12 < 0) {
      goto LABEL_16;
    }
  }
}

void sub_1925269E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/interpreter/nitro_variable.hpp", 54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_instance == nullptr", 21);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/interpreter/nitro_variable.hpp", "operator()", 67, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        atomic_ullong v10 = __p;
      }
      else {
        atomic_ullong v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::nitro_variable::value(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192526CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::nitro_variable::value(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/interpreter/nitro_variable.hpp", "operator()", 67, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      uint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        int v4 = __p;
      }
      else {
        int v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

{
  file_logger *v0;
  file_logger *started;
  char *v2;
  void *v3;
  void **v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/interpreter/nitro_variable.hpp", "operator()", 57, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      uint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        int v4 = __p;
      }
      else {
        int v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192526E48(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192526E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192526E54);
}

void nitro::ndarray_container::ndarray_container(nitro::ndarray_container *this)
{
}

void sub_192526F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  nitro::ndarray_container::ndarray_container((uint64_t)&__p, (uint64_t)&a13, v13 - 40);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::ndarray_container<double,(void *)0>(uint64_t a1)
{
  *(_DWORD *)a1 = 9;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  operator new[]();
}

void sub_1925271AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  uint64_t v9 = *v7;
  if (*v7)
  {
    *(void *)(v5 + 56) = v9;
    operator delete(v9);
  }
  unsigned __int8 v10 = *v6;
  if (*v6)
  {
    *(void *)(v5 + 32) = v10;
    operator delete(v10);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a5);
  _Unwind_Resume(a1);
}

void std::shared_ptr<double>::shared_ptr[abi:ne180100]<double,std::default_delete<double []>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_192527254(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    MEMORY[0x192FF1690](v1, 0x1000C8000313F17);
  }
  __cxa_rethrow();
}

void sub_19252727C(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<double  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<double  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x192FF1690);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<double  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192E02308
    || ((v3 & 0x8000000192E02308 & 0x8000000000000000) != 0) != __OFSUB__(v3, 0x8000000192E02308)
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192E02308 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::vector<nitro::SExp>::__push_back_slow_path<nitro::SExp const&>(void **a1, uint64_t a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  if (0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0x8E38E38E38E38E39 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v6 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x38E38E38E38E38ELL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v7 = (char *)operator new(72 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v18 = (uint64_t)&v7[72 * v3];
  atomic_ullong *volatile v19 = &v7[72 * v6];
  nitro::SExp::SExp(v18, a2);
  uint64_t v8 = v18;
  unsigned __int8 v10 = (char *)*a1;
  uint64_t v9 = (char *)a1[1];
  if (v9 == *a1)
  {
    atomic_ullong *volatile v16 = (char *)a1[1];
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = v18 + v11;
      uint64_t v13 = &v9[v11];
      *(_WORD *)(v12 - 72) = *(_WORD *)&v9[v11 - 72];
      long long v14 = *(_OWORD *)&v9[v11 - 64];
      *(void *)(v12 - 48) = *(void *)&v9[v11 - 48];
      *(_OWORD *)(v12 - 64) = v14;
      *((void *)v13 - 7) = 0;
      *((void *)v13 - 6) = 0;
      *((void *)v13 - 8) = 0;
      *(void *)(v12 - 40) = 0;
      *(unsigned char *)(v12 - 32) = 0;
      uint64_t v15 = *(void *)&v9[v11 - 40];
      *(unsigned char *)(v12 - 32) = v9[v11 - 32];
      *(void *)(v12 - 40) = v15;
      *(unsigned char *)(v12 - 32) = v9[v11 - 32];
      *(v13 - 32) = 0;
      *(void *)(v12 - 24) = 0;
      *(void *)(v12 - 16) = 0;
      *(void *)(v12 - 8) = 0;
      *(_OWORD *)(v12 - 24) = *(_OWORD *)&v9[v11 - 24];
      *(void *)(v12 - 8) = *(void *)&v9[v11 - 8];
      *((void *)v13 - 3) = 0;
      *((void *)v13 - 2) = 0;
      *((void *)v13 - 1) = 0;
      v11 -= 72;
    }
    while (&v9[v11] != v10);
    atomic_ullong *volatile v16 = (char *)*a1;
    uint64_t v9 = (char *)a1[1];
    uint64_t v8 = v18 + v11;
  }
  *a1 = (void *)v8;
  a1[1] = (void *)(v18 + 72);
  a1[2] = v19;
  if (v9 != v16)
  {
    do
      nitro::SExp::~SExp((nitro::SExp *)(v9 - 72));
    while (v9 != v16);
    uint64_t v9 = v16;
  }
  if (v9) {
    operator delete(v9);
  }
  return v18 + 72;
}

void sub_192527528(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nitro::SExp>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<nitro::SExp>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    nitro::SExp::~SExp((nitro::SExp *)(i - 72));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *std::vector<nitro::SExp>::__push_back_slow_path<nitro::SExp>(void **a1, uint64_t a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  if (0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0x8E38E38E38E38E39 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v5 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0x38E38E38E38E38ELL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v7 = 72 * v5;
  uint64_t v8 = (char *)operator new(72 * v5);
  uint64_t v9 = &v8[72 * v3];
  *(_WORD *)uint64_t v9 = *(_WORD *)a2;
  unsigned __int8 v10 = &v8[v7];
  *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v12 = *(void *)(a2 + 32);
  *(void *)(a2 + 24) = 0;
  *((void *)v9 + 3) = v11;
  *((void *)v9 + 4) = v12;
  v9[40] = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a2 + 40) = 0;
  *((_OWORD *)v9 + 3) = *(_OWORD *)(a2 + 48);
  *((void *)v9 + 8) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  uint64_t v13 = v9 + 72;
  uint64_t v15 = (char *)*a1;
  long long v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
    if (!v14) {
      return v13;
    }
    goto LABEL_15;
  }
  uint64_t v16 = 0;
  do
  {
    uint64_t v17 = &v9[v16];
    uint64_t v18 = &v14[v16];
    *((_WORD *)v17 - 36) = *(_WORD *)&v14[v16 - 72];
    long long v19 = *(_OWORD *)&v14[v16 - 64];
    *((void *)v17 - 6) = *(void *)&v14[v16 - 48];
    *((_OWORD *)v17 - 4) = v19;
    *((void *)v18 - 7) = 0;
    *((void *)v18 - 6) = 0;
    *((void *)v18 - 8) = 0;
    *((void *)v17 - 5) = *(void *)&v14[v16 - 40];
    *(v17 - 32) = v14[v16 - 32];
    *(v18 - 32) = 0;
    *(_OWORD *)(v17 - 24) = *(_OWORD *)&v14[v16 - 24];
    *((void *)v17 - 1) = *(void *)&v14[v16 - 8];
    *((void *)v18 - 3) = 0;
    *((void *)v18 - 2) = 0;
    *((void *)v18 - 1) = 0;
    v16 -= 72;
  }
  while (&v14[v16] != v15);
  uint64_t v20 = (char *)*a1;
  long long v14 = (char *)a1[1];
  *a1 = &v9[v16];
  a1[1] = v13;
  a1[2] = v10;
  if (v14 != v20)
  {
    do
      nitro::SExp::~SExp((nitro::SExp *)(v14 - 72));
    while (v14 != v20);
    long long v14 = v20;
  }
  if (v14) {
LABEL_15:
  }
    operator delete(v14);
  return v13;
}

void std::__shared_ptr_emplace<Espresso::network_ensemble>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384868;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::network_ensemble>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE384868;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<Espresso::network_ensemble>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<nitro::nitro_class>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380E70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<nitro::nitro_class>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380E70;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<nitro::nitro_class>::__on_zero_shared(uint64_t a1)
{
}

void nitro::nitro_class::~nitro_class(nitro::nitro_class *this)
{
  uint64_t v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long const,nitro::nitro_function>,0>(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = (void *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v4) {
    operator delete(v4);
  }
  unint64_t v5 = (void **)*((void *)this + 7);
  if (v5)
  {
    do
    {
      unint64_t v6 = (void **)*v5;
      uint64_t v7 = *((unsigned int *)v5 + 14);
      if (v7 != -1) {
        ((void (*)(char *, void **))off_1EE39B9C8[v7])(&v10, v5 + 3);
      }
      operator delete(v5);
      unint64_t v5 = v6;
    }
    while (v6);
  }
  uint64_t v8 = (void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v8) {
    operator delete(v8);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<unsigned long const,nitro::nitro_function>,0>(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = (void *)a1[5];
  a1[5] = 0;
  if (v4) {
    operator delete(v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)a1[4];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    unint64_t v6 = (std::__shared_weak_count *)a1[2];
    if (!v6) {
      return;
    }
  }
  else
  {
    unint64_t v6 = (std::__shared_weak_count *)a1[2];
    if (!v6) {
      return;
    }
  }
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSL_1EJS9_SA_SD_SF_SG_SH_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 8);
  if (v2)
  {
    *(void *)(a2 + 16) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSL_1EJS9_SA_SD_SF_SG_SH_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSL_1EJS9_SA_SD_SF_SG_SH_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSL_1EJS9_SA_SD_SF_SG_SH_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSL_1EJS9_SA_SD_SF_SG_SH_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,nitro::model_metadata>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::model_metadata>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::model_metadata>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    if (v8 >= 0) {
      char v10 = a2;
    }
    else {
      char v10 = *a2;
    }
    while (1)
    {
      while (1)
      {
        uint64_t v11 = (uint64_t **)v6;
        long long v14 = (const void *)v6[4];
        uint64_t v12 = v6 + 4;
        uint64_t v13 = v14;
        int v15 = *((char *)v12 + 23);
        if (v15 >= 0) {
          size_t v16 = *((unsigned __int8 *)v12 + 23);
        }
        else {
          size_t v16 = v12[1];
        }
        if (v15 >= 0) {
          uint64_t v17 = v12;
        }
        else {
          uint64_t v17 = v13;
        }
        if (v16 >= v9) {
          size_t v18 = v9;
        }
        else {
          size_t v18 = v16;
        }
        int v19 = memcmp(v10, v17, v18);
        BOOL v20 = v9 < v16;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        if (!v20) {
          break;
        }
        unint64_t v6 = *v11;
        uint64_t v7 = v11;
        if (!*v11) {
          goto LABEL_27;
        }
      }
      int v21 = memcmp(v17, v10, v18);
      BOOL v22 = v16 < v9;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22) {
        return (uint64_t *)v11;
      }
      unint64_t v6 = v11[1];
      if (!v6)
      {
        uint64_t v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    uint64_t v11 = a1 + 1;
LABEL_27:
    atomic_ullong *volatile v23 = (char *)operator new(0xA0uLL);
    atomic_ullong v24 = (uint64_t *)v23;
    atomic_ullong v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v23 + 32), *(const std::string::value_type **)v25, *((void *)v25 + 1));
    }
    else
    {
      long long v26 = *v25;
      *((void *)v23 + 6) = *((void *)v25 + 2);
      *((_OWORD *)v23 + 2) = v26;
    }
    nitro::model_metadata::model_metadata((nitro::model_metadata *)(v24 + 7));
    *atomic_ullong v24 = 0;
    v24[1] = 0;
    void v24[2] = (uint64_t)v11;
    *uint64_t v7 = v24;
    atomic_ullong v27 = (uint64_t *)**a1;
    uint64_t v28 = v24;
    if (v27)
    {
      *a1 = v27;
      uint64_t v28 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v24;
}

void sub_192527D88(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v40, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    int v15 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      size_t v16 = *v15;
      if (*v15)
      {
        char v17 = v6[23];
        if (v17 >= 0) {
          uint64_t v18 = v6[23];
        }
        else {
          uint64_t v18 = *((void *)v6 + 1);
        }
        if (v17 < 0) {
          unint64_t v6 = *(unsigned char **)v6;
        }
        do
        {
          unint64_t v19 = v16[1];
          if (v19 == v11)
          {
            uint64_t v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = *((unsigned __int8 *)v16 + 39);
            }
            else {
              uint64_t v21 = v16[3];
            }
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp((const void *)v16[2], v6, v16[3])) {
                  return v16;
                }
              }
              else
              {
                if (!*((unsigned char *)v16 + 39)) {
                  return v16;
                }
                uint64_t v22 = 0;
                while (*((unsigned __int8 *)v16 + v22 + 16) == v6[v22])
                {
                  if (v20 == ++v22) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v14 <= 1)
            {
              v19 &= v12 - 1;
            }
            else if (v19 >= v12)
            {
              v19 %= v12;
            }
            if (v19 != v4) {
              break;
            }
          }
          size_t v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
  atomic_ullong *volatile v23 = operator new(0x38uLL);
  v40[0] = v23;
  v40[1] = a1 + 16;
  char v41 = 0;
  *atomic_ullong *volatile v23 = 0;
  v23[1] = v11;
  atomic_ullong v24 = (std::string *)(v23 + 2);
  atomic_ullong v25 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)v25, *((void *)v25 + 1));
  }
  else
  {
    long long v26 = *v25;
    v23[4] = *((void *)v25 + 2);
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v26;
  }
  v23[5] = 0;
  v23[6] = 0;
  char v41 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v12 || (float)(v28 * (float)v12) < v27)
  {
    BOOL v29 = 1;
    if (v12 >= 3) {
      BOOL v29 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v30 = v29 | (2 * v12);
    unint64_t v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31) {
      size_t prime = v31;
    }
    else {
      size_t prime = v30;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v33 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v33) {
      goto LABEL_52;
    }
    if (prime < *(void *)&v33)
    {
      unint64_t v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v33 < 3uLL || (uint8x8_t v35 = (uint8x8_t)vcnt_s8(v33), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        unint64_t v34 = std::__next_prime(v34);
      }
      else
      {
        uint64_t v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2) {
          unint64_t v34 = v36;
        }
      }
      if (prime <= v34) {
        size_t prime = v34;
      }
      if (prime < *(void *)&v33) {
LABEL_52:
      }
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  uint64_t v37 = *(void **)(*(void *)a1 + 8 * v4);
  if (v37)
  {
    *(void *)v40[0] = *v37;
    void *v37 = v40[0];
  }
  else
  {
    *(void *)v40[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v40[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v40[0])
    {
      unint64_t v38 = *(void *)(*(void *)v40[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v38 >= v12) {
          v38 %= v12;
        }
      }
      else
      {
        v38 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v38) = v40[0];
    }
  }
  size_t v16 = (uint64_t *)v40[0];
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_192528150(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void nitro::archive_detail::deserialize_hard_or_soft_fail<nitro::iarchive,nitro::flexible_type>::exec(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 16);
    int v6 = *(unsigned __int8 *)(v4 + v5);
    *(void *)(a1 + 16) = v5 + 1;
  }
  else
  {
    std::istream::read();
    int v6 = 0;
  }
  switch(*(unsigned char *)(a2 + 8))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a2;
        if (!*(void *)a2) {
          goto LABEL_42;
        }
        if (*((char *)v7 + 31) < 0) {
          operator delete((void *)v7[1]);
        }
        atomic_ullong *volatile v8 = v7;
        uint64_t v9 = 0x1012C404EF22A49;
        goto LABEL_41;
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v14 = *(atomic_ullong *volatile *)a2;
        if (!*(void *)a2) {
          goto LABEL_42;
        }
        int v15 = (void *)v14[1];
        if (v15)
        {
          v14[2] = (atomic_ullong)v15;
          operator delete(v15);
        }
        atomic_ullong *volatile v8 = v14;
        uint64_t v9 = 0x1080C409938AC02;
        goto LABEL_41;
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a2;
        if (!*(void *)a2) {
          goto LABEL_42;
        }
        atomic_ullong v11 = v10[1];
        if (v11)
        {
          uint64_t v12 = v10[2];
          uint8x8_t v13 = (void *)v10[1];
          if (v12 != v11)
          {
            do
            {
              v12 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v10 + 3), v12);
            }
            while (v12 != v11);
            uint8x8_t v13 = (void *)v10[1];
          }
          v10[2] = v11;
          goto LABEL_29;
        }
        goto LABEL_30;
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a2;
        if (!*(void *)a2) {
          goto LABEL_42;
        }
        atomic_ullong v16 = v10[1];
        if (v16)
        {
          uint64_t v17 = v10[2];
          uint64_t v18 = (void *)v10[1];
          if (v17 != v16)
          {
            do
              uint64_t v17 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v17 - 32);
            while (v17 != v16);
            uint64_t v18 = (void *)v10[1];
          }
          v10[2] = v16;
          uint8x8_t v13 = v18;
LABEL_29:
          operator delete(v13);
        }
LABEL_30:
        atomic_ullong *volatile v8 = v10;
        uint64_t v9 = 0x1020C405E66F15BLL;
        goto LABEL_41;
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v19 = *(atomic_ullong *volatile *)a2;
        if (*(void *)a2)
        {
          uint64_t v20 = (void *)v19[7];
          if (v20)
          {
            v19[8] = (atomic_ullong)v20;
            operator delete(v20);
          }
          uint64_t v21 = (void *)v19[4];
          if (v21)
          {
            v19[5] = (atomic_ullong)v21;
            operator delete(v21);
          }
          uint64_t v22 = (std::__shared_weak_count *)v19[3];
          if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
          atomic_ullong *volatile v8 = v19;
          uint64_t v9 = 0x10B0C4002311774;
LABEL_41:
          MEMORY[0x192FF16B0](v8, v9);
        }
LABEL_42:
        *(void *)a2 = 0;
      }
      break;
    default:
      break;
  }
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = v6;
  switch(v6)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      operator new();
    case 9:
      operator new();
    default:
      switch(v6)
      {
        case 2:
          if (MEMORY[0] != 1) {
            operator new();
          }
          nitro::archive_detail::deserialize_impl<nitro::iarchive,std::string,false,void>::exec(a1, (std::string *)(*(void *)a2 + 8));
          break;
        case 3:
          nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,double,true>::exec(a1, (void **)8);
          break;
        case 4:
          nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,nitro::flexible_type,false>::exec(a1, 8);
          break;
        case 5:
          nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,std::pair<nitro::flexible_type,nitro::flexible_type>,false>::exec(a1, (uint64_t *)8);
          break;
        case 6:
        case 8:
          __break(1u);
          break;
        case 7:
          return;
        case 9:
          nitro::ndarray_container::load(8, a1);
          break;
        default:
          uint64_t v23 = *(void *)(a1 + 8);
          if (v23)
          {
            *(void *)a2 = *(void *)(v23 + *(void *)(a1 + 16));
            *(void *)(a1 + 16) += 8;
          }
          else
          {
            std::istream::read();
          }
          break;
      }
      return;
  }
}

void sub_192528620(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x1012C404EF22A49);
  _Unwind_Resume(a1);
}

void *nitro::archive_detail::deserialize_impl<nitro::iarchive,std::string,false,void>::exec(uint64_t a1, std::string *this)
{
  size_t __n = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 16);
    std::string::size_type v6 = *(void *)(v4 + v5);
    size_t __n = v6;
    *(void *)(a1 + 16) = v5 + 8;
  }
  else
  {
    std::istream::read();
    std::string::size_type v6 = 0;
  }
  std::string::resize(this, v6, 0);
  if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    atomic_ullong *volatile v7 = this;
  }
  else {
    atomic_ullong *volatile v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  uint64_t v8 = *(void *)(a1 + 8);
  if (!v8) {
    return (void *)std::istream::read();
  }
  uint64_t result = memcpy(v7, (const void *)(v8 + *(void *)(a1 + 16)), __n);
  *(void *)(a1 + 16) += __n;
  return result;
}

void *nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,double,true>::exec(uint64_t a1, void **a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 16);
    unint64_t v6 = *(void *)(v4 + v5);
    *(void *)(a1 + 16) = v5 + 8;
  }
  else
  {
    std::istream::read();
    unint64_t v6 = 0;
  }
  atomic_ullong *volatile v7 = *a2;
  a2[1] = *a2;
  if (v6)
  {
    std::vector<double>::__append((uint64_t)a2, v6);
    uint64_t v8 = *a2;
    atomic_ullong *volatile v7 = a2[1];
  }
  else
  {
    uint64_t v8 = v7;
  }
  size_t v9 = v7 - v8;
  uint64_t v10 = *(void *)(a1 + 8);
  if (!v10) {
    return (void *)std::istream::read();
  }
  uint64_t result = memcpy(v8, (const void *)(v10 + *(void *)(a1 + 16)), v9);
  *(void *)(a1 + 16) += v9;
  return result;
}

void std::vector<double>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      unint64_t v6 = &v5[8 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    atomic_ullong *volatile v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - (void)v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint8x8_t v13 = operator new(8 * v12);
    }
    else
    {
      uint8x8_t v13 = 0;
    }
    atomic_ullong *volatile v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    atomic_ullong v16 = &v13[8 * v12];
    bzero(v14, v15);
    uint64_t v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_31;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v6 = &v5[-v20];
      v14 -= v20;
      uint64_t v21 = &v13[8 * v9 - 16];
      uint64_t v22 = v5 - 16;
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *uint64_t v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          uint64_t v25 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,nitro::flexible_type,false>::exec(uint64_t a1, uint64_t a2)
{
  int v3 = a1;
  unint64_t v12 = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 16);
    unint64_t v12 = *(void *)(v4 + v5);
    *(void *)(a1 + 16) = v5 + 8;
  }
  else
  {
    std::istream::read();
  }
  unint64_t v6 = *(char **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  if (v7 != *(void *)a2)
  {
    do
    {
      v7 -= 16;
      std::allocator<nitro::flexible_type>::destroy[abi:ne180100](a2 + 16, v7);
    }
    while ((char *)v7 != v6);
    uint64_t v7 = *(void *)a2;
  }
  *(void *)(a2 + 8) = v6;
  unint64_t v8 = (uint64_t)&v6[-v7] >> 4;
  if (v12 <= v8)
  {
    if (v12 < v8)
    {
      uint64_t v9 = (char *)(v7 + 16 * v12);
      while (v6 != v9)
      {
        v6 -= 16;
        std::allocator<nitro::flexible_type>::destroy[abi:ne180100](a2 + 16, (uint64_t)v6);
      }
      *(void *)(a2 + 8) = v9;
    }
  }
  else
  {
    std::vector<nitro::flexible_type>::__append((char **)a2, v12 - v8);
  }
  if (v12)
  {
    uint64_t v10 = 0;
    for (unint64_t i = 0; i < v12; ++i)
    {
      nitro::archive_detail::deserialize_hard_or_soft_fail<nitro::iarchive,nitro::flexible_type>::exec(v3);
      v10 += 16;
    }
  }
}

void std::vector<nitro::flexible_type>::__append(char **a1, unint64_t a2)
{
  uint64_t v5 = (uint64_t)(a1 + 2);
  uint64_t v4 = a1[2];
  unint64_t v6 = a1[1];
  if (a2 <= (v4 - v6) >> 4)
  {
    if (a2)
    {
      unint64_t v12 = &v6[16 * a2];
      do
      {
        *(void *)unint64_t v6 = 0;
        v6[8] = 0;
        v6 += 16;
      }
      while (v6 != v12);
      unint64_t v6 = v12;
    }
    a1[1] = v6;
  }
  else
  {
    uint64_t v7 = (v6 - *a1) >> 4;
    unint64_t v8 = v7 + a2;
    if ((v7 + a2) >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - *a1;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v11 = (char *)operator new(16 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint8x8_t v13 = &v11[16 * v7];
    atomic_ullong *volatile v14 = &v11[16 * v10];
    size_t v15 = &v13[16 * a2];
    atomic_ullong v16 = v13;
    do
    {
      *(void *)atomic_ullong v16 = 0;
      v16[8] = 0;
      v16 += 16;
    }
    while (v16 != v15);
    uint64_t v17 = *a1;
    unint64_t v18 = a1[1];
    if (v18 == *a1)
    {
      *a1 = v13;
      a1[1] = v15;
      a1[2] = v14;
      if (!v18) {
        return;
      }
      goto LABEL_25;
    }
    do
    {
      *((void *)v13 - 2) = 0;
      v13 -= 16;
      v13[8] = 0;
      uint64_t v19 = *((void *)v18 - 2);
      v18 -= 16;
      v13[8] = v18[8];
      *(void *)uint8x8_t v13 = v19;
      v13[8] = v18[8];
      v18[8] = 0;
    }
    while (v18 != v17);
    uint64_t v20 = *a1;
    unint64_t v18 = a1[1];
    *a1 = v13;
    a1[1] = v15;
    a1[2] = v14;
    if (v18 != v20)
    {
      do
      {
        v18 -= 16;
        std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v5, (uint64_t)v18);
      }
      while (v18 != v20);
      unint64_t v18 = v20;
    }
    if (v18)
    {
LABEL_25:
      operator delete(v18);
    }
  }
}

void nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,std::pair<nitro::flexible_type,nitro::flexible_type>,false>::exec(uint64_t a1, uint64_t *a2)
{
  int v3 = a1;
  unint64_t v12 = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 16);
    unint64_t v12 = *(void *)(v4 + v5);
    *(void *)(a1 + 16) = v5 + 8;
  }
  else
  {
    std::istream::read();
  }
  uint64_t v7 = (char *)*a2;
  uint64_t v6 = a2[1];
  if (v6 != *a2)
  {
    do
      uint64_t v6 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v6 - 32);
    while ((char *)v6 != v7);
    uint64_t v6 = *a2;
  }
  a2[1] = (uint64_t)v7;
  unint64_t v8 = (uint64_t)&v7[-v6] >> 5;
  if (v12 <= v8)
  {
    if (v12 < v8)
    {
      uint64_t v9 = (char *)(v6 + 32 * v12);
      while (v7 != v9)
      {
        v7 -= 32;
        std::pair<nitro::flexible_type,nitro::flexible_type>::~pair((uint64_t)v7);
      }
      a2[1] = (uint64_t)v9;
    }
  }
  else
  {
    std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__append((void **)a2, v12 - v8);
  }
  if (v12)
  {
    uint64_t v10 = 0;
    for (unint64_t i = 0; i < v12; ++i)
    {
      nitro::archive_detail::deserialize_hard_or_soft_fail<nitro::iarchive,nitro::flexible_type>::exec(v3);
      nitro::archive_detail::deserialize_hard_or_soft_fail<nitro::iarchive,nitro::flexible_type>::exec(v3);
      v10 += 32;
    }
  }
}

void std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__append(void **a1, unint64_t a2)
{
  uint64_t v4 = (char *)a1[1];
  uint64_t v5 = a1[2];
  if (a2 <= (v5 - v4) >> 5)
  {
    if (a2)
    {
      uint64_t v11 = &v4[32 * a2];
      do
      {
        *(void *)uint64_t v4 = 0;
        v4[8] = 0;
        *((void *)v4 + 2) = 0;
        v4[24] = 0;
        v4 += 32;
      }
      while (v4 != v11);
      uint64_t v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    uint64_t v6 = (v4 - (unsigned char *)*a1) >> 5;
    unint64_t v7 = v6 + a2;
    if ((v6 + a2) >> 59) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v5 - (unsigned char *)*a1;
    if (v8 >> 4 > v7) {
      unint64_t v7 = v8 >> 4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 >> 59) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v10 = (char *)operator new(32 * v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    unint64_t v12 = &v10[32 * v6];
    uint8x8_t v13 = &v10[32 * v9];
    atomic_ullong *volatile v14 = &v12[32 * a2];
    size_t v15 = v12;
    do
    {
      *(void *)size_t v15 = 0;
      v15[8] = 0;
      *((void *)v15 + 2) = 0;
      v15[24] = 0;
      v15 += 32;
    }
    while (v15 != v14);
    uint64_t v17 = (char *)*a1;
    atomic_ullong v16 = (char *)a1[1];
    if (v16 == *a1)
    {
      *a1 = v12;
      a1[1] = v14;
      a1[2] = v13;
      if (!v16) {
        return;
      }
      goto LABEL_26;
    }
    uint64_t v18 = 0;
    do
    {
      uint64_t v19 = &v12[v18];
      uint64_t v20 = &v16[v18];
      *((void *)v19 - 4) = 0;
      *(v19 - 24) = 0;
      uint64_t v21 = *(void *)&v16[v18 - 32];
      *(v19 - 24) = v16[v18 - 24];
      *((void *)v19 - 4) = v21;
      *(v19 - 24) = v16[v18 - 24];
      *(v20 - 24) = 0;
      *((void *)v19 - 2) = 0;
      *(v19 - 8) = 0;
      uint64_t v22 = *(void *)&v16[v18 - 16];
      *(v19 - 8) = v16[v18 - 8];
      *((void *)v19 - 2) = v22;
      *(v19 - 8) = v16[v18 - 8];
      *(v20 - 8) = 0;
      v18 -= 32;
    }
    while (&v16[v18] != v17);
    uint64_t v23 = (char *)*a1;
    atomic_ullong v16 = (char *)a1[1];
    *a1 = &v12[v18];
    a1[1] = v14;
    a1[2] = v13;
    if (v16 != v23)
    {
      do
        atomic_ullong v16 = (char *)std::pair<nitro::flexible_type,nitro::flexible_type>::~pair((uint64_t)(v16 - 32));
      while (v16 != v23);
      atomic_ullong v16 = v23;
    }
    if (v16)
    {
LABEL_26:
      operator delete(v16);
    }
  }
}

void std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a1, *((void *)a2 + 1));
    uint64_t v4 = *((void *)a2 + 7);
    if (v4)
    {
      uint64_t v5 = *((void *)a2 + 8);
      uint64_t v6 = (void *)*((void *)a2 + 7);
      if (v5 != v4)
      {
        do
        {
          if (*(char *)(v5 - 1) < 0) {
            operator delete(*(void **)(v5 - 24));
          }
          v5 -= 24;
        }
        while (v5 != v4);
        uint64_t v6 = (void *)*((void *)a2 + 7);
      }
      *((void *)a2 + 8) = v4;
      operator delete(v6);
    }
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::destroy(a1, a2[1]);
    std::pair<std::string const,nitro::flexible_type>::~pair((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t std::pair<std::string const,nitro::flexible_type>::~pair(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 32))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 24), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v2 = *(void *)(a1 + 24);
        if (v2)
        {
          if (*(char *)(v2 + 31) < 0) {
            operator delete(*(void **)(v2 + 8));
          }
          int v3 = (void *)v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_38;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 24), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v5 = *(void **)(a1 + 24);
        if (v5)
        {
          uint64_t v6 = (void *)v5[1];
          if (v6)
          {
            v5[2] = v6;
            operator delete(v6);
          }
          int v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_38;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 24), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v7 = *(void **)(a1 + 24);
        if (v7)
        {
          uint64_t v8 = v7[1];
          if (!v8) {
            goto LABEL_27;
          }
          uint64_t v9 = v7[2];
          uint64_t v10 = (void *)v7[1];
          if (v9 != v8)
          {
            do
            {
              v9 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v7 + 3), v9);
            }
            while (v9 != v8);
            uint64_t v10 = (void *)v7[1];
          }
          v7[2] = v8;
          goto LABEL_26;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 24), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v7 = *(void **)(a1 + 24);
        if (v7)
        {
          uint64_t v11 = v7[1];
          if (v11)
          {
            uint64_t v12 = v7[2];
            uint8x8_t v13 = (void *)v7[1];
            if (v12 != v11)
            {
              do
                uint64_t v12 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v12 - 32);
              while (v12 != v11);
              uint8x8_t v13 = (void *)v7[1];
            }
            v7[2] = v11;
            uint64_t v10 = v13;
LABEL_26:
            operator delete(v10);
          }
LABEL_27:
          int v3 = v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_38;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 24), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v14 = *(void **)(a1 + 24);
        if (v14)
        {
          size_t v15 = (void *)v14[7];
          if (v15)
          {
            v14[8] = v15;
            operator delete(v15);
          }
          atomic_ullong v16 = (void *)v14[4];
          if (v16)
          {
            v14[5] = v16;
            operator delete(v16);
          }
          uint64_t v17 = (std::__shared_weak_count *)v14[3];
          if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          int v3 = v14;
          uint64_t v4 = 0x10B0C4002311774;
LABEL_38:
          MEMORY[0x192FF16B0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__function::__func<nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2,std::allocator<nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::~__func()
{
}

void *std::__function::__func<nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2,std::allocator<nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1EE379D58;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2,std::allocator<nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE379D58;
  a2[1] = v2;
  return result;
}

void std::__function::__func<nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2,std::allocator<nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::operator()(uint64_t a1, uint64_t *a2)
{
}

uint64_t std::__function::__func<nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2,std::allocator<nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro13nitro_program4loadERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_1"
                     "3PrimitiveTypeEE3$_2"
    || ((v3 & (unint64_t)"ZN5nitro13nitro_program4loadERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocato"
                                "rIcEEEENS_13PrimitiveTypeEE3$_2" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro13nitro_program4loadERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_13PrimitiveTypeEE3$_2")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro13nitro_program4loadERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS_13PrimitiveTypeEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2,std::allocator<nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::target_type()
{
}

void nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(void *a1, uint64_t *a2)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (!*(void *)*a2)
  {
    long long v50 = (void **)*a1;
    switch(*(unsigned char *)(v2 + 24))
    {
      case 1:
        uint64_t v15 = MEMORY[0x1E4FBA488] + 104;
        *(void *)&v69[0] = MEMORY[0x1E4FBA488] + 104;
        atomic_ullong v16 = (void *)(MEMORY[0x1E4FBA488] + 64);
        v64[0] = (void *)(MEMORY[0x1E4FBA488] + 64);
        uint64_t v17 = MEMORY[0x1E4FBA408];
        uint64_t v18 = *(void **)(MEMORY[0x1E4FBA408] + 24);
        __src[0] = *(void **)(MEMORY[0x1E4FBA408] + 16);
        *(void **)((char *)__src + *((void *)__src[0] - 3)) = v18;
        __src[1] = 0;
        uint64_t v19 = (std::ios_base *)((char *)__src + *((void *)__src[0] - 3));
        std::ios_base::init(v19, &v64[1]);
        uint64_t v20 = (void *)(MEMORY[0x1E4FBA488] + 24);
        v19[1].__vftable = 0;
        v19[1].__fmtflags_ = -1;
        uint64_t v21 = *(void **)(v17 + 40);
        v64[0] = *(void **)(v17 + 32);
        *(void **)((char *)v64 + *((void *)v64[0] - 3)) = v21;
        __src[0] = *(void **)(v17 + 8);
        *(void **)((char *)__src + *((void *)__src[0] - 3)) = *(void **)(v17 + 48);
        *(void *)&v69[0] = v15;
        __src[0] = v20;
        v64[0] = v16;
        std::streambuf::basic_streambuf();
        uint64_t v22 = (void *)(MEMORY[0x1E4FBA470] + 16);
        v64[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
        memset(&__p[8], 0, 32);
        *(_DWORD *)&__p[40] = 24;
        std::ostream::operator<<();
        std::stringbuf::str();
        __src[0] = *(void **)v17;
        uint64_t v23 = *(void **)(v17 + 72);
        *(void **)((char *)__src + *((void *)__src[0] - 3)) = *(void **)(v17 + 64);
        v64[0] = v23;
        v64[1] = v22;
        if ((__p[31] & 0x80000000) != 0) {
          operator delete(*(void **)&__p[8]);
        }
        goto LABEL_12;
      case 2:
        uint64_t v13 = *(void *)(v2 + 16);
        if (*(char *)(v13 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)(v13 + 8), *(void *)(v13 + 16));
        }
        else
        {
          long long v14 = *(_OWORD *)(v13 + 8);
          v62.__r_.__value_.__r.__words[2] = *(void *)(v13 + 24);
          *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v14;
        }
        goto LABEL_17;
      case 3:
        nitro::flexible_type_impl::get_string_visitor::operator()((uint64_t)__src, (void *)(*(void *)(v2 + 16) + 8));
        goto LABEL_17;
      case 4:
        nitro::flexible_type_impl::get_string_visitor::operator()((uint64_t)__src, (uint64_t *)(*(void *)(v2 + 16) + 8));
        goto LABEL_17;
      case 5:
        nitro::flexible_type_impl::get_string_visitor::operator()((uint64_t)__src, (void *)(*(void *)(v2 + 16) + 8));
        goto LABEL_17;
      case 6:
      case 8:
        __break(1u);
        return;
      case 7:
        memset(&v62, 0, sizeof(v62));
        goto LABEL_17;
      case 9:
        nitro::flexible_type_impl::get_string_visitor::operator()((uint64_t)__src, (_DWORD *)(*(void *)(v2 + 16) + 8));
        goto LABEL_17;
      default:
        uint64_t v4 = MEMORY[0x1E4FBA488] + 104;
        *(void *)&v69[0] = MEMORY[0x1E4FBA488] + 104;
        uint64_t v5 = (void *)(MEMORY[0x1E4FBA488] + 64);
        v64[0] = (void *)(MEMORY[0x1E4FBA488] + 64);
        uint64_t v6 = MEMORY[0x1E4FBA408];
        unint64_t v7 = *(void **)(MEMORY[0x1E4FBA408] + 24);
        __src[0] = *(void **)(MEMORY[0x1E4FBA408] + 16);
        *(void **)((char *)__src + *((void *)__src[0] - 3)) = v7;
        __src[1] = 0;
        uint64_t v8 = (std::ios_base *)((char *)__src + *((void *)__src[0] - 3));
        std::ios_base::init(v8, &v64[1]);
        uint64_t v9 = (void *)(MEMORY[0x1E4FBA488] + 24);
        v8[1].__vftable = 0;
        v8[1].__fmtflags_ = -1;
        uint64_t v10 = *(void **)(v6 + 40);
        v64[0] = *(void **)(v6 + 32);
        *(void **)((char *)v64 + *((void *)v64[0] - 3)) = v10;
        __src[0] = *(void **)(v6 + 8);
        *(void **)((char *)__src + *((void *)__src[0] - 3)) = *(void **)(v6 + 48);
        *(void *)&v69[0] = v4;
        __src[0] = v9;
        v64[0] = v5;
        std::streambuf::basic_streambuf();
        uint64_t v11 = (void *)(MEMORY[0x1E4FBA470] + 16);
        v64[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
        memset(&__p[8], 0, 32);
        *(_DWORD *)&__p[40] = 24;
        std::ostream::operator<<();
        std::stringbuf::str();
        __src[0] = *(void **)v6;
        uint64_t v12 = *(void **)(v6 + 72);
        *(void **)((char *)__src + *((void *)__src[0] - 3)) = *(void **)(v6 + 64);
        v64[0] = v12;
        v64[1] = v11;
        if ((__p[31] & 0x80000000) != 0) {
          operator delete(*(void **)&__p[8]);
        }
LABEL_12:
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x192FF15B0](v69);
LABEL_17:
        if (!*(void *)(*a2 + 32))
        {
          uint64_t v24 = *(void *)(*a2 + 48);
          unint64_t v51 = (E5RT::IOPortImpl *)std::map<std::string,nitro::flexible_type>::at((uint64_t)(v50 + 6), (const void **)&v62.__r_.__value_.__l.__data_);
          *(_OWORD *)std::string::size_type v59 = 0u;
          *(_OWORD *)int v60 = 0u;
          int v61 = 1065353216;
          uint64_t v57 = 0;
          uint64_t v58 = 0;
          uint64_t v56 = 0;
          if (*(void *)(v24 + 16) != *(void *)(v24 + 8)) {
            nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)__src);
          }
          Espresso::network_ensemble::call_network(*v50, (uint64_t)&v62, (uint64_t)v59, (uint64_t)&v52);
          int v53 = 0;
          size_t v54 = 0;
          unint64_t v55 = 0;
          uint64_t output_names = nitro::model_metadata::get_output_names(v51);
          long long v26 = *(unsigned __int8 ***)output_names;
          float v27 = *(unsigned __int8 ***)(output_names + 8);
          if (*(unsigned __int8 ***)output_names != v27)
          {
            do
            {
              BOOL v29 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::find<std::string>(&v52, (uint64_t)v26);
              if (!v29) {
                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
              }
              long long v30 = *(_OWORD *)(v29 + 21);
              *(_OWORD *)&__p[32] = *(_OWORD *)(v29 + 19);
              v69[0] = v30;
              v69[1] = *(_OWORD *)(v29 + 23);
              uint64_t v70 = v29[25];
              long long v31 = *(_OWORD *)(v29 + 13);
              *(_OWORD *)long long v66 = *(_OWORD *)(v29 + 11);
              long long v67 = v31;
              long long v32 = *(_OWORD *)(v29 + 17);
              *(_OWORD *)std::string __p = *(_OWORD *)(v29 + 15);
              *(_OWORD *)&__p[16] = v32;
              long long v33 = *(_OWORD *)(v29 + 7);
              *(_OWORD *)std::string __src = *(_OWORD *)(v29 + 5);
              *(_OWORD *)int v64 = v33;
              long long v65 = *(_OWORD *)(v29 + 9);
              output_shape = (void *)nitro::model_metadata::get_output_shape(v51, v26);
              if (output_shape[1] != *output_shape)
              {
                if (*(void *)&__p[8]
                   * *(void *)__p
                   * *(void *)&__p[16]
                   * *(void *)&__p[32]
                   * *(void *)&__p[24] == 1)
                  operator new();
                operator new[]();
              }
              double v71 = 0.0;
              char v72 = 1;
              double v71 = *(float *)__src[0];
              uint8x8_t v35 = v54;
              if ((unint64_t)v54 < v55)
              {
                *(void *)size_t v54 = 0;
                v35[8] = 0;
                double v28 = v71;
                v35[8] = v72;
                *(double *)uint8x8_t v35 = v28;
                v35[8] = v72;
                size_t v54 = v35 + 16;
              }
              else
              {
                size_t v54 = std::vector<nitro::flexible_type>::__push_back_slow_path<nitro::flexible_type>((char **)&v53, (uint64_t)&v71);
                switch(v72)
                {
                  case 2:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)&v71, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      double v36 = v71;
                      if (v71 != 0.0)
                      {
                        if (*(char *)(*(void *)&v71 + 31) < 0) {
                          operator delete(*(void **)(*(void *)&v71 + 8));
                        }
                        MEMORY[0x192FF16B0](*(void *)&v36, 0x1012C404EF22A49);
                      }
                    }
                    goto LABEL_23;
                  case 3:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)&v71, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      double v41 = v71;
                      if (v71 != 0.0)
                      {
                        size_t v42 = *(void **)(*(void *)&v71 + 8);
                        if (v42)
                        {
                          *(void *)(*(void *)&v71 + 16) = v42;
                          operator delete(v42);
                        }
                        MEMORY[0x192FF16B0](*(void *)&v41, 0x1080C409938AC02);
                      }
                    }
                    goto LABEL_23;
                  case 4:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)&v71, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                      goto LABEL_23;
                    }
                    double v37 = v71;
                    if (v71 == 0.0) {
                      goto LABEL_23;
                    }
                    atomic_ullong v38 = *(void *)(*(void *)&v71 + 8);
                    if (!v38) {
                      goto LABEL_56;
                    }
                    uint64_t v39 = *(void *)(*(void *)&v71 + 16);
                    size_t v40 = *(void **)(*(void *)&v71 + 8);
                    if (v39 != v38)
                    {
                      do
                      {
                        v39 -= 16;
                        std::allocator<nitro::flexible_type>::destroy[abi:ne180100](*(void *)&v37 + 24, v39);
                      }
                      while (v39 != v38);
                      size_t v40 = *(void **)(*(void *)&v37 + 8);
                    }
                    *(void *)(*(void *)&v37 + 16) = v38;
                    break;
                  case 5:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)&v71, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                      goto LABEL_23;
                    }
                    double v37 = v71;
                    if (v71 == 0.0) {
                      goto LABEL_23;
                    }
                    atomic_ullong v43 = *(void *)(*(void *)&v71 + 8);
                    if (!v43) {
                      goto LABEL_56;
                    }
                    uint64_t v44 = *(void *)(*(void *)&v71 + 16);
                    atomic_ullong v45 = *(void *)(*(void *)&v71 + 8);
                    if (v44 != v43)
                    {
                      do
                        uint64_t v44 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v44 - 32);
                      while (v44 != v43);
                      atomic_ullong v45 = *(void *)(*(void *)&v37 + 8);
                    }
                    *(void *)(*(void *)&v37 + 16) = v43;
                    size_t v40 = (void *)v45;
                    break;
                  case 9:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)&v71, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      double v46 = v71;
                      if (v71 != 0.0)
                      {
                        long long v47 = *(void **)(*(void *)&v71 + 56);
                        if (v47)
                        {
                          *(void *)(*(void *)&v71 + 64) = v47;
                          operator delete(v47);
                        }
                        char v48 = *(void **)(*(void *)&v46 + 32);
                        if (v48)
                        {
                          *(void *)(*(void *)&v46 + 40) = v48;
                          operator delete(v48);
                        }
                        BOOL v49 = *(std::__shared_weak_count **)(*(void *)&v46 + 24);
                        if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                        {
                          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                          std::__shared_weak_count::__release_weak(v49);
                        }
                        MEMORY[0x192FF16B0](*(void *)&v46, 0x10B0C4002311774);
                      }
                    }
                    goto LABEL_23;
                  default:
                    goto LABEL_23;
                }
                operator delete(v40);
LABEL_56:
                MEMORY[0x192FF16B0](*(void *)&v37, 0x1020C405E66F15BLL);
              }
LABEL_23:
              v26 += 3;
            }
            while (v26 != v27);
          }
          operator new();
        }
        nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
    }
  }
  nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator() const(std::vector<nitro::nitro_variable> &)::{lambda(void)#1}::operator()();
}

void sub_19252BC00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52)
{
  if (a50 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator() const(std::vector<nitro::nitro_variable> &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", 106);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"params[0].is_value()", 20);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", "operator()", 137, 1);
    std::stringbuf::str();
    unint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", "operator()", 137, 1);
    std::stringbuf::str();
    uint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      long long v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  uint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19252C804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

uint64_t nitro::ndarray_container::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v4;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (a1 == a2) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (a1 != a2)
  {
LABEL_6:
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((void *)(a1 + 24), *(char **)(a2 + 24), *(char **)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((void *)(a1 + 48), *(char **)(a2 + 48), *(char **)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3);
  }
LABEL_7:
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

{
  long long v4;
  std::__shared_weak_count *v5;
  void *v6;
  void *v7;
  uint64_t v8;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v4;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(void *)(a1 + 32) = v6;
    operator delete(v6);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  unint64_t v7 = *(void **)(a1 + 48);
  if (v7)
  {
    *(void *)(a1 + 56) = v7;
    operator delete(v7);
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a1 + 72) = v8;
  return a1;
}

void *nitro::ndarray<float>::~ndarray(void *a1)
{
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void *nitro::ndarray<float>::canonicalize@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  if (!nitro::ndarray<float>::is_canonical(a1))
  {
    if (a1[3] - a1[2] == a1[6] - a1[5]) {
      nitro::ndarray<float>::ndarray((uint64_t)a2);
    }
    nitro::ndarray<float>::canonicalize(void)const::{lambda(void)#1}::operator()();
  }

  return nitro::ndarray<float>::ndarray(a2, a1);
}

void sub_19252D090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  nitro::ndarray<float>::~ndarray(v15);
  _Unwind_Resume(a1);
}

void nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator() const(std::vector<nitro::nitro_variable> &)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", 106);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"espresso_buffer_pack_tensor_shape(&buffer, rank, shape.data()) == ESPRESSO_STATUS_SUCCESS", 89);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", "operator()", 165, 1);
    std::stringbuf::str();
    unint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/nitro_program/nitro_program.mm", "operator()", 165, 1);
    std::stringbuf::str();
    uint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      long long v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  uint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19252D324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v2 - 24)) = a2[8];
  *(void *)(a1 + 16) = a2[9];
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();

  return std::iostream::~basic_iostream();
}

void nitro::ndarray<float>::ndarray(uint64_t a1)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  operator new[]();
}

void sub_19252D8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  uint64_t v9 = *v7;
  if (*v7)
  {
    *(void *)(v5 + 48) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *v6;
  if (*v6)
  {
    *(void *)(v5 + 24) = v10;
    operator delete(v10);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v5);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::ndarray(std::vector<float> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"last_index() + m_start <= elements.size()", 41);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 131, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<float>::ndarray(std::vector<float> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19252DBAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::ndarray(std::vector<float> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 131, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19252DD34(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19252DD48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19252DD40);
}

uint64_t nitro::ndarray_container::ndarray_container<float,(void *)0>(uint64_t a1, void *a2)
{
  *(_DWORD *)a1 = 9;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = (unsigned char *)a2[2];
  uint64_t v5 = (unsigned char *)a2[3];
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v8;
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 40) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 32) = v9;
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v11 = (unsigned char *)a2[5];
  unsigned __int8 v10 = (unsigned char *)a2[6];
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unsigned __int8 v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 48) = v13;
    *(void *)(a1 + 56) = v13;
    uint64_t v14 = &v13[8 * (v12 >> 3)];
    *(void *)(a1 + 64) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 56) = v14;
  }
  *(void *)(a1 + 72) = a2[8];
  return a1;
}

void sub_19252DE74(_Unwind_Exception *a1)
{
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 56) = v6;
    operator delete(v6);
  }
  int64_t v7 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 32) = v7;
    operator delete(v7);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void _ZNK5nitro17ndarray_container5visitIZNKS0_4castIfEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)v16, (uint64_t)a1);
      nitro::ndarray_container::cast<float>(void)const::{lambda(float)#1}::operator()<nitro::ndarray<int>>((uint64_t)v16, a2);
      if (v20)
      {
        unsigned __int8 v21 = v20;
        operator delete(v20);
      }
      if (v18)
      {
        uint64_t v19 = v18;
        operator delete(v18);
      }
      unint64_t v3 = v17;
      if (!v17) {
        return;
      }
      goto LABEL_25;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)v22, (uint64_t)a1);
      nitro::ndarray_container::cast<float>(void)const::{lambda(float)#1}::operator()<nitro::ndarray<unsigned char>>((uint64_t)v22, a2);
      if (v26)
      {
        float v27 = v26;
        operator delete(v26);
      }
      if (v24)
      {
        uint64_t v25 = v24;
        operator delete(v24);
      }
      unint64_t v3 = v23;
      if (!v23) {
        return;
      }
      goto LABEL_25;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)v4, (uint64_t)a1);
      nitro::ndarray_container::cast<float>(void)const::{lambda(float)#1}::operator()<nitro::ndarray<float>>((uint64_t)v4, a2);
      if (v8)
      {
        uint64_t v9 = v8;
        operator delete(v8);
      }
      if (v6)
      {
        int64_t v7 = v6;
        operator delete(v6);
      }
      unint64_t v3 = v5;
      if (v5) {
        goto LABEL_25;
      }
      return;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)v10, (uint64_t)a1);
      nitro::ndarray_container::cast<float>(void)const::{lambda(float)#1}::operator()<nitro::ndarray<half>>((uint64_t)v10, a2);
      if (__p)
      {
        std::locale v15 = __p;
        operator delete(__p);
      }
      if (v12)
      {
        unsigned __int8 v13 = v12;
        operator delete(v12);
      }
      unint64_t v3 = v11;
      if (!v11) {
        return;
      }
LABEL_25:
      if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
      return;
    default:
      _ZZNK5nitro17ndarray_container5visitIZNKS0_4castIfEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_ENKUlvE_clEv();
  }
}

void sub_19252E070(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19252E084(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray((void *)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_19252E098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19252E0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
}

void nitro::ndarray_container::cast<float>(void)const::{lambda(float)#1}::operator()<nitro::ndarray<unsigned char>>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  nitro::ndarray<float>::init_from_shape((uint64_t **)(a1 + 16), &v10);
  _ZN5nitro7ndarrayIfE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRfRKhE_EEvRKNS0_IS5_EET0_(&v10, (uint64_t *)a1, v4, v5, v6, v7, v8);
  nitro::ndarray_container::ndarray_container<float,(void *)0>(a2, &v10);
  if (__p)
  {
    std::locale v15 = __p;
    operator delete(__p);
  }
  if (v12)
  {
    unsigned __int8 v13 = v12;
    operator delete(v12);
  }
  uint64_t v9 = v11;
  if (v11)
  {
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_19252E19C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::cast<float>(void)const::{lambda(float)#1}::operator()<nitro::ndarray<int>>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  nitro::ndarray<float>::init_from_shape((uint64_t **)(a1 + 16), &v5);
  _ZN5nitro7ndarrayIfE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRfRKiE_EEvRKNS0_IS5_EET0_(&v5, (uint64_t *)a1);
  nitro::ndarray_container::ndarray_container<float,(void *)0>(a2, &v5);
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
  if (v7)
  {
    int8x16_t v8 = v7;
    operator delete(v7);
  }
  float v4 = v6;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_19252E268(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::cast<float>(void)const::{lambda(float)#1}::operator()<nitro::ndarray<half>>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  nitro::ndarray<float>::init_from_shape((uint64_t **)(a1 + 16), &v5);
  _ZN5nitro7ndarrayIfE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRfRKDhE_EEvRKNS0_IS5_EET0_(&v5, (uint64_t *)a1);
  nitro::ndarray_container::ndarray_container<float,(void *)0>(a2, &v5);
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
  if (v7)
  {
    int8x16_t v8 = v7;
    operator delete(v7);
  }
  float v4 = v6;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_19252E334(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::cast<float>(void)const::{lambda(float)#1}::operator()<nitro::ndarray<float>>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  nitro::ndarray<float>::init_from_shape((uint64_t **)(a1 + 16), &v5);
  _ZN5nitro7ndarrayIfE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clIS1_EEDaS5_EUlRfRKfE_EEvRKNS0_IS5_EET0_(&v5, (uint64_t *)a1);
  nitro::ndarray_container::ndarray_container<float,(void *)0>(a2, &v5);
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
  if (v7)
  {
    int8x16_t v8 = v7;
    operator delete(v7);
  }
  float v4 = v6;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_19252E400(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void _ZZNK5nitro17ndarray_container5visitIZNKS0_4castIfEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    int8x16_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    int8x16_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZNK5nitro17ndarray_container5visitIZNKS0_4castIfEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_19252E6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::init_from_shape(uint64_t **a1@<X0>, void *a2@<X8>)
{
  v17[0] = 0;
  v17[1] = 0;
  float v4 = *a1;
  unint64_t v3 = a1[1];
  if (v3 != *a1)
  {
    unint64_t v5 = (char *)v3 - (char *)*a1 - 8;
    if (v5 >= 8)
    {
      uint64_t v8 = (v5 >> 3) + 1;
      double v7 = &v4[v8 & 0x3FFFFFFFFFFFFFFELL];
      uint64_t v9 = v4 + 1;
      uint64_t v10 = 1;
      uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v12 = 1;
      do
      {
        v10 *= *(v9 - 1);
        v12 *= *v9;
        v9 += 2;
        v11 -= 2;
      }
      while (v11);
      uint64_t v6 = v12 * v10;
      if (v8 == (v8 & 0x3FFFFFFFFFFFFFFELL)) {
LABEL_8:
      }
        operator new[]();
    }
    else
    {
      uint64_t v6 = 1;
      double v7 = *a1;
    }
    do
    {
      uint64_t v13 = *v7++;
      v6 *= v13;
    }
    while (v7 != v3);
    goto LABEL_8;
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v16 = 0;
  nitro::ndarray<float>::ndarray(a2, v17, (uint64_t)a1, (uint64_t)__p, 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  uint64_t v14 = (std::__shared_weak_count *)v17[1];
  if (v17[1] && !atomic_fetch_add((atomic_ullong *volatile)v17[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
}

void sub_19252E898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void _ZN5nitro7ndarrayIfE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRfRKhE_EEvRKNS0_IS5_EET0_(uint64_t *a1, uint64_t *a2, float a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  uint64_t v9 = (unint64_t *)a1[2];
  uint64_t v8 = (char *)a1[3];
  unint64_t v10 = (v8 - (char *)v9) >> 3;
  uint64_t v11 = (void *)a2[2];
  if (v10 != (a2[3] - (uint64_t)v11) >> 3) {
    goto LABEL_13;
  }
  if (v8 == (char *)v9) {
    return;
  }
  uint64_t v12 = v10 <= 1 ? 1 : (v8 - (char *)v9) >> 3;
  if (*v9 != *v11) {
    goto LABEL_13;
  }
  uint64_t v13 = 1;
  do
  {
    unint64_t v14 = v13;
    if (v12 == v13) {
      break;
    }
    unint64_t v15 = v9[v13];
    uint64_t v16 = v11[v13++];
  }
  while (v15 == v16);
  if (v14 < v10) {
LABEL_13:
  }
    _ZZN5nitro7ndarrayIfE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRfRKhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv();
  size_t v17 = v8 - (char *)v9;
  if (v8 == (char *)v9) {
    return;
  }
  uint64_t v18 = *a1;
  if (!*a1) {
    return;
  }
  if (v17 - 8 < 8)
  {
    uint64_t v19 = 1;
    uint64_t v20 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v26 = *v20++;
      v19 *= v26;
    }
    while (v20 != (unint64_t *)v8);
    goto LABEL_21;
  }
  unint64_t v21 = ((v17 - 8) >> 3) + 1;
  uint64_t v20 = &v9[v21 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v22 = v9 + 1;
  uint64_t v23 = 1;
  uint64_t v24 = v21 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v25 = 1;
  do
  {
    v23 *= *(v22 - 1);
    v25 *= *v22;
    v22 += 2;
    v24 -= 2;
  }
  while (v24);
  uint64_t v19 = v25 * v23;
  if (v21 != (v21 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v19) {
    return;
  }
  uint64_t v27 = (uint64_t)v17 >> 3;
  if ((uint64_t)v17 >> 3 == 3)
  {
    unint64_t v188 = *v9;
    if (!*v9) {
      return;
    }
    uint64_t v82 = 0;
    uint64_t v83 = a2[8];
    uint64_t v84 = a1[8];
    unint64_t v85 = v9[1];
    size_t v86 = (uint64_t *)a1[5];
    v184 = (uint64_t *)a2[5];
    uint64_t v186 = *v184;
    uint64_t v187 = *v86;
    uint64_t v190 = 4 * *v86;
    uint64_t v183 = 4 * v84;
    uint64_t v87 = v18 + 4 * v84;
    uint64_t v185 = v84;
    while (!v85)
    {
LABEL_64:
      v84 += v187;
      v83 += v186;
      ++v82;
      v87 += v190;
      if (v82 == v188) {
        return;
      }
    }
    uint64_t v88 = 0;
    uint64_t v89 = v183 + v190 * v82;
    unint64_t v90 = v9[2];
    uint64_t v91 = *a2;
    uint64_t v92 = a2[5];
    uint64_t v93 = v86[1];
    uint64_t v94 = 4 * v93;
    uint64_t v95 = v190 * v82 + 4 * (v185 + v90);
    uint64_t v96 = v184[1];
    uint64_t v97 = v90 + v83;
    unint64_t v192 = v90 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v193 = v90 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v189 = v82;
    uint64_t v98 = v87;
    uint64_t v99 = *a2;
    uint64_t v100 = v83;
    uint64_t v101 = v84;
    while (!v90)
    {
LABEL_67:
      v101 += v93;
      v100 += v96;
      ++v88;
      v99 += v96;
      v98 += v94;
      if (v88 == v85) {
        goto LABEL_64;
      }
    }
    uint64_t v102 = v86[2];
    uint64_t v103 = *(void *)(v92 + 16);
    if (v90 < 8
      || (v102 == 1 ? (BOOL v104 = v103 == 1) : (BOOL v104 = 0),
          !v104
       || (v18 + v89 + v94 * v88 < (unint64_t)(v91 + v97 + v96 * v88)
         ? (BOOL v105 = v91 + v100 >= (unint64_t)(v18 + v95 + v94 * v88))
         : (BOOL v105 = 1),
           !v105)))
    {
      unint64_t v121 = 0;
      uint64_t v114 = v100;
      uint64_t v118 = v101;
      goto LABEL_87;
    }
    if (v90 >= 0x10)
    {
      uint64_t v126 = v98;
      uint64_t v127 = v99;
      unint64_t v128 = v90 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        int8x16_t v129 = *(int8x16_t *)(v127 + v83);
        uint32x4_t v130 = (uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_192DAD410);
        uint32x4_t v131 = (uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_192DAD400);
        uint32x4_t v132 = (uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_192DAD3F0);
        a7 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_192DAD3E0));
        *(float32x4_t *)(v126 + 32) = vcvtq_f32_u32(v131);
        *(float32x4_t *)(v126 + 48) = vcvtq_f32_u32(v130);
        *(int8x16_t *)uint64_t v126 = a7;
        *(float32x4_t *)(v126 + 16) = vcvtq_f32_u32(v132);
        v126 += 64;
        v127 += 16;
        v128 -= 16;
      }
      while (v128);
      if (v90 == v193) {
        goto LABEL_67;
      }
      unint64_t v106 = v90 & 0xFFFFFFFFFFFFFFF0;
      if ((v90 & 8) == 0)
      {
        uint64_t v118 = v101 + v193 * v102;
        unint64_t v121 = v90 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v114 = v100 + v193 * v103;
LABEL_87:
        unint64_t v122 = v90 - v121;
        unint64_t v123 = (unsigned __int8 *)(v91 + v114);
        uint64_t v124 = 4 * v102;
        unint64_t v125 = (_DWORD *)(v18 + 4 * v118);
        do
        {
          a7.i8[0] = *v123;
          *(float *)a7.i32 = (float)a7.u32[0];
          *unint64_t v125 = a7.i32[0];
          v123 += v103;
          unint64_t v125 = (_DWORD *)((char *)v125 + v124);
          --v122;
        }
        while (v122);
        goto LABEL_67;
      }
    }
    else
    {
      unint64_t v106 = 0;
    }
    uint64_t v107 = v84;
    uint64_t v108 = v87;
    uint64_t v109 = v97;
    uint64_t v110 = v9;
    uint64_t v111 = v18;
    uint64_t v112 = v95;
    uint64_t v113 = v89;
    uint64_t v114 = v100 + v192 * v103;
    unint64_t v115 = v106 - (v90 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v116 = v83 + v106;
    uint64_t v117 = 4 * v106;
    uint64_t v118 = v101 + v192 * v102;
    do
    {
      uint64_t v119 = v98 + v117;
      a7.i64[0] = *(void *)(v99 + v116);
      uint32x4_t v120 = (uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_192DAD3F0);
      a7 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_192DAD3E0));
      *(int8x16_t *)uint64_t v119 = a7;
      *(float32x4_t *)(v119 + 16) = vcvtq_f32_u32(v120);
      v116 += 8;
      v117 += 32;
      v115 += 8;
    }
    while (v115);
    unint64_t v121 = v90 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v89 = v113;
    uint64_t v95 = v112;
    uint64_t v18 = v111;
    uint64_t v9 = v110;
    uint64_t v97 = v109;
    uint64_t v87 = v108;
    uint64_t v84 = v107;
    uint64_t v82 = v189;
    if (v90 == v192) {
      goto LABEL_67;
    }
    goto LABEL_87;
  }
  if (v27 == 2)
  {
    unint64_t v41 = *v9;
    if (!*v9) {
      return;
    }
    uint64_t v42 = 0;
    uint64_t v43 = a2[8];
    uint64_t v44 = a1[8];
    unint64_t v45 = v9[1];
    uint64_t v46 = *a2;
    long long v47 = (uint64_t *)a2[5];
    char v48 = (uint64_t *)a1[5];
    uint64_t v49 = *v48;
    uint64_t v50 = *v47;
    uint64_t v51 = 4 * *v48;
    uint64_t v52 = v43 + v45;
    unint64_t v53 = v45 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v54 = v45 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v55 = v18 + 4 * v44;
    uint64_t v56 = v18 + 4 * (v44 + v45);
    uint64_t v57 = v55;
    while (!v45)
    {
LABEL_34:
      v44 += v49;
      v43 += v50;
      ++v42;
      v57 += v51;
      if (v42 == v41) {
        return;
      }
    }
    uint64_t v58 = v48[1];
    uint64_t v59 = v47[1];
    if (v45 < 8
      || (v58 == 1 ? (BOOL v60 = v59 == 1) : (BOOL v60 = 0),
          !v60
       || (v55 + v51 * v42 < (unint64_t)(v46 + v52 + v50 * v42)
         ? (BOOL v61 = v46 + v43 >= (unint64_t)(v56 + v51 * v42))
         : (BOOL v61 = 1),
           !v61)))
    {
      unint64_t v70 = 0;
      uint64_t v63 = v43;
      uint64_t v67 = v44;
      goto LABEL_54;
    }
    if (v45 >= 0x10)
    {
      uint64_t v75 = v57;
      uint64_t v76 = v46;
      unint64_t v77 = v45 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        int8x16_t v78 = *(int8x16_t *)(v76 + v43);
        uint32x4_t v79 = (uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_192DAD410);
        uint32x4_t v80 = (uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_192DAD400);
        uint32x4_t v81 = (uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_192DAD3F0);
        a7 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_192DAD3E0));
        *(float32x4_t *)(v75 + 32) = vcvtq_f32_u32(v80);
        *(float32x4_t *)(v75 + 48) = vcvtq_f32_u32(v79);
        *(int8x16_t *)uint64_t v75 = a7;
        *(float32x4_t *)(v75 + 16) = vcvtq_f32_u32(v81);
        v75 += 64;
        v76 += 16;
        v77 -= 16;
      }
      while (v77);
      if (v45 == v53) {
        goto LABEL_34;
      }
      unint64_t v62 = v45 & 0xFFFFFFFFFFFFFFF0;
      if ((v45 & 8) == 0)
      {
        uint64_t v67 = v44 + v53 * v58;
        unint64_t v70 = v45 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v63 = v43 + v53 * v59;
LABEL_54:
        unint64_t v71 = v45 - v70;
        char v72 = (unsigned __int8 *)(v46 + v63);
        uint64_t v73 = 4 * v58;
        atomic_ullong *volatile v74 = (_DWORD *)(v18 + 4 * v67);
        do
        {
          a7.i8[0] = *v72;
          *(float *)a7.i32 = (float)a7.u32[0];
          *atomic_ullong *volatile v74 = a7.i32[0];
          v72 += v59;
          atomic_ullong *volatile v74 = (_DWORD *)((char *)v74 + v73);
          --v71;
        }
        while (v71);
        goto LABEL_34;
      }
    }
    else
    {
      unint64_t v62 = 0;
    }
    uint64_t v63 = v43 + v54 * v59;
    unint64_t v64 = v62 - (v45 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v65 = v46 + v62;
    uint64_t v66 = 4 * v62;
    uint64_t v67 = v44 + v54 * v58;
    do
    {
      uint64_t v68 = v57 + v66;
      a7.i64[0] = *(void *)(v65 + v43);
      uint32x4_t v69 = (uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_192DAD3F0);
      a7 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_192DAD3E0));
      *(int8x16_t *)uint64_t v68 = a7;
      *(float32x4_t *)(v68 + 16) = vcvtq_f32_u32(v69);
      v65 += 8;
      v66 += 32;
      v64 += 8;
    }
    while (v64);
    unint64_t v70 = v45 & 0xFFFFFFFFFFFFFFF8;
    if (v45 == v54) {
      goto LABEL_34;
    }
    goto LABEL_54;
  }
  if (v27 != 1)
  {
    if ((v17 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    std::string v133 = operator new(v17);
    bzero(v133, v17 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v135 = *a2;
    if (v17 >> 3 <= 1) {
      unint64_t v136 = 1;
    }
    else {
      unint64_t v136 = v17 >> 3;
    }
    uint64_t v137 = a2[5];
    uint64_t v138 = a2[8];
    uint64_t v139 = v136 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v140 = a1[5];
    while (v136 >= 2)
    {
      uint64_t v143 = 0;
      uint64_t v144 = 0;
      uint64_t v145 = v136 & 0x1FFFFFFFFFFFFFFELL;
      atomic_ullong v146 = (void *)(v140 + 8);
      uint64_t v147 = v133 + 1;
      do
      {
        v143 += *(v146 - 1) * *(v147 - 1);
        v144 += *v146 * *v147;
        v147 += 2;
        v146 += 2;
        v145 -= 2;
      }
      while (v145);
      uint64_t v141 = v144 + v143;
      uint64_t v142 = v136 & 0x1FFFFFFFFFFFFFFELL;
      if (v136 != v139) {
        goto LABEL_105;
      }
LABEL_107:
      if (v136 < 2)
      {
        uint64_t v155 = 0;
        uint64_t v156 = 0;
LABEL_112:
        unint64_t v162 = v136 - v156;
        uint64_t v163 = v156;
        v164 = (uint64_t *)(v137 + 8 * v156);
        v165 = &v133[v163];
        do
        {
          uint64_t v167 = *v165++;
          uint64_t v166 = v167;
          uint64_t v168 = *v164++;
          v155 += v168 * v166;
          --v162;
        }
        while (v162);
        goto LABEL_114;
      }
      uint64_t v157 = 0;
      uint64_t v158 = 0;
      uint64_t v159 = v136 & 0x1FFFFFFFFFFFFFFELL;
      std::string::size_type v160 = (void *)(v137 + 8);
      v161 = v133 + 1;
      do
      {
        v157 += *(v160 - 1) * *(v161 - 1);
        v158 += *v160 * *v161;
        v161 += 2;
        v160 += 2;
        v159 -= 2;
      }
      while (v159);
      uint64_t v155 = v158 + v157;
      uint64_t v156 = v136 & 0x1FFFFFFFFFFFFFFELL;
      if (v136 != v139) {
        goto LABEL_112;
      }
LABEL_114:
      LOBYTE(v134) = *(unsigned char *)(v135 + v138 + v155);
      float v134 = (float)LODWORD(v134);
      *(float *)(v18 + 4 * v141) = v134;
      if ((int)(v17 >> 3) >= 1)
      {
        uint64_t v169 = (v17 >> 3) + 1;
        int v170 = v17 >> 3;
        while (1)
        {
          uint64_t v171 = (v169 - 2);
          unint64_t v172 = v133[v171] + 1;
          v133[v171] = v172;
          if (v172 < v9[v171]) {
            break;
          }
          v133[(v169 - 2)] = 0;
          --v170;
          if ((unint64_t)--v169 <= 1) {
            goto LABEL_120;
          }
        }
        if (v170 > 0) {
          continue;
        }
      }
LABEL_120:
      operator delete(v133);
      return;
    }
    uint64_t v141 = 0;
    uint64_t v142 = 0;
LABEL_105:
    unint64_t v148 = v136 - v142;
    uint64_t v149 = v142;
    v150 = (uint64_t *)(v140 + 8 * v142);
    v151 = &v133[v149];
    do
    {
      uint64_t v153 = *v151++;
      uint64_t v152 = v153;
      uint64_t v154 = *v150++;
      v141 += v154 * v152;
      --v148;
    }
    while (v148);
    goto LABEL_107;
  }
  unint64_t v28 = *v9;
  if (!*v9) {
    return;
  }
  uint64_t v29 = a2[8];
  uint64_t v30 = a1[8];
  uint64_t v31 = *a2;
  uint64_t v32 = *(void *)a1[5];
  uint64_t v33 = *(void *)a2[5];
  if (v28 < 8) {
    goto LABEL_27;
  }
  unint64_t v34 = 0;
  if (v32 != 1 || v33 != 1) {
    goto LABEL_28;
  }
  if (v18 + 4 * v30 < v31 + v28 + v29 && v31 + v29 < v18 + 4 * (v28 + v30))
  {
LABEL_27:
    unint64_t v34 = 0;
LABEL_28:
    uint64_t v35 = a2[8];
    uint64_t v36 = a1[8];
    goto LABEL_29;
  }
  if (v28 >= 0x10)
  {
    unint64_t v34 = v28 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v179 = (int8x16_t *)(v31 + v29);
    v180 = (float32x4_t *)(v18 + 4 * v30);
    a3 = NAN;
    a5.i64[1] = 0xFFFFFF07FFFFFF06;
    unint64_t v181 = v28 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      int8x16_t v182 = *v179++;
      v180[2] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v182, (int8x16_t)xmmword_192DAD400));
      v180[3] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v182, (int8x16_t)xmmword_192DAD410));
      float32x4_t *v180 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v182, (int8x16_t)xmmword_192DAD3E0));
      v180[1] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v182, (int8x16_t)xmmword_192DAD3F0));
      v180 += 4;
      v181 -= 16;
    }
    while (v181);
    if (v28 == v34) {
      return;
    }
    if ((v28 & 8) == 0)
    {
      uint64_t v36 = v30 + v34;
      uint64_t v35 = v29 + v34;
LABEL_29:
      unint64_t v37 = v28 - v34;
      atomic_ullong v38 = (unsigned char *)(v31 + v35);
      uint64_t v39 = 4 * v32;
      size_t v40 = (float *)(v18 + 4 * v36);
      do
      {
        LOBYTE(a3) = *v38;
        a3 = (float)LODWORD(a3);
        *size_t v40 = a3;
        v38 += v33;
        size_t v40 = (float *)((char *)v40 + v39);
        --v37;
      }
      while (v37);
      return;
    }
  }
  else
  {
    unint64_t v34 = 0;
  }
  unint64_t v173 = v34;
  unint64_t v34 = v28 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v35 = v29 + (v28 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v36 = v30 + (v28 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v174 = v173 - (v28 & 0xFFFFFFFFFFFFFFF8);
  v175 = (unint64_t *)(v31 + v173 + v29);
  uint64_t v176 = v18 + 4 * (v173 + v30);
  a3 = NAN;
  do
  {
    unint64_t v177 = *v175++;
    a5.i64[0] = v177;
    uint32x4_t v178 = (uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_192DAD3F0);
    a5 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_192DAD3E0));
    *(int8x16_t *)uint64_t v176 = a5;
    *(float32x4_t *)(v176 + 16) = vcvtq_f32_u32(v178);
    v176 += 32;
    v174 += 8;
  }
  while (v174);
  if (v28 != v34) {
    goto LABEL_29;
  }
}

void sub_19252F218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *nitro::ndarray<float>::ndarray(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a2[1];
  *a1 = *a2;
  a1[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  unint64_t v10 = *(const void **)a3;
  uint64_t v9 = *(void *)(a3 + 8);
  int64_t v11 = v9 - *(void *)a3;
  if (v9 != *(void *)a3)
  {
    if (v11 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = (char *)operator new(v9 - *(void *)a3);
    a1[2] = v12;
    a1[3] = v12;
    uint64_t v13 = &v12[8 * (v11 >> 3)];
    a1[4] = v13;
    memcpy(v12, v10, v11);
    a1[3] = v13;
  }
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  unint64_t v14 = *(const void **)a4;
  int64_t v15 = *(void *)(a4 + 8) - *(void *)a4;
  if (v15)
  {
    if (v15 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = (char *)operator new(v15);
    a1[5] = v16;
    a1[6] = v16;
    size_t v17 = &v16[8 * (v15 >> 3)];
    a1[7] = v17;
    memcpy(v16, v14, v15);
    a1[6] = v17;
  }
  a1[8] = a5;
  nitro::impl::fill_shape_and_stride(a1 + 2, a1 + 5, a1 + 8);
  return a1;
}

void sub_19252F344(_Unwind_Exception *a1)
{
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v6;
    operator delete(v6);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void _ZZN5nitro7ndarrayIfE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRfRKhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unint64_t v10 = __p;
      }
      else {
        unint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZN5nitro7ndarrayIfE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRfRKhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_19252F610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro7ndarrayIfE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRfRKhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float v4 = __p;
      }
      else {
        float v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  double v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19252F798(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19252F7AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19252F7A4);
}

uint64_t nitro::ndarray<unsigned char>::ndarray(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  float v4 = (void *)(a1 + 16);
  uint64_t v5 = (void *)(a1 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  if (*(_DWORD *)a2 != 5) {
    nitro::ndarray<unsigned char>::ndarray(nitro::ndarray_container const&)::{lambda(void)#1}::operator()();
  }
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v6;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v4 != (void *)(a2 + 24)) {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v4, *(char **)(a2 + 24), *(char **)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  }
  if (v5 != (void *)(a2 + 48)) {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v5, *(char **)(a2 + 48), *(char **)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3);
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 72);
  return a1;
}

void sub_19252F8F0(_Unwind_Exception *a1)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v6;
    operator delete(v6);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::ndarray(nitro::ndarray_container const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"int(nc.m_primitive)", 19);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"int(primitive_type_to_enum<T>::value)", 37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  unsigned __int8 v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  uint64_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unsigned __int8 v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 108, 1);
    std::stringbuf::str();
    std::locale v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      uint64_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        size_t v17 = __p;
      }
      else {
        size_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::ndarray<unsigned char>::ndarray(nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19252FC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::ndarray(nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 108, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float v4 = __p;
      }
      else {
        float v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19252FDCC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19252FDE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19252FDD8);
}

void _ZN5nitro7ndarrayIfE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRfRKiE_EEvRKNS0_IS5_EET0_(uint64_t *a1, uint64_t *a2)
{
  float v4 = (unint64_t *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    _ZZN5nitro7ndarrayIfE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRfRKiE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v13 = *a1;
  if (!*a1) {
    return;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v16 = ((v12 - 8) >> 3) + 1;
  std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  size_t v17 = v4 + 1;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  uint64_t v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v148 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v65 = 0;
    uint64_t v66 = a2[8];
    uint64_t v67 = a1[8];
    unint64_t v68 = v4[1];
    uint32x4_t v69 = (uint64_t *)a1[5];
    uint64_t v143 = (uint64_t *)a2[5];
    uint64_t v70 = v13 + 4 * v67 + 16;
    uint64_t v146 = *v143;
    uint64_t v147 = *v69;
    uint64_t v145 = 4 * *v69;
    uint64_t v71 = 4 * v66 + 16;
    uint64_t v144 = 4 * *v143;
    while (!v68)
    {
LABEL_50:
      v67 += v147;
      v66 += v146;
      ++v65;
      v70 += v145;
      v71 += v144;
      if (v65 == v148) {
        return;
      }
    }
    uint64_t v72 = 0;
    unint64_t v73 = v4[2];
    uint64_t v74 = *a2;
    uint64_t v75 = a2[5];
    uint64_t v76 = v69[1];
    unint64_t v77 = v73 & 0xFFFFFFFFFFFFFFF8;
    int8x16_t v78 = (int32x4_t *)(*a2 + v71);
    uint64_t v79 = v143[1];
    uint32x4_t v80 = (float32x4_t *)v70;
    uint64_t v81 = v66;
    uint64_t v82 = v67;
    while (1)
    {
      if (v73)
      {
        uint64_t v83 = v69[2];
        uint64_t v84 = *(void *)(v75 + 16);
        if (v73 >= 8 && (v84 == 1 ? (BOOL v85 = v83 == 1) : (BOOL v85 = 0), v85))
        {
          uint64_t v87 = v81 + v77 * v84;
          uint64_t v94 = v78;
          uint64_t v95 = v80;
          unint64_t v96 = v73 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v88 = v82 + v77 * v83;
          do
          {
            float32x4_t v97 = vcvtq_f32_s32(*v94);
            v95[-1] = vcvtq_f32_s32(v94[-1]);
            *uint64_t v95 = v97;
            v95 += 2;
            v94 += 2;
            v96 -= 8;
          }
          while (v96);
          unint64_t v86 = v73 & 0xFFFFFFFFFFFFFFF8;
          if (v73 == v77) {
            goto LABEL_53;
          }
        }
        else
        {
          unint64_t v86 = 0;
          uint64_t v87 = v81;
          uint64_t v88 = v82;
        }
        unint64_t v89 = v73 - v86;
        unint64_t v90 = (int *)(v74 + 4 * v87);
        uint64_t v91 = 4 * v84;
        uint64_t v92 = 4 * v83;
        uint64_t v93 = (float *)(v13 + 4 * v88);
        do
        {
          float *v93 = (float)*v90;
          unint64_t v90 = (int *)((char *)v90 + v91);
          uint64_t v93 = (float *)((char *)v93 + v92);
          --v89;
        }
        while (v89);
      }
LABEL_53:
      v82 += v76;
      v81 += v79;
      ++v72;
      uint32x4_t v80 = (float32x4_t *)((char *)v80 + 4 * v76);
      int8x16_t v78 = (int32x4_t *)((char *)v78 + 4 * v79);
      if (v72 == v68) {
        goto LABEL_50;
      }
    }
  }
  if (v22 == 2)
  {
    unint64_t v35 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v36 = 0;
    uint64_t v37 = a2[8];
    uint64_t v38 = a1[8];
    unint64_t v39 = v4[1];
    uint64_t v40 = *a2;
    unint64_t v41 = (uint64_t *)a2[5];
    uint64_t v42 = (uint64_t *)a1[5];
    uint64_t v43 = *v42;
    uint64_t v44 = *v41;
    unint64_t v45 = v39 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v46 = v13 + 4 * v38 + 16;
    uint64_t v47 = 4 * *v42;
    uint64_t v48 = *a2 + 4 * v37 + 16;
    uint64_t v49 = 4 * *v41;
    while (1)
    {
      if (v39)
      {
        uint64_t v50 = v42[1];
        uint64_t v51 = v41[1];
        if (v39 >= 8 && (v51 == 1 ? (BOOL v52 = v50 == 1) : (BOOL v52 = 0), v52))
        {
          uint64_t v54 = v37 + v45 * v51;
          BOOL v61 = (int32x4_t *)v48;
          unint64_t v62 = (_OWORD *)v46;
          unint64_t v63 = v39 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v55 = v38 + v45 * v50;
          do
          {
            float32x4_t v64 = vcvtq_f32_s32(*v61);
            *(v62 - 1) = vcvtq_f32_s32(v61[-1]);
            *unint64_t v62 = v64;
            v62 += 2;
            v61 += 2;
            v63 -= 8;
          }
          while (v63);
          unint64_t v53 = v39 & 0xFFFFFFFFFFFFFFF8;
          if (v39 == v45) {
            goto LABEL_33;
          }
        }
        else
        {
          unint64_t v53 = 0;
          uint64_t v54 = v37;
          uint64_t v55 = v38;
        }
        unint64_t v56 = v39 - v53;
        uint64_t v57 = (int *)(v40 + 4 * v54);
        uint64_t v58 = 4 * v51;
        uint64_t v59 = 4 * v50;
        BOOL v60 = (float *)(v13 + 4 * v55);
        do
        {
          *BOOL v60 = (float)*v57;
          uint64_t v57 = (int *)((char *)v57 + v58);
          BOOL v60 = (float *)((char *)v60 + v59);
          --v56;
        }
        while (v56);
      }
LABEL_33:
      v38 += v43;
      v37 += v44;
      ++v36;
      v46 += v47;
      v48 += v49;
      if (v36 == v35) {
        return;
      }
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v98 = operator new(v12);
    bzero(v98, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v99 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v100 = 1;
    }
    else {
      unint64_t v100 = v12 >> 3;
    }
    uint64_t v101 = a2[5];
    uint64_t v102 = a2[8];
    uint64_t v103 = v100 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v104 = a1[5];
    while (v100 >= 2)
    {
      uint64_t v107 = 0;
      uint64_t v108 = 0;
      uint64_t v109 = v100 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v110 = (void *)(v104 + 8);
      uint64_t v111 = v98 + 1;
      do
      {
        v107 += *(v110 - 1) * *(v111 - 1);
        v108 += *v110 * *v111;
        v111 += 2;
        v110 += 2;
        v109 -= 2;
      }
      while (v109);
      uint64_t v105 = v108 + v107;
      uint64_t v106 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103) {
        goto LABEL_78;
      }
LABEL_80:
      if (v100 < 2)
      {
        uint64_t v119 = 0;
        uint64_t v120 = 0;
LABEL_85:
        unint64_t v126 = v100 - v120;
        uint64_t v127 = v120;
        unint64_t v128 = (uint64_t *)(v101 + 8 * v120);
        int8x16_t v129 = &v98[v127];
        do
        {
          uint64_t v131 = *v129++;
          uint64_t v130 = v131;
          uint64_t v132 = *v128++;
          v119 += v132 * v130;
          --v126;
        }
        while (v126);
        goto LABEL_87;
      }
      uint64_t v121 = 0;
      uint64_t v122 = 0;
      uint64_t v123 = v100 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v124 = (void *)(v101 + 8);
      unint64_t v125 = v98 + 1;
      do
      {
        v121 += *(v124 - 1) * *(v125 - 1);
        v122 += *v124 * *v125;
        v125 += 2;
        v124 += 2;
        v123 -= 2;
      }
      while (v123);
      uint64_t v119 = v122 + v121;
      uint64_t v120 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103) {
        goto LABEL_85;
      }
LABEL_87:
      *(float *)(v13 + 4 * v105) = (float)*(int *)(v99 + 4 * (v102 + v119));
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v133 = (v12 >> 3) + 1;
        int v134 = v12 >> 3;
        while (1)
        {
          uint64_t v135 = (v133 - 2);
          unint64_t v136 = v98[v135] + 1;
          v98[v135] = v136;
          if (v136 < v4[v135]) {
            break;
          }
          v98[(v133 - 2)] = 0;
          --v134;
          if ((unint64_t)--v133 <= 1) {
            goto LABEL_93;
          }
        }
        if (v134 > 0) {
          continue;
        }
      }
LABEL_93:
      operator delete(v98);
      return;
    }
    uint64_t v105 = 0;
    uint64_t v106 = 0;
LABEL_78:
    unint64_t v112 = v100 - v106;
    uint64_t v113 = v106;
    uint64_t v114 = (uint64_t *)(v104 + 8 * v106);
    unint64_t v115 = &v98[v113];
    do
    {
      uint64_t v117 = *v115++;
      uint64_t v116 = v117;
      uint64_t v118 = *v114++;
      v105 += v118 * v116;
      --v112;
    }
    while (v112);
    goto LABEL_80;
  }
  unint64_t v23 = *v4;
  if (!*v4) {
    return;
  }
  uint64_t v24 = a2[8];
  uint64_t v25 = a1[8];
  uint64_t v26 = *a2;
  uint64_t v27 = *(void *)a1[5];
  uint64_t v28 = *(void *)a2[5];
  if (v23 < 8)
  {
    unint64_t v29 = 0;
LABEL_28:
    unint64_t v30 = v23 - v29;
    uint64_t v31 = (int *)(v26 + 4 * v24);
    uint64_t v32 = 4 * v28;
    uint64_t v33 = 4 * v27;
    unint64_t v34 = (float *)(v13 + 4 * v25);
    do
    {
      *unint64_t v34 = (float)*v31;
      uint64_t v31 = (int *)((char *)v31 + v32);
      unint64_t v34 = (float *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  unint64_t v29 = 0;
  if (v28 != 1) {
    goto LABEL_28;
  }
  if (v27 != 1) {
    goto LABEL_28;
  }
  unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v137 = v24 + (v23 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v138 = v25 + (v23 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v139 = (int32x4_t *)(v26 + 4 * v24 + 16);
  uint64_t v140 = (float32x4_t *)(v13 + 4 * v25 + 16);
  unint64_t v141 = v23 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    float32x4_t v142 = vcvtq_f32_s32(*v139);
    v140[-1] = vcvtq_f32_s32(v139[-1]);
    float32x4_t *v140 = v142;
    v139 += 2;
    v140 += 2;
    v141 -= 8;
  }
  while (v141);
  uint64_t v24 = v137;
  uint64_t v25 = v138;
  if (v23 != v29) {
    goto LABEL_28;
  }
}

void sub_19253049C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _ZZN5nitro7ndarrayIfE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRfRKiE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unint64_t v10 = __p;
      }
      else {
        unint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZN5nitro7ndarrayIfE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRfRKiE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_192530744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro7ndarrayIfE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRfRKiE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float v4 = __p;
      }
      else {
        float v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925308CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925308E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925308D8);
}

uint64_t nitro::ndarray<int>::ndarray(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  float v4 = (void *)(a1 + 16);
  uint64_t v5 = (void *)(a1 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  if (*(_DWORD *)a2 != 3) {
    nitro::ndarray<int>::ndarray(nitro::ndarray_container const&)::{lambda(void)#1}::operator()();
  }
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v6;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v4 != (void *)(a2 + 24)) {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v4, *(char **)(a2 + 24), *(char **)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  }
  if (v5 != (void *)(a2 + 48)) {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v5, *(char **)(a2 + 48), *(char **)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3);
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 72);
  return a1;
}

void sub_192530A24(_Unwind_Exception *a1)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v6;
    operator delete(v6);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::ndarray(nitro::ndarray_container const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"int(nc.m_primitive)", 19);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"int(primitive_type_to_enum<T>::value)", 37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  unsigned __int8 v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  size_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unsigned __int8 v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 108, 1);
    std::stringbuf::str();
    std::locale v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      unint64_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        size_t v17 = __p;
      }
      else {
        size_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::ndarray<int>::ndarray(nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192530D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::ndarray(nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 108, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float v4 = __p;
      }
      else {
        float v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192530F00(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192530F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192530F0CLL);
}

void _ZN5nitro7ndarrayIfE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRfRKDhE_EEvRKNS0_IS5_EET0_(uint64_t *a1, uint64_t *a2)
{
  float v4 = (unint64_t *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    _ZZN5nitro7ndarrayIfE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRfRKDhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v13 = *a1;
  if (!*a1) {
    return;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v16 = ((v12 - 8) >> 3) + 1;
  std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  size_t v17 = v4 + 1;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  uint64_t v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v165 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v74 = 0;
    uint64_t v75 = a2[8];
    uint64_t v76 = a1[8];
    unint64_t v77 = v4[1];
    int8x16_t v78 = (uint64_t *)a1[5];
    std::string::size_type v160 = (uint64_t *)a2[5];
    uint64_t v79 = v13 + 4 * v76 + 32;
    uint64_t v163 = *v160;
    uint64_t v164 = *v78;
    uint64_t v162 = 4 * *v78;
    uint64_t v80 = 2 * v75 + 16;
    uint64_t v161 = 2 * *v160;
    while (!v77)
    {
LABEL_50:
      v76 += v164;
      v75 += v163;
      ++v74;
      v79 += v162;
      v80 += v161;
      if (v74 == v165) {
        return;
      }
    }
    uint64_t v81 = 0;
    unint64_t v82 = v4[2];
    uint64_t v83 = *a2;
    uint64_t v84 = a2[5];
    uint64_t v85 = v78[1];
    unint64_t v86 = v82 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v87 = (float16x4_t *)(*a2 + v80);
    uint64_t v88 = v160[1];
    unint64_t v89 = (float32x4_t *)v79;
    uint64_t v90 = v75;
    uint64_t v91 = v76;
    while (1)
    {
      if (v82)
      {
        uint64_t v92 = v78[2];
        uint64_t v93 = *(void *)(v84 + 16);
        if (v82 >= 0x10 && (v93 == 1 ? (BOOL v94 = v92 == 1) : (BOOL v94 = 0), v94))
        {
          uint64_t v96 = v90 + v86 * v93;
          uint64_t v105 = v87;
          uint64_t v106 = v89;
          unint64_t v107 = v82 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v97 = v91 + v86 * v92;
          do
          {
            float16x8_t v108 = *(float16x8_t *)v105[-2].i8;
            float32x4_t v109 = vcvtq_f32_f16(*v105);
            float32x4_t v110 = vcvt_hight_f32_f16(*(float16x8_t *)v105->i8);
            v106[-2] = vcvtq_f32_f16(*(float16x4_t *)v108.i8);
            v106[-1] = vcvt_hight_f32_f16(v108);
            *uint64_t v106 = v109;
            v106[1] = v110;
            v106 += 4;
            v105 += 4;
            v107 -= 16;
          }
          while (v107);
          unint64_t v95 = v82 & 0xFFFFFFFFFFFFFFF0;
          if (v82 == v86) {
            goto LABEL_53;
          }
        }
        else
        {
          unint64_t v95 = 0;
          uint64_t v96 = v90;
          uint64_t v97 = v91;
        }
        unint64_t v98 = v82 - v95;
        uint64_t v99 = (__int16 *)(v83 + 2 * v96);
        uint64_t v100 = 2 * v93;
        uint64_t v101 = 4 * v92;
        uint64_t v102 = (_DWORD *)(v13 + 4 * v97);
        do
        {
          _H0 = *v99;
          __asm { FCVT            S0, H0 }
          *uint64_t v102 = _S0;
          uint64_t v99 = (__int16 *)((char *)v99 + v100);
          uint64_t v102 = (_DWORD *)((char *)v102 + v101);
          --v98;
        }
        while (v98);
      }
LABEL_53:
      v91 += v85;
      v90 += v88;
      ++v81;
      unint64_t v89 = (float32x4_t *)((char *)v89 + 4 * v85);
      uint64_t v87 = (float16x4_t *)((char *)v87 + 2 * v88);
      if (v81 == v77) {
        goto LABEL_50;
      }
    }
  }
  if (v22 == 2)
  {
    unint64_t v40 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v41 = 0;
    uint64_t v42 = a2[8];
    uint64_t v43 = a1[8];
    unint64_t v44 = v4[1];
    uint64_t v45 = *a2;
    uint64_t v46 = (uint64_t *)a2[5];
    uint64_t v47 = (uint64_t *)a1[5];
    uint64_t v48 = *v47;
    uint64_t v49 = *v46;
    unint64_t v50 = v44 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v51 = v13 + 4 * v43 + 32;
    uint64_t v52 = 4 * *v47;
    uint64_t v53 = *a2 + 2 * v42 + 16;
    uint64_t v54 = 2 * *v46;
    while (1)
    {
      if (v44)
      {
        uint64_t v55 = v47[1];
        uint64_t v56 = v46[1];
        if (v44 >= 0x10 && (v56 == 1 ? (_ZF = v55 == 1) : (_ZF = 0), _ZF))
        {
          uint64_t v59 = v42 + v50 * v56;
          unint64_t v68 = (float16x4_t *)v53;
          uint32x4_t v69 = (_OWORD *)v51;
          unint64_t v70 = v44 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v60 = v43 + v50 * v55;
          do
          {
            float16x8_t v71 = *(float16x8_t *)v68[-2].i8;
            float32x4_t v72 = vcvtq_f32_f16(*v68);
            float32x4_t v73 = vcvt_hight_f32_f16(*(float16x8_t *)v68->i8);
            *(v69 - 2) = vcvtq_f32_f16(*(float16x4_t *)v71.i8);
            *(v69 - 1) = vcvt_hight_f32_f16(v71);
            *uint32x4_t v69 = v72;
            v69[1] = v73;
            v69 += 4;
            v68 += 4;
            v70 -= 16;
          }
          while (v70);
          unint64_t v58 = v44 & 0xFFFFFFFFFFFFFFF0;
          if (v44 == v50) {
            goto LABEL_33;
          }
        }
        else
        {
          unint64_t v58 = 0;
          uint64_t v59 = v42;
          uint64_t v60 = v43;
        }
        unint64_t v61 = v44 - v58;
        unint64_t v62 = (__int16 *)(v45 + 2 * v59);
        uint64_t v63 = 2 * v56;
        uint64_t v64 = 4 * v55;
        uint64_t v65 = (_DWORD *)(v13 + 4 * v60);
        do
        {
          _H0 = *v62;
          __asm { FCVT            S0, H0 }
          *uint64_t v65 = _S0;
          unint64_t v62 = (__int16 *)((char *)v62 + v63);
          uint64_t v65 = (_DWORD *)((char *)v65 + v64);
          --v61;
        }
        while (v61);
      }
LABEL_33:
      v43 += v48;
      v42 += v49;
      ++v41;
      v51 += v52;
      v53 += v54;
      if (v41 == v40) {
        return;
      }
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v111 = operator new(v12);
    bzero(v111, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v112 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v113 = 1;
    }
    else {
      unint64_t v113 = v12 >> 3;
    }
    uint64_t v114 = a2[5];
    uint64_t v115 = a2[8];
    uint64_t v116 = v113 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v117 = a1[5];
    while (v113 >= 2)
    {
      uint64_t v120 = 0;
      uint64_t v121 = 0;
      uint64_t v122 = v113 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v123 = (void *)(v117 + 8);
      uint64_t v124 = v111 + 1;
      do
      {
        v120 += *(v123 - 1) * *(v124 - 1);
        v121 += *v123 * *v124;
        v124 += 2;
        v123 += 2;
        v122 -= 2;
      }
      while (v122);
      uint64_t v118 = v121 + v120;
      uint64_t v119 = v113 & 0x1FFFFFFFFFFFFFFELL;
      if (v113 != v116) {
        goto LABEL_78;
      }
LABEL_80:
      if (v113 < 2)
      {
        uint64_t v132 = 0;
        uint64_t v133 = 0;
LABEL_85:
        unint64_t v139 = v113 - v133;
        uint64_t v140 = v133;
        unint64_t v141 = (uint64_t *)(v114 + 8 * v133);
        float32x4_t v142 = &v111[v140];
        do
        {
          uint64_t v144 = *v142++;
          uint64_t v143 = v144;
          uint64_t v145 = *v141++;
          v132 += v145 * v143;
          --v139;
        }
        while (v139);
        goto LABEL_87;
      }
      uint64_t v134 = 0;
      uint64_t v135 = 0;
      uint64_t v136 = v113 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v137 = (void *)(v114 + 8);
      uint64_t v138 = v111 + 1;
      do
      {
        v134 += *(v137 - 1) * *(v138 - 1);
        v135 += *v137 * *v138;
        v138 += 2;
        v137 += 2;
        v136 -= 2;
      }
      while (v136);
      uint64_t v132 = v135 + v134;
      uint64_t v133 = v113 & 0x1FFFFFFFFFFFFFFELL;
      if (v113 != v116) {
        goto LABEL_85;
      }
LABEL_87:
      _H0 = *(_WORD *)(v112 + 2 * (v115 + v132));
      __asm { FCVT            S0, H0 }
      *(_DWORD *)(v13 + 4 * v118) = _S0;
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v148 = (v12 >> 3) + 1;
        int v149 = v12 >> 3;
        while (1)
        {
          uint64_t v150 = (v148 - 2);
          unint64_t v151 = v111[v150] + 1;
          v111[v150] = v151;
          if (v151 < v4[v150]) {
            break;
          }
          v111[(v148 - 2)] = 0;
          --v149;
          if ((unint64_t)--v148 <= 1) {
            goto LABEL_93;
          }
        }
        if (v149 > 0) {
          continue;
        }
      }
LABEL_93:
      operator delete(v111);
      return;
    }
    uint64_t v118 = 0;
    uint64_t v119 = 0;
LABEL_78:
    unint64_t v125 = v113 - v119;
    uint64_t v126 = v119;
    uint64_t v127 = (uint64_t *)(v117 + 8 * v119);
    unint64_t v128 = &v111[v126];
    do
    {
      uint64_t v130 = *v128++;
      uint64_t v129 = v130;
      uint64_t v131 = *v127++;
      v118 += v131 * v129;
      --v125;
    }
    while (v125);
    goto LABEL_80;
  }
  unint64_t v23 = *v4;
  if (!*v4) {
    return;
  }
  uint64_t v24 = a2[8];
  uint64_t v25 = a1[8];
  uint64_t v26 = *a2;
  uint64_t v27 = *(void *)a1[5];
  uint64_t v28 = *(void *)a2[5];
  if (v23 < 0x10)
  {
    unint64_t v29 = 0;
LABEL_28:
    unint64_t v30 = v23 - v29;
    uint64_t v31 = (__int16 *)(v26 + 2 * v24);
    uint64_t v32 = 2 * v28;
    uint64_t v33 = 4 * v27;
    unint64_t v34 = (_DWORD *)(v13 + 4 * v25);
    do
    {
      _H0 = *v31;
      __asm { FCVT            S0, H0 }
      *unint64_t v34 = _S0;
      uint64_t v31 = (__int16 *)((char *)v31 + v32);
      unint64_t v34 = (_DWORD *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  unint64_t v29 = 0;
  if (v28 != 1) {
    goto LABEL_28;
  }
  if (v27 != 1) {
    goto LABEL_28;
  }
  unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  uint64_t v152 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v153 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v154 = (float16x4_t *)(v26 + 2 * v24 + 16);
  uint64_t v155 = (float32x4_t *)(v13 + 4 * v25 + 32);
  unint64_t v156 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    float16x8_t v157 = *(float16x8_t *)v154[-2].i8;
    float32x4_t v158 = vcvtq_f32_f16(*v154);
    float32x4_t v159 = vcvt_hight_f32_f16(*(float16x8_t *)v154->i8);
    v155[-2] = vcvtq_f32_f16(*(float16x4_t *)v157.i8);
    v155[-1] = vcvt_hight_f32_f16(v157);
    *uint64_t v155 = v158;
    v155[1] = v159;
    v155 += 4;
    v154 += 4;
    v156 -= 16;
  }
  while (v156);
  uint64_t v24 = v152;
  uint64_t v25 = v153;
  if (v23 != v29) {
    goto LABEL_28;
  }
}

void sub_1925315E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _ZZN5nitro7ndarrayIfE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRfRKDhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unint64_t v10 = __p;
      }
      else {
        unint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZN5nitro7ndarrayIfE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRfRKDhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_192531890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro7ndarrayIfE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRfRKDhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float v4 = __p;
      }
      else {
        float v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192531A18(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192531A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192531A24);
}

uint64_t nitro::ndarray<half>::ndarray(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  float v4 = (void *)(a1 + 16);
  uint64_t v5 = (void *)(a1 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  if (*(_DWORD *)a2 != 11) {
    nitro::ndarray<half>::ndarray(nitro::ndarray_container const&)::{lambda(void)#1}::operator()();
  }
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v6;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v4 != (void *)(a2 + 24)) {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v4, *(char **)(a2 + 24), *(char **)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  }
  if (v5 != (void *)(a2 + 48)) {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v5, *(char **)(a2 + 48), *(char **)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3);
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 72);
  return a1;
}

void sub_192531B70(_Unwind_Exception *a1)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v6;
    operator delete(v6);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::ndarray(nitro::ndarray_container const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"int(nc.m_primitive)", 19);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"int(primitive_type_to_enum<T>::value)", 37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  unsigned __int8 v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  size_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unsigned __int8 v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 108, 1);
    std::stringbuf::str();
    std::locale v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      unint64_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        size_t v17 = __p;
      }
      else {
        size_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::ndarray<half>::ndarray(nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192531EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::ndarray(nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 108, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float v4 = __p;
      }
      else {
        float v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19253204C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192532060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192532058);
}

__n128 _ZN5nitro7ndarrayIfE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clIS1_EEDaS5_EUlRfRKfE_EEvRKNS0_IS5_EET0_(uint64_t *a1, uint64_t *a2)
{
  float v4 = (unint64_t *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return result;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    _ZZN5nitro7ndarrayIfE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clIS1_EEDaS5_EUlRfRKfE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv();
  size_t v12 = v3 - (char *)v4;
  if (v3 != (char *)v4)
  {
    uint64_t v13 = *a1;
    if (*a1)
    {
      if (v12 - 8 >= 8)
      {
        unint64_t v16 = ((v12 - 8) >> 3) + 1;
        std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
        size_t v17 = v4 + 1;
        uint64_t v18 = 1;
        uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
        uint64_t v20 = 1;
        do
        {
          v18 *= *(v17 - 1);
          v20 *= *v17;
          v17 += 2;
          v19 -= 2;
        }
        while (v19);
        uint64_t v14 = v20 * v18;
        if (v16 == (v16 & 0x3FFFFFFFFFFFFFFELL)) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v14 = 1;
        std::locale v15 = (unint64_t *)a1[2];
      }
      do
      {
        uint64_t v21 = *v15++;
        v14 *= v21;
      }
      while (v15 != (unint64_t *)v3);
LABEL_21:
      if (!v14) {
        return result;
      }
      uint64_t v22 = (uint64_t)v12 >> 3;
      uint64_t v158 = *a1;
      if ((uint64_t)v12 >> 3 != 3)
      {
        if (v22 != 2)
        {
          if (v22 == 1)
          {
            unint64_t v23 = *v4;
            if (!*v4) {
              return result;
            }
            uint64_t v24 = a2[8];
            uint64_t v25 = a1[8];
            uint64_t v26 = *a2;
            uint64_t v27 = *(void *)a1[5];
            uint64_t v28 = *(void *)a2[5];
            if (v23 < 0xC) {
              goto LABEL_27;
            }
            unint64_t v29 = 0;
            if (v27 != 1 || v28 != 1) {
              goto LABEL_28;
            }
            float32x4_t v142 = (__n128 *)(4 * v25 + v13);
            uint64_t v143 = (__n128 *)(4 * v24 + v26);
            if ((unint64_t)((char *)v142 - (char *)v143) < 0x20)
            {
LABEL_27:
              unint64_t v29 = 0;
            }
            else
            {
              unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF8;
              v24 += v23 & 0xFFFFFFFFFFFFFFF8;
              v25 += v23 & 0xFFFFFFFFFFFFFFF8;
              uint64_t v144 = v143 + 1;
              uint64_t v145 = v142 + 1;
              unint64_t v146 = v23 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                __n128 result = v144[-1];
                __n128 v147 = *v144;
                v145[-1] = result;
                __n128 *v145 = v147;
                v144 += 2;
                v145 += 2;
                v146 -= 8;
              }
              while (v146);
              if (v23 == v29) {
                return result;
              }
            }
LABEL_28:
            unint64_t v30 = v23 - v29;
            uint64_t v31 = (unsigned __int32 *)(v26 + 4 * v24);
            uint64_t v32 = 4 * v27;
            uint64_t v33 = (unsigned __int32 *)(v13 + 4 * v25);
            do
            {
              result.n128_u32[0] = *v31;
              unsigned __int32 *v33 = *v31;
              v31 += v28;
              uint64_t v33 = (unsigned __int32 *)((char *)v33 + v32);
              --v30;
            }
            while (v30);
            return result;
          }
          if ((v12 & 0x8000000000000000) != 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v103 = operator new(v12);
          bzero(v103, v12 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v104 = *a2;
          if (v12 >> 3 <= 1) {
            unint64_t v105 = 1;
          }
          else {
            unint64_t v105 = v12 >> 3;
          }
          uint64_t v106 = a2[5];
          uint64_t v107 = a2[8];
          uint64_t v108 = v105 & 0x1FFFFFFFFFFFFFFELL;
          uint64_t v109 = a1[5];
          while (v105 >= 2)
          {
            uint64_t v112 = 0;
            uint64_t v113 = 0;
            uint64_t v114 = v105 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v115 = (void *)(v109 + 8);
            uint64_t v116 = v103 + 1;
            do
            {
              v112 += *(v115 - 1) * *(v116 - 1);
              v113 += *v115 * *v116;
              v116 += 2;
              v115 += 2;
              v114 -= 2;
            }
            while (v114);
            uint64_t v110 = v113 + v112;
            uint64_t v111 = v105 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v13 = v158;
            if (v105 != v108) {
              goto LABEL_84;
            }
LABEL_86:
            if (v105 < 2)
            {
              uint64_t v124 = 0;
              uint64_t v125 = 0;
LABEL_91:
              unint64_t v131 = v105 - v125;
              uint64_t v132 = v125;
              uint64_t v133 = (uint64_t *)(v106 + 8 * v125);
              uint64_t v134 = &v103[v132];
              do
              {
                uint64_t v136 = *v134++;
                uint64_t v135 = v136;
                uint64_t v137 = *v133++;
                v124 += v137 * v135;
                --v131;
              }
              while (v131);
              goto LABEL_93;
            }
            uint64_t v126 = 0;
            uint64_t v127 = 0;
            uint64_t v128 = v105 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v129 = (void *)(v106 + 8);
            uint64_t v130 = v103 + 1;
            do
            {
              v126 += *(v129 - 1) * *(v130 - 1);
              v127 += *v129 * *v130;
              v130 += 2;
              v129 += 2;
              v128 -= 2;
            }
            while (v128);
            uint64_t v124 = v127 + v126;
            uint64_t v125 = v105 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v13 = v158;
            if (v105 != v108) {
              goto LABEL_91;
            }
LABEL_93:
            *(_DWORD *)(v13 + 4 * v110) = *(_DWORD *)(v104 + 4 * (v107 + v124));
            if ((int)(v12 >> 3) >= 1)
            {
              uint64_t v138 = (v12 >> 3) + 1;
              int v139 = v12 >> 3;
              while (1)
              {
                uint64_t v140 = (v138 - 2);
                unint64_t v141 = v103[v140] + 1;
                v103[v140] = v141;
                if (v141 < v4[v140]) {
                  break;
                }
                v103[(v138 - 2)] = 0;
                --v139;
                if ((unint64_t)--v138 <= 1) {
                  goto LABEL_99;
                }
              }
              if (v139 > 0) {
                continue;
              }
            }
LABEL_99:
            operator delete(v103);
            return result;
          }
          uint64_t v110 = 0;
          uint64_t v111 = 0;
LABEL_84:
          unint64_t v117 = v105 - v111;
          uint64_t v118 = v111;
          uint64_t v119 = (uint64_t *)(v109 + 8 * v111);
          uint64_t v120 = &v103[v118];
          do
          {
            uint64_t v122 = *v120++;
            uint64_t v121 = v122;
            uint64_t v123 = *v119++;
            v110 += v123 * v121;
            --v117;
          }
          while (v117);
          goto LABEL_86;
        }
        unint64_t v35 = *v4;
        if (!*v4) {
          return result;
        }
        uint64_t v36 = 0;
        uint64_t v37 = a2[8];
        uint64_t v38 = a1[8];
        unint64_t v39 = v4[1];
        uint64_t v40 = *a2;
        uint64_t v41 = (uint64_t *)a2[5];
        uint64_t v42 = (uint64_t *)a1[5];
        uint64_t v43 = *v42;
        unint64_t v44 = (__n128 *)(v13 + 4 * v38);
        uint64_t v45 = 4 * *v42;
        uint64_t v46 = *a2 + 4 * v37;
        uint64_t v47 = *v41;
        uint64_t v48 = 4 * *v41;
        unint64_t v49 = v39 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v50 = v44 + 1;
        uint64_t v51 = (__n128 *)(v46 + 16);
        while (!v39)
        {
LABEL_33:
          v38 += v43;
          v37 += v47;
          ++v36;
          unint64_t v50 = (__n128 *)((char *)v50 + v45);
          uint64_t v51 = (__n128 *)((char *)v51 + v48);
          if (v36 == v35) {
            return result;
          }
        }
        uint64_t v52 = v42[1];
        uint64_t v53 = v41[1];
        if (v39 >= 8)
        {
          unint64_t v54 = 0;
          if (v52 == 1 && v53 == 1)
          {
            uint64_t v55 = v37;
            uint64_t v56 = v38;
            if ((unint64_t)v44->n128_u64 + v45 * v36 - v46 - v48 * v36 >= 0x20)
            {
              uint64_t v55 = v37 + v49 * v53;
              uint64_t v63 = v51;
              uint64_t v64 = v50;
              unint64_t v65 = v39 & 0xFFFFFFFFFFFFFFF8;
              uint64_t v56 = v38 + v49 * v52;
              do
              {
                __n128 result = v63[-1];
                __n128 v66 = *v63;
                v64[-1] = result;
                __n128 *v64 = v66;
                v64 += 2;
                v63 += 2;
                v65 -= 8;
              }
              while (v65);
              unint64_t v54 = v39 & 0xFFFFFFFFFFFFFFF8;
              if (v39 == v49) {
                goto LABEL_33;
              }
            }
            goto LABEL_38;
          }
        }
        else
        {
          unint64_t v54 = 0;
        }
        uint64_t v55 = v37;
        uint64_t v56 = v38;
LABEL_38:
        unint64_t v57 = v39 - v54;
        unint64_t v58 = (unsigned __int32 *)(v40 + 4 * v55);
        uint64_t v59 = 4 * v53;
        uint64_t v60 = 4 * v52;
        unint64_t v61 = (unsigned __int32 *)(v158 + 4 * v56);
        do
        {
          result.n128_u32[0] = *v58;
          *unint64_t v61 = *v58;
          unint64_t v58 = (unsigned __int32 *)((char *)v58 + v59);
          unint64_t v61 = (unsigned __int32 *)((char *)v61 + v60);
          --v57;
        }
        while (v57);
        goto LABEL_33;
      }
      unint64_t v154 = *v4;
      if (!*v4) {
        return result;
      }
      uint64_t v67 = 0;
      uint64_t v68 = a2[8];
      uint64_t v69 = a1[8];
      unint64_t v70 = v4[1];
      float16x8_t v71 = (uint64_t *)a1[5];
      uint64_t v150 = (uint64_t *)a2[5];
      uint64_t v151 = a1[2];
      uint64_t v152 = *v150;
      uint64_t v153 = *v71;
      uint64_t v156 = 4 * *v71;
      uint64_t v155 = 4 * *v150;
      uint64_t v148 = 4 * v68;
      int v149 = (__n128 *)(v13 + 4 * v69);
      float32x4_t v72 = v149 + 1;
      uint64_t v73 = 4 * v68 + 16;
      while (!v70)
      {
LABEL_53:
        v69 += v153;
        v68 += v152;
        ++v67;
        float32x4_t v72 = (__n128 *)((char *)v72 + v156);
        v73 += v155;
        if (v67 == v154) {
          return result;
        }
      }
      uint64_t v74 = 0;
      unint64_t v75 = *(void *)(v151 + 16);
      uint64_t v76 = *a2;
      uint64_t v77 = v71[1];
      uint64_t v78 = v150[1];
      uint64_t v79 = 4 * v77;
      uint64_t v80 = v148 + v155 * v67 + *a2;
      uint64_t v81 = 4 * v78;
      unint64_t v82 = v75 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v83 = a2[5];
      uint64_t v84 = (__n128 *)(*a2 + v73);
      uint64_t v85 = v72;
      uint64_t v86 = v68;
      uint64_t v87 = v69;
      while (!v75)
      {
LABEL_56:
        v87 += v77;
        v86 += v78;
        ++v74;
        uint64_t v85 = (__n128 *)((char *)v85 + v79);
        uint64_t v84 = (__n128 *)((char *)v84 + v81);
        if (v74 == v70) {
          goto LABEL_53;
        }
      }
      uint64_t v88 = v71[2];
      uint64_t v89 = *(void *)(v83 + 16);
      if (v75 >= 8)
      {
        unint64_t v90 = 0;
        if (v88 == 1 && v89 == 1)
        {
          uint64_t v91 = v86;
          uint64_t v92 = v87;
          if ((unint64_t)v149->n128_u64 + v156 * v67 + v79 * v74 - v80 - v81 * v74 >= 0x20)
          {
            uint64_t v91 = v86 + v82 * v89;
            uint64_t v99 = v84;
            uint64_t v100 = v85;
            unint64_t v101 = v75 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v92 = v87 + v82 * v88;
            do
            {
              __n128 result = v99[-1];
              __n128 v102 = *v99;
              v100[-1] = result;
              *uint64_t v100 = v102;
              v100 += 2;
              v99 += 2;
              v101 -= 8;
            }
            while (v101);
            unint64_t v90 = v75 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v13 = v158;
            if (v75 == v82) {
              goto LABEL_56;
            }
          }
          goto LABEL_61;
        }
      }
      else
      {
        unint64_t v90 = 0;
      }
      uint64_t v91 = v86;
      uint64_t v92 = v87;
LABEL_61:
      unint64_t v93 = v75 - v90;
      BOOL v94 = (unsigned __int32 *)(v76 + 4 * v91);
      uint64_t v95 = 4 * v89;
      uint64_t v96 = 4 * v88;
      uint64_t v97 = (unsigned __int32 *)(v13 + 4 * v92);
      do
      {
        result.n128_u32[0] = *v94;
        unsigned __int32 *v97 = *v94;
        BOOL v94 = (unsigned __int32 *)((char *)v94 + v95);
        uint64_t v97 = (unsigned __int32 *)((char *)v97 + v96);
        --v93;
      }
      while (v93);
      goto LABEL_56;
    }
  }
  return result;
}

void sub_192532774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _ZZN5nitro7ndarrayIfE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clIS1_EEDaS5_EUlRfRKfE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unint64_t v10 = __p;
      }
      else {
        unint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZN5nitro7ndarrayIfE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clIS1_EEDaS5_EUlRfRKfE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_192532A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro7ndarrayIfE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIfEES3_vENKUlT_E_clIS1_EEDaS5_EUlRfRKfE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float v4 = __p;
      }
      else {
        float v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192532BA4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192532BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192532BB0);
}

uint64_t nitro::ndarray<float>::ndarray(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  float v4 = (void *)(a1 + 16);
  uint64_t v5 = (void *)(a1 + 40);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  if (*(_DWORD *)a2 != 9) {
    nitro::ndarray<float>::ndarray(nitro::ndarray_container const&)::{lambda(void)#1}::operator()();
  }
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v6;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v4 != (void *)(a2 + 24)) {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v4, *(char **)(a2 + 24), *(char **)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3);
  }
  if (v5 != (void *)(a2 + 48)) {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v5, *(char **)(a2 + 48), *(char **)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3);
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 72);
  return a1;
}

void sub_192532CFC(_Unwind_Exception *a1)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v6;
    operator delete(v6);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::ndarray(nitro::ndarray_container const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"int(nc.m_primitive)", 19);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"int(primitive_type_to_enum<T>::value)", 37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  unsigned __int8 v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  size_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unsigned __int8 v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 108, 1);
    std::stringbuf::str();
    std::locale v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      unint64_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        size_t v17 = __p;
      }
      else {
        size_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::ndarray<float>::ndarray(nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192533050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::ndarray(nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 108, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float v4 = __p;
      }
      else {
        float v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925331D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925331EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925331E4);
}

void _ZZZNK5nitro17ndarray_container5visitIZNKS0_4castIfEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float v4 = __p;
      }
      else {
        float v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192533350(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192533364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19253335CLL);
}

void nitro::ndarray<float>::canonicalize(void)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_valid()", 10);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 555, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<float>::canonicalize(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19253360C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

__n128 nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>::canonicalize(void)::{lambda(float &,float const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  float v4 = (unint64_t *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return result;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>::canonicalize(void)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>::canonicalize(void)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 != (char *)v4)
  {
    uint64_t v13 = *a1;
    if (*a1)
    {
      if (v12 - 8 >= 8)
      {
        unint64_t v16 = ((v12 - 8) >> 3) + 1;
        std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
        size_t v17 = v4 + 1;
        uint64_t v18 = 1;
        uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
        uint64_t v20 = 1;
        do
        {
          v18 *= *(v17 - 1);
          v20 *= *v17;
          v17 += 2;
          v19 -= 2;
        }
        while (v19);
        uint64_t v14 = v20 * v18;
        if (v16 == (v16 & 0x3FFFFFFFFFFFFFFELL)) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v14 = 1;
        std::locale v15 = (unint64_t *)a1[2];
      }
      do
      {
        uint64_t v21 = *v15++;
        v14 *= v21;
      }
      while (v15 != (unint64_t *)v3);
LABEL_21:
      if (!v14) {
        return result;
      }
      uint64_t v22 = (uint64_t)v12 >> 3;
      uint64_t v158 = *a1;
      if ((uint64_t)v12 >> 3 != 3)
      {
        if (v22 != 2)
        {
          if (v22 == 1)
          {
            unint64_t v23 = *v4;
            if (!*v4) {
              return result;
            }
            uint64_t v24 = a2[8];
            uint64_t v25 = a1[8];
            uint64_t v26 = *a2;
            uint64_t v27 = *(void *)a1[5];
            uint64_t v28 = *(void *)a2[5];
            if (v23 < 0xC) {
              goto LABEL_27;
            }
            unint64_t v29 = 0;
            if (v27 != 1 || v28 != 1) {
              goto LABEL_28;
            }
            float32x4_t v142 = (__n128 *)(4 * v25 + v13);
            uint64_t v143 = (__n128 *)(4 * v24 + v26);
            if ((unint64_t)((char *)v142 - (char *)v143) < 0x20)
            {
LABEL_27:
              unint64_t v29 = 0;
            }
            else
            {
              unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF8;
              v24 += v23 & 0xFFFFFFFFFFFFFFF8;
              v25 += v23 & 0xFFFFFFFFFFFFFFF8;
              uint64_t v144 = v143 + 1;
              uint64_t v145 = v142 + 1;
              unint64_t v146 = v23 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                __n128 result = v144[-1];
                __n128 v147 = *v144;
                v145[-1] = result;
                __n128 *v145 = v147;
                v144 += 2;
                v145 += 2;
                v146 -= 8;
              }
              while (v146);
              if (v23 == v29) {
                return result;
              }
            }
LABEL_28:
            unint64_t v30 = v23 - v29;
            uint64_t v31 = (unsigned __int32 *)(v26 + 4 * v24);
            uint64_t v32 = 4 * v27;
            uint64_t v33 = (unsigned __int32 *)(v13 + 4 * v25);
            do
            {
              result.n128_u32[0] = *v31;
              unsigned __int32 *v33 = *v31;
              v31 += v28;
              uint64_t v33 = (unsigned __int32 *)((char *)v33 + v32);
              --v30;
            }
            while (v30);
            return result;
          }
          if ((v12 & 0x8000000000000000) != 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v103 = operator new(v12);
          bzero(v103, v12 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v104 = *a2;
          if (v12 >> 3 <= 1) {
            unint64_t v105 = 1;
          }
          else {
            unint64_t v105 = v12 >> 3;
          }
          uint64_t v106 = a2[5];
          uint64_t v107 = a2[8];
          uint64_t v108 = v105 & 0x1FFFFFFFFFFFFFFELL;
          uint64_t v109 = a1[5];
          while (v105 >= 2)
          {
            uint64_t v112 = 0;
            uint64_t v113 = 0;
            uint64_t v114 = v105 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v115 = (void *)(v109 + 8);
            uint64_t v116 = v103 + 1;
            do
            {
              v112 += *(v115 - 1) * *(v116 - 1);
              v113 += *v115 * *v116;
              v116 += 2;
              v115 += 2;
              v114 -= 2;
            }
            while (v114);
            uint64_t v110 = v113 + v112;
            uint64_t v111 = v105 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v13 = v158;
            if (v105 != v108) {
              goto LABEL_84;
            }
LABEL_86:
            if (v105 < 2)
            {
              uint64_t v124 = 0;
              uint64_t v125 = 0;
LABEL_91:
              unint64_t v131 = v105 - v125;
              uint64_t v132 = v125;
              uint64_t v133 = (uint64_t *)(v106 + 8 * v125);
              uint64_t v134 = &v103[v132];
              do
              {
                uint64_t v136 = *v134++;
                uint64_t v135 = v136;
                uint64_t v137 = *v133++;
                v124 += v137 * v135;
                --v131;
              }
              while (v131);
              goto LABEL_93;
            }
            uint64_t v126 = 0;
            uint64_t v127 = 0;
            uint64_t v128 = v105 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v129 = (void *)(v106 + 8);
            uint64_t v130 = v103 + 1;
            do
            {
              v126 += *(v129 - 1) * *(v130 - 1);
              v127 += *v129 * *v130;
              v130 += 2;
              v129 += 2;
              v128 -= 2;
            }
            while (v128);
            uint64_t v124 = v127 + v126;
            uint64_t v125 = v105 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v13 = v158;
            if (v105 != v108) {
              goto LABEL_91;
            }
LABEL_93:
            *(_DWORD *)(v13 + 4 * v110) = *(_DWORD *)(v104 + 4 * (v107 + v124));
            if ((int)(v12 >> 3) >= 1)
            {
              uint64_t v138 = (v12 >> 3) + 1;
              int v139 = v12 >> 3;
              while (1)
              {
                uint64_t v140 = (v138 - 2);
                unint64_t v141 = v103[v140] + 1;
                v103[v140] = v141;
                if (v141 < v4[v140]) {
                  break;
                }
                v103[(v138 - 2)] = 0;
                --v139;
                if ((unint64_t)--v138 <= 1) {
                  goto LABEL_99;
                }
              }
              if (v139 > 0) {
                continue;
              }
            }
LABEL_99:
            operator delete(v103);
            return result;
          }
          uint64_t v110 = 0;
          uint64_t v111 = 0;
LABEL_84:
          unint64_t v117 = v105 - v111;
          uint64_t v118 = v111;
          uint64_t v119 = (uint64_t *)(v109 + 8 * v111);
          uint64_t v120 = &v103[v118];
          do
          {
            uint64_t v122 = *v120++;
            uint64_t v121 = v122;
            uint64_t v123 = *v119++;
            v110 += v123 * v121;
            --v117;
          }
          while (v117);
          goto LABEL_86;
        }
        unint64_t v35 = *v4;
        if (!*v4) {
          return result;
        }
        uint64_t v36 = 0;
        uint64_t v37 = a2[8];
        uint64_t v38 = a1[8];
        unint64_t v39 = v4[1];
        uint64_t v40 = *a2;
        uint64_t v41 = (uint64_t *)a2[5];
        uint64_t v42 = (uint64_t *)a1[5];
        uint64_t v43 = *v42;
        unint64_t v44 = (__n128 *)(v13 + 4 * v38);
        uint64_t v45 = 4 * *v42;
        uint64_t v46 = *a2 + 4 * v37;
        uint64_t v47 = *v41;
        uint64_t v48 = 4 * *v41;
        unint64_t v49 = v39 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v50 = v44 + 1;
        uint64_t v51 = (__n128 *)(v46 + 16);
        while (!v39)
        {
LABEL_33:
          v38 += v43;
          v37 += v47;
          ++v36;
          unint64_t v50 = (__n128 *)((char *)v50 + v45);
          uint64_t v51 = (__n128 *)((char *)v51 + v48);
          if (v36 == v35) {
            return result;
          }
        }
        uint64_t v52 = v42[1];
        uint64_t v53 = v41[1];
        if (v39 >= 8)
        {
          unint64_t v54 = 0;
          if (v52 == 1 && v53 == 1)
          {
            uint64_t v55 = v37;
            uint64_t v56 = v38;
            if ((unint64_t)v44->n128_u64 + v45 * v36 - v46 - v48 * v36 >= 0x20)
            {
              uint64_t v55 = v37 + v49 * v53;
              uint64_t v63 = v51;
              uint64_t v64 = v50;
              unint64_t v65 = v39 & 0xFFFFFFFFFFFFFFF8;
              uint64_t v56 = v38 + v49 * v52;
              do
              {
                __n128 result = v63[-1];
                __n128 v66 = *v63;
                v64[-1] = result;
                __n128 *v64 = v66;
                v64 += 2;
                v63 += 2;
                v65 -= 8;
              }
              while (v65);
              unint64_t v54 = v39 & 0xFFFFFFFFFFFFFFF8;
              if (v39 == v49) {
                goto LABEL_33;
              }
            }
            goto LABEL_38;
          }
        }
        else
        {
          unint64_t v54 = 0;
        }
        uint64_t v55 = v37;
        uint64_t v56 = v38;
LABEL_38:
        unint64_t v57 = v39 - v54;
        unint64_t v58 = (unsigned __int32 *)(v40 + 4 * v55);
        uint64_t v59 = 4 * v53;
        uint64_t v60 = 4 * v52;
        unint64_t v61 = (unsigned __int32 *)(v158 + 4 * v56);
        do
        {
          result.n128_u32[0] = *v58;
          *unint64_t v61 = *v58;
          unint64_t v58 = (unsigned __int32 *)((char *)v58 + v59);
          unint64_t v61 = (unsigned __int32 *)((char *)v61 + v60);
          --v57;
        }
        while (v57);
        goto LABEL_33;
      }
      unint64_t v154 = *v4;
      if (!*v4) {
        return result;
      }
      uint64_t v67 = 0;
      uint64_t v68 = a2[8];
      uint64_t v69 = a1[8];
      unint64_t v70 = v4[1];
      float16x8_t v71 = (uint64_t *)a1[5];
      uint64_t v150 = (uint64_t *)a2[5];
      uint64_t v151 = a1[2];
      uint64_t v152 = *v150;
      uint64_t v153 = *v71;
      uint64_t v156 = 4 * *v71;
      uint64_t v155 = 4 * *v150;
      uint64_t v148 = 4 * v68;
      int v149 = (__n128 *)(v13 + 4 * v69);
      float32x4_t v72 = v149 + 1;
      uint64_t v73 = 4 * v68 + 16;
      while (!v70)
      {
LABEL_53:
        v69 += v153;
        v68 += v152;
        ++v67;
        float32x4_t v72 = (__n128 *)((char *)v72 + v156);
        v73 += v155;
        if (v67 == v154) {
          return result;
        }
      }
      uint64_t v74 = 0;
      unint64_t v75 = *(void *)(v151 + 16);
      uint64_t v76 = *a2;
      uint64_t v77 = v71[1];
      uint64_t v78 = v150[1];
      uint64_t v79 = 4 * v77;
      uint64_t v80 = v148 + v155 * v67 + *a2;
      uint64_t v81 = 4 * v78;
      unint64_t v82 = v75 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v83 = a2[5];
      uint64_t v84 = (__n128 *)(*a2 + v73);
      uint64_t v85 = v72;
      uint64_t v86 = v68;
      uint64_t v87 = v69;
      while (!v75)
      {
LABEL_56:
        v87 += v77;
        v86 += v78;
        ++v74;
        uint64_t v85 = (__n128 *)((char *)v85 + v79);
        uint64_t v84 = (__n128 *)((char *)v84 + v81);
        if (v74 == v70) {
          goto LABEL_53;
        }
      }
      uint64_t v88 = v71[2];
      uint64_t v89 = *(void *)(v83 + 16);
      if (v75 >= 8)
      {
        unint64_t v90 = 0;
        if (v88 == 1 && v89 == 1)
        {
          uint64_t v91 = v86;
          uint64_t v92 = v87;
          if ((unint64_t)v149->n128_u64 + v156 * v67 + v79 * v74 - v80 - v81 * v74 >= 0x20)
          {
            uint64_t v91 = v86 + v82 * v89;
            uint64_t v99 = v84;
            uint64_t v100 = v85;
            unint64_t v101 = v75 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v92 = v87 + v82 * v88;
            do
            {
              __n128 result = v99[-1];
              __n128 v102 = *v99;
              v100[-1] = result;
              *uint64_t v100 = v102;
              v100 += 2;
              v99 += 2;
              v101 -= 8;
            }
            while (v101);
            unint64_t v90 = v75 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v13 = v158;
            if (v75 == v82) {
              goto LABEL_56;
            }
          }
          goto LABEL_61;
        }
      }
      else
      {
        unint64_t v90 = 0;
      }
      uint64_t v91 = v86;
      uint64_t v92 = v87;
LABEL_61:
      unint64_t v93 = v75 - v90;
      BOOL v94 = (unsigned __int32 *)(v76 + 4 * v91);
      uint64_t v95 = 4 * v89;
      uint64_t v96 = 4 * v88;
      uint64_t v97 = (unsigned __int32 *)(v13 + 4 * v92);
      do
      {
        result.n128_u32[0] = *v94;
        unsigned __int32 *v97 = *v94;
        BOOL v94 = (unsigned __int32 *)((char *)v94 + v95);
        uint64_t v97 = (unsigned __int32 *)((char *)v97 + v96);
        --v93;
      }
      while (v93);
      goto LABEL_56;
    }
  }
  return result;
}

void sub_192533D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *nitro::ndarray<float>::ndarray(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  uint64_t v6 = (unsigned char *)a2[2];
  unint64_t v5 = (unsigned char *)a2[3];
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    a1[2] = v8;
    a1[3] = v8;
    unint64_t v9 = &v8[8 * (v7 >> 3)];
    a1[4] = v9;
    memcpy(v8, v6, v7);
    a1[3] = v9;
  }
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  uint64_t v11 = (unsigned char *)a2[5];
  unint64_t v10 = (unsigned char *)a2[6];
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = (char *)operator new(v10 - v11);
    a1[5] = v13;
    a1[6] = v13;
    uint64_t v14 = &v13[8 * (v12 >> 3)];
    a1[7] = v14;
    memcpy(v13, v11, v12);
    a1[6] = v14;
  }
  a1[8] = a2[8];
  return a1;
}

void sub_192533E58(_Unwind_Exception *a1)
{
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v6;
    operator delete(v6);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::canonicalize(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 555, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  int64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192533FDC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192533FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192533FE8);
}

void nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>::canonicalize(void)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>::canonicalize(void)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>::canonicalize(void)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>::canonicalize(void)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192534298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>::canonicalize(void)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>::canonicalize(void)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  int64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192534420(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192534434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19253442CLL);
}

uint64_t std::vector<nitro::ndarray<float>>::__push_back_slow_path<nitro::ndarray<float> const&>(int64x2_t *a1, void *a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  if (0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0x8E38E38E38E38E39 * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v6 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v21 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x38E38E38E38E38ELL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int64_t v7 = (char *)operator new(72 * v6);
  }
  else
  {
    int64_t v7 = 0;
  }
  uint64_t v18 = v7;
  v19.i64[0] = (uint64_t)&v7[72 * v3];
  uint64_t v20 = &v7[72 * v6];
  nitro::ndarray<float>::ndarray(v19.i64[0], a2);
  uint64_t v8 = v19.i64[0];
  uint64_t v9 = v19.i64[0] + 72;
  v19.i64[1] = v19.i64[0] + 72;
  uint64_t v11 = a1->i64[0];
  unint64_t v10 = a1->u64[1];
  if (v10 == a1->i64[0])
  {
    int64x2_t v15 = vdupq_n_s64(v10);
  }
  else
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = v8 + v12;
      uint64_t v14 = v10 + v12;
      *(_OWORD *)(v13 - 72) = *(_OWORD *)(v10 + v12 - 72);
      *(void *)(v14 - 72) = 0;
      *(void *)(v14 - 64) = 0;
      *(void *)(v13 - 56) = 0;
      *(void *)(v13 - 48) = 0;
      *(void *)(v13 - 40) = 0;
      *(_OWORD *)(v13 - 56) = *(_OWORD *)(v10 + v12 - 56);
      *(void *)(v13 - 40) = *(void *)(v10 + v12 - 40);
      *(void *)(v14 - 56) = 0;
      *(void *)(v14 - 48) = 0;
      *(void *)(v14 - 40) = 0;
      *(void *)(v13 - 32) = 0;
      *(void *)(v13 - 24) = 0;
      *(void *)(v13 - 16) = 0;
      *(_OWORD *)(v13 - 32) = *(_OWORD *)(v10 + v12 - 32);
      *(void *)(v13 - 16) = *(void *)(v10 + v12 - 16);
      *(void *)(v14 - 32) = 0;
      *(void *)(v14 - 24) = 0;
      *(void *)(v14 - 16) = 0;
      *(void *)(v13 - 8) = *(void *)(v10 + v12 - 8);
      v12 -= 72;
    }
    while (v10 + v12 != v11);
    int64x2_t v15 = *a1;
    uint64_t v9 = v19.i64[1];
    v8 += v12;
  }
  a1->i64[0] = v8;
  a1->i64[1] = v9;
  int64x2_t v19 = v15;
  unint64_t v16 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v20;
  uint64_t v20 = v16;
  uint64_t v18 = (char *)v15.i64[0];
  std::__split_buffer<nitro::ndarray<float>>::~__split_buffer((uint64_t)&v18);
  return v9;
}

void sub_19253460C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<nitro::ndarray<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<nitro::ndarray<float>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    unint64_t v4 = *(void **)(i - 32);
    if (v4)
    {
      *(void *)(i - 24) = v4;
      operator delete(v4);
    }
    uint64_t v5 = *(void **)(i - 56);
    if (v5)
    {
      *(void *)(i - 48) = v5;
      operator delete(v5);
    }
    unint64_t v6 = *(std::__shared_weak_count **)(i - 64);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *std::vector<nitro::flexible_type>::__push_back_slow_path<nitro::flexible_type>(char **a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 3 > v4) {
    unint64_t v4 = v6 >> 3;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v7)
  {
    if (v7 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(16 * v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = &v8[16 * v3];
  unint64_t v10 = &v8[16 * v7];
  *(void *)uint64_t v9 = *(void *)a2;
  v9[8] = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a2 + 8) = 0;
  uint64_t v11 = v9 + 16;
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (!v13) {
      return v11;
    }
    goto LABEL_17;
  }
  do
  {
    *((void *)v9 - 2) = 0;
    v9 -= 16;
    v9[8] = 0;
    uint64_t v14 = *((void *)v13 - 2);
    v13 -= 16;
    v9[8] = v13[8];
    *(void *)uint64_t v9 = v14;
    v9[8] = v13[8];
    v13[8] = 0;
  }
  while (v13 != v12);
  int64x2_t v15 = *a1;
  uint64_t v13 = a1[1];
  *a1 = v9;
  a1[1] = v11;
  a1[2] = v10;
  if (v13 != v15)
  {
    do
    {
      v13 -= 16;
      std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t)v13);
    }
    while (v13 != v15);
    uint64_t v13 = v15;
  }
  if (v13) {
LABEL_17:
  }
    operator delete(v13);
  return v11;
}

void std::__shared_ptr_pointer<float *,std::shared_ptr<float>::__shared_ptr_default_delete<float,float>,std::allocator<float>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<float *,std::shared_ptr<float>::__shared_ptr_default_delete<float,float>,std::allocator<float>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x192FF16B0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<float *,std::shared_ptr<float>::__shared_ptr_default_delete<float,float>,std::allocator<float>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC5FD9
    || ((v3 & 0x8000000192DC5FD9 & 0x8000000000000000) != 0) != __OFSUB__(v3, 0x8000000192DC5FD9)
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC5FD9 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<float>::shared_ptr[abi:ne180100]<float,std::default_delete<float []>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_19253495C(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    MEMORY[0x192FF1690](v1, 0x1000C8052888210);
  }
  __cxa_rethrow();
}

void sub_192534984(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<float  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<float  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x192FF1690);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<float  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC605FLL
    || ((v3 & 0x8000000192DC605FLL & 0x8000000000000000) != 0) != __OFSUB__(v3, 0x8000000192DC605FLL)
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC605FLL & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t nitro::ndarray_container::ndarray_container<float,(void *)0>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)a1 = 9;
  uint64_t v8 = a2[1];
  *(void *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  unint64_t v10 = *(const void **)a3;
  uint64_t v9 = *(void *)(a3 + 8);
  int64_t v11 = v9 - *(void *)a3;
  if (v9 != *(void *)a3)
  {
    if (v11 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = (char *)operator new(v9 - *(void *)a3);
    *(void *)(a1 + 24) = v12;
    *(void *)(a1 + 32) = v12;
    uint64_t v13 = &v12[8 * (v11 >> 3)];
    *(void *)(a1 + 40) = v13;
    memcpy(v12, v10, v11);
    *(void *)(a1 + 32) = v13;
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v14 = *(const void **)a4;
  int64_t v15 = *(void *)(a4 + 8) - *(void *)a4;
  if (v15)
  {
    if (v15 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v16 = (char *)operator new(v15);
    *(void *)(a1 + 48) = v16;
    *(void *)(a1 + 56) = v16;
    size_t v17 = &v16[8 * (v15 >> 3)];
    *(void *)(a1 + 64) = v17;
    memcpy(v16, v14, v15);
    *(void *)(a1 + 56) = v17;
  }
  *(void *)(a1 + 72) = a5;
  nitro::impl::fill_shape_and_stride((uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48), (void *)(a1 + 72));
  return a1;
}

{
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  int64_t v11;
  char *v12;
  char *v13;
  void *v14;

  *(_DWORD *)a1 = 9;
  uint64_t v8 = a2[1];
  *(void *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  unint64_t v10 = *(const void **)a4;
  uint64_t v9 = *(void *)(a4 + 8);
  int64_t v11 = v9 - *(void *)a4;
  if (v9 != *(void *)a4)
  {
    if (v11 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = (char *)operator new(v9 - *(void *)a4);
    *(void *)(a1 + 48) = v12;
    *(void *)(a1 + 56) = v12;
    uint64_t v13 = &v12[8 * (v11 >> 3)];
    *(void *)(a1 + 64) = v13;
    memcpy(v12, v10, v11);
    *(void *)(a1 + 56) = v13;
  }
  *(void *)(a1 + 72) = a5;
  uint64_t v14 = operator new(8uLL);
  *uint64_t v14 = a3 - a5;
  *(void *)(a1 + 32) = v14 + 1;
  *(void *)(a1 + 40) = v14 + 1;
  *(void *)(a1 + 24) = v14;
  nitro::impl::fill_shape_and_stride((uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48), (void *)(a1 + 72));
  return a1;
}

void sub_192534B80(_Unwind_Exception *a1)
{
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v2 + 56) = v6;
    operator delete(v6);
  }
  unint64_t v7 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 32) = v7;
    operator delete(v7);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_192534CCC(_Unwind_Exception *a1)
{
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v2 + 56) = v6;
    operator delete(v6);
  }
  unint64_t v7 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 32) = v7;
    operator delete(v7);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_192534D0C()
{
  if (!*v0) {
    JUMPOUT(0x192534CECLL);
  }
  JUMPOUT(0x192534CE0);
}

void std::vector<nitro::flexible_type>::__assign_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(uint64_t *__sz, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v9 = (uint64_t)(__sz + 2);
  uint64_t v8 = __sz[2];
  uint64_t v10 = *__sz;
  if (a4 <= (v8 - *__sz) >> 4)
  {
    unint64_t v20 = (__sz[1] - v10) >> 4;
    if (v20 >= a4)
    {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nitro::flexible_type *,nitro::flexible_type *,nitro::flexible_type *>((uint64_t)&v31, a2, a3, v10);
      uint64_t v28 = v27;
      uint64_t v29 = __sz[1];
      if (v29 != v27)
      {
        do
        {
          v29 -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v9, v29);
        }
        while (v29 != v28);
      }
      __sz[1] = v28;
    }
    else
    {
      uint64_t v21 = &a2[2 * v20];
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nitro::flexible_type *,nitro::flexible_type *,nitro::flexible_type *>((uint64_t)&v30, a2, v21, v10);
      uint64_t v22 = __sz[1];
      if (v21 != a3)
      {
        uint64_t v23 = __sz[1];
        do
        {
          *(void *)uint64_t v23 = 0;
          *(unsigned char *)(v23 + 8) = 0;
          if (v21 != (uint64_t *)v23)
          {
            uint64_t v24 = *v21;
            *(unsigned char *)(v23 + 8) = *((unsigned char *)v21 + 8);
            *(void *)uint64_t v23 = v24;
            int v25 = *((unsigned __int8 *)v21 + 8);
            *(unsigned char *)(v23 + 8) = v25;
            if ((v25 - 2) < 4 || v25 == 9) {
              atomic_fetch_add(*(atomic_ullong *volatile *)v23, 1uLL);
            }
          }
          v21 += 2;
          v23 += 16;
          v22 += 16;
        }
        while (v21 != a3);
      }
      __sz[1] = v22;
    }
  }
  else
  {
    if (v10)
    {
      uint64_t v11 = __sz[1];
      uint64_t v12 = (void *)*__sz;
      if (v11 != v10)
      {
        do
        {
          v11 -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v9, v11);
        }
        while (v11 != v10);
        uint64_t v12 = (void *)*__sz;
      }
      __sz[1] = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *__sz = 0;
      __sz[1] = 0;
      __sz[2] = 0;
    }
    if (a4 >> 60) {
      goto LABEL_40;
    }
    uint64_t v13 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v13 = a4;
    }
    BOOL v14 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v15 = v13;
    }
    if (v15 >> 60) {
LABEL_40:
    }
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    uint64_t v16 = 2 * v15;
    size_t v17 = (uint64_t *)operator new(16 * v15);
    *__sz = (uint64_t)v17;
    __sz[1] = (uint64_t)v17;
    for (__sz[2] = (uint64_t)&v17[v16]; v6 != a3; v17 += 2)
    {
      *size_t v17 = 0;
      *((unsigned char *)v17 + 8) = 0;
      if (v6 != v17)
      {
        *size_t v17 = *v6;
        int v18 = *((unsigned __int8 *)v6 + 8);
        *((unsigned char *)v17 + 8) = v18;
        if ((v18 - 2) < 4 || v18 == 9) {
          atomic_fetch_add((atomic_ullong *volatile)*v17, 1uLL);
        }
      }
      v6 += 2;
    }
    __sz[1] = (uint64_t)v17;
  }
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nitro::flexible_type *,nitro::flexible_type *,nitro::flexible_type *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != (uint64_t *)a4)
      {
        switch(*(unsigned char *)(a4 + 8))
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)a4, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a4;
              if (!*(void *)a4) {
                goto LABEL_43;
              }
              if (*((char *)v7 + 31) < 0) {
                operator delete((void *)v7[1]);
              }
              atomic_ullong *volatile v8 = v7;
              uint64_t v9 = 0x1012C404EF22A49;
              goto LABEL_42;
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)a4, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a4;
              if (!*(void *)a4) {
                goto LABEL_43;
              }
              uint64_t v11 = (void *)v10[1];
              if (v11)
              {
                v10[2] = (atomic_ullong)v11;
                operator delete(v11);
              }
              atomic_ullong *volatile v8 = v10;
              uint64_t v9 = 0x1080C409938AC02;
              goto LABEL_42;
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)a4, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)a4;
              if (!*(void *)a4) {
                goto LABEL_43;
              }
              atomic_ullong v13 = v12[1];
              if (v13)
              {
                uint64_t v14 = v12[2];
                unint64_t v15 = (void *)v12[1];
                if (v14 != v13)
                {
                  do
                  {
                    v14 -= 16;
                    std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v12 + 3), v14);
                  }
                  while (v14 != v13);
                  unint64_t v15 = (void *)v12[1];
                }
                v12[2] = v13;
                goto LABEL_30;
              }
              goto LABEL_31;
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)a4, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)a4;
              if (!*(void *)a4) {
                goto LABEL_43;
              }
              atomic_ullong v16 = v12[1];
              if (v16)
              {
                uint64_t v17 = v12[2];
                int v18 = (void *)v12[1];
                if (v17 != v16)
                {
                  do
                    uint64_t v17 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v17 - 32);
                  while (v17 != v16);
                  int v18 = (void *)v12[1];
                }
                v12[2] = v16;
                unint64_t v15 = v18;
LABEL_30:
                operator delete(v15);
              }
LABEL_31:
              atomic_ullong *volatile v8 = v12;
              uint64_t v9 = 0x1020C405E66F15BLL;
              goto LABEL_42;
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)a4, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v19 = *(atomic_ullong *volatile *)a4;
              if (*(void *)a4)
              {
                unint64_t v20 = (void *)v19[7];
                if (v20)
                {
                  v19[8] = (atomic_ullong)v20;
                  operator delete(v20);
                }
                uint64_t v21 = (void *)v19[4];
                if (v21)
                {
                  v19[5] = (atomic_ullong)v21;
                  operator delete(v21);
                }
                uint64_t v22 = (std::__shared_weak_count *)v19[3];
                if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                  std::__shared_weak_count::__release_weak(v22);
                }
                atomic_ullong *volatile v8 = v19;
                uint64_t v9 = 0x10B0C4002311774;
LABEL_42:
                MEMORY[0x192FF16B0](v8, v9);
              }
LABEL_43:
              *(void *)a4 = 0;
            }
            break;
          default:
            break;
        }
        uint64_t v23 = *v5;
        *(unsigned char *)(a4 + 8) = *((unsigned char *)v5 + 8);
        *(void *)a4 = v23;
        int v24 = *((unsigned __int8 *)v5 + 8);
        *(unsigned char *)(a4 + 8) = v24;
        if ((v24 - 2) < 4 || v24 == 9) {
          atomic_fetch_add(*(atomic_ullong *volatile *)a4, 1uLL);
        }
      }
      v5 += 2;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::vector<nitro::ndarray<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 4);
        if (v6)
        {
          *((void *)v4 - 3) = v6;
          operator delete(v6);
        }
        atomic_ullong *volatile v7 = (void *)*((void *)v4 - 7);
        if (v7)
        {
          *((void *)v4 - 6) = v7;
          operator delete(v7);
        }
        atomic_ullong *volatile v8 = (std::__shared_weak_count *)*((void *)v4 - 8);
        if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        v4 -= 72;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<nitro::nitro_variable>::__push_back_slow_path<nitro::nitro_variable>(void **a1, uint64_t a2)
{
  uint64_t v3 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v5 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v5 >> 4 > v4) {
    unint64_t v4 = v5 >> 4;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v4;
  }
  if (v7 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v9 = 32 * v7;
  atomic_ullong *volatile v10 = (char *)operator new(32 * v7);
  uint64_t v11 = &v10[32 * v3];
  atomic_ullong *volatile v12 = &v10[v9];
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *((void *)v11 + 2) = *(void *)(a2 + 16);
  v11[24] = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a2 + 24) = 0;
  atomic_ullong v13 = v11 + 32;
  unint64_t v15 = (char *)*a1;
  uint64_t v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    if (!v14) {
      return v13;
    }
    goto LABEL_14;
  }
  uint64_t v16 = 0;
  do
  {
    uint64_t v17 = &v11[v16];
    int v18 = &v14[v16];
    *((_OWORD *)v17 - 2) = *(_OWORD *)&v14[v16 - 32];
    *((void *)v18 - 4) = 0;
    *((void *)v18 - 3) = 0;
    *((void *)v17 - 2) = *(void *)&v14[v16 - 16];
    *(v17 - 8) = v14[v16 - 8];
    *(v18 - 8) = 0;
    v16 -= 32;
  }
  while (&v14[v16] != v15);
  atomic_ullong *volatile v19 = (char *)*a1;
  uint64_t v14 = (char *)a1[1];
  *a1 = &v11[v16];
  a1[1] = v13;
  a1[2] = v12;
  if (v14 != v19)
  {
    do
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v14 - 32));
    while (v14 != v19);
    uint64_t v14 = v19;
  }
  if (v14) {
LABEL_14:
  }
    operator delete(v14);
  return v13;
}

uint64_t **std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  unint64_t v7 = a1 + 1;
  BOOL v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    if (v8 >= 0) {
      atomic_ullong *volatile v10 = a2;
    }
    else {
      atomic_ullong *volatile v10 = *a2;
    }
    while (1)
    {
      while (1)
      {
        uint64_t v11 = (uint64_t **)v6;
        uint64_t v14 = (const void *)v6[4];
        atomic_ullong *volatile v12 = v6 + 4;
        atomic_ullong v13 = v14;
        int v15 = *((char *)v12 + 23);
        if (v15 >= 0) {
          size_t v16 = *((unsigned __int8 *)v12 + 23);
        }
        else {
          size_t v16 = v12[1];
        }
        if (v15 >= 0) {
          uint64_t v17 = v12;
        }
        else {
          uint64_t v17 = v13;
        }
        if (v16 >= v9) {
          size_t v18 = v9;
        }
        else {
          size_t v18 = v16;
        }
        int v19 = memcmp(v10, v17, v18);
        BOOL v20 = v9 < v16;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        if (!v20) {
          break;
        }
        BOOL v6 = *v11;
        unint64_t v7 = v11;
        if (!*v11) {
          goto LABEL_27;
        }
      }
      int v21 = memcmp(v17, v10, v18);
      BOOL v22 = v16 < v9;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22) {
        return v11;
      }
      BOOL v6 = v11[1];
      if (!v6)
      {
        unint64_t v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    uint64_t v11 = a1 + 1;
LABEL_27:
    uint64_t v23 = (char *)operator new(0x48uLL);
    int v24 = (std::string *)(v23 + 32);
    int v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)v25, *((void *)v25 + 1));
    }
    else
    {
      long long v26 = *v25;
      *((void *)v23 + 6) = *((void *)v25 + 2);
      *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v26;
    }
    *((void *)v23 + 7) = 0;
    v23[64] = 0;
    *(void *)uint64_t v23 = 0;
    *((void *)v23 + 1) = 0;
    *((void *)v23 + 2) = v11;
    *unint64_t v7 = (uint64_t *)v23;
    uint64_t v27 = (uint64_t *)**a1;
    uint64_t v28 = (uint64_t *)v23;
    if (v27)
    {
      *a1 = v27;
      uint64_t v28 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_192535600(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

atomic_ullong *volatile *OUTLINED_FUNCTION_0_2(atomic_ullong *volatile *result)
{
  return result;
}

void OUTLINED_FUNCTION_4_1()
{
  JUMPOUT(0x192FF16B0);
}

void OUTLINED_FUNCTION_5_1()
{
  JUMPOUT(0x192FF16B0);
}

void OUTLINED_FUNCTION_6_0()
{
  JUMPOUT(0x192FF16B0);
}

void nitro::nitro_program::run(void *a1)
{
}

void nitro::variable_type::get_layer_shape(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_1920CB000, log, OS_LOG_TYPE_ERROR, "[Nitro]: Shape query for variable type not supported so using unknown shape", v1, 2u);
}

void nitro::ndarray_container::ndarray_container(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)a3;
  if (*(void *)a3)
  {
    *(void *)(a3 + 8) = v5;
    operator delete(v5);
  }
}

void nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(uint64_t a1)
{
}

void nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(atomic_ullong *volatile *a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_1_2(a1);
  if (v2)
  {
    atomic_ullong *volatile v3 = *v1;
    if (*v1)
    {
      if (*((char *)v3 + 31) < 0) {
        operator delete((void *)v3[1]);
      }
      OUTLINED_FUNCTION_5_1();
    }
  }
}

{
  atomic_ullong *volatile *v1;
  char v2;
  atomic_ullong *volatile v3;
  void *v4;

  uint64_t v1 = OUTLINED_FUNCTION_1_2(a1);
  if (v2)
  {
    atomic_ullong *volatile v3 = *v1;
    if (*v1)
    {
      unint64_t v4 = (void *)v3[1];
      if (v4)
      {
        v3[2] = (atomic_ullong)v4;
        operator delete(v4);
      }
      OUTLINED_FUNCTION_6_0();
    }
  }
}

{
  atomic_ullong *volatile *v1;
  char v2;
  atomic_ullong *volatile v3;

  uint64_t v1 = OUTLINED_FUNCTION_1_2(a1);
  if (v2)
  {
    atomic_ullong *volatile v3 = *v1;
    if (v3)
    {
      std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(v3);
      OUTLINED_FUNCTION_4_1();
    }
  }
}

{
  atomic_ullong *volatile *v1;
  char v2;
  uint64_t v3;

  uint64_t v1 = OUTLINED_FUNCTION_1_2(a1);
  if (v2)
  {
    atomic_ullong *volatile v3 = (uint64_t)*v1;
    if (v3)
    {
      std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(v3);
      OUTLINED_FUNCTION_2();
    }
  }
}

{
  atomic_ullong *volatile *v1;
  char v2;
  uint64_t v3;

  uint64_t v1 = OUTLINED_FUNCTION_1_2(a1);
  if (v2)
  {
    atomic_ullong *volatile v3 = (uint64_t)*v1;
    if (v3)
    {
      std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(v3);
      OUTLINED_FUNCTION_2();
    }
  }
}

{
  atomic_ullong *volatile *v1;
  char v2;
  atomic_ullong *volatile v3;

  uint64_t v1 = OUTLINED_FUNCTION_0_2(a1);
  if (v2)
  {
    atomic_ullong *volatile v3 = *v1;
    if (*v1)
    {
      if (*((char *)v3 + 31) < 0) {
        operator delete((void *)v3[1]);
      }
      OUTLINED_FUNCTION_5_1();
    }
  }
  OUTLINED_FUNCTION_5();
}

{
  atomic_ullong *volatile *v1;
  char v2;
  atomic_ullong *volatile v3;
  void *v4;

  uint64_t v1 = OUTLINED_FUNCTION_0_2(a1);
  if (v2)
  {
    atomic_ullong *volatile v3 = *v1;
    if (*v1)
    {
      unint64_t v4 = (void *)v3[1];
      if (v4)
      {
        v3[2] = (atomic_ullong)v4;
        operator delete(v4);
      }
      OUTLINED_FUNCTION_6_0();
    }
  }
  OUTLINED_FUNCTION_5();
}

{
  atomic_ullong *volatile *v1;
  char v2;
  atomic_ullong *volatile v3;

  uint64_t v1 = OUTLINED_FUNCTION_0_2(a1);
  if (v2)
  {
    atomic_ullong *volatile v3 = *v1;
    if (v3)
    {
      std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(v3);
      OUTLINED_FUNCTION_4_1();
    }
  }
  OUTLINED_FUNCTION_5();
}

{
  atomic_ullong *volatile *v1;
  char v2;
  uint64_t v3;

  uint64_t v1 = OUTLINED_FUNCTION_0_2(a1);
  if (v2)
  {
    atomic_ullong *volatile v3 = (uint64_t)*v1;
    if (v3)
    {
      std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(v3);
      OUTLINED_FUNCTION_2();
    }
  }
  OUTLINED_FUNCTION_5();
}

{
  atomic_ullong *volatile *v1;
  char v2;
  uint64_t v3;

  uint64_t v1 = OUTLINED_FUNCTION_0_2(a1);
  if (v2)
  {
    atomic_ullong *volatile v3 = (uint64_t)*v1;
    if (v3)
    {
      std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(v3);
      OUTLINED_FUNCTION_2();
    }
  }
  OUTLINED_FUNCTION_5();
}

void nitro::nitro_class::load_nitro_class(nitro::nitro_class *this, const nitro::ir::DEFCLASS *a2)
{
  std::string::operator=((std::string *)((char *)this + 16), (const std::string *)((char *)a2 + 8));
  atomic_ullong *volatile v3 = (uint64_t *)*((void *)a2 + 4);
  unint64_t v4 = (uint64_t *)*((void *)a2 + 5);
  if (v3 != v4)
  {
    while (1)
    {
      uint64_t v5 = *v3;
      v20[0] = (void *)(*v3 + 8);
      BOOL v6 = std::__hash_table<std::__hash_value_type<unsigned long,nitro::variable_type>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::variable_type>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::variable_type>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::variable_type>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)this + 40, (unint64_t *)v20[0], (uint64_t)&std::piecewise_construct, (void **)v20);
      uint64_t v7 = *((unsigned int *)v6 + 14);
      uint64_t v8 = *(unsigned int *)(v5 + 48);
      if (v7 != -1) {
        break;
      }
      if (v8 != -1) {
        goto LABEL_4;
      }
LABEL_5:
      if (++v3 == v4) {
        goto LABEL_9;
      }
    }
    if (v8 == -1)
    {
      size_t v9 = v6;
      ((void (*)(void **, char *))off_1EE39BA00[v7])(v20, v6 + 24);
      *((_DWORD *)v9 + 14) = -1;
      goto LABEL_5;
    }
LABEL_4:
    v20[0] = v6 + 24;
    ((void (*)(void **))off_1EE39BA38[v8])(v20);
    goto LABEL_5;
  }
LABEL_9:
  atomic_ullong *volatile v10 = (const nitro::ir::DEFMEMBERFUN **)*((void *)a2 + 7);
  uint64_t v11 = (const nitro::ir::DEFMEMBERFUN **)*((void *)a2 + 8);
  while (v10 != v11)
  {
    *(_OWORD *)std::string __p = 0u;
    long long v23 = 0u;
    *(_OWORD *)BOOL v20 = 0u;
    long long v21 = 0u;
    int v24 = 1065353216;
    nitro::nitro_function::load_nitro_function((nitro::nitro_function *)v20, *v10);
    uint64_t v19 = nitro::nitro_function::name((nitro::nitro_function *)v20);
    int v25 = &v19;
    atomic_ullong *volatile v12 = std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_function>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_function>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_function>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_function>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)this + 80, (unint64_t *)&v19, (uint64_t)&std::piecewise_construct, &v25);
    nitro::nitro_function::operator=((uint64_t)(v12 + 24), (long long *)v20);
    atomic_ullong v13 = (void *)v23;
    if ((void)v23)
    {
      do
      {
        uint64_t v14 = (void *)*v13;
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v13 + 3));
        operator delete(v13);
        atomic_ullong v13 = v14;
      }
      while (v14);
    }
    int v15 = __p[0];
    __p[0] = 0;
    if (v15) {
      operator delete(v15);
    }
    size_t v16 = (std::__shared_weak_count *)*((void *)&v21 + 1);
    if (*((void *)&v21 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      uint64_t v17 = (std::__shared_weak_count *)v20[1];
      if (v20[1])
      {
LABEL_19:
        if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
    else
    {
      uint64_t v17 = (std::__shared_weak_count *)v20[1];
      if (v20[1]) {
        goto LABEL_19;
      }
    }
    ++v10;
  }
  BYTE7(v21) = 8;
  strcpy((char *)v20, "__self__");
  nitro::SELF_ID = nitro::get_symbol_id((const std::string *)v20);
  if (SBYTE7(v21) < 0) {
    operator delete(v20[0]);
  }
}

void sub_192535C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_192535C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  nitro::nitro_function::~nitro_function((nitro::nitro_function *)va);
  _Unwind_Resume(a1);
}

uint64_t nitro::nitro_function::operator=(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v4;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  long long v6 = a2[1];
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = v6;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__move_assign(a1 + 32, (uint64_t *)a2 + 4);
  return a1;
}

void nitro::nitro_class::make_instance(uint64_t *a1@<X0>, uint64_t *a2@<X1>, nitro::nitro_instance **a3@<X8>)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  long long v6 = (char *)operator new(0x60uLL);
  *((void *)v6 + 2) = 0;
  *((void *)v6 + 1) = 0;
  *(void *)long long v6 = &unk_1EE380EE0;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *((void *)v6 + 9) = 0;
  *((void *)v6 + 10) = 0;
  *((_DWORD *)v6 + 18) = 1065353216;
  *((void *)v6 + 11) = 0;
  *a3 = (nitro::nitro_instance *)(v6 + 24);
  a3[1] = (nitro::nitro_instance *)v6;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v6 + 1, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit((atomic_ullong *volatile)v6 + 2, 1uLL, memory_order_relaxed);
  *((void *)v6 + 3) = v6 + 24;
  *((void *)v6 + 4) = v6;
  if (!atomic_fetch_add((atomic_ullong *volatile)v6 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v7 = (std::__shared_weak_count *)v6;
    (*(void (**)(char *))(*(void *)v6 + 16))(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)a1[1];
  if (!v8 || (v9 = *a1, (atomic_ullong *volatile v10 = std::__shared_weak_count::lock(v8)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v11 = *a3;
  atomic_ullong *volatile v12 = (std::__shared_weak_count *)*((void *)*a3 + 8);
  *((void *)v11 + 7) = v9;
  *((void *)v11 + 8) = v10;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    for (uint64_t i = (void *)a1[7]; i; uint64_t i = (void *)*i)
    {
LABEL_8:
      *(_OWORD *)std::string __p = 0u;
      long long v33 = 0u;
      uint64_t v14 = (uint64_t)*a3 + 16;
      v30.__r_.__value_.__r.__words[0] = (std::string::size_type)(i + 2);
      int v15 = std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v14, i + 2, (uint64_t)&std::piecewise_construct, &v30);
      nitro::nitro_variable::operator=((uint64_t)(v15 + 24), (long long *)__p);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)__p);
    }
  }
  else
  {
    uint64_t i = (void *)a1[7];
    if (i) {
      goto LABEL_8;
    }
  }
  BYTE7(v33) = 8;
  strcpy((char *)__p, "__init__");
  unint64_t symbol_id = nitro::get_symbol_id((const std::string *)__p);
  int8x8_t v17 = (int8x8_t)a1[11];
  if (!*(void *)&v17) {
    goto LABEL_25;
  }
  uint8x8_t v18 = (uint8x8_t)vcnt_s8(v17);
  v18.i16[0] = vaddlv_u8(v18);
  if (v18.u32[0] > 1uLL)
  {
    unint64_t v19 = symbol_id;
    if (symbol_id >= *(void *)&v17) {
      unint64_t v19 = symbol_id % *(void *)&v17;
    }
  }
  else
  {
    unint64_t v19 = (*(void *)&v17 - 1) & symbol_id;
  }
  BOOL v20 = *(void **)(a1[10] + 8 * v19);
  if (v20)
  {
    long long v21 = (void *)*v20;
    if (*v20)
    {
      do
      {
        unint64_t v22 = v21[1];
        if (symbol_id == v22)
        {
          if (v21[2] == symbol_id) {
            break;
          }
        }
        else
        {
          if (v18.u32[0] > 1uLL)
          {
            if (v22 >= *(void *)&v17) {
              v22 %= *(void *)&v17;
            }
          }
          else
          {
            v22 &= *(void *)&v17 - 1;
          }
          if (v22 != v19) {
            goto LABEL_25;
          }
        }
        long long v21 = (void *)*v21;
      }
      while (v21);
    }
  }
  else
  {
LABEL_25:
    long long v21 = 0;
  }
  if (SBYTE7(v33) < 0)
  {
    operator delete(__p[0]);
    if (!v21) {
      return;
    }
  }
  else if (!v21)
  {
    return;
  }
  long long v23 = *a3;
  *((unsigned char *)&v30.__r_.__value_.__s + 23) = 8;
  strcpy((char *)&v30, "__init__");
  unint64_t v24 = nitro::get_symbol_id(&v30);
  nitro::nitro_instance::get_member_function(v23, v24, (nitro::nitro_function *)__p);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  nitro::nitro_function::run((uint64_t *)__p, a2, (uint64_t)v31);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v31);
  int v25 = v35;
  if (v35)
  {
    do
    {
      long long v26 = (void *)*v25;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v25 + 3));
      operator delete(v25);
      int v25 = v26;
    }
    while (v26);
  }
  uint64_t v27 = v34;
  unint64_t v34 = 0;
  if (v27) {
    operator delete(v27);
  }
  uint64_t v28 = (std::__shared_weak_count *)*((void *)&v33 + 1);
  if (*((void *)&v33 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v33 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  uint64_t v29 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)__p[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_192536154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  nitro::nitro_function::~nitro_function((nitro::nitro_function *)&__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25);
  _Unwind_Resume(a1);
}

uint64_t nitro::nitro_variable::operator=(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v4;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (a2 != (long long *)a1)
  {
    long long v6 = (atomic_ullong *volatile *)(a1 + 16);
    switch(*(unsigned char *)(a1 + 24))
    {
      case 2:
        if (atomic_fetch_add(*v6, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v7 = *v6;
          if (!*v6) {
            goto LABEL_43;
          }
          if (*((char *)v7 + 31) < 0) {
            operator delete((void *)v7[1]);
          }
          atomic_ullong *volatile v8 = v7;
          uint64_t v9 = 0x1012C404EF22A49;
          goto LABEL_42;
        }
        break;
      case 3:
        if (atomic_fetch_add(*v6, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v10 = *v6;
          if (!*v6) {
            goto LABEL_43;
          }
          uint64_t v11 = (void *)v10[1];
          if (v11)
          {
            v10[2] = (atomic_ullong)v11;
            operator delete(v11);
          }
          atomic_ullong *volatile v8 = v10;
          uint64_t v9 = 0x1080C409938AC02;
          goto LABEL_42;
        }
        break;
      case 4:
        if (atomic_fetch_add(*v6, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v12 = *v6;
          if (!*v6) {
            goto LABEL_43;
          }
          atomic_ullong v13 = v12[1];
          if (v13)
          {
            uint64_t v14 = v12[2];
            int v15 = (void *)v12[1];
            if (v14 != v13)
            {
              do
              {
                v14 -= 16;
                std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v12 + 3), v14);
              }
              while (v14 != v13);
              int v15 = (void *)v12[1];
            }
            v12[2] = v13;
            goto LABEL_30;
          }
          goto LABEL_31;
        }
        break;
      case 5:
        if (atomic_fetch_add(*v6, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v12 = *v6;
          if (!*v6) {
            goto LABEL_43;
          }
          atomic_ullong v16 = v12[1];
          if (v16)
          {
            uint64_t v17 = v12[2];
            uint8x8_t v18 = (void *)v12[1];
            if (v17 != v16)
            {
              do
                uint64_t v17 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v17 - 32);
              while (v17 != v16);
              uint8x8_t v18 = (void *)v12[1];
            }
            v12[2] = v16;
            int v15 = v18;
LABEL_30:
            operator delete(v15);
          }
LABEL_31:
          atomic_ullong *volatile v8 = v12;
          uint64_t v9 = 0x1020C405E66F15BLL;
          goto LABEL_42;
        }
        break;
      case 9:
        if (atomic_fetch_add(*v6, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v19 = *v6;
          if (*v6)
          {
            BOOL v20 = (void *)v19[7];
            if (v20)
            {
              v19[8] = (atomic_ullong)v20;
              operator delete(v20);
            }
            long long v21 = (void *)v19[4];
            if (v21)
            {
              v19[5] = (atomic_ullong)v21;
              operator delete(v21);
            }
            unint64_t v22 = (std::__shared_weak_count *)v19[3];
            if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
            atomic_ullong *volatile v8 = v19;
            uint64_t v9 = 0x10B0C4002311774;
LABEL_42:
            MEMORY[0x192FF16B0](v8, v9);
          }
LABEL_43:
          atomic_ullong *volatile *v6 = 0;
        }
        break;
      default:
        break;
    }
    long long v23 = (atomic_ullong *)*((void *)a2 + 2);
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    atomic_ullong *volatile *v6 = v23;
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    *((unsigned char *)a2 + 24) = 0;
  }
  return a1;
}

void nitro::nitro_instance::get_member_function(nitro::nitro_instance *this@<X0>, unint64_t a2@<X1>, nitro::nitro_function *a3@<X8>)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  unint64_t v20 = a2;
  long long v4 = (int8x8_t *)*((void *)this + 7);
  int8x8_t v5 = v4[11];
  if (!*(void *)&v5) {
    goto LABEL_17;
  }
  atomic_ullong *volatile v7 = v4 + 10;
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v9 = a2;
    if (*(void *)&v5 <= a2) {
      unint64_t v9 = a2 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & a2;
  }
  atomic_ullong *volatile v10 = *(void **)(*(void *)v7 + 8 * v9);
  if (!v10 || (uint64_t v11 = (void *)*v10) == 0) {
LABEL_17:
  }
    nitro::nitro_instance::get_member_function(unsigned long)::$_0::operator()();
  while (1)
  {
    unint64_t v12 = v11[1];
    if (v12 == a2) {
      break;
    }
    if (v8.u32[0] > 1uLL)
    {
      if (v12 >= *(void *)&v5) {
        v12 %= *(void *)&v5;
      }
    }
    else
    {
      v12 &= *(void *)&v5 - 1;
    }
    if (v12 != v9) {
      goto LABEL_17;
    }
LABEL_10:
    uint64_t v11 = (void *)*v11;
    if (!v11) {
      goto LABEL_17;
    }
  }
  if (v11[2] != a2) {
    goto LABEL_10;
  }
  v21[0] = &v20;
  atomic_ullong v13 = std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_function>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_function>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_function>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_function>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v7, &v20, (uint64_t)&std::piecewise_construct, v21);
  nitro::nitro_function::nitro_function(a3, (const nitro::nitro_function *)(v13 + 24));
  unint64_t v14 = nitro::SELF_ID;
  atomic_ullong v16 = *(void **)this;
  int v15 = (std::__shared_weak_count *)*((void *)this + 1);
  if (!v15 || (uint64_t v17 = std::__shared_weak_count::lock(v15)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint8x8_t v18 = v17;
  v21[0] = v16;
  v21[1] = &v17->__vftable;
  p_shared_owners = &v17->__shared_owners_;
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  v21[2] = 0;
  char v22 = 0;
  nitro::nitro_function::bind(a3, v14, (const nitro::nitro_variable *)v21);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v21);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
}

void sub_192536690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&a12);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  nitro::nitro_function::~nitro_function(v12);
  _Unwind_Resume(a1);
}

BOOL nitro::nitro_instance::has_member_function(nitro::nitro_instance *this, unint64_t a2)
{
  char v2 = (int8x8_t *)*((void *)this + 7);
  int8x8_t v3 = v2[11];
  if (v3)
  {
    uint8x8_t v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      unint64_t v5 = a2;
      if (*(void *)&v3 <= a2) {
        unint64_t v5 = a2 % *(void *)&v3;
      }
    }
    else
    {
      unint64_t v5 = (*(void *)&v3 - 1) & a2;
    }
    uint64_t i = *(void **)(*(void *)&v2[10] + 8 * v5);
    if (i)
    {
      for (uint64_t i = (void *)*i; i; uint64_t i = (void *)*i)
      {
        unint64_t v7 = i[1];
        if (v7 == a2)
        {
          if (i[2] == a2) {
            return i != 0;
          }
        }
        else
        {
          if (v4.u32[0] > 1uLL)
          {
            if (v7 >= *(void *)&v3) {
              v7 %= *(void *)&v3;
            }
          }
          else
          {
            v7 &= *(void *)&v3 - 1;
          }
          if (v7 != v5) {
            goto LABEL_17;
          }
        }
      }
    }
  }
  else
  {
LABEL_17:
    uint64_t i = 0;
  }
  return i != 0;
}

void nitro::nitro_instance::get_member_function(unsigned long)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_class.cpp", 103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  char v2 = (void *)std::ostream::operator<<();
  int8x8_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint8x8_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_original_class->m_functions.count(name)", 41);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_class.cpp", "operator()", 60, 1);
    std::stringbuf::str();
    unint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint8x8_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_class.cpp", "operator()", 60, 1);
    std::stringbuf::str();
    atomic_ullong v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      unint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        int v15 = v23;
      }
      else {
        int v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  uint8x8_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1925369C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

nitro::nitro_function *nitro::nitro_function::nitro_function(nitro::nitro_function *this, const nitro::nitro_function *a2)
{
  uint64_t v3 = *((void *)a2 + 1);
  *(void *)this = *(void *)a2;
  *((void *)this + 1) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *((void *)a2 + 3);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)this + 3) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  std::unordered_map<unsigned long,nitro::nitro_variable>::unordered_map((uint64_t)this + 32, (uint64_t)a2 + 32);
  return this;
}

void sub_192536B58(_Unwind_Exception *a1)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  nitro::nitro_function::nitro_function((std::__shared_weak_count **)(v1 + 8));
  _Unwind_Resume(a1);
}

void nitro::nitro_instance::get_member_function(nitro::nitro_instance *a1@<X0>, const std::string *a2@<X1>, nitro::nitro_function *a3@<X8>)
{
  unint64_t symbol_id = nitro::get_symbol_id(a2);

  nitro::nitro_instance::get_member_function(a1, symbol_id, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v4 = *(_DWORD **)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 32);
  if (v5 != -1)
  {
    if (!v5)
    {
      *a2 = *a3;
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, _DWORD *))off_1EE39BA00[v5])(&v6, v4);
  }
  *uint64_t v4 = *a3;
  unsigned char v4[8] = 0;
  return result;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t *result, _DWORD *a2, uint64_t a3)
{
  if (*(_DWORD *)(*result + 32) == 1)
  {
    *a2 = *(_DWORD *)a3;
    if (a2 != (_DWORD *)a3)
    {
      uint64_t v3 = a2 + 2;
      uint64_t v4 = *(char **)(a3 + 8);
      uint64_t v5 = *(char **)(a3 + 16);
      return std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v3, v4, v5, (v5 - v4) >> 3);
    }
  }
  else
  {
    v6[0] = *result;
    v6[1] = a3;
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<nitro::PrimitiveType,nitro::tensor_type,std::shared_ptr<nitro::tuple_type>,std::shared_ptr<nitro::list_type>,nitro::string_type,nitro::class_type,std::shared_ptr<nitro::dict_type>>>::__assign_alt[abi:ne180100]<1ul,nitro::tensor_type,nitro::tensor_type const&>(std::__variant_detail::__alt<1ul,nitro::tensor_type> &,nitro::tensor_type const&)::{unnamed type#1}::operator()[abi:ne180100](v6);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t *a1, void *a2, uint64_t *a3)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t *a1, void *a2, uint64_t *a3)
{
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(unsigned int *)(*(void *)result + 32);
  if (v2 != -1)
  {
    if (v2 == 4) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE39BA00[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 32) = 4;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEERKS10_EEEDcSS_DpT0_(__n128 **a1, std::string *this, std::string *__str)
{
  char v3 = *a1;
  unsigned __int32 v4 = (*a1)[2].n128_u32[0];
  if (v4 != 5)
  {
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v6, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
      unsigned __int32 v4 = v3[2].n128_u32[0];
      if (v4 == -1)
      {
LABEL_10:
        __n128 result = *(__n128 *)&v6.__r_.__value_.__l.__data_;
        v3[1].n128_u64[0] = v6.__r_.__value_.__r.__words[2];
        *char v3 = result;
        v3[2].n128_u32[0] = 5;
        return result;
      }
    }
    else
    {
      std::string v6 = *__str;
      if (v4 == -1) {
        goto LABEL_10;
      }
    }
    ((void (*)(char *, __n128 *))off_1EE39BA00[v4])(&v7, v3);
    goto LABEL_10;
  }

  std::string::operator=(this, __str);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t *a1, void *a2, uint64_t *a3)
{
}

uint64_t *std::__variant_detail::__assignment<std::__variant_detail::__traits<nitro::PrimitiveType,nitro::tensor_type,std::shared_ptr<nitro::tuple_type>,std::shared_ptr<nitro::list_type>,nitro::string_type,nitro::class_type,std::shared_ptr<nitro::dict_type>>>::__assign_alt[abi:ne180100]<1ul,nitro::tensor_type,nitro::tensor_type const&>(std::__variant_detail::__alt<1ul,nitro::tensor_type> &,nitro::tensor_type const&)::{unnamed type#1}::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v2 = *result;
  uint64_t v1 = (int *)result[1];
  int v3 = *v1;
  uint64_t v5 = (unsigned char *)*((void *)v1 + 1);
  unsigned __int32 v4 = (unsigned char *)*((void *)v1 + 2);
  int64_t v6 = v4 - v5;
  if (v4 == v5)
  {
    uint8x8_t v8 = 0;
    char v7 = 0;
  }
  else
  {
    if (v6 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    char v7 = (char *)operator new(v4 - v5);
    uint8x8_t v8 = &v7[8 * (v6 >> 3)];
    __n128 result = (uint64_t *)memcpy(v7, v5, v6);
  }
  uint64_t v9 = *(unsigned int *)(v2 + 32);
  if (v9 != -1) {
    __n128 result = (uint64_t *)((uint64_t (*)(char *, uint64_t))off_1EE39BA00[v9])(&v10, v2);
  }
  *(_DWORD *)uint64_t v2 = v3;
  *(void *)(v2 + 8) = v7;
  *(void *)(v2 + 16) = v8;
  *(void *)(v2 + 24) = v8;
  *(_DWORD *)(v2 + 32) = 1;
  return result;
}

void sub_192536EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<nitro::PrimitiveType,nitro::tensor_type,std::shared_ptr<nitro::tuple_type>,std::shared_ptr<nitro::list_type>,nitro::string_type,nitro::class_type,std::shared_ptr<nitro::dict_type>>>::__assign_alt[abi:ne180100]<2ul,std::shared_ptr<nitro::tuple_type>,std::shared_ptr<nitro::tuple_type> const&>(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = *(unsigned int *)(a1 + 32);
  if (v5 != -1)
  {
    if (v5 == 2)
    {
      uint64_t v7 = *a3;
      uint64_t v6 = a3[1];
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      uint8x8_t v8 = (std::__shared_weak_count *)a2[1];
      *a2 = v7;
      a2[1] = v6;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      return;
    }
    ((void (*)(char *, uint64_t))off_1EE39BA00[v5])(&v10, a1);
  }
  *(_DWORD *)(a1 + 32) = -1;
  uint64_t v9 = a3[1];
  *(void *)a1 = *a3;
  *(void *)(a1 + 8) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 32) = 2;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<nitro::PrimitiveType,nitro::tensor_type,std::shared_ptr<nitro::tuple_type>,std::shared_ptr<nitro::list_type>,nitro::string_type,nitro::class_type,std::shared_ptr<nitro::dict_type>>>::__assign_alt[abi:ne180100]<3ul,std::shared_ptr<nitro::list_type>,std::shared_ptr<nitro::list_type> const&>(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = *(unsigned int *)(a1 + 32);
  if (v5 != -1)
  {
    if (v5 == 3)
    {
      uint64_t v7 = *a3;
      uint64_t v6 = a3[1];
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      uint8x8_t v8 = (std::__shared_weak_count *)a2[1];
      *a2 = v7;
      a2[1] = v6;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      return;
    }
    ((void (*)(char *, uint64_t))off_1EE39BA00[v5])(&v10, a1);
  }
  *(_DWORD *)(a1 + 32) = -1;
  uint64_t v9 = a3[1];
  *(void *)a1 = *a3;
  *(void *)(a1 + 8) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 32) = 3;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<nitro::PrimitiveType,nitro::tensor_type,std::shared_ptr<nitro::tuple_type>,std::shared_ptr<nitro::list_type>,nitro::string_type,nitro::class_type,std::shared_ptr<nitro::dict_type>>>::__assign_alt[abi:ne180100]<6ul,std::shared_ptr<nitro::dict_type>,std::shared_ptr<nitro::dict_type> const&>(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = *(unsigned int *)(a1 + 32);
  if (v5 != -1)
  {
    if (v5 == 6)
    {
      uint64_t v7 = *a3;
      uint64_t v6 = a3[1];
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      uint8x8_t v8 = (std::__shared_weak_count *)a2[1];
      *a2 = v7;
      a2[1] = v6;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      return;
    }
    ((void (*)(char *, uint64_t))off_1EE39BA00[v5])(&v10, a1);
  }
  *(_DWORD *)(a1 + 32) = -1;
  uint64_t v9 = a3[1];
  *(void *)a1 = *a3;
  *(void *)(a1 + 8) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 32) = 6;
}

void std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    unsigned __int32 v4 = *(void **)(a1 + 16);
    if (v4)
    {
      do
      {
        uint64_t v5 = (void *)*v4;
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v4 + 3));
        operator delete(v4);
        unsigned __int32 v4 = v5;
      }
      while (v5);
    }
    *(void *)(a1 + 16) = 0;
    uint64_t v6 = *(void *)(a1 + 8);
    if (v6)
    {
      for (uint64_t i = 0; i != v6; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v8 = *a2;
  *a2 = 0;
  uint64_t v9 = *(void **)a1;
  *(void *)a1 = v8;
  if (v9) {
    operator delete(v9);
  }
  uint64_t v12 = a2[2];
  uint64_t v11 = a2 + 2;
  uint64_t v10 = v12;
  uint64_t v13 = *(v11 - 1);
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 8) = v13;
  *(v11 - 1) = 0;
  uint64_t v14 = v11[1];
  *(void *)(a1 + 24) = v14;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v11 + 4);
  if (v14)
  {
    unint64_t v15 = *(void *)(v10 + 8);
    unint64_t v16 = *(void *)(a1 + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v15 >= v16) {
        v15 %= v16;
      }
    }
    else
    {
      v15 &= v16 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v15) = a1 + 16;
    *uint64_t v11 = 0;
    v11[1] = 0;
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      int v3 = (void *)*v2;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unsigned __int32 v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::unordered_map<unsigned long,nitro::nitro_variable>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,nitro::nitro_variable> const&>(a1, i + 2, (unsigned __int8 *)i + 16);
  return a1;
}

void sub_192537458(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,nitro::nitro_variable> const&>(uint64_t a1, unint64_t *a2, unsigned __int8 *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      __n128 result = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = result[1];
          if (v11 == v6)
          {
            if (result[2] == v6) {
              return result;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          __n128 result = (void *)*result;
        }
        while (result);
      }
    }
  }
  uint64_t v12 = operator new(0x38uLL);
  uint64_t v29 = v12;
  void *v12 = 0;
  v12[1] = v6;
  uint64_t v13 = *((void *)a3 + 1);
  v12[2] = *(void *)a3;
  uint64_t v14 = *((void *)a3 + 2);
  v12[3] = v13;
  v12[4] = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  v12[5] = 0;
  *((unsigned char *)v12 + 48) = 0;
  if (v12 + 2 != (void *)a3)
  {
    unint64_t v15 = (atomic_ullong *)*((void *)a3 + 3);
    v12[5] = v15;
    int v16 = a3[32];
    *((unsigned char *)v12 + 48) = v16;
    if ((v16 - 2) < 4 || v16 == 9) {
      atomic_fetch_add(v15, 1uLL);
    }
  }
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v7 || (float)(v18 * (float)v7) < v17)
  {
    BOOL v19 = 1;
    if (v7 >= 3) {
      BOOL v19 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v7);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v23 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v23) {
      goto LABEL_36;
    }
    if (prime < *(void *)&v23)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v23 < 3uLL || (uint8x8_t v25 = (uint8x8_t)vcnt_s8(v23), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (prime <= v24) {
        size_t prime = v24;
      }
      if (prime < *(void *)&v23) {
LABEL_36:
      }
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v27 = *(void **)(*(void *)a1 + 8 * v3);
  __n128 result = v29;
  if (v27)
  {
    void *v29 = *v27;
LABEL_61:
    *uint64_t v27 = v29;
    goto LABEL_62;
  }
  void *v29 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v29;
  *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
  if (*v29)
  {
    unint64_t v28 = *(void *)(*v29 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v28 >= v7) {
        v28 %= v7;
      }
    }
    else
    {
      v28 &= v7 - 1;
    }
    uint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return result;
}

void sub_19253778C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,nitro::nitro_variable>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,nitro::nitro_variable>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,nitro::nitro_variable>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,nitro::nitro_variable>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16)) {
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v2 + 24));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, uint64_t a2, int *a3)
{
  int v3 = *a3;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)a2 = v3;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int8x8_t v5 = (unsigned char *)*((void *)a3 + 1);
  unsigned __int32 v4 = (unsigned char *)*((void *)a3 + 2);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint8x8_t v8 = (char *)operator new(v4 - v5);
    *(void *)(a2 + 8) = v8;
    *(void *)(a2 + 16) = v8;
    uint64_t v9 = &v8[8 * (v6 >> 3)];
    *(void *)(a2 + 24) = v9;
    memcpy(v8, v5, v6);
    *(void *)(a2 + 16) = v9;
  }
}

void sub_192537874(_Unwind_Exception *exception_object)
{
  unsigned __int32 v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a3[1];
  *a2 = *a3;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a3[1];
  *a2 = *a3;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEERKS11_EEEDcST_DpT0_(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v3 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN5nitro13PrimitiveTypeENS8_11tensor_typeENS_10shared_ptrINS8_10tuple_typeEEENSB_INS8_9list_typeEEENS8_11string_typeENS8_10class_typeENSB_INS8_9dict_typeEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJS9_SA_SD_SF_SG_SH_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a3[1];
  *a2 = *a3;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
}

char *std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = *((void *)v11 + 1);
          if (v12 == v7)
          {
            if (*((void *)v11 + 2) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = (void *)(a1 + 16);
  unint64_t v11 = (char *)operator new(0x38uLL);
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + 1) = v7;
  *((void *)v11 + 2) = **a4;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t prime = v18;
    }
    else {
      size_t prime = v17;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_30;
    }
    if (prime < v8)
    {
      unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        unint64_t v20 = std::__next_prime(v20);
      }
      else
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          unint64_t v20 = v22;
        }
      }
      if (prime <= v20) {
        size_t prime = v20;
      }
      if (prime < v8) {
LABEL_30:
      }
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)unint64_t v11 = *v24;
LABEL_55:
    *unint64_t v24 = v11;
    goto LABEL_56;
  }
  *(void *)unint64_t v11 = *v13;
  *uint64_t v13 = v11;
  *(void *)(v23 + 8 * v4) = v13;
  if (*(void *)v11)
  {
    unint64_t v25 = *(void *)(*(void *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v25 >= v8) {
        v25 %= v8;
      }
    }
    else
    {
      v25 &= v8 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_55;
  }
LABEL_56:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_192537BEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,nitro::nitro_variable>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,nitro::nitro_variable>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<unsigned long,nitro::variable_type>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::variable_type>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::variable_type>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::variable_type>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = *((void *)v11 + 1);
          if (v12 == v7)
          {
            if (*((void *)v11 + 2) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = (void *)(a1 + 16);
  unint64_t v11 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + 1) = v7;
  *((void *)v11 + 2) = **a4;
  *((void *)v11 + 7) = 0;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t prime = v18;
    }
    else {
      size_t prime = v17;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_30;
    }
    if (prime < v8)
    {
      unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        unint64_t v20 = std::__next_prime(v20);
      }
      else
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          unint64_t v20 = v22;
        }
      }
      if (prime <= v20) {
        size_t prime = v20;
      }
      if (prime < v8) {
LABEL_30:
      }
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)unint64_t v11 = *v24;
LABEL_55:
    *unint64_t v24 = v11;
    goto LABEL_56;
  }
  *(void *)unint64_t v11 = *v13;
  *uint64_t v13 = v11;
  *(void *)(v23 + 8 * v4) = v13;
  if (*(void *)v11)
  {
    unint64_t v25 = *(void *)(*(void *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v25 >= v8) {
        v25 %= v8;
      }
    }
    else
    {
      v25 &= v8 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_55;
  }
LABEL_56:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_192537EDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,nitro::variable_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,nitro::variable_type>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,nitro::variable_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,nitro::variable_type>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = v2[14];
      if (v3 != -1) {
        ((void (*)(char *, unsigned int *))off_1EE39BA00[v3])(&v5, v2 + 6);
      }
    }
    operator delete(v2);
  }
  return a1;
}

char *std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_function>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_function>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_function>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_function>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = *((void *)v11 + 1);
          if (v12 == v7)
          {
            if (*((void *)v11 + 2) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = (void *)(a1 + 16);
  unint64_t v11 = (char *)operator new(0x60uLL);
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + 1) = v7;
  *((void *)v11 + 2) = **a4;
  *((void *)v11 + 11) = 0;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *((_DWORD *)v11 + 22) = 1065353216;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t prime = v18;
    }
    else {
      size_t prime = v17;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_30;
    }
    if (prime < v8)
    {
      unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        unint64_t v20 = std::__next_prime(v20);
      }
      else
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          unint64_t v20 = v22;
        }
      }
      if (prime <= v20) {
        size_t prime = v20;
      }
      if (prime < v8) {
LABEL_30:
      }
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)unint64_t v11 = *v24;
LABEL_55:
    *unint64_t v24 = v11;
    goto LABEL_56;
  }
  *(void *)unint64_t v11 = *v13;
  *uint64_t v13 = v11;
  *(void *)(v23 + 8 * v4) = v13;
  if (*(void *)v11)
  {
    unint64_t v25 = *(void *)(*(void *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v25 >= v8) {
        v25 %= v8;
      }
    }
    else
    {
      v25 &= v8 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_55;
  }
LABEL_56:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_19253824C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,nitro::nitro_function>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,nitro::nitro_function>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,nitro::nitro_function>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,nitro::nitro_function>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long const,nitro::nitro_function>,0>(v2 + 2);
    }
    operator delete(v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<nitro::nitro_instance>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380EE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<nitro::nitro_instance>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380EE0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<nitro::nitro_instance>::__on_zero_shared(uint64_t a1)
{
  std::allocator<nitro::nitro_instance>::destroy[abi:ne180100]((uint64_t)&v1, (void *)(a1 + 24));
}

void std::allocator<nitro::nitro_instance>::destroy[abi:ne180100](uint64_t a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[8];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    unint64_t v4 = (void *)a2[4];
    if (!v4) {
      goto LABEL_5;
    }
  }
  else
  {
    unint64_t v4 = (void *)a2[4];
    if (!v4) {
      goto LABEL_5;
    }
  }
  do
  {
    char v5 = (void *)*v4;
    nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v4 + 3));
    operator delete(v4);
    unint64_t v4 = v5;
  }
  while (v5);
LABEL_5:
  int64_t v6 = (void *)a2[2];
  a2[2] = 0;
  if (v6) {
    operator delete(v6);
  }
  unint64_t v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    std::__shared_weak_count::__release_weak(v7);
  }
}

char *std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_function>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_function>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_function>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_function>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = *((void *)v11 + 1);
          if (v12 == v7)
          {
            if (*((void *)v11 + 2) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = (void *)(a1 + 16);
  unint64_t v11 = (char *)operator new(0x60uLL);
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + 1) = v7;
  *((void *)v11 + 2) = **a4;
  *((void *)v11 + 11) = 0;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *((_DWORD *)v11 + 22) = 1065353216;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t prime = v18;
    }
    else {
      size_t prime = v17;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_30;
    }
    if (prime < v8)
    {
      unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        unint64_t v20 = std::__next_prime(v20);
      }
      else
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          unint64_t v20 = v22;
        }
      }
      if (prime <= v20) {
        size_t prime = v20;
      }
      if (prime < v8) {
LABEL_30:
      }
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)unint64_t v11 = *v24;
LABEL_55:
    *unint64_t v24 = v11;
    goto LABEL_56;
  }
  *(void *)unint64_t v11 = *v13;
  *uint64_t v13 = v11;
  *(void *)(v23 + 8 * v4) = v13;
  if (*(void *)v11)
  {
    unint64_t v25 = *(void *)(*(void *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v25 >= v8) {
        v25 %= v8;
      }
    }
    else
    {
      v25 &= v8 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_55;
  }
LABEL_56:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_19253870C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,nitro::nitro_function>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,nitro::nitro_function>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void nitro::nitro_function::nitro_function(std::__shared_weak_count **a1)
{
  char v1 = *a1;
  if (*a1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void nitro::matmul<float>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  nitro::ndarray<float>::canonicalize(a1, &v179);
  nitro::ndarray<float>::canonicalize(a2, &v173);
  int v170 = 0;
  uint64_t v171 = 0;
  unint64_t v172 = 0;
  unint64_t v4 = v181;
  int64_t v5 = v182 - v181;
  if (v182 == v181)
  {
    int64_t v6 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v6 = (char *)operator new(v182 - v181);
    int v170 = v6;
    unint64_t v7 = &v6[8 * (v5 >> 3)];
    unint64_t v172 = v7;
    memcpy(v6, v4, v5);
    uint64_t v171 = v7;
  }
  uint64_t v167 = 0;
  uint64_t v168 = 0;
  uint64_t v169 = 0;
  unint64_t v8 = v175;
  int64_t v9 = v176 - (unsigned char *)v175;
  if (v176 == v175)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
  }
  else
  {
    if (v9 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = (char *)operator new(v176 - (unsigned char *)v175);
    uint64_t v167 = v10;
    unint64_t v11 = &v10[8 * (v9 >> 3)];
    uint64_t v169 = v11;
    memcpy(v10, v8, v9);
    uint64_t v168 = v11;
  }
  unint64_t v12 = (v7 - v6) >> 3;
  unint64_t v13 = (v11 - v10) >> 3;
  if (v12 <= v13) {
    unint64_t v14 = (v11 - v10) >> 3;
  }
  else {
    unint64_t v14 = (v7 - v6) >> 3;
  }
  if (v12 < v13)
  {
    do
    {
      uint64_t v164 = (void *)1;
      std::vector<unsigned long>::insert((char **)&v170, (uint64_t)v6, &v164);
      int64_t v6 = (char *)v170;
    }
    while (v14 > (v171 - (unsigned char *)v170) >> 3);
    uint64_t v10 = (char *)v167;
    unint64_t v13 = (v168 - (unsigned char *)v167) >> 3;
  }
  if (v13 < v14)
  {
    do
    {
      uint64_t v164 = (void *)1;
      std::vector<unsigned long>::insert((char **)&v167, (uint64_t)v10, &v164);
      uint64_t v10 = (char *)v167;
    }
    while (v14 > (v168 - (unsigned char *)v167) >> 3);
  }
  uint64_t v164 = 0;
  unint64_t v165 = 0;
  uint64_t v166 = 0;
  unint64_t v15 = v14 - 2;
  unint64_t v156 = v14 - 2;
  BOOL v16 = 0;
  if (v14 == 2)
  {
    uint64_t v68 = 0;
    uint64_t v69 = (char *)v170 + 8 * v15;
    goto LABEL_100;
  }
  uint64_t v17 = 0;
  do
  {
    unint64_t v18 = v170;
    uint64_t v19 = *((void *)v170 + v17);
    unint64_t v20 = v167;
    if (v19 == 1)
    {
      if (v16 < v166)
      {
        *(void *)BOOL v16 = *((void *)v167 + v17);
        v16 += 8;
        goto LABEL_20;
      }
      uint8x8_t v21 = (char *)v164;
      int64_t v22 = v16 - (unsigned char *)v164;
      uint64_t v23 = (v16 - (unsigned char *)v164) >> 3;
      unint64_t v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 61) {
        goto LABEL_207;
      }
      uint64_t v25 = v166 - (unsigned char *)v164;
      if ((v166 - (unsigned char *)v164) >> 2 > v24) {
        unint64_t v24 = v25 >> 2;
      }
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26)
      {
        if (v26 >> 61) {
          goto LABEL_208;
        }
        uint64_t v27 = operator new(8 * v26);
      }
      else
      {
        uint64_t v27 = 0;
      }
      uint64_t v36 = &v27[8 * v23];
      void *v36 = v20[v17];
      uint64_t v37 = v36 + 1;
      if (v16 == v21) {
        goto LABEL_79;
      }
      unint64_t v38 = v16 - v21 - 8;
      if (v38 < 0x168
        || (unint64_t v41 = (v16 - 8 - v21) & 0xFFFFFFFFFFFFFFF8, &v27[v22 - 8 - v41] > &v27[v22 - 8])
        || &v16[-v41 - 8] > v16 - 8
        || (unint64_t)(v16 - v27 - v22) < 0x20)
      {
        unint64_t v39 = v16;
        unint64_t v15 = v14 - 2;
      }
      else
      {
        uint64_t v42 = (v38 >> 3) + 1;
        uint64_t v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v39 = &v16[-v43];
        uint64_t v36 = (void *)((char *)v36 - v43);
        unint64_t v44 = &v27[8 * v23 - 16];
        uint64_t v45 = (long long *)(v16 - 16);
        uint64_t v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v47 = *v45;
          *(v44 - 1) = *(v45 - 1);
          *unint64_t v44 = v47;
          v44 -= 2;
          v45 -= 2;
          v46 -= 4;
        }
        while (v46);
        unint64_t v15 = v14 - 2;
        if (v42 == (v42 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_80;
        }
      }
      do
      {
        uint64_t v40 = *((void *)v39 - 1);
        v39 -= 8;
        *--uint64_t v36 = v40;
      }
      while (v39 != v21);
    }
    else if (*((void *)v167 + v17) == 1)
    {
      if (v16 < v166) {
        goto LABEL_44;
      }
      uint8x8_t v21 = (char *)v164;
      int64_t v28 = v16 - (unsigned char *)v164;
      uint64_t v29 = (v16 - (unsigned char *)v164) >> 3;
      unint64_t v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 61) {
        goto LABEL_207;
      }
      uint64_t v31 = v166 - (unsigned char *)v164;
      if ((v166 - (unsigned char *)v164) >> 2 > v30) {
        unint64_t v30 = v31 >> 2;
      }
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v30;
      }
      if (v26)
      {
        if (v26 >> 61) {
          goto LABEL_208;
        }
        uint64_t v27 = operator new(8 * v26);
        uint64_t v19 = v18[v17];
      }
      else
      {
        uint64_t v27 = 0;
      }
      uint64_t v36 = &v27[8 * v29];
      void *v36 = v19;
      uint64_t v37 = v36 + 1;
      if (v16 == v21) {
        goto LABEL_79;
      }
      unint64_t v48 = v16 - v21 - 8;
      if (v48 < 0x168
        || (unint64_t v54 = (v16 - 8 - v21) & 0xFFFFFFFFFFFFFFF8, &v27[v28 - 8 - v54] > &v27[v28 - 8])
        || &v16[-v54 - 8] > v16 - 8
        || (unint64_t)(v16 - v27 - v28) < 0x20)
      {
        unint64_t v49 = v16;
        unint64_t v15 = v14 - 2;
      }
      else
      {
        uint64_t v55 = (v48 >> 3) + 1;
        uint64_t v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v49 = &v16[-v56];
        uint64_t v36 = (void *)((char *)v36 - v56);
        unint64_t v57 = &v27[8 * v29 - 16];
        unint64_t v58 = (long long *)(v16 - 16);
        uint64_t v59 = v55 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v60 = *v58;
          *(v57 - 1) = *(v58 - 1);
          *unint64_t v57 = v60;
          v57 -= 2;
          v58 -= 2;
          v59 -= 4;
        }
        while (v59);
        unint64_t v15 = v14 - 2;
        if (v55 == (v55 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_80;
        }
      }
      do
      {
        uint64_t v50 = *((void *)v49 - 1);
        v49 -= 8;
        *--uint64_t v36 = v50;
      }
      while (v49 != v21);
    }
    else
    {
      if (v16 < v166)
      {
LABEL_44:
        *(void *)BOOL v16 = v19;
        v16 += 8;
        goto LABEL_20;
      }
      uint8x8_t v21 = (char *)v164;
      int64_t v32 = v16 - (unsigned char *)v164;
      uint64_t v33 = (v16 - (unsigned char *)v164) >> 3;
      unint64_t v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 61) {
LABEL_207:
      }
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      uint64_t v35 = v166 - (unsigned char *)v164;
      if ((v166 - (unsigned char *)v164) >> 2 > v34) {
        unint64_t v34 = v35 >> 2;
      }
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v34;
      }
      if (v26)
      {
        if (v26 >> 61) {
LABEL_208:
        }
          std::__throw_bad_array_new_length[abi:ne180100]();
        uint64_t v27 = operator new(8 * v26);
        uint64_t v19 = v18[v17];
      }
      else
      {
        uint64_t v27 = 0;
      }
      uint64_t v36 = &v27[8 * v33];
      void *v36 = v19;
      uint64_t v37 = v36 + 1;
      if (v16 == v21)
      {
LABEL_79:
        unint64_t v15 = v14 - 2;
        goto LABEL_80;
      }
      unint64_t v51 = v16 - v21 - 8;
      if (v51 < 0x168
        || (unint64_t v61 = (v16 - 8 - v21) & 0xFFFFFFFFFFFFFFF8, &v27[v32 - 8 - v61] > &v27[v32 - 8])
        || &v16[-v61 - 8] > v16 - 8
        || (unint64_t)(v16 - v27 - v32) < 0x20)
      {
        uint64_t v52 = v16;
        unint64_t v15 = v14 - 2;
      }
      else
      {
        uint64_t v62 = (v51 >> 3) + 1;
        uint64_t v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v52 = &v16[-v63];
        uint64_t v36 = (void *)((char *)v36 - v63);
        uint64_t v64 = &v27[8 * v33 - 16];
        unint64_t v65 = (long long *)(v16 - 16);
        uint64_t v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v67 = *v65;
          *(v64 - 1) = *(v65 - 1);
          _OWORD *v64 = v67;
          v64 -= 2;
          v65 -= 2;
          v66 -= 4;
        }
        while (v66);
        unint64_t v15 = v14 - 2;
        if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_80;
        }
      }
      do
      {
        uint64_t v53 = *((void *)v52 - 1);
        v52 -= 8;
        *--uint64_t v36 = v53;
      }
      while (v52 != v21);
    }
LABEL_80:
    uint64_t v164 = v36;
    unint64_t v165 = v37;
    uint64_t v166 = &v27[8 * v26];
    if (v21) {
      operator delete(v21);
    }
    BOOL v16 = (char *)v37;
LABEL_20:
    unint64_t v165 = v16;
    ++v17;
  }
  while (v17 != v15);
  uint64_t v68 = v166;
  uint64_t v69 = (char *)v170 + 8 * v15;
  if (v16 < v166)
  {
    *(void *)BOOL v16 = *v69;
    unint64_t v70 = v16 + 8;
    goto LABEL_121;
  }
LABEL_100:
  float16x8_t v71 = (char *)v164;
  int64_t v72 = v16 - (unsigned char *)v164;
  uint64_t v73 = (v16 - (unsigned char *)v164) >> 3;
  unint64_t v74 = v73 + 1;
  if ((unint64_t)(v73 + 1) >> 61) {
    goto LABEL_209;
  }
  uint64_t v75 = v68 - (unsigned char *)v164;
  if (v75 >> 2 > v74) {
    unint64_t v74 = v75 >> 2;
  }
  if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v76 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v76 = v74;
  }
  if (v76)
  {
    if (!(v76 >> 61))
    {
      uint64_t v77 = operator new(8 * v76);
      goto LABEL_110;
    }
LABEL_210:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v77 = 0;
LABEL_110:
  uint64_t v78 = &v77[8 * v73];
  uint64_t v79 = &v77[8 * v76];
  *(void *)uint64_t v78 = *v69;
  unint64_t v70 = v78 + 8;
  if (v16 != v71)
  {
    unint64_t v80 = v16 - v71 - 8;
    if (v80 < 0x58)
    {
      uint64_t v81 = v16;
      goto LABEL_118;
    }
    if ((unint64_t)(v16 - v77 - v72) < 0x20)
    {
      uint64_t v81 = v16;
      goto LABEL_118;
    }
    uint64_t v82 = (v80 >> 3) + 1;
    uint64_t v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v81 = &v16[-v83];
    v78 -= v83;
    uint64_t v84 = &v77[8 * v73 - 16];
    uint64_t v85 = (long long *)(v16 - 16);
    uint64_t v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v87 = *v85;
      *(v84 - 1) = *(v85 - 1);
      _OWORD *v84 = v87;
      v84 -= 2;
      v85 -= 2;
      v86 -= 4;
    }
    while (v86);
    if (v82 != (v82 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_118:
        uint64_t v88 = *((void *)v81 - 1);
        v81 -= 8;
        *((void *)v78 - 1) = v88;
        v78 -= 8;
      }
      while (v81 != v71);
    }
  }
  uint64_t v164 = v78;
  unint64_t v165 = v70;
  uint64_t v166 = v79;
  if (v71) {
    operator delete(v71);
  }
LABEL_121:
  unint64_t v165 = v70;
  unint64_t v89 = v14 - 1;
  unint64_t v90 = v167;
  if (v70 < v166)
  {
    *(void *)unint64_t v70 = *((void *)v167 + v89);
    uint64_t v91 = v70 + 8;
    goto LABEL_144;
  }
  uint64_t v92 = (char *)v164;
  int64_t v93 = v70 - (unsigned char *)v164;
  uint64_t v94 = (v70 - (unsigned char *)v164) >> 3;
  unint64_t v95 = v94 + 1;
  if ((unint64_t)(v94 + 1) >> 61) {
LABEL_209:
  }
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  uint64_t v96 = v166 - (unsigned char *)v164;
  if ((v166 - (unsigned char *)v164) >> 2 > v95) {
    unint64_t v95 = v96 >> 2;
  }
  if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v97 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v97 = v95;
  }
  if (v97)
  {
    if (v97 >> 61) {
      goto LABEL_210;
    }
    unint64_t v98 = operator new(8 * v97);
  }
  else
  {
    unint64_t v98 = 0;
  }
  uint64_t v99 = &v98[8 * v94];
  void *v99 = v90[v89];
  uint64_t v91 = v99 + 1;
  if (v70 != v92)
  {
    unint64_t v100 = v70 - v92 - 8;
    if (v100 < 0x58)
    {
      unint64_t v101 = v70;
      goto LABEL_141;
    }
    if ((unint64_t)(v70 - v98 - v93) < 0x20)
    {
      unint64_t v101 = v70;
      goto LABEL_141;
    }
    uint64_t v102 = (v100 >> 3) + 1;
    uint64_t v103 = 8 * (v102 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v101 = &v70[-v103];
    uint64_t v99 = (void *)((char *)v99 - v103);
    uint64_t v104 = &v98[8 * v94 - 16];
    unint64_t v105 = (long long *)(v70 - 16);
    uint64_t v106 = v102 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v107 = *v105;
      *(v104 - 1) = *(v105 - 1);
      *uint64_t v104 = v107;
      v104 -= 2;
      v105 -= 2;
      v106 -= 4;
    }
    while (v106);
    if (v102 != (v102 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_141:
        uint64_t v108 = *((void *)v101 - 1);
        v101 -= 8;
        *--uint64_t v99 = v108;
      }
      while (v101 != v92);
    }
  }
  uint64_t v164 = v99;
  unint64_t v165 = v91;
  uint64_t v166 = &v98[8 * v97];
  if (v92) {
    operator delete(v92);
  }
LABEL_144:
  unint64_t v165 = v91;
  nitro::ndarray<float>::init_from_shape((uint64_t **)&v164, a3);
  if (v15)
  {
    if (v15 == 1)
    {
      unint64_t v109 = 0;
      uint64_t v110 = 1;
      goto LABEL_151;
    }
    unint64_t v109 = v15 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v111 = (char *)v164 + 8;
    uint64_t v112 = 1;
    unint64_t v113 = v15 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v114 = 1;
    do
    {
      v112 *= *(v111 - 1);
      v114 *= *v111;
      v111 += 2;
      v113 -= 2;
    }
    while (v113);
    uint64_t v110 = v114 * v112;
    if (v15 != v109)
    {
LABEL_151:
      uint64_t v115 = v14 - v109 - 2;
      uint64_t v116 = (uint64_t *)((char *)v164 + 8 * v109);
      do
      {
        uint64_t v117 = *v116++;
        v110 *= v117;
        --v115;
      }
      while (v115);
    }
  }
  else
  {
    uint64_t v110 = 1;
  }
  uint64_t v118 = operator new(8uLL);
  uint64_t v161 = v118;
  *uint64_t v118 = 1;
  uint64_t v162 = v118 + 1;
  uint64_t v163 = v118 + 1;
  uint64_t v119 = operator new(8uLL);
  std::string __p = v119;
  *uint64_t v119 = 1;
  float32x4_t v159 = v119 + 1;
  std::string::size_type v160 = v119 + 1;
  if ((int)v14 >= 4)
  {
    uint64_t v120 = 0;
    uint64_t v121 = 8 * (v14 - 3);
    do
    {
      v157[0] = *(void *)((char *)v170 + v121) * *(void *)((char *)v161 + v120);
      std::vector<unsigned long>::insert((char **)&v161, (uint64_t)v161, v157);
      v157[0] = *(void *)((char *)v167 + v121) * *(void *)((char *)__p + v120);
      std::vector<unsigned long>::insert((char **)&__p, (uint64_t)__p, v157);
      v120 += 8;
      v121 -= 8;
    }
    while (v121);
  }
  uint64_t v122 = 8 * v89;
  uint64_t v123 = *(void *)((char *)v170 + v122);
  size_t v124 = 8 * v15;
  unint64_t v125 = v15;
  uint64_t v126 = *((void *)v170 + v15);
  uint64_t v127 = *(void *)((char *)v167 + v122);
  uint64_t v128 = *(void *)((char *)v167 + v124);
  uint64_t v129 = *(void *)((char *)v164 + v122);
  uint64_t v130 = *(void *)((char *)v164 + v124);
  memset(v157, 0, sizeof(v157));
  uint64_t v153 = v130;
  if (v125)
  {
    if (v125 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v131 = (char *)operator new(v124);
    uint64_t v132 = &v131[8 * v156];
    bzero(v131, 8 * v14 - 16);
    if (!v110) {
      goto LABEL_180;
    }
  }
  else
  {
    unint64_t v131 = 0;
    uint64_t v132 = 0;
    if (!v110) {
      goto LABEL_180;
    }
  }
  uint64_t v133 = v123;
  uint64_t v134 = 0;
  uint64_t v135 = v126 * v133;
  uint64_t v136 = v128 * v127;
  uint64_t v137 = v153 * v129;
  unint64_t v138 = v14 - 3;
  unint64_t v139 = (v132 - v131) >> 3;
  if (v139 <= 1) {
    unint64_t v139 = 1;
  }
  unint64_t v154 = v139;
  do
  {
    if (v132 == v131)
    {
      uint64_t v141 = 0;
      uint64_t v140 = 0;
    }
    else
    {
      uint64_t v140 = 0;
      uint64_t v141 = 0;
      float32x4_t v142 = v161;
      uint64_t v143 = __p;
      uint64_t v144 = v167;
      uint64_t v145 = v131;
      unint64_t v146 = (uint64_t *)v170;
      unint64_t v147 = v154;
      do
      {
        uint64_t v148 = *v146++;
        if (v148 != 1) {
          v141 += *v142 * *v145;
        }
        if (*v144 != 1) {
          v140 += *v143 * *v145;
        }
        ++v145;
        ++v142;
        ++v144;
        ++v143;
        --v147;
      }
      while (v147);
    }
    cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, *((void *)v170 + v156), *(_DWORD *)((char *)v167 + v122), *(_DWORD *)((char *)v170 + v122), 1.0, (const float *)(v179 + 4 * v135 * v141), *(_DWORD *)((char *)v170 + v122), (const float *)(v173 + 4 * v136 * v140), *(_DWORD *)((char *)v167 + v122), 1.0, (float *)(*a3 + 4 * v137 * v134), *(void *)((char *)v164 + v122));
    if (v132 != v131)
    {
      ++*(void *)&v131[8 * v138];
      if (v138)
      {
        int v149 = v164;
        unint64_t v150 = v138;
        do
        {
          while (*(void *)&v131[8 * v150] >= v149[v150])
          {
            *(void *)&v131[8 * v150--] = 0;
            ++*(void *)&v131[8 * v150];
            if (!v150) {
              goto LABEL_164;
            }
          }
          --v150;
        }
        while (v150);
      }
    }
LABEL_164:
    ++v134;
  }
  while (v134 != v110);
LABEL_180:
  if (v131) {
    operator delete(v131);
  }
  if (__p)
  {
    float32x4_t v159 = __p;
    operator delete(__p);
  }
  if (v161)
  {
    uint64_t v162 = v161;
    operator delete(v161);
  }
  if (v164)
  {
    unint64_t v165 = v164;
    operator delete(v164);
  }
  if (v167)
  {
    uint64_t v168 = v167;
    operator delete(v167);
  }
  if (v170)
  {
    uint64_t v171 = v170;
    operator delete(v170);
  }
  if (v177)
  {
    uint32x4_t v178 = v177;
    operator delete(v177);
  }
  if (v175)
  {
    uint64_t v176 = v175;
    operator delete(v175);
  }
  uint64_t v151 = v174;
  if (v174 && !atomic_fetch_add(&v174->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
    std::__shared_weak_count::__release_weak(v151);
  }
  if (v183)
  {
    v184 = v183;
    operator delete(v183);
  }
  if (v181)
  {
    int8x16_t v182 = v181;
    operator delete(v181);
  }
  uint64_t v152 = v180;
  if (v180)
  {
    if (!atomic_fetch_add(&v180->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
}

void sub_192539424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (__p) {
    operator delete(__p);
  }
  nitro::ndarray<float>::~ndarray(a14);
  if (a25)
  {
    operator delete(a25);
    uint64_t v36 = a28;
    if (!a28)
    {
LABEL_5:
      uint64_t v37 = a31;
      if (!a31) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v36 = a28;
    if (!a28) {
      goto LABEL_5;
    }
  }
  operator delete(v36);
  uint64_t v37 = a31;
  if (!a31)
  {
LABEL_7:
    nitro::ndarray<float>::~ndarray(&a34);
    nitro::ndarray<float>::~ndarray((void *)(v34 - 160));
    _Unwind_Resume(a1);
  }
LABEL_6:
  operator delete(v37);
  goto LABEL_7;
}

char *std::vector<unsigned long>::insert(char **a1, uint64_t a2, void *a3)
{
  int64_t v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (void)*a1;
  uint64_t v8 = v7 >> 3;
  int64_t v9 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFF8];
  unint64_t v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)int64_t v9 = *a3;
      a1[1] = v9 + 8;
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    unint64_t v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      uint64_t v17 = a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      unint64_t v15 = (unint64_t)&v6[v14 + 8];
      if (v5 > v15) {
        unint64_t v15 = (unint64_t)a1[1];
      }
      unint64_t v16 = v15 + ~(unint64_t)v6 - v14;
      if (v16 >= 0x58)
      {
        uint64_t v17 = a1[1];
        if ((unint64_t)(v9 + 8 - &v6[v7 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
        {
          uint64_t v40 = (v16 >> 3) + 1;
          uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
          unint64_t v13 = (uint64_t *)((char *)v13 + v41);
          uint64_t v17 = (char *)(v5 + v41);
          uint64_t v42 = (_OWORD *)(v5 + 16);
          uint64_t v43 = &v6[8 * v12 + 16 + 8 * v8];
          uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v45 = *(_OWORD *)v43;
            *(v42 - 1) = *((_OWORD *)v43 - 1);
            *uint64_t v42 = v45;
            v42 += 2;
            v43 += 32;
            v44 -= 4;
          }
          while (v44);
          if (v40 == (v40 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_39;
          }
        }
      }
      else
      {
        uint64_t v17 = a1[1];
      }
      do
      {
        uint64_t v46 = *v13++;
        *(void *)uint64_t v17 = v46;
        v17 += 8;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_39:
    a1[1] = v17;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)int64_t v9 = *a3;
    return v9;
  }
  unint64_t v18 = ((uint64_t)(v5 - (void)v6) >> 3) + 1;
  if (v18 >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v19 = v10 - (void)v6;
  if (v19 >> 2 > v18) {
    unint64_t v18 = v19 >> 2;
  }
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v20 = v18;
  }
  uint64_t v52 = a1 + 2;
  if (v20)
  {
    if (v20 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint8x8_t v21 = (char *)operator new(8 * v20);
  }
  else
  {
    uint8x8_t v21 = 0;
  }
  unint64_t v48 = v21;
  unint64_t v49 = &v21[8 * v8];
  std::string __dst = v49;
  unint64_t v51 = &v21[8 * v20];
  std::__split_buffer<unsigned long>::push_back(&v48, a3);
  int64_t v22 = v49;
  uint64_t v23 = *a1;
  unint64_t v24 = v49;
  if (*a1 != v9)
  {
    uint64_t v25 = &v6[v7 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v26 = v25 - v23 - 8;
    uint64_t v27 = v9;
    unint64_t v24 = v49;
    if (v26 < 0x58) {
      goto LABEL_47;
    }
    uint64_t v27 = v9;
    unint64_t v24 = v49;
    if ((unint64_t)(v25 - v49) < 0x20) {
      goto LABEL_47;
    }
    uint64_t v28 = (v26 >> 3) + 1;
    uint64_t v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v27 = &v9[-v29];
    unint64_t v24 = &v49[-v29];
    unint64_t v30 = v49 - 16;
    uint64_t v31 = &v6[8 * v8 - 16];
    uint64_t v32 = v28 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v33 = *(_OWORD *)v31;
      *((_OWORD *)v30 - 1) = *((_OWORD *)v31 - 1);
      *(_OWORD *)unint64_t v30 = v33;
      v30 -= 32;
      v31 -= 32;
      v32 -= 4;
    }
    while (v32);
    if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_47:
      do
      {
        uint64_t v34 = *((void *)v27 - 1);
        v27 -= 8;
        *((void *)v24 - 1) = v34;
        v24 -= 8;
      }
      while (v27 != v23);
    }
  }
  unint64_t v49 = v24;
  uint64_t v35 = a1[1];
  uint64_t v36 = (char *)__dst;
  int64_t v37 = v35 - v9;
  if (v35 != v9)
  {
    memmove(__dst, v9, v35 - v9);
    unint64_t v24 = v49;
    int64_t v9 = a1[1];
  }
  unint64_t v38 = *a1;
  *a1 = v24;
  a1[1] = &v36[v37];
  unint64_t v39 = a1[2];
  a1[2] = v51;
  std::string __dst = v9;
  unint64_t v51 = v39;
  unint64_t v48 = v38;
  unint64_t v49 = v38;
  if (v9 != v38) {
    std::string __dst = &v9[(v38 - v9 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (v38) {
    operator delete(v38);
  }
  return v22;
}

void sub_19253983C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12 == a11)
  {
    unint64_t v13 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    unint64_t v13 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray_impl::compute_slice(long long **a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>, __n128 a6@<Q0>)
{
  unint64_t v109 = a3;
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  unint64_t v115 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3);
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v108 = a2;
  size_t v9 = v7 - v8;
  unint64_t v10 = (v7 - v8) >> 3;
  uint64_t v110 = (void *)v10;
  if (v115 > v10)
  {
    uint64_t v118 = &v115;
    uint64_t v119 = (unint64_t *)&v110;
    nitro::ndarray_impl::compute_slice(std::vector<nitro::slice_range> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::$_0::operator()();
  }
  uint64_t v106 = a5;
  uint64_t v12 = 0;
  uint64_t v118 = 0;
  uint64_t v119 = 0;
  uint64_t v120 = 0;
  unint64_t v115 = 0;
  unint64_t v116 = 0;
  uint64_t v117 = 0;
  if (v9 >= 8)
  {
    if ((v9 & 0x8000000000000000) != 0) {
      goto LABEL_141;
    }
    uint64_t v12 = (unint64_t *)operator new(v9);
    uint64_t v118 = v12;
    uint64_t v119 = v12;
    uint64_t v120 = &v12[v10];
  }
  uint64_t v13 = v109[1];
  uint64_t v14 = v13 - *v109;
  if (v13 == *v109)
  {
    unint64_t v15 = 0;
    goto LABEL_9;
  }
  if (v14 < 0) {
LABEL_141:
  }
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  unint64_t v15 = (char *)operator new(v13 - *v109);
  unint64_t v115 = (unint64_t)v15;
  unint64_t v116 = (unint64_t)v15;
  uint64_t v117 = &v15[8 * (v14 >> 3)];
LABEL_9:
  v105[1] = v105;
  MEMORY[0x1F4188790](a6);
  uint64_t v17 = (void *)((char *)v105 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v7 == v8)
  {
    uint64_t v114 = a4;
    goto LABEL_34;
  }
  unint64_t v18 = (char *)v105 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  do
  {
    *(void *)unint64_t v18 = -1;
    *((void *)v18 + 1) = -1;
    *((void *)v18 + 2) = 1;
    v18 += 24;
  }
  while (v18 != (char *)&v17[3 * v10]);
  unint64_t v19 = 0;
  unint64_t v20 = *a1;
  unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3);
  uint64_t v22 = *v108;
  if (v10 <= 1) {
    uint64_t v23 = 1;
  }
  else {
    uint64_t v23 = (v7 - v8) >> 3;
  }
  unint64_t v24 = v17;
  do
  {
    if (v19 < v21)
    {
      long long v25 = *v20;
      void v24[2] = *((void *)v20 + 2);
      *(_OWORD *)unint64_t v24 = v25;
    }
    uint64_t v26 = *v24;
    uint64_t v27 = v24[1];
    if (*v24 != -1) {
      goto LABEL_22;
    }
    if (v27 != -1)
    {
      uint64_t v26 = -1;
LABEL_22:
      if (v27 < 0) {
        goto LABEL_24;
      }
      goto LABEL_23;
    }
    uint64_t v26 = 0;
    *unint64_t v24 = 0;
    uint64_t v27 = *(void *)(v22 + 8 * v19);
    v24[1] = v27;
    if (v27 < 0) {
      goto LABEL_24;
    }
LABEL_23:
    uint64_t v113 = v27;
    uint64_t v112 = *(void *)(v22 + 8 * v19);
    if (v27 > v112)
    {
      uint64_t v110 = &v113;
      uint64_t v111 = &v112;
      nitro::ndarray_impl::compute_slice(std::vector<nitro::slice_range> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::$_1::operator()();
    }
LABEL_24:
    if ((v26 & 0x8000000000000000) == 0)
    {
      uint64_t v113 = v26;
      uint64_t v112 = *(void *)(v22 + 8 * v19);
      if (v26 > v112)
      {
        uint64_t v110 = &v113;
        uint64_t v111 = &v112;
        nitro::ndarray_impl::compute_slice(std::vector<nitro::slice_range> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::$_2::operator()();
      }
    }
    ++v19;
    v24 += 3;
    unint64_t v20 = (long long *)((char *)v20 + 24);
  }
  while (v23 != v19);
  uint64_t v114 = a4;
  uint64_t v28 = (void *)*v109;
  uint64_t v29 = v17;
  do
  {
    uint64_t v31 = *v29;
    v29 += 3;
    uint64_t v30 = v31;
    if ((v31 & 0x8000000000000000) == 0)
    {
      a4 += *v28 * v30;
      uint64_t v114 = a4;
    }
    ++v28;
    --v23;
  }
  while (v23);
LABEL_34:
  uint64_t v33 = *v108;
  uint64_t v32 = v108[1];
  if (v32 == *v108) {
    goto LABEL_94;
  }
  uint64_t v34 = 0;
  long long v107 = (char *)v17;
  while (2)
  {
    uint64_t v36 = (char *)&v17[3 * v34];
    uint64_t v38 = *(void *)v36;
    uint64_t v37 = *((void *)v36 + 1);
    if (v38 < 0 || (v37 & 0x8000000000000000) == 0)
    {
      unint64_t v39 = (char *)&v17[3 * v34];
      uint64_t v42 = *((void *)v39 + 2);
      uint64_t v41 = (uint64_t *)(v39 + 16);
      uint64_t v40 = v42;
      uint64_t v43 = (v37 + ~v38) / v42 + 1;
      uint64_t v44 = v119;
      if (v119 >= v120)
      {
        uint64_t v46 = v118;
        uint64_t v47 = v119 - v118;
        unint64_t v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v49 = (char *)v120 - (char *)v118;
        if (((char *)v120 - (char *)v118) >> 2 > v48) {
          unint64_t v48 = v49 >> 2;
        }
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v50 = v48;
        }
        if (v50)
        {
          if (v50 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v51 = v50;
          uint64_t v52 = operator new(8 * v50);
          unint64_t v50 = v51;
        }
        else
        {
          uint64_t v52 = 0;
        }
        uint64_t v53 = (uint64_t *)&v52[8 * v47];
        *uint64_t v53 = v43;
        long long v45 = (unint64_t *)(v53 + 1);
        if (v44 != v46)
        {
          unint64_t v54 = (char *)v44 - (char *)v46 - 8;
          if (v54 < 0x58) {
            goto LABEL_147;
          }
          if ((unint64_t)((char *)v46 - v52) < 0x20) {
            goto LABEL_147;
          }
          uint64_t v55 = (v54 >> 3) + 1;
          uint64_t v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
          unint64_t v57 = &v44[v56 / 0xFFFFFFFFFFFFFFF8];
          uint64_t v53 = (uint64_t *)((char *)v53 - v56);
          unint64_t v58 = &v52[8 * v47 - 16];
          uint64_t v59 = v44 - 2;
          uint64_t v60 = v55 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v61 = *(_OWORD *)v59;
            *(v58 - 1) = *((_OWORD *)v59 - 1);
            *unint64_t v58 = v61;
            v58 -= 2;
            v59 -= 4;
            v60 -= 4;
          }
          while (v60);
          uint64_t v44 = v57;
          if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_147:
            do
            {
              uint64_t v62 = *--v44;
              *--uint64_t v53 = v62;
            }
            while (v44 != v46);
          }
        }
        uint64_t v118 = (unint64_t *)v53;
        uint64_t v119 = v45;
        uint64_t v120 = (unint64_t *)&v52[8 * v50];
        if (v46)
        {
          operator delete(v46);
          uint64_t v40 = *v41;
          unint64_t v15 = (char *)v116;
        }
        uint64_t v17 = (uint64_t *)v107;
      }
      else
      {
        *uint64_t v119 = v43;
        long long v45 = v44 + 1;
      }
      uint64_t v119 = v45;
      uint64_t v63 = v40 * *(void *)(*v109 + 8 * v34);
      if (v15 < v117)
      {
        *(void *)unint64_t v15 = v63;
        uint64_t v35 = v15 + 8;
      }
      else
      {
        uint64_t v64 = (char *)v115;
        uint64_t v65 = (uint64_t)&v15[-v115] >> 3;
        unint64_t v66 = v65 + 1;
        if ((unint64_t)(v65 + 1) >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v67 = (uint64_t)&v117[-v115];
        if ((uint64_t)&v117[-v115] >> 2 > v66) {
          unint64_t v66 = v67 >> 2;
        }
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v66;
        }
        if (v68)
        {
          if (v68 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v69 = operator new(8 * v68);
        }
        else
        {
          uint64_t v69 = 0;
        }
        unint64_t v70 = (uint64_t *)&v69[8 * v65];
        uint64_t *v70 = v63;
        uint64_t v35 = (char *)(v70 + 1);
        if (v15 != v64)
        {
          unint64_t v71 = v15 - v64 - 8;
          if (v71 < 0x168)
          {
            int64_t v72 = v15;
            goto LABEL_79;
          }
          unint64_t v74 = (v15 - 8 - v64) & 0xFFFFFFFFFFFFFFF8;
          if (&v69[v15 - v64 - 8 - v74] > &v69[v15 - v64 - 8])
          {
            int64_t v72 = v15;
            goto LABEL_79;
          }
          if (&v15[-v74 - 8] > v15 - 8)
          {
            int64_t v72 = v15;
            goto LABEL_79;
          }
          if ((unint64_t)(v64 - v69) < 0x20)
          {
            int64_t v72 = v15;
            goto LABEL_79;
          }
          uint64_t v75 = (v71 >> 3) + 1;
          uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
          int64_t v72 = &v15[-v76];
          unint64_t v70 = (uint64_t *)((char *)v70 - v76);
          uint64_t v77 = &v69[8 * v65 - 16];
          uint64_t v78 = v15 - 16;
          uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v80 = *(_OWORD *)v78;
            *(v77 - 1) = *((_OWORD *)v78 - 1);
            *uint64_t v77 = v80;
            v77 -= 2;
            v78 -= 32;
            v79 -= 4;
          }
          while (v79);
          if (v75 != (v75 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_79:
              uint64_t v73 = *((void *)v72 - 1);
              v72 -= 8;
              *--unint64_t v70 = v73;
            }
            while (v72 != v64);
          }
        }
        unint64_t v115 = (unint64_t)v70;
        unint64_t v116 = (unint64_t)v35;
        uint64_t v117 = &v69[8 * v68];
        if (v64) {
          operator delete(v64);
        }
        uint64_t v17 = (uint64_t *)v107;
      }
      unint64_t v116 = (unint64_t)v35;
      unint64_t v15 = v35;
      uint64_t v33 = *v108;
      uint64_t v32 = v108[1];
    }
    if (++v34 < (unint64_t)((v32 - v33) >> 3)) {
      continue;
    }
    break;
  }
  uint64_t v12 = v118;
  if (v119 == v118)
  {
LABEL_94:
    if (v12 >= v120)
    {
      uint64_t v82 = v15;
      uint64_t v83 = (char *)v120 - (char *)v12;
      if ((unint64_t)(((char *)v120 - (char *)v12) >> 2) <= 1) {
        uint64_t v84 = 1;
      }
      else {
        uint64_t v84 = v83 >> 2;
      }
      if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v85 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v85 = v84;
      }
      if (v85 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v86 = (unint64_t *)operator new(8 * v85);
      *uint64_t v86 = 1;
      uint64_t v81 = v86 + 1;
      uint64_t v118 = v86;
      uint64_t v119 = v86 + 1;
      uint64_t v120 = &v86[v85];
      if (v12)
      {
        operator delete(v12);
        unint64_t v15 = (char *)v116;
      }
      else
      {
        unint64_t v15 = v82;
      }
    }
    else
    {
      unint64_t *v12 = 1;
      uint64_t v81 = v12 + 1;
    }
    uint64_t v119 = v81;
    if (v15 < v117)
    {
      *(void *)unint64_t v15 = 1;
      long long v87 = v15 + 8;
      goto LABEL_129;
    }
    uint64_t v88 = (char *)v115;
    uint64_t v89 = (uint64_t)&v15[-v115] >> 3;
    unint64_t v90 = v89 + 1;
    if ((unint64_t)(v89 + 1) >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v91 = (uint64_t)&v117[-v115];
    if ((uint64_t)&v117[-v115] >> 2 > v90) {
      unint64_t v90 = v91 >> 2;
    }
    if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v92 = v90;
    }
    if (v92)
    {
      if (v92 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int64_t v93 = operator new(8 * v92);
    }
    else
    {
      int64_t v93 = 0;
    }
    uint64_t v94 = &v93[8 * v89];
    unint64_t v95 = &v93[8 * v92];
    void *v94 = 1;
    long long v87 = v94 + 1;
    if (v15 != v88)
    {
      unint64_t v96 = v15 - v88 - 8;
      if (v96 < 0x58)
      {
        unint64_t v97 = v15;
        goto LABEL_126;
      }
      if ((unint64_t)(v88 - v93) < 0x20)
      {
        unint64_t v97 = v15;
        goto LABEL_126;
      }
      uint64_t v98 = (v96 >> 3) + 1;
      uint64_t v99 = 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v97 = &v15[-v99];
      uint64_t v94 = (void *)((char *)v94 - v99);
      unint64_t v100 = &v93[8 * v89 - 16];
      unint64_t v101 = v15 - 16;
      uint64_t v102 = v98 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v103 = *(_OWORD *)v101;
        *(v100 - 1) = *((_OWORD *)v101 - 1);
        *unint64_t v100 = v103;
        v100 -= 2;
        v101 -= 32;
        v102 -= 4;
      }
      while (v102);
      if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_126:
          uint64_t v104 = *((void *)v97 - 1);
          v97 -= 8;
          *--uint64_t v94 = v104;
        }
        while (v97 != v88);
      }
    }
    unint64_t v115 = (unint64_t)v94;
    unint64_t v116 = (unint64_t)v87;
    uint64_t v117 = v95;
    if (v88) {
      operator delete(v88);
    }
LABEL_129:
    unint64_t v116 = (unint64_t)v87;
  }
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorImNS_9allocatorImEEEES6_mEEC2B8ne180100IJLm0ELm1ELm2EEJS6_S6_mEJEJEJRS6_S9_RmEEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSC_IJDpT2_EEEDpOT3_(v106, (uint64_t)&v118, (uint64_t)&v115, &v114);
  if (v115)
  {
    unint64_t v116 = v115;
    operator delete((void *)v115);
  }
  if (v118)
  {
    uint64_t v119 = v118;
    operator delete(v118);
  }
}

void sub_19253A0DC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 136);
  if (v3)
  {
    *(void *)(v1 - 128) = v3;
    operator delete(v3);
  }
  unint64_t v4 = *(void **)(v1 - 112);
  if (!v4) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 - 104) = v4;
  operator delete(v4);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray_impl::compute_slice(std::vector<nitro::slice_range> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", 96);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"range_in.size()", 15);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<=", 2);
  int64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"shape.size()", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  size_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<=", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  int64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", "operator()", 132, 1);
    std::stringbuf::str();
    uint64_t v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      unint64_t v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v18 = (file_logger *)global_logger();
    unint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", "operator()", 132, 1);
    std::stringbuf::str();
    unint64_t v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unint64_t v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        uint64_t v22 = v30;
      }
      else {
        uint64_t v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unint64_t v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  long long v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19253A424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_impl::compute_slice(std::vector<nitro::slice_range> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", 96);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"range[i].end", 12);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<=", 2);
  int64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"shape[i]", 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  size_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<=", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  int64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", "operator()", 155, 1);
    std::stringbuf::str();
    uint64_t v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      unint64_t v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v18 = (file_logger *)global_logger();
    unint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", "operator()", 155, 1);
    std::stringbuf::str();
    unint64_t v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unint64_t v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        uint64_t v22 = v30;
      }
      else {
        uint64_t v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unint64_t v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  long long v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19253A834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_impl::compute_slice(std::vector<nitro::slice_range> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::$_2::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", 96);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"range[i].start", 14);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<=", 2);
  int64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"shape[i]", 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  size_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<=", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  int64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", "operator()", 158, 1);
    std::stringbuf::str();
    uint64_t v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      unint64_t v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v18 = (file_logger *)global_logger();
    unint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", "operator()", 158, 1);
    std::stringbuf::str();
    unint64_t v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      unint64_t v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        uint64_t v22 = v30;
      }
      else {
        uint64_t v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unint64_t v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  long long v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19253AC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_impl::compute_transpose(uint64_t **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  int64_t v6 = *a1;
  unint64_t v5 = a1[1];
  int64_t v7 = (char *)v5 - (char *)*a1;
  uint64_t v30 = (void *)(v7 >> 3);
  std::string __p = (void *)(((unsigned char *)a2[1] - (unsigned char *)*a2) >> 3);
  if ((void *)(v7 >> 3) != __p)
  {
    uint64_t v34 = &v30;
    p_p = &__p;
    nitro::ndarray_impl::compute_transpose(std::vector<unsigned long>,std::vector<unsigned long> const&,std::vector<unsigned long> const&)::$_0::operator()();
  }
  uint64_t v34 = 0;
  p_p = 0;
  uint64_t v36 = 0;
  if (v5 == v6)
  {
    uint64_t v12 = 0;
    int64_t v11 = 0;
  }
  else
  {
    if (v7 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v11 = (char *)operator new(v7);
    uint64_t v12 = &v11[8 * (v7 >> 3)];
    memcpy(v11, v6, v7);
  }
  std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
  if (v12 != v11)
  {
    uint64_t v13 = 0;
    unint64_t v14 = (v12 - v11) >> 3;
    if (v14 <= 1) {
      unint64_t v14 = 1;
    }
    do
    {
      std::string __p = *(void **)&v11[8 * (void)v13];
      uint64_t v33 = v13;
      if (v13 != __p)
      {
        uint64_t v30 = &__p;
        unsigned __int8 v31 = &v33;
        nitro::ndarray_impl::compute_transpose(std::vector<unsigned long>,std::vector<unsigned long> const&,std::vector<unsigned long> const&)::$_1::operator()();
      }
      ++v13;
    }
    while ((char *)v14 != v13);
  }
  uint64_t v30 = 0;
  unsigned __int8 v31 = 0;
  uint64_t v32 = 0;
  uint64_t v16 = *a2;
  unint64_t v15 = a2[1];
  int64_t v17 = v15 - (unsigned char *)*a2;
  if (v15 == *a2)
  {
    unint64_t v18 = 0;
  }
  else
  {
    if (v17 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v18 = operator new(v15 - (unsigned char *)*a2);
    uint64_t v30 = v18;
    uint64_t v32 = (char **)&v18[v17 >> 3];
    memcpy(v18, v16, v17);
    unsigned __int8 v31 = v32;
  }
  std::string __p = 0;
  unsigned __int8 v28 = 0;
  uint64_t v29 = 0;
  unint64_t v20 = *(const void **)a3;
  uint64_t v19 = *(void *)(a3 + 8);
  int64_t v21 = v19 - *(void *)a3;
  if (v19 == *(void *)a3)
  {
    uint64_t v22 = 0;
  }
  else
  {
    if (v21 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v22 = operator new(v19 - *(void *)a3);
    std::string __p = v22;
    uint64_t v29 = &v22[v21 >> 3];
    memcpy(v22, v20, v21);
    unsigned __int8 v28 = v29;
  }
  uint64_t v23 = *a1;
  uint64_t v24 = (char *)a1[1] - (char *)*a1;
  if (v24)
  {
    unint64_t v25 = v24 >> 3;
    if (v25 <= 1) {
      unint64_t v25 = 1;
    }
    do
    {
      *v18++ = *((void *)v16 + *v23);
      uint64_t v26 = *v23++;
      *v22++ = *((void *)v20 + v26);
      --v25;
    }
    while (v25);
  }
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJNS_6vectorImNS_9allocatorImEEEES6_EEC2B8ne180100IJLm0ELm1EEJS6_S6_EJEJEJRS6_S9_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSB_IJDpT2_EEEDpOT3_(a4, (uint64_t)&v30, (uint64_t)&__p);
  if (__p)
  {
    unsigned __int8 v28 = __p;
    operator delete(__p);
  }
  if (v30)
  {
    unsigned __int8 v31 = (char **)v30;
    operator delete(v30);
  }
  if (v11) {
    operator delete(v11);
  }
}

void sub_19253AFCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v19 = a12;
    if (!a12)
    {
LABEL_3:
      if (!v17) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(v17);
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v19 = a12;
    if (!a12) {
      goto LABEL_3;
    }
  }
  operator delete(v19);
  if (!v17) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void nitro::ndarray_impl::compute_transpose(std::vector<unsigned long>,std::vector<unsigned long> const&,std::vector<unsigned long> const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", 96);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"permute.size()", 14);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  int64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"shape.size()", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  int64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  size_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  int64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", "operator()", 190, 1);
    std::stringbuf::str();
    unint64_t v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      unint64_t v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", "operator()", 190, 1);
    std::stringbuf::str();
    unint64_t v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      int64_t v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        uint64_t v22 = v30;
      }
      else {
        uint64_t v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    uint64_t v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  unint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19253B334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_impl::compute_transpose(std::vector<unsigned long>,std::vector<unsigned long> const&,std::vector<unsigned long> const&)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", 96);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"permute_sort[i]", 15);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  int64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"i", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  int64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  size_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  int64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", "operator()", 195, 1);
    std::stringbuf::str();
    unint64_t v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      unint64_t v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", "operator()", 195, 1);
    std::stringbuf::str();
    unint64_t v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      int64_t v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        uint64_t v22 = v30;
      }
      else {
        uint64_t v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    uint64_t v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  unint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19253B744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_impl::compute_squeeze(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  uint64_t v38 = a3;
  uint64_t v8 = *a1;
  int64_t v7 = a1[1];
  int64_t v9 = v7 - (unsigned char *)*a1;
  if (v7 == *a1)
  {
    _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorImNS_9allocatorImEEEES6_mEEC2B8ne180100IJLm0ELm1ELm2EEJS6_S6_mEJEJEJRKS6_SA_RmEEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSD_IJDpT2_EEEDpOT3_(a5, (uint64_t)a1, (uint64_t)a2, &v38);
  }
  else
  {
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    if (v9 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v11 = (char *)operator new(v9);
    uint64_t v12 = &v11[8 * (v9 >> 3)];
    uint64_t v35 = v11;
    uint64_t v37 = v12;
    memcpy(v11, v8, v9);
    uint64_t v36 = v12;
    std::string __p = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    unint64_t v14 = *a2;
    uint64_t v13 = a2[1];
    int64_t v15 = v13 - (unsigned char *)*a2;
    uint64_t v30 = a5;
    if (v13 == *a2)
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
    }
    else
    {
      if (v15 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v16 = (char *)operator new(v15);
      std::string __p = v16;
      uint64_t v17 = &v16[8 * (v15 >> 3)];
      uint64_t v34 = v17;
      memcpy(v16, v14, v15);
    }
    if ((int)((unint64_t)v9 >> 3) < 1)
    {
      int64_t v21 = v17;
    }
    else
    {
      unsigned __int8 v31 = v16;
      uint64_t v18 = (int)(v9 >> 3);
      uint64_t v19 = (void *)*a4;
      unint64_t v20 = (void *)a4[1];
      int64_t v21 = v17;
      do
      {
        uint64_t v23 = v18 - 1;
        uint64_t v24 = &v11[8 * v18 - 8];
        if (*(void *)v24 == 1 && (unint64_t)(v12 - v11) >= 9)
        {
          if (v20 == v19) {
            goto LABEL_20;
          }
          unint64_t v25 = v19;
          while (*v25 != v23)
          {
            if (++v25 == v20)
            {
              unint64_t v25 = v20;
              break;
            }
          }
          if (v25 != v20)
          {
LABEL_20:
            uint64_t v26 = &v11[8 * v18];
            int64_t v27 = v12 - v26;
            if (v12 != v26) {
              memmove(&v11[8 * v18 - 8], v26, v12 - v26);
            }
            unsigned __int8 v28 = &v31[8 * v18];
            size_t v29 = v21 - v28;
            if (v29) {
              memmove(&v31[8 * v23], v28, v29);
            }
            uint64_t v12 = &v24[v27];
            int64_t v21 = &v31[8 * v23 + v29];
          }
        }
      }
      while (v18-- > 1);
    }
    uint64_t v36 = v12;
    uint64_t v33 = v21;
    _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorImNS_9allocatorImEEEES6_mEEC2B8ne180100IJLm0ELm1ELm2EEJS6_S6_mEJEJEJRS6_S9_RmEEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSC_IJDpT2_EEEDpOT3_(v30, (uint64_t)&v35, (uint64_t)&__p, &v38);
    if (__p)
    {
      uint64_t v33 = __p;
      operator delete(__p);
    }
    if (v35)
    {
      uint64_t v36 = v35;
      operator delete(v35);
    }
  }
}

void sub_19253BA8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray_impl::compute_broadcast(const void **a1, const void **a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = *a1;
  unint64_t v4 = a1[1];
  int64_t v6 = v4 - (unsigned char *)*a1;
  uint64_t v7 = v6 >> 3;
  uint64_t v8 = *a2;
  int64_t v9 = (unsigned char *)a2[1] - (unsigned char *)*a2;
  uint64_t v10 = v9 >> 3;
  if (v6 >> 3 <= (unint64_t)(v9 >> 3)) {
    unint64_t v11 = v9 >> 3;
  }
  else {
    unint64_t v11 = v6 >> 3;
  }
  uint64_t v12 = 8 * v11;
  uint64_t v59 = a2[1];
  if (v11)
  {
    unint64_t v54 = a1[1];
    size_t __len = v4 - (unsigned char *)*a1;
    if (v11 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = (char *)operator new(8 * v11);
    int64_t v53 = v9;
    unint64_t v14 = &v13[8 * v11];
    memset_pattern16(v13, &xmmword_192DBFE40, 8 * v11);
    int64_t v15 = (char *)operator new(8 * v11);
    memset_pattern16(v15, &xmmword_192DBFE40, 8 * v11);
    uint64_t v16 = (char *)operator new(8 * v11);
    bzero(v16, 8 * v11);
    uint64_t v63 = v16;
    uint64_t v17 = (char *)operator new(8 * v11);
    uint64_t v56 = &v15[8 * v11];
    uint64_t v65 = &v16[v12];
    uint64_t v64 = &v17[v12];
    uint64_t v62 = v17;
    bzero(v17, 8 * v11);
    int64_t v9 = v53;
    int64_t v6 = __len;
    if (v54 != v5) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    uint64_t v56 = 0;
    unint64_t v14 = 0;
    int64_t v15 = 0;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    if (v4 != v5) {
LABEL_7:
    }
      memmove(&v14[-8 * v7], v5, v6);
  }
  uint64_t v18 = *(void *)(a3 + 8);
  if (v18 != *(void *)a3) {
    memmove(&v56[-(v18 - *(void *)a3)], *(const void **)a3, v18 - *(void *)a3);
  }
  if (v59 != v8) {
    memmove(&v65[-8 * v10], v8, v9);
  }
  uint64_t v19 = *(void *)(a4 + 8);
  if (v19 != *(void *)a4) {
    memmove(&v64[-(v19 - *(void *)a4)], *(const void **)a4, v19 - *(void *)a4);
  }
  if (v11)
  {
    unint64_t v20 = (char *)operator new(8 * v11);
    int64_t v21 = &v20[8 * v11];
    memset_pattern16(v20, &xmmword_192DBFE40, 8 * v11);
    for (uint64_t i = 0; i != v11; ++i)
    {
      uint64_t v24 = *(void *)&v13[8 * i];
      uint64_t v23 = *(void *)&v15[8 * i];
      if (v24 == v23)
      {
        uint64_t v23 = *(void *)&v13[8 * i];
      }
      else if (v24 != 1)
      {
        BOOL v25 = v23 == 1;
        uint64_t v23 = *(void *)&v13[8 * i];
        if (!v25)
        {
          if (*((int *)global_logger() + 169) <= 6)
          {
            uint64_t v26 = (file_logger *)global_logger();
            started = (pthread_key_t *)file_logger::start_stream(v26, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", "compute_broadcast", 253, 1);
            unsigned __int8 v28 = pthread_getspecific(started[74]);
            if (v28 && *((unsigned char *)v28 + 280)) {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28 + 2, (uint64_t)"shapes canot be broadcasted", 27);
            }
            size_t v29 = pthread_getspecific(started[74]);
            if (v29 && *((unsigned char *)v29 + 280))
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29 + 2, (uint64_t)"\n", 1);
              file_logger::stream_flush((file_logger *)started);
            }
          }
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v68);
          uint64_t v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Check failed (", 14);
          unsigned __int8 v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", 96);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)":", 1);
          uint64_t v32 = (void *)std::ostream::operator<<();
          uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"): ", 3);
          uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"false", 5);
          std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(void *)(*v34 - 24)));
          uint64_t v35 = std::locale::use_facet(&v69, MEMORY[0x1E4FBA258]);
          ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
          std::locale::~locale(&v69);
          std::ostream::put();
          std::ostream::flush();
          if (*((int *)global_logger() + 169) <= 6)
          {
            uint64_t v36 = (file_logger *)global_logger();
            uint64_t v37 = file_logger::start_stream(v36, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", "operator()", 255, 1);
            std::stringbuf::str();
            uint64_t v38 = (char *)pthread_getspecific(*((void *)v37 + 74));
            if (v38 && v38[280])
            {
              unint64_t v39 = v38 + 16;
              if ((v67 & 0x80u) == 0) {
                uint64_t v40 = __p;
              }
              else {
                uint64_t v40 = (void **)__p[0];
              }
              if ((v67 & 0x80u) == 0) {
                uint64_t v41 = v67;
              }
              else {
                uint64_t v41 = (uint64_t)__p[1];
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, v41);
            }
            if ((char)v67 < 0) {
              operator delete(__p[0]);
            }
          }
          __print_back_trace();
          if (*((int *)global_logger() + 169) <= 6)
          {
            uint64_t v42 = (file_logger *)global_logger();
            uint64_t v43 = file_logger::start_stream(v42, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", "operator()", 255, 1);
            std::stringbuf::str();
            uint64_t v44 = (char *)pthread_getspecific(*((void *)v43 + 74));
            if (v44 && v44[280])
            {
              long long v45 = v44 + 16;
              if ((v71 & 0x80u) == 0) {
                locale = &v69;
              }
              else {
                locale = v69.__locale_;
              }
              if ((v71 & 0x80u) == 0) {
                uint64_t v47 = v71;
              }
              else {
                uint64_t v47 = v70;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)locale, v47);
            }
            unint64_t v48 = pthread_getspecific(*((void *)v43 + 74));
            if (v48)
            {
              if (*((unsigned char *)v48 + 280))
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48 + 2, (uint64_t)"\n", 1);
                file_logger::stream_flush(v43);
                if (*((_DWORD *)v43 + 150) == 7)
                {
                  __print_back_trace();
                  exception = __cxa_allocate_exception(8uLL);
                  void *exception = "LOG_FATAL encountered";
                  __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
                }
              }
            }
            if ((char)v71 < 0) {
              operator delete(v69.__locale_);
            }
          }
          uint64_t v49 = __cxa_allocate_exception(0x18uLL);
          std::stringbuf::str();
        }
      }
      *(void *)&v20[8 * i] = v23;
    }
    for (uint64_t j = 0; j != v11; ++j)
    {
      uint64_t v51 = *(void *)&v20[8 * j];
      if (*(void *)&v13[8 * j] != v51) {
        *(void *)&v63[8 * j] = 0;
      }
      if (*(void *)&v15[8 * j] != v51) {
        *(void *)&v62[8 * j] = 0;
      }
    }
  }
  else
  {
    int64_t v21 = 0;
    unint64_t v20 = 0;
  }
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(a1, v20, v21, (v21 - v20) >> 3);
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((void *)a3, v20, v21, (v21 - v20) >> 3);
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(a2, v63, v65, (v65 - v63) >> 3);
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((void *)a4, v62, v64, (v64 - v62) >> 3);
  if (v20) {
    operator delete(v20);
  }
  if (v62) {
    operator delete(v62);
  }
  if (v63) {
    operator delete(v63);
  }
  if (v15) {
    operator delete(v15);
  }
  if (v13)
  {
    operator delete(v13);
  }
}

void sub_19253C140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  if (*(char *)(v50 - 89) < 0) {
    operator delete(*(void **)(v50 - 112));
  }
  a31 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a31 + *(void *)(a31 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a32 = MEMORY[0x1E4FBA470] + 16;
  if (a45 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a48);
  if (v49)
  {
    operator delete(v49);
    if (!a18)
    {
LABEL_7:
      if (!a19) {
        goto LABEL_8;
      }
      goto LABEL_15;
    }
  }
  else if (!a18)
  {
    goto LABEL_7;
  }
  operator delete(a18);
  if (!a19)
  {
LABEL_8:
    if (!v48) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_15:
  operator delete(a19);
  if (!v48)
  {
LABEL_10:
    if (a22) {
      operator delete(a22);
    }
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(v48);
  goto LABEL_10;
}

void nitro::ndarray_container::init_from_shape(int a1@<W0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  switch(a1)
  {
    case 3:
      nitro::ndarray<int>::init_from_shape(a2, &v27);
      nitro::ndarray_container::ndarray_container<int,(void *)0>(a3, &v27);
      break;
    case 5:
      nitro::ndarray<unsigned char>::init_from_shape(a2, &v27);
      nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>(a3, &v27);
      break;
    case 9:
      nitro::ndarray<float>::init_from_shape(a2, &v27);
      nitro::ndarray_container::ndarray_container<float,(void *)0>(a3, &v27);
      break;
    case 11:
      nitro::ndarray<half>::init_from_shape(a2, &v27);
      nitro::ndarray_container::ndarray_container<half,(void *)0>(a3, &v27);
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v27);
      unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Check failed (", 14);
      int64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", 96);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
      uint64_t v7 = (void *)std::ostream::operator<<();
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
      int64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v9);
      if (*((int *)global_logger() + 169) <= 6)
      {
        uint64_t v10 = (file_logger *)global_logger();
        started = file_logger::start_stream(v10, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", "operator()", 306, 1);
        std::stringbuf::str();
        uint64_t v12 = (char *)pthread_getspecific(*((void *)started + 74));
        if (v12 && v12[280])
        {
          uint64_t v13 = v12 + 16;
          if ((v26 & 0x80u) == 0) {
            unint64_t v14 = v25;
          }
          else {
            unint64_t v14 = (void **)v25[0];
          }
          if ((v26 & 0x80u) == 0) {
            uint64_t v15 = v26;
          }
          else {
            uint64_t v15 = (uint64_t)v25[1];
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
        }
        if ((char)v26 < 0) {
          operator delete(v25[0]);
        }
      }
      __print_back_trace();
      if (*((int *)global_logger() + 169) <= 6)
      {
        uint64_t v16 = (file_logger *)global_logger();
        uint64_t v17 = file_logger::start_stream(v16, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", "operator()", 306, 1);
        std::stringbuf::str();
        uint64_t v18 = (char *)pthread_getspecific(*((void *)v17 + 74));
        if (v18 && v18[280])
        {
          uint64_t v19 = v18 + 16;
          if ((v34 & 0x80u) == 0) {
            unint64_t v20 = v33;
          }
          else {
            unint64_t v20 = (void **)v33[0];
          }
          if ((v34 & 0x80u) == 0) {
            uint64_t v21 = v34;
          }
          else {
            uint64_t v21 = (uint64_t)v33[1];
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
        }
        uint64_t v22 = pthread_getspecific(*((void *)v17 + 74));
        if (v22)
        {
          if (*((unsigned char *)v22 + 280))
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22 + 2, (uint64_t)"\n", 1);
            file_logger::stream_flush(v17);
            if (*((_DWORD *)v17 + 150) == 7)
            {
              __print_back_trace();
              exception = __cxa_allocate_exception(8uLL);
              void *exception = "LOG_FATAL encountered";
              __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
            }
          }
        }
        if ((char)v34 < 0) {
          operator delete(v33[0]);
        }
      }
      uint64_t v23 = __cxa_allocate_exception(0x18uLL);
      std::stringbuf::str();
  }
  if (__p)
  {
    uint64_t v32 = __p;
    operator delete(__p);
  }
  if (v29)
  {
    uint64_t v30 = v29;
    operator delete(v29);
  }
  unint64_t v4 = v28;
  if (v28)
  {
    if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_19253C690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void sub_19253C7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19253C7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19253C7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19253C7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::init_from_shape(uint64_t **a1@<X0>, void *a2@<X8>)
{
  v17[0] = 0;
  v17[1] = 0;
  unint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  if (v3 != *a1)
  {
    unint64_t v5 = (char *)v3 - (char *)*a1 - 8;
    if (v5 >= 8)
    {
      uint64_t v8 = (v5 >> 3) + 1;
      uint64_t v7 = &v4[v8 & 0x3FFFFFFFFFFFFFFELL];
      int64_t v9 = v4 + 1;
      uint64_t v10 = 1;
      uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v12 = 1;
      do
      {
        v10 *= *(v9 - 1);
        v12 *= *v9;
        v9 += 2;
        v11 -= 2;
      }
      while (v11);
      uint64_t v6 = v12 * v10;
      if (v8 == (v8 & 0x3FFFFFFFFFFFFFFELL)) {
LABEL_8:
      }
        operator new[]();
    }
    else
    {
      uint64_t v6 = 1;
      uint64_t v7 = *a1;
    }
    do
    {
      uint64_t v13 = *v7++;
      v6 *= v13;
    }
    while (v7 != v3);
    goto LABEL_8;
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v16 = 0;
  nitro::ndarray<unsigned char>::ndarray(a2, v17, (uint64_t)a1, (uint64_t)__p, 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  unint64_t v14 = (std::__shared_weak_count *)v17[1];
  if (v17[1] && !atomic_fetch_add((atomic_ullong *volatile)v17[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
}

void sub_19253C9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::init_from_shape(uint64_t **a1@<X0>, void *a2@<X8>)
{
  v17[0] = 0;
  v17[1] = 0;
  unint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  if (v3 != *a1)
  {
    unint64_t v5 = (char *)v3 - (char *)*a1 - 8;
    if (v5 >= 8)
    {
      uint64_t v8 = (v5 >> 3) + 1;
      uint64_t v7 = &v4[v8 & 0x3FFFFFFFFFFFFFFELL];
      int64_t v9 = v4 + 1;
      uint64_t v10 = 1;
      uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v12 = 1;
      do
      {
        v10 *= *(v9 - 1);
        v12 *= *v9;
        v9 += 2;
        v11 -= 2;
      }
      while (v11);
      uint64_t v6 = v12 * v10;
      if (v8 == (v8 & 0x3FFFFFFFFFFFFFFELL)) {
LABEL_8:
      }
        operator new[]();
    }
    else
    {
      uint64_t v6 = 1;
      uint64_t v7 = *a1;
    }
    do
    {
      uint64_t v13 = *v7++;
      v6 *= v13;
    }
    while (v7 != v3);
    goto LABEL_8;
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v16 = 0;
  nitro::ndarray<int>::ndarray(a2, v17, (uint64_t)a1, (uint64_t)__p, 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  unint64_t v14 = (std::__shared_weak_count *)v17[1];
  if (v17[1] && !atomic_fetch_add((atomic_ullong *volatile)v17[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
}

void sub_19253CBC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::init_from_shape(uint64_t **a1@<X0>, void *a2@<X8>)
{
  v17[0] = 0;
  v17[1] = 0;
  unint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  if (v3 != *a1)
  {
    unint64_t v5 = (char *)v3 - (char *)*a1 - 8;
    if (v5 >= 8)
    {
      uint64_t v8 = (v5 >> 3) + 1;
      uint64_t v7 = &v4[v8 & 0x3FFFFFFFFFFFFFFELL];
      int64_t v9 = v4 + 1;
      uint64_t v10 = 1;
      uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v12 = 1;
      do
      {
        v10 *= *(v9 - 1);
        v12 *= *v9;
        v9 += 2;
        v11 -= 2;
      }
      while (v11);
      uint64_t v6 = v12 * v10;
      if (v8 == (v8 & 0x3FFFFFFFFFFFFFFELL)) {
LABEL_8:
      }
        operator new[]();
    }
    else
    {
      uint64_t v6 = 1;
      uint64_t v7 = *a1;
    }
    do
    {
      uint64_t v13 = *v7++;
      v6 *= v13;
    }
    while (v7 != v3);
    goto LABEL_8;
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v16 = 0;
  nitro::ndarray<half>::ndarray(a2, v17, (uint64_t)a1, (uint64_t)__p, 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  unint64_t v14 = (std::__shared_weak_count *)v17[1];
  if (v17[1] && !atomic_fetch_add((atomic_ullong *volatile)v17[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
}

void sub_19253CDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::concat(nitro::ndarray_container **a1@<X0>, unint64_t a2@<X1>, nitro::ndarray_container *a3@<X8>)
{
  unint64_t v5 = *a1;
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  if (v6 == 1)
  {
    uint64_t v7 = *a1;
    nitro::ndarray_container::copy(v7);
  }
  if (!v6)
  {
    nitro::ndarray_container::ndarray_container(a3);
  }
  switch(*(_DWORD *)v5)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)v35, (uint64_t)v5);
      int64x2_t v55 = 0uLL;
      unint64_t v56 = 0;
      int64_t v9 = *a1;
      uint64_t v10 = a1[1];
      if (*a1 != v10)
      {
        do
        {
          if (*(_DWORD *)v9 == 3) {
            nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v41, v9);
          }
          else {
            _ZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(v9, (uint64_t)&v41);
          }
          nitro::ndarray<int>::ndarray((uint64_t)&v49, (uint64_t)&v41);
          uint64_t v11 = (void *)v55.i64[1];
          if (v55.i64[1] >= v56)
          {
            v55.i64[1] = (uint64_t)std::vector<nitro::ndarray<unsigned char>>::__push_back_slow_path<nitro::ndarray<unsigned char>>(&v55, &v49);
            if ((void)__p)
            {
              *((void *)&__p + 1) = __p;
              operator delete((void *)__p);
            }
          }
          else
          {
            *(_OWORD *)v55.i64[1] = v49;
            long long v49 = 0uLL;
            v11[4] = 0;
            v11[5] = 0;
            v11[2] = 0;
            v11[3] = 0;
            *((_OWORD *)v11 + 1) = v50;
            v11[4] = v51;
            long long v50 = 0uLL;
            uint64_t v51 = 0;
            v11[6] = 0;
            v11[7] = 0;
            *(_OWORD *)(v11 + 5) = __p;
            v11[7] = v53;
            long long __p = 0uLL;
            uint64_t v53 = 0;
            v11[8] = v54;
            v55.i64[1] = (uint64_t)(v11 + 9);
          }
          if ((void)v50)
          {
            *((void *)&v50 + 1) = v50;
            operator delete((void *)v50);
          }
          uint64_t v12 = (std::__shared_weak_count *)*((void *)&v49 + 1);
          if (*((void *)&v49 + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v49 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
          if (v47)
          {
            unint64_t v48 = v47;
            operator delete(v47);
          }
          if (v44)
          {
            long long v45 = v44;
            operator delete(v44);
          }
          uint64_t v13 = (std::__shared_weak_count *)v43;
          if (v43 && !atomic_fetch_add((atomic_ullong *volatile)v43 + 1, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
          int64_t v9 = (const nitro::ndarray_container *)((char *)v9 + 80);
        }
        while (v9 != v10);
      }
      nitro::ndarray<int>::concat((uint64_t **)&v55, a2, &v41);
      nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)a3, &v41);
      if (v46)
      {
        uint64_t v47 = v46;
        operator delete(v46);
      }
      if (v43)
      {
        uint64_t v44 = v43;
        operator delete(v43);
      }
      size_t v29 = v42;
      if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
      uint64_t v41 = &v55;
      std::vector<nitro::ndarray<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
      uint64_t v30 = v39;
      if (!v39) {
        goto LABEL_134;
      }
      goto LABEL_133;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)v35, (uint64_t)v5);
      int64x2_t v55 = 0uLL;
      unint64_t v56 = 0;
      unint64_t v14 = *a1;
      uint64_t v15 = a1[1];
      if (*a1 != v15)
      {
        do
        {
          if (*(_DWORD *)v14 == 5) {
            nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v41, v14);
          }
          else {
            _ZNK5nitro17ndarray_container5visitIZNKS0_4castIhEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(v14, (uint64_t)&v41);
          }
          nitro::ndarray<unsigned char>::ndarray((uint64_t)&v49, (uint64_t)&v41);
          uint64_t v16 = (void *)v55.i64[1];
          if (v55.i64[1] >= v56)
          {
            v55.i64[1] = (uint64_t)std::vector<nitro::ndarray<unsigned char>>::__push_back_slow_path<nitro::ndarray<unsigned char>>(&v55, &v49);
            if ((void)__p)
            {
              *((void *)&__p + 1) = __p;
              operator delete((void *)__p);
            }
          }
          else
          {
            *(_OWORD *)v55.i64[1] = v49;
            long long v49 = 0uLL;
            v16[4] = 0;
            v16[5] = 0;
            v16[2] = 0;
            void v16[3] = 0;
            *((_OWORD *)v16 + 1) = v50;
            v16[4] = v51;
            long long v50 = 0uLL;
            uint64_t v51 = 0;
            v16[6] = 0;
            v16[7] = 0;
            *(_OWORD *)(v16 + 5) = __p;
            v16[7] = v53;
            long long __p = 0uLL;
            uint64_t v53 = 0;
            unsigned char v16[8] = v54;
            v55.i64[1] = (uint64_t)(v16 + 9);
          }
          if ((void)v50)
          {
            *((void *)&v50 + 1) = v50;
            operator delete((void *)v50);
          }
          uint64_t v17 = (std::__shared_weak_count *)*((void *)&v49 + 1);
          if (*((void *)&v49 + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v49 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          if (v47)
          {
            unint64_t v48 = v47;
            operator delete(v47);
          }
          if (v44)
          {
            long long v45 = v44;
            operator delete(v44);
          }
          uint64_t v18 = (std::__shared_weak_count *)v43;
          if (v43 && !atomic_fetch_add((atomic_ullong *volatile)v43 + 1, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
          unint64_t v14 = (const nitro::ndarray_container *)((char *)v14 + 80);
        }
        while (v14 != v15);
      }
      nitro::ndarray<unsigned char>::concat((uint64_t **)&v55, a2, &v41);
      nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)a3, &v41);
      if (v46)
      {
        uint64_t v47 = v46;
        operator delete(v46);
      }
      if (v43)
      {
        uint64_t v44 = v43;
        operator delete(v43);
      }
      unsigned __int8 v31 = v42;
      if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
      uint64_t v41 = &v55;
      std::vector<nitro::ndarray<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
      uint64_t v30 = v39;
      if (!v39) {
        goto LABEL_134;
      }
      goto LABEL_133;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)v35, (uint64_t)v5);
      int64x2_t v55 = 0uLL;
      unint64_t v56 = 0;
      uint64_t v19 = *a1;
      unint64_t v20 = a1[1];
      if (*a1 != v20)
      {
        do
        {
          if (*(_DWORD *)v19 == 9) {
            nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v41, v19);
          }
          else {
            _ZNK5nitro17ndarray_container5visitIZNKS0_4castIfEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(v19, (uint64_t)&v41);
          }
          nitro::ndarray<float>::ndarray((uint64_t)&v49, (uint64_t)&v41);
          uint64_t v21 = (void *)v55.i64[1];
          if (v55.i64[1] >= v56)
          {
            v55.i64[1] = (uint64_t)std::vector<nitro::ndarray<unsigned char>>::__push_back_slow_path<nitro::ndarray<unsigned char>>(&v55, &v49);
            if ((void)__p)
            {
              *((void *)&__p + 1) = __p;
              operator delete((void *)__p);
            }
          }
          else
          {
            *(_OWORD *)v55.i64[1] = v49;
            long long v49 = 0uLL;
            v21[4] = 0;
            v21[5] = 0;
            v21[2] = 0;
            v21[3] = 0;
            *((_OWORD *)v21 + 1) = v50;
            v21[4] = v51;
            long long v50 = 0uLL;
            uint64_t v51 = 0;
            v21[6] = 0;
            v21[7] = 0;
            *(_OWORD *)(v21 + 5) = __p;
            v21[7] = v53;
            long long __p = 0uLL;
            uint64_t v53 = 0;
            v21[8] = v54;
            v55.i64[1] = (uint64_t)(v21 + 9);
          }
          if ((void)v50)
          {
            *((void *)&v50 + 1) = v50;
            operator delete((void *)v50);
          }
          uint64_t v22 = (std::__shared_weak_count *)*((void *)&v49 + 1);
          if (*((void *)&v49 + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v49 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
          if (v47)
          {
            unint64_t v48 = v47;
            operator delete(v47);
          }
          if (v44)
          {
            long long v45 = v44;
            operator delete(v44);
          }
          uint64_t v23 = (std::__shared_weak_count *)v43;
          if (v43 && !atomic_fetch_add((atomic_ullong *volatile)v43 + 1, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
          uint64_t v19 = (const nitro::ndarray_container *)((char *)v19 + 80);
        }
        while (v19 != v20);
      }
      nitro::ndarray<float>::concat((uint64_t **)&v55, a2, &v41);
      nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)a3, &v41);
      if (v46)
      {
        uint64_t v47 = v46;
        operator delete(v46);
      }
      if (v43)
      {
        uint64_t v44 = v43;
        operator delete(v43);
      }
      uint64_t v32 = v42;
      if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
      uint64_t v41 = &v55;
      std::vector<nitro::ndarray<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
      uint64_t v30 = v39;
      if (!v39) {
        goto LABEL_134;
      }
      goto LABEL_133;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)v35, (uint64_t)v5);
      int64x2_t v55 = 0uLL;
      unint64_t v56 = 0;
      uint64_t v24 = *a1;
      BOOL v25 = a1[1];
      if (*a1 != v25)
      {
        do
        {
          if (*(_DWORD *)v24 == 11) {
            nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v41, v24);
          }
          else {
            _ZNK5nitro17ndarray_container5visitIZNKS0_4castIDhEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(v24, (uint64_t)&v41);
          }
          nitro::ndarray<half>::ndarray((uint64_t)&v49, (uint64_t)&v41);
          unsigned __int8 v26 = (void *)v55.i64[1];
          if (v55.i64[1] >= v56)
          {
            v55.i64[1] = (uint64_t)std::vector<nitro::ndarray<unsigned char>>::__push_back_slow_path<nitro::ndarray<unsigned char>>(&v55, &v49);
            if ((void)__p)
            {
              *((void *)&__p + 1) = __p;
              operator delete((void *)__p);
            }
          }
          else
          {
            *(_OWORD *)v55.i64[1] = v49;
            long long v49 = 0uLL;
            v26[4] = 0;
            v26[5] = 0;
            v26[2] = 0;
            v26[3] = 0;
            *((_OWORD *)v26 + 1) = v50;
            v26[4] = v51;
            long long v50 = 0uLL;
            uint64_t v51 = 0;
            v26[6] = 0;
            v26[7] = 0;
            *(_OWORD *)(v26 + 5) = __p;
            v26[7] = v53;
            long long __p = 0uLL;
            uint64_t v53 = 0;
            v26[8] = v54;
            v55.i64[1] = (uint64_t)(v26 + 9);
          }
          if ((void)v50)
          {
            *((void *)&v50 + 1) = v50;
            operator delete((void *)v50);
          }
          uint64_t v27 = (std::__shared_weak_count *)*((void *)&v49 + 1);
          if (*((void *)&v49 + 1)
            && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v49 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
          if (v47)
          {
            unint64_t v48 = v47;
            operator delete(v47);
          }
          if (v44)
          {
            long long v45 = v44;
            operator delete(v44);
          }
          unsigned __int8 v28 = (std::__shared_weak_count *)v43;
          if (v43 && !atomic_fetch_add((atomic_ullong *volatile)v43 + 1, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
          uint64_t v24 = (const nitro::ndarray_container *)((char *)v24 + 80);
        }
        while (v24 != v25);
      }
      nitro::ndarray<half>::concat((uint64_t **)&v55, a2, &v41);
      nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)a3, &v41);
      if (v46)
      {
        uint64_t v47 = v46;
        operator delete(v46);
      }
      if (v43)
      {
        uint64_t v44 = v43;
        operator delete(v43);
      }
      uint64_t v33 = v42;
      if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
      uint64_t v41 = &v55;
      std::vector<nitro::ndarray<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
      uint64_t v30 = v39;
      if (v39)
      {
LABEL_133:
        uint64_t v40 = v30;
        operator delete(v30);
      }
LABEL_134:
      if (v37)
      {
        uint64_t v38 = v37;
        operator delete(v37);
      }
      unsigned __int8 v34 = v36;
      if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
      return;
    default:
      nitro::ndarray_container::visit<nitro::ndarray_container::concat(std::vector<nitro::ndarray_container> const&,unsigned long)::$_0>(nitro::ndarray_container::concat(std::vector<nitro::ndarray_container> const&,unsigned long)::$_0)const::{lambda(void)#1}::operator()();
  }
}

void nitro::ndarray_container::copy(nitro::ndarray_container *this)
{
  switch(*(_DWORD *)this)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v1, (uint64_t)this);
      nitro::ndarray<int>::copy(&v1);
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v1, (uint64_t)this);
      nitro::ndarray<unsigned char>::copy(&v1);
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v1, (uint64_t)this);
      nitro::ndarray<float>::copy(&v1);
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v1, (uint64_t)this);
      nitro::ndarray<half>::copy(&v1);
    default:
      nitro::ndarray_container::visit<nitro::ndarray_container::copy(void)::$_0>(nitro::ndarray_container::copy(void)::$_0)const::{lambda(void)#1}::operator()();
  }
}

void *nitro::operator<<(void *a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v5, (uint64_t)a2);
      nitro::operator<<<int>(a1, &v5);
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v5, (uint64_t)a2);
      nitro::operator<<<unsigned char>(a1, &v5);
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v5, (uint64_t)a2);
      nitro::operator<<<float>(a1, &v5);
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v5, (uint64_t)a2);
      nitro::operator<<<half>(a1, &v5);
      break;
    default:
      nitro::ndarray_container::visit<nitro::operator<<(std::ostream &,nitro::ndarray_container const&)::$_0>(nitro::operator<<(std::ostream &,nitro::ndarray_container const&)::$_0)const::{lambda(void)#1}::operator()();
  }
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
  if (v7)
  {
    uint64_t v8 = v7;
    operator delete(v7);
  }
  uint64_t v3 = v6;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void sub_19253E764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  nitro::ndarray_container::copy((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_19253E788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  nitro::ndarray_container::copy((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_19253E7AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  nitro::ndarray_container::copy((uint64_t)&a10);
  _Unwind_Resume(a1);
}

_DWORD *nitro::ndarray_container::operator+=(_DWORD *a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v44, (uint64_t)a2);
      long long v50 = &v57;
      nitro::ndarray<int>::ndarray(&v51, &v44);
      switch(*a1)
      {
        case 3:
          uint64_t v3 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)&v58, (uint64_t)a1);
          nitro::ndarray<int>::operator+=<int>(v3, &v51);
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)v38, &v58);
          break;
        case 5:
          uint64_t v32 = (void *)nitro::ndarray<unsigned char>::ndarray((uint64_t)&v58, (uint64_t)a1);
          nitro::ndarray<unsigned char>::operator+=<int>(v32, &v51);
          nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)v38, &v58);
          break;
        case 9:
          uint64_t v19 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)&v58, (uint64_t)a1);
          nitro::ndarray<float>::operator+=<int>(v19, &v51);
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)v38, &v58);
          break;
        case 0xB:
          uint64_t v30 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)&v58, (uint64_t)a1);
          nitro::ndarray<half>::operator+=<int>(v30, &v51);
          nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)v38, &v58);
          break;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>)::{lambda(void)#1}::operator()();
      }
      return result;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v44, (uint64_t)a2);
      long long v50 = &v57;
      nitro::ndarray<unsigned char>::ndarray(&v51, &v44);
      switch(*a1)
      {
        case 3:
          unint64_t v6 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)&v58, (uint64_t)a1);
          nitro::ndarray<int>::operator+=<unsigned char>(v6, &v51);
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)v38, &v58);
          break;
        case 5:
          unsigned __int8 v31 = (void *)nitro::ndarray<unsigned char>::ndarray((uint64_t)&v58, (uint64_t)a1);
          nitro::ndarray<unsigned char>::operator+=<unsigned char>(v31, &v51);
          nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)v38, &v58);
          break;
        case 9:
          uint64_t v13 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)&v58, (uint64_t)a1);
          nitro::ndarray<float>::operator+=<unsigned char>(v13, &v51, v14, v15, v16, v17, v18);
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)v38, &v58);
          break;
        case 0xB:
          uint64_t v24 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)&v58, (uint64_t)a1);
          nitro::ndarray<half>::operator+=<unsigned char>(v24, &v51, v25, v26, v27, v28, v29);
          nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)v38, &v58);
          break;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>)::{lambda(void)#1}::operator()();
      }
      return result;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v44, (uint64_t)a2);
      long long v50 = &v57;
      nitro::ndarray<float>::ndarray(&v51, &v44);
      switch(*a1)
      {
        case 3:
          unint64_t v4 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)&v58, (uint64_t)a1);
          nitro::ndarray<int>::operator+=<float>(v4, &v51);
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)v38, &v58);
          break;
        case 5:
          uint64_t v10 = (void *)nitro::ndarray<unsigned char>::ndarray((uint64_t)&v58, (uint64_t)a1);
          nitro::ndarray<unsigned char>::operator+=<float>(v10, &v51, v11, v12);
          nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)v38, &v58);
          break;
        case 9:
          uint64_t v7 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)&v58, (uint64_t)a1);
          nitro::ndarray<float>::operator+=<float>(v7, &v51);
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)v38, &v58);
          break;
        case 0xB:
          uint64_t v8 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)&v58, (uint64_t)a1);
          nitro::ndarray<half>::operator+=<float>(v8, &v51);
          nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)v38, &v58);
          break;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>)::{lambda(void)#1}::operator()();
      }
      return result;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v44, (uint64_t)a2);
      long long v50 = &v57;
      nitro::ndarray<half>::ndarray(&v51, &v44);
      switch(*a1)
      {
        case 3:
          uint64_t v5 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)&v58, (uint64_t)a1);
          nitro::ndarray<int>::operator+=<half>(v5, &v51);
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)v38, &v58);
          break;
        case 5:
          uint64_t v21 = (void *)nitro::ndarray<unsigned char>::ndarray((uint64_t)&v58, (uint64_t)a1);
          nitro::ndarray<unsigned char>::operator+=<half>(v21, &v51, v22, v23);
          nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)v38, &v58);
          break;
        case 9:
          int64_t v9 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)&v58, (uint64_t)a1);
          nitro::ndarray<float>::operator+=<half>(v9, &v51);
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)v38, &v58);
          break;
        case 0xB:
          unint64_t v20 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)&v58, (uint64_t)a1);
          nitro::ndarray<half>::operator+=<half>(v20, &v51);
          nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)v38, &v58);
          break;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>)::{lambda(void)#1}::operator()();
      }
      return result;
    default:
      nitro::ndarray_container::visit<nitro::ndarray_container const,nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,(void *)0>(nitro::ndarray_container const &,nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0)::{lambda(void)#1}::operator()();
  }
  if (v62)
  {
    uint64_t v63 = v62;
    operator delete(v62);
  }
  if (v60)
  {
    long long v61 = v60;
    operator delete(v60);
  }
  uint64_t v33 = v59;
  if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  if (__p)
  {
    unint64_t v56 = __p;
    operator delete(__p);
  }
  if (v53)
  {
    uint64_t v54 = v53;
    operator delete(v53);
  }
  unsigned __int8 v34 = v52;
  if (v52 && !atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  if (v48)
  {
    long long v49 = v48;
    operator delete(v48);
  }
  if (v46)
  {
    uint64_t v47 = v46;
    operator delete(v46);
  }
  uint64_t v35 = v45;
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  nitro::ndarray_container::operator=((uint64_t)a1, (uint64_t)v38);
  if (v42)
  {
    uint64_t v43 = v42;
    operator delete(v42);
  }
  if (v40)
  {
    uint64_t v41 = v40;
    operator delete(v40);
  }
  uint64_t v36 = v39;
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  return a1;
}

void sub_19253EDF4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,void *a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v37 = *(void **)(v36 - 80);
  if (v37)
  {
    *(void *)(v36 - 72) = v37;
    operator delete(v37);
  }
  nitro::ndarray_container::concat(v36 - 120);
  uint64_t v38 = *(_Unwind_Exception **)(v36 - 48);
  if (__p)
  {
    operator delete(__p);
    unint64_t v39 = a32;
    if (!a32)
    {
LABEL_5:
      uint64_t v40 = a31;
      if (!a31) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v39 = a32;
    if (!a32) {
      goto LABEL_5;
    }
  }
  operator delete(v39);
  uint64_t v40 = a31;
  if (!a31) {
    goto LABEL_11;
  }
LABEL_9:
  if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
LABEL_11:
  if (a25)
  {
    operator delete(a25);
    uint64_t v41 = a22;
    if (!a22)
    {
LABEL_13:
      uint64_t v42 = a21;
      if (!a21) {
        goto LABEL_19;
      }
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v41 = a22;
    if (!a22) {
      goto LABEL_13;
    }
  }
  operator delete(v41);
  uint64_t v42 = a21;
  if (!a21) {
    goto LABEL_19;
  }
LABEL_17:
  if (!atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
LABEL_19:
  _Unwind_Resume(v38);
}

_DWORD *nitro::ndarray_container::operator-=(_DWORD *a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v44, (uint64_t)a2);
      long long v50 = &v57;
      nitro::ndarray<int>::ndarray(&v51, &v44);
      switch(*a1)
      {
        case 3:
          uint64_t v3 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)&v58, (uint64_t)a1);
          nitro::ndarray<int>::operator-=<int>(v3, &v51);
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)v38, &v58);
          break;
        case 5:
          uint64_t v32 = (void *)nitro::ndarray<unsigned char>::ndarray((uint64_t)&v58, (uint64_t)a1);
          nitro::ndarray<unsigned char>::operator-=<int>(v32, &v51);
          nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)v38, &v58);
          break;
        case 9:
          uint64_t v19 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)&v58, (uint64_t)a1);
          nitro::ndarray<float>::operator-=<int>(v19, &v51);
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)v38, &v58);
          break;
        case 0xB:
          uint64_t v30 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)&v58, (uint64_t)a1);
          nitro::ndarray<half>::operator-=<int>(v30, &v51);
          nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)v38, &v58);
          break;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>)::{lambda(void)#1}::operator()();
      }
      return result;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v44, (uint64_t)a2);
      long long v50 = &v57;
      nitro::ndarray<unsigned char>::ndarray(&v51, &v44);
      switch(*a1)
      {
        case 3:
          unint64_t v6 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)&v58, (uint64_t)a1);
          nitro::ndarray<int>::operator-=<unsigned char>(v6, &v51);
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)v38, &v58);
          break;
        case 5:
          unsigned __int8 v31 = (void *)nitro::ndarray<unsigned char>::ndarray((uint64_t)&v58, (uint64_t)a1);
          nitro::ndarray<unsigned char>::operator-=<unsigned char>(v31, &v51);
          nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)v38, &v58);
          break;
        case 9:
          uint64_t v13 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)&v58, (uint64_t)a1);
          nitro::ndarray<float>::operator-=<unsigned char>(v13, &v51, v14, v15, v16, v17, v18);
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)v38, &v58);
          break;
        case 0xB:
          uint64_t v24 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)&v58, (uint64_t)a1);
          nitro::ndarray<half>::operator-=<unsigned char>(v24, &v51, v25, v26, v27, v28, v29);
          nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)v38, &v58);
          break;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>)::{lambda(void)#1}::operator()();
      }
      return result;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v44, (uint64_t)a2);
      long long v50 = &v57;
      nitro::ndarray<float>::ndarray(&v51, &v44);
      switch(*a1)
      {
        case 3:
          unint64_t v4 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)&v58, (uint64_t)a1);
          nitro::ndarray<int>::operator-=<float>(v4, &v51);
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)v38, &v58);
          break;
        case 5:
          uint64_t v10 = (void *)nitro::ndarray<unsigned char>::ndarray((uint64_t)&v58, (uint64_t)a1);
          nitro::ndarray<unsigned char>::operator-=<float>(v10, &v51, v11, v12);
          nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)v38, &v58);
          break;
        case 9:
          uint64_t v7 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)&v58, (uint64_t)a1);
          nitro::ndarray<float>::operator-=<float>(v7, &v51);
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)v38, &v58);
          break;
        case 0xB:
          uint64_t v8 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)&v58, (uint64_t)a1);
          nitro::ndarray<half>::operator-=<float>(v8, &v51);
          nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)v38, &v58);
          break;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>)::{lambda(void)#1}::operator()();
      }
      return result;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v44, (uint64_t)a2);
      long long v50 = &v57;
      nitro::ndarray<half>::ndarray(&v51, &v44);
      switch(*a1)
      {
        case 3:
          uint64_t v5 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)&v58, (uint64_t)a1);
          nitro::ndarray<int>::operator-=<half>(v5, &v51);
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)v38, &v58);
          break;
        case 5:
          uint64_t v21 = (void *)nitro::ndarray<unsigned char>::ndarray((uint64_t)&v58, (uint64_t)a1);
          nitro::ndarray<unsigned char>::operator-=<half>(v21, &v51, v22, v23);
          nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)v38, &v58);
          break;
        case 9:
          int64_t v9 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)&v58, (uint64_t)a1);
          nitro::ndarray<float>::operator-=<half>(v9, &v51);
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)v38, &v58);
          break;
        case 0xB:
          unint64_t v20 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)&v58, (uint64_t)a1);
          nitro::ndarray<half>::operator-=<half>(v20, &v51);
          nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)v38, &v58);
          break;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>)::{lambda(void)#1}::operator()();
      }
      return result;
    default:
      nitro::ndarray_container::visit<nitro::ndarray_container const,nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,(void *)0>(nitro::ndarray_container const &,nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0)::{lambda(void)#1}::operator()();
  }
  if (v62)
  {
    uint64_t v63 = v62;
    operator delete(v62);
  }
  if (v60)
  {
    long long v61 = v60;
    operator delete(v60);
  }
  uint64_t v33 = v59;
  if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  if (__p)
  {
    unint64_t v56 = __p;
    operator delete(__p);
  }
  if (v53)
  {
    uint64_t v54 = v53;
    operator delete(v53);
  }
  unsigned __int8 v34 = v52;
  if (v52 && !atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  if (v48)
  {
    long long v49 = v48;
    operator delete(v48);
  }
  if (v46)
  {
    uint64_t v47 = v46;
    operator delete(v46);
  }
  uint64_t v35 = v45;
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  nitro::ndarray_container::operator=((uint64_t)a1, (uint64_t)v38);
  if (v42)
  {
    uint64_t v43 = v42;
    operator delete(v42);
  }
  if (v40)
  {
    uint64_t v41 = v40;
    operator delete(v40);
  }
  uint64_t v36 = v39;
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  return a1;
}

void sub_19253FA14(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,void *a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v37 = *(void **)(v36 - 80);
  if (v37)
  {
    *(void *)(v36 - 72) = v37;
    operator delete(v37);
  }
  nitro::ndarray_container::concat(v36 - 120);
  uint64_t v38 = *(_Unwind_Exception **)(v36 - 48);
  if (__p)
  {
    operator delete(__p);
    unint64_t v39 = a32;
    if (!a32)
    {
LABEL_5:
      uint64_t v40 = a31;
      if (!a31) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v39 = a32;
    if (!a32) {
      goto LABEL_5;
    }
  }
  operator delete(v39);
  uint64_t v40 = a31;
  if (!a31) {
    goto LABEL_11;
  }
LABEL_9:
  if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
LABEL_11:
  if (a25)
  {
    operator delete(a25);
    uint64_t v41 = a22;
    if (!a22)
    {
LABEL_13:
      uint64_t v42 = a21;
      if (!a21) {
        goto LABEL_19;
      }
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v41 = a22;
    if (!a22) {
      goto LABEL_13;
    }
  }
  operator delete(v41);
  uint64_t v42 = a21;
  if (!a21) {
    goto LABEL_19;
  }
LABEL_17:
  if (!atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
LABEL_19:
  _Unwind_Resume(v38);
}

_DWORD *nitro::ndarray_container::operator*=(_DWORD *a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v49, (uint64_t)a2);
      int64x2_t v55 = &v62;
      nitro::ndarray<int>::ndarray(&v56, &v49);
      switch(*a1)
      {
        case 3:
          uint64_t v3 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)&v63, (uint64_t)a1);
          nitro::ndarray<int>::operator*=<int>(v3, &v56);
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)v43, &v63);
          break;
        case 5:
          uint64_t v37 = (void *)nitro::ndarray<unsigned char>::ndarray((uint64_t)&v63, (uint64_t)a1);
          nitro::ndarray<unsigned char>::operator*=<int>(v37, &v56);
          nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)v43, &v63);
          break;
        case 9:
          uint64_t v24 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)&v63, (uint64_t)a1);
          nitro::ndarray<float>::operator*=<int>(v24, &v56);
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)v43, &v63);
          break;
        case 0xB:
          uint64_t v35 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)&v63, (uint64_t)a1);
          nitro::ndarray<half>::operator*=<int>(v35, &v56);
          nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)v43, &v63);
          break;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>)::{lambda(void)#1}::operator()();
      }
      return result;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v49, (uint64_t)a2);
      int64x2_t v55 = &v62;
      nitro::ndarray<unsigned char>::ndarray(&v56, &v49);
      switch(*a1)
      {
        case 3:
          unint64_t v6 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)&v63, (uint64_t)a1);
          nitro::ndarray<int>::operator*=<unsigned char>(v6, &v56, v7, v8, v9, v10, v11);
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)v43, &v63);
          break;
        case 5:
          uint64_t v36 = (void *)nitro::ndarray<unsigned char>::ndarray((uint64_t)&v63, (uint64_t)a1);
          nitro::ndarray<unsigned char>::operator*=<unsigned char>(v36, &v56);
          nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)v43, &v63);
          break;
        case 9:
          int8x16_t v18 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)&v63, (uint64_t)a1);
          nitro::ndarray<float>::operator*=<unsigned char>(v18, &v56, v19, v20, v21, v22, v23);
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)v43, &v63);
          break;
        case 0xB:
          int8x16_t v29 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)&v63, (uint64_t)a1);
          nitro::ndarray<half>::operator*=<unsigned char>(v29, &v56, v30, v31, v32, v33, v34);
          nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)v43, &v63);
          break;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>)::{lambda(void)#1}::operator()();
      }
      return result;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v49, (uint64_t)a2);
      int64x2_t v55 = &v62;
      nitro::ndarray<float>::ndarray(&v56, &v49);
      switch(*a1)
      {
        case 3:
          unint64_t v4 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)&v63, (uint64_t)a1);
          nitro::ndarray<int>::operator*=<float>(v4, &v56);
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)v43, &v63);
          break;
        case 5:
          double v15 = (void *)nitro::ndarray<unsigned char>::ndarray((uint64_t)&v63, (uint64_t)a1);
          nitro::ndarray<unsigned char>::operator*=<float>(v15, &v56, v16, v17);
          nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)v43, &v63);
          break;
        case 9:
          float v12 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)&v63, (uint64_t)a1);
          nitro::ndarray<float>::operator*=<float>(v12, &v56);
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)v43, &v63);
          break;
        case 0xB:
          uint64_t v13 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)&v63, (uint64_t)a1);
          nitro::ndarray<half>::operator*=<float>(v13, &v56);
          nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)v43, &v63);
          break;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>)::{lambda(void)#1}::operator()();
      }
      return result;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v49, (uint64_t)a2);
      int64x2_t v55 = &v62;
      nitro::ndarray<half>::ndarray(&v56, &v49);
      switch(*a1)
      {
        case 3:
          uint64_t v5 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)&v63, (uint64_t)a1);
          nitro::ndarray<int>::operator*=<half>(v5, &v56);
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)v43, &v63);
          break;
        case 5:
          double v26 = (void *)nitro::ndarray<unsigned char>::ndarray((uint64_t)&v63, (uint64_t)a1);
          nitro::ndarray<unsigned char>::operator*=<half>(v26, &v56, v27, v28);
          nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)v43, &v63);
          break;
        case 9:
          float v14 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)&v63, (uint64_t)a1);
          nitro::ndarray<float>::operator*=<half>(v14, &v56);
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)v43, &v63);
          break;
        case 0xB:
          float v25 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)&v63, (uint64_t)a1);
          nitro::ndarray<half>::operator*=<half>(v25, &v56);
          nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)v43, &v63);
          break;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>)::{lambda(void)#1}::operator()();
      }
      return result;
    default:
      nitro::ndarray_container::visit<nitro::ndarray_container const,nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,(void *)0>(nitro::ndarray_container const &,nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0)::{lambda(void)#1}::operator()();
  }
  if (v67)
  {
    unint64_t v68 = v67;
    operator delete(v67);
  }
  if (v65)
  {
    unint64_t v66 = v65;
    operator delete(v65);
  }
  uint64_t v38 = v64;
  if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  if (__p)
  {
    long long v61 = __p;
    operator delete(__p);
  }
  if (v58)
  {
    uint64_t v59 = v58;
    operator delete(v58);
  }
  unint64_t v39 = v57;
  if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  if (v53)
  {
    uint64_t v54 = v53;
    operator delete(v53);
  }
  if (v51)
  {
    uint64_t v52 = v51;
    operator delete(v51);
  }
  uint64_t v40 = v50;
  if (v50 && !atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  nitro::ndarray_container::operator=((uint64_t)a1, (uint64_t)v43);
  if (v47)
  {
    unint64_t v48 = v47;
    operator delete(v47);
  }
  if (v45)
  {
    uint64_t v46 = v45;
    operator delete(v45);
  }
  uint64_t v41 = v44;
  if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  return a1;
}

void sub_192540538(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,void *a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v37 = *(void **)(v36 - 80);
  if (v37)
  {
    *(void *)(v36 - 72) = v37;
    operator delete(v37);
  }
  nitro::ndarray_container::concat(v36 - 120);
  uint64_t v38 = *(_Unwind_Exception **)(v36 - 48);
  if (__p)
  {
    operator delete(__p);
    unint64_t v39 = a32;
    if (!a32)
    {
LABEL_5:
      uint64_t v40 = a31;
      if (!a31) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v39 = a32;
    if (!a32) {
      goto LABEL_5;
    }
  }
  operator delete(v39);
  uint64_t v40 = a31;
  if (!a31) {
    goto LABEL_11;
  }
LABEL_9:
  if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
LABEL_11:
  if (a25)
  {
    operator delete(a25);
    uint64_t v41 = a22;
    if (!a22)
    {
LABEL_13:
      uint64_t v42 = a21;
      if (!a21) {
        goto LABEL_19;
      }
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v41 = a22;
    if (!a22) {
      goto LABEL_13;
    }
  }
  operator delete(v41);
  uint64_t v42 = a21;
  if (!a21) {
    goto LABEL_19;
  }
LABEL_17:
  if (!atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
LABEL_19:
  _Unwind_Resume(v38);
}

uint64_t nitro::ndarray_container::operator==(_DWORD *a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v25, (uint64_t)a2);
      double v31 = &v38;
      nitro::ndarray<int>::ndarray(&v32, &v25);
      switch(*a1)
      {
        case 3:
          uint64_t v3 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)v39, (uint64_t)a1);
          uint64_t v4 = nitro::ndarray<int>::operator==<int>(v3, &v32);
          break;
        case 5:
          float v19 = (uint64_t *)nitro::ndarray<unsigned char>::ndarray((uint64_t)v39, (uint64_t)a1);
          uint64_t v4 = nitro::ndarray<unsigned char>::operator==<int>(v19, &v32);
          break;
        case 9:
          uint64_t v13 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)v39, (uint64_t)a1);
          uint64_t v4 = nitro::ndarray<float>::operator==<int>(v13, &v32);
          break;
        case 0xB:
          float v17 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)v39, (uint64_t)a1);
          uint64_t v4 = nitro::ndarray<half>::operator==<int>(v17, &v32);
          break;
        default:
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>)const::{lambda(void)#1}::operator()();
      }
      return result;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v25, (uint64_t)a2);
      double v31 = &v38;
      nitro::ndarray<unsigned char>::ndarray(&v32, &v25);
      switch(*a1)
      {
        case 3:
          double v7 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)v39, (uint64_t)a1);
          uint64_t v4 = nitro::ndarray<int>::operator==<unsigned char>(v7, &v32);
          break;
        case 5:
          int8x16_t v18 = (uint64_t *)nitro::ndarray<unsigned char>::ndarray((uint64_t)v39, (uint64_t)a1);
          uint64_t v4 = nitro::ndarray<unsigned char>::operator==<unsigned char>(v18, &v32);
          break;
        case 9:
          float v12 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)v39, (uint64_t)a1);
          uint64_t v4 = nitro::ndarray<float>::operator==<unsigned char>(v12, &v32);
          break;
        case 0xB:
          double v16 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)v39, (uint64_t)a1);
          uint64_t v4 = nitro::ndarray<half>::operator==<unsigned char>(v16, &v32);
          break;
        default:
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>)const::{lambda(void)#1}::operator()();
      }
      return result;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v25, (uint64_t)a2);
      double v31 = &v38;
      nitro::ndarray<float>::ndarray(&v32, &v25);
      switch(*a1)
      {
        case 3:
          uint64_t v5 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)v39, (uint64_t)a1);
          uint64_t v4 = nitro::ndarray<int>::operator==<float>(v5, &v32);
          break;
        case 5:
          int8x16_t v11 = (uint64_t *)nitro::ndarray<unsigned char>::ndarray((uint64_t)v39, (uint64_t)a1);
          uint64_t v4 = nitro::ndarray<unsigned char>::operator==<float>(v11, &v32);
          break;
        case 9:
          double v8 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)v39, (uint64_t)a1);
          uint64_t v4 = nitro::ndarray<float>::operator==<float>(v8, &v32);
          break;
        case 0xB:
          int8x16_t v9 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)v39, (uint64_t)a1);
          uint64_t v4 = nitro::ndarray<half>::operator==<float>(v9, &v32);
          break;
        default:
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>)const::{lambda(void)#1}::operator()();
      }
      return result;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v25, (uint64_t)a2);
      double v31 = &v38;
      nitro::ndarray<half>::ndarray(&v32, &v25);
      switch(*a1)
      {
        case 3:
          unint64_t v6 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)v39, (uint64_t)a1);
          uint64_t v4 = nitro::ndarray<int>::operator==<half>(v6, &v32);
          break;
        case 5:
          double v15 = (uint64_t *)nitro::ndarray<unsigned char>::ndarray((uint64_t)v39, (uint64_t)a1);
          uint64_t v4 = nitro::ndarray<unsigned char>::operator==<half>(v15, &v32);
          break;
        case 9:
          double v10 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)v39, (uint64_t)a1);
          uint64_t v4 = nitro::ndarray<float>::operator==<half>(v10, &v32);
          break;
        case 0xB:
          float v14 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)v39, (uint64_t)a1);
          uint64_t v4 = nitro::ndarray<half>::operator==<half>(v14, &v32);
          break;
        default:
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>)const::{lambda(void)#1}::operator()();
      }
      return result;
    default:
      nitro::ndarray_container::visit<nitro::ndarray_container const,nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,(void *)0>(nitro::ndarray_container const &,nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0)const::{lambda(void)#1}::operator()();
  }
  uint64_t v20 = v4;
  if (v43)
  {
    uint64_t v44 = v43;
    operator delete(v43);
  }
  if (v41)
  {
    uint64_t v42 = v41;
    operator delete(v41);
  }
  int8x16_t v21 = v40;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  if (__p)
  {
    uint64_t v37 = __p;
    operator delete(__p);
  }
  if (v34)
  {
    uint64_t v35 = v34;
    operator delete(v34);
  }
  double v22 = v33;
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  if (v29)
  {
    float v30 = v29;
    operator delete(v29);
  }
  if (v27)
  {
    float v28 = v27;
    operator delete(v27);
  }
  int8x16_t v23 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  return v20;
}

void sub_192540EEC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  double v27 = *(void **)(v26 - 80);
  if (v27)
  {
    *(void *)(v26 - 72) = v27;
    operator delete(v27);
  }
  nitro::ndarray_container::concat(v26 - 120);
  float v28 = *(_Unwind_Exception **)(v26 - 48);
  if (__p)
  {
    operator delete(__p);
    int8x16_t v29 = a22;
    if (!a22)
    {
LABEL_5:
      float v30 = a21;
      if (!a21) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }
  }
  else
  {
    int8x16_t v29 = a22;
    if (!a22) {
      goto LABEL_5;
    }
  }
  operator delete(v29);
  float v30 = a21;
  if (!a21) {
    goto LABEL_11;
  }
LABEL_9:
  if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
LABEL_11:
  if (a15)
  {
    operator delete(a15);
    double v31 = a12;
    if (!a12)
    {
LABEL_13:
      uint64_t v32 = a11;
      if (!a11) {
        goto LABEL_19;
      }
      goto LABEL_17;
    }
  }
  else
  {
    double v31 = a12;
    if (!a12) {
      goto LABEL_13;
    }
  }
  operator delete(v31);
  uint64_t v32 = a11;
  if (!a11) {
    goto LABEL_19;
  }
LABEL_17:
  if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
LABEL_19:
  _Unwind_Resume(v28);
}

void nitro::ndarray_container::negate(nitro::ndarray_container *this)
{
  switch(*(_DWORD *)this)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v2, (uint64_t)this);
      nitro::ndarray<int>::negate(&v2);
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v2, (uint64_t)this);
      nitro::ndarray<unsigned char>::negate(&v2);
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v2, (uint64_t)this);
      nitro::ndarray<float>::negate(&v2);
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v2, (uint64_t)this);
      nitro::ndarray<half>::negate(&v2);
      break;
    default:
      printf("%d\n", *(_DWORD *)this);
      nitro::ndarray_container::visit<nitro::ndarray_container::negate(void)::$_0>(nitro::ndarray_container::negate(void)::$_0)::{lambda(void)#1}::operator()();
  }
  if (__p)
  {
    double v7 = __p;
    operator delete(__p);
  }
  if (v4)
  {
    uint64_t v5 = v4;
    operator delete(v4);
  }
  uint64_t v1 = v3;
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

nitro::ndarray_container *nitro::ndarray_container::assign(nitro::ndarray_container *this, const nitro::ndarray_container *a2)
{
  switch(*(_DWORD *)a2)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v34, (uint64_t)a2);
      uint64_t v40 = &v47;
      nitro::ndarray<int>::ndarray(&v41, &v34);
      switch(*(_DWORD *)this)
      {
        case 3:
          uint64_t v3 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)v48, (uint64_t)this);
          nitro::ndarray<int>::assign<int>(v3, &v41);
          break;
        case 5:
          int8x16_t v29 = (void *)nitro::ndarray<unsigned char>::ndarray((uint64_t)v48, (uint64_t)this);
          nitro::ndarray<unsigned char>::assign<int>(v29, &v41);
          break;
        case 9:
          double v22 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)v48, (uint64_t)this);
          nitro::ndarray<float>::assign<int>(v22, &v41);
          break;
        case 0xB:
          double v27 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)v48, (uint64_t)this);
          nitro::ndarray<half>::assign<int>(v27, &v41);
          break;
        default:
          printf("%d\n", *(_DWORD *)this);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>)::{lambda(void)#1}::operator()();
      }
      return result;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v34, (uint64_t)a2);
      uint64_t v40 = &v47;
      nitro::ndarray<unsigned char>::ndarray(&v41, &v34);
      switch(*(_DWORD *)this)
      {
        case 3:
          unint64_t v6 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)v48, (uint64_t)this);
          nitro::ndarray<int>::assign<unsigned char>(v6, &v41, v7, v8, v9, v10, v11);
          break;
        case 5:
          float v28 = (void *)nitro::ndarray<unsigned char>::ndarray((uint64_t)v48, (uint64_t)this);
          nitro::ndarray<unsigned char>::assign<unsigned char>(v28, &v41);
          break;
        case 9:
          double v16 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)v48, (uint64_t)this);
          nitro::ndarray<float>::assign<unsigned char>(v16, &v41, v17, v18, v19, v20, v21);
          break;
        case 0xB:
          uint64_t v25 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)v48, (uint64_t)this);
          nitro::ndarray<half>::assign<unsigned char>(v25, &v41, v26);
          break;
        default:
          printf("%d\n", *(_DWORD *)this);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>)::{lambda(void)#1}::operator()();
      }
      return result;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v34, (uint64_t)a2);
      uint64_t v40 = &v47;
      nitro::ndarray<float>::ndarray(&v41, &v34);
      switch(*(_DWORD *)this)
      {
        case 3:
          uint64_t v4 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)v48, (uint64_t)this);
          nitro::ndarray<int>::assign<float>(v4, &v41);
          break;
        case 5:
          double v15 = (void *)nitro::ndarray<unsigned char>::ndarray((uint64_t)v48, (uint64_t)this);
          nitro::ndarray<unsigned char>::assign<float>(v15, &v41);
          break;
        case 9:
          float v12 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)v48, (uint64_t)this);
          nitro::ndarray<float>::assign<float>(v12, &v41);
          break;
        case 0xB:
          uint64_t v13 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)v48, (uint64_t)this);
          nitro::ndarray<half>::assign<float>(v13, &v41);
          break;
        default:
          printf("%d\n", *(_DWORD *)this);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>)::{lambda(void)#1}::operator()();
      }
      return result;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v34, (uint64_t)a2);
      uint64_t v40 = &v47;
      nitro::ndarray<half>::ndarray(&v41, &v34);
      switch(*(_DWORD *)this)
      {
        case 3:
          uint64_t v5 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)v48, (uint64_t)this);
          nitro::ndarray<int>::assign<half>(v5, &v41);
          break;
        case 5:
          uint64_t v24 = (void *)nitro::ndarray<unsigned char>::ndarray((uint64_t)v48, (uint64_t)this);
          nitro::ndarray<unsigned char>::assign<half>(v24, &v41);
          break;
        case 9:
          float v14 = (uint64_t *)nitro::ndarray<float>::ndarray((uint64_t)v48, (uint64_t)this);
          nitro::ndarray<float>::assign<half>(v14, &v41);
          break;
        case 0xB:
          int8x16_t v23 = (uint64_t *)nitro::ndarray<half>::ndarray((uint64_t)v48, (uint64_t)this);
          nitro::ndarray<half>::assign<half>(v23, &v41);
          break;
        default:
          printf("%d\n", *(_DWORD *)this);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>)::{lambda(void)#1}::operator()();
      }
      return result;
    default:
      nitro::ndarray_container::visit<nitro::ndarray_container const,nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,(void *)0>(nitro::ndarray_container const &,nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0)::{lambda(void)#1}::operator()();
  }
  if (v52)
  {
    uint64_t v53 = v52;
    operator delete(v52);
  }
  if (v50)
  {
    uint64_t v51 = v50;
    operator delete(v50);
  }
  float v30 = v49;
  if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  if (__p)
  {
    uint64_t v46 = __p;
    operator delete(__p);
  }
  if (v43)
  {
    uint64_t v44 = v43;
    operator delete(v43);
  }
  double v31 = v42;
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  if (v38)
  {
    unint64_t v39 = v38;
    operator delete(v38);
  }
  if (v36)
  {
    uint64_t v37 = v36;
    operator delete(v36);
  }
  uint64_t v32 = v35;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  return this;
}

void sub_192541AB4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  double v27 = *(void **)(v26 - 80);
  if (v27)
  {
    *(void *)(v26 - 72) = v27;
    operator delete(v27);
  }
  nitro::ndarray_container::concat(v26 - 120);
  float v28 = *(_Unwind_Exception **)(v26 - 48);
  if (__p)
  {
    operator delete(__p);
    int8x16_t v29 = a22;
    if (!a22)
    {
LABEL_5:
      float v30 = a21;
      if (!a21) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }
  }
  else
  {
    int8x16_t v29 = a22;
    if (!a22) {
      goto LABEL_5;
    }
  }
  operator delete(v29);
  float v30 = a21;
  if (!a21) {
    goto LABEL_11;
  }
LABEL_9:
  if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
LABEL_11:
  if (a15)
  {
    operator delete(a15);
    double v31 = a12;
    if (!a12)
    {
LABEL_13:
      uint64_t v32 = a11;
      if (!a11) {
        goto LABEL_19;
      }
      goto LABEL_17;
    }
  }
  else
  {
    double v31 = a12;
    if (!a12) {
      goto LABEL_13;
    }
  }
  operator delete(v31);
  uint64_t v32 = a11;
  if (!a11) {
    goto LABEL_19;
  }
LABEL_17:
  if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
LABEL_19:
  _Unwind_Resume(v28);
}

void nitro::ndarray_container::compact(nitro::ndarray_container *this@<X0>, uint64_t a2@<X8>)
{
  switch(*(_DWORD *)this)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v5, (uint64_t)this);
      nitro::ndarray<int>::compact(&v5, &v11);
      nitro::ndarray_container::ndarray_container<int,(void *)0>(a2, &v11);
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v5, (uint64_t)this);
      nitro::ndarray<unsigned char>::compact(&v5, &v11);
      nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>(a2, &v11);
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v5, (uint64_t)this);
      nitro::ndarray<float>::compact(&v5, &v11);
      nitro::ndarray_container::ndarray_container<float,(void *)0>(a2, &v11);
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v5, (uint64_t)this);
      nitro::ndarray<half>::compact(&v5, &v11);
      nitro::ndarray_container::ndarray_container<half,(void *)0>(a2, &v11);
      break;
    default:
      nitro::ndarray_container::visit<nitro::ndarray_container::compact(void)::$_0>(nitro::ndarray_container::compact(void)::$_0)const::{lambda(void)#1}::operator()();
  }
  if (__p)
  {
    double v16 = __p;
    operator delete(__p);
  }
  if (v13)
  {
    float v14 = v13;
    operator delete(v13);
  }
  uint64_t v3 = v12;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  if (v9)
  {
    double v10 = v9;
    operator delete(v9);
  }
  if (v7)
  {
    double v8 = v7;
    operator delete(v7);
  }
  uint64_t v4 = v6;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void nitro::ndarray_container::canonicalize(nitro::ndarray_container *this@<X0>, uint64_t a2@<X8>)
{
  switch(*(_DWORD *)this)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v5, (uint64_t)this);
      nitro::ndarray<int>::canonicalize(&v5, &v11);
      nitro::ndarray_container::ndarray_container<int,(void *)0>(a2, &v11);
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v5, (uint64_t)this);
      nitro::ndarray<unsigned char>::canonicalize(&v5, &v11);
      nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>(a2, &v11);
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v5, (uint64_t)this);
      nitro::ndarray<float>::canonicalize(&v5, &v11);
      nitro::ndarray_container::ndarray_container<float,(void *)0>(a2, &v11);
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v5, (uint64_t)this);
      nitro::ndarray<half>::canonicalize(&v5, &v11);
      nitro::ndarray_container::ndarray_container<half,(void *)0>(a2, &v11);
      break;
    default:
      nitro::ndarray_container::visit<nitro::ndarray_container::canonicalize(void)::$_0>(nitro::ndarray_container::canonicalize(void)::$_0)const::{lambda(void)#1}::operator()();
  }
  if (__p)
  {
    double v16 = __p;
    operator delete(__p);
  }
  if (v13)
  {
    float v14 = v13;
    operator delete(v13);
  }
  uint64_t v3 = v12;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  if (v9)
  {
    double v10 = v9;
    operator delete(v9);
  }
  if (v7)
  {
    double v8 = v7;
    operator delete(v7);
  }
  uint64_t v4 = v6;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void nitro::ndarray_container::load(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v33 = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    unsigned int v6 = *(unsigned __int8 *)(v4 + v5);
    unsigned __int8 v33 = v6;
    *(void *)(a2 + 16) = v5 + 1;
  }
  else
  {
    std::istream::read();
    unsigned int v6 = v33;
  }
  int v7 = (char)v6;
  if (v6 > 0xB || (int v8 = dword_192DC6268[(char)v6], v8 == (char)v6))
  {
    long long __p = 0;
    int8x16_t v21 = 0;
    double v22 = 0;
    nitro::ndarray_container::init_from_shape((char)v6, (uint64_t **)&__p, (uint64_t)v27);
    if (__p)
    {
      int8x16_t v21 = __p;
      operator delete(__p);
    }
    switch(v27[0])
    {
      case 3:
        uint64_t v9 = nitro::ndarray<int>::ndarray((uint64_t)&v34, (uint64_t)v27);
        nitro::ndarray<int>::load(v9, a2);
      case 5:
        uint64_t v13 = nitro::ndarray<unsigned char>::ndarray((uint64_t)&v34, (uint64_t)v27);
        nitro::ndarray<unsigned char>::load(v13, a2);
      case 9:
        uint64_t v11 = nitro::ndarray<float>::ndarray((uint64_t)&v34, (uint64_t)v27);
        nitro::ndarray<float>::load(v11, a2);
      case 0xB:
        uint64_t v12 = nitro::ndarray<half>::ndarray((uint64_t)&v34, (uint64_t)v27);
        nitro::ndarray<half>::load(v12, a2);
      default:
        printf("%d\n", v27[0]);
        nitro::ndarray_container::visit<nitro::ndarray_container::load(nitro::iarchive &)::$_0>(nitro::ndarray_container::load(nitro::iarchive &)::$_0)::{lambda(void)#1}::operator()();
    }
  }
  long long __p = 0;
  int8x16_t v21 = 0;
  double v22 = 0;
  nitro::ndarray_container::init_from_shape(v8, (uint64_t **)&__p, (uint64_t)v27);
  if (__p)
  {
    int8x16_t v21 = __p;
    operator delete(__p);
  }
  switch(v27[0])
  {
    case 3:
      uint64_t v10 = nitro::ndarray<int>::ndarray((uint64_t)&v34, (uint64_t)v27);
      switch(v7)
      {
        case 0:
        case 1:
          nitro::ndarray<int>::load_cast_from<signed char>(v10, a2);
        case 2:
          nitro::ndarray<int>::load_cast_from<short>(v10, a2);
        case 3:
          nitro::ndarray<int>::load_cast_from<int>(v10, a2);
        case 4:
          nitro::ndarray<int>::load_cast_from<long long>(v10, a2);
        case 5:
          nitro::ndarray<int>::load_cast_from<unsigned char>(v10, a2);
        case 6:
          nitro::ndarray<int>::load_cast_from<unsigned short>(v10, a2);
        case 7:
          nitro::ndarray<int>::load_cast_from<unsigned int>(v10, a2);
        case 8:
          nitro::ndarray<int>::load_cast_from<unsigned long long>(v10, a2);
        case 9:
          nitro::ndarray<int>::load_cast_from<float>(v10, a2);
        case 10:
          nitro::ndarray<int>::load_cast_from<double>(v10, a2);
        case 11:
          nitro::ndarray<int>::load_cast_from<half>(v10, a2);
        default:
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&__p, &v34);
          break;
      }
      break;
    case 5:
      uint64_t v16 = nitro::ndarray<unsigned char>::ndarray((uint64_t)&v34, (uint64_t)v27);
      switch(v7)
      {
        case 0:
        case 1:
          nitro::ndarray<unsigned char>::load_cast_from<signed char>(v16, a2);
        case 2:
          nitro::ndarray<unsigned char>::load_cast_from<short>(v16, a2);
        case 3:
          nitro::ndarray<unsigned char>::load_cast_from<int>(v16, a2);
        case 4:
          nitro::ndarray<unsigned char>::load_cast_from<long long>(v16, a2);
        case 5:
          nitro::ndarray<unsigned char>::load_cast_from<unsigned char>(v16, a2);
        case 6:
          nitro::ndarray<unsigned char>::load_cast_from<unsigned short>(v16, a2);
        case 7:
          nitro::ndarray<unsigned char>::load_cast_from<unsigned int>(v16, a2);
        case 8:
          nitro::ndarray<unsigned char>::load_cast_from<unsigned long long>(v16, a2);
        case 9:
          nitro::ndarray<unsigned char>::load_cast_from<float>(v16, a2);
        case 10:
          nitro::ndarray<unsigned char>::load_cast_from<double>(v16, a2);
        case 11:
          nitro::ndarray<unsigned char>::load_cast_from<half>(v16, a2);
        default:
          nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)&__p, &v34);
          break;
      }
      break;
    case 9:
      uint64_t v14 = nitro::ndarray<float>::ndarray((uint64_t)&v34, (uint64_t)v27);
      switch(v7)
      {
        case 0:
        case 1:
          nitro::ndarray<float>::load_cast_from<signed char>(v14, a2);
        case 2:
          nitro::ndarray<float>::load_cast_from<short>(v14, a2);
        case 3:
          nitro::ndarray<float>::load_cast_from<int>(v14, a2);
        case 4:
          nitro::ndarray<float>::load_cast_from<long long>(v14, a2);
        case 5:
          nitro::ndarray<float>::load_cast_from<unsigned char>(v14, a2);
        case 6:
          nitro::ndarray<float>::load_cast_from<unsigned short>(v14, a2);
        case 7:
          nitro::ndarray<float>::load_cast_from<unsigned int>(v14, a2);
        case 8:
          nitro::ndarray<float>::load_cast_from<unsigned long long>(v14, a2);
        case 9:
          nitro::ndarray<float>::load_cast_from<float>(v14, a2);
        case 10:
          nitro::ndarray<float>::load_cast_from<double>(v14, a2);
        case 11:
          nitro::ndarray<float>::load_cast_from<half>(v14, a2);
        default:
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&__p, &v34);
          break;
      }
      break;
    case 0xB:
      uint64_t v15 = nitro::ndarray<half>::ndarray((uint64_t)&v34, (uint64_t)v27);
      switch(v7)
      {
        case 0:
        case 1:
          nitro::ndarray<half>::load_cast_from<signed char>(v15, a2);
        case 2:
          nitro::ndarray<half>::load_cast_from<short>(v15, a2);
        case 3:
          nitro::ndarray<half>::load_cast_from<int>(v15, a2);
        case 4:
          nitro::ndarray<half>::load_cast_from<long long>(v15, a2);
        case 5:
          nitro::ndarray<half>::load_cast_from<unsigned char>(v15, a2);
        case 6:
          nitro::ndarray<half>::load_cast_from<unsigned short>(v15, a2);
        case 7:
          nitro::ndarray<half>::load_cast_from<unsigned int>(v15, a2);
        case 8:
          nitro::ndarray<half>::load_cast_from<unsigned long long>(v15, a2);
        case 9:
          nitro::ndarray<half>::load_cast_from<float>(v15, a2);
        case 10:
          nitro::ndarray<half>::load_cast_from<double>(v15, a2);
        case 11:
          nitro::ndarray<half>::load_cast_from<half>(v15, a2);
        default:
          nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)&__p, &v34);
          break;
      }
      break;
    default:
      printf("%d\n", v27[0]);
      nitro::ndarray_container::visit<nitro::ndarray_container::load(nitro::iarchive &)::$_1>(nitro::ndarray_container::load(nitro::iarchive &)::$_1)::{lambda(void)#1}::operator()();
  }
  if (v38)
  {
    unint64_t v39 = v38;
    operator delete(v38);
  }
  if (v36)
  {
    uint64_t v37 = v36;
    operator delete(v36);
  }
  float v17 = v35;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  nitro::ndarray_container::operator=(a1, (uint64_t)&__p);
  if (v25)
  {
    uint64_t v26 = v25;
    operator delete(v25);
  }
  if (v23)
  {
    uint64_t v24 = v23;
    operator delete(v23);
  }
  double v18 = v22;
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  if (v31)
  {
    uint64_t v32 = v31;
    operator delete(v31);
  }
  if (v29)
  {
    float v30 = v29;
    operator delete(v29);
  }
  int8x16_t v19 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
}

void sub_192542C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  nitro::ndarray<float>::~ndarray((void *)(v21 - 104));
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a21);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::cast_to_primitive(nitro::ndarray_container *a1@<X0>, int a2@<W1>, nitro::ndarray_container *a3@<X8>)
{
  if (a2 != 11)
  {
    if (a2 != 9)
    {
      if (a2 != 3)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v26);
        uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Check failed (", 14);
        uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", 96);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)":", 1);
        uint64_t v5 = (void *)std::ostream::operator<<();
        unsigned int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"): ", 3);
        int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"false", 5);
        std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
        int v8 = std::locale::use_facet(&v27, MEMORY[0x1E4FBA258]);
        ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
        std::locale::~locale(&v27);
        std::ostream::put();
        std::ostream::flush();
        if (*((int *)global_logger() + 169) <= 6)
        {
          uint64_t v9 = (file_logger *)global_logger();
          started = file_logger::start_stream(v9, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", "operator()", 517, 1);
          std::stringbuf::str();
          uint64_t v11 = (char *)pthread_getspecific(*((void *)started + 74));
          if (v11 && v11[280])
          {
            uint64_t v12 = v11 + 16;
            if ((v25 & 0x80u) == 0) {
              uint64_t v13 = __p;
            }
            else {
              uint64_t v13 = (void **)__p[0];
            }
            if ((v25 & 0x80u) == 0) {
              uint64_t v14 = v25;
            }
            else {
              uint64_t v14 = (uint64_t)__p[1];
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
          }
          if ((char)v25 < 0) {
            operator delete(__p[0]);
          }
        }
        __print_back_trace();
        if (*((int *)global_logger() + 169) <= 6)
        {
          uint64_t v15 = (file_logger *)global_logger();
          uint64_t v16 = file_logger::start_stream(v15, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/numerics/ndarray.cpp", "operator()", 517, 1);
          std::stringbuf::str();
          float v17 = (char *)pthread_getspecific(*((void *)v16 + 74));
          if (v17 && v17[280])
          {
            double v18 = v17 + 16;
            if ((v29 & 0x80u) == 0) {
              locale = &v27;
            }
            else {
              locale = v27.__locale_;
            }
            if ((v29 & 0x80u) == 0) {
              uint64_t v20 = v29;
            }
            else {
              uint64_t v20 = v28;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)locale, v20);
          }
          uint64_t v21 = pthread_getspecific(*((void *)v16 + 74));
          if (v21)
          {
            if (*((unsigned char *)v21 + 280))
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21 + 2, (uint64_t)"\n", 1);
              file_logger::stream_flush(v16);
              if (*((_DWORD *)v16 + 150) == 7)
              {
                __print_back_trace();
                exception = __cxa_allocate_exception(8uLL);
                void *exception = "LOG_FATAL encountered";
                __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
              }
            }
          }
          if ((char)v29 < 0) {
            operator delete(v27.__locale_);
          }
        }
        double v22 = __cxa_allocate_exception(0x18uLL);
        std::stringbuf::str();
      }
      if (*(_DWORD *)a1 != 3)
      {
        _ZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(a1, (uint64_t)a3);
        return;
      }
      goto LABEL_13;
    }
    if (*(_DWORD *)a1 != 9)
    {
      _ZNK5nitro17ndarray_container5visitIZNKS0_4castIfEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(a1, (uint64_t)a3);
      return;
    }
LABEL_13:
    nitro::ndarray_container::ndarray_container(a3, a1);
    return;
  }
  if (*(_DWORD *)a1 == 11) {
    goto LABEL_13;
  }

  _ZNK5nitro17ndarray_container5visitIZNKS0_4castIDhEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(a1, (uint64_t)a3);
}

void sub_192543164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::slice(uint64_t a1@<X0>, long long **a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  long long v13 = 0uLL;
  uint64_t v14 = 0;
  nitro::ndarray_impl::compute_slice(a2, (uint64_t *)(a1 + 24), (void *)(a1 + 48), *(void *)(a1 + 72), &v6, a4);
  long long v13 = v6;
  uint64_t v14 = v7;
  *(_OWORD *)long long __p = v8;
  uint64_t v12 = v9;
  nitro::ndarray_container::ndarray_container(a3, (void *)(a1 + 8), *(_DWORD *)a1, (uint64_t)&v13, (uint64_t)__p, v10);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((void)v13)
  {
    *((void *)&v13 + 1) = v13;
    operator delete((void *)v13);
  }
}

void sub_192543348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v20 = *(void **)(v18 - 48);
    if (!v20) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v20 = *(void **)(v18 - 48);
    if (!v20) {
      goto LABEL_3;
    }
  }
  *(void *)(v18 - 40) = v20;
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray_container::transpose(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v19 = 0uLL;
  uint64_t v20 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = 0;
  long long v6 = *(const void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  int64_t v7 = v5 - *(void *)a2;
  if (v5 == *(void *)a2)
  {
    long long v8 = 0;
  }
  else
  {
    if (v7 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    long long v8 = (uint64_t *)operator new(v5 - *(void *)a2);
    uint64_t v10 = v8;
    uint64_t v12 = &v8[v7 >> 3];
    memcpy(v8, v6, v7);
    uint64_t v11 = v12;
  }
  nitro::ndarray_impl::compute_transpose(&v10, (const void **)(a1 + 24), a1 + 48, &v13);
  long long v19 = v13;
  uint64_t v20 = v14;
  long long v13 = 0uLL;
  long long v9 = v15;
  uint64_t v14 = 0;
  long long v15 = 0uLL;
  *(_OWORD *)long long __p = v9;
  uint64_t v18 = v16;
  uint64_t v16 = 0;
  if (v8)
  {
    uint64_t v11 = v8;
    operator delete(v8);
  }
  nitro::ndarray_container::ndarray_container(a3, (void *)(a1 + 8), *(_DWORD *)a1, (uint64_t)&v19, (uint64_t)__p, *(void *)(a1 + 72));
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((void)v19)
  {
    *((void *)&v19 + 1) = v19;
    operator delete((void *)v19);
  }
}

void sub_1925434BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  double v22 = *(void **)(v20 - 80);
  if (v22)
  {
    *(void *)(v20 - 72) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray_container::squeeze(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  long long v12 = 0uLL;
  uint64_t v13 = 0;
  nitro::ndarray_impl::compute_squeeze((const void **)(a1 + 24), (const void **)(a1 + 48), *(void *)(a1 + 72), a2, &v5);
  long long v12 = v5;
  uint64_t v13 = v6;
  *(_OWORD *)long long __p = v7;
  uint64_t v11 = v8;
  nitro::ndarray_container::ndarray_container(a3, (void *)(a1 + 8), *(_DWORD *)a1, (uint64_t)&v12, (uint64_t)__p, v9);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((void)v12)
  {
    *((void *)&v12 + 1) = v12;
    operator delete((void *)v12);
  }
}

void sub_1925435B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v20 = *(void **)(v18 - 48);
    if (!v20) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v20 = *(void **)(v18 - 48);
    if (!v20) {
      goto LABEL_3;
    }
  }
  *(void *)(v18 - 40) = v20;
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray_container::reshape(_DWORD *a1@<X0>, int64x2_t **a2@<X1>, uint64_t a3@<X8>)
{
  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v7, (uint64_t)a1);
      nitro::ndarray<int>::reshape(&v7, a2, &v13);
      nitro::ndarray_container::ndarray_container<int,(void *)0>(a3, &v13);
      break;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v7, (uint64_t)a1);
      nitro::ndarray<unsigned char>::reshape(&v7, a2, &v13);
      nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>(a3, &v13);
      break;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v7, (uint64_t)a1);
      nitro::ndarray<float>::reshape(&v7, a2, &v13);
      nitro::ndarray_container::ndarray_container<float,(void *)0>(a3, &v13);
      break;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v7, (uint64_t)a1);
      nitro::ndarray<half>::reshape(&v7, a2, &v13);
      nitro::ndarray_container::ndarray_container<half,(void *)0>(a3, &v13);
      break;
    default:
      nitro::ndarray_container::visit<nitro::ndarray_container::reshape(std::vector<long long> const&)::$_0>(nitro::ndarray_container::reshape(std::vector<long long> const&)::$_0)const::{lambda(void)#1}::operator()();
  }
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
  long long v5 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v11)
  {
    long long v12 = v11;
    operator delete(v11);
  }
  if (v9)
  {
    uint64_t v10 = v9;
    operator delete(v9);
  }
  uint64_t v6 = v8;
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void nitro::impl::fill_shape_and_stride(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  if (v6 == *a2)
  {
    uint64_t v10 = v7 - v8;
    if (v7 == v8)
    {
LABEL_13:
      a1[1] = v7;
      a2[1] = v6;
      *a3 = 0;
      return;
    }
    unint64_t v11 = (v6 - *a2) >> 3;
    if (v10 >> 3 > v11)
    {
      std::vector<unsigned long long>::__append((uint64_t)a2, (v10 >> 3) - v11);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
      uint64_t v6 = *a2;
      uint64_t v10 = v7 - *a1;
    }
    *(void *)(v6 + (((v10 << 29) - 0x100000000) >> 29)) = 1;
    if ((int)((unint64_t)v10 >> 3) >= 2)
    {
      uint64_t v12 = 8 * (((unint64_t)v10 >> 3) - 2);
      uint64_t v13 = *(void *)(v12 + v6 + 8);
      do
      {
        v13 *= *(void *)(v8 + v12 + 8);
        *(void *)(v6 + v12) = v13;
        v12 -= 8;
      }
      while (v12 != -8);
    }
  }
  else
  {
    uint64_t v6 = *a2;
  }
  BOOL v9 = v7 == v8;
  uint64_t v7 = v8;
  if (v9) {
    goto LABEL_13;
  }
}

void *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJNS_6vectorImNS_9allocatorImEEEES6_EEC2B8ne180100IJLm0ELm1EEJS6_S6_EJEJEJRS6_S9_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSB_IJDpT2_EEEDpOT3_(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v6 = *(const void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  int64_t v7 = v5 - *(void *)a2;
  if (v5 != *(void *)a2)
  {
    if (v7 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(v5 - *(void *)a2);
    *a1 = v8;
    a1[1] = v8;
    BOOL v9 = &v8[8 * (v7 >> 3)];
    a1[2] = v9;
    memcpy(v8, v6, v7);
    a1[1] = v9;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  uint64_t v10 = *(const void **)a3;
  int64_t v11 = *(void *)(a3 + 8) - *(void *)a3;
  if (v11)
  {
    if (v11 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = (char *)operator new(v11);
    a1[3] = v12;
    a1[4] = v12;
    uint64_t v13 = &v12[8 * (v11 >> 3)];
    a1[5] = v13;
    memcpy(v12, v10, v11);
    a1[4] = v13;
  }
  return a1;
}

void sub_192543AB4(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorImNS_9allocatorImEEEES6_mEEC2B8ne180100IJLm0ELm1ELm2EEJS6_S6_mEJEJEJRKS6_SA_RmEEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSD_IJDpT2_EEEDpOT3_(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v8 = *(const void **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  int64_t v9 = v7 - *(void *)a2;
  if (v7 != *(void *)a2)
  {
    if (v9 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = (char *)operator new(v7 - *(void *)a2);
    *a1 = v10;
    a1[1] = v10;
    int64_t v11 = &v10[8 * (v9 >> 3)];
    a1[2] = v11;
    memcpy(v10, v8, v9);
    a1[1] = v11;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  uint64_t v12 = *(const void **)a3;
  int64_t v13 = *(void *)(a3 + 8) - *(void *)a3;
  if (v13)
  {
    if (v13 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = (char *)operator new(v13);
    a1[3] = v14;
    a1[4] = v14;
    long long v15 = &v14[8 * (v13 >> 3)];
    a1[5] = v15;
    memcpy(v14, v12, v13);
    a1[4] = v15;
  }
  a1[6] = *a4;
  return a1;
}

void sub_192543BC8(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorImNS_9allocatorImEEEES6_mEEC2B8ne180100IJLm0ELm1ELm2EEJS6_S6_mEJEJEJRS6_S9_RmEEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSC_IJDpT2_EEEDpOT3_(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v8 = *(const void **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  int64_t v9 = v7 - *(void *)a2;
  if (v7 != *(void *)a2)
  {
    if (v9 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = (char *)operator new(v7 - *(void *)a2);
    *a1 = v10;
    a1[1] = v10;
    int64_t v11 = &v10[8 * (v9 >> 3)];
    a1[2] = v11;
    memcpy(v10, v8, v9);
    a1[1] = v11;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  uint64_t v12 = *(const void **)a3;
  int64_t v13 = *(void *)(a3 + 8) - *(void *)a3;
  if (v13)
  {
    if (v13 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = (char *)operator new(v13);
    a1[3] = v14;
    a1[4] = v14;
    long long v15 = &v14[8 * (v13 >> 3)];
    a1[5] = v15;
    memcpy(v14, v12, v13);
    a1[4] = v15;
  }
  a1[6] = *a4;
  return a1;
}

void sub_192543CDC(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nitro::ndarray_container::ndarray_container(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)a1 = a3;
  uint64_t v9 = a2[1];
  *(void *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  int64_t v11 = *(const void **)a4;
  uint64_t v10 = *(void *)(a4 + 8);
  int64_t v12 = v10 - *(void *)a4;
  if (v10 != *(void *)a4)
  {
    if (v12 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v13 = (char *)operator new(v10 - *(void *)a4);
    *(void *)(a1 + 24) = v13;
    *(void *)(a1 + 32) = v13;
    uint64_t v14 = &v13[8 * (v12 >> 3)];
    *(void *)(a1 + 40) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 32) = v14;
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  long long v15 = *(const void **)a5;
  int64_t v16 = *(void *)(a5 + 8) - *(void *)a5;
  if (v16)
  {
    if (v16 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    float v17 = (char *)operator new(v16);
    *(void *)(a1 + 48) = v17;
    *(void *)(a1 + 56) = v17;
    uint64_t v18 = &v17[8 * (v16 >> 3)];
    *(void *)(a1 + 64) = v18;
    memcpy(v17, v15, v16);
    *(void *)(a1 + 56) = v18;
  }
  *(void *)(a1 + 72) = a6;
  return a1;
}

void sub_192543E1C(_Unwind_Exception *a1)
{
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 56) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 32) = v7;
    operator delete(v7);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void std::__split_buffer<unsigned long>::push_back(char **a1, void *a2)
{
  uint64_t v4 = a1[2];
  if (v4 != a1[3]) {
    goto LABEL_22;
  }
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (v6 > *a1)
  {
    uint64_t v7 = (v6 - *a1) >> 3;
    if (v7 >= -1) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = v7 + 2;
    }
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = -v9;
    int64_t v11 = &v6[-8 * v9];
    int64_t v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      uint64_t v4 = a1[1];
    }
    int64_t v13 = &v4[8 * v10];
    uint64_t v4 = &v11[v12];
    a1[1] = v13;
    goto LABEL_22;
  }
  unint64_t v14 = (v4 - v5) >> 2;
  if (v4 == v5) {
    unint64_t v14 = 1;
  }
  if (v14 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unint64_t v15 = v14 >> 2;
  uint64_t v16 = 8 * v14;
  float v17 = (char *)operator new(8 * v14);
  uint64_t v18 = &v17[8 * v15];
  int64_t v20 = v4 - v6;
  BOOL v19 = v4 == v6;
  uint64_t v4 = v18;
  if (!v19)
  {
    uint64_t v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      double v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        uint64_t v31 = *(void *)v6;
        v6 += 8;
        *(void *)double v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    int8x16_t v23 = &v17[8 * v15];
    double v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20) {
      goto LABEL_19;
    }
    uint64_t v24 = (v21 >> 3) + 1;
    uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    double v22 = &v18[v25];
    uint64_t v26 = &v6[v25];
    std::locale v27 = (long long *)(v6 + 16);
    uint64_t v28 = v23 + 16;
    uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *uint64_t v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    uint64_t v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_19;
    }
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    uint64_t v4 = a1[2];
  }
LABEL_22:
  *(void *)uint64_t v4 = *a2;
  a1[2] = v4 + 8;
}

void nitro::ndarray<double>::ndarray(uint64_t a1)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  operator new[]();
}

void sub_1925443C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  uint64_t v9 = *v7;
  if (*v7)
  {
    *(void *)(v5 + 48) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *v6;
  if (*v6)
  {
    *(void *)(v5 + 24) = v10;
    operator delete(v10);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v5);
  _Unwind_Resume(a1);
}

void nitro::ndarray<double>::ndarray(std::vector<double> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"last_index() + m_start <= elements.size()", 41);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 131, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<double>::ndarray(std::vector<double> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192544698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<double>::ndarray(std::vector<double> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 131, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      uint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192544820(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192544834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19254482CLL);
}

void std::shared_ptr<unsigned char>::shared_ptr[abi:ne180100]<unsigned char,std::default_delete<unsigned char []>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1925448B8(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    MEMORY[0x192FF1690](v1, 0x1000C8077774924);
  }
  __cxa_rethrow();
}

void sub_1925448E0(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<unsigned char  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<unsigned char  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x192FF1690);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<unsigned char  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC61BALL
    || ((v3 & 0x8000000192DC61BALL & 0x8000000000000000) != 0) != __OFSUB__(v3, 0x8000000192DC61BALL)
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC61BALL & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *nitro::ndarray<unsigned char>::ndarray(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a2[1];
  *a1 = *a2;
  a1[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  unsigned __int8 v10 = *(const void **)a3;
  uint64_t v9 = *(void *)(a3 + 8);
  int64_t v11 = v9 - *(void *)a3;
  if (v9 == *(void *)a3)
  {
    int64_t v12 = 0;
    unsigned __int8 v13 = 0;
  }
  else
  {
    if (v11 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v12 = (char *)operator new(v9 - *(void *)a3);
    a1[2] = v12;
    a1[3] = v12;
    unsigned __int8 v13 = &v12[8 * (v11 >> 3)];
    a1[4] = v13;
    memcpy(v12, v10, v11);
    a1[3] = v13;
  }
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  std::locale v15 = *(const void **)a4;
  uint64_t v14 = *(void *)(a4 + 8);
  int64_t v16 = v14 - *(void *)a4;
  if (v14 == *(void *)a4)
  {
    a1[8] = a5;
    uint64_t v19 = v13 - v12;
    if (v13 == v12)
    {
      float v17 = 0;
LABEL_16:
      a1[3] = v12;
      a1[6] = v17;
      a1[8] = 0;
      return a1;
    }
    if (v19)
    {
      std::vector<unsigned long long>::__append((uint64_t)(a1 + 5), v19 >> 3);
      int64_t v12 = (char *)a1[2];
      unsigned __int8 v13 = (char *)a1[3];
      float v17 = (char *)a1[5];
      uint64_t v19 = v13 - v12;
    }
    else
    {
      float v17 = 0;
    }
    *(void *)&v17[((v19 << 29) - 0x100000000) >> 29] = 1;
    if ((int)((unint64_t)v19 >> 3) >= 2)
    {
      uint64_t v21 = 8 * (((unint64_t)v19 >> 3) - 2);
      uint64_t v22 = *(void *)&v17[v21 + 8];
      do
      {
        v22 *= *(void *)&v12[v21 + 8];
        *(void *)&v17[v21] = v22;
        v21 -= 8;
      }
      while (v21 != -8);
    }
  }
  else
  {
    if (v16 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    float v17 = (char *)operator new(v14 - *(void *)a4);
    a1[5] = v17;
    a1[6] = v17;
    uint64_t v18 = &v17[8 * (v16 >> 3)];
    a1[7] = v18;
    memcpy(v17, v15, v16);
    a1[6] = v18;
    a1[8] = a5;
  }
  if (v13 == v12) {
    goto LABEL_16;
  }
  return a1;
}

void sub_192544B74(_Unwind_Exception *a1)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v6;
    operator delete(v6);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>(uint64_t a1, void *a2)
{
  *(_DWORD *)a1 = 5;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = (unsigned char *)a2[2];
  uint64_t v5 = (unsigned char *)a2[3];
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v8;
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 40) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 32) = v9;
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  int64_t v11 = (unsigned char *)a2[5];
  unsigned __int8 v10 = (unsigned char *)a2[6];
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unsigned __int8 v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 48) = v13;
    *(void *)(a1 + 56) = v13;
    uint64_t v14 = &v13[8 * (v12 >> 3)];
    *(void *)(a1 + 64) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 56) = v14;
  }
  *(void *)(a1 + 72) = a2[8];
  return a1;
}

void sub_192544CC4(_Unwind_Exception *a1)
{
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 56) = v6;
    operator delete(v6);
  }
  int64_t v7 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 32) = v7;
    operator delete(v7);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void std::shared_ptr<int>::shared_ptr[abi:ne180100]<int,std::default_delete<int []>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_192544D68(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    MEMORY[0x192FF1690](v1, 0x1000C8052888210);
  }
  __cxa_rethrow();
}

void sub_192544D90(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<int  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<int  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x192FF1690);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<int  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC61D9
    || ((v3 & 0x8000000192DC61D9 & 0x8000000000000000) != 0) != __OFSUB__(v3, 0x8000000192DC61D9)
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC61D9 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *nitro::ndarray<int>::ndarray(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a2[1];
  *a1 = *a2;
  a1[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  unsigned __int8 v10 = *(const void **)a3;
  uint64_t v9 = *(void *)(a3 + 8);
  int64_t v11 = v9 - *(void *)a3;
  if (v9 == *(void *)a3)
  {
    int64_t v12 = 0;
    unsigned __int8 v13 = 0;
  }
  else
  {
    if (v11 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v12 = (char *)operator new(v9 - *(void *)a3);
    a1[2] = v12;
    a1[3] = v12;
    unsigned __int8 v13 = &v12[8 * (v11 >> 3)];
    a1[4] = v13;
    memcpy(v12, v10, v11);
    a1[3] = v13;
  }
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  std::locale v15 = *(const void **)a4;
  uint64_t v14 = *(void *)(a4 + 8);
  int64_t v16 = v14 - *(void *)a4;
  if (v14 == *(void *)a4)
  {
    a1[8] = a5;
    uint64_t v19 = v13 - v12;
    if (v13 == v12)
    {
      float v17 = 0;
LABEL_16:
      a1[3] = v12;
      a1[6] = v17;
      a1[8] = 0;
      return a1;
    }
    if (v19)
    {
      std::vector<unsigned long long>::__append((uint64_t)(a1 + 5), v19 >> 3);
      int64_t v12 = (char *)a1[2];
      unsigned __int8 v13 = (char *)a1[3];
      float v17 = (char *)a1[5];
      uint64_t v19 = v13 - v12;
    }
    else
    {
      float v17 = 0;
    }
    *(void *)&v17[((v19 << 29) - 0x100000000) >> 29] = 1;
    if ((int)((unint64_t)v19 >> 3) >= 2)
    {
      uint64_t v21 = 8 * (((unint64_t)v19 >> 3) - 2);
      uint64_t v22 = *(void *)&v17[v21 + 8];
      do
      {
        v22 *= *(void *)&v12[v21 + 8];
        *(void *)&v17[v21] = v22;
        v21 -= 8;
      }
      while (v21 != -8);
    }
  }
  else
  {
    if (v16 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    float v17 = (char *)operator new(v14 - *(void *)a4);
    a1[5] = v17;
    a1[6] = v17;
    uint64_t v18 = &v17[8 * (v16 >> 3)];
    a1[7] = v18;
    memcpy(v17, v15, v16);
    a1[6] = v18;
    a1[8] = a5;
  }
  if (v13 == v12) {
    goto LABEL_16;
  }
  return a1;
}

void sub_192545024(_Unwind_Exception *a1)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v6;
    operator delete(v6);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t nitro::ndarray_container::ndarray_container<int,(void *)0>(uint64_t a1, void *a2)
{
  *(_DWORD *)a1 = 3;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = (unsigned char *)a2[2];
  uint64_t v5 = (unsigned char *)a2[3];
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v8;
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 40) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 32) = v9;
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  int64_t v11 = (unsigned char *)a2[5];
  unsigned __int8 v10 = (unsigned char *)a2[6];
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unsigned __int8 v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 48) = v13;
    *(void *)(a1 + 56) = v13;
    uint64_t v14 = &v13[8 * (v12 >> 3)];
    *(void *)(a1 + 64) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 56) = v14;
  }
  *(void *)(a1 + 72) = a2[8];
  return a1;
}

void sub_192545174(_Unwind_Exception *a1)
{
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 56) = v6;
    operator delete(v6);
  }
  int64_t v7 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 32) = v7;
    operator delete(v7);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void std::shared_ptr<half>::shared_ptr[abi:ne180100]<half,std::default_delete<half []>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_192545218(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    MEMORY[0x192FF1690](v1, 0x1000C80BDFB0063);
  }
  __cxa_rethrow();
}

void sub_192545240(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<half  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<half  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x192FF1690);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<half  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DC6247
    || ((v3 & 0x8000000192DC6247 & 0x8000000000000000) != 0) != __OFSUB__(v3, 0x8000000192DC6247)
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DC6247 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *nitro::ndarray<half>::ndarray(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a2[1];
  *a1 = *a2;
  a1[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  unsigned __int8 v10 = *(const void **)a3;
  uint64_t v9 = *(void *)(a3 + 8);
  int64_t v11 = v9 - *(void *)a3;
  if (v9 == *(void *)a3)
  {
    int64_t v12 = 0;
    unsigned __int8 v13 = 0;
  }
  else
  {
    if (v11 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v12 = (char *)operator new(v9 - *(void *)a3);
    a1[2] = v12;
    a1[3] = v12;
    unsigned __int8 v13 = &v12[8 * (v11 >> 3)];
    a1[4] = v13;
    memcpy(v12, v10, v11);
    a1[3] = v13;
  }
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  std::locale v15 = *(const void **)a4;
  uint64_t v14 = *(void *)(a4 + 8);
  int64_t v16 = v14 - *(void *)a4;
  if (v14 == *(void *)a4)
  {
    a1[8] = a5;
    uint64_t v19 = v13 - v12;
    if (v13 == v12)
    {
      float v17 = 0;
LABEL_16:
      a1[3] = v12;
      a1[6] = v17;
      a1[8] = 0;
      return a1;
    }
    if (v19)
    {
      std::vector<unsigned long long>::__append((uint64_t)(a1 + 5), v19 >> 3);
      int64_t v12 = (char *)a1[2];
      unsigned __int8 v13 = (char *)a1[3];
      float v17 = (char *)a1[5];
      uint64_t v19 = v13 - v12;
    }
    else
    {
      float v17 = 0;
    }
    *(void *)&v17[((v19 << 29) - 0x100000000) >> 29] = 1;
    if ((int)((unint64_t)v19 >> 3) >= 2)
    {
      uint64_t v21 = 8 * (((unint64_t)v19 >> 3) - 2);
      uint64_t v22 = *(void *)&v17[v21 + 8];
      do
      {
        v22 *= *(void *)&v12[v21 + 8];
        *(void *)&v17[v21] = v22;
        v21 -= 8;
      }
      while (v21 != -8);
    }
  }
  else
  {
    if (v16 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    float v17 = (char *)operator new(v14 - *(void *)a4);
    a1[5] = v17;
    a1[6] = v17;
    uint64_t v18 = &v17[8 * (v16 >> 3)];
    a1[7] = v18;
    memcpy(v17, v15, v16);
    a1[6] = v18;
    a1[8] = a5;
  }
  if (v13 == v12) {
    goto LABEL_16;
  }
  return a1;
}

void sub_1925454D4(_Unwind_Exception *a1)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v6;
    operator delete(v6);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t nitro::ndarray_container::ndarray_container<half,(void *)0>(uint64_t a1, void *a2)
{
  *(_DWORD *)a1 = 11;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = (unsigned char *)a2[2];
  uint64_t v5 = (unsigned char *)a2[3];
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v8;
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 40) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 32) = v9;
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  int64_t v11 = (unsigned char *)a2[5];
  unsigned __int8 v10 = (unsigned char *)a2[6];
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unsigned __int8 v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 48) = v13;
    *(void *)(a1 + 56) = v13;
    uint64_t v14 = &v13[8 * (v12 >> 3)];
    *(void *)(a1 + 64) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 56) = v14;
  }
  *(void *)(a1 + 72) = a2[8];
  return a1;
}

void sub_192545624(_Unwind_Exception *a1)
{
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 56) = v6;
    operator delete(v6);
  }
  int64_t v7 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 32) = v7;
    operator delete(v7);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::ndarray_container::is_contiguous(void)::$_0>(nitro::ndarray_container::is_contiguous(void)::$_0)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    int64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    int64_t v11 = (file_logger *)global_logger();
    int64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    unsigned __int8 v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::locale v15 = v23;
      }
      else {
        std::locale v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    float v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  uint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1925458B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::ndarray_container::concat(std::vector<nitro::ndarray_container> const&,unsigned long)::$_0>(nitro::ndarray_container::concat(std::vector<nitro::ndarray_container> const&,unsigned long)::$_0)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    int64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    int64_t v11 = (file_logger *)global_logger();
    int64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    unsigned __int8 v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::locale v15 = v23;
      }
      else {
        std::locale v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    float v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  uint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192545C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::concat(uint64_t **a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0x8E38E38E38E38E39 * (v4 - *a1);
  if (v5 == 1)
  {
    uint64_t v6 = *a1;
    nitro::ndarray<unsigned char>::copy(v6);
  }
  if (!v5)
  {
    p_p = 0;
    uint64_t v169 = 0;
    int v170 = 0;
    unint64_t v177 = 0;
    uint32x4_t v178 = 0;
    uint64_t v179 = 0;
    long long __p = 0;
    v175 = 0;
    uint64_t v176 = 0;
    nitro::ndarray<unsigned char>::ndarray((uint64_t)a3);
  }
  uint64_t v8 = a1;
  uint32x4_t v178 = 0;
  uint64_t v179 = 0;
  unint64_t v177 = 0;
  uint64_t v10 = (unsigned char *)v3[2];
  uint64_t v9 = (unsigned char *)v3[3];
  int64_t v11 = v9 - v10;
  if (v9 == v10)
  {
    unsigned __int8 v13 = 0;
    int64_t v12 = 0;
  }
  else
  {
    if (v11 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v12 = (char *)operator new(v9 - v10);
    unsigned __int8 v13 = &v12[8 * (v11 >> 3)];
    unint64_t v177 = v12;
    uint64_t v179 = v13;
    memcpy(v12, v10, v11);
    uint32x4_t v178 = v13;
  }
  *(void *)&v12[8 * a2] = 0;
  if (v3 != v4)
  {
    uint64_t v14 = v13;
    do
    {
      long long __p = (void *)((v3[3] - v3[2]) >> 3);
      v181[0] = (v14 - v12) >> 3;
      if (__p != (void *)v181[0])
      {
        p_p = &__p;
        uint64_t v169 = (std::__shared_weak_count *)v181;
        nitro::ndarray<unsigned char>::concat(std::vector<nitro::ndarray<unsigned char>> const&,unsigned long)::{lambda(void)#1}::operator()();
      }
      if (v14 == v12)
      {
        uint64_t v14 = v12;
      }
      else
      {
        unint64_t v15 = 0;
        do
        {
          if (a2 == v15)
          {
            *(void *)&v12[8 * a2] += *(void *)(v3[2] + 8 * a2);
          }
          else
          {
            long long __p = 0;
            long long __p = *(void **)(v3[2] + 8 * v15);
            v181[0] = 0;
            v181[0] = *(void *)&v12[8 * v15];
            if (__p != (void *)v181[0])
            {
              p_p = &__p;
              uint64_t v169 = (std::__shared_weak_count *)v181;
              nitro::ndarray<unsigned char>::concat(std::vector<nitro::ndarray<unsigned char>> const&,unsigned long)::{lambda(void)#2}::operator()();
            }
          }
          ++v15;
          uint64_t v14 = v13;
        }
        while (v15 < (v13 - v12) >> 3);
      }
      v3 += 9;
    }
    while (v3 != v4);
  }
  nitro::ndarray<unsigned char>::init_from_shape((uint64_t **)&v177, a3);
  float v17 = *v8;
  uint64_t v18 = v8[1];
  if (*v8 == v18)
  {
LABEL_60:
    char v57 = 1;
    goto LABEL_62;
  }
  uint64_t v19 = *v8;
  while (1)
  {
    int64_t v20 = (char *)v19[2];
    unsigned __int8 v21 = (char *)v19[3];
    uint64_t v22 = v21 - v20;
    if (v21 == v20)
    {
      uint64_t v25 = (unint64_t *)v19[5];
      goto LABEL_47;
    }
    uint64_t v23 = *v19;
    if (*v19)
    {
      if ((unint64_t)(v22 - 8) < 8)
      {
        uint64_t v23 = 1;
        unsigned __int8 v24 = (char *)v19[2];
        do
        {
LABEL_36:
          uint64_t v31 = *(void *)v24;
          v24 += 8;
          v23 *= v31;
        }
        while (v24 != v21);
        goto LABEL_37;
      }
      unint64_t v26 = ((unint64_t)(v22 - 8) >> 3) + 1;
      unsigned __int8 v24 = &v20[8 * (v26 & 0x3FFFFFFFFFFFFFFELL)];
      std::locale v27 = v20 + 8;
      uint64_t v28 = v26 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v29 = 1;
      uint64_t v30 = 1;
      do
      {
        v29 *= *(v27 - 1);
        v30 *= *v27;
        v27 += 2;
        v28 -= 2;
      }
      while (v28);
      uint64_t v23 = v30 * v29;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFELL)) {
        goto LABEL_36;
      }
    }
LABEL_37:
    unint64_t v32 = v22 >> 3;
    uint64_t v25 = (unint64_t *)v19[5];
    if (v32 <= 1) {
      unint64_t v32 = 1;
    }
    if (v32 < 2)
    {
      unint64_t v33 = 0;
      uint64_t v34 = 0;
LABEL_44:
      unint64_t v40 = v32 - v33;
      uint64_t v41 = 8 * v33;
      uint64_t v42 = (uint64_t *)&v25[v33];
      uint64_t v43 = (uint64_t *)&v20[v41];
      do
      {
        uint64_t v44 = *v43++;
        uint64_t v45 = v44 - 1;
        uint64_t v46 = *v42++;
        v34 += v46 * v45;
        --v40;
      }
      while (v40);
      goto LABEL_46;
    }
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    unint64_t v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v37 = v20 + 8;
    char v38 = v25 + 1;
    unint64_t v39 = v32 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v35 += *(v38 - 1) * (*(v37 - 1) - 1);
      v36 += *v38 * (*v37 - 1);
      v37 += 2;
      v38 += 2;
      v39 -= 2;
    }
    while (v39);
    uint64_t v34 = v36 + v35;
    if (v32 != v33) {
      goto LABEL_44;
    }
LABEL_46:
    if (v23 != v34 + 1) {
      break;
    }
LABEL_47:
    uint64_t v47 = v19[6] - (void)v25;
    if (v47)
    {
      if (!*v25) {
        break;
      }
      if ((unint64_t)v47 >= 0x10)
      {
        unint64_t v48 = v47 >> 3;
        uint64_t v49 = v48 <= 2 ? 2 : v48;
        unint64_t v50 = v25[1];
        if (!v50 || *v25 < v50) {
          break;
        }
        uint64_t v51 = 0;
        uint64_t v52 = v49 - 2;
        do
        {
          uint64_t v53 = v51;
          if (v52 == v51) {
            break;
          }
          uint64_t v54 = &v25[v51];
          unint64_t v55 = v54[2];
          if (!v55) {
            break;
          }
          unint64_t v56 = v54[1];
          uint64_t v51 = v53 + 1;
        }
        while (v56 >= v55);
        if (v53 + 2 < v48) {
          break;
        }
      }
    }
    v19 += 9;
    if (v19 == v18) {
      goto LABEL_60;
    }
  }
  char v57 = 0;
LABEL_62:
  uint64_t v58 = v178 - (unsigned char *)v177;
  if (v178 == v177)
  {
    if (v57)
    {
      uint64_t v61 = 0;
      goto LABEL_78;
    }
    int64_t v72 = 0;
    long long __p = 0;
    v175 = 0;
    uint64_t v176 = 0;
    if (v17 == v18) {
      goto LABEL_116;
    }
LABEL_104:
    unint64_t v86 = 0;
    do
    {
      uint64_t v87 = *(void *)(v17[2] + 8 * a2);
      unint64_t v88 = v87 + v86;
      unint64_t v180 = v86;
      v181[0] = v87 + v86;
      if (v87 + v86 <= v86)
      {
        p_p = v181;
        uint64_t v169 = (std::__shared_weak_count *)&v180;
        nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long,unsigned long)::{lambda(void)#2}::operator()();
      }
      uint64_t v89 = (unint64_t *)((char *)__p + 24 * a2);
      unint64_t *v89 = v86;
      v89[1] = v88;
      v89[2] = 1;
      nitro::ndarray<unsigned char>::slice(a3, (long long **)&__p, &p_p, v16);
      nitro::ndarray<unsigned char>::assign<unsigned char>(&p_p, v17);
      if (v172)
      {
        uint64_t v173 = v172;
        operator delete(v172);
      }
      if (v170)
      {
        uint64_t v171 = v170;
        operator delete(v170);
      }
      unint64_t v90 = v169;
      if (v169 && !atomic_fetch_add(&v169->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
      v86 += *(void *)(v17[2] + 8 * a2);
      v17 += 9;
    }
    while (v17 != v18);
    int64_t v72 = (char *)__p;
    goto LABEL_116;
  }
  uint64_t v59 = v58 >> 3;
  if ((unint64_t)(v58 >> 3) <= 1) {
    unint64_t v60 = 1;
  }
  else {
    unint64_t v60 = v58 >> 3;
  }
  if (v60 >= 4)
  {
    unint64_t v62 = v60 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v63 = (uint64x2_t *)((char *)v177 + 16);
    int64x2_t v64 = 0uLL;
    uint64x2_t v65 = (uint64x2_t)vdupq_n_s64(1uLL);
    unint64_t v66 = v60 & 0xFFFFFFFFFFFFFFFCLL;
    int64x2_t v67 = 0uLL;
    do
    {
      int64x2_t v64 = vsubq_s64(v64, (int64x2_t)vcgtq_u64(v63[-1], v65));
      int64x2_t v67 = vsubq_s64(v67, (int64x2_t)vcgtq_u64(*v63, v65));
      v63 += 2;
      v66 -= 4;
    }
    while (v66);
    uint64_t v61 = vaddvq_s64(vaddq_s64(v67, v64));
    if (v60 != v62) {
      goto LABEL_73;
    }
  }
  else
  {
    uint64_t v61 = 0;
    unint64_t v62 = 0;
LABEL_73:
    unint64_t v68 = v60 - v62;
    std::locale v69 = (unint64_t *)((char *)v177 + 8 * v62);
    do
    {
      unint64_t v70 = *v69++;
      if (v70 > 1) {
        ++v61;
      }
      --v68;
    }
    while (v68);
  }
  if (v57)
  {
LABEL_78:
    if (a2 && v61 != 1)
    {
      p_p = 0;
      uint64_t v169 = 0;
      int v170 = 0;
      if (v18 == v17) {
        goto LABEL_158;
      }
      if ((0x8E38E38E38E38E39 * (v18 - v17)) >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unsigned __int8 v71 = (std::__shared_weak_count *)operator new(0x71C71C71C71C71C8 * (v18 - v17));
      p_p = v71;
      uint64_t v169 = v71;
      int v170 = &v71[0x4BDA12F684BDA13 * (v18 - v17)];
      if (v17 == v18)
      {
LABEL_158:
        uint64_t v126 = (char *)v17[2];
        unint64_t v125 = (char *)v17[3];
        if (v125 == v126 || !*v17)
        {
          unint64_t v128 = 0;
        }
        else
        {
          unint64_t v127 = v125 - v126 - 8;
          if (v127 < 8)
          {
            unint64_t v128 = 1;
            uint64_t v129 = (char *)v17[2];
            goto LABEL_166;
          }
          uint64_t v130 = (v127 >> 3) + 1;
          uint64_t v129 = &v126[8 * (v130 & 0x3FFFFFFFFFFFFFFELL)];
          unint64_t v131 = v126 + 8;
          uint64_t v132 = 1;
          uint64_t v133 = v130 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v134 = 1;
          do
          {
            v132 *= *(v131 - 1);
            v134 *= *v131;
            v131 += 2;
            v133 -= 2;
          }
          while (v133);
          unint64_t v128 = v134 * v132;
          if (v130 != (v130 & 0x3FFFFFFFFFFFFFFELL))
          {
            do
            {
LABEL_166:
              uint64_t v135 = *(void *)v129;
              v129 += 8;
              v128 *= v135;
            }
            while (v129 != v125);
          }
        }
        size_t v136 = *(void *)p_p;
        uint64_t v137 = v8[1];
        unint64_t v138 = v128 / *(void *)p_p;
        unint64_t v139 = 0;
        if (v137 == v17)
        {
          unint64_t v152 = 0x8E38E38E38E38E39 * (v137 - v17);
          long long __p = 0;
          v175 = 0;
          uint64_t v176 = 0;
          uint64_t v137 = v17;
          goto LABEL_186;
        }
        while (2)
        {
          v181[0] = 0;
          uint64_t v140 = &v17[9 * v139];
          float32x4_t v142 = (char *)v140[2];
          uint64_t v141 = (char *)v140[3];
          if (v141 == v142)
          {
            uint64_t v143 = 0;
          }
          else
          {
            uint64_t v143 = v17[9 * v139];
            if (v143)
            {
              unint64_t v144 = v141 - v142 - 8;
              if (v144 < 8)
              {
                uint64_t v143 = 1;
                uint64_t v145 = v142;
                goto LABEL_176;
              }
              uint64_t v146 = (v144 >> 3) + 1;
              uint64_t v145 = &v142[8 * (v146 & 0x3FFFFFFFFFFFFFFELL)];
              unint64_t v147 = v142 + 8;
              uint64_t v148 = v146 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v149 = 1;
              uint64_t v150 = 1;
              do
              {
                v149 *= *(v147 - 1);
                v150 *= *v147;
                v147 += 2;
                v148 -= 2;
              }
              while (v148);
              uint64_t v143 = v150 * v149;
              if (v146 != (v146 & 0x3FFFFFFFFFFFFFFELL))
              {
                do
                {
LABEL_176:
                  uint64_t v151 = *(void *)v145;
                  v145 += 8;
                  v143 *= v151;
                }
                while (v145 != v141);
              }
            }
          }
          unint64_t v180 = 0;
          v181[0] = v143;
          unint64_t v180 = *((void *)p_p + v139) * v138;
          if (v143 != v180)
          {
            long long __p = v181;
            v175 = (char *)&v180;
            nitro::ndarray<unsigned char>::concat(std::vector<nitro::ndarray<unsigned char>> const&,unsigned long)::{lambda(void)#3}::operator()();
          }
          ++v139;
          unint64_t v152 = 0x8E38E38E38E38E39 * (v137 - v17);
          if (v139 >= v152)
          {
            long long __p = 0;
            v175 = 0;
            uint64_t v176 = 0;
            if (v137 == v17)
            {
              unint64_t v139 = 0;
            }
            else
            {
              if (v152 >> 61) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v139 = (unint64_t)operator new(0x71C71C71C71C71C8 * (v137 - v17));
              uint64_t v176 = (char *)(v139 + 0x71C71C71C71C71C8 * (v137 - v17));
              bzero((void *)v139, 0x71C71C71C71C71C8 * (v137 - v17));
            }
LABEL_186:
            if (v152)
            {
              uint64_t v153 = v17 + 8;
              unint64_t v154 = (void *)v139;
              do
              {
                uint64_t v155 = *v153;
                v153 += 9;
                *v154++ = v155;
                --v152;
              }
              while (v152);
            }
            if (v136 <= v128)
            {
              uint64_t v156 = 0;
              uint64_t v157 = 0;
              if (v138 <= 1) {
                uint64_t v158 = 1;
              }
              else {
                uint64_t v158 = v138;
              }
              float32x4_t v159 = v137;
              uint64_t v166 = v158;
              do
              {
                if (v159 == v17)
                {
                  float32x4_t v159 = v17;
                }
                else
                {
                  std::string::size_type v160 = p_p;
                  if (*(void *)p_p)
                  {
                    memmove((void *)(*a3 + v157), (const void *)(*v17 + *(void *)v139), *(void *)p_p);
                    std::string::size_type v160 = p_p;
                    size_t v161 = *(void *)p_p;
                    float v17 = *v8;
                    uint64_t v137 = v8[1];
                  }
                  else
                  {
                    size_t v161 = 0;
                  }
                  v157 += v161;
                  *(void *)v139 += v161;
                  if (0x8E38E38E38E38E39 * (v137 - v17) < 2)
                  {
                    float32x4_t v159 = v137;
                  }
                  else
                  {
                    uint64_t v162 = 9;
                    unint64_t v163 = 1;
                    do
                    {
                      size_t v165 = v160[v163];
                      if (v165)
                      {
                        memmove((void *)(*a3 + v157), (const void *)(v17[v162] + *(void *)(v139 + 8 * v163)), v165);
                        std::string::size_type v160 = p_p;
                        uint64_t v164 = *((void *)p_p + v163);
                        float v17 = *v8;
                        uint64_t v137 = v8[1];
                      }
                      else
                      {
                        uint64_t v164 = 0;
                      }
                      v157 += v164;
                      *(void *)(v139 + 8 * v163++) += v164;
                      v162 += 9;
                    }
                    while (v163 < 0x8E38E38E38E38E39 * (v137 - v17));
                    float32x4_t v159 = v137;
                    uint64_t v158 = v166;
                  }
                }
                ++v156;
              }
              while (v156 != v158);
            }
            if (v139)
            {
              v175 = (char *)v139;
              operator delete((void *)v139);
            }
            int64_t v72 = (char *)p_p;
            if (p_p)
            {
              uint64_t v169 = (std::__shared_weak_count *)p_p;
LABEL_194:
              operator delete(v72);
            }
            goto LABEL_195;
          }
          continue;
        }
      }
      while (2)
      {
        uint64_t v92 = v17[2];
        unint64_t v93 = (v17[3] - v92) >> 3;
        unint64_t v94 = v93 - a2;
        if (v93 <= a2)
        {
          uint64_t v96 = 1;
        }
        else
        {
          if (v94 < 2)
          {
            unint64_t v95 = a2;
            uint64_t v96 = 1;
            goto LABEL_129;
          }
          unint64_t v95 = (v94 & 0xFFFFFFFFFFFFFFFELL) + a2;
          unint64_t v97 = (void *)(v92 + 8 * a2 + 8);
          unint64_t v98 = v94 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v99 = 1;
          uint64_t v100 = 1;
          do
          {
            v99 *= *(v97 - 1);
            v100 *= *v97;
            v97 += 2;
            v98 -= 2;
          }
          while (v98);
          uint64_t v96 = v100 * v99;
          if (v94 != (v94 & 0xFFFFFFFFFFFFFFFELL))
          {
LABEL_129:
            unint64_t v101 = v93 - v95;
            uint64_t v102 = (uint64_t *)(v92 + 8 * v95);
            do
            {
              uint64_t v103 = *v102++;
              v96 *= v103;
              --v101;
            }
            while (v101);
          }
        }
        if (v71 < v170)
        {
          v71->__vftable = (std::__shared_weak_count_vtbl *)v96;
          p_shared_owners = (std::__shared_weak_count *)&v71->__shared_owners_;
        }
        else
        {
          uint64_t v104 = v8;
          unint64_t v105 = v18;
          uint64_t v106 = (std::__shared_weak_count *)p_p;
          int64_t v107 = (char *)v71 - (unsigned char *)p_p;
          uint64_t v108 = ((char *)v71 - (unsigned char *)p_p) >> 3;
          unint64_t v109 = v108 + 1;
          if ((unint64_t)(v108 + 1) >> 61) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          int64_t v110 = (unsigned char *)v170 - (unsigned char *)p_p;
          if (((unsigned char *)v170 - (unsigned char *)p_p) >> 2 > v109) {
            unint64_t v109 = v110 >> 2;
          }
          if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v111 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v111 = v109;
          }
          if (v111)
          {
            if (v111 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v112 = v111;
            uint64_t v113 = operator new(8 * v111);
            unint64_t v111 = v112;
          }
          else
          {
            uint64_t v113 = 0;
          }
          uint64_t v114 = (uint64_t *)&v113[8 * v108];
          uint64_t *v114 = v96;
          p_shared_owners = (std::__shared_weak_count *)(v114 + 1);
          if (v71 == v106)
          {
            uint64_t v18 = v105;
            uint64_t v8 = v104;
          }
          else
          {
            unint64_t v115 = (char *)v71 - (char *)v106 - 8;
            if (v115 < 0x168
              || (unint64_t v118 = ((char *)&v71[-1].__shared_weak_owners_ - (char *)v106) & 0xFFFFFFFFFFFFFFF8,
                  &v113[v107 - 8 - v118] > &v113[v107 - 8])
              || (uint64_t *)((char *)&v71[-1].__shared_weak_owners_ - v118) > &v71[-1].__shared_weak_owners_
              || (unint64_t)((char *)v71 - &v113[v107]) < 0x20)
            {
              unint64_t v116 = v71;
              uint64_t v18 = v105;
              uint64_t v8 = v104;
            }
            else
            {
              uint64_t v119 = (v115 >> 3) + 1;
              uint64_t v120 = 8 * (v119 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v116 = (std::__shared_weak_count *)((char *)v71 - v120);
              uint64_t v114 = (uint64_t *)((char *)v114 - v120);
              uint64_t v121 = &v113[8 * v108 - 16];
              uint64_t v122 = &v71[-1].__shared_owners_;
              uint64_t v123 = v119 & 0x3FFFFFFFFFFFFFFCLL;
              uint64_t v18 = v105;
              do
              {
                long long v124 = *(_OWORD *)v122;
                *(v121 - 1) = *((_OWORD *)v122 - 1);
                *uint64_t v121 = v124;
                v121 -= 2;
                v122 -= 4;
                v123 -= 4;
              }
              while (v123);
              uint64_t v8 = v104;
              if (v119 == (v119 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_148;
              }
            }
            do
            {
              uint64_t shared_weak_owners = v116[-1].__shared_weak_owners_;
              unint64_t v116 = (std::__shared_weak_count *)((char *)v116 - 8);
              *--uint64_t v114 = shared_weak_owners;
            }
            while (v116 != v106);
          }
LABEL_148:
          p_p = v114;
          uint64_t v169 = p_shared_owners;
          int v170 = &v113[8 * v111];
          if (v106) {
            operator delete(v106);
          }
        }
        uint64_t v169 = p_shared_owners;
        v17 += 9;
        unsigned __int8 v71 = p_shared_owners;
        if (v17 == v18)
        {
          float v17 = *v8;
          goto LABEL_158;
        }
        continue;
      }
    }
    if (v17 == v18) {
      goto LABEL_195;
    }
    uint64_t v74 = 0;
    while (2)
    {
      uint64_t v77 = (char *)v17[2];
      uint64_t v76 = (char *)v17[3];
      if (v76 == v77 || !*v17)
      {
        size_t v75 = 0;
      }
      else
      {
        unint64_t v78 = v76 - v77 - 8;
        if (v78 < 8)
        {
          size_t v75 = 1;
          uint64_t v79 = (char *)v17[2];
          goto LABEL_100;
        }
        uint64_t v80 = (v78 >> 3) + 1;
        uint64_t v79 = &v77[8 * (v80 & 0x3FFFFFFFFFFFFFFELL)];
        uint64_t v81 = v77 + 8;
        uint64_t v82 = v80 & 0x3FFFFFFFFFFFFFFELL;
        uint64_t v83 = 1;
        uint64_t v84 = 1;
        do
        {
          v83 *= *(v81 - 1);
          v84 *= *v81;
          v81 += 2;
          v82 -= 2;
        }
        while (v82);
        size_t v75 = v84 * v83;
        if (v80 != (v80 & 0x3FFFFFFFFFFFFFFELL))
        {
          do
          {
LABEL_100:
            uint64_t v85 = *(void *)v79;
            v79 += 8;
            v75 *= v85;
          }
          while (v79 != v76);
        }
        if (v75) {
          memmove((void *)(*a3 + v74), (const void *)(*v17 + v17[8]), v75);
        }
      }
      v74 += v75;
      v17 += 9;
      if (v17 == v18) {
        goto LABEL_195;
      }
      continue;
    }
  }
  long long __p = 0;
  v175 = 0;
  uint64_t v176 = 0;
  if ((unint64_t)v58 >= 0x5555555555555551) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  int64_t v72 = (char *)operator new(24 * v59);
  long long __p = v72;
  uint64_t v176 = &v72[24 * v59];
  uint64_t v73 = v72;
  do
  {
    *(void *)uint64_t v73 = -1;
    *((void *)v73 + 1) = -1;
    *((void *)v73 + 2) = 1;
    v73 += 24;
  }
  while (v73 != &v72[24 * v59]);
  v175 = &v72[24 * v59];
  if (v17 != v18) {
    goto LABEL_104;
  }
LABEL_116:
  if (v72)
  {
    v175 = v72;
    goto LABEL_194;
  }
LABEL_195:
  if (v177)
  {
    uint32x4_t v178 = (char *)v177;
    operator delete(v177);
  }
}

void sub_192546ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  nitro::ndarray<float>::~ndarray(a10);
  if (a23) {
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

char *std::vector<nitro::ndarray<unsigned char>>::__push_back_slow_path<nitro::ndarray<unsigned char>>(int64x2_t *a1, long long *a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  if (0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0x8E38E38E38E38E39 * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v5 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v5 = v4;
  }
  uint64_t v26 = 0;
  std::locale v27 = a1 + 1;
  if (v5 > 0x38E38E38E38E38ELL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  int64_t v7 = (char *)operator new(72 * v5);
  long long v8 = *a2;
  long long v9 = a2[1];
  uint64_t v10 = &v7[72 * v3];
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  *(_OWORD *)uint64_t v10 = v8;
  *((_OWORD *)v10 + 1) = v9;
  *((void *)v10 + 4) = *((void *)a2 + 4);
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  long long v11 = *(long long *)((char *)a2 + 40);
  uint64_t v12 = *((void *)a2 + 7);
  uint64_t v13 = *((void *)a2 + 8);
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  v25.i64[1] = (uint64_t)v10;
  *(_OWORD *)(v10 + 40) = v11;
  *((void *)v10 + 7) = v12;
  *((void *)v10 + 8) = v13;
  uint64_t v15 = a1->i64[0];
  unint64_t v14 = a1->u64[1];
  if (v14 == a1->i64[0])
  {
    int64x2_t v19 = vdupq_n_s64(v14);
    int64_t v20 = &v7[72 * v3];
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      float v17 = &v10[v16];
      uint64_t v18 = v14 + v16;
      *(_OWORD *)(v17 - 72) = *(_OWORD *)(v14 + v16 - 72);
      *(void *)(v18 - 72) = 0;
      *(void *)(v18 - 64) = 0;
      *((void *)v17 - 7) = 0;
      *((void *)v17 - 6) = 0;
      *((void *)v17 - 5) = 0;
      *(_OWORD *)(v17 - 56) = *(_OWORD *)(v14 + v16 - 56);
      *((void *)v17 - 5) = *(void *)(v14 + v16 - 40);
      *(void *)(v18 - 56) = 0;
      *(void *)(v18 - 48) = 0;
      *(void *)(v18 - 40) = 0;
      *((void *)v17 - 4) = 0;
      *((void *)v17 - 3) = 0;
      *((void *)v17 - 2) = 0;
      *((_OWORD *)v17 - 2) = *(_OWORD *)(v14 + v16 - 32);
      *((void *)v17 - 2) = *(void *)(v14 + v16 - 16);
      *(void *)(v18 - 32) = 0;
      *(void *)(v18 - 24) = 0;
      *(void *)(v18 - 16) = 0;
      *((void *)v17 - 1) = *(void *)(v14 + v16 - 8);
      v16 -= 72;
    }
    while (v14 + v16 != v15);
    int64x2_t v19 = *a1;
    int64_t v20 = &v10[v16];
  }
  unsigned __int8 v21 = v10 + 72;
  a1->i64[0] = (uint64_t)v20;
  a1->i64[1] = (uint64_t)(v10 + 72);
  int64x2_t v25 = v19;
  uint64_t v22 = a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)&v7[72 * v5];
  uint64_t v26 = v22;
  uint64_t v24 = v19.i64[0];
  std::__split_buffer<nitro::ndarray<float>>::~__split_buffer((uint64_t)&v24);
  return v21;
}

void _ZNK5nitro17ndarray_container5visitIZNKS0_4castIhEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)v16, (uint64_t)a1);
      nitro::ndarray_container::cast<unsigned char>(void)const::{lambda(unsigned char)#1}::operator()<nitro::ndarray<int>>((uint64_t)v16, a2);
      if (v20)
      {
        unsigned __int8 v21 = v20;
        operator delete(v20);
      }
      if (v18)
      {
        int64x2_t v19 = v18;
        operator delete(v18);
      }
      unint64_t v3 = v17;
      if (!v17) {
        return;
      }
      goto LABEL_25;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)v22, (uint64_t)a1);
      nitro::ndarray_container::cast<unsigned char>(void)const::{lambda(unsigned char)#1}::operator()<nitro::ndarray<unsigned char>>((uint64_t)v22, a2);
      if (v26)
      {
        std::locale v27 = v26;
        operator delete(v26);
      }
      if (v24)
      {
        int64x2_t v25 = v24;
        operator delete(v24);
      }
      unint64_t v3 = v23;
      if (!v23) {
        return;
      }
      goto LABEL_25;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)v4, (uint64_t)a1);
      nitro::ndarray_container::cast<unsigned char>(void)const::{lambda(unsigned char)#1}::operator()<nitro::ndarray<float>>((uint64_t)v4, a2);
      if (v8)
      {
        long long v9 = v8;
        operator delete(v8);
      }
      if (v6)
      {
        int64_t v7 = v6;
        operator delete(v6);
      }
      unint64_t v3 = v5;
      if (v5) {
        goto LABEL_25;
      }
      return;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)v10, (uint64_t)a1);
      nitro::ndarray_container::cast<unsigned char>(void)const::{lambda(unsigned char)#1}::operator()<nitro::ndarray<half>>((uint64_t)v10, a2);
      if (__p)
      {
        uint64_t v15 = __p;
        operator delete(__p);
      }
      if (v12)
      {
        uint64_t v13 = v12;
        operator delete(v12);
      }
      unint64_t v3 = v11;
      if (!v11) {
        return;
      }
LABEL_25:
      if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
      return;
    default:
      _ZZNK5nitro17ndarray_container5visitIZNKS0_4castIhEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_ENKUlvE_clEv();
  }
}

void sub_192546F30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_192546F44(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray((void *)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_192546F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_192546F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
}

void nitro::ndarray_container::cast<unsigned char>(void)const::{lambda(unsigned char)#1}::operator()<nitro::ndarray<unsigned char>>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  nitro::ndarray<unsigned char>::init_from_shape((uint64_t **)(a1 + 16), &v5);
  _ZN5nitro7ndarrayIhE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clIS1_EEDaS5_EUlRhRKhE_EEvRKNS0_IS5_EET0_(&v5, (void *)a1);
  nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>(a2, &v5);
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
  if (v7)
  {
    long long v8 = v7;
    operator delete(v7);
  }
  unint64_t v4 = v6;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_19254705C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::cast<unsigned char>(void)const::{lambda(unsigned char)#1}::operator()<nitro::ndarray<int>>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  nitro::ndarray<unsigned char>::init_from_shape((uint64_t **)(a1 + 16), &v5);
  _ZN5nitro7ndarrayIhE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRhRKiE_EEvRKNS0_IS5_EET0_(&v5, (void *)a1);
  nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>(a2, &v5);
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
  if (v7)
  {
    long long v8 = v7;
    operator delete(v7);
  }
  unint64_t v4 = v6;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_192547128(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::cast<unsigned char>(void)const::{lambda(unsigned char)#1}::operator()<nitro::ndarray<half>>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  nitro::ndarray<unsigned char>::init_from_shape((uint64_t **)(a1 + 16), &v5);
  _ZN5nitro7ndarrayIhE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRhRKDhE_EEvRKNS0_IS5_EET0_(&v5, (void *)a1);
  nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>(a2, &v5);
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
  if (v7)
  {
    long long v8 = v7;
    operator delete(v7);
  }
  unint64_t v4 = v6;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1925471F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::cast<unsigned char>(void)const::{lambda(unsigned char)#1}::operator()<nitro::ndarray<float>>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  nitro::ndarray<unsigned char>::init_from_shape((uint64_t **)(a1 + 16), &v5);
  _ZN5nitro7ndarrayIhE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRhRKfE_EEvRKNS0_IS5_EET0_(&v5, (void *)a1);
  nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>(a2, &v5);
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
  if (v7)
  {
    long long v8 = v7;
    operator delete(v7);
  }
  unint64_t v4 = v6;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1925472C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void _ZZNK5nitro17ndarray_container5visitIZNKS0_4castIhEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    long long v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      long long v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZNK5nitro17ndarray_container5visitIZNKS0_4castIhEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_192547560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZN5nitro7ndarrayIhE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clIS1_EEDaS5_EUlRhRKhE_EEvRKNS0_IS5_EET0_(void *a1, void *a2)
{
  unint64_t v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[3];
  unint64_t v6 = (v5 - v4) >> 3;
  int64_t v7 = (void *)a2[2];
  if (v6 != (uint64_t)(a2[3] - (void)v7) >> 3) {
    goto LABEL_13;
  }
  if (v5 == v4) {
    return;
  }
  uint64_t v8 = v6 <= 1 ? 1 : (v5 - v4) >> 3;
  if (*(void *)v4 != *v7) {
    goto LABEL_13;
  }
  uint64_t v9 = 1;
  do
  {
    unint64_t v10 = v9;
    if (v8 == v9) {
      break;
    }
    uint64_t v11 = *(void *)&v4[8 * v9];
    uint64_t v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6) {
LABEL_13:
  }
    _ZZN5nitro7ndarrayIhE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clIS1_EEDaS5_EUlRhRKhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv();
  int64_t v13 = v5 - v4;
  if (v5 == v4 || !*a1) {
    return;
  }
  if ((unint64_t)(v13 - 8) < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (char *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *(void *)v15;
      v15 += 8;
      v14 *= v21;
    }
    while (v15 != v5);
    goto LABEL_21;
  }
  unint64_t v16 = ((unint64_t)(v13 - 8) >> 3) + 1;
  std::locale v15 = &v4[8 * (v16 & 0x3FFFFFFFFFFFFFFELL)];
  float v17 = v4 + 8;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  unint64_t v22 = v13 >> 3;
  if (v13 >> 3 == 3)
  {
    unint64_t v35 = *(void *)v4;
    if (*(void *)v4)
    {
      unint64_t v36 = 0;
      uint64_t v37 = a2[8];
      uint64_t v38 = a1[8];
      do
      {
        if (*((void *)v4 + 1))
        {
          unint64_t v39 = 0;
          uint64_t v40 = v37;
          uint64_t v41 = v38;
          do
          {
            if (*((void *)v4 + 2))
            {
              unint64_t v44 = 0;
              uint64_t v45 = v40;
              uint64_t v46 = v41;
              do
              {
                *(unsigned char *)(*a1 + v46) = *(unsigned char *)(*a2 + v45);
                uint64_t v42 = (void *)a1[5];
                v46 += v42[2];
                uint64_t v43 = (void *)a2[5];
                v45 += v43[2];
                ++v44;
                unint64_t v4 = (char *)a1[2];
              }
              while (v44 < *((void *)v4 + 2));
            }
            else
            {
              uint64_t v42 = (void *)a1[5];
              uint64_t v43 = (void *)a2[5];
            }
            v41 += v42[1];
            v40 += v43[1];
            ++v39;
          }
          while (v39 < *((void *)v4 + 1));
          unint64_t v35 = *(void *)v4;
        }
        else
        {
          uint64_t v42 = (void *)a1[5];
          uint64_t v43 = (void *)a2[5];
        }
        v38 += *v42;
        v37 += *v43;
        ++v36;
      }
      while (v36 < v35);
    }
  }
  else
  {
    if (v22 != 2)
    {
      if (v22 == 1)
      {
        if (*(void *)v4)
        {
          unint64_t v23 = 0;
          uint64_t v24 = a2[8];
          uint64_t v25 = a1[8];
          do
          {
            *(unsigned char *)(*a1 + v25) = *(unsigned char *)(*a2 + v24);
            v25 += *(void *)a1[5];
            v24 += *(void *)a2[5];
            ++v23;
          }
          while (v23 < *(void *)a1[2]);
        }
        return;
      }
      if (v13 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v47 = operator new(v13);
      bzero(v47, v13 & 0xFFFFFFFFFFFFFFF8);
      if (v22 <= 1) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v13 >> 3;
      }
      unint64_t v49 = v48 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        uint64_t v50 = a1[5];
        if (v48 < 2) {
          break;
        }
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        unint64_t v55 = (void *)(v50 + 8);
        unint64_t v56 = v48 & 0xFFFFFFFFFFFFFFFELL;
        char v57 = v47 + 1;
        do
        {
          v53 += *(v55 - 1) * *(v57 - 1);
          v54 += *v55 * *v57;
          v57 += 2;
          v55 += 2;
          v56 -= 2;
        }
        while (v56);
        uint64_t v51 = v54 + v53;
        unint64_t v52 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49) {
          goto LABEL_60;
        }
LABEL_62:
        uint64_t v65 = a2[5];
        if (v48 < 2)
        {
          uint64_t v66 = 0;
          unint64_t v67 = 0;
LABEL_67:
          unint64_t v73 = v48 - v67;
          uint64_t v74 = v67;
          size_t v75 = (uint64_t *)(v65 + v74 * 8);
          uint64_t v76 = &v47[v74];
          do
          {
            uint64_t v78 = *v76++;
            uint64_t v77 = v78;
            uint64_t v79 = *v75++;
            v66 += v79 * v77;
            --v73;
          }
          while (v73);
          goto LABEL_69;
        }
        uint64_t v68 = 0;
        uint64_t v69 = 0;
        unint64_t v70 = (void *)(v65 + 8);
        unint64_t v71 = v48 & 0xFFFFFFFFFFFFFFFELL;
        int64_t v72 = v47 + 1;
        do
        {
          v68 += *(v70 - 1) * *(v72 - 1);
          v69 += *v70 * *v72;
          v72 += 2;
          v70 += 2;
          v71 -= 2;
        }
        while (v71);
        uint64_t v66 = v69 + v68;
        unint64_t v67 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49) {
          goto LABEL_67;
        }
LABEL_69:
        *(unsigned char *)(*a1 + v51) = *(unsigned char *)(*a2 + a2[8] + v66);
        if ((int)((unint64_t)v13 >> 3) >= 1)
        {
          uint64_t v80 = a1[2];
          uint64_t v81 = ((unint64_t)v13 >> 3) + 1;
          unint64_t v82 = (unint64_t)v13 >> 3;
          while (1)
          {
            uint64_t v83 = (v81 - 2);
            unint64_t v84 = v47[v83] + 1;
            v47[v83] = v84;
            if (v84 < *(void *)(v80 + v83 * 8)) {
              break;
            }
            v47[(v81 - 2)] = 0;
            LODWORD(v82) = v82 - 1;
            if ((unint64_t)--v81 <= 1) {
              goto LABEL_75;
            }
          }
          if ((int)v82 > 0) {
            continue;
          }
        }
LABEL_75:
        operator delete(v47);
        return;
      }
      uint64_t v51 = 0;
      unint64_t v52 = 0;
LABEL_60:
      unint64_t v58 = v48 - v52;
      uint64_t v59 = v52;
      unint64_t v60 = (uint64_t *)(v50 + v59 * 8);
      uint64_t v61 = &v47[v59];
      do
      {
        uint64_t v63 = *v61++;
        uint64_t v62 = v63;
        uint64_t v64 = *v60++;
        v51 += v64 * v62;
        --v58;
      }
      while (v58);
      goto LABEL_62;
    }
    unint64_t v26 = *(void *)v4;
    if (*(void *)v4)
    {
      unint64_t v27 = 0;
      uint64_t v28 = a2[8];
      uint64_t v29 = a1[8];
      do
      {
        if (*((void *)v4 + 1))
        {
          unint64_t v32 = 0;
          uint64_t v33 = v28;
          uint64_t v34 = v29;
          do
          {
            *(unsigned char *)(*a1 + v34) = *(unsigned char *)(*a2 + v33);
            uint64_t v30 = (void *)a1[5];
            v34 += v30[1];
            uint64_t v31 = (void *)a2[5];
            v33 += v31[1];
            ++v32;
            unint64_t v4 = (char *)a1[2];
          }
          while (v32 < *((void *)v4 + 1));
          unint64_t v26 = *(void *)v4;
        }
        else
        {
          uint64_t v30 = (void *)a1[5];
          uint64_t v31 = (void *)a2[5];
        }
        v29 += *v30;
        v28 += *v31;
        ++v27;
      }
      while (v27 < v26);
    }
  }
}

void sub_192547A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _ZZN5nitro7ndarrayIhE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clIS1_EEDaS5_EUlRhRKhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unint64_t v10 = __p;
      }
      else {
        unint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZN5nitro7ndarrayIhE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clIS1_EEDaS5_EUlRhRKhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_192547D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro7ndarrayIhE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clIS1_EEDaS5_EUlRhRKhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        unint64_t v4 = __p;
      }
      else {
        unint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  int64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192547EA8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192547EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192547EB4);
}

void _ZN5nitro7ndarrayIhE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRhRKiE_EEvRKNS0_IS5_EET0_(void *a1, void *a2)
{
  unint64_t v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[3];
  unint64_t v6 = (v5 - v4) >> 3;
  int64_t v7 = (void *)a2[2];
  if (v6 != (uint64_t)(a2[3] - (void)v7) >> 3) {
    goto LABEL_13;
  }
  if (v5 == v4) {
    return;
  }
  uint64_t v8 = v6 <= 1 ? 1 : (v5 - v4) >> 3;
  if (*(void *)v4 != *v7) {
    goto LABEL_13;
  }
  uint64_t v9 = 1;
  do
  {
    unint64_t v10 = v9;
    if (v8 == v9) {
      break;
    }
    uint64_t v11 = *(void *)&v4[8 * v9];
    uint64_t v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6) {
LABEL_13:
  }
    _ZZN5nitro7ndarrayIhE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRhRKiE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv();
  int64_t v13 = v5 - v4;
  if (v5 == v4 || !*a1) {
    return;
  }
  if ((unint64_t)(v13 - 8) < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (char *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *(void *)v15;
      v15 += 8;
      v14 *= v21;
    }
    while (v15 != v5);
    goto LABEL_21;
  }
  unint64_t v16 = ((unint64_t)(v13 - 8) >> 3) + 1;
  std::locale v15 = &v4[8 * (v16 & 0x3FFFFFFFFFFFFFFELL)];
  float v17 = v4 + 8;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  unint64_t v22 = v13 >> 3;
  if (v13 >> 3 == 3)
  {
    unint64_t v35 = *(void *)v4;
    if (*(void *)v4)
    {
      unint64_t v36 = 0;
      uint64_t v37 = a2[8];
      uint64_t v38 = a1[8];
      do
      {
        if (*((void *)v4 + 1))
        {
          unint64_t v39 = 0;
          uint64_t v40 = v37;
          uint64_t v41 = v38;
          do
          {
            if (*((void *)v4 + 2))
            {
              unint64_t v44 = 0;
              uint64_t v45 = v40;
              uint64_t v46 = v41;
              do
              {
                *(unsigned char *)(*a1 + v46) = *(_DWORD *)(*a2 + 4 * v45);
                uint64_t v42 = (void *)a1[5];
                v46 += v42[2];
                uint64_t v43 = (void *)a2[5];
                v45 += v43[2];
                ++v44;
                unint64_t v4 = (char *)a1[2];
              }
              while (v44 < *((void *)v4 + 2));
            }
            else
            {
              uint64_t v42 = (void *)a1[5];
              uint64_t v43 = (void *)a2[5];
            }
            v41 += v42[1];
            v40 += v43[1];
            ++v39;
          }
          while (v39 < *((void *)v4 + 1));
          unint64_t v35 = *(void *)v4;
        }
        else
        {
          uint64_t v42 = (void *)a1[5];
          uint64_t v43 = (void *)a2[5];
        }
        v38 += *v42;
        v37 += *v43;
        ++v36;
      }
      while (v36 < v35);
    }
  }
  else
  {
    if (v22 != 2)
    {
      if (v22 == 1)
      {
        if (*(void *)v4)
        {
          unint64_t v23 = 0;
          uint64_t v24 = a2[8];
          uint64_t v25 = a1[8];
          do
          {
            *(unsigned char *)(*a1 + v25) = *(_DWORD *)(*a2 + 4 * v24);
            v25 += *(void *)a1[5];
            v24 += *(void *)a2[5];
            ++v23;
          }
          while (v23 < *(void *)a1[2]);
        }
        return;
      }
      if (v13 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v47 = operator new(v13);
      bzero(v47, v13 & 0xFFFFFFFFFFFFFFF8);
      if (v22 <= 1) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v13 >> 3;
      }
      unint64_t v49 = v48 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        uint64_t v50 = a1[5];
        if (v48 < 2) {
          break;
        }
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        unint64_t v55 = (void *)(v50 + 8);
        unint64_t v56 = v48 & 0xFFFFFFFFFFFFFFFELL;
        char v57 = v47 + 1;
        do
        {
          v53 += *(v55 - 1) * *(v57 - 1);
          v54 += *v55 * *v57;
          v57 += 2;
          v55 += 2;
          v56 -= 2;
        }
        while (v56);
        uint64_t v51 = v54 + v53;
        unint64_t v52 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49) {
          goto LABEL_60;
        }
LABEL_62:
        uint64_t v65 = a2[5];
        if (v48 < 2)
        {
          uint64_t v66 = 0;
          unint64_t v67 = 0;
LABEL_67:
          unint64_t v73 = v48 - v67;
          uint64_t v74 = v67;
          size_t v75 = (uint64_t *)(v65 + v74 * 8);
          uint64_t v76 = &v47[v74];
          do
          {
            uint64_t v78 = *v76++;
            uint64_t v77 = v78;
            uint64_t v79 = *v75++;
            v66 += v79 * v77;
            --v73;
          }
          while (v73);
          goto LABEL_69;
        }
        uint64_t v68 = 0;
        uint64_t v69 = 0;
        unint64_t v70 = (void *)(v65 + 8);
        unint64_t v71 = v48 & 0xFFFFFFFFFFFFFFFELL;
        int64_t v72 = v47 + 1;
        do
        {
          v68 += *(v70 - 1) * *(v72 - 1);
          v69 += *v70 * *v72;
          v72 += 2;
          v70 += 2;
          v71 -= 2;
        }
        while (v71);
        uint64_t v66 = v69 + v68;
        unint64_t v67 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49) {
          goto LABEL_67;
        }
LABEL_69:
        *(unsigned char *)(*a1 + v51) = *(_DWORD *)(*a2 + 4 * (a2[8] + v66));
        if ((int)((unint64_t)v13 >> 3) >= 1)
        {
          uint64_t v80 = a1[2];
          uint64_t v81 = ((unint64_t)v13 >> 3) + 1;
          unint64_t v82 = (unint64_t)v13 >> 3;
          while (1)
          {
            uint64_t v83 = (v81 - 2);
            unint64_t v84 = v47[v83] + 1;
            v47[v83] = v84;
            if (v84 < *(void *)(v80 + v83 * 8)) {
              break;
            }
            v47[(v81 - 2)] = 0;
            LODWORD(v82) = v82 - 1;
            if ((unint64_t)--v81 <= 1) {
              goto LABEL_75;
            }
          }
          if ((int)v82 > 0) {
            continue;
          }
        }
LABEL_75:
        operator delete(v47);
        return;
      }
      uint64_t v51 = 0;
      unint64_t v52 = 0;
LABEL_60:
      unint64_t v58 = v48 - v52;
      uint64_t v59 = v52;
      unint64_t v60 = (uint64_t *)(v50 + v59 * 8);
      uint64_t v61 = &v47[v59];
      do
      {
        uint64_t v63 = *v61++;
        uint64_t v62 = v63;
        uint64_t v64 = *v60++;
        v51 += v64 * v62;
        --v58;
      }
      while (v58);
      goto LABEL_62;
    }
    unint64_t v26 = *(void *)v4;
    if (*(void *)v4)
    {
      unint64_t v27 = 0;
      uint64_t v28 = a2[8];
      uint64_t v29 = a1[8];
      do
      {
        if (*((void *)v4 + 1))
        {
          unint64_t v32 = 0;
          uint64_t v33 = v28;
          uint64_t v34 = v29;
          do
          {
            *(unsigned char *)(*a1 + v34) = *(_DWORD *)(*a2 + 4 * v33);
            uint64_t v30 = (void *)a1[5];
            v34 += v30[1];
            uint64_t v31 = (void *)a2[5];
            v33 += v31[1];
            ++v32;
            unint64_t v4 = (char *)a1[2];
          }
          while (v32 < *((void *)v4 + 1));
          unint64_t v26 = *(void *)v4;
        }
        else
        {
          uint64_t v30 = (void *)a1[5];
          uint64_t v31 = (void *)a2[5];
        }
        v29 += *v30;
        v28 += *v31;
        ++v27;
      }
      while (v27 < v26);
    }
  }
}

void sub_1925483B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _ZZN5nitro7ndarrayIhE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRhRKiE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unint64_t v10 = __p;
      }
      else {
        unint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZN5nitro7ndarrayIhE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRhRKiE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_192548658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro7ndarrayIhE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRhRKiE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        unint64_t v4 = __p;
      }
      else {
        unint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  int64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925487E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925487F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925487ECLL);
}

void _ZN5nitro7ndarrayIhE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRhRKDhE_EEvRKNS0_IS5_EET0_(void *a1, void *a2)
{
  unint64_t v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[3];
  unint64_t v6 = (v5 - v4) >> 3;
  int64_t v7 = (void *)a2[2];
  if (v6 != (uint64_t)(a2[3] - (void)v7) >> 3) {
    goto LABEL_13;
  }
  if (v5 == v4) {
    return;
  }
  uint64_t v8 = v6 <= 1 ? 1 : (v5 - v4) >> 3;
  if (*(void *)v4 != *v7) {
    goto LABEL_13;
  }
  uint64_t v9 = 1;
  do
  {
    unint64_t v10 = v9;
    if (v8 == v9) {
      break;
    }
    uint64_t v11 = *(void *)&v4[8 * v9];
    uint64_t v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6) {
LABEL_13:
  }
    _ZZN5nitro7ndarrayIhE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRhRKDhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv();
  int64_t v13 = v5 - v4;
  if (v5 == v4 || !*a1) {
    return;
  }
  if ((unint64_t)(v13 - 8) < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (char *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *(void *)v15;
      v15 += 8;
      v14 *= v21;
    }
    while (v15 != v5);
    goto LABEL_21;
  }
  unint64_t v16 = ((unint64_t)(v13 - 8) >> 3) + 1;
  std::locale v15 = &v4[8 * (v16 & 0x3FFFFFFFFFFFFFFELL)];
  float v17 = v4 + 8;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  unint64_t v22 = v13 >> 3;
  if (v13 >> 3 == 3)
  {
    unint64_t v35 = *(void *)v4;
    if (*(void *)v4)
    {
      unint64_t v36 = 0;
      uint64_t v37 = a2[8];
      uint64_t v38 = a1[8];
      do
      {
        if (*((void *)v4 + 1))
        {
          unint64_t v39 = 0;
          uint64_t v40 = v37;
          uint64_t v41 = v38;
          do
          {
            if (*((void *)v4 + 2))
            {
              unint64_t v44 = 0;
              uint64_t v45 = v40;
              uint64_t v46 = v41;
              do
              {
                *(unsigned char *)(*a1 + v46) = (int)*(short float *)(*a2 + 2 * v45);
                uint64_t v42 = (void *)a1[5];
                v46 += v42[2];
                uint64_t v43 = (void *)a2[5];
                v45 += v43[2];
                ++v44;
                unint64_t v4 = (char *)a1[2];
              }
              while (v44 < *((void *)v4 + 2));
            }
            else
            {
              uint64_t v42 = (void *)a1[5];
              uint64_t v43 = (void *)a2[5];
            }
            v41 += v42[1];
            v40 += v43[1];
            ++v39;
          }
          while (v39 < *((void *)v4 + 1));
          unint64_t v35 = *(void *)v4;
        }
        else
        {
          uint64_t v42 = (void *)a1[5];
          uint64_t v43 = (void *)a2[5];
        }
        v38 += *v42;
        v37 += *v43;
        ++v36;
      }
      while (v36 < v35);
    }
  }
  else
  {
    if (v22 != 2)
    {
      if (v22 == 1)
      {
        if (*(void *)v4)
        {
          unint64_t v23 = 0;
          uint64_t v24 = a2[8];
          uint64_t v25 = a1[8];
          do
          {
            *(unsigned char *)(*a1 + v25) = (int)*(short float *)(*a2 + 2 * v24);
            v25 += *(void *)a1[5];
            v24 += *(void *)a2[5];
            ++v23;
          }
          while (v23 < *(void *)a1[2]);
        }
        return;
      }
      if (v13 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v47 = operator new(v13);
      bzero(v47, v13 & 0xFFFFFFFFFFFFFFF8);
      if (v22 <= 1) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v13 >> 3;
      }
      unint64_t v49 = v48 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        uint64_t v50 = a1[5];
        if (v48 < 2) {
          break;
        }
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        unint64_t v55 = (void *)(v50 + 8);
        unint64_t v56 = v48 & 0xFFFFFFFFFFFFFFFELL;
        char v57 = v47 + 1;
        do
        {
          v53 += *(v55 - 1) * *(v57 - 1);
          v54 += *v55 * *v57;
          v57 += 2;
          v55 += 2;
          v56 -= 2;
        }
        while (v56);
        uint64_t v51 = v54 + v53;
        unint64_t v52 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49) {
          goto LABEL_60;
        }
LABEL_62:
        uint64_t v65 = a2[5];
        if (v48 < 2)
        {
          uint64_t v66 = 0;
          unint64_t v67 = 0;
LABEL_67:
          unint64_t v73 = v48 - v67;
          uint64_t v74 = v67;
          size_t v75 = (uint64_t *)(v65 + v74 * 8);
          uint64_t v76 = &v47[v74];
          do
          {
            uint64_t v78 = *v76++;
            uint64_t v77 = v78;
            uint64_t v79 = *v75++;
            v66 += v79 * v77;
            --v73;
          }
          while (v73);
          goto LABEL_69;
        }
        uint64_t v68 = 0;
        uint64_t v69 = 0;
        unint64_t v70 = (void *)(v65 + 8);
        unint64_t v71 = v48 & 0xFFFFFFFFFFFFFFFELL;
        int64_t v72 = v47 + 1;
        do
        {
          v68 += *(v70 - 1) * *(v72 - 1);
          v69 += *v70 * *v72;
          v72 += 2;
          v70 += 2;
          v71 -= 2;
        }
        while (v71);
        uint64_t v66 = v69 + v68;
        unint64_t v67 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49) {
          goto LABEL_67;
        }
LABEL_69:
        *(unsigned char *)(*a1 + v51) = (int)*(short float *)(*a2 + 2 * (a2[8] + v66));
        if ((int)((unint64_t)v13 >> 3) >= 1)
        {
          uint64_t v80 = a1[2];
          uint64_t v81 = ((unint64_t)v13 >> 3) + 1;
          unint64_t v82 = (unint64_t)v13 >> 3;
          while (1)
          {
            uint64_t v83 = (v81 - 2);
            unint64_t v84 = v47[v83] + 1;
            v47[v83] = v84;
            if (v84 < *(void *)(v80 + v83 * 8)) {
              break;
            }
            v47[(v81 - 2)] = 0;
            LODWORD(v82) = v82 - 1;
            if ((unint64_t)--v81 <= 1) {
              goto LABEL_75;
            }
          }
          if ((int)v82 > 0) {
            continue;
          }
        }
LABEL_75:
        operator delete(v47);
        return;
      }
      uint64_t v51 = 0;
      unint64_t v52 = 0;
LABEL_60:
      unint64_t v58 = v48 - v52;
      uint64_t v59 = v52;
      unint64_t v60 = (uint64_t *)(v50 + v59 * 8);
      uint64_t v61 = &v47[v59];
      do
      {
        uint64_t v63 = *v61++;
        uint64_t v62 = v63;
        uint64_t v64 = *v60++;
        v51 += v64 * v62;
        --v58;
      }
      while (v58);
      goto LABEL_62;
    }
    unint64_t v26 = *(void *)v4;
    if (*(void *)v4)
    {
      unint64_t v27 = 0;
      uint64_t v28 = a2[8];
      uint64_t v29 = a1[8];
      do
      {
        if (*((void *)v4 + 1))
        {
          unint64_t v32 = 0;
          uint64_t v33 = v28;
          uint64_t v34 = v29;
          do
          {
            *(unsigned char *)(*a1 + v34) = (int)*(short float *)(*a2 + 2 * v33);
            uint64_t v30 = (void *)a1[5];
            v34 += v30[1];
            uint64_t v31 = (void *)a2[5];
            v33 += v31[1];
            ++v32;
            unint64_t v4 = (char *)a1[2];
          }
          while (v32 < *((void *)v4 + 1));
          unint64_t v26 = *(void *)v4;
        }
        else
        {
          uint64_t v30 = (void *)a1[5];
          uint64_t v31 = (void *)a2[5];
        }
        v29 += *v30;
        v28 += *v31;
        ++v27;
      }
      while (v27 < v26);
    }
  }
}

void sub_192548CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _ZZN5nitro7ndarrayIhE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRhRKDhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unint64_t v10 = __p;
      }
      else {
        unint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZN5nitro7ndarrayIhE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRhRKDhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_192548FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro7ndarrayIhE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRhRKDhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        unint64_t v4 = __p;
      }
      else {
        unint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  int64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192549128(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19254913C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192549134);
}

void _ZN5nitro7ndarrayIhE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRhRKfE_EEvRKNS0_IS5_EET0_(void *a1, void *a2)
{
  unint64_t v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[3];
  unint64_t v6 = (v5 - v4) >> 3;
  int64_t v7 = (void *)a2[2];
  if (v6 != (uint64_t)(a2[3] - (void)v7) >> 3) {
    goto LABEL_13;
  }
  if (v5 == v4) {
    return;
  }
  uint64_t v8 = v6 <= 1 ? 1 : (v5 - v4) >> 3;
  if (*(void *)v4 != *v7) {
    goto LABEL_13;
  }
  uint64_t v9 = 1;
  do
  {
    unint64_t v10 = v9;
    if (v8 == v9) {
      break;
    }
    uint64_t v11 = *(void *)&v4[8 * v9];
    uint64_t v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6) {
LABEL_13:
  }
    _ZZN5nitro7ndarrayIhE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRhRKfE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv();
  int64_t v13 = v5 - v4;
  if (v5 == v4 || !*a1) {
    return;
  }
  if ((unint64_t)(v13 - 8) < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (char *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *(void *)v15;
      v15 += 8;
      v14 *= v21;
    }
    while (v15 != v5);
    goto LABEL_21;
  }
  unint64_t v16 = ((unint64_t)(v13 - 8) >> 3) + 1;
  std::locale v15 = &v4[8 * (v16 & 0x3FFFFFFFFFFFFFFELL)];
  float v17 = v4 + 8;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  unint64_t v22 = v13 >> 3;
  if (v13 >> 3 == 3)
  {
    unint64_t v35 = *(void *)v4;
    if (*(void *)v4)
    {
      unint64_t v36 = 0;
      uint64_t v37 = a2[8];
      uint64_t v38 = a1[8];
      do
      {
        if (*((void *)v4 + 1))
        {
          unint64_t v39 = 0;
          uint64_t v40 = v37;
          uint64_t v41 = v38;
          do
          {
            if (*((void *)v4 + 2))
            {
              unint64_t v44 = 0;
              uint64_t v45 = v40;
              uint64_t v46 = v41;
              do
              {
                *(unsigned char *)(*a1 + v46) = (int)*(float *)(*a2 + 4 * v45);
                uint64_t v42 = (void *)a1[5];
                v46 += v42[2];
                uint64_t v43 = (void *)a2[5];
                v45 += v43[2];
                ++v44;
                unint64_t v4 = (char *)a1[2];
              }
              while (v44 < *((void *)v4 + 2));
            }
            else
            {
              uint64_t v42 = (void *)a1[5];
              uint64_t v43 = (void *)a2[5];
            }
            v41 += v42[1];
            v40 += v43[1];
            ++v39;
          }
          while (v39 < *((void *)v4 + 1));
          unint64_t v35 = *(void *)v4;
        }
        else
        {
          uint64_t v42 = (void *)a1[5];
          uint64_t v43 = (void *)a2[5];
        }
        v38 += *v42;
        v37 += *v43;
        ++v36;
      }
      while (v36 < v35);
    }
  }
  else
  {
    if (v22 != 2)
    {
      if (v22 == 1)
      {
        if (*(void *)v4)
        {
          unint64_t v23 = 0;
          uint64_t v24 = a2[8];
          uint64_t v25 = a1[8];
          do
          {
            *(unsigned char *)(*a1 + v25) = (int)*(float *)(*a2 + 4 * v24);
            v25 += *(void *)a1[5];
            v24 += *(void *)a2[5];
            ++v23;
          }
          while (v23 < *(void *)a1[2]);
        }
        return;
      }
      if (v13 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v47 = operator new(v13);
      bzero(v47, v13 & 0xFFFFFFFFFFFFFFF8);
      if (v22 <= 1) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v13 >> 3;
      }
      unint64_t v49 = v48 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        uint64_t v50 = a1[5];
        if (v48 < 2) {
          break;
        }
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        unint64_t v55 = (void *)(v50 + 8);
        unint64_t v56 = v48 & 0xFFFFFFFFFFFFFFFELL;
        char v57 = v47 + 1;
        do
        {
          v53 += *(v55 - 1) * *(v57 - 1);
          v54 += *v55 * *v57;
          v57 += 2;
          v55 += 2;
          v56 -= 2;
        }
        while (v56);
        uint64_t v51 = v54 + v53;
        unint64_t v52 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49) {
          goto LABEL_60;
        }
LABEL_62:
        uint64_t v65 = a2[5];
        if (v48 < 2)
        {
          uint64_t v66 = 0;
          unint64_t v67 = 0;
LABEL_67:
          unint64_t v73 = v48 - v67;
          uint64_t v74 = v67;
          size_t v75 = (uint64_t *)(v65 + v74 * 8);
          uint64_t v76 = &v47[v74];
          do
          {
            uint64_t v78 = *v76++;
            uint64_t v77 = v78;
            uint64_t v79 = *v75++;
            v66 += v79 * v77;
            --v73;
          }
          while (v73);
          goto LABEL_69;
        }
        uint64_t v68 = 0;
        uint64_t v69 = 0;
        unint64_t v70 = (void *)(v65 + 8);
        unint64_t v71 = v48 & 0xFFFFFFFFFFFFFFFELL;
        int64_t v72 = v47 + 1;
        do
        {
          v68 += *(v70 - 1) * *(v72 - 1);
          v69 += *v70 * *v72;
          v72 += 2;
          v70 += 2;
          v71 -= 2;
        }
        while (v71);
        uint64_t v66 = v69 + v68;
        unint64_t v67 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49) {
          goto LABEL_67;
        }
LABEL_69:
        *(unsigned char *)(*a1 + v51) = (int)*(float *)(*a2 + 4 * (a2[8] + v66));
        if ((int)((unint64_t)v13 >> 3) >= 1)
        {
          uint64_t v80 = a1[2];
          uint64_t v81 = ((unint64_t)v13 >> 3) + 1;
          unint64_t v82 = (unint64_t)v13 >> 3;
          while (1)
          {
            uint64_t v83 = (v81 - 2);
            unint64_t v84 = v47[v83] + 1;
            v47[v83] = v84;
            if (v84 < *(void *)(v80 + v83 * 8)) {
              break;
            }
            v47[(v81 - 2)] = 0;
            LODWORD(v82) = v82 - 1;
            if ((unint64_t)--v81 <= 1) {
              goto LABEL_75;
            }
          }
          if ((int)v82 > 0) {
            continue;
          }
        }
LABEL_75:
        operator delete(v47);
        return;
      }
      uint64_t v51 = 0;
      unint64_t v52 = 0;
LABEL_60:
      unint64_t v58 = v48 - v52;
      uint64_t v59 = v52;
      unint64_t v60 = (uint64_t *)(v50 + v59 * 8);
      uint64_t v61 = &v47[v59];
      do
      {
        uint64_t v63 = *v61++;
        uint64_t v62 = v63;
        uint64_t v64 = *v60++;
        v51 += v64 * v62;
        --v58;
      }
      while (v58);
      goto LABEL_62;
    }
    unint64_t v26 = *(void *)v4;
    if (*(void *)v4)
    {
      unint64_t v27 = 0;
      uint64_t v28 = a2[8];
      uint64_t v29 = a1[8];
      do
      {
        if (*((void *)v4 + 1))
        {
          unint64_t v32 = 0;
          uint64_t v33 = v28;
          uint64_t v34 = v29;
          do
          {
            *(unsigned char *)(*a1 + v34) = (int)*(float *)(*a2 + 4 * v33);
            uint64_t v30 = (void *)a1[5];
            v34 += v30[1];
            uint64_t v31 = (void *)a2[5];
            v33 += v31[1];
            ++v32;
            unint64_t v4 = (char *)a1[2];
          }
          while (v32 < *((void *)v4 + 1));
          unint64_t v26 = *(void *)v4;
        }
        else
        {
          uint64_t v30 = (void *)a1[5];
          uint64_t v31 = (void *)a2[5];
        }
        v29 += *v30;
        v28 += *v31;
        ++v27;
      }
      while (v27 < v26);
    }
  }
}

void sub_192549640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _ZZN5nitro7ndarrayIhE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRhRKfE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unint64_t v10 = __p;
      }
      else {
        unint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZN5nitro7ndarrayIhE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRhRKfE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1925498E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro7ndarrayIhE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIhEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRhRKfE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        unint64_t v4 = __p;
      }
      else {
        unint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  int64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192549A70(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192549A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192549A7CLL);
}

void _ZZZNK5nitro17ndarray_container5visitIZNKS0_4castIhEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        unint64_t v4 = __p;
      }
      else {
        unint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  int64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192549BE8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192549BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192549BF4);
}

void nitro::ndarray<unsigned char>::copy(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = a1[3] - v1;
  if (v2)
  {
    unint64_t v3 = v2 >> 3;
    uint64_t v4 = a1[5];
    if (v3 <= 1) {
      unint64_t v3 = 1;
    }
    if (v3 < 2)
    {
      unint64_t v5 = 0;
      uint64_t v6 = 0;
LABEL_10:
      unint64_t v12 = v3 - v5;
      uint64_t v13 = 8 * v5;
      uint64_t v14 = (uint64_t *)(v4 + v13);
      std::locale v15 = (uint64_t *)(v1 + v13);
      do
      {
        uint64_t v16 = *v15++;
        uint64_t v17 = v16 - 1;
        uint64_t v18 = *v14++;
        v6 += v18 * v17;
        --v12;
      }
      while (v12);
      goto LABEL_12;
    }
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    unint64_t v5 = v3 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v9 = (void *)(v1 + 8);
    unsigned __int8 v10 = (void *)(v4 + 8);
    unint64_t v11 = v3 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v7 += *(v10 - 1) * (*(v9 - 1) - 1);
      v8 += *v10 * (*v9 - 1);
      v9 += 2;
      v10 += 2;
      v11 -= 2;
    }
    while (v11);
    uint64_t v6 = v8 + v7;
    if (v3 != v5) {
      goto LABEL_10;
    }
  }
LABEL_12:
  operator new[]();
}

void sub_192549E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void nitro::ndarray<unsigned char>::concat(std::vector<nitro::ndarray<unsigned char>> const&,unsigned long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"arr.shape().size()", 18);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"outshape.size()", 15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  unsigned __int8 v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  unint64_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 182, 1);
    std::stringbuf::str();
    std::locale v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      uint64_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::ndarray<unsigned char>::concat(std::vector<nitro::ndarray<unsigned char>> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19254A184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::concat(std::vector<nitro::ndarray<unsigned char>> const&,unsigned long)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"arr.shape()[i]", 14);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"outshape[i]", 11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  unsigned __int8 v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  unint64_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 184, 1);
    std::stringbuf::str();
    std::locale v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      uint64_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::ndarray<unsigned char>::concat(std::vector<nitro::ndarray<unsigned char>> const&,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19254A4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::concat(std::vector<nitro::ndarray<unsigned char>> const&,unsigned long)::{lambda(void)#3}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"arrs[arrid].num_elem()", 22);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"contiguous_copy_size[arrid] * ncopies", 37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  unsigned __int8 v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  unint64_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 236, 1);
    std::stringbuf::str();
    std::locale v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      uint64_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::ndarray<unsigned char>::concat(std::vector<nitro::ndarray<unsigned char>> const&,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19254A844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::slice(void *a1@<X0>, long long **a2@<X1>, void *a3@<X8>, __n128 a4@<Q0>)
{
  long long v13 = 0uLL;
  uint64_t v14 = 0;
  nitro::ndarray_impl::compute_slice(a2, a1 + 2, a1 + 5, a1[8], &v6, a4);
  long long v13 = v6;
  uint64_t v14 = v7;
  *(_OWORD *)long long __p = v8;
  uint64_t v12 = v9;
  nitro::ndarray<unsigned char>::ndarray(a3, a1, (uint64_t)&v13, (uint64_t)__p, v10);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((void)v13)
  {
    *((void *)&v13 + 1) = v13;
    operator delete((void *)v13);
  }
}

void sub_19254A928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    unsigned __int8 v20 = *(void **)(v18 - 48);
    if (!v20) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unsigned __int8 v20 = *(void **)(v18 - 48);
    if (!v20) {
      goto LABEL_3;
    }
  }
  *(void *)(v18 - 40) = v20;
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

void *nitro::ndarray<unsigned char>::assign<unsigned char>(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - v4) >> 3;
  long long v6 = (void *)a2[2];
  if (v5 != (uint64_t)(a2[3] - (void)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == v4) {
    return a1;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - v4) >> 3;
  if (*(void *)v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    uint64_t v10 = *(void *)&v4[8 * v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<unsigned char>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(void)#1}::operator()();
  if (v3 != v4 && *a1)
  {
    unint64_t v12 = v3 - v4 - 8;
    if (v12 >= 8)
    {
      uint64_t v15 = (v12 >> 3) + 1;
      uint64_t v14 = &v4[8 * (v15 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v16 = v4 + 8;
      uint64_t v17 = 1;
      uint64_t v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v19 = 1;
      do
      {
        v17 *= *(v16 - 1);
        v19 *= *v16;
        v16 += 2;
        v18 -= 2;
      }
      while (v18);
      uint64_t v13 = v19 * v17;
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_21:
        if (v13) {
          nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(a1, a2);
        }
        return a1;
      }
    }
    else
    {
      uint64_t v13 = 1;
      uint64_t v14 = (char *)a1[2];
    }
    do
    {
      uint64_t v20 = *(void *)v14;
      v14 += 8;
      v13 *= v20;
    }
    while (v14 != v3);
    goto LABEL_21;
  }
  return a1;
}

void nitro::ndarray<unsigned char>::ndarray(std::vector<unsigned char> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"last_index() + m_start <= elements.size()", 41);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 131, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<unsigned char>::ndarray(std::vector<unsigned char> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19254AD40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::ndarray(std::vector<unsigned char> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 131, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    long long v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19254AEC8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19254AEDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19254AED4);
}

void nitro::ndarray<unsigned char>::concat(std::vector<nitro::ndarray<unsigned char>> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 182, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    long long v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19254B040(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19254B054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19254B04CLL);
}

void nitro::ndarray<unsigned char>::concat(std::vector<nitro::ndarray<unsigned char>> const&,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 184, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    long long v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19254B1B8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19254B1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19254B1C4);
}

void nitro::ndarray<unsigned char>::concat(std::vector<nitro::ndarray<unsigned char>> const&,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 236, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    long long v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19254B330(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19254B344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19254B33CLL);
}

void nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long,unsigned long)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", 54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"end", 3);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">", 1);
  long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"start", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">", 1);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  unsigned __int8 v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  unint64_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unsigned __int8 v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", "operator()", 48, 1);
    std::stringbuf::str();
    std::locale v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      uint64_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19254B680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", "operator()", 48, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    long long v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19254B808(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19254B81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19254B814);
}

void nitro::ndarray<unsigned char>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19254BAC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[3];
  unint64_t v6 = (v5 - v4) >> 3;
  uint64_t v7 = (void *)a2[2];
  if (v6 != (uint64_t)(a2[3] - (void)v7) >> 3) {
    goto LABEL_13;
  }
  if (v5 == v4) {
    return;
  }
  uint64_t v8 = v6 <= 1 ? 1 : (v5 - v4) >> 3;
  if (*(void *)v4 != *v7) {
    goto LABEL_13;
  }
  uint64_t v9 = 1;
  do
  {
    unint64_t v10 = v9;
    if (v8 == v9) {
      break;
    }
    uint64_t v11 = *(void *)&v4[8 * v9];
    uint64_t v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6) {
LABEL_13:
  }
    nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator()();
  int64_t v13 = v5 - v4;
  if (v5 == v4 || !*a1) {
    return;
  }
  if ((unint64_t)(v13 - 8) < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (char *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *(void *)v15;
      v15 += 8;
      v14 *= v21;
    }
    while (v15 != v5);
    goto LABEL_21;
  }
  unint64_t v16 = ((unint64_t)(v13 - 8) >> 3) + 1;
  std::locale v15 = &v4[8 * (v16 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v17 = v4 + 8;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  unint64_t v22 = v13 >> 3;
  if (v13 >> 3 == 3)
  {
    unint64_t v35 = *(void *)v4;
    if (*(void *)v4)
    {
      unint64_t v36 = 0;
      uint64_t v37 = a2[8];
      uint64_t v38 = a1[8];
      do
      {
        if (*((void *)v4 + 1))
        {
          unint64_t v39 = 0;
          uint64_t v40 = v37;
          uint64_t v41 = v38;
          do
          {
            if (*((void *)v4 + 2))
            {
              unint64_t v44 = 0;
              uint64_t v45 = v40;
              uint64_t v46 = v41;
              do
              {
                *(unsigned char *)(*a1 + v46) = *(unsigned char *)(*a2 + v45);
                uint64_t v42 = (void *)a1[5];
                v46 += v42[2];
                uint64_t v43 = (void *)a2[5];
                v45 += v43[2];
                ++v44;
                uint64_t v4 = (char *)a1[2];
              }
              while (v44 < *((void *)v4 + 2));
            }
            else
            {
              uint64_t v42 = (void *)a1[5];
              uint64_t v43 = (void *)a2[5];
            }
            v41 += v42[1];
            v40 += v43[1];
            ++v39;
          }
          while (v39 < *((void *)v4 + 1));
          unint64_t v35 = *(void *)v4;
        }
        else
        {
          uint64_t v42 = (void *)a1[5];
          uint64_t v43 = (void *)a2[5];
        }
        v38 += *v42;
        v37 += *v43;
        ++v36;
      }
      while (v36 < v35);
    }
  }
  else
  {
    if (v22 != 2)
    {
      if (v22 == 1)
      {
        if (*(void *)v4)
        {
          unint64_t v23 = 0;
          uint64_t v24 = a2[8];
          uint64_t v25 = a1[8];
          do
          {
            *(unsigned char *)(*a1 + v25) = *(unsigned char *)(*a2 + v24);
            v25 += *(void *)a1[5];
            v24 += *(void *)a2[5];
            ++v23;
          }
          while (v23 < *(void *)a1[2]);
        }
        return;
      }
      if (v13 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v47 = operator new(v13);
      bzero(v47, v13 & 0xFFFFFFFFFFFFFFF8);
      if (v22 <= 1) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v13 >> 3;
      }
      unint64_t v49 = v48 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        uint64_t v50 = a1[5];
        if (v48 < 2) {
          break;
        }
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        unint64_t v55 = (void *)(v50 + 8);
        unint64_t v56 = v48 & 0xFFFFFFFFFFFFFFFELL;
        char v57 = v47 + 1;
        do
        {
          v53 += *(v55 - 1) * *(v57 - 1);
          v54 += *v55 * *v57;
          v57 += 2;
          v55 += 2;
          v56 -= 2;
        }
        while (v56);
        uint64_t v51 = v54 + v53;
        unint64_t v52 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49) {
          goto LABEL_60;
        }
LABEL_62:
        uint64_t v65 = a2[5];
        if (v48 < 2)
        {
          uint64_t v66 = 0;
          unint64_t v67 = 0;
LABEL_67:
          unint64_t v73 = v48 - v67;
          uint64_t v74 = v67;
          size_t v75 = (uint64_t *)(v65 + v74 * 8);
          uint64_t v76 = &v47[v74];
          do
          {
            uint64_t v78 = *v76++;
            uint64_t v77 = v78;
            uint64_t v79 = *v75++;
            v66 += v79 * v77;
            --v73;
          }
          while (v73);
          goto LABEL_69;
        }
        uint64_t v68 = 0;
        uint64_t v69 = 0;
        unint64_t v70 = (void *)(v65 + 8);
        unint64_t v71 = v48 & 0xFFFFFFFFFFFFFFFELL;
        int64_t v72 = v47 + 1;
        do
        {
          v68 += *(v70 - 1) * *(v72 - 1);
          v69 += *v70 * *v72;
          v72 += 2;
          v70 += 2;
          v71 -= 2;
        }
        while (v71);
        uint64_t v66 = v69 + v68;
        unint64_t v67 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49) {
          goto LABEL_67;
        }
LABEL_69:
        *(unsigned char *)(*a1 + v51) = *(unsigned char *)(*a2 + a2[8] + v66);
        if ((int)((unint64_t)v13 >> 3) >= 1)
        {
          uint64_t v80 = a1[2];
          uint64_t v81 = ((unint64_t)v13 >> 3) + 1;
          unint64_t v82 = (unint64_t)v13 >> 3;
          while (1)
          {
            uint64_t v83 = (v81 - 2);
            unint64_t v84 = v47[v83] + 1;
            v47[v83] = v84;
            if (v84 < *(void *)(v80 + v83 * 8)) {
              break;
            }
            v47[(v81 - 2)] = 0;
            LODWORD(v82) = v82 - 1;
            if ((unint64_t)--v81 <= 1) {
              goto LABEL_75;
            }
          }
          if ((int)v82 > 0) {
            continue;
          }
        }
LABEL_75:
        operator delete(v47);
        return;
      }
      uint64_t v51 = 0;
      unint64_t v52 = 0;
LABEL_60:
      unint64_t v58 = v48 - v52;
      uint64_t v59 = v52;
      unint64_t v60 = (uint64_t *)(v50 + v59 * 8);
      uint64_t v61 = &v47[v59];
      do
      {
        uint64_t v63 = *v61++;
        uint64_t v62 = v63;
        uint64_t v64 = *v60++;
        v51 += v64 * v62;
        --v58;
      }
      while (v58);
      goto LABEL_62;
    }
    unint64_t v26 = *(void *)v4;
    if (*(void *)v4)
    {
      unint64_t v27 = 0;
      uint64_t v28 = a2[8];
      uint64_t v29 = a1[8];
      do
      {
        if (*((void *)v4 + 1))
        {
          unint64_t v32 = 0;
          uint64_t v33 = v28;
          uint64_t v34 = v29;
          do
          {
            *(unsigned char *)(*a1 + v34) = *(unsigned char *)(*a2 + v33);
            uint64_t v30 = (void *)a1[5];
            v34 += v30[1];
            uint64_t v31 = (void *)a2[5];
            v33 += v31[1];
            ++v32;
            uint64_t v4 = (char *)a1[2];
          }
          while (v32 < *((void *)v4 + 1));
          unint64_t v26 = *(void *)v4;
        }
        else
        {
          uint64_t v30 = (void *)a1[5];
          uint64_t v31 = (void *)a2[5];
        }
        v29 += *v30;
        v28 += *v31;
        ++v27;
      }
      while (v27 < v26);
    }
  }
}

void sub_19254BFDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19254C140(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19254C154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19254C14CLL);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19254C3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19254C584(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19254C598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19254C590);
}

void nitro::ndarray<int>::concat(uint64_t **a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0x8E38E38E38E38E39 * (v4 - *a1);
  if (v5 == 1)
  {
    unint64_t v6 = *a1;
    nitro::ndarray<int>::copy(v6);
  }
  if (!v5)
  {
    p_p = 0;
    uint64_t v168 = 0;
    uint64_t v169 = 0;
    uint64_t v176 = 0;
    unint64_t v177 = 0;
    uint32x4_t v178 = 0;
    long long __p = 0;
    unint64_t v174 = 0;
    v175 = 0;
    nitro::ndarray<int>::ndarray((uint64_t)a3);
  }
  uint64_t v8 = a1;
  unint64_t v177 = 0;
  uint32x4_t v178 = 0;
  uint64_t v176 = 0;
  unsigned __int8 v10 = (unsigned char *)v3[2];
  uint64_t v9 = (unsigned char *)v3[3];
  int64_t v11 = v9 - v10;
  if (v9 == v10)
  {
    unsigned __int8 v13 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    if (v11 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = (char *)operator new(v9 - v10);
    unsigned __int8 v13 = &v12[8 * (v11 >> 3)];
    uint64_t v176 = v12;
    uint32x4_t v178 = v13;
    memcpy(v12, v10, v11);
    unint64_t v177 = v13;
  }
  *(void *)&v12[8 * a2] = 0;
  if (v3 != v4)
  {
    uint64_t v14 = v13;
    do
    {
      long long __p = (void *)((v3[3] - v3[2]) >> 3);
      v180[0] = (v14 - v12) >> 3;
      if (__p != (void *)v180[0])
      {
        p_p = &__p;
        uint64_t v168 = (std::__shared_weak_count *)v180;
        nitro::ndarray<int>::concat(std::vector<nitro::ndarray<int>> const&,unsigned long)::{lambda(void)#1}::operator()();
      }
      if (v14 == v12)
      {
        uint64_t v14 = v12;
      }
      else
      {
        unint64_t v15 = 0;
        do
        {
          if (a2 == v15)
          {
            *(void *)&v12[8 * a2] += *(void *)(v3[2] + 8 * a2);
          }
          else
          {
            long long __p = 0;
            long long __p = *(void **)(v3[2] + 8 * v15);
            v180[0] = 0;
            v180[0] = *(void *)&v12[8 * v15];
            if (__p != (void *)v180[0])
            {
              p_p = &__p;
              uint64_t v168 = (std::__shared_weak_count *)v180;
              nitro::ndarray<int>::concat(std::vector<nitro::ndarray<int>> const&,unsigned long)::{lambda(void)#2}::operator()();
            }
          }
          ++v15;
          uint64_t v14 = v13;
        }
        while (v15 < (v13 - v12) >> 3);
      }
      v3 += 9;
    }
    while (v3 != v4);
  }
  nitro::ndarray<int>::init_from_shape((uint64_t **)&v176, a3);
  uint64_t v17 = *v8;
  uint64_t v18 = v8[1];
  if (*v8 == v18)
  {
LABEL_60:
    char v57 = 1;
    goto LABEL_62;
  }
  uint64_t v19 = *v8;
  while (1)
  {
    uint64_t v20 = (char *)v19[2];
    uint64_t v21 = (char *)v19[3];
    uint64_t v22 = v21 - v20;
    if (v21 == v20)
    {
      uint64_t v25 = (unint64_t *)v19[5];
      goto LABEL_47;
    }
    uint64_t v23 = *v19;
    if (*v19)
    {
      if ((unint64_t)(v22 - 8) < 8)
      {
        uint64_t v23 = 1;
        uint64_t v24 = (char *)v19[2];
        do
        {
LABEL_36:
          uint64_t v31 = *(void *)v24;
          v24 += 8;
          v23 *= v31;
        }
        while (v24 != v21);
        goto LABEL_37;
      }
      unint64_t v26 = ((unint64_t)(v22 - 8) >> 3) + 1;
      uint64_t v24 = &v20[8 * (v26 & 0x3FFFFFFFFFFFFFFELL)];
      unint64_t v27 = v20 + 8;
      uint64_t v28 = v26 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v29 = 1;
      uint64_t v30 = 1;
      do
      {
        v29 *= *(v27 - 1);
        v30 *= *v27;
        v27 += 2;
        v28 -= 2;
      }
      while (v28);
      uint64_t v23 = v30 * v29;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFELL)) {
        goto LABEL_36;
      }
    }
LABEL_37:
    unint64_t v32 = v22 >> 3;
    uint64_t v25 = (unint64_t *)v19[5];
    if (v32 <= 1) {
      unint64_t v32 = 1;
    }
    if (v32 < 2)
    {
      unint64_t v33 = 0;
      uint64_t v34 = 0;
LABEL_44:
      unint64_t v40 = v32 - v33;
      uint64_t v41 = 8 * v33;
      uint64_t v42 = (uint64_t *)&v25[v33];
      uint64_t v43 = (uint64_t *)&v20[v41];
      do
      {
        uint64_t v44 = *v43++;
        uint64_t v45 = v44 - 1;
        uint64_t v46 = *v42++;
        v34 += v46 * v45;
        --v40;
      }
      while (v40);
      goto LABEL_46;
    }
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    unint64_t v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v37 = v20 + 8;
    uint64_t v38 = v25 + 1;
    unint64_t v39 = v32 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v35 += *(v38 - 1) * (*(v37 - 1) - 1);
      v36 += *v38 * (*v37 - 1);
      v37 += 2;
      v38 += 2;
      v39 -= 2;
    }
    while (v39);
    uint64_t v34 = v36 + v35;
    if (v32 != v33) {
      goto LABEL_44;
    }
LABEL_46:
    if (v23 != v34 + 1) {
      break;
    }
LABEL_47:
    uint64_t v47 = v19[6] - (void)v25;
    if (v47)
    {
      if (!*v25) {
        break;
      }
      if ((unint64_t)v47 >= 0x10)
      {
        unint64_t v48 = v47 >> 3;
        uint64_t v49 = v48 <= 2 ? 2 : v48;
        unint64_t v50 = v25[1];
        if (!v50 || *v25 < v50) {
          break;
        }
        uint64_t v51 = 0;
        uint64_t v52 = v49 - 2;
        do
        {
          uint64_t v53 = v51;
          if (v52 == v51) {
            break;
          }
          uint64_t v54 = &v25[v51];
          unint64_t v55 = v54[2];
          if (!v55) {
            break;
          }
          unint64_t v56 = v54[1];
          uint64_t v51 = v53 + 1;
        }
        while (v56 >= v55);
        if (v53 + 2 < v48) {
          break;
        }
      }
    }
    v19 += 9;
    if (v19 == v18) {
      goto LABEL_60;
    }
  }
  char v57 = 0;
LABEL_62:
  uint64_t v58 = v177 - (unsigned char *)v176;
  if (v177 == v176)
  {
    if (v57)
    {
      uint64_t v61 = 0;
      goto LABEL_78;
    }
    int64_t v72 = 0;
    long long __p = 0;
    unint64_t v174 = 0;
    v175 = 0;
    if (v17 == v18) {
      goto LABEL_116;
    }
LABEL_104:
    unint64_t v86 = 0;
    do
    {
      uint64_t v87 = *(void *)(v17[2] + 8 * a2);
      unint64_t v88 = v87 + v86;
      unint64_t v179 = v86;
      v180[0] = v87 + v86;
      if (v87 + v86 <= v86)
      {
        p_p = v180;
        uint64_t v168 = (std::__shared_weak_count *)&v179;
        nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long,unsigned long)::{lambda(void)#2}::operator()();
      }
      uint64_t v89 = (unint64_t *)((char *)__p + 24 * a2);
      unint64_t *v89 = v86;
      v89[1] = v88;
      v89[2] = 1;
      nitro::ndarray<int>::slice(a3, (long long **)&__p, &p_p, v16);
      nitro::ndarray<int>::assign<int>((uint64_t *)&p_p, v17);
      if (v171)
      {
        unint64_t v172 = v171;
        operator delete(v171);
      }
      if (v169)
      {
        int v170 = v169;
        operator delete(v169);
      }
      unint64_t v90 = v168;
      if (v168 && !atomic_fetch_add(&v168->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
      v86 += *(void *)(v17[2] + 8 * a2);
      v17 += 9;
    }
    while (v17 != v18);
    int64_t v72 = (char *)__p;
    goto LABEL_116;
  }
  uint64_t v59 = v58 >> 3;
  if ((unint64_t)(v58 >> 3) <= 1) {
    unint64_t v60 = 1;
  }
  else {
    unint64_t v60 = v58 >> 3;
  }
  if (v60 >= 4)
  {
    unint64_t v62 = v60 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v63 = (uint64x2_t *)((char *)v176 + 16);
    int64x2_t v64 = 0uLL;
    uint64x2_t v65 = (uint64x2_t)vdupq_n_s64(1uLL);
    unint64_t v66 = v60 & 0xFFFFFFFFFFFFFFFCLL;
    int64x2_t v67 = 0uLL;
    do
    {
      int64x2_t v64 = vsubq_s64(v64, (int64x2_t)vcgtq_u64(v63[-1], v65));
      int64x2_t v67 = vsubq_s64(v67, (int64x2_t)vcgtq_u64(*v63, v65));
      v63 += 2;
      v66 -= 4;
    }
    while (v66);
    uint64_t v61 = vaddvq_s64(vaddq_s64(v67, v64));
    if (v60 != v62) {
      goto LABEL_73;
    }
  }
  else
  {
    uint64_t v61 = 0;
    unint64_t v62 = 0;
LABEL_73:
    unint64_t v68 = v60 - v62;
    uint64_t v69 = (unint64_t *)((char *)v176 + 8 * v62);
    do
    {
      unint64_t v70 = *v69++;
      if (v70 > 1) {
        ++v61;
      }
      --v68;
    }
    while (v68);
  }
  if (v57)
  {
LABEL_78:
    if (a2 && v61 != 1)
    {
      p_p = 0;
      uint64_t v168 = 0;
      uint64_t v169 = 0;
      if (v18 == v17) {
        goto LABEL_158;
      }
      if ((0x8E38E38E38E38E39 * (v18 - v17)) >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v71 = (std::__shared_weak_count *)operator new(0x71C71C71C71C71C8 * (v18 - v17));
      p_p = v71;
      uint64_t v168 = v71;
      uint64_t v169 = &v71[0x4BDA12F684BDA13 * (v18 - v17)];
      if (v17 == v18)
      {
LABEL_158:
        uint64_t v126 = v17[2];
        unint64_t v125 = (uint64_t *)v17[3];
        if (v125 == (uint64_t *)v126 || !*v17)
        {
          unint64_t v128 = 0;
        }
        else
        {
          unint64_t v127 = (unint64_t)v125 - v126 - 8;
          if (v127 < 8)
          {
            unint64_t v128 = 1;
            uint64_t v129 = (uint64_t *)v17[2];
            goto LABEL_166;
          }
          uint64_t v130 = (v127 >> 3) + 1;
          uint64_t v129 = (uint64_t *)(v126 + 8 * (v130 & 0x3FFFFFFFFFFFFFFELL));
          unint64_t v131 = (void *)(v126 + 8);
          uint64_t v132 = 1;
          uint64_t v133 = v130 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v134 = 1;
          do
          {
            v132 *= *(v131 - 1);
            v134 *= *v131;
            v131 += 2;
            v133 -= 2;
          }
          while (v133);
          unint64_t v128 = v134 * v132;
          if (v130 != (v130 & 0x3FFFFFFFFFFFFFFELL))
          {
            do
            {
LABEL_166:
              uint64_t v135 = *v129++;
              v128 *= v135;
            }
            while (v129 != v125);
          }
        }
        unint64_t v136 = *(void *)p_p;
        uint64_t v137 = v8[1];
        unint64_t v138 = v128 / *(void *)p_p;
        unint64_t v139 = 0;
        if (v137 == v17)
        {
          unint64_t v152 = 0x8E38E38E38E38E39 * (v137 - v17);
          long long __p = 0;
          unint64_t v174 = 0;
          v175 = 0;
          uint64_t v137 = v17;
          goto LABEL_186;
        }
        while (2)
        {
          v180[0] = 0;
          uint64_t v140 = &v17[9 * v139];
          float32x4_t v142 = (char *)v140[2];
          uint64_t v141 = (char *)v140[3];
          if (v141 == v142)
          {
            uint64_t v143 = 0;
          }
          else
          {
            uint64_t v143 = v17[9 * v139];
            if (v143)
            {
              unint64_t v144 = v141 - v142 - 8;
              if (v144 < 8)
              {
                uint64_t v143 = 1;
                uint64_t v145 = v142;
                goto LABEL_176;
              }
              uint64_t v146 = (v144 >> 3) + 1;
              uint64_t v145 = &v142[8 * (v146 & 0x3FFFFFFFFFFFFFFELL)];
              unint64_t v147 = v142 + 8;
              uint64_t v148 = v146 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v149 = 1;
              uint64_t v150 = 1;
              do
              {
                v149 *= *(v147 - 1);
                v150 *= *v147;
                v147 += 2;
                v148 -= 2;
              }
              while (v148);
              uint64_t v143 = v150 * v149;
              if (v146 != (v146 & 0x3FFFFFFFFFFFFFFELL))
              {
                do
                {
LABEL_176:
                  uint64_t v151 = *(void *)v145;
                  v145 += 8;
                  v143 *= v151;
                }
                while (v145 != v141);
              }
            }
          }
          unint64_t v179 = 0;
          v180[0] = v143;
          unint64_t v179 = *((void *)p_p + v139) * v138;
          if (v143 != v179)
          {
            long long __p = v180;
            unint64_t v174 = (char *)&v179;
            nitro::ndarray<int>::concat(std::vector<nitro::ndarray<int>> const&,unsigned long)::{lambda(void)#3}::operator()();
          }
          ++v139;
          unint64_t v152 = 0x8E38E38E38E38E39 * (v137 - v17);
          if (v139 >= v152)
          {
            long long __p = 0;
            unint64_t v174 = 0;
            v175 = 0;
            if (v137 == v17)
            {
              unint64_t v139 = 0;
            }
            else
            {
              if (v152 >> 61) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v139 = (unint64_t)operator new(0x71C71C71C71C71C8 * (v137 - v17));
              v175 = (char *)(v139 + 0x71C71C71C71C71C8 * (v137 - v17));
              bzero((void *)v139, 0x71C71C71C71C71C8 * (v137 - v17));
            }
LABEL_186:
            if (v152)
            {
              uint64_t v153 = v17 + 8;
              unint64_t v154 = (void *)v139;
              do
              {
                uint64_t v155 = *v153;
                v153 += 9;
                *v154++ = v155;
                --v152;
              }
              while (v152);
            }
            if (v136 <= v128)
            {
              uint64_t v156 = 0;
              uint64_t v157 = 0;
              if (v138 <= 1) {
                uint64_t v158 = 1;
              }
              else {
                uint64_t v158 = v138;
              }
              float32x4_t v159 = v137;
              uint64_t v165 = v158;
              do
              {
                if (v159 == v17)
                {
                  float32x4_t v159 = v17;
                }
                else
                {
                  std::string::size_type v160 = p_p;
                  unint64_t v161 = *(void *)p_p;
                  if (*(void *)p_p)
                  {
                    memmove((void *)(*a3 + 4 * v157), (const void *)(*v17 + 4 * *(void *)v139), 4 * v161);
                    std::string::size_type v160 = p_p;
                    unint64_t v161 = *(void *)p_p;
                    uint64_t v17 = *v8;
                    uint64_t v137 = v8[1];
                  }
                  v157 += v161;
                  *(void *)v139 += v161;
                  if (0x8E38E38E38E38E39 * (v137 - v17) < 2)
                  {
                    float32x4_t v159 = v137;
                  }
                  else
                  {
                    uint64_t v162 = 9;
                    unint64_t v163 = 1;
                    do
                    {
                      uint64_t v164 = v160[v163];
                      if (v164)
                      {
                        memmove((void *)(*a3 + 4 * v157), (const void *)(v17[v162] + 4 * *(void *)(v139 + 8 * v163)), 4 * v164);
                        std::string::size_type v160 = p_p;
                        uint64_t v164 = *((void *)p_p + v163);
                        uint64_t v17 = *v8;
                        uint64_t v137 = v8[1];
                      }
                      v157 += v164;
                      *(void *)(v139 + 8 * v163++) += v164;
                      v162 += 9;
                    }
                    while (v163 < 0x8E38E38E38E38E39 * (v137 - v17));
                    float32x4_t v159 = v137;
                    uint64_t v158 = v165;
                  }
                }
                ++v156;
              }
              while (v156 != v158);
            }
            if (v139)
            {
              unint64_t v174 = (char *)v139;
              operator delete((void *)v139);
            }
            int64_t v72 = (char *)p_p;
            if (p_p)
            {
              uint64_t v168 = (std::__shared_weak_count *)p_p;
LABEL_194:
              operator delete(v72);
            }
            goto LABEL_195;
          }
          continue;
        }
      }
      while (2)
      {
        uint64_t v92 = v17[2];
        unint64_t v93 = (v17[3] - v92) >> 3;
        unint64_t v94 = v93 - a2;
        if (v93 <= a2)
        {
          uint64_t v96 = 1;
        }
        else
        {
          if (v94 < 2)
          {
            unint64_t v95 = a2;
            uint64_t v96 = 1;
            goto LABEL_129;
          }
          unint64_t v95 = (v94 & 0xFFFFFFFFFFFFFFFELL) + a2;
          unint64_t v97 = (void *)(v92 + 8 * a2 + 8);
          unint64_t v98 = v94 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v99 = 1;
          uint64_t v100 = 1;
          do
          {
            v99 *= *(v97 - 1);
            v100 *= *v97;
            v97 += 2;
            v98 -= 2;
          }
          while (v98);
          uint64_t v96 = v100 * v99;
          if (v94 != (v94 & 0xFFFFFFFFFFFFFFFELL))
          {
LABEL_129:
            unint64_t v101 = v93 - v95;
            uint64_t v102 = (uint64_t *)(v92 + 8 * v95);
            do
            {
              uint64_t v103 = *v102++;
              v96 *= v103;
              --v101;
            }
            while (v101);
          }
        }
        if (v71 < v169)
        {
          v71->__vftable = (std::__shared_weak_count_vtbl *)v96;
          p_shared_owners = (std::__shared_weak_count *)&v71->__shared_owners_;
        }
        else
        {
          uint64_t v104 = v8;
          unint64_t v105 = v18;
          uint64_t v106 = (std::__shared_weak_count *)p_p;
          int64_t v107 = (char *)v71 - (unsigned char *)p_p;
          uint64_t v108 = ((char *)v71 - (unsigned char *)p_p) >> 3;
          unint64_t v109 = v108 + 1;
          if ((unint64_t)(v108 + 1) >> 61) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          int64_t v110 = (unsigned char *)v169 - (unsigned char *)p_p;
          if (((unsigned char *)v169 - (unsigned char *)p_p) >> 2 > v109) {
            unint64_t v109 = v110 >> 2;
          }
          if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v111 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v111 = v109;
          }
          if (v111)
          {
            if (v111 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v112 = v111;
            uint64_t v113 = operator new(8 * v111);
            unint64_t v111 = v112;
          }
          else
          {
            uint64_t v113 = 0;
          }
          uint64_t v114 = (uint64_t *)&v113[8 * v108];
          uint64_t *v114 = v96;
          p_shared_owners = (std::__shared_weak_count *)(v114 + 1);
          if (v71 == v106)
          {
            uint64_t v18 = v105;
            uint64_t v8 = v104;
          }
          else
          {
            unint64_t v115 = (char *)v71 - (char *)v106 - 8;
            if (v115 < 0x168
              || (unint64_t v118 = ((char *)&v71[-1].__shared_weak_owners_ - (char *)v106) & 0xFFFFFFFFFFFFFFF8,
                  &v113[v107 - 8 - v118] > &v113[v107 - 8])
              || (uint64_t *)((char *)&v71[-1].__shared_weak_owners_ - v118) > &v71[-1].__shared_weak_owners_
              || (unint64_t)((char *)v71 - &v113[v107]) < 0x20)
            {
              unint64_t v116 = v71;
              uint64_t v18 = v105;
              uint64_t v8 = v104;
            }
            else
            {
              uint64_t v119 = (v115 >> 3) + 1;
              uint64_t v120 = 8 * (v119 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v116 = (std::__shared_weak_count *)((char *)v71 - v120);
              uint64_t v114 = (uint64_t *)((char *)v114 - v120);
              uint64_t v121 = &v113[8 * v108 - 16];
              uint64_t v122 = &v71[-1].__shared_owners_;
              uint64_t v123 = v119 & 0x3FFFFFFFFFFFFFFCLL;
              uint64_t v18 = v105;
              do
              {
                long long v124 = *(_OWORD *)v122;
                *(v121 - 1) = *((_OWORD *)v122 - 1);
                *uint64_t v121 = v124;
                v121 -= 2;
                v122 -= 4;
                v123 -= 4;
              }
              while (v123);
              uint64_t v8 = v104;
              if (v119 == (v119 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_148;
              }
            }
            do
            {
              uint64_t shared_weak_owners = v116[-1].__shared_weak_owners_;
              unint64_t v116 = (std::__shared_weak_count *)((char *)v116 - 8);
              *--uint64_t v114 = shared_weak_owners;
            }
            while (v116 != v106);
          }
LABEL_148:
          p_p = v114;
          uint64_t v168 = p_shared_owners;
          uint64_t v169 = &v113[8 * v111];
          if (v106) {
            operator delete(v106);
          }
        }
        uint64_t v168 = p_shared_owners;
        v17 += 9;
        unint64_t v71 = p_shared_owners;
        if (v17 == v18)
        {
          uint64_t v17 = *v8;
          goto LABEL_158;
        }
        continue;
      }
    }
    if (v17 == v18) {
      goto LABEL_195;
    }
    uint64_t v74 = 0;
    while (2)
    {
      uint64_t v77 = v17[2];
      uint64_t v76 = (uint64_t *)v17[3];
      if (v76 == (uint64_t *)v77 || !*v17)
      {
        uint64_t v75 = 0;
      }
      else
      {
        unint64_t v78 = (unint64_t)v76 - v77 - 8;
        if (v78 < 8)
        {
          uint64_t v75 = 1;
          uint64_t v79 = (uint64_t *)v17[2];
          goto LABEL_100;
        }
        uint64_t v80 = (v78 >> 3) + 1;
        uint64_t v79 = (uint64_t *)(v77 + 8 * (v80 & 0x3FFFFFFFFFFFFFFELL));
        uint64_t v81 = (void *)(v77 + 8);
        uint64_t v82 = v80 & 0x3FFFFFFFFFFFFFFELL;
        uint64_t v83 = 1;
        uint64_t v84 = 1;
        do
        {
          v83 *= *(v81 - 1);
          v84 *= *v81;
          v81 += 2;
          v82 -= 2;
        }
        while (v82);
        uint64_t v75 = v84 * v83;
        if (v80 != (v80 & 0x3FFFFFFFFFFFFFFELL))
        {
          do
          {
LABEL_100:
            uint64_t v85 = *v79++;
            v75 *= v85;
          }
          while (v79 != v76);
        }
        if (v75) {
          memmove((void *)(*a3 + 4 * v74), (const void *)(*v17 + 4 * v17[8]), 4 * v75);
        }
      }
      v74 += v75;
      v17 += 9;
      if (v17 == v18) {
        goto LABEL_195;
      }
      continue;
    }
  }
  long long __p = 0;
  unint64_t v174 = 0;
  v175 = 0;
  if ((unint64_t)v58 >= 0x5555555555555551) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  int64_t v72 = (char *)operator new(24 * v59);
  long long __p = v72;
  v175 = &v72[24 * v59];
  unint64_t v73 = v72;
  do
  {
    *(void *)unint64_t v73 = -1;
    *((void *)v73 + 1) = -1;
    *((void *)v73 + 2) = 1;
    v73 += 24;
  }
  while (v73 != &v72[24 * v59]);
  unint64_t v174 = &v72[24 * v59];
  if (v17 != v18) {
    goto LABEL_104;
  }
LABEL_116:
  if (v72)
  {
    unint64_t v174 = v72;
    goto LABEL_194;
  }
LABEL_195:
  if (v176)
  {
    unint64_t v177 = (char *)v176;
    operator delete(v176);
  }
}

void sub_19254D32C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  nitro::ndarray<float>::~ndarray(a10);
  if (a23) {
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::copy(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = a1[3] - v1;
  if (v2)
  {
    unint64_t v3 = v2 >> 3;
    uint64_t v4 = a1[5];
    if (v3 <= 1) {
      unint64_t v3 = 1;
    }
    if (v3 < 2)
    {
      unint64_t v5 = 0;
      uint64_t v6 = 0;
LABEL_10:
      unint64_t v12 = v3 - v5;
      uint64_t v13 = 8 * v5;
      uint64_t v14 = (uint64_t *)(v4 + v13);
      unint64_t v15 = (uint64_t *)(v1 + v13);
      do
      {
        uint64_t v16 = *v15++;
        uint64_t v17 = v16 - 1;
        uint64_t v18 = *v14++;
        v6 += v18 * v17;
        --v12;
      }
      while (v12);
      goto LABEL_12;
    }
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    unint64_t v5 = v3 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v9 = (void *)(v1 + 8);
    unsigned __int8 v10 = (void *)(v4 + 8);
    unint64_t v11 = v3 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v7 += *(v10 - 1) * (*(v9 - 1) - 1);
      v8 += *v10 * (*v9 - 1);
      v9 += 2;
      v10 += 2;
      v11 -= 2;
    }
    while (v11);
    uint64_t v6 = v8 + v7;
    if (v3 != v5) {
      goto LABEL_10;
    }
  }
LABEL_12:
  operator new[]();
}

void sub_19254D644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void nitro::ndarray<int>::concat(std::vector<nitro::ndarray<int>> const&,unsigned long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"arr.shape().size()", 18);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"outshape.size()", 15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  unsigned __int8 v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  unint64_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 182, 1);
    std::stringbuf::str();
    unint64_t v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      uint64_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::ndarray<int>::concat(std::vector<nitro::ndarray<int>> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19254D978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::concat(std::vector<nitro::ndarray<int>> const&,unsigned long)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"arr.shape()[i]", 14);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"outshape[i]", 11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  unsigned __int8 v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  unint64_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 184, 1);
    std::stringbuf::str();
    unint64_t v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      uint64_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::ndarray<int>::concat(std::vector<nitro::ndarray<int>> const&,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19254DCD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::concat(std::vector<nitro::ndarray<int>> const&,unsigned long)::{lambda(void)#3}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"arrs[arrid].num_elem()", 22);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"contiguous_copy_size[arrid] * ncopies", 37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  unsigned __int8 v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  unint64_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 236, 1);
    std::stringbuf::str();
    unint64_t v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      uint64_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::ndarray<int>::concat(std::vector<nitro::ndarray<int>> const&,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19254E038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::slice(void *a1@<X0>, long long **a2@<X1>, void *a3@<X8>, __n128 a4@<Q0>)
{
  long long v13 = 0uLL;
  uint64_t v14 = 0;
  nitro::ndarray_impl::compute_slice(a2, a1 + 2, a1 + 5, a1[8], &v6, a4);
  long long v13 = v6;
  uint64_t v14 = v7;
  *(_OWORD *)long long __p = v8;
  uint64_t v12 = v9;
  nitro::ndarray<int>::ndarray(a3, a1, (uint64_t)&v13, (uint64_t)__p, v10);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((void)v13)
  {
    *((void *)&v13 + 1) = v13;
    operator delete((void *)v13);
  }
}

void sub_19254E11C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    unsigned __int8 v20 = *(void **)(v18 - 48);
    if (!v20) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unsigned __int8 v20 = *(void **)(v18 - 48);
    if (!v20) {
      goto LABEL_3;
    }
  }
  *(void *)(v18 - 40) = v20;
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

uint64_t *nitro::ndarray<int>::assign<int>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (char *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - v4) >> 3;
  long long v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == v4) {
    return a1;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - v4) >> 3;
  if (*(void *)v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    uint64_t v10 = *(void *)&v4[8 * v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<int>::assign<int>(nitro::ndarray<int> const&)::{lambda(void)#1}::operator()();
  if (v3 != v4 && *a1)
  {
    unint64_t v12 = v3 - v4 - 8;
    if (v12 >= 8)
    {
      uint64_t v15 = (v12 >> 3) + 1;
      uint64_t v14 = &v4[8 * (v15 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v16 = v4 + 8;
      uint64_t v17 = 1;
      uint64_t v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v19 = 1;
      do
      {
        v17 *= *(v16 - 1);
        v19 *= *v16;
        v16 += 2;
        v18 -= 2;
      }
      while (v18);
      uint64_t v13 = v19 * v17;
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_21:
        if (v13) {
          nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::assign<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(a1, a2);
        }
        return a1;
      }
    }
    else
    {
      uint64_t v13 = 1;
      uint64_t v14 = (char *)a1[2];
    }
    do
    {
      uint64_t v20 = *(void *)v14;
      v14 += 8;
      v13 *= v20;
    }
    while (v14 != v3);
    goto LABEL_21;
  }
  return a1;
}

void nitro::ndarray<int>::ndarray(uint64_t a1)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  operator new[]();
}

void sub_19254E688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  unint64_t v9 = *v7;
  if (*v7)
  {
    *(void *)(v5 + 48) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *v6;
  if (*v6)
  {
    *(void *)(v5 + 24) = v10;
    operator delete(v10);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v5);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::ndarray(std::vector<int> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"last_index() + m_start <= elements.size()", 41);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 131, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<int>::ndarray(std::vector<int> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19254E960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::ndarray(std::vector<int> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 131, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    long long v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19254EAE8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19254EAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19254EAF4);
}

void nitro::ndarray<int>::concat(std::vector<nitro::ndarray<int>> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 182, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    long long v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19254EC60(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19254EC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19254EC6CLL);
}

void nitro::ndarray<int>::concat(std::vector<nitro::ndarray<int>> const&,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 184, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    long long v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19254EDD8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19254EDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19254EDE4);
}

void nitro::ndarray<int>::concat(std::vector<nitro::ndarray<int>> const&,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 236, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    long long v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19254EF50(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19254EF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19254EF5CLL);
}

void nitro::ndarray<int>::assign<int>(nitro::ndarray<int> const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<int>& nitro::ndarray<int>::assign<int>(nitro::ndarray<int> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19254F20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

__n128 nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::assign<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (unint64_t *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  long long v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return result;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::assign<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>& nitro::ndarray<int>::assign<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 != (char *)v4)
  {
    uint64_t v13 = *a1;
    if (*a1)
    {
      if (v12 - 8 >= 8)
      {
        unint64_t v16 = ((v12 - 8) >> 3) + 1;
        std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
        uint64_t v17 = v4 + 1;
        uint64_t v18 = 1;
        uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
        uint64_t v20 = 1;
        do
        {
          v18 *= *(v17 - 1);
          v20 *= *v17;
          v17 += 2;
          v19 -= 2;
        }
        while (v19);
        uint64_t v14 = v20 * v18;
        if (v16 == (v16 & 0x3FFFFFFFFFFFFFFELL)) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v14 = 1;
        std::locale v15 = (unint64_t *)a1[2];
      }
      do
      {
        uint64_t v21 = *v15++;
        v14 *= v21;
      }
      while (v15 != (unint64_t *)v3);
LABEL_21:
      if (!v14) {
        return result;
      }
      uint64_t v22 = (uint64_t)v12 >> 3;
      uint64_t v158 = *a1;
      if ((uint64_t)v12 >> 3 != 3)
      {
        if (v22 != 2)
        {
          if (v22 == 1)
          {
            unint64_t v23 = *v4;
            if (!*v4) {
              return result;
            }
            uint64_t v24 = a2[8];
            uint64_t v25 = a1[8];
            uint64_t v26 = *a2;
            uint64_t v27 = *(void *)a1[5];
            uint64_t v28 = *(void *)a2[5];
            if (v23 < 0xC) {
              goto LABEL_27;
            }
            unint64_t v29 = 0;
            if (v27 != 1 || v28 != 1) {
              goto LABEL_28;
            }
            float32x4_t v142 = (__n128 *)(4 * v25 + v13);
            uint64_t v143 = (__n128 *)(4 * v24 + v26);
            if ((unint64_t)((char *)v142 - (char *)v143) < 0x20)
            {
LABEL_27:
              unint64_t v29 = 0;
            }
            else
            {
              unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF8;
              v24 += v23 & 0xFFFFFFFFFFFFFFF8;
              v25 += v23 & 0xFFFFFFFFFFFFFFF8;
              unint64_t v144 = v143 + 1;
              uint64_t v145 = v142 + 1;
              unint64_t v146 = v23 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                __n128 result = v144[-1];
                __n128 v147 = *v144;
                v145[-1] = result;
                __n128 *v145 = v147;
                v144 += 2;
                v145 += 2;
                v146 -= 8;
              }
              while (v146);
              if (v23 == v29) {
                return result;
              }
            }
LABEL_28:
            unint64_t v30 = v23 - v29;
            uint64_t v31 = (_DWORD *)(v26 + 4 * v24);
            uint64_t v32 = 4 * v27;
            unint64_t v33 = (_DWORD *)(v13 + 4 * v25);
            do
            {
              _DWORD *v33 = *v31;
              v31 += v28;
              unint64_t v33 = (_DWORD *)((char *)v33 + v32);
              --v30;
            }
            while (v30);
            return result;
          }
          if ((v12 & 0x8000000000000000) != 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v103 = operator new(v12);
          bzero(v103, v12 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v104 = *a2;
          if (v12 >> 3 <= 1) {
            unint64_t v105 = 1;
          }
          else {
            unint64_t v105 = v12 >> 3;
          }
          uint64_t v106 = a2[5];
          uint64_t v107 = a2[8];
          uint64_t v108 = v105 & 0x1FFFFFFFFFFFFFFELL;
          uint64_t v109 = a1[5];
          while (v105 >= 2)
          {
            uint64_t v112 = 0;
            uint64_t v113 = 0;
            uint64_t v114 = v105 & 0x1FFFFFFFFFFFFFFELL;
            unint64_t v115 = (void *)(v109 + 8);
            unint64_t v116 = v103 + 1;
            do
            {
              v112 += *(v115 - 1) * *(v116 - 1);
              v113 += *v115 * *v116;
              v116 += 2;
              v115 += 2;
              v114 -= 2;
            }
            while (v114);
            uint64_t v110 = v113 + v112;
            uint64_t v111 = v105 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v13 = v158;
            if (v105 != v108) {
              goto LABEL_84;
            }
LABEL_86:
            if (v105 < 2)
            {
              uint64_t v124 = 0;
              uint64_t v125 = 0;
LABEL_91:
              unint64_t v131 = v105 - v125;
              uint64_t v132 = v125;
              uint64_t v133 = (uint64_t *)(v106 + 8 * v125);
              uint64_t v134 = &v103[v132];
              do
              {
                uint64_t v136 = *v134++;
                uint64_t v135 = v136;
                uint64_t v137 = *v133++;
                v124 += v137 * v135;
                --v131;
              }
              while (v131);
              goto LABEL_93;
            }
            uint64_t v126 = 0;
            uint64_t v127 = 0;
            uint64_t v128 = v105 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v129 = (void *)(v106 + 8);
            uint64_t v130 = v103 + 1;
            do
            {
              v126 += *(v129 - 1) * *(v130 - 1);
              v127 += *v129 * *v130;
              v130 += 2;
              v129 += 2;
              v128 -= 2;
            }
            while (v128);
            uint64_t v124 = v127 + v126;
            uint64_t v125 = v105 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v13 = v158;
            if (v105 != v108) {
              goto LABEL_91;
            }
LABEL_93:
            *(_DWORD *)(v13 + 4 * v110) = *(_DWORD *)(v104 + 4 * (v107 + v124));
            if ((int)(v12 >> 3) >= 1)
            {
              uint64_t v138 = (v12 >> 3) + 1;
              int v139 = v12 >> 3;
              while (1)
              {
                uint64_t v140 = (v138 - 2);
                unint64_t v141 = v103[v140] + 1;
                v103[v140] = v141;
                if (v141 < v4[v140]) {
                  break;
                }
                v103[(v138 - 2)] = 0;
                --v139;
                if ((unint64_t)--v138 <= 1) {
                  goto LABEL_99;
                }
              }
              if (v139 > 0) {
                continue;
              }
            }
LABEL_99:
            operator delete(v103);
            return result;
          }
          uint64_t v110 = 0;
          uint64_t v111 = 0;
LABEL_84:
          unint64_t v117 = v105 - v111;
          uint64_t v118 = v111;
          uint64_t v119 = (uint64_t *)(v109 + 8 * v111);
          uint64_t v120 = &v103[v118];
          do
          {
            uint64_t v122 = *v120++;
            uint64_t v121 = v122;
            uint64_t v123 = *v119++;
            v110 += v123 * v121;
            --v117;
          }
          while (v117);
          goto LABEL_86;
        }
        unint64_t v34 = *v4;
        if (!*v4) {
          return result;
        }
        uint64_t v35 = 0;
        uint64_t v36 = a2[8];
        uint64_t v37 = a1[8];
        unint64_t v38 = v4[1];
        uint64_t v39 = *a2;
        unint64_t v40 = (uint64_t *)a2[5];
        uint64_t v41 = (uint64_t *)a1[5];
        uint64_t v42 = *v41;
        uint64_t v43 = (__n128 *)(v13 + 4 * v37);
        uint64_t v44 = 4 * *v41;
        uint64_t v45 = *a2 + 4 * v36;
        uint64_t v46 = *v40;
        uint64_t v47 = 4 * *v40;
        unint64_t v48 = v38 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v49 = v43 + 1;
        unint64_t v50 = (__n128 *)(v45 + 16);
        while (!v38)
        {
LABEL_33:
          v37 += v42;
          v36 += v46;
          ++v35;
          uint64_t v49 = (__n128 *)((char *)v49 + v44);
          unint64_t v50 = (__n128 *)((char *)v50 + v47);
          if (v35 == v34) {
            return result;
          }
        }
        uint64_t v51 = v41[1];
        uint64_t v52 = v40[1];
        if (v38 >= 8)
        {
          unint64_t v53 = 0;
          if (v51 == 1 && v52 == 1)
          {
            uint64_t v54 = v36;
            uint64_t v55 = v37;
            if ((unint64_t)v43->n128_u64 + v44 * v35 - v45 - v47 * v35 >= 0x20)
            {
              uint64_t v54 = v36 + v48 * v52;
              unint64_t v62 = v50;
              uint64_t v63 = v49;
              unint64_t v64 = v38 & 0xFFFFFFFFFFFFFFF8;
              uint64_t v55 = v37 + v48 * v51;
              do
              {
                __n128 result = v62[-1];
                __n128 v66 = *v62;
                v63[-1] = result;
                *uint64_t v63 = v66;
                v63 += 2;
                v62 += 2;
                v64 -= 8;
              }
              while (v64);
              unint64_t v53 = v38 & 0xFFFFFFFFFFFFFFF8;
              if (v38 == v48) {
                goto LABEL_33;
              }
            }
            goto LABEL_38;
          }
        }
        else
        {
          unint64_t v53 = 0;
        }
        uint64_t v54 = v36;
        uint64_t v55 = v37;
LABEL_38:
        unint64_t v56 = v38 - v53;
        char v57 = (_DWORD *)(v39 + 4 * v54);
        uint64_t v58 = 4 * v52;
        uint64_t v59 = 4 * v51;
        unint64_t v60 = (_DWORD *)(v158 + 4 * v55);
        do
        {
          *unint64_t v60 = *v57;
          char v57 = (_DWORD *)((char *)v57 + v58);
          unint64_t v60 = (_DWORD *)((char *)v60 + v59);
          --v56;
        }
        while (v56);
        goto LABEL_33;
      }
      unint64_t v154 = *v4;
      if (!*v4) {
        return result;
      }
      uint64_t v67 = 0;
      uint64_t v68 = a2[8];
      uint64_t v69 = a1[8];
      unint64_t v70 = v4[1];
      unint64_t v71 = (uint64_t *)a1[5];
      uint64_t v150 = (uint64_t *)a2[5];
      uint64_t v151 = a1[2];
      uint64_t v152 = *v150;
      uint64_t v153 = *v71;
      uint64_t v156 = 4 * *v71;
      uint64_t v155 = 4 * *v150;
      uint64_t v148 = 4 * v68;
      uint64_t v149 = (__n128 *)(v13 + 4 * v69);
      int64_t v72 = v149 + 1;
      uint64_t v73 = 4 * v68 + 16;
      while (!v70)
      {
LABEL_53:
        v69 += v153;
        v68 += v152;
        ++v67;
        int64_t v72 = (__n128 *)((char *)v72 + v156);
        v73 += v155;
        if (v67 == v154) {
          return result;
        }
      }
      uint64_t v74 = 0;
      unint64_t v75 = *(void *)(v151 + 16);
      uint64_t v76 = *a2;
      uint64_t v77 = v71[1];
      uint64_t v78 = v150[1];
      uint64_t v79 = 4 * v77;
      uint64_t v80 = v148 + v155 * v67 + *a2;
      uint64_t v81 = 4 * v78;
      unint64_t v82 = v75 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v83 = a2[5];
      uint64_t v84 = (__n128 *)(*a2 + v73);
      uint64_t v85 = v72;
      uint64_t v86 = v68;
      uint64_t v87 = v69;
      while (!v75)
      {
LABEL_56:
        v87 += v77;
        v86 += v78;
        ++v74;
        uint64_t v85 = (__n128 *)((char *)v85 + v79);
        uint64_t v84 = (__n128 *)((char *)v84 + v81);
        if (v74 == v70) {
          goto LABEL_53;
        }
      }
      uint64_t v88 = v71[2];
      uint64_t v89 = *(void *)(v83 + 16);
      if (v75 >= 8)
      {
        unint64_t v90 = 0;
        if (v88 == 1 && v89 == 1)
        {
          uint64_t v91 = v86;
          uint64_t v92 = v87;
          if ((unint64_t)v149->n128_u64 + v156 * v67 + v79 * v74 - v80 - v81 * v74 >= 0x20)
          {
            uint64_t v91 = v86 + v82 * v89;
            uint64_t v99 = v84;
            uint64_t v100 = v85;
            unint64_t v101 = v75 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v92 = v87 + v82 * v88;
            do
            {
              __n128 result = v99[-1];
              __n128 v102 = *v99;
              v100[-1] = result;
              *uint64_t v100 = v102;
              v100 += 2;
              v99 += 2;
              v101 -= 8;
            }
            while (v101);
            unint64_t v90 = v75 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v13 = v158;
            if (v75 == v82) {
              goto LABEL_56;
            }
          }
          goto LABEL_61;
        }
      }
      else
      {
        unint64_t v90 = 0;
      }
      uint64_t v91 = v86;
      uint64_t v92 = v87;
LABEL_61:
      unint64_t v93 = v75 - v90;
      unint64_t v94 = (_DWORD *)(v76 + 4 * v91);
      uint64_t v95 = 4 * v89;
      uint64_t v96 = 4 * v88;
      unint64_t v97 = (_DWORD *)(v13 + 4 * v92);
      do
      {
        _DWORD *v97 = *v94;
        unint64_t v94 = (_DWORD *)((char *)v94 + v95);
        unint64_t v97 = (_DWORD *)((char *)v97 + v96);
        --v93;
      }
      while (v93);
      goto LABEL_56;
    }
  }
  return result;
}

void sub_19254F944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>& nitro::ndarray<int>::assign<int>(nitro::ndarray<int> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    long long v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19254FAA8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19254FABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19254FAB4);
}

void nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::assign<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>& nitro::ndarray<int>::assign<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::assign<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>& nitro::ndarray<int>::assign<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19254FD64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::assign<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>& nitro::ndarray<int>::assign<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    long long v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19254FEEC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19254FF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19254FEF8);
}

void nitro::ndarray<half>::concat(uint64_t **a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0x8E38E38E38E38E39 * (v4 - *a1);
  if (v5 == 1)
  {
    long long v6 = *a1;
    nitro::ndarray<half>::copy(v6);
  }
  if (!v5)
  {
    p_p = 0;
    uint64_t v168 = 0;
    uint64_t v169 = 0;
    uint64_t v176 = 0;
    unint64_t v177 = 0;
    uint32x4_t v178 = 0;
    long long __p = 0;
    unint64_t v174 = 0;
    v175 = 0;
    nitro::ndarray<half>::ndarray((uint64_t)a3);
  }
  uint64_t v8 = a1;
  unint64_t v177 = 0;
  uint32x4_t v178 = 0;
  uint64_t v176 = 0;
  unsigned __int8 v10 = (unsigned char *)v3[2];
  unint64_t v9 = (unsigned char *)v3[3];
  int64_t v11 = v9 - v10;
  if (v9 == v10)
  {
    unsigned __int8 v13 = 0;
    size_t v12 = 0;
  }
  else
  {
    if (v11 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    size_t v12 = (char *)operator new(v9 - v10);
    unsigned __int8 v13 = &v12[8 * (v11 >> 3)];
    uint64_t v176 = v12;
    uint32x4_t v178 = v13;
    memcpy(v12, v10, v11);
    unint64_t v177 = v13;
  }
  *(void *)&v12[8 * a2] = 0;
  if (v3 != v4)
  {
    uint64_t v14 = v13;
    do
    {
      long long __p = (void *)((v3[3] - v3[2]) >> 3);
      v180[0] = (v14 - v12) >> 3;
      if (__p != (void *)v180[0])
      {
        p_p = &__p;
        uint64_t v168 = (std::__shared_weak_count *)v180;
        nitro::ndarray<half>::concat(std::vector<nitro::ndarray<half>> const&,unsigned long)::{lambda(void)#1}::operator()();
      }
      if (v14 == v12)
      {
        uint64_t v14 = v12;
      }
      else
      {
        unint64_t v15 = 0;
        do
        {
          if (a2 == v15)
          {
            *(void *)&v12[8 * a2] += *(void *)(v3[2] + 8 * a2);
          }
          else
          {
            long long __p = 0;
            long long __p = *(void **)(v3[2] + 8 * v15);
            v180[0] = 0;
            v180[0] = *(void *)&v12[8 * v15];
            if (__p != (void *)v180[0])
            {
              p_p = &__p;
              uint64_t v168 = (std::__shared_weak_count *)v180;
              nitro::ndarray<half>::concat(std::vector<nitro::ndarray<half>> const&,unsigned long)::{lambda(void)#2}::operator()();
            }
          }
          ++v15;
          uint64_t v14 = v13;
        }
        while (v15 < (v13 - v12) >> 3);
      }
      v3 += 9;
    }
    while (v3 != v4);
  }
  nitro::ndarray<half>::init_from_shape((uint64_t **)&v176, a3);
  uint64_t v17 = *v8;
  uint64_t v18 = v8[1];
  if (*v8 == v18)
  {
LABEL_60:
    char v57 = 1;
    goto LABEL_62;
  }
  uint64_t v19 = *v8;
  while (1)
  {
    uint64_t v20 = (char *)v19[2];
    uint64_t v21 = (char *)v19[3];
    uint64_t v22 = v21 - v20;
    if (v21 == v20)
    {
      uint64_t v25 = (unint64_t *)v19[5];
      goto LABEL_47;
    }
    uint64_t v23 = *v19;
    if (*v19)
    {
      if ((unint64_t)(v22 - 8) < 8)
      {
        uint64_t v23 = 1;
        uint64_t v24 = (char *)v19[2];
        do
        {
LABEL_36:
          uint64_t v31 = *(void *)v24;
          v24 += 8;
          v23 *= v31;
        }
        while (v24 != v21);
        goto LABEL_37;
      }
      unint64_t v26 = ((unint64_t)(v22 - 8) >> 3) + 1;
      uint64_t v24 = &v20[8 * (v26 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v27 = v20 + 8;
      uint64_t v28 = v26 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v29 = 1;
      uint64_t v30 = 1;
      do
      {
        v29 *= *(v27 - 1);
        v30 *= *v27;
        v27 += 2;
        v28 -= 2;
      }
      while (v28);
      uint64_t v23 = v30 * v29;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFELL)) {
        goto LABEL_36;
      }
    }
LABEL_37:
    unint64_t v32 = v22 >> 3;
    uint64_t v25 = (unint64_t *)v19[5];
    if (v32 <= 1) {
      unint64_t v32 = 1;
    }
    if (v32 < 2)
    {
      unint64_t v33 = 0;
      uint64_t v34 = 0;
LABEL_44:
      unint64_t v40 = v32 - v33;
      uint64_t v41 = 8 * v33;
      uint64_t v42 = (uint64_t *)&v25[v33];
      uint64_t v43 = (uint64_t *)&v20[v41];
      do
      {
        uint64_t v44 = *v43++;
        uint64_t v45 = v44 - 1;
        uint64_t v46 = *v42++;
        v34 += v46 * v45;
        --v40;
      }
      while (v40);
      goto LABEL_46;
    }
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    unint64_t v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v37 = v20 + 8;
    unint64_t v38 = v25 + 1;
    unint64_t v39 = v32 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v35 += *(v38 - 1) * (*(v37 - 1) - 1);
      v36 += *v38 * (*v37 - 1);
      v37 += 2;
      v38 += 2;
      v39 -= 2;
    }
    while (v39);
    uint64_t v34 = v36 + v35;
    if (v32 != v33) {
      goto LABEL_44;
    }
LABEL_46:
    if (v23 != v34 + 1) {
      break;
    }
LABEL_47:
    uint64_t v47 = v19[6] - (void)v25;
    if (v47)
    {
      if (!*v25) {
        break;
      }
      if ((unint64_t)v47 >= 0x10)
      {
        unint64_t v48 = v47 >> 3;
        uint64_t v49 = v48 <= 2 ? 2 : v48;
        unint64_t v50 = v25[1];
        if (!v50 || *v25 < v50) {
          break;
        }
        uint64_t v51 = 0;
        uint64_t v52 = v49 - 2;
        do
        {
          uint64_t v53 = v51;
          if (v52 == v51) {
            break;
          }
          uint64_t v54 = &v25[v51];
          unint64_t v55 = v54[2];
          if (!v55) {
            break;
          }
          unint64_t v56 = v54[1];
          uint64_t v51 = v53 + 1;
        }
        while (v56 >= v55);
        if (v53 + 2 < v48) {
          break;
        }
      }
    }
    v19 += 9;
    if (v19 == v18) {
      goto LABEL_60;
    }
  }
  char v57 = 0;
LABEL_62:
  uint64_t v58 = v177 - (unsigned char *)v176;
  if (v177 == v176)
  {
    if (v57)
    {
      uint64_t v61 = 0;
      goto LABEL_78;
    }
    int64_t v72 = 0;
    long long __p = 0;
    unint64_t v174 = 0;
    v175 = 0;
    if (v17 == v18) {
      goto LABEL_116;
    }
LABEL_104:
    unint64_t v86 = 0;
    do
    {
      uint64_t v87 = *(void *)(v17[2] + 8 * a2);
      unint64_t v88 = v87 + v86;
      unint64_t v179 = v86;
      v180[0] = v87 + v86;
      if (v87 + v86 <= v86)
      {
        p_p = v180;
        uint64_t v168 = (std::__shared_weak_count *)&v179;
        nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long,unsigned long)::{lambda(void)#2}::operator()();
      }
      uint64_t v89 = (unint64_t *)((char *)__p + 24 * a2);
      unint64_t *v89 = v86;
      v89[1] = v88;
      v89[2] = 1;
      nitro::ndarray<half>::slice(a3, (long long **)&__p, &p_p, v16);
      nitro::ndarray<half>::assign<half>((uint64_t *)&p_p, v17);
      if (v171)
      {
        unint64_t v172 = v171;
        operator delete(v171);
      }
      if (v169)
      {
        int v170 = v169;
        operator delete(v169);
      }
      unint64_t v90 = v168;
      if (v168 && !atomic_fetch_add(&v168->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
      v86 += *(void *)(v17[2] + 8 * a2);
      v17 += 9;
    }
    while (v17 != v18);
    int64_t v72 = (char *)__p;
    goto LABEL_116;
  }
  uint64_t v59 = v58 >> 3;
  if ((unint64_t)(v58 >> 3) <= 1) {
    unint64_t v60 = 1;
  }
  else {
    unint64_t v60 = v58 >> 3;
  }
  if (v60 >= 4)
  {
    unint64_t v62 = v60 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v63 = (uint64x2_t *)((char *)v176 + 16);
    int64x2_t v64 = 0uLL;
    uint64x2_t v65 = (uint64x2_t)vdupq_n_s64(1uLL);
    unint64_t v66 = v60 & 0xFFFFFFFFFFFFFFFCLL;
    int64x2_t v67 = 0uLL;
    do
    {
      int64x2_t v64 = vsubq_s64(v64, (int64x2_t)vcgtq_u64(v63[-1], v65));
      int64x2_t v67 = vsubq_s64(v67, (int64x2_t)vcgtq_u64(*v63, v65));
      v63 += 2;
      v66 -= 4;
    }
    while (v66);
    uint64_t v61 = vaddvq_s64(vaddq_s64(v67, v64));
    if (v60 != v62) {
      goto LABEL_73;
    }
  }
  else
  {
    uint64_t v61 = 0;
    unint64_t v62 = 0;
LABEL_73:
    unint64_t v68 = v60 - v62;
    uint64_t v69 = (unint64_t *)((char *)v176 + 8 * v62);
    do
    {
      unint64_t v70 = *v69++;
      if (v70 > 1) {
        ++v61;
      }
      --v68;
    }
    while (v68);
  }
  if (v57)
  {
LABEL_78:
    if (a2 && v61 != 1)
    {
      p_p = 0;
      uint64_t v168 = 0;
      uint64_t v169 = 0;
      if (v18 == v17) {
        goto LABEL_158;
      }
      if ((0x8E38E38E38E38E39 * (v18 - v17)) >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v71 = (std::__shared_weak_count *)operator new(0x71C71C71C71C71C8 * (v18 - v17));
      p_p = v71;
      uint64_t v168 = v71;
      uint64_t v169 = &v71[0x4BDA12F684BDA13 * (v18 - v17)];
      if (v17 == v18)
      {
LABEL_158:
        uint64_t v126 = v17[2];
        uint64_t v125 = (uint64_t *)v17[3];
        if (v125 == (uint64_t *)v126 || !*v17)
        {
          unint64_t v128 = 0;
        }
        else
        {
          unint64_t v127 = (unint64_t)v125 - v126 - 8;
          if (v127 < 8)
          {
            unint64_t v128 = 1;
            uint64_t v129 = (uint64_t *)v17[2];
            goto LABEL_166;
          }
          uint64_t v130 = (v127 >> 3) + 1;
          uint64_t v129 = (uint64_t *)(v126 + 8 * (v130 & 0x3FFFFFFFFFFFFFFELL));
          unint64_t v131 = (void *)(v126 + 8);
          uint64_t v132 = 1;
          uint64_t v133 = v130 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v134 = 1;
          do
          {
            v132 *= *(v131 - 1);
            v134 *= *v131;
            v131 += 2;
            v133 -= 2;
          }
          while (v133);
          unint64_t v128 = v134 * v132;
          if (v130 != (v130 & 0x3FFFFFFFFFFFFFFELL))
          {
            do
            {
LABEL_166:
              uint64_t v135 = *v129++;
              v128 *= v135;
            }
            while (v129 != v125);
          }
        }
        unint64_t v136 = *(void *)p_p;
        uint64_t v137 = v8[1];
        unint64_t v138 = v128 / *(void *)p_p;
        unint64_t v139 = 0;
        if (v137 == v17)
        {
          unint64_t v152 = 0x8E38E38E38E38E39 * (v137 - v17);
          long long __p = 0;
          unint64_t v174 = 0;
          v175 = 0;
          uint64_t v137 = v17;
          goto LABEL_186;
        }
        while (2)
        {
          v180[0] = 0;
          uint64_t v140 = &v17[9 * v139];
          float32x4_t v142 = (char *)v140[2];
          unint64_t v141 = (char *)v140[3];
          if (v141 == v142)
          {
            uint64_t v143 = 0;
          }
          else
          {
            uint64_t v143 = v17[9 * v139];
            if (v143)
            {
              unint64_t v144 = v141 - v142 - 8;
              if (v144 < 8)
              {
                uint64_t v143 = 1;
                uint64_t v145 = v142;
                goto LABEL_176;
              }
              uint64_t v146 = (v144 >> 3) + 1;
              uint64_t v145 = &v142[8 * (v146 & 0x3FFFFFFFFFFFFFFELL)];
              __n128 v147 = v142 + 8;
              uint64_t v148 = v146 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v149 = 1;
              uint64_t v150 = 1;
              do
              {
                v149 *= *(v147 - 1);
                v150 *= *v147;
                v147 += 2;
                v148 -= 2;
              }
              while (v148);
              uint64_t v143 = v150 * v149;
              if (v146 != (v146 & 0x3FFFFFFFFFFFFFFELL))
              {
                do
                {
LABEL_176:
                  uint64_t v151 = *(void *)v145;
                  v145 += 8;
                  v143 *= v151;
                }
                while (v145 != v141);
              }
            }
          }
          unint64_t v179 = 0;
          v180[0] = v143;
          unint64_t v179 = *((void *)p_p + v139) * v138;
          if (v143 != v179)
          {
            long long __p = v180;
            unint64_t v174 = (char *)&v179;
            nitro::ndarray<half>::concat(std::vector<nitro::ndarray<half>> const&,unsigned long)::{lambda(void)#3}::operator()();
          }
          ++v139;
          unint64_t v152 = 0x8E38E38E38E38E39 * (v137 - v17);
          if (v139 >= v152)
          {
            long long __p = 0;
            unint64_t v174 = 0;
            v175 = 0;
            if (v137 == v17)
            {
              unint64_t v139 = 0;
            }
            else
            {
              if (v152 >> 61) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v139 = (unint64_t)operator new(0x71C71C71C71C71C8 * (v137 - v17));
              v175 = (char *)(v139 + 0x71C71C71C71C71C8 * (v137 - v17));
              bzero((void *)v139, 0x71C71C71C71C71C8 * (v137 - v17));
            }
LABEL_186:
            if (v152)
            {
              uint64_t v153 = v17 + 8;
              unint64_t v154 = (void *)v139;
              do
              {
                uint64_t v155 = *v153;
                v153 += 9;
                *v154++ = v155;
                --v152;
              }
              while (v152);
            }
            if (v136 <= v128)
            {
              uint64_t v156 = 0;
              uint64_t v157 = 0;
              if (v138 <= 1) {
                uint64_t v158 = 1;
              }
              else {
                uint64_t v158 = v138;
              }
              float32x4_t v159 = v137;
              uint64_t v165 = v158;
              do
              {
                if (v159 == v17)
                {
                  float32x4_t v159 = v17;
                }
                else
                {
                  std::string::size_type v160 = p_p;
                  unint64_t v161 = *(void *)p_p;
                  if (*(void *)p_p)
                  {
                    memmove((void *)(*a3 + 2 * v157), (const void *)(*v17 + 2 * *(void *)v139), 2 * v161);
                    std::string::size_type v160 = p_p;
                    unint64_t v161 = *(void *)p_p;
                    uint64_t v17 = *v8;
                    uint64_t v137 = v8[1];
                  }
                  v157 += v161;
                  *(void *)v139 += v161;
                  if (0x8E38E38E38E38E39 * (v137 - v17) < 2)
                  {
                    float32x4_t v159 = v137;
                  }
                  else
                  {
                    uint64_t v162 = 9;
                    unint64_t v163 = 1;
                    do
                    {
                      uint64_t v164 = v160[v163];
                      if (v164)
                      {
                        memmove((void *)(*a3 + 2 * v157), (const void *)(v17[v162] + 2 * *(void *)(v139 + 8 * v163)), 2 * v164);
                        std::string::size_type v160 = p_p;
                        uint64_t v164 = *((void *)p_p + v163);
                        uint64_t v17 = *v8;
                        uint64_t v137 = v8[1];
                      }
                      v157 += v164;
                      *(void *)(v139 + 8 * v163++) += v164;
                      v162 += 9;
                    }
                    while (v163 < 0x8E38E38E38E38E39 * (v137 - v17));
                    float32x4_t v159 = v137;
                    uint64_t v158 = v165;
                  }
                }
                ++v156;
              }
              while (v156 != v158);
            }
            if (v139)
            {
              unint64_t v174 = (char *)v139;
              operator delete((void *)v139);
            }
            int64_t v72 = (char *)p_p;
            if (p_p)
            {
              uint64_t v168 = (std::__shared_weak_count *)p_p;
LABEL_194:
              operator delete(v72);
            }
            goto LABEL_195;
          }
          continue;
        }
      }
      while (2)
      {
        uint64_t v92 = v17[2];
        unint64_t v93 = (v17[3] - v92) >> 3;
        unint64_t v94 = v93 - a2;
        if (v93 <= a2)
        {
          uint64_t v96 = 1;
        }
        else
        {
          if (v94 < 2)
          {
            unint64_t v95 = a2;
            uint64_t v96 = 1;
            goto LABEL_129;
          }
          unint64_t v95 = (v94 & 0xFFFFFFFFFFFFFFFELL) + a2;
          unint64_t v97 = (void *)(v92 + 8 * a2 + 8);
          unint64_t v98 = v94 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v99 = 1;
          uint64_t v100 = 1;
          do
          {
            v99 *= *(v97 - 1);
            v100 *= *v97;
            v97 += 2;
            v98 -= 2;
          }
          while (v98);
          uint64_t v96 = v100 * v99;
          if (v94 != (v94 & 0xFFFFFFFFFFFFFFFELL))
          {
LABEL_129:
            unint64_t v101 = v93 - v95;
            __n128 v102 = (uint64_t *)(v92 + 8 * v95);
            do
            {
              uint64_t v103 = *v102++;
              v96 *= v103;
              --v101;
            }
            while (v101);
          }
        }
        if (v71 < v169)
        {
          v71->__vftable = (std::__shared_weak_count_vtbl *)v96;
          p_shared_owners = (std::__shared_weak_count *)&v71->__shared_owners_;
        }
        else
        {
          uint64_t v104 = v8;
          unint64_t v105 = v18;
          uint64_t v106 = (std::__shared_weak_count *)p_p;
          int64_t v107 = (char *)v71 - (unsigned char *)p_p;
          uint64_t v108 = ((char *)v71 - (unsigned char *)p_p) >> 3;
          unint64_t v109 = v108 + 1;
          if ((unint64_t)(v108 + 1) >> 61) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          int64_t v110 = (unsigned char *)v169 - (unsigned char *)p_p;
          if (((unsigned char *)v169 - (unsigned char *)p_p) >> 2 > v109) {
            unint64_t v109 = v110 >> 2;
          }
          if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v111 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v111 = v109;
          }
          if (v111)
          {
            if (v111 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v112 = v111;
            uint64_t v113 = operator new(8 * v111);
            unint64_t v111 = v112;
          }
          else
          {
            uint64_t v113 = 0;
          }
          uint64_t v114 = (uint64_t *)&v113[8 * v108];
          uint64_t *v114 = v96;
          p_shared_owners = (std::__shared_weak_count *)(v114 + 1);
          if (v71 == v106)
          {
            uint64_t v18 = v105;
            uint64_t v8 = v104;
          }
          else
          {
            unint64_t v115 = (char *)v71 - (char *)v106 - 8;
            if (v115 < 0x168
              || (unint64_t v118 = ((char *)&v71[-1].__shared_weak_owners_ - (char *)v106) & 0xFFFFFFFFFFFFFFF8,
                  &v113[v107 - 8 - v118] > &v113[v107 - 8])
              || (uint64_t *)((char *)&v71[-1].__shared_weak_owners_ - v118) > &v71[-1].__shared_weak_owners_
              || (unint64_t)((char *)v71 - &v113[v107]) < 0x20)
            {
              unint64_t v116 = v71;
              uint64_t v18 = v105;
              uint64_t v8 = v104;
            }
            else
            {
              uint64_t v119 = (v115 >> 3) + 1;
              uint64_t v120 = 8 * (v119 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v116 = (std::__shared_weak_count *)((char *)v71 - v120);
              uint64_t v114 = (uint64_t *)((char *)v114 - v120);
              uint64_t v121 = &v113[8 * v108 - 16];
              uint64_t v122 = &v71[-1].__shared_owners_;
              uint64_t v123 = v119 & 0x3FFFFFFFFFFFFFFCLL;
              uint64_t v18 = v105;
              do
              {
                long long v124 = *(_OWORD *)v122;
                *(v121 - 1) = *((_OWORD *)v122 - 1);
                *uint64_t v121 = v124;
                v121 -= 2;
                v122 -= 4;
                v123 -= 4;
              }
              while (v123);
              uint64_t v8 = v104;
              if (v119 == (v119 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_148;
              }
            }
            do
            {
              uint64_t shared_weak_owners = v116[-1].__shared_weak_owners_;
              unint64_t v116 = (std::__shared_weak_count *)((char *)v116 - 8);
              *--uint64_t v114 = shared_weak_owners;
            }
            while (v116 != v106);
          }
LABEL_148:
          p_p = v114;
          uint64_t v168 = p_shared_owners;
          uint64_t v169 = &v113[8 * v111];
          if (v106) {
            operator delete(v106);
          }
        }
        uint64_t v168 = p_shared_owners;
        v17 += 9;
        unint64_t v71 = p_shared_owners;
        if (v17 == v18)
        {
          uint64_t v17 = *v8;
          goto LABEL_158;
        }
        continue;
      }
    }
    if (v17 == v18) {
      goto LABEL_195;
    }
    uint64_t v74 = 0;
    while (2)
    {
      uint64_t v77 = v17[2];
      uint64_t v76 = (uint64_t *)v17[3];
      if (v76 == (uint64_t *)v77 || !*v17)
      {
        uint64_t v75 = 0;
      }
      else
      {
        unint64_t v78 = (unint64_t)v76 - v77 - 8;
        if (v78 < 8)
        {
          uint64_t v75 = 1;
          uint64_t v79 = (uint64_t *)v17[2];
          goto LABEL_100;
        }
        uint64_t v80 = (v78 >> 3) + 1;
        uint64_t v79 = (uint64_t *)(v77 + 8 * (v80 & 0x3FFFFFFFFFFFFFFELL));
        uint64_t v81 = (void *)(v77 + 8);
        uint64_t v82 = v80 & 0x3FFFFFFFFFFFFFFELL;
        uint64_t v83 = 1;
        uint64_t v84 = 1;
        do
        {
          v83 *= *(v81 - 1);
          v84 *= *v81;
          v81 += 2;
          v82 -= 2;
        }
        while (v82);
        uint64_t v75 = v84 * v83;
        if (v80 != (v80 & 0x3FFFFFFFFFFFFFFELL))
        {
          do
          {
LABEL_100:
            uint64_t v85 = *v79++;
            v75 *= v85;
          }
          while (v79 != v76);
        }
        if (v75) {
          memmove((void *)(*a3 + 2 * v74), (const void *)(*v17 + 2 * v17[8]), 2 * v75);
        }
      }
      v74 += v75;
      v17 += 9;
      if (v17 == v18) {
        goto LABEL_195;
      }
      continue;
    }
  }
  long long __p = 0;
  unint64_t v174 = 0;
  v175 = 0;
  if ((unint64_t)v58 >= 0x5555555555555551) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  int64_t v72 = (char *)operator new(24 * v59);
  long long __p = v72;
  v175 = &v72[24 * v59];
  uint64_t v73 = v72;
  do
  {
    *(void *)uint64_t v73 = -1;
    *((void *)v73 + 1) = -1;
    *((void *)v73 + 2) = 1;
    v73 += 24;
  }
  while (v73 != &v72[24 * v59]);
  unint64_t v174 = &v72[24 * v59];
  if (v17 != v18) {
    goto LABEL_104;
  }
LABEL_116:
  if (v72)
  {
    unint64_t v174 = v72;
    goto LABEL_194;
  }
LABEL_195:
  if (v176)
  {
    unint64_t v177 = (char *)v176;
    operator delete(v176);
  }
}

void sub_192550C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  nitro::ndarray<float>::~ndarray(a10);
  if (a23) {
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::copy(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = a1[3] - v1;
  if (v2)
  {
    unint64_t v3 = v2 >> 3;
    uint64_t v4 = a1[5];
    if (v3 <= 1) {
      unint64_t v3 = 1;
    }
    if (v3 < 2)
    {
      unint64_t v5 = 0;
      uint64_t v6 = 0;
LABEL_10:
      unint64_t v12 = v3 - v5;
      uint64_t v13 = 8 * v5;
      uint64_t v14 = (uint64_t *)(v4 + v13);
      unint64_t v15 = (uint64_t *)(v1 + v13);
      do
      {
        uint64_t v16 = *v15++;
        uint64_t v17 = v16 - 1;
        uint64_t v18 = *v14++;
        v6 += v18 * v17;
        --v12;
      }
      while (v12);
      goto LABEL_12;
    }
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    unint64_t v5 = v3 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = (void *)(v1 + 8);
    unsigned __int8 v10 = (void *)(v4 + 8);
    unint64_t v11 = v3 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v7 += *(v10 - 1) * (*(v9 - 1) - 1);
      v8 += *v10 * (*v9 - 1);
      v9 += 2;
      v10 += 2;
      v11 -= 2;
    }
    while (v11);
    uint64_t v6 = v8 + v7;
    if (v3 != v5) {
      goto LABEL_10;
    }
  }
LABEL_12:
  operator new[]();
}

void sub_192550FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void nitro::ndarray<half>::concat(std::vector<nitro::ndarray<half>> const&,unsigned long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"arr.shape().size()", 18);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"outshape.size()", 15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  unsigned __int8 v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  unint64_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 182, 1);
    std::stringbuf::str();
    unint64_t v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      uint64_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::ndarray<half>::concat(std::vector<nitro::ndarray<half>> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925512DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::concat(std::vector<nitro::ndarray<half>> const&,unsigned long)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"arr.shape()[i]", 14);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"outshape[i]", 11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  unsigned __int8 v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  unint64_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 184, 1);
    std::stringbuf::str();
    unint64_t v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      uint64_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::ndarray<half>::concat(std::vector<nitro::ndarray<half>> const&,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19255163C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::concat(std::vector<nitro::ndarray<half>> const&,unsigned long)::{lambda(void)#3}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"arrs[arrid].num_elem()", 22);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"contiguous_copy_size[arrid] * ncopies", 37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  unsigned __int8 v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  unint64_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 236, 1);
    std::stringbuf::str();
    unint64_t v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      uint64_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::ndarray<half>::concat(std::vector<nitro::ndarray<half>> const&,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19255199C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::slice(void *a1@<X0>, long long **a2@<X1>, void *a3@<X8>, __n128 a4@<Q0>)
{
  long long v13 = 0uLL;
  uint64_t v14 = 0;
  nitro::ndarray_impl::compute_slice(a2, a1 + 2, a1 + 5, a1[8], &v6, a4);
  long long v13 = v6;
  uint64_t v14 = v7;
  *(_OWORD *)long long __p = v8;
  uint64_t v12 = v9;
  nitro::ndarray<half>::ndarray(a3, a1, (uint64_t)&v13, (uint64_t)__p, v10);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((void)v13)
  {
    *((void *)&v13 + 1) = v13;
    operator delete((void *)v13);
  }
}

void sub_192551A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    unsigned __int8 v20 = *(void **)(v18 - 48);
    if (!v20) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unsigned __int8 v20 = *(void **)(v18 - 48);
    if (!v20) {
      goto LABEL_3;
    }
  }
  *(void *)(v18 - 40) = v20;
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

uint64_t *nitro::ndarray<half>::assign<half>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (char *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - v4) >> 3;
  long long v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == v4) {
    return a1;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - v4) >> 3;
  if (*(void *)v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    uint64_t v10 = *(void *)&v4[8 * v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<half>::assign<half>(nitro::ndarray<half> const&)::{lambda(void)#1}::operator()();
  if (v3 != v4 && *a1)
  {
    unint64_t v12 = v3 - v4 - 8;
    if (v12 >= 8)
    {
      uint64_t v15 = (v12 >> 3) + 1;
      uint64_t v14 = &v4[8 * (v15 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v16 = v4 + 8;
      uint64_t v17 = 1;
      uint64_t v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v19 = 1;
      do
      {
        v17 *= *(v16 - 1);
        v19 *= *v16;
        v16 += 2;
        v18 -= 2;
      }
      while (v18);
      uint64_t v13 = v19 * v17;
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_21:
        if (v13) {
          nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::assign<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(a1, a2);
        }
        return a1;
      }
    }
    else
    {
      uint64_t v13 = 1;
      uint64_t v14 = (char *)a1[2];
    }
    do
    {
      uint64_t v20 = *(void *)v14;
      v14 += 8;
      v13 *= v20;
    }
    while (v14 != v3);
    goto LABEL_21;
  }
  return a1;
}

void nitro::ndarray<half>::ndarray(uint64_t a1)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  operator new[]();
}

void sub_192551FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  unint64_t v9 = *v7;
  if (*v7)
  {
    *(void *)(v5 + 48) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *v6;
  if (*v6)
  {
    *(void *)(v5 + 24) = v10;
    operator delete(v10);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v5);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::ndarray(std::vector<half> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"last_index() + m_start <= elements.size()", 41);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 131, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<half>::ndarray(std::vector<half> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925522C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::ndarray(std::vector<half> const&,std::vector<unsigned long> const&,std::vector<unsigned long> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 131, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    long long v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19255244C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192552460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192552458);
}

void nitro::ndarray<half>::concat(std::vector<nitro::ndarray<half>> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 182, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    long long v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925525C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925525D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925525D0);
}

void nitro::ndarray<half>::concat(std::vector<nitro::ndarray<half>> const&,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 184, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    long long v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19255273C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192552750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192552748);
}

void nitro::ndarray<half>::concat(std::vector<nitro::ndarray<half>> const&,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 236, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    long long v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925528B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925528C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925528C0);
}

void nitro::ndarray<half>::assign<half>(nitro::ndarray<half> const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<half>& nitro::ndarray<half>::assign<half>(nitro::ndarray<half> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192552B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

__n128 nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::assign<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (unint64_t *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  long long v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return result;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::assign<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>& nitro::ndarray<half>::assign<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 != (char *)v4)
  {
    uint64_t v13 = *a1;
    if (*a1)
    {
      if (v12 - 8 >= 8)
      {
        unint64_t v16 = ((v12 - 8) >> 3) + 1;
        std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
        uint64_t v17 = v4 + 1;
        uint64_t v18 = 1;
        uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
        uint64_t v20 = 1;
        do
        {
          v18 *= *(v17 - 1);
          v20 *= *v17;
          v17 += 2;
          v19 -= 2;
        }
        while (v19);
        uint64_t v14 = v20 * v18;
        if (v16 == (v16 & 0x3FFFFFFFFFFFFFFELL)) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v14 = 1;
        std::locale v15 = (unint64_t *)a1[2];
      }
      do
      {
        uint64_t v21 = *v15++;
        v14 *= v21;
      }
      while (v15 != (unint64_t *)v3);
LABEL_21:
      if (!v14) {
        return result;
      }
      uint64_t v22 = (uint64_t)v12 >> 3;
      uint64_t v158 = *a1;
      if ((uint64_t)v12 >> 3 != 3)
      {
        if (v22 != 2)
        {
          if (v22 == 1)
          {
            unint64_t v23 = *v4;
            if (!*v4) {
              return result;
            }
            uint64_t v24 = a2[8];
            uint64_t v25 = a1[8];
            uint64_t v26 = *a2;
            uint64_t v27 = *(void *)a1[5];
            uint64_t v28 = *(void *)a2[5];
            if (v23 < 0x10) {
              goto LABEL_27;
            }
            unint64_t v29 = 0;
            if (v27 != 1 || v28 != 1) {
              goto LABEL_28;
            }
            float32x4_t v142 = (__n128 *)(2 * v25 + v13);
            uint64_t v143 = (__n128 *)(2 * v24 + v26);
            if ((unint64_t)((char *)v142 - (char *)v143) < 0x20)
            {
LABEL_27:
              unint64_t v29 = 0;
            }
            else
            {
              unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF0;
              v24 += v23 & 0xFFFFFFFFFFFFFFF0;
              v25 += v23 & 0xFFFFFFFFFFFFFFF0;
              unint64_t v144 = v143 + 1;
              uint64_t v145 = v142 + 1;
              unint64_t v146 = v23 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                __n128 result = v144[-1];
                __n128 v147 = *v144;
                v145[-1] = result;
                __n128 *v145 = v147;
                v144 += 2;
                v145 += 2;
                v146 -= 16;
              }
              while (v146);
              if (v23 == v29) {
                return result;
              }
            }
LABEL_28:
            unint64_t v30 = v23 - v29;
            uint64_t v31 = (unsigned __int16 *)(v26 + 2 * v24);
            uint64_t v32 = 2 * v27;
            unint64_t v33 = (unsigned __int16 *)(v13 + 2 * v25);
            do
            {
              result.n128_u16[0] = *v31;
              unsigned __int16 *v33 = *v31;
              v31 += v28;
              unint64_t v33 = (unsigned __int16 *)((char *)v33 + v32);
              --v30;
            }
            while (v30);
            return result;
          }
          if ((v12 & 0x8000000000000000) != 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v103 = operator new(v12);
          bzero(v103, v12 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v104 = *a2;
          if (v12 >> 3 <= 1) {
            unint64_t v105 = 1;
          }
          else {
            unint64_t v105 = v12 >> 3;
          }
          uint64_t v106 = a2[5];
          uint64_t v107 = a2[8];
          uint64_t v108 = v105 & 0x1FFFFFFFFFFFFFFELL;
          uint64_t v109 = a1[5];
          while (v105 >= 2)
          {
            uint64_t v112 = 0;
            uint64_t v113 = 0;
            uint64_t v114 = v105 & 0x1FFFFFFFFFFFFFFELL;
            unint64_t v115 = (void *)(v109 + 8);
            unint64_t v116 = v103 + 1;
            do
            {
              v112 += *(v115 - 1) * *(v116 - 1);
              v113 += *v115 * *v116;
              v116 += 2;
              v115 += 2;
              v114 -= 2;
            }
            while (v114);
            uint64_t v110 = v113 + v112;
            uint64_t v111 = v105 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v13 = v158;
            if (v105 != v108) {
              goto LABEL_84;
            }
LABEL_86:
            if (v105 < 2)
            {
              uint64_t v124 = 0;
              uint64_t v125 = 0;
LABEL_91:
              unint64_t v131 = v105 - v125;
              uint64_t v132 = v125;
              uint64_t v133 = (uint64_t *)(v106 + 8 * v125);
              uint64_t v134 = &v103[v132];
              do
              {
                uint64_t v136 = *v134++;
                uint64_t v135 = v136;
                uint64_t v137 = *v133++;
                v124 += v137 * v135;
                --v131;
              }
              while (v131);
              goto LABEL_93;
            }
            uint64_t v126 = 0;
            uint64_t v127 = 0;
            uint64_t v128 = v105 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v129 = (void *)(v106 + 8);
            uint64_t v130 = v103 + 1;
            do
            {
              v126 += *(v129 - 1) * *(v130 - 1);
              v127 += *v129 * *v130;
              v130 += 2;
              v129 += 2;
              v128 -= 2;
            }
            while (v128);
            uint64_t v124 = v127 + v126;
            uint64_t v125 = v105 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v13 = v158;
            if (v105 != v108) {
              goto LABEL_91;
            }
LABEL_93:
            *(_WORD *)(v13 + 2 * v110) = *(_WORD *)(v104 + 2 * (v107 + v124));
            if ((int)(v12 >> 3) >= 1)
            {
              uint64_t v138 = (v12 >> 3) + 1;
              int v139 = v12 >> 3;
              while (1)
              {
                uint64_t v140 = (v138 - 2);
                unint64_t v141 = v103[v140] + 1;
                v103[v140] = v141;
                if (v141 < v4[v140]) {
                  break;
                }
                v103[(v138 - 2)] = 0;
                --v139;
                if ((unint64_t)--v138 <= 1) {
                  goto LABEL_99;
                }
              }
              if (v139 > 0) {
                continue;
              }
            }
LABEL_99:
            operator delete(v103);
            return result;
          }
          uint64_t v110 = 0;
          uint64_t v111 = 0;
LABEL_84:
          unint64_t v117 = v105 - v111;
          uint64_t v118 = v111;
          uint64_t v119 = (uint64_t *)(v109 + 8 * v111);
          uint64_t v120 = &v103[v118];
          do
          {
            uint64_t v122 = *v120++;
            uint64_t v121 = v122;
            uint64_t v123 = *v119++;
            v110 += v123 * v121;
            --v117;
          }
          while (v117);
          goto LABEL_86;
        }
        unint64_t v35 = *v4;
        if (!*v4) {
          return result;
        }
        uint64_t v36 = 0;
        uint64_t v37 = a2[8];
        uint64_t v38 = a1[8];
        unint64_t v39 = v4[1];
        uint64_t v40 = *a2;
        uint64_t v41 = (uint64_t *)a2[5];
        uint64_t v42 = (uint64_t *)a1[5];
        uint64_t v43 = *v42;
        uint64_t v44 = (__n128 *)(v13 + 2 * v38);
        uint64_t v45 = 2 * *v42;
        uint64_t v46 = *a2 + 2 * v37;
        uint64_t v47 = *v41;
        uint64_t v48 = 2 * *v41;
        unint64_t v49 = v39 & 0xFFFFFFFFFFFFFFF0;
        unint64_t v50 = v44 + 1;
        uint64_t v51 = (__n128 *)(v46 + 16);
        while (!v39)
        {
LABEL_33:
          v38 += v43;
          v37 += v47;
          ++v36;
          unint64_t v50 = (__n128 *)((char *)v50 + v45);
          uint64_t v51 = (__n128 *)((char *)v51 + v48);
          if (v36 == v35) {
            return result;
          }
        }
        uint64_t v52 = v42[1];
        uint64_t v53 = v41[1];
        if (v39 >= 0x10)
        {
          unint64_t v54 = 0;
          if (v52 == 1 && v53 == 1)
          {
            uint64_t v55 = v37;
            uint64_t v56 = v38;
            if ((unint64_t)v44->n128_u64 + v45 * v36 - v46 - v48 * v36 >= 0x20)
            {
              uint64_t v55 = v37 + v49 * v53;
              uint64_t v63 = v51;
              int64x2_t v64 = v50;
              unint64_t v65 = v39 & 0xFFFFFFFFFFFFFFF0;
              uint64_t v56 = v38 + v49 * v52;
              do
              {
                __n128 result = v63[-1];
                __n128 v66 = *v63;
                v64[-1] = result;
                __n128 *v64 = v66;
                v64 += 2;
                v63 += 2;
                v65 -= 16;
              }
              while (v65);
              unint64_t v54 = v39 & 0xFFFFFFFFFFFFFFF0;
              if (v39 == v49) {
                goto LABEL_33;
              }
            }
            goto LABEL_38;
          }
        }
        else
        {
          unint64_t v54 = 0;
        }
        uint64_t v55 = v37;
        uint64_t v56 = v38;
LABEL_38:
        unint64_t v57 = v39 - v54;
        uint64_t v58 = (unsigned __int16 *)(v40 + 2 * v55);
        uint64_t v59 = 2 * v53;
        uint64_t v60 = 2 * v52;
        uint64_t v61 = (unsigned __int16 *)(v158 + 2 * v56);
        do
        {
          result.n128_u16[0] = *v58;
          *uint64_t v61 = *v58;
          uint64_t v58 = (unsigned __int16 *)((char *)v58 + v59);
          uint64_t v61 = (unsigned __int16 *)((char *)v61 + v60);
          --v57;
        }
        while (v57);
        goto LABEL_33;
      }
      unint64_t v154 = *v4;
      if (!*v4) {
        return result;
      }
      uint64_t v67 = 0;
      uint64_t v68 = a2[8];
      uint64_t v69 = a1[8];
      unint64_t v70 = v4[1];
      unint64_t v71 = (uint64_t *)a1[5];
      uint64_t v150 = (uint64_t *)a2[5];
      uint64_t v151 = a1[2];
      uint64_t v152 = *v150;
      uint64_t v153 = *v71;
      uint64_t v156 = 2 * *v71;
      uint64_t v155 = 2 * *v150;
      uint64_t v148 = 2 * v68;
      uint64_t v149 = (__n128 *)(v13 + 2 * v69);
      int64_t v72 = v149 + 1;
      uint64_t v73 = 2 * v68 + 16;
      while (!v70)
      {
LABEL_53:
        v69 += v153;
        v68 += v152;
        ++v67;
        int64_t v72 = (__n128 *)((char *)v72 + v156);
        v73 += v155;
        if (v67 == v154) {
          return result;
        }
      }
      uint64_t v74 = 0;
      unint64_t v75 = *(void *)(v151 + 16);
      uint64_t v76 = *a2;
      uint64_t v77 = v71[1];
      uint64_t v78 = v150[1];
      uint64_t v79 = 2 * v77;
      uint64_t v80 = v148 + v155 * v67 + *a2;
      uint64_t v81 = 2 * v78;
      unint64_t v82 = v75 & 0xFFFFFFFFFFFFFFF0;
      uint64_t v83 = a2[5];
      uint64_t v84 = (__n128 *)(*a2 + v73);
      uint64_t v85 = v72;
      uint64_t v86 = v68;
      uint64_t v87 = v69;
      while (!v75)
      {
LABEL_56:
        v87 += v77;
        v86 += v78;
        ++v74;
        uint64_t v85 = (__n128 *)((char *)v85 + v79);
        uint64_t v84 = (__n128 *)((char *)v84 + v81);
        if (v74 == v70) {
          goto LABEL_53;
        }
      }
      uint64_t v88 = v71[2];
      uint64_t v89 = *(void *)(v83 + 16);
      if (v75 >= 0x10)
      {
        unint64_t v90 = 0;
        if (v88 == 1 && v89 == 1)
        {
          uint64_t v91 = v86;
          uint64_t v92 = v87;
          if ((unint64_t)v149->n128_u64 + v156 * v67 + v79 * v74 - v80 - v81 * v74 >= 0x20)
          {
            uint64_t v91 = v86 + v82 * v89;
            uint64_t v99 = v84;
            uint64_t v100 = v85;
            unint64_t v101 = v75 & 0xFFFFFFFFFFFFFFF0;
            uint64_t v92 = v87 + v82 * v88;
            do
            {
              __n128 result = v99[-1];
              __n128 v102 = *v99;
              v100[-1] = result;
              *uint64_t v100 = v102;
              v100 += 2;
              v99 += 2;
              v101 -= 16;
            }
            while (v101);
            unint64_t v90 = v75 & 0xFFFFFFFFFFFFFFF0;
            uint64_t v13 = v158;
            if (v75 == v82) {
              goto LABEL_56;
            }
          }
          goto LABEL_61;
        }
      }
      else
      {
        unint64_t v90 = 0;
      }
      uint64_t v91 = v86;
      uint64_t v92 = v87;
LABEL_61:
      unint64_t v93 = v75 - v90;
      unint64_t v94 = (unsigned __int16 *)(v76 + 2 * v91);
      uint64_t v95 = 2 * v89;
      uint64_t v96 = 2 * v88;
      unint64_t v97 = (unsigned __int16 *)(v13 + 2 * v92);
      do
      {
        result.n128_u16[0] = *v94;
        unsigned __int16 *v97 = *v94;
        unint64_t v94 = (unsigned __int16 *)((char *)v94 + v95);
        unint64_t v97 = (unsigned __int16 *)((char *)v97 + v96);
        --v93;
      }
      while (v93);
      goto LABEL_56;
    }
  }
  return result;
}

void sub_1925532A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>& nitro::ndarray<half>::assign<half>(nitro::ndarray<half> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    long long v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19255340C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192553420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192553418);
}

void nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::assign<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>& nitro::ndarray<half>::assign<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::assign<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>& nitro::ndarray<half>::assign<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925536C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::assign<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>& nitro::ndarray<half>::assign<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    long long v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192553850(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192553864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19255385CLL);
}

void nitro::ndarray<float>::concat(uint64_t **a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0x8E38E38E38E38E39 * (v4 - *a1);
  if (v5 == 1)
  {
    long long v6 = *a1;
    nitro::ndarray<float>::copy(v6);
  }
  if (!v5)
  {
    p_p = 0;
    uint64_t v168 = 0;
    uint64_t v169 = 0;
    uint64_t v176 = 0;
    unint64_t v177 = 0;
    uint32x4_t v178 = 0;
    long long __p = 0;
    unint64_t v174 = 0;
    v175 = 0;
    nitro::ndarray<float>::ndarray((uint64_t)a3);
  }
  uint64_t v8 = a1;
  unint64_t v177 = 0;
  uint32x4_t v178 = 0;
  uint64_t v176 = 0;
  unsigned __int8 v10 = (unsigned char *)v3[2];
  unint64_t v9 = (unsigned char *)v3[3];
  int64_t v11 = v9 - v10;
  if (v9 == v10)
  {
    unsigned __int8 v13 = 0;
    size_t v12 = 0;
  }
  else
  {
    if (v11 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    size_t v12 = (char *)operator new(v9 - v10);
    unsigned __int8 v13 = &v12[8 * (v11 >> 3)];
    uint64_t v176 = v12;
    uint32x4_t v178 = v13;
    memcpy(v12, v10, v11);
    unint64_t v177 = v13;
  }
  *(void *)&v12[8 * a2] = 0;
  if (v3 != v4)
  {
    uint64_t v14 = v13;
    do
    {
      long long __p = (void *)((v3[3] - v3[2]) >> 3);
      v180[0] = (v14 - v12) >> 3;
      if (__p != (void *)v180[0])
      {
        p_p = &__p;
        uint64_t v168 = (std::__shared_weak_count *)v180;
        nitro::ndarray<float>::concat(std::vector<nitro::ndarray<float>> const&,unsigned long)::{lambda(void)#1}::operator()();
      }
      if (v14 == v12)
      {
        uint64_t v14 = v12;
      }
      else
      {
        unint64_t v15 = 0;
        do
        {
          if (a2 == v15)
          {
            *(void *)&v12[8 * a2] += *(void *)(v3[2] + 8 * a2);
          }
          else
          {
            long long __p = 0;
            long long __p = *(void **)(v3[2] + 8 * v15);
            v180[0] = 0;
            v180[0] = *(void *)&v12[8 * v15];
            if (__p != (void *)v180[0])
            {
              p_p = &__p;
              uint64_t v168 = (std::__shared_weak_count *)v180;
              nitro::ndarray<float>::concat(std::vector<nitro::ndarray<float>> const&,unsigned long)::{lambda(void)#2}::operator()();
            }
          }
          ++v15;
          uint64_t v14 = v13;
        }
        while (v15 < (v13 - v12) >> 3);
      }
      v3 += 9;
    }
    while (v3 != v4);
  }
  nitro::ndarray<float>::init_from_shape((uint64_t **)&v176, a3);
  uint64_t v17 = *v8;
  uint64_t v18 = v8[1];
  if (*v8 == v18)
  {
LABEL_60:
    char v57 = 1;
    goto LABEL_62;
  }
  uint64_t v19 = *v8;
  while (1)
  {
    uint64_t v20 = (char *)v19[2];
    uint64_t v21 = (char *)v19[3];
    uint64_t v22 = v21 - v20;
    if (v21 == v20)
    {
      uint64_t v25 = (unint64_t *)v19[5];
      goto LABEL_47;
    }
    uint64_t v23 = *v19;
    if (*v19)
    {
      if ((unint64_t)(v22 - 8) < 8)
      {
        uint64_t v23 = 1;
        uint64_t v24 = (char *)v19[2];
        do
        {
LABEL_36:
          uint64_t v31 = *(void *)v24;
          v24 += 8;
          v23 *= v31;
        }
        while (v24 != v21);
        goto LABEL_37;
      }
      unint64_t v26 = ((unint64_t)(v22 - 8) >> 3) + 1;
      uint64_t v24 = &v20[8 * (v26 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v27 = v20 + 8;
      uint64_t v28 = v26 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v29 = 1;
      uint64_t v30 = 1;
      do
      {
        v29 *= *(v27 - 1);
        v30 *= *v27;
        v27 += 2;
        v28 -= 2;
      }
      while (v28);
      uint64_t v23 = v30 * v29;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFELL)) {
        goto LABEL_36;
      }
    }
LABEL_37:
    unint64_t v32 = v22 >> 3;
    uint64_t v25 = (unint64_t *)v19[5];
    if (v32 <= 1) {
      unint64_t v32 = 1;
    }
    if (v32 < 2)
    {
      unint64_t v33 = 0;
      uint64_t v34 = 0;
LABEL_44:
      unint64_t v40 = v32 - v33;
      uint64_t v41 = 8 * v33;
      uint64_t v42 = (uint64_t *)&v25[v33];
      uint64_t v43 = (uint64_t *)&v20[v41];
      do
      {
        uint64_t v44 = *v43++;
        uint64_t v45 = v44 - 1;
        uint64_t v46 = *v42++;
        v34 += v46 * v45;
        --v40;
      }
      while (v40);
      goto LABEL_46;
    }
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    unint64_t v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v37 = v20 + 8;
    uint64_t v38 = v25 + 1;
    unint64_t v39 = v32 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v35 += *(v38 - 1) * (*(v37 - 1) - 1);
      v36 += *v38 * (*v37 - 1);
      v37 += 2;
      v38 += 2;
      v39 -= 2;
    }
    while (v39);
    uint64_t v34 = v36 + v35;
    if (v32 != v33) {
      goto LABEL_44;
    }
LABEL_46:
    if (v23 != v34 + 1) {
      break;
    }
LABEL_47:
    uint64_t v47 = v19[6] - (void)v25;
    if (v47)
    {
      if (!*v25) {
        break;
      }
      if ((unint64_t)v47 >= 0x10)
      {
        unint64_t v48 = v47 >> 3;
        uint64_t v49 = v48 <= 2 ? 2 : v48;
        unint64_t v50 = v25[1];
        if (!v50 || *v25 < v50) {
          break;
        }
        uint64_t v51 = 0;
        uint64_t v52 = v49 - 2;
        do
        {
          uint64_t v53 = v51;
          if (v52 == v51) {
            break;
          }
          unint64_t v54 = &v25[v51];
          unint64_t v55 = v54[2];
          if (!v55) {
            break;
          }
          unint64_t v56 = v54[1];
          uint64_t v51 = v53 + 1;
        }
        while (v56 >= v55);
        if (v53 + 2 < v48) {
          break;
        }
      }
    }
    v19 += 9;
    if (v19 == v18) {
      goto LABEL_60;
    }
  }
  char v57 = 0;
LABEL_62:
  uint64_t v58 = v177 - (unsigned char *)v176;
  if (v177 == v176)
  {
    if (v57)
    {
      uint64_t v61 = 0;
      goto LABEL_78;
    }
    int64_t v72 = 0;
    long long __p = 0;
    unint64_t v174 = 0;
    v175 = 0;
    if (v17 == v18) {
      goto LABEL_116;
    }
LABEL_104:
    unint64_t v86 = 0;
    do
    {
      uint64_t v87 = *(void *)(v17[2] + 8 * a2);
      unint64_t v88 = v87 + v86;
      unint64_t v179 = v86;
      v180[0] = v87 + v86;
      if (v87 + v86 <= v86)
      {
        p_p = v180;
        uint64_t v168 = (std::__shared_weak_count *)&v179;
        nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long,unsigned long)::{lambda(void)#2}::operator()();
      }
      uint64_t v89 = (unint64_t *)((char *)__p + 24 * a2);
      unint64_t *v89 = v86;
      v89[1] = v88;
      v89[2] = 1;
      nitro::ndarray<float>::slice(a3, (long long **)&__p, &p_p, v16);
      nitro::ndarray<float>::assign<float>((uint64_t *)&p_p, v17);
      if (v171)
      {
        unint64_t v172 = v171;
        operator delete(v171);
      }
      if (v169)
      {
        int v170 = v169;
        operator delete(v169);
      }
      unint64_t v90 = v168;
      if (v168 && !atomic_fetch_add(&v168->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
      v86 += *(void *)(v17[2] + 8 * a2);
      v17 += 9;
    }
    while (v17 != v18);
    int64_t v72 = (char *)__p;
    goto LABEL_116;
  }
  uint64_t v59 = v58 >> 3;
  if ((unint64_t)(v58 >> 3) <= 1) {
    unint64_t v60 = 1;
  }
  else {
    unint64_t v60 = v58 >> 3;
  }
  if (v60 >= 4)
  {
    unint64_t v62 = v60 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v63 = (uint64x2_t *)((char *)v176 + 16);
    int64x2_t v64 = 0uLL;
    uint64x2_t v65 = (uint64x2_t)vdupq_n_s64(1uLL);
    unint64_t v66 = v60 & 0xFFFFFFFFFFFFFFFCLL;
    int64x2_t v67 = 0uLL;
    do
    {
      int64x2_t v64 = vsubq_s64(v64, (int64x2_t)vcgtq_u64(v63[-1], v65));
      int64x2_t v67 = vsubq_s64(v67, (int64x2_t)vcgtq_u64(*v63, v65));
      v63 += 2;
      v66 -= 4;
    }
    while (v66);
    uint64_t v61 = vaddvq_s64(vaddq_s64(v67, v64));
    if (v60 != v62) {
      goto LABEL_73;
    }
  }
  else
  {
    uint64_t v61 = 0;
    unint64_t v62 = 0;
LABEL_73:
    unint64_t v68 = v60 - v62;
    uint64_t v69 = (unint64_t *)((char *)v176 + 8 * v62);
    do
    {
      unint64_t v70 = *v69++;
      if (v70 > 1) {
        ++v61;
      }
      --v68;
    }
    while (v68);
  }
  if (v57)
  {
LABEL_78:
    if (a2 && v61 != 1)
    {
      p_p = 0;
      uint64_t v168 = 0;
      uint64_t v169 = 0;
      if (v18 == v17) {
        goto LABEL_158;
      }
      if ((0x8E38E38E38E38E39 * (v18 - v17)) >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v71 = (std::__shared_weak_count *)operator new(0x71C71C71C71C71C8 * (v18 - v17));
      p_p = v71;
      uint64_t v168 = v71;
      uint64_t v169 = &v71[0x4BDA12F684BDA13 * (v18 - v17)];
      if (v17 == v18)
      {
LABEL_158:
        uint64_t v126 = v17[2];
        uint64_t v125 = (uint64_t *)v17[3];
        if (v125 == (uint64_t *)v126 || !*v17)
        {
          unint64_t v128 = 0;
        }
        else
        {
          unint64_t v127 = (unint64_t)v125 - v126 - 8;
          if (v127 < 8)
          {
            unint64_t v128 = 1;
            uint64_t v129 = (uint64_t *)v17[2];
            goto LABEL_166;
          }
          uint64_t v130 = (v127 >> 3) + 1;
          uint64_t v129 = (uint64_t *)(v126 + 8 * (v130 & 0x3FFFFFFFFFFFFFFELL));
          unint64_t v131 = (void *)(v126 + 8);
          uint64_t v132 = 1;
          uint64_t v133 = v130 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v134 = 1;
          do
          {
            v132 *= *(v131 - 1);
            v134 *= *v131;
            v131 += 2;
            v133 -= 2;
          }
          while (v133);
          unint64_t v128 = v134 * v132;
          if (v130 != (v130 & 0x3FFFFFFFFFFFFFFELL))
          {
            do
            {
LABEL_166:
              uint64_t v135 = *v129++;
              v128 *= v135;
            }
            while (v129 != v125);
          }
        }
        unint64_t v136 = *(void *)p_p;
        uint64_t v137 = v8[1];
        unint64_t v138 = v128 / *(void *)p_p;
        unint64_t v139 = 0;
        if (v137 == v17)
        {
          unint64_t v152 = 0x8E38E38E38E38E39 * (v137 - v17);
          long long __p = 0;
          unint64_t v174 = 0;
          v175 = 0;
          uint64_t v137 = v17;
          goto LABEL_186;
        }
        while (2)
        {
          v180[0] = 0;
          uint64_t v140 = &v17[9 * v139];
          float32x4_t v142 = (char *)v140[2];
          unint64_t v141 = (char *)v140[3];
          if (v141 == v142)
          {
            uint64_t v143 = 0;
          }
          else
          {
            uint64_t v143 = v17[9 * v139];
            if (v143)
            {
              unint64_t v144 = v141 - v142 - 8;
              if (v144 < 8)
              {
                uint64_t v143 = 1;
                uint64_t v145 = v142;
                goto LABEL_176;
              }
              uint64_t v146 = (v144 >> 3) + 1;
              uint64_t v145 = &v142[8 * (v146 & 0x3FFFFFFFFFFFFFFELL)];
              __n128 v147 = v142 + 8;
              uint64_t v148 = v146 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v149 = 1;
              uint64_t v150 = 1;
              do
              {
                v149 *= *(v147 - 1);
                v150 *= *v147;
                v147 += 2;
                v148 -= 2;
              }
              while (v148);
              uint64_t v143 = v150 * v149;
              if (v146 != (v146 & 0x3FFFFFFFFFFFFFFELL))
              {
                do
                {
LABEL_176:
                  uint64_t v151 = *(void *)v145;
                  v145 += 8;
                  v143 *= v151;
                }
                while (v145 != v141);
              }
            }
          }
          unint64_t v179 = 0;
          v180[0] = v143;
          unint64_t v179 = *((void *)p_p + v139) * v138;
          if (v143 != v179)
          {
            long long __p = v180;
            unint64_t v174 = (char *)&v179;
            nitro::ndarray<float>::concat(std::vector<nitro::ndarray<float>> const&,unsigned long)::{lambda(void)#3}::operator()();
          }
          ++v139;
          unint64_t v152 = 0x8E38E38E38E38E39 * (v137 - v17);
          if (v139 >= v152)
          {
            long long __p = 0;
            unint64_t v174 = 0;
            v175 = 0;
            if (v137 == v17)
            {
              unint64_t v139 = 0;
            }
            else
            {
              if (v152 >> 61) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v139 = (unint64_t)operator new(0x71C71C71C71C71C8 * (v137 - v17));
              v175 = (char *)(v139 + 0x71C71C71C71C71C8 * (v137 - v17));
              bzero((void *)v139, 0x71C71C71C71C71C8 * (v137 - v17));
            }
LABEL_186:
            if (v152)
            {
              uint64_t v153 = v17 + 8;
              unint64_t v154 = (void *)v139;
              do
              {
                uint64_t v155 = *v153;
                v153 += 9;
                *v154++ = v155;
                --v152;
              }
              while (v152);
            }
            if (v136 <= v128)
            {
              uint64_t v156 = 0;
              uint64_t v157 = 0;
              if (v138 <= 1) {
                uint64_t v158 = 1;
              }
              else {
                uint64_t v158 = v138;
              }
              float32x4_t v159 = v137;
              uint64_t v165 = v158;
              do
              {
                if (v159 == v17)
                {
                  float32x4_t v159 = v17;
                }
                else
                {
                  std::string::size_type v160 = p_p;
                  unint64_t v161 = *(void *)p_p;
                  if (*(void *)p_p)
                  {
                    memmove((void *)(*a3 + 4 * v157), (const void *)(*v17 + 4 * *(void *)v139), 4 * v161);
                    std::string::size_type v160 = p_p;
                    unint64_t v161 = *(void *)p_p;
                    uint64_t v17 = *v8;
                    uint64_t v137 = v8[1];
                  }
                  v157 += v161;
                  *(void *)v139 += v161;
                  if (0x8E38E38E38E38E39 * (v137 - v17) < 2)
                  {
                    float32x4_t v159 = v137;
                  }
                  else
                  {
                    uint64_t v162 = 9;
                    unint64_t v163 = 1;
                    do
                    {
                      uint64_t v164 = v160[v163];
                      if (v164)
                      {
                        memmove((void *)(*a3 + 4 * v157), (const void *)(v17[v162] + 4 * *(void *)(v139 + 8 * v163)), 4 * v164);
                        std::string::size_type v160 = p_p;
                        uint64_t v164 = *((void *)p_p + v163);
                        uint64_t v17 = *v8;
                        uint64_t v137 = v8[1];
                      }
                      v157 += v164;
                      *(void *)(v139 + 8 * v163++) += v164;
                      v162 += 9;
                    }
                    while (v163 < 0x8E38E38E38E38E39 * (v137 - v17));
                    float32x4_t v159 = v137;
                    uint64_t v158 = v165;
                  }
                }
                ++v156;
              }
              while (v156 != v158);
            }
            if (v139)
            {
              unint64_t v174 = (char *)v139;
              operator delete((void *)v139);
            }
            int64_t v72 = (char *)p_p;
            if (p_p)
            {
              uint64_t v168 = (std::__shared_weak_count *)p_p;
LABEL_194:
              operator delete(v72);
            }
            goto LABEL_195;
          }
          continue;
        }
      }
      while (2)
      {
        uint64_t v92 = v17[2];
        unint64_t v93 = (v17[3] - v92) >> 3;
        unint64_t v94 = v93 - a2;
        if (v93 <= a2)
        {
          uint64_t v96 = 1;
        }
        else
        {
          if (v94 < 2)
          {
            unint64_t v95 = a2;
            uint64_t v96 = 1;
            goto LABEL_129;
          }
          unint64_t v95 = (v94 & 0xFFFFFFFFFFFFFFFELL) + a2;
          unint64_t v97 = (void *)(v92 + 8 * a2 + 8);
          unint64_t v98 = v94 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v99 = 1;
          uint64_t v100 = 1;
          do
          {
            v99 *= *(v97 - 1);
            v100 *= *v97;
            v97 += 2;
            v98 -= 2;
          }
          while (v98);
          uint64_t v96 = v100 * v99;
          if (v94 != (v94 & 0xFFFFFFFFFFFFFFFELL))
          {
LABEL_129:
            unint64_t v101 = v93 - v95;
            __n128 v102 = (uint64_t *)(v92 + 8 * v95);
            do
            {
              uint64_t v103 = *v102++;
              v96 *= v103;
              --v101;
            }
            while (v101);
          }
        }
        if (v71 < v169)
        {
          v71->__vftable = (std::__shared_weak_count_vtbl *)v96;
          p_shared_owners = (std::__shared_weak_count *)&v71->__shared_owners_;
        }
        else
        {
          uint64_t v104 = v8;
          unint64_t v105 = v18;
          uint64_t v106 = (std::__shared_weak_count *)p_p;
          int64_t v107 = (char *)v71 - (unsigned char *)p_p;
          uint64_t v108 = ((char *)v71 - (unsigned char *)p_p) >> 3;
          unint64_t v109 = v108 + 1;
          if ((unint64_t)(v108 + 1) >> 61) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          int64_t v110 = (unsigned char *)v169 - (unsigned char *)p_p;
          if (((unsigned char *)v169 - (unsigned char *)p_p) >> 2 > v109) {
            unint64_t v109 = v110 >> 2;
          }
          if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v111 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v111 = v109;
          }
          if (v111)
          {
            if (v111 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v112 = v111;
            uint64_t v113 = operator new(8 * v111);
            unint64_t v111 = v112;
          }
          else
          {
            uint64_t v113 = 0;
          }
          uint64_t v114 = (uint64_t *)&v113[8 * v108];
          uint64_t *v114 = v96;
          p_shared_owners = (std::__shared_weak_count *)(v114 + 1);
          if (v71 == v106)
          {
            uint64_t v18 = v105;
            uint64_t v8 = v104;
          }
          else
          {
            unint64_t v115 = (char *)v71 - (char *)v106 - 8;
            if (v115 < 0x168
              || (unint64_t v118 = ((char *)&v71[-1].__shared_weak_owners_ - (char *)v106) & 0xFFFFFFFFFFFFFFF8,
                  &v113[v107 - 8 - v118] > &v113[v107 - 8])
              || (uint64_t *)((char *)&v71[-1].__shared_weak_owners_ - v118) > &v71[-1].__shared_weak_owners_
              || (unint64_t)((char *)v71 - &v113[v107]) < 0x20)
            {
              unint64_t v116 = v71;
              uint64_t v18 = v105;
              uint64_t v8 = v104;
            }
            else
            {
              uint64_t v119 = (v115 >> 3) + 1;
              uint64_t v120 = 8 * (v119 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v116 = (std::__shared_weak_count *)((char *)v71 - v120);
              uint64_t v114 = (uint64_t *)((char *)v114 - v120);
              uint64_t v121 = &v113[8 * v108 - 16];
              uint64_t v122 = &v71[-1].__shared_owners_;
              uint64_t v123 = v119 & 0x3FFFFFFFFFFFFFFCLL;
              uint64_t v18 = v105;
              do
              {
                long long v124 = *(_OWORD *)v122;
                *(v121 - 1) = *((_OWORD *)v122 - 1);
                *uint64_t v121 = v124;
                v121 -= 2;
                v122 -= 4;
                v123 -= 4;
              }
              while (v123);
              uint64_t v8 = v104;
              if (v119 == (v119 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_148;
              }
            }
            do
            {
              uint64_t shared_weak_owners = v116[-1].__shared_weak_owners_;
              unint64_t v116 = (std::__shared_weak_count *)((char *)v116 - 8);
              *--uint64_t v114 = shared_weak_owners;
            }
            while (v116 != v106);
          }
LABEL_148:
          p_p = v114;
          uint64_t v168 = p_shared_owners;
          uint64_t v169 = &v113[8 * v111];
          if (v106) {
            operator delete(v106);
          }
        }
        uint64_t v168 = p_shared_owners;
        v17 += 9;
        unint64_t v71 = p_shared_owners;
        if (v17 == v18)
        {
          uint64_t v17 = *v8;
          goto LABEL_158;
        }
        continue;
      }
    }
    if (v17 == v18) {
      goto LABEL_195;
    }
    uint64_t v74 = 0;
    while (2)
    {
      uint64_t v77 = v17[2];
      uint64_t v76 = (uint64_t *)v17[3];
      if (v76 == (uint64_t *)v77 || !*v17)
      {
        uint64_t v75 = 0;
      }
      else
      {
        unint64_t v78 = (unint64_t)v76 - v77 - 8;
        if (v78 < 8)
        {
          uint64_t v75 = 1;
          uint64_t v79 = (uint64_t *)v17[2];
          goto LABEL_100;
        }
        uint64_t v80 = (v78 >> 3) + 1;
        uint64_t v79 = (uint64_t *)(v77 + 8 * (v80 & 0x3FFFFFFFFFFFFFFELL));
        uint64_t v81 = (void *)(v77 + 8);
        uint64_t v82 = v80 & 0x3FFFFFFFFFFFFFFELL;
        uint64_t v83 = 1;
        uint64_t v84 = 1;
        do
        {
          v83 *= *(v81 - 1);
          v84 *= *v81;
          v81 += 2;
          v82 -= 2;
        }
        while (v82);
        uint64_t v75 = v84 * v83;
        if (v80 != (v80 & 0x3FFFFFFFFFFFFFFELL))
        {
          do
          {
LABEL_100:
            uint64_t v85 = *v79++;
            v75 *= v85;
          }
          while (v79 != v76);
        }
        if (v75) {
          memmove((void *)(*a3 + 4 * v74), (const void *)(*v17 + 4 * v17[8]), 4 * v75);
        }
      }
      v74 += v75;
      v17 += 9;
      if (v17 == v18) {
        goto LABEL_195;
      }
      continue;
    }
  }
  long long __p = 0;
  unint64_t v174 = 0;
  v175 = 0;
  if ((unint64_t)v58 >= 0x5555555555555551) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  int64_t v72 = (char *)operator new(24 * v59);
  long long __p = v72;
  v175 = &v72[24 * v59];
  uint64_t v73 = v72;
  do
  {
    *(void *)uint64_t v73 = -1;
    *((void *)v73 + 1) = -1;
    *((void *)v73 + 2) = 1;
    v73 += 24;
  }
  while (v73 != &v72[24 * v59]);
  unint64_t v174 = &v72[24 * v59];
  if (v17 != v18) {
    goto LABEL_104;
  }
LABEL_116:
  if (v72)
  {
    unint64_t v174 = v72;
    goto LABEL_194;
  }
LABEL_195:
  if (v176)
  {
    unint64_t v177 = (char *)v176;
    operator delete(v176);
  }
}

void sub_1925545F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  nitro::ndarray<float>::~ndarray(a10);
  if (a23) {
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::copy(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = a1[3] - v1;
  if (v2)
  {
    unint64_t v3 = v2 >> 3;
    uint64_t v4 = a1[5];
    if (v3 <= 1) {
      unint64_t v3 = 1;
    }
    if (v3 < 2)
    {
      unint64_t v5 = 0;
      uint64_t v6 = 0;
LABEL_10:
      unint64_t v12 = v3 - v5;
      uint64_t v13 = 8 * v5;
      uint64_t v14 = (uint64_t *)(v4 + v13);
      unint64_t v15 = (uint64_t *)(v1 + v13);
      do
      {
        uint64_t v16 = *v15++;
        uint64_t v17 = v16 - 1;
        uint64_t v18 = *v14++;
        v6 += v18 * v17;
        --v12;
      }
      while (v12);
      goto LABEL_12;
    }
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    unint64_t v5 = v3 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v9 = (void *)(v1 + 8);
    unsigned __int8 v10 = (void *)(v4 + 8);
    unint64_t v11 = v3 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v7 += *(v10 - 1) * (*(v9 - 1) - 1);
      v8 += *v10 * (*v9 - 1);
      v9 += 2;
      v10 += 2;
      v11 -= 2;
    }
    while (v11);
    uint64_t v6 = v8 + v7;
    if (v3 != v5) {
      goto LABEL_10;
    }
  }
LABEL_12:
  operator new[]();
}

void sub_192554910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void nitro::ndarray<float>::concat(std::vector<nitro::ndarray<float>> const&,unsigned long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"arr.shape().size()", 18);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"outshape.size()", 15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  unsigned __int8 v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  unint64_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 182, 1);
    std::stringbuf::str();
    unint64_t v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      uint64_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::ndarray<float>::concat(std::vector<nitro::ndarray<float>> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192554C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::concat(std::vector<nitro::ndarray<float>> const&,unsigned long)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"arr.shape()[i]", 14);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"outshape[i]", 11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  unsigned __int8 v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  unint64_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 184, 1);
    std::stringbuf::str();
    unint64_t v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      uint64_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::ndarray<float>::concat(std::vector<nitro::ndarray<float>> const&,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192554FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::concat(std::vector<nitro::ndarray<float>> const&,unsigned long)::{lambda(void)#3}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"arrs[arrid].num_elem()", 22);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"contiguous_copy_size[arrid] * ncopies", 37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  unsigned __int8 v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  unint64_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 236, 1);
    std::stringbuf::str();
    unint64_t v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      uint64_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::ndarray<float>::concat(std::vector<nitro::ndarray<float>> const&,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192555304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::slice(void *a1@<X0>, long long **a2@<X1>, void *a3@<X8>, __n128 a4@<Q0>)
{
  long long v13 = 0uLL;
  uint64_t v14 = 0;
  nitro::ndarray_impl::compute_slice(a2, a1 + 2, a1 + 5, a1[8], &v6, a4);
  long long v13 = v6;
  uint64_t v14 = v7;
  *(_OWORD *)long long __p = v8;
  uint64_t v12 = v9;
  nitro::ndarray<float>::ndarray(a3, a1, (uint64_t)&v13, (uint64_t)__p, v10);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((void)v13)
  {
    *((void *)&v13 + 1) = v13;
    operator delete((void *)v13);
  }
}

void sub_1925553E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    unsigned __int8 v20 = *(void **)(v18 - 48);
    if (!v20) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unsigned __int8 v20 = *(void **)(v18 - 48);
    if (!v20) {
      goto LABEL_3;
    }
  }
  *(void *)(v18 - 40) = v20;
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

uint64_t *nitro::ndarray<float>::assign<float>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (char *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - v4) >> 3;
  long long v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == v4) {
    return a1;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - v4) >> 3;
  if (*(void *)v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    uint64_t v10 = *(void *)&v4[8 * v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<float>::assign<float>(nitro::ndarray<float> const&)::{lambda(void)#1}::operator()();
  if (v3 != v4 && *a1)
  {
    unint64_t v12 = v3 - v4 - 8;
    if (v12 >= 8)
    {
      uint64_t v15 = (v12 >> 3) + 1;
      uint64_t v14 = &v4[8 * (v15 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v16 = v4 + 8;
      uint64_t v17 = 1;
      uint64_t v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v19 = 1;
      do
      {
        v17 *= *(v16 - 1);
        v19 *= *v16;
        v16 += 2;
        v18 -= 2;
      }
      while (v18);
      uint64_t v13 = v19 * v17;
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_21:
        if (v13) {
          nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::assign<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(a1, a2);
        }
        return a1;
      }
    }
    else
    {
      uint64_t v13 = 1;
      uint64_t v14 = (char *)a1[2];
    }
    do
    {
      uint64_t v20 = *(void *)v14;
      v14 += 8;
      v13 *= v20;
    }
    while (v14 != v3);
    goto LABEL_21;
  }
  return a1;
}

void nitro::ndarray<float>::concat(std::vector<nitro::ndarray<float>> const&,unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 182, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    long long v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925556BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925556D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925556C8);
}

void nitro::ndarray<float>::concat(std::vector<nitro::ndarray<float>> const&,unsigned long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 184, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    long long v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192555834(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192555848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192555840);
}

void nitro::ndarray<float>::concat(std::vector<nitro::ndarray<float>> const&,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 236, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    long long v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925559AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925559C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925559B8);
}

void nitro::ndarray<float>::assign<float>(nitro::ndarray<float> const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<float>& nitro::ndarray<float>::assign<float>(nitro::ndarray<float> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192555C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

__n128 nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::assign<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (unint64_t *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  long long v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return result;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::assign<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>& nitro::ndarray<float>::assign<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 != (char *)v4)
  {
    uint64_t v13 = *a1;
    if (*a1)
    {
      if (v12 - 8 >= 8)
      {
        unint64_t v16 = ((v12 - 8) >> 3) + 1;
        std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
        uint64_t v17 = v4 + 1;
        uint64_t v18 = 1;
        uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
        uint64_t v20 = 1;
        do
        {
          v18 *= *(v17 - 1);
          v20 *= *v17;
          v17 += 2;
          v19 -= 2;
        }
        while (v19);
        uint64_t v14 = v20 * v18;
        if (v16 == (v16 & 0x3FFFFFFFFFFFFFFELL)) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v14 = 1;
        std::locale v15 = (unint64_t *)a1[2];
      }
      do
      {
        uint64_t v21 = *v15++;
        v14 *= v21;
      }
      while (v15 != (unint64_t *)v3);
LABEL_21:
      if (!v14) {
        return result;
      }
      uint64_t v22 = (uint64_t)v12 >> 3;
      uint64_t v158 = *a1;
      if ((uint64_t)v12 >> 3 != 3)
      {
        if (v22 != 2)
        {
          if (v22 == 1)
          {
            unint64_t v23 = *v4;
            if (!*v4) {
              return result;
            }
            uint64_t v24 = a2[8];
            uint64_t v25 = a1[8];
            uint64_t v26 = *a2;
            uint64_t v27 = *(void *)a1[5];
            uint64_t v28 = *(void *)a2[5];
            if (v23 < 0xC) {
              goto LABEL_27;
            }
            unint64_t v29 = 0;
            if (v27 != 1 || v28 != 1) {
              goto LABEL_28;
            }
            float32x4_t v142 = (__n128 *)(4 * v25 + v13);
            uint64_t v143 = (__n128 *)(4 * v24 + v26);
            if ((unint64_t)((char *)v142 - (char *)v143) < 0x20)
            {
LABEL_27:
              unint64_t v29 = 0;
            }
            else
            {
              unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF8;
              v24 += v23 & 0xFFFFFFFFFFFFFFF8;
              v25 += v23 & 0xFFFFFFFFFFFFFFF8;
              unint64_t v144 = v143 + 1;
              uint64_t v145 = v142 + 1;
              unint64_t v146 = v23 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                __n128 result = v144[-1];
                __n128 v147 = *v144;
                v145[-1] = result;
                __n128 *v145 = v147;
                v144 += 2;
                v145 += 2;
                v146 -= 8;
              }
              while (v146);
              if (v23 == v29) {
                return result;
              }
            }
LABEL_28:
            unint64_t v30 = v23 - v29;
            uint64_t v31 = (unsigned __int32 *)(v26 + 4 * v24);
            uint64_t v32 = 4 * v27;
            unint64_t v33 = (unsigned __int32 *)(v13 + 4 * v25);
            do
            {
              result.n128_u32[0] = *v31;
              unsigned __int32 *v33 = *v31;
              v31 += v28;
              unint64_t v33 = (unsigned __int32 *)((char *)v33 + v32);
              --v30;
            }
            while (v30);
            return result;
          }
          if ((v12 & 0x8000000000000000) != 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v103 = operator new(v12);
          bzero(v103, v12 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v104 = *a2;
          if (v12 >> 3 <= 1) {
            unint64_t v105 = 1;
          }
          else {
            unint64_t v105 = v12 >> 3;
          }
          uint64_t v106 = a2[5];
          uint64_t v107 = a2[8];
          uint64_t v108 = v105 & 0x1FFFFFFFFFFFFFFELL;
          uint64_t v109 = a1[5];
          while (v105 >= 2)
          {
            uint64_t v112 = 0;
            uint64_t v113 = 0;
            uint64_t v114 = v105 & 0x1FFFFFFFFFFFFFFELL;
            unint64_t v115 = (void *)(v109 + 8);
            unint64_t v116 = v103 + 1;
            do
            {
              v112 += *(v115 - 1) * *(v116 - 1);
              v113 += *v115 * *v116;
              v116 += 2;
              v115 += 2;
              v114 -= 2;
            }
            while (v114);
            uint64_t v110 = v113 + v112;
            uint64_t v111 = v105 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v13 = v158;
            if (v105 != v108) {
              goto LABEL_84;
            }
LABEL_86:
            if (v105 < 2)
            {
              uint64_t v124 = 0;
              uint64_t v125 = 0;
LABEL_91:
              unint64_t v131 = v105 - v125;
              uint64_t v132 = v125;
              uint64_t v133 = (uint64_t *)(v106 + 8 * v125);
              uint64_t v134 = &v103[v132];
              do
              {
                uint64_t v136 = *v134++;
                uint64_t v135 = v136;
                uint64_t v137 = *v133++;
                v124 += v137 * v135;
                --v131;
              }
              while (v131);
              goto LABEL_93;
            }
            uint64_t v126 = 0;
            uint64_t v127 = 0;
            uint64_t v128 = v105 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v129 = (void *)(v106 + 8);
            uint64_t v130 = v103 + 1;
            do
            {
              v126 += *(v129 - 1) * *(v130 - 1);
              v127 += *v129 * *v130;
              v130 += 2;
              v129 += 2;
              v128 -= 2;
            }
            while (v128);
            uint64_t v124 = v127 + v126;
            uint64_t v125 = v105 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v13 = v158;
            if (v105 != v108) {
              goto LABEL_91;
            }
LABEL_93:
            *(_DWORD *)(v13 + 4 * v110) = *(_DWORD *)(v104 + 4 * (v107 + v124));
            if ((int)(v12 >> 3) >= 1)
            {
              uint64_t v138 = (v12 >> 3) + 1;
              int v139 = v12 >> 3;
              while (1)
              {
                uint64_t v140 = (v138 - 2);
                unint64_t v141 = v103[v140] + 1;
                v103[v140] = v141;
                if (v141 < v4[v140]) {
                  break;
                }
                v103[(v138 - 2)] = 0;
                --v139;
                if ((unint64_t)--v138 <= 1) {
                  goto LABEL_99;
                }
              }
              if (v139 > 0) {
                continue;
              }
            }
LABEL_99:
            operator delete(v103);
            return result;
          }
          uint64_t v110 = 0;
          uint64_t v111 = 0;
LABEL_84:
          unint64_t v117 = v105 - v111;
          uint64_t v118 = v111;
          uint64_t v119 = (uint64_t *)(v109 + 8 * v111);
          uint64_t v120 = &v103[v118];
          do
          {
            uint64_t v122 = *v120++;
            uint64_t v121 = v122;
            uint64_t v123 = *v119++;
            v110 += v123 * v121;
            --v117;
          }
          while (v117);
          goto LABEL_86;
        }
        unint64_t v35 = *v4;
        if (!*v4) {
          return result;
        }
        uint64_t v36 = 0;
        uint64_t v37 = a2[8];
        uint64_t v38 = a1[8];
        unint64_t v39 = v4[1];
        uint64_t v40 = *a2;
        uint64_t v41 = (uint64_t *)a2[5];
        uint64_t v42 = (uint64_t *)a1[5];
        uint64_t v43 = *v42;
        uint64_t v44 = (__n128 *)(v13 + 4 * v38);
        uint64_t v45 = 4 * *v42;
        uint64_t v46 = *a2 + 4 * v37;
        uint64_t v47 = *v41;
        uint64_t v48 = 4 * *v41;
        unint64_t v49 = v39 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v50 = v44 + 1;
        uint64_t v51 = (__n128 *)(v46 + 16);
        while (!v39)
        {
LABEL_33:
          v38 += v43;
          v37 += v47;
          ++v36;
          unint64_t v50 = (__n128 *)((char *)v50 + v45);
          uint64_t v51 = (__n128 *)((char *)v51 + v48);
          if (v36 == v35) {
            return result;
          }
        }
        uint64_t v52 = v42[1];
        uint64_t v53 = v41[1];
        if (v39 >= 8)
        {
          unint64_t v54 = 0;
          if (v52 == 1 && v53 == 1)
          {
            uint64_t v55 = v37;
            uint64_t v56 = v38;
            if ((unint64_t)v44->n128_u64 + v45 * v36 - v46 - v48 * v36 >= 0x20)
            {
              uint64_t v55 = v37 + v49 * v53;
              uint64_t v63 = v51;
              int64x2_t v64 = v50;
              unint64_t v65 = v39 & 0xFFFFFFFFFFFFFFF8;
              uint64_t v56 = v38 + v49 * v52;
              do
              {
                __n128 result = v63[-1];
                __n128 v66 = *v63;
                v64[-1] = result;
                __n128 *v64 = v66;
                v64 += 2;
                v63 += 2;
                v65 -= 8;
              }
              while (v65);
              unint64_t v54 = v39 & 0xFFFFFFFFFFFFFFF8;
              if (v39 == v49) {
                goto LABEL_33;
              }
            }
            goto LABEL_38;
          }
        }
        else
        {
          unint64_t v54 = 0;
        }
        uint64_t v55 = v37;
        uint64_t v56 = v38;
LABEL_38:
        unint64_t v57 = v39 - v54;
        uint64_t v58 = (unsigned __int32 *)(v40 + 4 * v55);
        uint64_t v59 = 4 * v53;
        uint64_t v60 = 4 * v52;
        uint64_t v61 = (unsigned __int32 *)(v158 + 4 * v56);
        do
        {
          result.n128_u32[0] = *v58;
          *uint64_t v61 = *v58;
          uint64_t v58 = (unsigned __int32 *)((char *)v58 + v59);
          uint64_t v61 = (unsigned __int32 *)((char *)v61 + v60);
          --v57;
        }
        while (v57);
        goto LABEL_33;
      }
      unint64_t v154 = *v4;
      if (!*v4) {
        return result;
      }
      uint64_t v67 = 0;
      uint64_t v68 = a2[8];
      uint64_t v69 = a1[8];
      unint64_t v70 = v4[1];
      unint64_t v71 = (uint64_t *)a1[5];
      uint64_t v150 = (uint64_t *)a2[5];
      uint64_t v151 = a1[2];
      uint64_t v152 = *v150;
      uint64_t v153 = *v71;
      uint64_t v156 = 4 * *v71;
      uint64_t v155 = 4 * *v150;
      uint64_t v148 = 4 * v68;
      uint64_t v149 = (__n128 *)(v13 + 4 * v69);
      int64_t v72 = v149 + 1;
      uint64_t v73 = 4 * v68 + 16;
      while (!v70)
      {
LABEL_53:
        v69 += v153;
        v68 += v152;
        ++v67;
        int64_t v72 = (__n128 *)((char *)v72 + v156);
        v73 += v155;
        if (v67 == v154) {
          return result;
        }
      }
      uint64_t v74 = 0;
      unint64_t v75 = *(void *)(v151 + 16);
      uint64_t v76 = *a2;
      uint64_t v77 = v71[1];
      uint64_t v78 = v150[1];
      uint64_t v79 = 4 * v77;
      uint64_t v80 = v148 + v155 * v67 + *a2;
      uint64_t v81 = 4 * v78;
      unint64_t v82 = v75 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v83 = a2[5];
      uint64_t v84 = (__n128 *)(*a2 + v73);
      uint64_t v85 = v72;
      uint64_t v86 = v68;
      uint64_t v87 = v69;
      while (!v75)
      {
LABEL_56:
        v87 += v77;
        v86 += v78;
        ++v74;
        uint64_t v85 = (__n128 *)((char *)v85 + v79);
        uint64_t v84 = (__n128 *)((char *)v84 + v81);
        if (v74 == v70) {
          goto LABEL_53;
        }
      }
      uint64_t v88 = v71[2];
      uint64_t v89 = *(void *)(v83 + 16);
      if (v75 >= 8)
      {
        unint64_t v90 = 0;
        if (v88 == 1 && v89 == 1)
        {
          uint64_t v91 = v86;
          uint64_t v92 = v87;
          if ((unint64_t)v149->n128_u64 + v156 * v67 + v79 * v74 - v80 - v81 * v74 >= 0x20)
          {
            uint64_t v91 = v86 + v82 * v89;
            uint64_t v99 = v84;
            uint64_t v100 = v85;
            unint64_t v101 = v75 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v92 = v87 + v82 * v88;
            do
            {
              __n128 result = v99[-1];
              __n128 v102 = *v99;
              v100[-1] = result;
              *uint64_t v100 = v102;
              v100 += 2;
              v99 += 2;
              v101 -= 8;
            }
            while (v101);
            unint64_t v90 = v75 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v13 = v158;
            if (v75 == v82) {
              goto LABEL_56;
            }
          }
          goto LABEL_61;
        }
      }
      else
      {
        unint64_t v90 = 0;
      }
      uint64_t v91 = v86;
      uint64_t v92 = v87;
LABEL_61:
      unint64_t v93 = v75 - v90;
      unint64_t v94 = (unsigned __int32 *)(v76 + 4 * v91);
      uint64_t v95 = 4 * v89;
      uint64_t v96 = 4 * v88;
      unint64_t v97 = (unsigned __int32 *)(v13 + 4 * v92);
      do
      {
        result.n128_u32[0] = *v94;
        unsigned __int32 *v97 = *v94;
        unint64_t v94 = (unsigned __int32 *)((char *)v94 + v95);
        unint64_t v97 = (unsigned __int32 *)((char *)v97 + v96);
        --v93;
      }
      while (v93);
      goto LABEL_56;
    }
  }
  return result;
}

void sub_1925563A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>& nitro::ndarray<float>::assign<float>(nitro::ndarray<float> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    long long v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192556504(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192556518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192556510);
}

void nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::assign<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>& nitro::ndarray<float>::assign<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::assign<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>& nitro::ndarray<float>::assign<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925567C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::assign<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>& nitro::ndarray<float>::assign<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    long long v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192556948(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19255695C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192556954);
}

void nitro::ndarray_container::visit<nitro::operator<<(std::ostream &,nitro::ndarray_container const&)::$_0>(nitro::operator<<(std::ostream &,nitro::ndarray_container const&)::$_0)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    size_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    unsigned __int8 v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::locale v15 = v23;
      }
      else {
        std::locale v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  uint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192556BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void *nitro::operator<<<unsigned char>(void *a1, void *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"<", 1);
  if (a2[3] != a2[2])
  {
    unint64_t v4 = 0;
    do
    {
      std::ostream::operator<<();
      ++v4;
      unint64_t v5 = (uint64_t)(a2[3] - a2[2]) >> 3;
      if (v4 < v5)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)",", 1);
        unint64_t v5 = (uint64_t)(a2[3] - a2[2]) >> 3;
      }
    }
    while (v4 < v5);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)">", 1);
  nitro::ndarray<unsigned char>::print_truncated(a2, a1, 0x64uLL);
  return a1;
}

void nitro::ndarray<unsigned char>::print_truncated(void *a1, void *a2, unint64_t a3)
{
  uint64_t v7 = (char *)a1[2];
  long long v6 = (char *)a1[3];
  uint64_t v8 = v6 - v7;
  if (v6 == v7)
  {
    uint64_t v67 = 0;
    unint64_t v9 = 0;
  }
  else
  {
    if (v8 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = (char *)operator new(v6 - v7);
    uint64_t v67 = &v9[8 * (v8 >> 3)];
    bzero(v9, v8 & 0xFFFFFFFFFFFFFFF8);
    if (*a1)
    {
      if ((unint64_t)(v8 - 8) >= 8)
      {
        unint64_t v12 = ((unint64_t)(v8 - 8) >> 3) + 1;
        uint64_t v11 = &v7[8 * (v12 & 0x3FFFFFFFFFFFFFFELL)];
        unsigned __int8 v13 = v7 + 8;
        uint64_t v14 = 1;
        uint64_t v15 = v12 & 0x3FFFFFFFFFFFFFFELL;
        uint64_t v16 = 1;
        do
        {
          v14 *= *(v13 - 1);
          v16 *= *v13;
          v13 += 2;
          v15 -= 2;
        }
        while (v15);
        uint64_t v10 = v16 * v14;
        if (v12 == (v12 & 0x3FFFFFFFFFFFFFFELL))
        {
LABEL_11:
          if (v10) {
            goto LABEL_13;
          }
          goto LABEL_12;
        }
      }
      else
      {
        uint64_t v10 = 1;
        uint64_t v11 = v7;
      }
      do
      {
        uint64_t v17 = *(void *)v11;
        v11 += 8;
        v10 *= v17;
      }
      while (v11 != v6);
      goto LABEL_11;
    }
  }
LABEL_12:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[]", 2);
LABEL_13:
  uint64_t v18 = v67 - v9;
  if (v67 != v9)
  {
    unint64_t v19 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[", 1);
      ++v19;
    }
    while (v19 < v18 >> 3);
  }
  unsigned __int8 v21 = (char *)a1[2];
  uint64_t v20 = (char *)a1[3];
  if (v20 == v21 || !*a1)
  {
    unint64_t v23 = 0;
    goto LABEL_25;
  }
  unint64_t v22 = v20 - v21 - 8;
  if (v22 < 8)
  {
    unint64_t v23 = 1;
    unsigned __int8 v24 = (char *)a1[2];
    do
    {
LABEL_24:
      uint64_t v30 = *(void *)v24;
      v24 += 8;
      v23 *= v30;
    }
    while (v24 != v20);
    goto LABEL_25;
  }
  uint64_t v25 = (v22 >> 3) + 1;
  unsigned __int8 v24 = &v21[8 * (v25 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v26 = v21 + 8;
  uint64_t v27 = 1;
  uint64_t v28 = v25 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v29 = 1;
  do
  {
    v27 *= *(v26 - 1);
    v29 *= *v26;
    v26 += 2;
    v28 -= 2;
  }
  while (v28);
  unint64_t v23 = v29 * v27;
  if (v25 != (v25 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_24;
  }
LABEL_25:
  if (a3)
  {
    uint64_t v31 = v18 >> 3;
    BOOL v32 = 1;
    uint64_t v33 = ",";
    unint64_t v34 = a3;
    while (1)
    {
      if (!v32) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v33, 1);
      }
      uint64_t v35 = v67 - v9;
      if (v67 == v9)
      {
        uint64_t v38 = 0;
        goto LABEL_40;
      }
      unint64_t v36 = v35 >> 3;
      uint64_t v37 = a1[5];
      if ((unint64_t)(v35 >> 3) <= 1) {
        unint64_t v36 = 1;
      }
      if (v36 < 2) {
        break;
      }
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      unint64_t v39 = v36 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v42 = v9 + 8;
      uint64_t v43 = (void *)(v37 + 8);
      unint64_t v44 = v36 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v40 += *(v43 - 1) * *(v42 - 1);
        v41 += *v43 * *v42;
        v42 += 2;
        v43 += 2;
        v44 -= 2;
      }
      while (v44);
      uint64_t v38 = v41 + v40;
      if (v36 != v39) {
        goto LABEL_38;
      }
LABEL_40:
      char v68 = *(unsigned char *)(*a1 + a1[8] + v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)&v68, 1);
      unint64_t v52 = (unint64_t)v35 >> 3;
      if ((int)((unint64_t)v35 >> 3) >= 1)
      {
        uint64_t v53 = a1[2];
        uint64_t v54 = ((unint64_t)v35 >> 3) + 1;
        while (1)
        {
          uint64_t v55 = 8 * (v54 - 2);
          unint64_t v56 = *(void *)&v9[v55] + 1;
          *(void *)&v9[v55] = v56;
          if (v56 < *(void *)(v53 + v55)) {
            break;
          }
          *(void *)&v9[8 * (v54 - 2)] = 0;
          LODWORD(v52) = v52 - 1;
          if ((unint64_t)--v54 <= 1) {
            goto LABEL_54;
          }
        }
        if ((int)v52 >= 1)
        {
          unint64_t v66 = v31;
          unint64_t v57 = v34;
          uint64_t v58 = v33;
          unint64_t v59 = a3;
          unint64_t v60 = v52 & ~((int)v52 >> 31);
          unint64_t v61 = v35 >> 3;
          unint64_t v62 = v60;
          if (v61 <= v60)
          {
            a3 = v59;
            uint64_t v33 = v58;
            unint64_t v63 = v57;
            uint64_t v31 = v66;
          }
          else
          {
            do
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"]", 1);
              ++v62;
            }
            while (v62 < v61);
            a3 = v59;
            uint64_t v33 = v58;
            unint64_t v63 = v57;
            uint64_t v31 = v66;
            if (v61 > v60)
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v33, 1);
              unint64_t v64 = v60;
              do
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[", 1);
                ++v64;
              }
              while (v64 < v66);
              unint64_t v61 = v66;
            }
          }
          BOOL v32 = v61 > v60;
          unint64_t v34 = v63 - 1;
          if (v34) {
            continue;
          }
        }
      }
      goto LABEL_54;
    }
    uint64_t v38 = 0;
    unint64_t v39 = 0;
LABEL_38:
    unint64_t v45 = v36 - v39;
    uint64_t v46 = 8 * v39;
    uint64_t v47 = (uint64_t *)(v37 + v46);
    uint64_t v48 = (uint64_t *)&v9[v46];
    do
    {
      uint64_t v50 = *v48++;
      uint64_t v49 = v50;
      uint64_t v51 = *v47++;
      v38 += v51 * v49;
      --v45;
    }
    while (v45);
    goto LABEL_40;
  }
LABEL_54:
  if (v23 > a3) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"...", 3);
  }
  if (v67 != v9)
  {
    unint64_t v65 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"]", 1);
      ++v65;
    }
    while (v65 < (v67 - v9) >> 3);
  }
  if (v9) {
    operator delete(v9);
  }
}

void sub_19255721C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v12) {
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void *nitro::operator<<<int>(void *a1, void *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"<", 1);
  if (a2[3] != a2[2])
  {
    unint64_t v4 = 0;
    do
    {
      std::ostream::operator<<();
      ++v4;
      unint64_t v5 = (uint64_t)(a2[3] - a2[2]) >> 3;
      if (v4 < v5)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)",", 1);
        unint64_t v5 = (uint64_t)(a2[3] - a2[2]) >> 3;
      }
    }
    while (v4 < v5);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)">", 1);
  nitro::ndarray<int>::print_truncated(a2, a1, 0x64uLL);
  return a1;
}

void nitro::ndarray<int>::print_truncated(void *a1, void *a2, unint64_t a3)
{
  uint64_t v7 = (char *)a1[2];
  long long v6 = (char *)a1[3];
  uint64_t v8 = v6 - v7;
  if (v6 == v7)
  {
    uint64_t v67 = 0;
    unint64_t v9 = 0;
  }
  else
  {
    if (v8 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = (char *)operator new(v6 - v7);
    uint64_t v67 = &v9[8 * (v8 >> 3)];
    bzero(v9, v8 & 0xFFFFFFFFFFFFFFF8);
    if (*a1)
    {
      if ((unint64_t)(v8 - 8) >= 8)
      {
        unint64_t v12 = ((unint64_t)(v8 - 8) >> 3) + 1;
        uint64_t v11 = &v7[8 * (v12 & 0x3FFFFFFFFFFFFFFELL)];
        unsigned __int8 v13 = v7 + 8;
        uint64_t v14 = 1;
        uint64_t v15 = v12 & 0x3FFFFFFFFFFFFFFELL;
        uint64_t v16 = 1;
        do
        {
          v14 *= *(v13 - 1);
          v16 *= *v13;
          v13 += 2;
          v15 -= 2;
        }
        while (v15);
        uint64_t v10 = v16 * v14;
        if (v12 == (v12 & 0x3FFFFFFFFFFFFFFELL))
        {
LABEL_11:
          if (v10) {
            goto LABEL_13;
          }
          goto LABEL_12;
        }
      }
      else
      {
        uint64_t v10 = 1;
        uint64_t v11 = v7;
      }
      do
      {
        uint64_t v17 = *(void *)v11;
        v11 += 8;
        v10 *= v17;
      }
      while (v11 != v6);
      goto LABEL_11;
    }
  }
LABEL_12:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[]", 2);
LABEL_13:
  uint64_t v18 = v67 - v9;
  if (v67 != v9)
  {
    unint64_t v19 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[", 1);
      ++v19;
    }
    while (v19 < v18 >> 3);
  }
  unsigned __int8 v21 = (char *)a1[2];
  uint64_t v20 = (char *)a1[3];
  if (v20 == v21 || !*a1)
  {
    unint64_t v23 = 0;
    goto LABEL_25;
  }
  unint64_t v22 = v20 - v21 - 8;
  if (v22 < 8)
  {
    unint64_t v23 = 1;
    unsigned __int8 v24 = (char *)a1[2];
    do
    {
LABEL_24:
      uint64_t v30 = *(void *)v24;
      v24 += 8;
      v23 *= v30;
    }
    while (v24 != v20);
    goto LABEL_25;
  }
  uint64_t v25 = (v22 >> 3) + 1;
  unsigned __int8 v24 = &v21[8 * (v25 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v26 = v21 + 8;
  uint64_t v27 = 1;
  uint64_t v28 = v25 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v29 = 1;
  do
  {
    v27 *= *(v26 - 1);
    v29 *= *v26;
    v26 += 2;
    v28 -= 2;
  }
  while (v28);
  unint64_t v23 = v29 * v27;
  if (v25 != (v25 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_24;
  }
LABEL_25:
  if (a3)
  {
    uint64_t v31 = v18 >> 3;
    BOOL v32 = 1;
    uint64_t v33 = ",";
    unint64_t v34 = a3;
    while (1)
    {
      if (!v32) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v33, 1);
      }
      uint64_t v35 = v67 - v9;
      if (v67 != v9)
      {
        unint64_t v36 = v35 >> 3;
        uint64_t v37 = a1[5];
        if ((unint64_t)(v35 >> 3) <= 1) {
          unint64_t v36 = 1;
        }
        if (v36 < 2)
        {
          uint64_t v38 = 0;
          unint64_t v39 = 0;
LABEL_38:
          unint64_t v45 = v36 - v39;
          uint64_t v46 = 8 * v39;
          uint64_t v47 = (uint64_t *)(v37 + v46);
          uint64_t v48 = (uint64_t *)&v9[v46];
          do
          {
            uint64_t v50 = *v48++;
            uint64_t v49 = v50;
            uint64_t v51 = *v47++;
            v38 += v51 * v49;
            --v45;
          }
          while (v45);
          goto LABEL_40;
        }
        uint64_t v40 = 0;
        uint64_t v41 = 0;
        unint64_t v39 = v36 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v42 = v9 + 8;
        uint64_t v43 = (void *)(v37 + 8);
        unint64_t v44 = v36 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v40 += *(v43 - 1) * *(v42 - 1);
          v41 += *v43 * *v42;
          v42 += 2;
          v43 += 2;
          v44 -= 2;
        }
        while (v44);
        uint64_t v38 = v41 + v40;
        if (v36 != v39) {
          goto LABEL_38;
        }
      }
LABEL_40:
      std::ostream::operator<<();
      unint64_t v52 = (unint64_t)v35 >> 3;
      if ((int)((unint64_t)v35 >> 3) >= 1)
      {
        uint64_t v53 = a1[2];
        uint64_t v54 = ((unint64_t)v35 >> 3) + 1;
        while (1)
        {
          uint64_t v55 = 8 * (v54 - 2);
          unint64_t v56 = *(void *)&v9[v55] + 1;
          *(void *)&v9[v55] = v56;
          if (v56 < *(void *)(v53 + v55)) {
            break;
          }
          *(void *)&v9[8 * (v54 - 2)] = 0;
          LODWORD(v52) = v52 - 1;
          if ((unint64_t)--v54 <= 1) {
            goto LABEL_54;
          }
        }
        if ((int)v52 >= 1)
        {
          unint64_t v66 = v31;
          unint64_t v57 = v34;
          uint64_t v58 = v33;
          unint64_t v59 = a3;
          unint64_t v60 = v52 & ~((int)v52 >> 31);
          unint64_t v61 = v35 >> 3;
          unint64_t v62 = v60;
          if (v61 <= v60)
          {
            a3 = v59;
            uint64_t v33 = v58;
            unint64_t v63 = v57;
            uint64_t v31 = v66;
          }
          else
          {
            do
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"]", 1);
              ++v62;
            }
            while (v62 < v61);
            a3 = v59;
            uint64_t v33 = v58;
            unint64_t v63 = v57;
            uint64_t v31 = v66;
            if (v61 > v60)
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v33, 1);
              unint64_t v64 = v60;
              do
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[", 1);
                ++v64;
              }
              while (v64 < v66);
              unint64_t v61 = v66;
            }
          }
          BOOL v32 = v61 > v60;
          unint64_t v34 = v63 - 1;
          if (v34) {
            continue;
          }
        }
      }
      break;
    }
  }
LABEL_54:
  if (v23 > a3) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"...", 3);
  }
  if (v67 != v9)
  {
    unint64_t v65 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"]", 1);
      ++v65;
    }
    while (v65 < (v67 - v9) >> 3);
  }
  if (v9)
  {
    operator delete(v9);
  }
}

void sub_19255779C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (v13) {
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void *nitro::operator<<<half>(void *a1, void *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"<", 1);
  if (a2[3] != a2[2])
  {
    unint64_t v4 = 0;
    do
    {
      std::ostream::operator<<();
      ++v4;
      unint64_t v5 = (uint64_t)(a2[3] - a2[2]) >> 3;
      if (v4 < v5)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)",", 1);
        unint64_t v5 = (uint64_t)(a2[3] - a2[2]) >> 3;
      }
    }
    while (v4 < v5);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)">", 1);
  nitro::ndarray<half>::print_truncated(a2, a1, 0x64uLL);
  return a1;
}

void nitro::ndarray<half>::print_truncated(void *a1, void *a2, unint64_t a3)
{
  uint64_t v7 = (char *)a1[2];
  long long v6 = (char *)a1[3];
  uint64_t v8 = v6 - v7;
  if (v6 == v7)
  {
    uint64_t v73 = 0;
    unint64_t v9 = 0;
  }
  else
  {
    if (v8 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = (char *)operator new(v6 - v7);
    uint64_t v73 = &v9[8 * (v8 >> 3)];
    bzero(v9, v8 & 0xFFFFFFFFFFFFFFF8);
    if (*a1)
    {
      if ((unint64_t)(v8 - 8) >= 8)
      {
        unint64_t v12 = ((unint64_t)(v8 - 8) >> 3) + 1;
        uint64_t v11 = &v7[8 * (v12 & 0x3FFFFFFFFFFFFFFELL)];
        unsigned __int8 v13 = v7 + 8;
        uint64_t v14 = 1;
        uint64_t v15 = v12 & 0x3FFFFFFFFFFFFFFELL;
        uint64_t v16 = 1;
        do
        {
          v14 *= *(v13 - 1);
          v16 *= *v13;
          v13 += 2;
          v15 -= 2;
        }
        while (v15);
        uint64_t v10 = v16 * v14;
        if (v12 == (v12 & 0x3FFFFFFFFFFFFFFELL))
        {
LABEL_11:
          if (v10) {
            goto LABEL_13;
          }
          goto LABEL_12;
        }
      }
      else
      {
        uint64_t v10 = 1;
        uint64_t v11 = v7;
      }
      do
      {
        uint64_t v17 = *(void *)v11;
        v11 += 8;
        v10 *= v17;
      }
      while (v11 != v6);
      goto LABEL_11;
    }
  }
LABEL_12:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[]", 2);
LABEL_13:
  uint64_t v18 = v73 - v9;
  if (v73 != v9)
  {
    unint64_t v19 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[", 1);
      ++v19;
    }
    while (v19 < v18 >> 3);
  }
  unsigned __int8 v21 = (char *)a1[2];
  uint64_t v20 = (char *)a1[3];
  if (v20 == v21 || !*a1)
  {
    unint64_t v23 = 0;
    goto LABEL_25;
  }
  unint64_t v22 = v20 - v21 - 8;
  if (v22 < 8)
  {
    unint64_t v23 = 1;
    unsigned __int8 v24 = (char *)a1[2];
    do
    {
LABEL_24:
      uint64_t v30 = *(void *)v24;
      v24 += 8;
      v23 *= v30;
    }
    while (v24 != v20);
    goto LABEL_25;
  }
  uint64_t v25 = (v22 >> 3) + 1;
  unsigned __int8 v24 = &v21[8 * (v25 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v26 = v21 + 8;
  uint64_t v27 = 1;
  uint64_t v28 = v25 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v29 = 1;
  do
  {
    v27 *= *(v26 - 1);
    v29 *= *v26;
    v26 += 2;
    v28 -= 2;
  }
  while (v28);
  unint64_t v23 = v29 * v27;
  if (v25 != (v25 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_24;
  }
LABEL_25:
  if (a3)
  {
    uint64_t v31 = v18 >> 3;
    BOOL v32 = 1;
    uint64_t v33 = ",";
    unint64_t v34 = a3;
    while (1)
    {
      if (!v32) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v33, 1);
      }
      uint64_t v35 = v73 - v9;
      if (v73 == v9)
      {
        uint64_t v38 = 0;
        goto LABEL_40;
      }
      unint64_t v36 = v35 >> 3;
      uint64_t v37 = a1[5];
      if ((unint64_t)(v35 >> 3) <= 1) {
        unint64_t v36 = 1;
      }
      if (v36 < 2) {
        break;
      }
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      unint64_t v39 = v36 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v42 = v9 + 8;
      uint64_t v43 = (void *)(v37 + 8);
      unint64_t v44 = v36 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v40 += *(v43 - 1) * *(v42 - 1);
        v41 += *v43 * *v42;
        v42 += 2;
        v43 += 2;
        v44 -= 2;
      }
      while (v44);
      uint64_t v38 = v41 + v40;
      if (v36 != v39) {
        goto LABEL_38;
      }
LABEL_40:
      _H0 = *(_WORD *)(*a1 + 2 * (a1[8] + v38));
      __asm { FCVT            S0, H0 }
      std::ostream::operator<<();
      unint64_t v58 = (unint64_t)v35 >> 3;
      if ((int)((unint64_t)v35 >> 3) >= 1)
      {
        uint64_t v59 = a1[2];
        uint64_t v60 = ((unint64_t)v35 >> 3) + 1;
        while (1)
        {
          uint64_t v61 = 8 * (v60 - 2);
          unint64_t v62 = *(void *)&v9[v61] + 1;
          *(void *)&v9[v61] = v62;
          if (v62 < *(void *)(v59 + v61)) {
            break;
          }
          *(void *)&v9[8 * (v60 - 2)] = 0;
          LODWORD(v58) = v58 - 1;
          if ((unint64_t)--v60 <= 1) {
            goto LABEL_54;
          }
        }
        if ((int)v58 >= 1)
        {
          unint64_t v72 = v31;
          unint64_t v63 = v34;
          unint64_t v64 = v33;
          unint64_t v65 = a3;
          unint64_t v66 = v58 & ~((int)v58 >> 31);
          unint64_t v67 = v35 >> 3;
          unint64_t v68 = v66;
          if (v67 <= v66)
          {
            a3 = v65;
            uint64_t v33 = v64;
            unint64_t v69 = v63;
            uint64_t v31 = v72;
          }
          else
          {
            do
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"]", 1);
              ++v68;
            }
            while (v68 < v67);
            a3 = v65;
            uint64_t v33 = v64;
            unint64_t v69 = v63;
            uint64_t v31 = v72;
            if (v67 > v66)
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v33, 1);
              unint64_t v70 = v66;
              do
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[", 1);
                ++v70;
              }
              while (v70 < v72);
              unint64_t v67 = v72;
            }
          }
          BOOL v32 = v67 > v66;
          unint64_t v34 = v69 - 1;
          if (v34) {
            continue;
          }
        }
      }
      goto LABEL_54;
    }
    uint64_t v38 = 0;
    unint64_t v39 = 0;
LABEL_38:
    unint64_t v45 = v36 - v39;
    uint64_t v46 = 8 * v39;
    uint64_t v47 = (uint64_t *)(v37 + v46);
    uint64_t v48 = (uint64_t *)&v9[v46];
    do
    {
      uint64_t v50 = *v48++;
      uint64_t v49 = v50;
      uint64_t v51 = *v47++;
      v38 += v51 * v49;
      --v45;
    }
    while (v45);
    goto LABEL_40;
  }
LABEL_54:
  if (v23 > a3) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"...", 3);
  }
  if (v73 != v9)
  {
    unint64_t v71 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"]", 1);
      ++v71;
    }
    while (v71 < (v73 - v9) >> 3);
  }
  if (v9)
  {
    operator delete(v9);
  }
}

void sub_192557D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (v13) {
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void *nitro::operator<<<float>(void *a1, void *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"<", 1);
  if (a2[3] != a2[2])
  {
    unint64_t v4 = 0;
    do
    {
      std::ostream::operator<<();
      ++v4;
      unint64_t v5 = (uint64_t)(a2[3] - a2[2]) >> 3;
      if (v4 < v5)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)",", 1);
        unint64_t v5 = (uint64_t)(a2[3] - a2[2]) >> 3;
      }
    }
    while (v4 < v5);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)">", 1);
  nitro::ndarray<float>::print_truncated(a2, a1, 0x64uLL);
  return a1;
}

void nitro::ndarray<float>::print_truncated(void *a1, void *a2, unint64_t a3)
{
  uint64_t v7 = (char *)a1[2];
  long long v6 = (char *)a1[3];
  uint64_t v8 = v6 - v7;
  if (v6 == v7)
  {
    unint64_t v67 = 0;
    unint64_t v9 = 0;
  }
  else
  {
    if (v8 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = (char *)operator new(v6 - v7);
    unint64_t v67 = &v9[8 * (v8 >> 3)];
    bzero(v9, v8 & 0xFFFFFFFFFFFFFFF8);
    if (*a1)
    {
      if ((unint64_t)(v8 - 8) >= 8)
      {
        unint64_t v12 = ((unint64_t)(v8 - 8) >> 3) + 1;
        uint64_t v11 = &v7[8 * (v12 & 0x3FFFFFFFFFFFFFFELL)];
        unsigned __int8 v13 = v7 + 8;
        uint64_t v14 = 1;
        uint64_t v15 = v12 & 0x3FFFFFFFFFFFFFFELL;
        uint64_t v16 = 1;
        do
        {
          v14 *= *(v13 - 1);
          v16 *= *v13;
          v13 += 2;
          v15 -= 2;
        }
        while (v15);
        uint64_t v10 = v16 * v14;
        if (v12 == (v12 & 0x3FFFFFFFFFFFFFFELL))
        {
LABEL_11:
          if (v10) {
            goto LABEL_13;
          }
          goto LABEL_12;
        }
      }
      else
      {
        uint64_t v10 = 1;
        uint64_t v11 = v7;
      }
      do
      {
        uint64_t v17 = *(void *)v11;
        v11 += 8;
        v10 *= v17;
      }
      while (v11 != v6);
      goto LABEL_11;
    }
  }
LABEL_12:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[]", 2);
LABEL_13:
  uint64_t v18 = v67 - v9;
  if (v67 != v9)
  {
    unint64_t v19 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[", 1);
      ++v19;
    }
    while (v19 < v18 >> 3);
  }
  unsigned __int8 v21 = (char *)a1[2];
  uint64_t v20 = (char *)a1[3];
  if (v20 == v21 || !*a1)
  {
    unint64_t v23 = 0;
    goto LABEL_25;
  }
  unint64_t v22 = v20 - v21 - 8;
  if (v22 < 8)
  {
    unint64_t v23 = 1;
    unsigned __int8 v24 = (char *)a1[2];
    do
    {
LABEL_24:
      uint64_t v30 = *(void *)v24;
      v24 += 8;
      v23 *= v30;
    }
    while (v24 != v20);
    goto LABEL_25;
  }
  uint64_t v25 = (v22 >> 3) + 1;
  unsigned __int8 v24 = &v21[8 * (v25 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v26 = v21 + 8;
  uint64_t v27 = 1;
  uint64_t v28 = v25 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v29 = 1;
  do
  {
    v27 *= *(v26 - 1);
    v29 *= *v26;
    v26 += 2;
    v28 -= 2;
  }
  while (v28);
  unint64_t v23 = v29 * v27;
  if (v25 != (v25 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_24;
  }
LABEL_25:
  if (a3)
  {
    uint64_t v31 = v18 >> 3;
    BOOL v32 = 1;
    uint64_t v33 = ",";
    unint64_t v34 = a3;
    while (1)
    {
      if (!v32) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v33, 1);
      }
      uint64_t v35 = v67 - v9;
      if (v67 != v9)
      {
        unint64_t v36 = v35 >> 3;
        uint64_t v37 = a1[5];
        if ((unint64_t)(v35 >> 3) <= 1) {
          unint64_t v36 = 1;
        }
        if (v36 < 2)
        {
          uint64_t v38 = 0;
          unint64_t v39 = 0;
LABEL_38:
          unint64_t v45 = v36 - v39;
          uint64_t v46 = 8 * v39;
          uint64_t v47 = (uint64_t *)(v37 + v46);
          uint64_t v48 = (uint64_t *)&v9[v46];
          do
          {
            uint64_t v50 = *v48++;
            uint64_t v49 = v50;
            uint64_t v51 = *v47++;
            v38 += v51 * v49;
            --v45;
          }
          while (v45);
          goto LABEL_40;
        }
        uint64_t v40 = 0;
        uint64_t v41 = 0;
        unint64_t v39 = v36 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v42 = v9 + 8;
        uint64_t v43 = (void *)(v37 + 8);
        unint64_t v44 = v36 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v40 += *(v43 - 1) * *(v42 - 1);
          v41 += *v43 * *v42;
          v42 += 2;
          v43 += 2;
          v44 -= 2;
        }
        while (v44);
        uint64_t v38 = v41 + v40;
        if (v36 != v39) {
          goto LABEL_38;
        }
      }
LABEL_40:
      std::ostream::operator<<();
      unint64_t v52 = (unint64_t)v35 >> 3;
      if ((int)((unint64_t)v35 >> 3) >= 1)
      {
        uint64_t v53 = a1[2];
        uint64_t v54 = ((unint64_t)v35 >> 3) + 1;
        while (1)
        {
          uint64_t v55 = 8 * (v54 - 2);
          unint64_t v56 = *(void *)&v9[v55] + 1;
          *(void *)&v9[v55] = v56;
          if (v56 < *(void *)(v53 + v55)) {
            break;
          }
          *(void *)&v9[8 * (v54 - 2)] = 0;
          LODWORD(v52) = v52 - 1;
          if ((unint64_t)--v54 <= 1) {
            goto LABEL_54;
          }
        }
        if ((int)v52 >= 1)
        {
          unint64_t v66 = v31;
          unint64_t v57 = v34;
          unint64_t v58 = v33;
          unint64_t v59 = a3;
          unint64_t v60 = v52 & ~((int)v52 >> 31);
          unint64_t v61 = v35 >> 3;
          unint64_t v62 = v60;
          if (v61 <= v60)
          {
            a3 = v59;
            uint64_t v33 = v58;
            unint64_t v63 = v57;
            uint64_t v31 = v66;
          }
          else
          {
            do
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"]", 1);
              ++v62;
            }
            while (v62 < v61);
            a3 = v59;
            uint64_t v33 = v58;
            unint64_t v63 = v57;
            uint64_t v31 = v66;
            if (v61 > v60)
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v33, 1);
              unint64_t v64 = v60;
              do
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[", 1);
                ++v64;
              }
              while (v64 < v66);
              unint64_t v61 = v66;
            }
          }
          BOOL v32 = v61 > v60;
          unint64_t v34 = v63 - 1;
          if (v34) {
            continue;
          }
        }
      }
      break;
    }
  }
LABEL_54:
  if (v23 > a3) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"...", 3);
  }
  if (v67 != v9)
  {
    unint64_t v65 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"]", 1);
      ++v65;
    }
    while (v65 < (v67 - v9) >> 3);
  }
  if (v9)
  {
    operator delete(v9);
  }
}

void sub_192558298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (v13) {
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray_container::visit<nitro::ndarray_container const,nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,(void *)0>(nitro::ndarray_container const &,nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 230, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 230, 1);
    std::stringbuf::str();
    unsigned __int8 v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  uint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19255852C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unsigned __int8 v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        uint64_t v15 = v23;
      }
      else {
        uint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  uint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1925588AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void *nitro::ndarray<unsigned char>::operator+=<unsigned char>(void *a1, void *a2)
{
  unint64_t v3 = (char *)a1[2];
  unint64_t v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    uint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  uint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  unint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    uint64_t v15 = (void *)a2[2];
    if (v14 != (uint64_t)(a2[3] - (void)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<unsigned char>::operator+<unsigned char>(a1, a2);
    nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(a1, a2);
  }
  return a1;
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(void *a1, void *a2)
{
  unint64_t v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[3];
  unint64_t v6 = (v5 - v4) >> 3;
  uint64_t v7 = (void *)a2[2];
  if (v6 != (uint64_t)(a2[3] - (void)v7) >> 3) {
    goto LABEL_13;
  }
  if (v5 == v4) {
    return;
  }
  uint64_t v8 = v6 <= 1 ? 1 : (v5 - v4) >> 3;
  if (*(void *)v4 != *v7) {
    goto LABEL_13;
  }
  uint64_t v9 = 1;
  do
  {
    unint64_t v10 = v9;
    if (v8 == v9) {
      break;
    }
    uint64_t v11 = *(void *)&v4[8 * v9];
    uint64_t v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6) {
LABEL_13:
  }
    nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator()();
  int64_t v13 = v5 - v4;
  if (v5 == v4 || !*a1) {
    return;
  }
  if ((unint64_t)(v13 - 8) < 8)
  {
    uint64_t v14 = 1;
    uint64_t v15 = (char *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *(void *)v15;
      v15 += 8;
      v14 *= v21;
    }
    while (v15 != v5);
    goto LABEL_21;
  }
  unint64_t v16 = ((unint64_t)(v13 - 8) >> 3) + 1;
  uint64_t v15 = &v4[8 * (v16 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v17 = v4 + 8;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  unint64_t v22 = v13 >> 3;
  if (v13 >> 3 == 3)
  {
    unint64_t v35 = *(void *)v4;
    if (*(void *)v4)
    {
      unint64_t v36 = 0;
      uint64_t v37 = a2[8];
      uint64_t v38 = a1[8];
      do
      {
        if (*((void *)v4 + 1))
        {
          unint64_t v39 = 0;
          uint64_t v40 = v37;
          uint64_t v41 = v38;
          do
          {
            if (*((void *)v4 + 2))
            {
              unint64_t v44 = 0;
              uint64_t v45 = v40;
              uint64_t v46 = v41;
              do
              {
                *(unsigned char *)(*a1 + v46) += *(unsigned char *)(*a2 + v45);
                uint64_t v42 = (void *)a1[5];
                v46 += v42[2];
                uint64_t v43 = (void *)a2[5];
                v45 += v43[2];
                ++v44;
                unint64_t v4 = (char *)a1[2];
              }
              while (v44 < *((void *)v4 + 2));
            }
            else
            {
              uint64_t v42 = (void *)a1[5];
              uint64_t v43 = (void *)a2[5];
            }
            v41 += v42[1];
            v40 += v43[1];
            ++v39;
          }
          while (v39 < *((void *)v4 + 1));
          unint64_t v35 = *(void *)v4;
        }
        else
        {
          uint64_t v42 = (void *)a1[5];
          uint64_t v43 = (void *)a2[5];
        }
        v38 += *v42;
        v37 += *v43;
        ++v36;
      }
      while (v36 < v35);
    }
  }
  else
  {
    if (v22 != 2)
    {
      if (v22 == 1)
      {
        if (*(void *)v4)
        {
          unint64_t v23 = 0;
          uint64_t v24 = a2[8];
          uint64_t v25 = a1[8];
          do
          {
            *(unsigned char *)(*a1 + v25) += *(unsigned char *)(*a2 + v24);
            v25 += *(void *)a1[5];
            v24 += *(void *)a2[5];
            ++v23;
          }
          while (v23 < *(void *)a1[2]);
        }
        return;
      }
      if (v13 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v47 = operator new(v13);
      bzero(v47, v13 & 0xFFFFFFFFFFFFFFF8);
      if (v22 <= 1) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v13 >> 3;
      }
      unint64_t v49 = v48 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        uint64_t v50 = a1[5];
        if (v48 < 2) {
          break;
        }
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        uint64_t v55 = (void *)(v50 + 8);
        unint64_t v56 = v48 & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v57 = v47 + 1;
        do
        {
          v53 += *(v55 - 1) * *(v57 - 1);
          v54 += *v55 * *v57;
          v57 += 2;
          v55 += 2;
          v56 -= 2;
        }
        while (v56);
        uint64_t v51 = v54 + v53;
        unint64_t v52 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49) {
          goto LABEL_60;
        }
LABEL_62:
        uint64_t v65 = a2[5];
        if (v48 < 2)
        {
          uint64_t v66 = 0;
          unint64_t v67 = 0;
LABEL_67:
          unint64_t v73 = v48 - v67;
          uint64_t v74 = v67;
          unint64_t v75 = (uint64_t *)(v65 + v74 * 8);
          uint64_t v76 = &v47[v74];
          do
          {
            uint64_t v78 = *v76++;
            uint64_t v77 = v78;
            uint64_t v79 = *v75++;
            v66 += v79 * v77;
            --v73;
          }
          while (v73);
          goto LABEL_69;
        }
        uint64_t v68 = 0;
        uint64_t v69 = 0;
        unint64_t v70 = (void *)(v65 + 8);
        unint64_t v71 = v48 & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v72 = v47 + 1;
        do
        {
          v68 += *(v70 - 1) * *(v72 - 1);
          v69 += *v70 * *v72;
          v72 += 2;
          v70 += 2;
          v71 -= 2;
        }
        while (v71);
        uint64_t v66 = v69 + v68;
        unint64_t v67 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49) {
          goto LABEL_67;
        }
LABEL_69:
        *(unsigned char *)(*a1 + v51) += *(unsigned char *)(*a2 + a2[8] + v66);
        if ((int)((unint64_t)v13 >> 3) >= 1)
        {
          uint64_t v80 = a1[2];
          uint64_t v81 = ((unint64_t)v13 >> 3) + 1;
          unint64_t v82 = (unint64_t)v13 >> 3;
          while (1)
          {
            uint64_t v83 = (v81 - 2);
            unint64_t v84 = v47[v83] + 1;
            v47[v83] = v84;
            if (v84 < *(void *)(v80 + v83 * 8)) {
              break;
            }
            v47[(v81 - 2)] = 0;
            LODWORD(v82) = v82 - 1;
            if ((unint64_t)--v81 <= 1) {
              goto LABEL_75;
            }
          }
          if ((int)v82 > 0) {
            continue;
          }
        }
LABEL_75:
        operator delete(v47);
        return;
      }
      uint64_t v51 = 0;
      unint64_t v52 = 0;
LABEL_60:
      unint64_t v58 = v48 - v52;
      uint64_t v59 = v52;
      unint64_t v60 = (uint64_t *)(v50 + v59 * 8);
      unint64_t v61 = &v47[v59];
      do
      {
        uint64_t v63 = *v61++;
        uint64_t v62 = v63;
        uint64_t v64 = *v60++;
        v51 += v64 * v62;
        --v58;
      }
      while (v58);
      goto LABEL_62;
    }
    unint64_t v26 = *(void *)v4;
    if (*(void *)v4)
    {
      unint64_t v27 = 0;
      uint64_t v28 = a2[8];
      uint64_t v29 = a1[8];
      do
      {
        if (*((void *)v4 + 1))
        {
          unint64_t v32 = 0;
          uint64_t v33 = v28;
          uint64_t v34 = v29;
          do
          {
            *(unsigned char *)(*a1 + v34) += *(unsigned char *)(*a2 + v33);
            uint64_t v30 = (void *)a1[5];
            v34 += v30[1];
            uint64_t v31 = (void *)a2[5];
            v33 += v31[1];
            ++v32;
            unint64_t v4 = (char *)a1[2];
          }
          while (v32 < *((void *)v4 + 1));
          unint64_t v26 = *(void *)v4;
        }
        else
        {
          uint64_t v30 = (void *)a1[5];
          uint64_t v31 = (void *)a2[5];
        }
        v29 += *v30;
        v28 += *v31;
        ++v27;
      }
      while (v27 < v26);
    }
  }
}

void sub_19255906C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::operator+<unsigned char>(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[2];
  unint64_t v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  uint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      unint64_t v39 = 0;
      uint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        uint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        unint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      unint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      unint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        uint64_t v37 = v20;
        memcpy(v19, v17, v18);
        unint64_t v36 = v20;
      }
      unint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        unint64_t v22 = &v21[8 * v10];
        unint64_t v32 = v21;
        uint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      unint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v26 = (char *)operator new(v23 - v24);
        unint64_t v27 = &v26[8 * (v25 >> 3)];
        uint64_t v29 = v26;
        uint64_t v31 = v27;
        memcpy(v26, v24, v25);
        uint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<unsigned char>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<unsigned char>::copy(&v28);
    }
  }
  nitro::ndarray<unsigned char>::copy(a1);
}

void sub_1925593F0(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_192559404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      uint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  uint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    uint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  uint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1925594A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x19255947CLL);
  }
  JUMPOUT(0x19255944CLL);
}

void sub_1925594B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x19255948CLL);
  }
  JUMPOUT(0x192559454);
}

void sub_1925594C0()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x192559464);
  }
  JUMPOUT(0x19255945CLL);
}

uint64_t nitro::ndarray<unsigned char>::operator=(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v4;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  size_t v6 = *(void **)(a1 + 16);
  if (v6)
  {
    *(void *)(a1 + 24) = v6;
    operator delete(v6);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
  *(_OWORD *)(a1 + 16) = a2[1];
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  unint64_t v7 = *(void **)(a1 + 40);
  if (v7)
  {
    *(void *)(a1 + 48) = v7;
    operator delete(v7);
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
  }
  *(_OWORD *)(a1 + 40) = *(long long *)((char *)a2 + 40);
  uint64_t v8 = *((void *)a2 + 8);
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 7) = 0;
  *(void *)(a1 + 64) = v8;
  return a1;
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192559850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        long long v4 = __p;
      }
      else {
        long long v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925599D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925599EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925599E4);
}

uint64_t *nitro::ndarray<int>::operator+=<unsigned char>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = (char *)a1[2];
  long long v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    unint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  unint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    std::locale v15 = (void *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<int>::operator+<unsigned char>(a1, a2);
    nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(a1, a2);
  }
  return a1;
}

uint32x4_t nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  long long v4 = (unint64_t *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return result;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return result;
  }
  uint64_t v13 = *a1;
  if (!*a1) {
    return result;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v16 = ((v12 - 8) >> 3) + 1;
  std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v17 = v4 + 1;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return result;
  }
  uint64_t v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v186 = *v4;
    if (!*v4) {
      return result;
    }
    uint64_t v81 = 0;
    uint64_t v82 = a2[8];
    uint64_t v83 = a1[8];
    unint64_t v84 = v4[1];
    uint64_t v85 = (uint64_t *)a1[5];
    int8x16_t v182 = (uint64_t *)a2[5];
    uint64_t v183 = v83;
    uint64_t v184 = *v182;
    uint64_t v185 = *v85;
    uint64_t v187 = 4 * *v85;
    uint64_t v181 = 4 * v83;
    uint64_t v86 = (uint32x4_t *)(v13 + 4 * v83);
    while (!v84)
    {
LABEL_64:
      v83 += v185;
      v82 += v184;
      ++v81;
      uint64_t v86 = (uint32x4_t *)((char *)v86 + v187);
      if (v81 == v186) {
        return result;
      }
    }
    uint64_t v87 = 0;
    unint64_t v88 = v4[2];
    uint64_t v89 = *a2;
    uint64_t v90 = a2[5];
    uint64_t v91 = v85[1];
    uint64_t v92 = 4 * v91;
    uint64_t v93 = v182[1];
    unint64_t v189 = v88 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v94 = v88 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v95 = v86;
    uint64_t v96 = *a2;
    uint64_t v97 = v82;
    uint64_t v98 = v83;
    while (!v88)
    {
LABEL_67:
      v98 += v91;
      v97 += v93;
      ++v87;
      v96 += v93;
      uint64_t v95 = (uint32x4_t *)((char *)v95 + v92);
      if (v87 == v84) {
        goto LABEL_64;
      }
    }
    uint64_t v99 = v85[2];
    uint64_t v100 = *(void *)(v90 + 16);
    if (v88 < 8
      || (v99 == 1 ? (BOOL v101 = v100 == 1) : (BOOL v101 = 0),
          !v101
       || (v13 + v181 + v187 * v81 + v92 * v87 < v89 + v88 + v82 + v93 * v87
         ? (BOOL v102 = v89 + v97 >= v13 + v187 * v81 + 4 * (v183 + v88) + v92 * v87)
         : (BOOL v102 = 1),
           !v102)))
    {
      unint64_t v112 = 0;
      uint64_t v104 = v97;
      uint64_t v108 = v98;
      goto LABEL_87;
    }
    if (v88 >= 0x10)
    {
      unint64_t v117 = v95;
      uint64_t v118 = v96;
      unint64_t v119 = v88 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        uint8x16_t v120 = *(uint8x16_t *)(v118 + v82);
        uint16x8_t v121 = vmovl_high_u8(v120);
        uint16x8_t v122 = vmovl_u8(*(uint8x8_t *)v120.i8);
        uint32x4_t v123 = vaddw_u16(*v117, *(uint16x4_t *)v122.i8);
        uint32x4_t result = vaddw_high_u16(v117[1], v122);
        uint32x4_t v124 = vaddw_u16(v117[2], *(uint16x4_t *)v121.i8);
        uint32x4_t v125 = vaddw_high_u16(v117[3], v121);
        v117[2] = v124;
        v117[3] = v125;
        *unint64_t v117 = v123;
        v117[1] = result;
        v117 += 4;
        v118 += 16;
        v119 -= 16;
      }
      while (v119);
      if (v88 == v189) {
        goto LABEL_67;
      }
      unint64_t v103 = v88 & 0xFFFFFFFFFFFFFFF0;
      if ((v88 & 8) == 0)
      {
        uint64_t v108 = v98 + v189 * v99;
        unint64_t v112 = v88 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v104 = v97 + v189 * v100;
LABEL_87:
        unint64_t v113 = v88 - v112;
        uint64_t v114 = (unsigned __int8 *)(v89 + v104);
        uint64_t v115 = 4 * v99;
        unint64_t v116 = (_DWORD *)(v13 + 4 * v108);
        do
        {
          *v116 += *v114;
          v114 += v100;
          unint64_t v116 = (_DWORD *)((char *)v116 + v115);
          --v113;
        }
        while (v113);
        goto LABEL_67;
      }
    }
    else
    {
      unint64_t v103 = 0;
    }
    uint64_t v104 = v97 + v94 * v100;
    unint64_t v105 = v103 - (v88 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v106 = v82 + v103;
    uint64_t v107 = 4 * v103;
    uint64_t v108 = v98 + v94 * v99;
    do
    {
      uint64_t v109 = (uint32x4_t *)((char *)v95 + v107);
      uint16x8_t v110 = vmovl_u8(*(uint8x8_t *)(v96 + v106));
      uint32x4_t v111 = vaddw_u16(*(uint32x4_t *)((char *)v95 + v107), *(uint16x4_t *)v110.i8);
      uint32x4_t result = vaddw_high_u16(*(uint32x4_t *)((char *)&v95[1] + v107), v110);
      *uint64_t v109 = v111;
      v109[1] = result;
      v106 += 8;
      v107 += 32;
      v105 += 8;
    }
    while (v105);
    unint64_t v112 = v88 & 0xFFFFFFFFFFFFFFF8;
    if (v88 == v94) {
      goto LABEL_67;
    }
    goto LABEL_87;
  }
  if (v22 == 2)
  {
    unint64_t v36 = *v4;
    if (!*v4) {
      return result;
    }
    uint64_t v37 = 0;
    uint64_t v38 = a2[8];
    uint64_t v39 = a1[8];
    unint64_t v40 = v4[1];
    uint64_t v41 = *a2;
    uint64_t v42 = (uint64_t *)a2[5];
    uint64_t v43 = (uint64_t *)a1[5];
    uint64_t v44 = *v43;
    uint64_t v45 = 4 * *v43;
    uint64_t v46 = *v42;
    uint64_t v47 = v38 + v40;
    unint64_t v48 = v40 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v49 = v40 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v50 = (uint32x4_t *)(v13 + 4 * v39);
    uint64_t v51 = v13 + 4 * (v39 + v40);
    unint64_t v52 = v50;
    while (!v40)
    {
LABEL_34:
      v39 += v44;
      v38 += v46;
      ++v37;
      unint64_t v52 = (uint32x4_t *)((char *)v52 + v45);
      if (v37 == v36) {
        return result;
      }
    }
    uint64_t v53 = v43[1];
    uint64_t v54 = v42[1];
    if (v40 < 8
      || (v53 == 1 ? (BOOL v55 = v54 == 1) : (BOOL v55 = 0),
          !v55
       || ((unint64_t)v50->u64 + v45 * v37 < v41 + v47 + v46 * v37
         ? (BOOL v56 = v41 + v38 >= (unint64_t)(v51 + v45 * v37))
         : (BOOL v56 = 1),
           !v56)))
    {
      unint64_t v67 = 0;
      uint64_t v58 = v38;
      uint64_t v62 = v39;
      goto LABEL_54;
    }
    if (v40 >= 0x10)
    {
      unint64_t v72 = v52;
      uint64_t v73 = v41;
      unint64_t v74 = v40 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        uint8x16_t v75 = *(uint8x16_t *)(v73 + v38);
        uint16x8_t v76 = vmovl_high_u8(v75);
        uint16x8_t v77 = vmovl_u8(*(uint8x8_t *)v75.i8);
        uint32x4_t v78 = vaddw_u16(*v72, *(uint16x4_t *)v77.i8);
        uint32x4_t result = vaddw_high_u16(v72[1], v77);
        uint32x4_t v79 = vaddw_u16(v72[2], *(uint16x4_t *)v76.i8);
        uint32x4_t v80 = vaddw_high_u16(v72[3], v76);
        void v72[2] = v79;
        v72[3] = v80;
        *unint64_t v72 = v78;
        v72[1] = result;
        v72 += 4;
        v73 += 16;
        v74 -= 16;
      }
      while (v74);
      if (v40 == v48) {
        goto LABEL_34;
      }
      unint64_t v57 = v40 & 0xFFFFFFFFFFFFFFF0;
      if ((v40 & 8) == 0)
      {
        uint64_t v62 = v39 + v48 * v53;
        unint64_t v67 = v40 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v58 = v38 + v48 * v54;
LABEL_54:
        unint64_t v68 = v40 - v67;
        uint64_t v69 = (unsigned __int8 *)(v41 + v58);
        uint64_t v70 = 4 * v53;
        unint64_t v71 = (_DWORD *)(v13 + 4 * v62);
        do
        {
          *v71 += *v69;
          v69 += v54;
          unint64_t v71 = (_DWORD *)((char *)v71 + v70);
          --v68;
        }
        while (v68);
        goto LABEL_34;
      }
    }
    else
    {
      unint64_t v57 = 0;
    }
    uint64_t v58 = v38 + v49 * v54;
    unint64_t v59 = v57 - (v40 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v60 = v41 + v57;
    uint64_t v61 = 4 * v57;
    uint64_t v62 = v39 + v49 * v53;
    do
    {
      uint64_t v63 = (uint32x4_t *)((char *)v52 + v61);
      uint16x8_t v64 = vmovl_u8(*(uint8x8_t *)(v60 + v38));
      uint32x4_t v65 = vaddw_u16(*(uint32x4_t *)((char *)v52 + v61), *(uint16x4_t *)v64.i8);
      uint32x4_t result = vaddw_high_u16(*(uint32x4_t *)((char *)&v52[1] + v61), v64);
      *uint64_t v63 = v65;
      v63[1] = result;
      v60 += 8;
      v61 += 32;
      v59 += 8;
    }
    while (v59);
    unint64_t v67 = v40 & 0xFFFFFFFFFFFFFFF8;
    if (v40 == v49) {
      goto LABEL_34;
    }
    goto LABEL_54;
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v126 = operator new(v12);
    bzero(v126, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v127 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v128 = 1;
    }
    else {
      unint64_t v128 = v12 >> 3;
    }
    uint64_t v129 = a2[5];
    uint64_t v130 = a2[8];
    uint64_t v131 = v128 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v132 = a1[5];
    while (v128 >= 2)
    {
      uint64_t v135 = 0;
      uint64_t v136 = 0;
      uint64_t v137 = v128 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v138 = (void *)(v132 + 8);
      int v139 = v126 + 1;
      do
      {
        v135 += *(v138 - 1) * *(v139 - 1);
        v136 += *v138 * *v139;
        v139 += 2;
        v138 += 2;
        v137 -= 2;
      }
      while (v137);
      uint64_t v133 = v136 + v135;
      uint64_t v134 = v128 & 0x1FFFFFFFFFFFFFFELL;
      if (v128 != v131) {
        goto LABEL_105;
      }
LABEL_107:
      if (v128 < 2)
      {
        uint64_t v147 = 0;
        uint64_t v148 = 0;
LABEL_112:
        unint64_t v154 = v128 - v148;
        uint64_t v155 = v148;
        uint64_t v156 = (uint64_t *)(v129 + 8 * v148);
        uint64_t v157 = &v126[v155];
        do
        {
          uint64_t v159 = *v157++;
          uint64_t v158 = v159;
          uint64_t v160 = *v156++;
          v147 += v160 * v158;
          --v154;
        }
        while (v154);
        goto LABEL_114;
      }
      uint64_t v149 = 0;
      uint64_t v150 = 0;
      uint64_t v151 = v128 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v152 = (void *)(v129 + 8);
      uint64_t v153 = v126 + 1;
      do
      {
        v149 += *(v152 - 1) * *(v153 - 1);
        v150 += *v152 * *v153;
        v153 += 2;
        v152 += 2;
        v151 -= 2;
      }
      while (v151);
      uint64_t v147 = v150 + v149;
      uint64_t v148 = v128 & 0x1FFFFFFFFFFFFFFELL;
      if (v128 != v131) {
        goto LABEL_112;
      }
LABEL_114:
      *(_DWORD *)(v13 + 4 * v133) += *(unsigned __int8 *)(v127 + v130 + v147);
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v161 = (v12 >> 3) + 1;
        int v162 = v12 >> 3;
        while (1)
        {
          uint64_t v163 = (v161 - 2);
          unint64_t v164 = v126[v163] + 1;
          v126[v163] = v164;
          if (v164 < v4[v163]) {
            break;
          }
          v126[(v161 - 2)] = 0;
          --v162;
          if ((unint64_t)--v161 <= 1) {
            goto LABEL_120;
          }
        }
        if (v162 > 0) {
          continue;
        }
      }
LABEL_120:
      operator delete(v126);
      return result;
    }
    uint64_t v133 = 0;
    uint64_t v134 = 0;
LABEL_105:
    unint64_t v140 = v128 - v134;
    uint64_t v141 = v134;
    float32x4_t v142 = (uint64_t *)(v132 + 8 * v134);
    uint64_t v143 = &v126[v141];
    do
    {
      uint64_t v145 = *v143++;
      uint64_t v144 = v145;
      uint64_t v146 = *v142++;
      v133 += v146 * v144;
      --v140;
    }
    while (v140);
    goto LABEL_107;
  }
  unint64_t v23 = *v4;
  if (!*v4) {
    return result;
  }
  uint64_t v24 = a2[8];
  uint64_t v25 = a1[8];
  uint64_t v26 = *a2;
  uint64_t v27 = *(void *)a1[5];
  uint64_t v28 = *(void *)a2[5];
  if (v23 < 8) {
    goto LABEL_27;
  }
  unint64_t v29 = 0;
  if (v27 != 1 || v28 != 1) {
    goto LABEL_28;
  }
  if (v13 + 4 * v25 < v26 + v23 + v24 && v26 + v24 < v13 + 4 * (v23 + v25))
  {
LABEL_27:
    unint64_t v29 = 0;
LABEL_28:
    uint64_t v30 = a2[8];
    uint64_t v31 = a1[8];
    goto LABEL_29;
  }
  if (v23 >= 0x10)
  {
    unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v172 = (uint8x16_t *)(v26 + v24);
    uint64_t v173 = (uint32x4_t *)(v13 + 4 * v25);
    unint64_t v174 = v23 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      uint8x16_t v175 = *v172++;
      uint16x8_t v176 = vmovl_high_u8(v175);
      uint16x8_t v177 = vmovl_u8(*(uint8x8_t *)v175.i8);
      uint32x4_t v178 = vaddw_u16(*v173, *(uint16x4_t *)v177.i8);
      uint32x4_t result = vaddw_high_u16(v173[1], v177);
      uint32x4_t v179 = vaddw_u16(v173[2], *(uint16x4_t *)v176.i8);
      uint32x4_t v180 = vaddw_high_u16(v173[3], v176);
      v173[2] = v179;
      v173[3] = v180;
      *uint64_t v173 = v178;
      v173[1] = result;
      v173 += 4;
      v174 -= 16;
    }
    while (v174);
    if (v23 == v29) {
      return result;
    }
    if ((v23 & 8) == 0)
    {
      uint64_t v31 = v25 + v29;
      uint64_t v30 = v24 + v29;
LABEL_29:
      unint64_t v32 = v23 - v29;
      uint64_t v33 = (unsigned __int8 *)(v26 + v30);
      uint64_t v34 = 4 * v27;
      unint64_t v35 = (_DWORD *)(v13 + 4 * v31);
      do
      {
        *v35 += *v33;
        v33 += v28;
        unint64_t v35 = (_DWORD *)((char *)v35 + v34);
        --v32;
      }
      while (v32);
      return result;
    }
  }
  else
  {
    unint64_t v29 = 0;
  }
  unint64_t v165 = v29;
  unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v30 = v24 + (v23 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v31 = v25 + (v23 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v166 = v165 - (v23 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v167 = (uint8x8_t *)(v26 + v165 + v24);
  uint64_t v168 = (uint32x4_t *)(v13 + 4 * (v165 + v25));
  do
  {
    uint8x8_t v169 = *v167++;
    uint16x8_t v170 = vmovl_u8(v169);
    uint32x4_t v171 = vaddw_u16(*v168, *(uint16x4_t *)v170.i8);
    uint32x4_t result = vaddw_high_u16(v168[1], v170);
    uint32x4_t *v168 = v171;
    v168[1] = result;
    v168 += 2;
    v166 += 8;
  }
  while (v166);
  if (v23 != v29) {
    goto LABEL_29;
  }
  return result;
}

void sub_19255A468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::operator+<unsigned char>(void *a1, void *a2)
{
  unint64_t v5 = (char *)a1[2];
  long long v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      unint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        unint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        uint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      unint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      unint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        uint64_t v37 = v20;
        memcpy(v19, v17, v18);
        unint64_t v36 = v20;
      }
      unint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        uint64_t v22 = &v21[8 * v10];
        unint64_t v32 = v21;
        uint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      unint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      unint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        unint64_t v29 = v26;
        uint64_t v31 = v27;
        memcpy(v26, v24, v25);
        uint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<int>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<int>::copy(&v28);
    }
  }
  nitro::ndarray<int>::copy(a1);
}

void sub_19255A7EC(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_19255A800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      unint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  unint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    uint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  uint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_19255A89C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x19255A878);
  }
  JUMPOUT(0x19255A848);
}

void sub_19255A8AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x19255A888);
  }
  JUMPOUT(0x19255A850);
}

void sub_19255A8BC()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x19255A860);
  }
  JUMPOUT(0x19255A858);
}

void nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19255AB58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        long long v4 = __p;
      }
      else {
        long long v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19255ACE0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19255ACF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19255ACECLL);
}

uint64_t *nitro::ndarray<half>::operator+=<unsigned char>(uint64_t *a1, uint64_t *a2, float a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  uint64_t v8 = (char *)a1[2];
  unint64_t v9 = (char *)a1[3];
  uint64_t v10 = v9 - v8;
  if (v9 == v8 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v10 - 8) < 8)
  {
    uint64_t v11 = 1;
    uint64_t v12 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v18 = *(void *)v12;
      v12 += 8;
      v11 *= v18;
    }
    while (v12 != v9);
    goto LABEL_9;
  }
  unint64_t v13 = ((unint64_t)(v10 - 8) >> 3) + 1;
  uint64_t v12 = &v8[8 * (v13 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v14 = v8 + 8;
  uint64_t v15 = 1;
  uint64_t v16 = v13 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v17 = 1;
  do
  {
    v15 *= *(v14 - 1);
    v17 *= *v14;
    v14 += 2;
    v16 -= 2;
  }
  while (v16);
  uint64_t v11 = v17 * v15;
  if (v13 != (v13 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v11)
  {
    unint64_t v19 = v10 >> 3;
    uint64_t v20 = (void *)a2[2];
    if (v19 != (a2[3] - (uint64_t)v20) >> 3) {
      goto LABEL_19;
    }
    uint64_t v21 = v19 <= 1 ? 1 : v19;
    if (*(void *)v8 != *v20) {
      goto LABEL_19;
    }
    uint64_t v22 = 1;
    do
    {
      unint64_t v23 = v22;
      if (v21 == v22) {
        break;
      }
      uint64_t v24 = *(void *)&v8[8 * v22];
      uint64_t v25 = v20[v22++];
    }
    while (v24 == v25);
    if (v23 < v19) {
LABEL_19:
    }
      nitro::ndarray<half>::operator+<unsigned char>(a1, a2);
    nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(a1, a2, a3, a4, a5, a6, a7);
  }
  return a1;
}

void nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(uint64_t *a1, uint64_t *a2, float _S0, double a4, int8x16_t a5, double a6, int8x16_t _Q4)
{
  unint64_t v9 = (unint64_t *)a1[2];
  uint64_t v8 = (char *)a1[3];
  unint64_t v10 = (v8 - (char *)v9) >> 3;
  uint64_t v11 = (void *)a2[2];
  if (v10 != (a2[3] - (uint64_t)v11) >> 3) {
    goto LABEL_13;
  }
  if (v8 == (char *)v9) {
    return;
  }
  uint64_t v12 = v10 <= 1 ? 1 : (v8 - (char *)v9) >> 3;
  if (*v9 != *v11) {
    goto LABEL_13;
  }
  uint64_t v13 = 1;
  do
  {
    unint64_t v14 = v13;
    if (v12 == v13) {
      break;
    }
    unint64_t v15 = v9[v13];
    uint64_t v16 = v11[v13++];
  }
  while (v15 == v16);
  if (v14 < v10) {
LABEL_13:
  }
    nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1})::{lambda(void)#1}::operator()();
  size_t v17 = v8 - (char *)v9;
  if (v8 == (char *)v9) {
    return;
  }
  uint64_t v18 = *a1;
  if (!*a1) {
    return;
  }
  if (v17 - 8 < 8)
  {
    uint64_t v19 = 1;
    uint64_t v20 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v26 = *v20++;
      v19 *= v26;
    }
    while (v20 != (unint64_t *)v8);
    goto LABEL_21;
  }
  unint64_t v21 = ((v17 - 8) >> 3) + 1;
  uint64_t v20 = &v9[v21 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v22 = v9 + 1;
  uint64_t v23 = 1;
  uint64_t v24 = v21 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v25 = 1;
  do
  {
    v23 *= *(v22 - 1);
    v25 *= *v22;
    v22 += 2;
    v24 -= 2;
  }
  while (v24);
  uint64_t v19 = v25 * v23;
  if (v21 != (v21 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v19) {
    return;
  }
  uint64_t v27 = (uint64_t)v17 >> 3;
  if ((uint64_t)v17 >> 3 == 3)
  {
    unint64_t v184 = *v9;
    if (!*v9) {
      return;
    }
    uint64_t v85 = 0;
    uint64_t v86 = a2[8];
    uint64_t v87 = a1[8];
    unint64_t v88 = v9[1];
    uint64_t v89 = (uint64_t *)a1[5];
    uint32x4_t v180 = (uint64_t *)a2[5];
    uint64_t v182 = *v180;
    uint64_t v183 = *v89;
    uint64_t v185 = 2 * *v89;
    uint64_t v179 = 2 * v87;
    uint64_t v90 = (float16x4_t *)(v18 + 2 * v87);
    uint64_t v181 = v87;
    while (!v88)
    {
LABEL_64:
      v87 += v183;
      v86 += v182;
      ++v85;
      uint64_t v90 = (float16x4_t *)((char *)v90 + v185);
      if (v85 == v184) {
        return;
      }
    }
    uint64_t v91 = 0;
    unint64_t v92 = v9[2];
    uint64_t v93 = *a2;
    uint64_t v94 = a2[5];
    uint64_t v95 = v89[1];
    uint64_t v96 = 2 * v95;
    uint64_t v97 = v180[1];
    unint64_t v187 = v92 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v98 = v92 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v99 = v90;
    uint64_t v100 = *a2;
    uint64_t v101 = v86;
    uint64_t v102 = v87;
    while (!v92)
    {
LABEL_67:
      v102 += v95;
      v101 += v97;
      ++v91;
      v100 += v97;
      uint64_t v99 = (float16x4_t *)((char *)v99 + v96);
      if (v91 == v88) {
        goto LABEL_64;
      }
    }
    uint64_t v103 = v89[2];
    uint64_t v104 = *(void *)(v94 + 16);
    if (v92 < 8
      || (v103 == 1 ? (BOOL v105 = v104 == 1) : (BOOL v105 = 0),
          !v105
       || (v18 + v179 + v185 * v85 + v96 * v91 < v93 + v92 + v86 + v97 * v91
         ? (BOOL v106 = v93 + v101 >= v18 + v185 * v85 + 2 * (v181 + v92) + v96 * v91)
         : (BOOL v106 = 1),
           !v106)))
    {
      unint64_t v113 = 0;
      uint64_t v108 = v101;
      uint64_t v112 = v102;
      goto LABEL_87;
    }
    if (v92 >= 0x10)
    {
      uint8x16_t v120 = v99;
      uint64_t v121 = v100;
      unint64_t v122 = v92 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        int8x16_t v123 = *(int8x16_t *)(v121 + v86);
        uint32x4_t v124 = (uint32x4_t)vqtbl1q_s8(v123, (int8x16_t)xmmword_192DAD3F0);
        uint32x4_t v125 = (uint32x4_t)vqtbl1q_s8(v123, (int8x16_t)xmmword_192DAD3E0);
        _Q4 = (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v123, (int8x16_t)xmmword_192DAD400)), vcvtq_f32_f16(v120[2]))), vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v123, (int8x16_t)xmmword_192DAD410)), vcvt_hight_f32_f16(*(float16x8_t *)v120[2].i8)));
        *(float16x8_t *)v120->i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vcvtq_f32_u32(v125), vcvtq_f32_f16(*v120))), vaddq_f32(vcvtq_f32_u32(v124), vcvt_hight_f32_f16(*(float16x8_t *)v120->i8)));
        *(int8x16_t *)v120[2].i8 = _Q4;
        v120 += 4;
        v121 += 16;
        v122 -= 16;
      }
      while (v122);
      if (v92 == v187) {
        goto LABEL_67;
      }
      unint64_t v107 = v92 & 0xFFFFFFFFFFFFFFF0;
      if ((v92 & 8) == 0)
      {
        uint64_t v112 = v102 + v187 * v103;
        unint64_t v113 = v92 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v108 = v101 + v187 * v104;
LABEL_87:
        unint64_t v114 = v92 - v113;
        uint64_t v115 = (unsigned __int8 *)(v93 + v108);
        uint64_t v116 = 2 * v103;
        unint64_t v117 = (__int16 *)(v18 + 2 * v112);
        do
        {
          _Q4.i8[0] = *v115;
          _H5 = *v117;
          __asm { FCVT            S5, H5 }
          *(float *)_Q4.i32 = (float)_Q4.u32[0] + _S5;
          __asm { FCVT            H4, S4 }
          *unint64_t v117 = _Q4.i16[0];
          v115 += v104;
          unint64_t v117 = (__int16 *)((char *)v117 + v116);
          --v114;
        }
        while (v114);
        goto LABEL_67;
      }
    }
    else
    {
      unint64_t v107 = 0;
    }
    uint64_t v108 = v101 + v98 * v104;
    unint64_t v109 = v107 - (v92 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v110 = v86 + v107;
    uint64_t v111 = 2 * v107;
    uint64_t v112 = v102 + v98 * v103;
    do
    {
      _Q4.i64[0] = *(void *)(v100 + v110);
      _Q4 = (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q4, (int8x16_t)xmmword_192DAD3E0)), vcvtq_f32_f16(*(float16x4_t *)((char *)v99 + v111)))), vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q4, (int8x16_t)xmmword_192DAD3F0)), vcvt_hight_f32_f16(*(float16x8_t *)&v99->i8[v111])));
      *(int8x16_t *)&v99->i8[v111] = _Q4;
      v110 += 8;
      v111 += 16;
      v109 += 8;
    }
    while (v109);
    unint64_t v113 = v92 & 0xFFFFFFFFFFFFFFF8;
    if (v92 == v98) {
      goto LABEL_67;
    }
    goto LABEL_87;
  }
  if (v27 == 2)
  {
    unint64_t v45 = *v9;
    if (!*v9) {
      return;
    }
    uint64_t v46 = 0;
    uint64_t v47 = a2[8];
    uint64_t v48 = a1[8];
    unint64_t v49 = v9[1];
    uint64_t v50 = *a2;
    uint64_t v51 = (uint64_t *)a2[5];
    unint64_t v52 = (uint64_t *)a1[5];
    uint64_t v53 = *v52;
    uint64_t v54 = *v51;
    uint64_t v55 = 2 * *v52;
    uint64_t v56 = v47 + v49;
    unint64_t v57 = v49 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v58 = v49 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v59 = (float16x4_t *)(v18 + 2 * v48);
    uint64_t v60 = v18 + 2 * (v48 + v49);
    uint64_t v61 = v59;
    while (!v49)
    {
LABEL_34:
      v48 += v53;
      v47 += v54;
      ++v46;
      uint64_t v61 = (float16x4_t *)((char *)v61 + v55);
      if (v46 == v45) {
        return;
      }
    }
    uint64_t v62 = v52[1];
    uint64_t v63 = v51[1];
    if (v49 < 8
      || (v62 == 1 ? (_ZF = v63 == 1) : (_ZF = 0),
          !_ZF
       || ((unint64_t)v59 + v55 * v46 < v50 + v56 + v54 * v46
         ? (_CF = v50 + v47 >= (unint64_t)(v60 + v55 * v46))
         : (_CF = 1),
           !_CF)))
    {
      unint64_t v72 = 0;
      uint64_t v67 = v47;
      uint64_t v71 = v48;
      goto LABEL_54;
    }
    if (v49 >= 0x10)
    {
      uint32x4_t v79 = v61;
      uint64_t v80 = v50;
      unint64_t v81 = v49 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        int8x16_t v82 = *(int8x16_t *)(v80 + v47);
        uint32x4_t v83 = (uint32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_192DAD3F0);
        uint32x4_t v84 = (uint32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_192DAD3E0);
        _Q4 = (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_192DAD400)), vcvtq_f32_f16(v79[2]))), vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_192DAD410)), vcvt_hight_f32_f16(*(float16x8_t *)v79[2].i8)));
        *(float16x8_t *)v79->i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vcvtq_f32_u32(v84), vcvtq_f32_f16(*v79))), vaddq_f32(vcvtq_f32_u32(v83), vcvt_hight_f32_f16(*(float16x8_t *)v79->i8)));
        *(int8x16_t *)v79[2].i8 = _Q4;
        v79 += 4;
        v80 += 16;
        v81 -= 16;
      }
      while (v81);
      if (v49 == v57) {
        goto LABEL_34;
      }
      unint64_t v66 = v49 & 0xFFFFFFFFFFFFFFF0;
      if ((v49 & 8) == 0)
      {
        uint64_t v71 = v48 + v57 * v62;
        unint64_t v72 = v49 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v67 = v47 + v57 * v63;
LABEL_54:
        unint64_t v73 = v49 - v72;
        unint64_t v74 = (unsigned __int8 *)(v50 + v67);
        uint64_t v75 = 2 * v62;
        uint16x8_t v76 = (__int16 *)(v18 + 2 * v71);
        do
        {
          _Q4.i8[0] = *v74;
          _H5 = *v76;
          __asm { FCVT            S5, H5 }
          *(float *)_Q4.i32 = (float)_Q4.u32[0] + _S5;
          __asm { FCVT            H4, S4 }
          *uint16x8_t v76 = _Q4.i16[0];
          v74 += v63;
          uint16x8_t v76 = (__int16 *)((char *)v76 + v75);
          --v73;
        }
        while (v73);
        goto LABEL_34;
      }
    }
    else
    {
      unint64_t v66 = 0;
    }
    uint64_t v67 = v47 + v58 * v63;
    unint64_t v68 = v66 - (v49 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v69 = v50 + v66;
    uint64_t v70 = 2 * v66;
    uint64_t v71 = v48 + v58 * v62;
    do
    {
      _Q4.i64[0] = *(void *)(v69 + v47);
      _Q4 = (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q4, (int8x16_t)xmmword_192DAD3E0)), vcvtq_f32_f16(*(float16x4_t *)((char *)v61 + v70)))), vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q4, (int8x16_t)xmmword_192DAD3F0)), vcvt_hight_f32_f16(*(float16x8_t *)&v61->i8[v70])));
      *(int8x16_t *)&v61->i8[v70] = _Q4;
      v69 += 8;
      v70 += 16;
      v68 += 8;
    }
    while (v68);
    unint64_t v72 = v49 & 0xFFFFFFFFFFFFFFF8;
    if (v49 == v58) {
      goto LABEL_34;
    }
    goto LABEL_54;
  }
  if (v27 != 1)
  {
    if ((v17 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v126 = operator new(v17);
    bzero(v126, v17 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v128 = *a2;
    if (v17 >> 3 <= 1) {
      unint64_t v129 = 1;
    }
    else {
      unint64_t v129 = v17 >> 3;
    }
    uint64_t v130 = a2[5];
    uint64_t v131 = a2[8];
    uint64_t v132 = v129 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v133 = a1[5];
    while (v129 >= 2)
    {
      uint64_t v136 = 0;
      uint64_t v137 = 0;
      uint64_t v138 = v129 & 0x1FFFFFFFFFFFFFFELL;
      int v139 = (void *)(v133 + 8);
      unint64_t v140 = v126 + 1;
      do
      {
        v136 += *(v139 - 1) * *(v140 - 1);
        v137 += *v139 * *v140;
        v140 += 2;
        v139 += 2;
        v138 -= 2;
      }
      while (v138);
      uint64_t v134 = v137 + v136;
      uint64_t v135 = v129 & 0x1FFFFFFFFFFFFFFELL;
      if (v129 != v132) {
        goto LABEL_105;
      }
LABEL_107:
      if (v129 < 2)
      {
        uint64_t v148 = 0;
        uint64_t v149 = 0;
LABEL_112:
        unint64_t v155 = v129 - v149;
        uint64_t v156 = v149;
        uint64_t v157 = (uint64_t *)(v130 + 8 * v149);
        uint64_t v158 = &v126[v156];
        do
        {
          uint64_t v160 = *v158++;
          uint64_t v159 = v160;
          uint64_t v161 = *v157++;
          v148 += v161 * v159;
          --v155;
        }
        while (v155);
        goto LABEL_114;
      }
      uint64_t v150 = 0;
      uint64_t v151 = 0;
      uint64_t v152 = v129 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v153 = (void *)(v130 + 8);
      unint64_t v154 = v126 + 1;
      do
      {
        v150 += *(v153 - 1) * *(v154 - 1);
        v151 += *v153 * *v154;
        v154 += 2;
        v153 += 2;
        v152 -= 2;
      }
      while (v152);
      uint64_t v148 = v151 + v150;
      uint64_t v149 = v129 & 0x1FFFFFFFFFFFFFFELL;
      if (v129 != v132) {
        goto LABEL_112;
      }
LABEL_114:
      LOBYTE(_S0) = *(unsigned char *)(v128 + v131 + v148);
      uint64_t v162 = 2 * v134;
      _H1 = *(_WORD *)(v18 + v162);
      __asm { FCVT            S1, H1 }
      _S0 = (float)LODWORD(_S0) + _S1;
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v18 + v162) = LOWORD(_S0);
      if ((int)(v17 >> 3) >= 1)
      {
        uint64_t v165 = (v17 >> 3) + 1;
        int v166 = v17 >> 3;
        while (1)
        {
          uint64_t v167 = (v165 - 2);
          unint64_t v168 = v126[v167] + 1;
          v126[v167] = v168;
          if (v168 < v9[v167]) {
            break;
          }
          v126[(v165 - 2)] = 0;
          --v166;
          if ((unint64_t)--v165 <= 1) {
            goto LABEL_120;
          }
        }
        if (v166 > 0) {
          continue;
        }
      }
LABEL_120:
      operator delete(v126);
      return;
    }
    uint64_t v134 = 0;
    uint64_t v135 = 0;
LABEL_105:
    unint64_t v141 = v129 - v135;
    uint64_t v142 = v135;
    uint64_t v143 = (uint64_t *)(v133 + 8 * v135);
    uint64_t v144 = &v126[v142];
    do
    {
      uint64_t v146 = *v144++;
      uint64_t v145 = v146;
      uint64_t v147 = *v143++;
      v134 += v147 * v145;
      --v141;
    }
    while (v141);
    goto LABEL_107;
  }
  unint64_t v28 = *v9;
  if (!*v9) {
    return;
  }
  uint64_t v29 = a2[8];
  uint64_t v30 = a1[8];
  uint64_t v31 = *a2;
  uint64_t v32 = *(void *)a1[5];
  uint64_t v33 = *(void *)a2[5];
  if (v28 < 8) {
    goto LABEL_27;
  }
  unint64_t v34 = 0;
  if (v32 != 1 || v33 != 1) {
    goto LABEL_28;
  }
  if (v18 + 2 * v30 < v31 + v28 + v29 && v31 + v29 < v18 + 2 * (v28 + v30))
  {
LABEL_27:
    unint64_t v34 = 0;
LABEL_28:
    uint64_t v35 = a2[8];
    uint64_t v36 = a1[8];
    goto LABEL_29;
  }
  if (v28 >= 0x10)
  {
    unint64_t v34 = v28 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v174 = (int8x16_t *)(v31 + v29);
    uint8x16_t v175 = (float16x4_t *)(v18 + 2 * v30);
    _S0 = NAN;
    a5.i64[1] = 0xFFFFFF0FFFFFFF0ELL;
    unint64_t v176 = v28 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      int8x16_t v177 = *v174++;
      float16x8_t v178 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v177, (int8x16_t)xmmword_192DAD400)), vcvtq_f32_f16(v175[2]))), vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v177, (int8x16_t)xmmword_192DAD410)), vcvt_hight_f32_f16(*(float16x8_t *)v175[2].i8)));
      *(float16x8_t *)v175->i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v177, (int8x16_t)xmmword_192DAD3E0)), vcvtq_f32_f16(*v175))), vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v177, (int8x16_t)xmmword_192DAD3F0)), vcvt_hight_f32_f16(*(float16x8_t *)v175->i8)));
      *(float16x8_t *)v175[2].i8 = v178;
      v175 += 4;
      v176 -= 16;
    }
    while (v176);
    if (v28 == v34) {
      return;
    }
    if ((v28 & 8) == 0)
    {
      uint64_t v36 = v30 + v34;
      uint64_t v35 = v29 + v34;
LABEL_29:
      unint64_t v37 = v28 - v34;
      uint64_t v38 = (unsigned char *)(v31 + v35);
      uint64_t v39 = 2 * v32;
      unint64_t v40 = (__int16 *)(v18 + 2 * v36);
      do
      {
        LOBYTE(_S0) = *v38;
        _H1 = *v40;
        __asm { FCVT            S1, H1 }
        _S0 = (float)LODWORD(_S0) + _S1;
        __asm { FCVT            H0, S0 }
        *unint64_t v40 = LOWORD(_S0);
        v38 += v33;
        unint64_t v40 = (__int16 *)((char *)v40 + v39);
        --v37;
      }
      while (v37);
      return;
    }
  }
  else
  {
    unint64_t v34 = 0;
  }
  unint64_t v169 = v34;
  unint64_t v34 = v28 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v35 = v29 + (v28 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v36 = v30 + (v28 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v170 = v169 - (v28 & 0xFFFFFFFFFFFFFFF8);
  uint32x4_t v171 = (unint64_t *)(v31 + v169 + v29);
  unint64_t v172 = (float16x4_t *)(v18 + 2 * (v169 + v30));
  _S0 = NAN;
  do
  {
    unint64_t v173 = *v171++;
    a5.i64[0] = v173;
    a5 = (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_192DAD3E0)), vcvtq_f32_f16(*v172))), vaddq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_192DAD3F0)), vcvt_hight_f32_f16(*(float16x8_t *)v172->i8)));
    *(int8x16_t *)v172->i8 = a5;
    v172 += 2;
    v170 += 8;
  }
  while (v170);
  if (v28 != v34) {
    goto LABEL_29;
  }
}

void sub_19255B8E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::operator+<unsigned char>(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[2];
  long long v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      unint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        unint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        uint64_t v39 = v40;
      }
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      unint64_t v37 = 0;
      size_t v17 = (unsigned char *)a1[5];
      uint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        uint64_t v35 = v19;
        unint64_t v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      unint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v21 = (char *)operator new(v9 - v8);
        uint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        unint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      uint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        uint64_t v29 = v26;
        uint64_t v31 = v27;
        memcpy(v26, v24, v25);
        uint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<half>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<half>::copy(&v28);
    }
  }
  nitro::ndarray<half>::copy(a1);
}

void sub_19255BC68(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_19255BC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      uint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  uint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    uint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  uint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_19255BD18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x19255BCF4);
  }
  JUMPOUT(0x19255BCC4);
}

void sub_19255BD28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x19255BD04);
  }
  JUMPOUT(0x19255BCCCLL);
}

void sub_19255BD38()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x19255BCDCLL);
  }
  JUMPOUT(0x19255BCD4);
}

void nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19255BFD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        long long v4 = __p;
      }
      else {
        long long v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19255C15C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19255C170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19255C168);
}

uint64_t *nitro::ndarray<float>::operator+=<unsigned char>(uint64_t *a1, uint64_t *a2, float a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  uint64_t v8 = (char *)a1[2];
  unint64_t v9 = (char *)a1[3];
  uint64_t v10 = v9 - v8;
  if (v9 == v8 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v10 - 8) < 8)
  {
    uint64_t v11 = 1;
    uint64_t v12 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v18 = *(void *)v12;
      v12 += 8;
      v11 *= v18;
    }
    while (v12 != v9);
    goto LABEL_9;
  }
  unint64_t v13 = ((unint64_t)(v10 - 8) >> 3) + 1;
  uint64_t v12 = &v8[8 * (v13 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v14 = v8 + 8;
  uint64_t v15 = 1;
  uint64_t v16 = v13 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v17 = 1;
  do
  {
    v15 *= *(v14 - 1);
    v17 *= *v14;
    v14 += 2;
    v16 -= 2;
  }
  while (v16);
  uint64_t v11 = v17 * v15;
  if (v13 != (v13 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v11)
  {
    unint64_t v19 = v10 >> 3;
    uint64_t v20 = (void *)a2[2];
    if (v19 != (a2[3] - (uint64_t)v20) >> 3) {
      goto LABEL_19;
    }
    uint64_t v21 = v19 <= 1 ? 1 : v19;
    if (*(void *)v8 != *v20) {
      goto LABEL_19;
    }
    uint64_t v22 = 1;
    do
    {
      unint64_t v23 = v22;
      if (v21 == v22) {
        break;
      }
      uint64_t v24 = *(void *)&v8[8 * v22];
      uint64_t v25 = v20[v22++];
    }
    while (v24 == v25);
    if (v23 < v19) {
LABEL_19:
    }
      nitro::ndarray<float>::operator+<unsigned char>(a1, a2);
    nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(a1, a2, a3, a4, a5, a6, a7);
  }
  return a1;
}

void nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(uint64_t *a1, uint64_t *a2, float a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  unint64_t v9 = (unint64_t *)a1[2];
  uint64_t v8 = (char *)a1[3];
  unint64_t v10 = (v8 - (char *)v9) >> 3;
  uint64_t v11 = (void *)a2[2];
  if (v10 != (a2[3] - (uint64_t)v11) >> 3) {
    goto LABEL_13;
  }
  if (v8 == (char *)v9) {
    return;
  }
  uint64_t v12 = v10 <= 1 ? 1 : (v8 - (char *)v9) >> 3;
  if (*v9 != *v11) {
    goto LABEL_13;
  }
  uint64_t v13 = 1;
  do
  {
    unint64_t v14 = v13;
    if (v12 == v13) {
      break;
    }
    unint64_t v15 = v9[v13];
    uint64_t v16 = v11[v13++];
  }
  while (v15 == v16);
  if (v14 < v10) {
LABEL_13:
  }
    nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1})::{lambda(void)#1}::operator()();
  size_t v17 = v8 - (char *)v9;
  if (v8 == (char *)v9) {
    return;
  }
  uint64_t v18 = *a1;
  if (!*a1) {
    return;
  }
  if (v17 - 8 < 8)
  {
    uint64_t v19 = 1;
    uint64_t v20 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v26 = *v20++;
      v19 *= v26;
    }
    while (v20 != (unint64_t *)v8);
    goto LABEL_21;
  }
  unint64_t v21 = ((v17 - 8) >> 3) + 1;
  uint64_t v20 = &v9[v21 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v22 = v9 + 1;
  uint64_t v23 = 1;
  uint64_t v24 = v21 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v25 = 1;
  do
  {
    v23 *= *(v22 - 1);
    v25 *= *v22;
    v22 += 2;
    v24 -= 2;
  }
  while (v24);
  uint64_t v19 = v25 * v23;
  if (v21 != (v21 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v19) {
    return;
  }
  uint64_t v27 = (uint64_t)v17 >> 3;
  if ((uint64_t)v17 >> 3 == 3)
  {
    unint64_t v192 = *v9;
    if (!*v9) {
      return;
    }
    uint64_t v82 = 0;
    uint64_t v83 = a2[8];
    uint64_t v84 = a1[8];
    unint64_t v85 = v9[1];
    uint64_t v86 = (uint64_t *)a1[5];
    unint64_t v188 = (uint64_t *)a2[5];
    uint64_t v190 = *v188;
    uint64_t v191 = *v86;
    uint64_t v194 = 4 * *v86;
    uint64_t v187 = 4 * v84;
    uint64_t v87 = (float32x4_t *)(v18 + 4 * v84);
    uint64_t v189 = v84;
    while (!v85)
    {
LABEL_64:
      v84 += v191;
      v83 += v190;
      ++v82;
      uint64_t v87 = (float32x4_t *)((char *)v87 + v194);
      if (v82 == v192) {
        return;
      }
    }
    uint64_t v88 = 0;
    uint64_t v89 = v187 + v194 * v82;
    unint64_t v90 = v9[2];
    uint64_t v91 = *a2;
    uint64_t v92 = a2[5];
    uint64_t v93 = v86[1];
    uint64_t v94 = 4 * v93;
    uint64_t v95 = v194 * v82 + 4 * (v189 + v90);
    uint64_t v96 = v188[1];
    uint64_t v97 = v90 + v83;
    unint64_t v196 = v90 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v197 = v90 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v193 = v82;
    unint64_t v98 = v87;
    uint64_t v99 = *a2;
    uint64_t v100 = v83;
    uint64_t v101 = v84;
    while (!v90)
    {
LABEL_67:
      v101 += v93;
      v100 += v96;
      ++v88;
      v99 += v96;
      unint64_t v98 = (float32x4_t *)((char *)v98 + v94);
      if (v88 == v85) {
        goto LABEL_64;
      }
    }
    uint64_t v102 = v86[2];
    uint64_t v103 = *(void *)(v92 + 16);
    if (v90 < 8
      || (v102 == 1 ? (BOOL v104 = v103 == 1) : (BOOL v104 = 0),
          !v104
       || (v18 + v89 + v94 * v88 < (unint64_t)(v91 + v97 + v96 * v88)
         ? (BOOL v105 = v91 + v100 >= (unint64_t)(v18 + v95 + v94 * v88))
         : (BOOL v105 = 1),
           !v105)))
    {
      unint64_t v121 = 0;
      uint64_t v114 = v100;
      uint64_t v118 = v101;
      goto LABEL_87;
    }
    if (v90 >= 0x10)
    {
      uint64_t v126 = v98;
      uint64_t v127 = v99;
      unint64_t v128 = v90 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        int8x16_t v129 = *(int8x16_t *)(v127 + v83);
        float32x4_t v130 = *v126;
        float32x4_t v131 = vaddq_f32(v126[1], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_192DAD3F0)));
        float32x4_t v132 = vaddq_f32(v126[3], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_192DAD410)));
        v126[2] = vaddq_f32(v126[2], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_192DAD400)));
        v126[3] = v132;
        a7 = (int8x16_t)vaddq_f32(v130, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_192DAD3E0)));
        *uint64_t v126 = (float32x4_t)a7;
        v126[1] = v131;
        v126 += 4;
        v127 += 16;
        v128 -= 16;
      }
      while (v128);
      if (v90 == v197) {
        goto LABEL_67;
      }
      unint64_t v106 = v90 & 0xFFFFFFFFFFFFFFF0;
      if ((v90 & 8) == 0)
      {
        uint64_t v118 = v101 + v197 * v102;
        unint64_t v121 = v90 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v114 = v100 + v197 * v103;
LABEL_87:
        unint64_t v122 = v90 - v121;
        int8x16_t v123 = (unsigned __int8 *)(v91 + v114);
        uint64_t v124 = 4 * v102;
        uint32x4_t v125 = (float *)(v18 + 4 * v118);
        do
        {
          a7.i8[0] = *v123;
          *(float *)a7.i32 = *v125 + (float)a7.u32[0];
          *uint32x4_t v125 = *(float *)a7.i32;
          v123 += v103;
          uint32x4_t v125 = (float *)((char *)v125 + v124);
          --v122;
        }
        while (v122);
        goto LABEL_67;
      }
    }
    else
    {
      unint64_t v106 = 0;
    }
    uint64_t v107 = v84;
    uint64_t v108 = v87;
    uint64_t v109 = v97;
    uint64_t v110 = v9;
    uint64_t v111 = v18;
    uint64_t v112 = v95;
    uint64_t v113 = v89;
    uint64_t v114 = v100 + v196 * v103;
    unint64_t v115 = v106 - (v90 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v116 = v83 + v106;
    uint64_t v117 = 4 * v106;
    uint64_t v118 = v101 + v196 * v102;
    do
    {
      uint64_t v119 = (uint64_t)v98 + v117;
      a7.i64[0] = *(void *)(v99 + v116);
      float32x4_t v120 = vaddq_f32(*(float32x4_t *)((char *)v98 + v117 + 16), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_192DAD3F0)));
      a7 = (int8x16_t)vaddq_f32(*(float32x4_t *)((char *)v98 + v117), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_192DAD3E0)));
      *(int8x16_t *)uint64_t v119 = a7;
      *(float32x4_t *)(v119 + 16) = v120;
      v116 += 8;
      v117 += 32;
      v115 += 8;
    }
    while (v115);
    unint64_t v121 = v90 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v89 = v113;
    uint64_t v95 = v112;
    uint64_t v18 = v111;
    unint64_t v9 = v110;
    uint64_t v97 = v109;
    uint64_t v87 = v108;
    uint64_t v84 = v107;
    uint64_t v82 = v193;
    if (v90 == v196) {
      goto LABEL_67;
    }
    goto LABEL_87;
  }
  if (v27 == 2)
  {
    unint64_t v41 = *v9;
    if (!*v9) {
      return;
    }
    uint64_t v42 = 0;
    uint64_t v43 = a2[8];
    uint64_t v44 = a1[8];
    unint64_t v45 = v9[1];
    uint64_t v46 = *a2;
    uint64_t v47 = (uint64_t *)a2[5];
    uint64_t v48 = (uint64_t *)a1[5];
    uint64_t v49 = *v48;
    uint64_t v50 = *v47;
    uint64_t v51 = 4 * *v48;
    uint64_t v52 = v43 + v45;
    unint64_t v53 = v45 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v54 = v45 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v55 = (float32x4_t *)(v18 + 4 * v44);
    uint64_t v56 = v18 + 4 * (v44 + v45);
    unint64_t v57 = v55;
    while (!v45)
    {
LABEL_34:
      v44 += v49;
      v43 += v50;
      ++v42;
      unint64_t v57 = (float32x4_t *)((char *)v57 + v51);
      if (v42 == v41) {
        return;
      }
    }
    uint64_t v58 = v48[1];
    uint64_t v59 = v47[1];
    if (v45 < 8
      || (v58 == 1 ? (BOOL v60 = v59 == 1) : (BOOL v60 = 0),
          !v60
       || ((unint64_t)v55 + v51 * v42 < v46 + v52 + v50 * v42
         ? (BOOL v61 = v46 + v43 >= (unint64_t)(v56 + v51 * v42))
         : (BOOL v61 = 1),
           !v61)))
    {
      unint64_t v70 = 0;
      uint64_t v63 = v43;
      uint64_t v67 = v44;
      goto LABEL_54;
    }
    if (v45 >= 0x10)
    {
      uint64_t v75 = v57;
      uint64_t v76 = v46;
      unint64_t v77 = v45 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        int8x16_t v78 = *(int8x16_t *)(v76 + v43);
        float32x4_t v79 = *v75;
        float32x4_t v80 = vaddq_f32(v75[1], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_192DAD3F0)));
        float32x4_t v81 = vaddq_f32(v75[3], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_192DAD410)));
        v75[2] = vaddq_f32(v75[2], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_192DAD400)));
        v75[3] = v81;
        a7 = (int8x16_t)vaddq_f32(v79, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_192DAD3E0)));
        *uint64_t v75 = (float32x4_t)a7;
        v75[1] = v80;
        v75 += 4;
        v76 += 16;
        v77 -= 16;
      }
      while (v77);
      if (v45 == v53) {
        goto LABEL_34;
      }
      unint64_t v62 = v45 & 0xFFFFFFFFFFFFFFF0;
      if ((v45 & 8) == 0)
      {
        uint64_t v67 = v44 + v53 * v58;
        unint64_t v70 = v45 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v63 = v43 + v53 * v59;
LABEL_54:
        unint64_t v71 = v45 - v70;
        unint64_t v72 = (unsigned __int8 *)(v46 + v63);
        uint64_t v73 = 4 * v58;
        unint64_t v74 = (float *)(v18 + 4 * v67);
        do
        {
          a7.i8[0] = *v72;
          *(float *)a7.i32 = *v74 + (float)a7.u32[0];
          *unint64_t v74 = *(float *)a7.i32;
          v72 += v59;
          unint64_t v74 = (float *)((char *)v74 + v73);
          --v71;
        }
        while (v71);
        goto LABEL_34;
      }
    }
    else
    {
      unint64_t v62 = 0;
    }
    uint64_t v63 = v43 + v54 * v59;
    unint64_t v64 = v62 - (v45 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v65 = v46 + v62;
    uint64_t v66 = 4 * v62;
    uint64_t v67 = v44 + v54 * v58;
    do
    {
      uint64_t v68 = (uint64_t)v57 + v66;
      a7.i64[0] = *(void *)(v65 + v43);
      float32x4_t v69 = vaddq_f32(*(float32x4_t *)((char *)v57 + v66 + 16), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_192DAD3F0)));
      a7 = (int8x16_t)vaddq_f32(*(float32x4_t *)((char *)v57 + v66), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_192DAD3E0)));
      *(int8x16_t *)uint64_t v68 = a7;
      *(float32x4_t *)(v68 + 16) = v69;
      v65 += 8;
      v66 += 32;
      v64 += 8;
    }
    while (v64);
    unint64_t v70 = v45 & 0xFFFFFFFFFFFFFFF8;
    if (v45 == v54) {
      goto LABEL_34;
    }
    goto LABEL_54;
  }
  if (v27 != 1)
  {
    if ((v17 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v133 = operator new(v17);
    bzero(v133, v17 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v135 = *a2;
    if (v17 >> 3 <= 1) {
      unint64_t v136 = 1;
    }
    else {
      unint64_t v136 = v17 >> 3;
    }
    uint64_t v137 = a2[5];
    uint64_t v138 = a2[8];
    uint64_t v139 = v136 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v140 = a1[5];
    while (v136 >= 2)
    {
      uint64_t v143 = 0;
      uint64_t v144 = 0;
      uint64_t v145 = v136 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v146 = (void *)(v140 + 8);
      uint64_t v147 = v133 + 1;
      do
      {
        v143 += *(v146 - 1) * *(v147 - 1);
        v144 += *v146 * *v147;
        v147 += 2;
        v146 += 2;
        v145 -= 2;
      }
      while (v145);
      uint64_t v141 = v144 + v143;
      uint64_t v142 = v136 & 0x1FFFFFFFFFFFFFFELL;
      if (v136 != v139) {
        goto LABEL_105;
      }
LABEL_107:
      if (v136 < 2)
      {
        uint64_t v155 = 0;
        uint64_t v156 = 0;
LABEL_112:
        unint64_t v162 = v136 - v156;
        uint64_t v163 = v156;
        unint64_t v164 = (uint64_t *)(v137 + 8 * v156);
        uint64_t v165 = &v133[v163];
        do
        {
          uint64_t v167 = *v165++;
          uint64_t v166 = v167;
          uint64_t v168 = *v164++;
          v155 += v168 * v166;
          --v162;
        }
        while (v162);
        goto LABEL_114;
      }
      uint64_t v157 = 0;
      uint64_t v158 = 0;
      uint64_t v159 = v136 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v160 = (void *)(v137 + 8);
      uint64_t v161 = v133 + 1;
      do
      {
        v157 += *(v160 - 1) * *(v161 - 1);
        v158 += *v160 * *v161;
        v161 += 2;
        v160 += 2;
        v159 -= 2;
      }
      while (v159);
      uint64_t v155 = v158 + v157;
      uint64_t v156 = v136 & 0x1FFFFFFFFFFFFFFELL;
      if (v136 != v139) {
        goto LABEL_112;
      }
LABEL_114:
      LOBYTE(v134) = *(unsigned char *)(v135 + v138 + v155);
      uint64_t v169 = 4 * v141;
      float v134 = *(float *)(v18 + v169) + (float)LODWORD(v134);
      *(float *)(v18 + v169) = v134;
      if ((int)(v17 >> 3) >= 1)
      {
        uint64_t v170 = (v17 >> 3) + 1;
        int v171 = v17 >> 3;
        while (1)
        {
          uint64_t v172 = (v170 - 2);
          unint64_t v173 = v133[v172] + 1;
          v133[v172] = v173;
          if (v173 < v9[v172]) {
            break;
          }
          v133[(v170 - 2)] = 0;
          --v171;
          if ((unint64_t)--v170 <= 1) {
            goto LABEL_120;
          }
        }
        if (v171 > 0) {
          continue;
        }
      }
LABEL_120:
      operator delete(v133);
      return;
    }
    uint64_t v141 = 0;
    uint64_t v142 = 0;
LABEL_105:
    unint64_t v148 = v136 - v142;
    uint64_t v149 = v142;
    uint64_t v150 = (uint64_t *)(v140 + 8 * v142);
    uint64_t v151 = &v133[v149];
    do
    {
      uint64_t v153 = *v151++;
      uint64_t v152 = v153;
      uint64_t v154 = *v150++;
      v141 += v154 * v152;
      --v148;
    }
    while (v148);
    goto LABEL_107;
  }
  unint64_t v28 = *v9;
  if (!*v9) {
    return;
  }
  uint64_t v29 = a2[8];
  uint64_t v30 = a1[8];
  uint64_t v31 = *a2;
  uint64_t v32 = *(void *)a1[5];
  uint64_t v33 = *(void *)a2[5];
  if (v28 < 8) {
    goto LABEL_27;
  }
  unint64_t v34 = 0;
  if (v32 != 1 || v33 != 1) {
    goto LABEL_28;
  }
  if (v18 + 4 * v30 < v31 + v28 + v29 && v31 + v29 < v18 + 4 * (v28 + v30))
  {
LABEL_27:
    unint64_t v34 = 0;
LABEL_28:
    uint64_t v35 = a2[8];
    uint64_t v36 = a1[8];
    goto LABEL_29;
  }
  if (v28 >= 0x10)
  {
    unint64_t v34 = v28 & 0xFFFFFFFFFFFFFFF0;
    uint32x4_t v180 = (int8x16_t *)(v31 + v29);
    uint64_t v181 = (float32x4_t *)(v18 + 4 * v30);
    a3 = NAN;
    a5.i64[1] = 0xFFFFFF0FFFFFFF0ELL;
    unint64_t v182 = v28 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      int8x16_t v183 = *v180++;
      float32x4_t v184 = *v181;
      float32x4_t v185 = vaddq_f32(v181[1], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v183, (int8x16_t)xmmword_192DAD3F0)));
      float32x4_t v186 = vaddq_f32(v181[3], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v183, (int8x16_t)xmmword_192DAD410)));
      void v181[2] = vaddq_f32(v181[2], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v183, (int8x16_t)xmmword_192DAD400)));
      v181[3] = v186;
      float32x4_t *v181 = vaddq_f32(v184, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v183, (int8x16_t)xmmword_192DAD3E0)));
      v181[1] = v185;
      v181 += 4;
      v182 -= 16;
    }
    while (v182);
    if (v28 == v34) {
      return;
    }
    if ((v28 & 8) == 0)
    {
      uint64_t v36 = v30 + v34;
      uint64_t v35 = v29 + v34;
LABEL_29:
      unint64_t v37 = v28 - v34;
      uint64_t v38 = (unsigned char *)(v31 + v35);
      uint64_t v39 = 4 * v32;
      unint64_t v40 = (float *)(v18 + 4 * v36);
      do
      {
        LOBYTE(a3) = *v38;
        a3 = *v40 + (float)LODWORD(a3);
        *unint64_t v40 = a3;
        v38 += v33;
        unint64_t v40 = (float *)((char *)v40 + v39);
        --v37;
      }
      while (v37);
      return;
    }
  }
  else
  {
    unint64_t v34 = 0;
  }
  unint64_t v174 = v34;
  unint64_t v34 = v28 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v35 = v29 + (v28 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v36 = v30 + (v28 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v175 = v174 - (v28 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v176 = (unint64_t *)(v31 + v174 + v29);
  int8x16_t v177 = (float32x4_t *)(v18 + 4 * (v174 + v30));
  a3 = NAN;
  do
  {
    unint64_t v178 = *v176++;
    a5.i64[0] = v178;
    float32x4_t v179 = vaddq_f32(v177[1], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_192DAD3F0)));
    a5 = (int8x16_t)vaddq_f32(*v177, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_192DAD3E0)));
    float32x4_t *v177 = (float32x4_t)a5;
    v177[1] = v179;
    v177 += 2;
    v175 += 8;
  }
  while (v175);
  if (v28 != v34) {
    goto LABEL_29;
  }
}

void sub_19255CD0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::operator+<unsigned char>(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[2];
  long long v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      unint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        unint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        uint64_t v39 = v40;
      }
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      unint64_t v37 = 0;
      size_t v17 = (unsigned char *)a1[5];
      uint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        uint64_t v35 = v19;
        unint64_t v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      unint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v21 = (char *)operator new(v9 - v8);
        uint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        unint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      uint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        uint64_t v29 = v26;
        uint64_t v31 = v27;
        memcpy(v26, v24, v25);
        uint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<float>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<float>::copy(&v28);
    }
  }
  nitro::ndarray<float>::copy(a1);
}

void sub_19255D090(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_19255D0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      uint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  uint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    uint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  uint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_19255D140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x19255D11CLL);
  }
  JUMPOUT(0x19255D0ECLL);
}

void sub_19255D150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x19255D12CLL);
  }
  JUMPOUT(0x19255D0F4);
}

void sub_19255D160()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x19255D104);
  }
  JUMPOUT(0x19255D0FCLL);
}

void nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  long long v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19255D3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        long long v4 = __p;
      }
      else {
        long long v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19255D584(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19255D598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19255D590);
}

void *nitro::ndarray<unsigned char>::ndarray(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  size_t v6 = (unsigned char *)a2[2];
  uint64_t v5 = (unsigned char *)a2[3];
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    a1[2] = v8;
    a1[3] = v8;
    unint64_t v9 = &v8[8 * (v7 >> 3)];
    a1[4] = v9;
    memcpy(v8, v6, v7);
    a1[3] = v9;
  }
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  uint64_t v11 = (unsigned char *)a2[5];
  unsigned __int8 v10 = (unsigned char *)a2[6];
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unsigned __int8 v13 = (char *)operator new(v10 - v11);
    a1[5] = v13;
    a1[6] = v13;
    uint64_t v14 = &v13[8 * (v12 >> 3)];
    a1[7] = v14;
    memcpy(v13, v11, v12);
    a1[6] = v14;
  }
  a1[8] = a2[8];
  return a1;
}

void sub_19255D6AC(_Unwind_Exception *a1)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v5;
    operator delete(v5);
  }
  size_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v6;
    operator delete(v6);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    int64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    int64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unsigned __int8 v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::locale v15 = v23;
      }
      else {
        std::locale v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    size_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  int64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19255D938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void *nitro::ndarray<unsigned char>::operator+=<int>(void *a1, void *a2)
{
  unint64_t v3 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    int64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  int64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  unint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    std::locale v15 = (void *)a2[2];
    if (v14 != (uint64_t)(a2[3] - (void)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<unsigned char>::operator+<int>(a1, a2);
    nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(a1, a2);
  }
  return a1;
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[3];
  unint64_t v6 = (v5 - v4) >> 3;
  int64_t v7 = (void *)a2[2];
  if (v6 != (uint64_t)(a2[3] - (void)v7) >> 3) {
    goto LABEL_13;
  }
  if (v5 == v4) {
    return;
  }
  uint64_t v8 = v6 <= 1 ? 1 : (v5 - v4) >> 3;
  if (*(void *)v4 != *v7) {
    goto LABEL_13;
  }
  uint64_t v9 = 1;
  do
  {
    unint64_t v10 = v9;
    if (v8 == v9) {
      break;
    }
    uint64_t v11 = *(void *)&v4[8 * v9];
    uint64_t v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6) {
LABEL_13:
  }
    nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1})::{lambda(void)#1}::operator()();
  int64_t v13 = v5 - v4;
  if (v5 == v4 || !*a1) {
    return;
  }
  if ((unint64_t)(v13 - 8) < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (char *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *(void *)v15;
      v15 += 8;
      v14 *= v21;
    }
    while (v15 != v5);
    goto LABEL_21;
  }
  unint64_t v16 = ((unint64_t)(v13 - 8) >> 3) + 1;
  std::locale v15 = &v4[8 * (v16 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v17 = v4 + 8;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  unint64_t v22 = v13 >> 3;
  if (v13 >> 3 == 3)
  {
    unint64_t v35 = *(void *)v4;
    if (*(void *)v4)
    {
      unint64_t v36 = 0;
      uint64_t v37 = a2[8];
      uint64_t v38 = a1[8];
      do
      {
        if (*((void *)v4 + 1))
        {
          unint64_t v39 = 0;
          uint64_t v40 = v37;
          uint64_t v41 = v38;
          do
          {
            if (*((void *)v4 + 2))
            {
              unint64_t v44 = 0;
              uint64_t v45 = v40;
              uint64_t v46 = v41;
              do
              {
                *(unsigned char *)(*a1 + v46) += *(_DWORD *)(*a2 + 4 * v45);
                uint64_t v42 = (void *)a1[5];
                v46 += v42[2];
                uint64_t v43 = (void *)a2[5];
                v45 += v43[2];
                ++v44;
                uint64_t v4 = (char *)a1[2];
              }
              while (v44 < *((void *)v4 + 2));
            }
            else
            {
              uint64_t v42 = (void *)a1[5];
              uint64_t v43 = (void *)a2[5];
            }
            v41 += v42[1];
            v40 += v43[1];
            ++v39;
          }
          while (v39 < *((void *)v4 + 1));
          unint64_t v35 = *(void *)v4;
        }
        else
        {
          uint64_t v42 = (void *)a1[5];
          uint64_t v43 = (void *)a2[5];
        }
        v38 += *v42;
        v37 += *v43;
        ++v36;
      }
      while (v36 < v35);
    }
  }
  else
  {
    if (v22 != 2)
    {
      if (v22 == 1)
      {
        if (*(void *)v4)
        {
          unint64_t v23 = 0;
          uint64_t v24 = a2[8];
          uint64_t v25 = a1[8];
          do
          {
            *(unsigned char *)(*a1 + v25) += *(unsigned char *)(*a2 + 4 * v24);
            v25 += *(void *)a1[5];
            v24 += *(void *)a2[5];
            ++v23;
          }
          while (v23 < *(void *)a1[2]);
        }
        return;
      }
      if (v13 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v47 = operator new(v13);
      bzero(v47, v13 & 0xFFFFFFFFFFFFFFF8);
      if (v22 <= 1) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v13 >> 3;
      }
      unint64_t v49 = v48 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        uint64_t v50 = a1[5];
        if (v48 < 2) {
          break;
        }
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        uint64_t v55 = (void *)(v50 + 8);
        unint64_t v56 = v48 & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v57 = v47 + 1;
        do
        {
          v53 += *(v55 - 1) * *(v57 - 1);
          v54 += *v55 * *v57;
          v57 += 2;
          v55 += 2;
          v56 -= 2;
        }
        while (v56);
        uint64_t v51 = v54 + v53;
        unint64_t v52 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49) {
          goto LABEL_60;
        }
LABEL_62:
        uint64_t v65 = a2[5];
        if (v48 < 2)
        {
          uint64_t v66 = 0;
          unint64_t v67 = 0;
LABEL_67:
          unint64_t v73 = v48 - v67;
          uint64_t v74 = v67;
          uint64_t v75 = (uint64_t *)(v65 + v74 * 8);
          uint64_t v76 = &v47[v74];
          do
          {
            uint64_t v78 = *v76++;
            uint64_t v77 = v78;
            uint64_t v79 = *v75++;
            v66 += v79 * v77;
            --v73;
          }
          while (v73);
          goto LABEL_69;
        }
        uint64_t v68 = 0;
        uint64_t v69 = 0;
        unint64_t v70 = (void *)(v65 + 8);
        unint64_t v71 = v48 & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v72 = v47 + 1;
        do
        {
          v68 += *(v70 - 1) * *(v72 - 1);
          v69 += *v70 * *v72;
          v72 += 2;
          v70 += 2;
          v71 -= 2;
        }
        while (v71);
        uint64_t v66 = v69 + v68;
        unint64_t v67 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49) {
          goto LABEL_67;
        }
LABEL_69:
        *(unsigned char *)(*a1 + v51) += *(unsigned char *)(*a2 + 4 * (a2[8] + v66));
        if ((int)((unint64_t)v13 >> 3) >= 1)
        {
          uint64_t v80 = a1[2];
          uint64_t v81 = ((unint64_t)v13 >> 3) + 1;
          unint64_t v82 = (unint64_t)v13 >> 3;
          while (1)
          {
            uint64_t v83 = (v81 - 2);
            unint64_t v84 = v47[v83] + 1;
            v47[v83] = v84;
            if (v84 < *(void *)(v80 + v83 * 8)) {
              break;
            }
            v47[(v81 - 2)] = 0;
            LODWORD(v82) = v82 - 1;
            if ((unint64_t)--v81 <= 1) {
              goto LABEL_75;
            }
          }
          if ((int)v82 > 0) {
            continue;
          }
        }
LABEL_75:
        operator delete(v47);
        return;
      }
      uint64_t v51 = 0;
      unint64_t v52 = 0;
LABEL_60:
      unint64_t v58 = v48 - v52;
      uint64_t v59 = v52;
      BOOL v60 = (uint64_t *)(v50 + v59 * 8);
      BOOL v61 = &v47[v59];
      do
      {
        uint64_t v63 = *v61++;
        uint64_t v62 = v63;
        uint64_t v64 = *v60++;
        v51 += v64 * v62;
        --v58;
      }
      while (v58);
      goto LABEL_62;
    }
    unint64_t v26 = *(void *)v4;
    if (*(void *)v4)
    {
      unint64_t v27 = 0;
      uint64_t v28 = a2[8];
      uint64_t v29 = a1[8];
      do
      {
        if (*((void *)v4 + 1))
        {
          unint64_t v32 = 0;
          uint64_t v33 = v28;
          uint64_t v34 = v29;
          do
          {
            *(unsigned char *)(*a1 + v34) += *(_DWORD *)(*a2 + 4 * v33);
            uint64_t v30 = (void *)a1[5];
            v34 += v30[1];
            uint64_t v31 = (void *)a2[5];
            v33 += v31[1];
            ++v32;
            uint64_t v4 = (char *)a1[2];
          }
          while (v32 < *((void *)v4 + 1));
          unint64_t v26 = *(void *)v4;
        }
        else
        {
          uint64_t v30 = (void *)a1[5];
          uint64_t v31 = (void *)a2[5];
        }
        v29 += *v30;
        v28 += *v31;
        ++v27;
      }
      while (v27 < v26);
    }
  }
}

void sub_19255E0F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::operator+<int>(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  uint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      unint64_t v39 = 0;
      uint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        uint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        unint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      unint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      unint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        uint64_t v37 = v20;
        memcpy(v19, v17, v18);
        unint64_t v36 = v20;
      }
      unint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        unint64_t v22 = &v21[8 * v10];
        unint64_t v32 = v21;
        uint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      unint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v26 = (char *)operator new(v23 - v24);
        unint64_t v27 = &v26[8 * (v25 >> 3)];
        uint64_t v29 = v26;
        uint64_t v31 = v27;
        memcpy(v26, v24, v25);
        uint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<unsigned char>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<unsigned char>::copy(&v28);
    }
  }
  nitro::ndarray<unsigned char>::copy(a1);
}

void sub_19255E47C(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_19255E490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      uint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  uint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    uint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  uint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_19255E52C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x19255E508);
  }
  JUMPOUT(0x19255E4D8);
}

void sub_19255E53C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x19255E518);
  }
  JUMPOUT(0x19255E4E0);
}

void sub_19255E54C()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x19255E4F0);
  }
  JUMPOUT(0x19255E4E8);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19255E7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19255E970(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19255E984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19255E97CLL);
}

uint64_t *nitro::ndarray<int>::operator+=<int>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    unint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  unint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    std::locale v15 = (void *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<int>::operator+<int>(a1, a2);
    nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(a1, a2);
  }
  return a1;
}

int32x4_t nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (unint64_t *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return result;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return result;
  }
  uint64_t v160 = *a1;
  if (!*a1) {
    return result;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v13 = 1;
    unint64_t v14 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v20 = *v14++;
      v13 *= v20;
    }
    while (v14 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v15 = ((v12 - 8) >> 3) + 1;
  unint64_t v14 = &v4[v15 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v16 = v4 + 1;
  uint64_t v17 = 1;
  uint64_t v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v19 = 1;
  do
  {
    v17 *= *(v16 - 1);
    v19 *= *v16;
    v16 += 2;
    v18 -= 2;
  }
  while (v18);
  uint64_t v13 = v19 * v17;
  if (v15 != (v15 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v13) {
    return result;
  }
  uint64_t v21 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v155 = *v4;
    if (!*v4) {
      return result;
    }
    uint64_t v71 = 0;
    uint64_t v72 = a2[8];
    uint64_t v73 = a1[8];
    unint64_t v74 = v4[1];
    uint64_t v75 = (uint64_t *)a1[5];
    uint64_t v152 = (uint64_t *)a2[5];
    uint64_t v153 = *v152;
    uint64_t v154 = *v75;
    uint64_t v157 = 4 * *v75;
    uint64_t v156 = 4 * *v152;
    uint64_t v150 = 4 * v72;
    uint64_t v151 = 4 * v73;
    uint64_t v76 = 4 * v73 + v160 + 16;
    uint64_t v77 = 4 * v72 + 16;
    while (!v74)
    {
LABEL_55:
      v73 += v154;
      v72 += v153;
      ++v71;
      v76 += v157;
      v77 += v156;
      if (v71 == v155) {
        return result;
      }
    }
    uint64_t v78 = 0;
    uint64_t v79 = v150 + v156 * v71;
    unint64_t v80 = v4[2];
    uint64_t v81 = *a2;
    uint64_t v82 = v75[1];
    uint64_t v83 = v152[1];
    uint64_t v84 = 4 * v82;
    uint64_t v159 = v151 + v157 * v71;
    uint64_t v85 = 4 * v83;
    unint64_t v86 = v80 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v87 = a2[5];
    uint64_t v88 = (int32x4_t *)(*a2 + v77);
    uint64_t v89 = (int32x4_t *)v76;
    uint64_t v90 = v72;
    uint64_t v91 = v73;
    while (!v80)
    {
LABEL_58:
      v91 += v82;
      v90 += v83;
      ++v78;
      uint64_t v89 = (int32x4_t *)((char *)v89 + v84);
      uint64_t v88 = (int32x4_t *)((char *)v88 + v85);
      if (v78 == v74) {
        goto LABEL_55;
      }
    }
    uint64_t v92 = v75[2];
    uint64_t v93 = *(void *)(v87 + 16);
    if (v80 >= 8)
    {
      unint64_t v94 = 0;
      if (v92 != 1) {
        goto LABEL_62;
      }
      uint64_t v95 = v90;
      uint64_t v96 = v91;
      if (v93 != 1)
      {
LABEL_63:
        unint64_t v97 = v80 - v94;
        unint64_t v98 = (_DWORD *)(v81 + 4 * v95);
        uint64_t v99 = 4 * v93;
        uint64_t v100 = 4 * v92;
        uint64_t v101 = (_DWORD *)(v160 + 4 * v96);
        do
        {
          *v101 += *v98;
          unint64_t v98 = (_DWORD *)((char *)v98 + v99);
          uint64_t v101 = (_DWORD *)((char *)v101 + v100);
          --v97;
        }
        while (v97);
        goto LABEL_58;
      }
      if (v160 + v159 + v84 * v78 >= v81 + v79 + 4 * v80 + v85 * v78
        || v81 + v79 + v85 * v78 >= v160 + v159 + 4 * v80 + v84 * v78)
      {
        uint64_t v95 = v90 + v86;
        uint64_t v103 = v88;
        BOOL v104 = v89;
        unint64_t v105 = v80 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v96 = v91 + v86;
        do
        {
          int32x4_t result = vaddq_s32(v104[-1], v103[-1]);
          int32x4_t v106 = vaddq_s32(*v104, *v103);
          v104[-1] = result;
          *BOOL v104 = v106;
          v104 += 2;
          v103 += 2;
          v105 -= 8;
        }
        while (v105);
        unint64_t v94 = v80 & 0xFFFFFFFFFFFFFFF8;
        if (v80 == v86) {
          goto LABEL_58;
        }
        goto LABEL_63;
      }
    }
    unint64_t v94 = 0;
LABEL_62:
    uint64_t v95 = v90;
    uint64_t v96 = v91;
    goto LABEL_63;
  }
  if (v21 == 2)
  {
    unint64_t v36 = *v4;
    if (!*v4) {
      return result;
    }
    uint64_t v37 = 0;
    uint64_t v38 = a2[8];
    uint64_t v39 = a1[8];
    unint64_t v40 = v4[1];
    uint64_t v41 = (uint64_t *)a2[5];
    uint64_t v42 = (uint64_t *)a1[5];
    uint64_t v43 = *v42;
    uint64_t v44 = *v41;
    uint64_t v45 = 4 * *v42;
    uint64_t v46 = 4 * *v41;
    unint64_t v47 = v40 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v48 = *a2;
    uint64_t v49 = 4 * v39 + v160 + 16;
    uint64_t v50 = 4 * v38 + *a2 + 16;
    uint64_t v51 = v160 + 4 * v39;
    uint64_t v52 = v160 + 4 * v39 + 4 * v40;
    uint64_t v53 = *a2 + 4 * v38;
    uint64_t v54 = *a2 + 4 * v38 + 4 * v40;
    while (!v40)
    {
LABEL_34:
      v39 += v43;
      v38 += v44;
      ++v37;
      v49 += v45;
      v50 += v46;
      if (v37 == v36) {
        return result;
      }
    }
    uint64_t v55 = v42[1];
    uint64_t v56 = v41[1];
    if (v40 >= 8)
    {
      unint64_t v57 = 0;
      if (v55 != 1) {
        goto LABEL_38;
      }
      uint64_t v58 = v38;
      uint64_t v59 = v39;
      if (v56 != 1)
      {
LABEL_39:
        unint64_t v60 = v40 - v57;
        BOOL v61 = (_DWORD *)(v48 + 4 * v58);
        uint64_t v62 = 4 * v56;
        uint64_t v63 = 4 * v55;
        uint64_t v64 = (_DWORD *)(v160 + 4 * v59);
        do
        {
          *v64 += *v61;
          BOOL v61 = (_DWORD *)((char *)v61 + v62);
          uint64_t v64 = (_DWORD *)((char *)v64 + v63);
          --v60;
        }
        while (v60);
        goto LABEL_34;
      }
      if (v51 + v45 * v37 >= (unint64_t)(v54 + v46 * v37)
        || v53 + v46 * v37 >= (unint64_t)(v52 + v45 * v37))
      {
        uint64_t v58 = v38 + v47;
        uint64_t v66 = (int32x4_t *)v50;
        unint64_t v67 = (int32x4_t *)v49;
        unint64_t v68 = v40 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v59 = v39 + v47;
        do
        {
          int32x4_t result = vaddq_s32(v67[-1], v66[-1]);
          int32x4_t v70 = vaddq_s32(*v67, *v66);
          v67[-1] = result;
          *unint64_t v67 = v70;
          v67 += 2;
          v66 += 2;
          v68 -= 8;
        }
        while (v68);
        unint64_t v57 = v40 & 0xFFFFFFFFFFFFFFF8;
        if (v40 == v47) {
          goto LABEL_34;
        }
        goto LABEL_39;
      }
    }
    unint64_t v57 = 0;
LABEL_38:
    uint64_t v58 = v38;
    uint64_t v59 = v39;
    goto LABEL_39;
  }
  if (v21 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v107 = operator new(v12);
    bzero(v107, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v108 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v109 = 1;
    }
    else {
      unint64_t v109 = v12 >> 3;
    }
    uint64_t v110 = a2[5];
    uint64_t v111 = a2[8];
    uint64_t v112 = v109 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v113 = a1[5];
    while (v109 >= 2)
    {
      uint64_t v116 = 0;
      uint64_t v117 = 0;
      uint64_t v118 = v109 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v119 = (void *)(v113 + 8);
      float32x4_t v120 = v107 + 1;
      do
      {
        v116 += *(v119 - 1) * *(v120 - 1);
        v117 += *v119 * *v120;
        v120 += 2;
        v119 += 2;
        v118 -= 2;
      }
      while (v118);
      uint64_t v114 = v117 + v116;
      uint64_t v115 = v109 & 0x1FFFFFFFFFFFFFFELL;
      if (v109 != v112) {
        goto LABEL_87;
      }
LABEL_89:
      if (v109 < 2)
      {
        uint64_t v128 = 0;
        uint64_t v129 = 0;
LABEL_94:
        unint64_t v135 = v109 - v129;
        uint64_t v136 = v129;
        uint64_t v137 = (uint64_t *)(v110 + 8 * v129);
        uint64_t v138 = &v107[v136];
        do
        {
          uint64_t v140 = *v138++;
          uint64_t v139 = v140;
          uint64_t v141 = *v137++;
          v128 += v141 * v139;
          --v135;
        }
        while (v135);
        goto LABEL_96;
      }
      uint64_t v130 = 0;
      uint64_t v131 = 0;
      uint64_t v132 = v109 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v133 = (void *)(v110 + 8);
      float v134 = v107 + 1;
      do
      {
        v130 += *(v133 - 1) * *(v134 - 1);
        v131 += *v133 * *v134;
        v134 += 2;
        v133 += 2;
        v132 -= 2;
      }
      while (v132);
      uint64_t v128 = v131 + v130;
      uint64_t v129 = v109 & 0x1FFFFFFFFFFFFFFELL;
      if (v109 != v112) {
        goto LABEL_94;
      }
LABEL_96:
      *(_DWORD *)(v160 + 4 * v114) += *(_DWORD *)(v108 + 4 * (v111 + v128));
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v142 = (v12 >> 3) + 1;
        int v143 = v12 >> 3;
        while (1)
        {
          uint64_t v144 = (v142 - 2);
          unint64_t v145 = v107[v144] + 1;
          v107[v144] = v145;
          if (v145 < v4[v144]) {
            break;
          }
          v107[(v142 - 2)] = 0;
          --v143;
          if ((unint64_t)--v142 <= 1) {
            goto LABEL_102;
          }
        }
        if (v143 > 0) {
          continue;
        }
      }
LABEL_102:
      operator delete(v107);
      return result;
    }
    uint64_t v114 = 0;
    uint64_t v115 = 0;
LABEL_87:
    unint64_t v121 = v109 - v115;
    uint64_t v122 = v115;
    int8x16_t v123 = (uint64_t *)(v113 + 8 * v115);
    uint64_t v124 = &v107[v122];
    do
    {
      uint64_t v126 = *v124++;
      uint64_t v125 = v126;
      uint64_t v127 = *v123++;
      v114 += v127 * v125;
      --v121;
    }
    while (v121);
    goto LABEL_89;
  }
  unint64_t v22 = *v4;
  if (!*v4) {
    return result;
  }
  uint64_t v23 = a2[8];
  uint64_t v24 = a1[8];
  uint64_t v25 = *a2;
  uint64_t v26 = *(void *)a1[5];
  uint64_t v27 = *(void *)a2[5];
  if (v22 < 0xC) {
    goto LABEL_27;
  }
  unint64_t v28 = 0;
  if (v26 != 1 || v27 != 1) {
    goto LABEL_28;
  }
  if (v160 + 4 * v24 < v25 + 4 * v22 + 4 * v23 && v25 + 4 * v23 < v160 + 4 * v22 + 4 * v24)
  {
LABEL_27:
    unint64_t v28 = 0;
LABEL_28:
    uint64_t v29 = a2[8];
    uint64_t v30 = a1[8];
LABEL_29:
    unint64_t v31 = v22 - v28;
    unint64_t v32 = (_DWORD *)(v25 + 4 * v29);
    uint64_t v33 = 4 * v27;
    uint64_t v34 = 4 * v26;
    unint64_t v35 = (_DWORD *)(v160 + 4 * v30);
    do
    {
      *v35 += *v32;
      unint64_t v32 = (_DWORD *)((char *)v32 + v33);
      unint64_t v35 = (_DWORD *)((char *)v35 + v34);
      --v31;
    }
    while (v31);
    return result;
  }
  unint64_t v28 = v22 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v29 = v23 + (v22 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v30 = v24 + (v22 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v146 = (int32x4_t *)(v25 + 4 * v23 + 16);
  uint64_t v147 = (int32x4_t *)(v160 + 4 * v24 + 16);
  unint64_t v148 = v22 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    int32x4_t result = vaddq_s32(v147[-1], v146[-1]);
    int32x4_t v149 = vaddq_s32(*v147, *v146);
    v147[-1] = result;
    *uint64_t v147 = v149;
    v146 += 2;
    v147 += 2;
    v148 -= 8;
  }
  while (v148);
  if (v22 != v28) {
    goto LABEL_29;
  }
  return result;
}

void sub_19255F324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::operator+<int>(void *a1, void *a2)
{
  unint64_t v5 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      unint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        unint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        uint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      unint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      uint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        uint64_t v37 = v20;
        memcpy(v19, v17, v18);
        unint64_t v36 = v20;
      }
      unint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        unint64_t v22 = &v21[8 * v10];
        unint64_t v32 = v21;
        uint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      unint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      uint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        uint64_t v29 = v26;
        unint64_t v31 = v27;
        memcpy(v26, v24, v25);
        uint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<int>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<int>::copy(&v28);
    }
  }
  nitro::ndarray<int>::copy(a1);
}

void sub_19255F6A8(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_19255F6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      uint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  uint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    uint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  uint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_19255F758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x19255F734);
  }
  JUMPOUT(0x19255F704);
}

void sub_19255F768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x19255F744);
  }
  JUMPOUT(0x19255F70CLL);
}

void sub_19255F778()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x19255F71CLL);
  }
  JUMPOUT(0x19255F714);
}

void nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19255FA14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19255FB9C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19255FBB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19255FBA8);
}

uint64_t *nitro::ndarray<half>::operator+=<int>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    unint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  unint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  unint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    std::locale v15 = (void *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<half>::operator+<int>(a1, a2);
    nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(a1, a2);
  }
  return a1;
}

void nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (unint64_t *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v13 = *a1;
  if (!*a1) {
    return;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v16 = ((v12 - 8) >> 3) + 1;
  std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v17 = v4 + 1;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  uint64_t v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v179 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v79 = 0;
    uint64_t v80 = a2[8];
    uint64_t v81 = a1[8];
    unint64_t v82 = v4[1];
    uint64_t v83 = (uint64_t *)a1[5];
    unint64_t v174 = (uint64_t *)a2[5];
    uint64_t v84 = v13 + 2 * v81 + 16;
    uint64_t v177 = *v174;
    uint64_t v178 = *v83;
    uint64_t v176 = 2 * *v83;
    uint64_t v85 = 4 * v80 + 32;
    uint64_t v175 = 4 * *v174;
    while (!v82)
    {
LABEL_50:
      v81 += v178;
      v80 += v177;
      ++v79;
      v84 += v176;
      v85 += v175;
      if (v79 == v179) {
        return;
      }
    }
    uint64_t v86 = 0;
    unint64_t v87 = v4[2];
    uint64_t v88 = *a2;
    uint64_t v89 = a2[5];
    uint64_t v90 = v83[1];
    unint64_t v91 = v87 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v92 = (int32x4_t *)(*a2 + v85);
    uint64_t v93 = v174[1];
    unint64_t v94 = (float16x4_t *)v84;
    uint64_t v95 = v80;
    uint64_t v96 = v81;
    while (1)
    {
      if (v87)
      {
        uint64_t v97 = v83[2];
        uint64_t v98 = *(void *)(v89 + 16);
        if (v87 >= 0x10 && (v97 == 1 ? (BOOL v99 = v98 == 1) : (BOOL v99 = 0), v99))
        {
          uint64_t v101 = v95 + v91 * v98;
          uint64_t v111 = v92;
          uint64_t v112 = v94;
          unint64_t v113 = v87 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v102 = v96 + v91 * v97;
          do
          {
            int32x4_t v115 = v111[-2];
            int32x4_t v114 = v111[-1];
            int32x4_t v117 = *v111;
            int32x4_t v116 = v111[1];
            v111 += 4;
            float16x8_t v118 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vcvtq_f32_s32(v115), vcvtq_f32_f16(v112[-2]))), vaddq_f32(vcvtq_f32_s32(v114), vcvt_hight_f32_f16(*(float16x8_t *)v112[-2].i8)));
            float16x8_t v119 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vcvtq_f32_s32(v117), vcvtq_f32_f16(*v112))), vaddq_f32(vcvtq_f32_s32(v116), vcvt_hight_f32_f16(*(float16x8_t *)v112->i8)));
            *(float16x8_t *)v112[-2].i8 = v118;
            *(float16x8_t *)v112->i8 = v119;
            v112 += 4;
            v113 -= 16;
          }
          while (v113);
          unint64_t v100 = v87 & 0xFFFFFFFFFFFFFFF0;
          if (v87 == v91) {
            goto LABEL_53;
          }
        }
        else
        {
          unint64_t v100 = 0;
          uint64_t v101 = v95;
          uint64_t v102 = v96;
        }
        unint64_t v103 = v87 - v100;
        BOOL v104 = (int *)(v88 + 4 * v101);
        uint64_t v105 = 4 * v98;
        uint64_t v106 = 2 * v97;
        uint64_t v107 = (__int16 *)(v13 + 2 * v102);
        do
        {
          _H1 = *v107;
          __asm { FCVT            S1, H1 }
          _S0 = (float)*v104 + _S1;
          __asm { FCVT            H0, S0 }
          __int16 *v107 = LOWORD(_S0);
          BOOL v104 = (int *)((char *)v104 + v105);
          uint64_t v107 = (__int16 *)((char *)v107 + v106);
          --v103;
        }
        while (v103);
      }
LABEL_53:
      v96 += v90;
      v95 += v93;
      ++v86;
      unint64_t v94 = (float16x4_t *)((char *)v94 + 2 * v90);
      uint64_t v92 = (int32x4_t *)((char *)v92 + 4 * v93);
      if (v86 == v82) {
        goto LABEL_50;
      }
    }
  }
  if (v22 == 2)
  {
    unint64_t v41 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v42 = 0;
    uint64_t v43 = a2[8];
    uint64_t v44 = a1[8];
    unint64_t v45 = v4[1];
    uint64_t v46 = *a2;
    unint64_t v47 = (uint64_t *)a2[5];
    uint64_t v48 = (uint64_t *)a1[5];
    uint64_t v49 = *v48;
    uint64_t v50 = *v47;
    unint64_t v51 = v45 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v52 = v13 + 2 * v44 + 16;
    uint64_t v53 = 2 * *v48;
    uint64_t v54 = *a2 + 4 * v43 + 32;
    uint64_t v55 = 4 * *v47;
    while (1)
    {
      if (v45)
      {
        uint64_t v56 = v48[1];
        uint64_t v57 = v47[1];
        if (v45 >= 0x10 && (v56 == 1 ? (_ZF = v57 == 1) : (_ZF = 0), _ZF))
        {
          uint64_t v60 = v43 + v51 * v57;
          int32x4_t v70 = (int32x4_t *)v54;
          uint64_t v71 = (float16x4_t *)v52;
          unint64_t v72 = v45 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v61 = v44 + v51 * v56;
          do
          {
            int32x4_t v74 = v70[-2];
            int32x4_t v73 = v70[-1];
            int32x4_t v76 = *v70;
            int32x4_t v75 = v70[1];
            v70 += 4;
            float16x8_t v77 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vcvtq_f32_s32(v74), vcvtq_f32_f16(v71[-2]))), vaddq_f32(vcvtq_f32_s32(v73), vcvt_hight_f32_f16(*(float16x8_t *)v71[-2].i8)));
            float16x8_t v78 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vcvtq_f32_s32(v76), vcvtq_f32_f16(*v71))), vaddq_f32(vcvtq_f32_s32(v75), vcvt_hight_f32_f16(*(float16x8_t *)v71->i8)));
            *(float16x8_t *)v71[-2].i8 = v77;
            *(float16x8_t *)v71->i8 = v78;
            v71 += 4;
            v72 -= 16;
          }
          while (v72);
          unint64_t v59 = v45 & 0xFFFFFFFFFFFFFFF0;
          if (v45 == v51) {
            goto LABEL_33;
          }
        }
        else
        {
          unint64_t v59 = 0;
          uint64_t v60 = v43;
          uint64_t v61 = v44;
        }
        unint64_t v62 = v45 - v59;
        uint64_t v63 = (int *)(v46 + 4 * v60);
        uint64_t v64 = 4 * v57;
        uint64_t v65 = 2 * v56;
        uint64_t v66 = (__int16 *)(v13 + 2 * v61);
        do
        {
          _H1 = *v66;
          __asm { FCVT            S1, H1 }
          _S0 = (float)*v63 + _S1;
          __asm { FCVT            H0, S0 }
          *uint64_t v66 = LOWORD(_S0);
          uint64_t v63 = (int *)((char *)v63 + v64);
          uint64_t v66 = (__int16 *)((char *)v66 + v65);
          --v62;
        }
        while (v62);
      }
LABEL_33:
      v44 += v49;
      v43 += v50;
      ++v42;
      v52 += v53;
      v54 += v55;
      if (v42 == v41) {
        return;
      }
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    float32x4_t v120 = operator new(v12);
    bzero(v120, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v121 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v122 = 1;
    }
    else {
      unint64_t v122 = v12 >> 3;
    }
    uint64_t v123 = a2[5];
    uint64_t v124 = a2[8];
    uint64_t v125 = v122 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v126 = a1[5];
    while (v122 >= 2)
    {
      uint64_t v129 = 0;
      uint64_t v130 = 0;
      uint64_t v131 = v122 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v132 = (void *)(v126 + 8);
      uint64_t v133 = v120 + 1;
      do
      {
        v129 += *(v132 - 1) * *(v133 - 1);
        v130 += *v132 * *v133;
        v133 += 2;
        v132 += 2;
        v131 -= 2;
      }
      while (v131);
      uint64_t v127 = v130 + v129;
      uint64_t v128 = v122 & 0x1FFFFFFFFFFFFFFELL;
      if (v122 != v125) {
        goto LABEL_78;
      }
LABEL_80:
      if (v122 < 2)
      {
        uint64_t v141 = 0;
        uint64_t v142 = 0;
LABEL_85:
        unint64_t v148 = v122 - v142;
        uint64_t v149 = v142;
        uint64_t v150 = (uint64_t *)(v123 + 8 * v142);
        uint64_t v151 = &v120[v149];
        do
        {
          uint64_t v153 = *v151++;
          uint64_t v152 = v153;
          uint64_t v154 = *v150++;
          v141 += v154 * v152;
          --v148;
        }
        while (v148);
        goto LABEL_87;
      }
      uint64_t v143 = 0;
      uint64_t v144 = 0;
      uint64_t v145 = v122 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v146 = (void *)(v123 + 8);
      uint64_t v147 = v120 + 1;
      do
      {
        v143 += *(v146 - 1) * *(v147 - 1);
        v144 += *v146 * *v147;
        v147 += 2;
        v146 += 2;
        v145 -= 2;
      }
      while (v145);
      uint64_t v141 = v144 + v143;
      uint64_t v142 = v122 & 0x1FFFFFFFFFFFFFFELL;
      if (v122 != v125) {
        goto LABEL_85;
      }
LABEL_87:
      uint64_t v155 = 2 * v127;
      _H1 = *(_WORD *)(v13 + v155);
      __asm { FCVT            S1, H1 }
      _S0 = (float)*(int *)(v121 + 4 * (v124 + v141)) + _S1;
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v13 + v155) = LOWORD(_S0);
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v159 = (v12 >> 3) + 1;
        int v160 = v12 >> 3;
        while (1)
        {
          uint64_t v161 = (v159 - 2);
          unint64_t v162 = v120[v161] + 1;
          v120[v161] = v162;
          if (v162 < v4[v161]) {
            break;
          }
          v120[(v159 - 2)] = 0;
          --v160;
          if ((unint64_t)--v159 <= 1) {
            goto LABEL_93;
          }
        }
        if (v160 > 0) {
          continue;
        }
      }
LABEL_93:
      operator delete(v120);
      return;
    }
    uint64_t v127 = 0;
    uint64_t v128 = 0;
LABEL_78:
    unint64_t v134 = v122 - v128;
    uint64_t v135 = v128;
    uint64_t v136 = (uint64_t *)(v126 + 8 * v128);
    uint64_t v137 = &v120[v135];
    do
    {
      uint64_t v139 = *v137++;
      uint64_t v138 = v139;
      uint64_t v140 = *v136++;
      v127 += v140 * v138;
      --v134;
    }
    while (v134);
    goto LABEL_80;
  }
  unint64_t v23 = *v4;
  if (!*v4) {
    return;
  }
  uint64_t v24 = a2[8];
  uint64_t v25 = a1[8];
  uint64_t v26 = *a2;
  uint64_t v27 = *(void *)a1[5];
  uint64_t v28 = *(void *)a2[5];
  if (v23 < 0x10)
  {
    unint64_t v29 = 0;
LABEL_28:
    unint64_t v30 = v23 - v29;
    unint64_t v31 = (int *)(v26 + 4 * v24);
    uint64_t v32 = 4 * v28;
    uint64_t v33 = 2 * v27;
    uint64_t v34 = (__int16 *)(v13 + 2 * v25);
    do
    {
      _H1 = *v34;
      __asm { FCVT            S1, H1 }
      _S0 = (float)*v31 + _S1;
      __asm { FCVT            H0, S0 }
      *uint64_t v34 = LOWORD(_S0);
      unint64_t v31 = (int *)((char *)v31 + v32);
      uint64_t v34 = (__int16 *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  unint64_t v29 = 0;
  if (v27 != 1) {
    goto LABEL_28;
  }
  if (v28 != 1) {
    goto LABEL_28;
  }
  unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  uint64_t v163 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v164 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = (int32x4_t *)(v26 + 4 * v24 + 32);
  uint64_t v166 = (float16x4_t *)(v13 + 2 * v25 + 16);
  unint64_t v167 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    int32x4_t v169 = v165[-2];
    int32x4_t v168 = v165[-1];
    int32x4_t v171 = *v165;
    int32x4_t v170 = v165[1];
    v165 += 4;
    float16x8_t v172 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vcvtq_f32_s32(v169), vcvtq_f32_f16(v166[-2]))), vaddq_f32(vcvtq_f32_s32(v168), vcvt_hight_f32_f16(*(float16x8_t *)v166[-2].i8)));
    float16x8_t v173 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(vcvtq_f32_s32(v171), vcvtq_f32_f16(*v166))), vaddq_f32(vcvtq_f32_s32(v170), vcvt_hight_f32_f16(*(float16x8_t *)v166->i8)));
    *(float16x8_t *)v166[-2].i8 = v172;
    *(float16x8_t *)v166->i8 = v173;
    v166 += 4;
    v167 -= 16;
  }
  while (v167);
  uint64_t v24 = v163;
  uint64_t v25 = v164;
  if (v23 != v29) {
    goto LABEL_28;
  }
}

void sub_1925604FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::operator+<int>(void *a1, void *a2)
{
  unint64_t v5 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      unint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        unint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        uint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      unint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      unint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        uint64_t v37 = v20;
        memcpy(v19, v17, v18);
        unint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        uint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        uint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      unint64_t v29 = 0;
      unint64_t v30 = 0;
      unint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      unint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        unint64_t v29 = v26;
        unint64_t v31 = v27;
        memcpy(v26, v24, v25);
        unint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<half>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<half>::copy(&v28);
    }
  }
  nitro::ndarray<half>::copy(a1);
}

void sub_192560880(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_192560894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      unint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  unint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    unint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  unint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_192560930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x19256090CLL);
  }
  JUMPOUT(0x1925608DCLL);
}

void sub_192560940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x19256091CLL);
  }
  JUMPOUT(0x1925608E4);
}

void sub_192560950()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x1925608F4);
  }
  JUMPOUT(0x1925608ECLL);
}

void nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192560BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192560D74(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192560D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192560D80);
}

uint64_t *nitro::ndarray<float>::operator+=<int>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    unint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  unint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  unint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    std::locale v15 = (void *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<float>::operator+<int>(a1, a2);
    nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(a1, a2);
  }
  return a1;
}

void nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (unint64_t *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v13 = *a1;
  if (!*a1) {
    return;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v16 = ((v12 - 8) >> 3) + 1;
  std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v17 = v4 + 1;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  uint64_t v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v148 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v65 = 0;
    uint64_t v66 = a2[8];
    uint64_t v67 = a1[8];
    unint64_t v68 = v4[1];
    uint64_t v69 = (uint64_t *)a1[5];
    uint64_t v143 = (uint64_t *)a2[5];
    uint64_t v70 = v13 + 4 * v67 + 16;
    uint64_t v146 = *v143;
    uint64_t v147 = *v69;
    uint64_t v145 = 4 * *v69;
    uint64_t v71 = 4 * v66 + 16;
    uint64_t v144 = 4 * *v143;
    while (!v68)
    {
LABEL_50:
      v67 += v147;
      v66 += v146;
      ++v65;
      v70 += v145;
      v71 += v144;
      if (v65 == v148) {
        return;
      }
    }
    uint64_t v72 = 0;
    unint64_t v73 = v4[2];
    uint64_t v74 = *a2;
    uint64_t v75 = a2[5];
    uint64_t v76 = v69[1];
    unint64_t v77 = v73 & 0xFFFFFFFFFFFFFFF8;
    float16x8_t v78 = (int32x4_t *)(*a2 + v71);
    uint64_t v79 = v143[1];
    uint64_t v80 = (float32x4_t *)v70;
    uint64_t v81 = v66;
    uint64_t v82 = v67;
    while (1)
    {
      if (v73)
      {
        uint64_t v83 = v69[2];
        uint64_t v84 = *(void *)(v75 + 16);
        if (v73 >= 8 && (v83 == 1 ? (BOOL v85 = v84 == 1) : (BOOL v85 = 0), v85))
        {
          uint64_t v87 = v81 + v77 * v84;
          unint64_t v94 = v78;
          uint64_t v95 = v80;
          unint64_t v96 = v73 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v88 = v82 + v77 * v83;
          do
          {
            float32x4_t v97 = vaddq_f32(*v95, vcvtq_f32_s32(*v94));
            v95[-1] = vaddq_f32(v95[-1], vcvtq_f32_s32(v94[-1]));
            *uint64_t v95 = v97;
            v95 += 2;
            v94 += 2;
            v96 -= 8;
          }
          while (v96);
          unint64_t v86 = v73 & 0xFFFFFFFFFFFFFFF8;
          if (v73 == v77) {
            goto LABEL_53;
          }
        }
        else
        {
          unint64_t v86 = 0;
          uint64_t v87 = v81;
          uint64_t v88 = v82;
        }
        unint64_t v89 = v73 - v86;
        uint64_t v90 = (int *)(v74 + 4 * v87);
        uint64_t v91 = 4 * v84;
        uint64_t v92 = 4 * v83;
        uint64_t v93 = (float *)(v13 + 4 * v88);
        do
        {
          float *v93 = *v93 + (float)*v90;
          uint64_t v90 = (int *)((char *)v90 + v91);
          uint64_t v93 = (float *)((char *)v93 + v92);
          --v89;
        }
        while (v89);
      }
LABEL_53:
      v82 += v76;
      v81 += v79;
      ++v72;
      uint64_t v80 = (float32x4_t *)((char *)v80 + 4 * v76);
      float16x8_t v78 = (int32x4_t *)((char *)v78 + 4 * v79);
      if (v72 == v68) {
        goto LABEL_50;
      }
    }
  }
  if (v22 == 2)
  {
    unint64_t v35 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v36 = 0;
    uint64_t v37 = a2[8];
    uint64_t v38 = a1[8];
    unint64_t v39 = v4[1];
    uint64_t v40 = *a2;
    unint64_t v41 = (uint64_t *)a2[5];
    uint64_t v42 = (uint64_t *)a1[5];
    uint64_t v43 = *v42;
    uint64_t v44 = *v41;
    unint64_t v45 = v39 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v46 = v13 + 4 * v38 + 16;
    uint64_t v47 = 4 * *v42;
    uint64_t v48 = *a2 + 4 * v37 + 16;
    uint64_t v49 = 4 * *v41;
    while (1)
    {
      if (v39)
      {
        uint64_t v50 = v42[1];
        uint64_t v51 = v41[1];
        if (v39 >= 8 && (v50 == 1 ? (BOOL v52 = v51 == 1) : (BOOL v52 = 0), v52))
        {
          uint64_t v54 = v37 + v45 * v51;
          uint64_t v61 = (int32x4_t *)v48;
          unint64_t v62 = (float32x4_t *)v46;
          unint64_t v63 = v39 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v55 = v38 + v45 * v50;
          do
          {
            float32x4_t v64 = vaddq_f32(*v62, vcvtq_f32_s32(*v61));
            v62[-1] = vaddq_f32(v62[-1], vcvtq_f32_s32(v61[-1]));
            *unint64_t v62 = v64;
            v62 += 2;
            v61 += 2;
            v63 -= 8;
          }
          while (v63);
          unint64_t v53 = v39 & 0xFFFFFFFFFFFFFFF8;
          if (v39 == v45) {
            goto LABEL_33;
          }
        }
        else
        {
          unint64_t v53 = 0;
          uint64_t v54 = v37;
          uint64_t v55 = v38;
        }
        unint64_t v56 = v39 - v53;
        uint64_t v57 = (int *)(v40 + 4 * v54);
        uint64_t v58 = 4 * v51;
        uint64_t v59 = 4 * v50;
        uint64_t v60 = (float *)(v13 + 4 * v55);
        do
        {
          *uint64_t v60 = *v60 + (float)*v57;
          uint64_t v57 = (int *)((char *)v57 + v58);
          uint64_t v60 = (float *)((char *)v60 + v59);
          --v56;
        }
        while (v56);
      }
LABEL_33:
      v38 += v43;
      v37 += v44;
      ++v36;
      v46 += v47;
      v48 += v49;
      if (v36 == v35) {
        return;
      }
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v98 = operator new(v12);
    bzero(v98, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v99 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v100 = 1;
    }
    else {
      unint64_t v100 = v12 >> 3;
    }
    uint64_t v101 = a2[5];
    uint64_t v102 = a2[8];
    uint64_t v103 = v100 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v104 = a1[5];
    while (v100 >= 2)
    {
      uint64_t v107 = 0;
      uint64_t v108 = 0;
      uint64_t v109 = v100 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v110 = (void *)(v104 + 8);
      uint64_t v111 = v98 + 1;
      do
      {
        v107 += *(v110 - 1) * *(v111 - 1);
        v108 += *v110 * *v111;
        v111 += 2;
        v110 += 2;
        v109 -= 2;
      }
      while (v109);
      uint64_t v105 = v108 + v107;
      uint64_t v106 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103) {
        goto LABEL_78;
      }
LABEL_80:
      if (v100 < 2)
      {
        uint64_t v119 = 0;
        uint64_t v120 = 0;
LABEL_85:
        unint64_t v126 = v100 - v120;
        uint64_t v127 = v120;
        uint64_t v128 = (uint64_t *)(v101 + 8 * v120);
        uint64_t v129 = &v98[v127];
        do
        {
          uint64_t v131 = *v129++;
          uint64_t v130 = v131;
          uint64_t v132 = *v128++;
          v119 += v132 * v130;
          --v126;
        }
        while (v126);
        goto LABEL_87;
      }
      uint64_t v121 = 0;
      uint64_t v122 = 0;
      uint64_t v123 = v100 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v124 = (void *)(v101 + 8);
      uint64_t v125 = v98 + 1;
      do
      {
        v121 += *(v124 - 1) * *(v125 - 1);
        v122 += *v124 * *v125;
        v125 += 2;
        v124 += 2;
        v123 -= 2;
      }
      while (v123);
      uint64_t v119 = v122 + v121;
      uint64_t v120 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103) {
        goto LABEL_85;
      }
LABEL_87:
      *(float *)(v13 + 4 * v105) = *(float *)(v13 + 4 * v105) + (float)*(int *)(v99 + 4 * (v102 + v119));
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v133 = (v12 >> 3) + 1;
        int v134 = v12 >> 3;
        while (1)
        {
          uint64_t v135 = (v133 - 2);
          unint64_t v136 = v98[v135] + 1;
          v98[v135] = v136;
          if (v136 < v4[v135]) {
            break;
          }
          v98[(v133 - 2)] = 0;
          --v134;
          if ((unint64_t)--v133 <= 1) {
            goto LABEL_93;
          }
        }
        if (v134 > 0) {
          continue;
        }
      }
LABEL_93:
      operator delete(v98);
      return;
    }
    uint64_t v105 = 0;
    uint64_t v106 = 0;
LABEL_78:
    unint64_t v112 = v100 - v106;
    uint64_t v113 = v106;
    int32x4_t v114 = (uint64_t *)(v104 + 8 * v106);
    int32x4_t v115 = &v98[v113];
    do
    {
      uint64_t v117 = *v115++;
      uint64_t v116 = v117;
      uint64_t v118 = *v114++;
      v105 += v118 * v116;
      --v112;
    }
    while (v112);
    goto LABEL_80;
  }
  unint64_t v23 = *v4;
  if (!*v4) {
    return;
  }
  uint64_t v24 = a2[8];
  uint64_t v25 = a1[8];
  uint64_t v26 = *a2;
  uint64_t v27 = *(void *)a1[5];
  uint64_t v28 = *(void *)a2[5];
  if (v23 < 8)
  {
    unint64_t v29 = 0;
LABEL_28:
    unint64_t v30 = v23 - v29;
    unint64_t v31 = (int *)(v26 + 4 * v24);
    uint64_t v32 = 4 * v28;
    uint64_t v33 = 4 * v27;
    uint64_t v34 = (float *)(v13 + 4 * v25);
    do
    {
      *uint64_t v34 = *v34 + (float)*v31;
      unint64_t v31 = (int *)((char *)v31 + v32);
      uint64_t v34 = (float *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  unint64_t v29 = 0;
  if (v27 != 1) {
    goto LABEL_28;
  }
  if (v28 != 1) {
    goto LABEL_28;
  }
  unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v137 = v24 + (v23 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v138 = v25 + (v23 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v139 = (int32x4_t *)(v26 + 4 * v24 + 16);
  uint64_t v140 = (float32x4_t *)(v13 + 4 * v25 + 16);
  unint64_t v141 = v23 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    float32x4_t v142 = vaddq_f32(*v140, vcvtq_f32_s32(*v139));
    v140[-1] = vaddq_f32(v140[-1], vcvtq_f32_s32(v139[-1]));
    float32x4_t *v140 = v142;
    v139 += 2;
    v140 += 2;
    v141 -= 8;
  }
  while (v141);
  uint64_t v24 = v137;
  uint64_t v25 = v138;
  if (v23 != v29) {
    goto LABEL_28;
  }
}

void sub_192561624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::operator+<int>(void *a1, void *a2)
{
  unint64_t v5 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      unint64_t v39 = 0;
      uint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        uint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        unint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      unint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        uint64_t v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        uint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        uint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      unint64_t v29 = 0;
      unint64_t v30 = 0;
      unint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      unint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        unint64_t v29 = v26;
        unint64_t v31 = v27;
        memcpy(v26, v24, v25);
        unint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<float>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<float>::copy(&v28);
    }
  }
  nitro::ndarray<float>::copy(a1);
}

void sub_1925619A8(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1925619BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      unint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  unint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    unint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  unint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_192561A58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x192561A34);
  }
  JUMPOUT(0x192561A04);
}

void sub_192561A68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x192561A44);
  }
  JUMPOUT(0x192561A0CLL);
}

void sub_192561A78()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x192561A1CLL);
  }
  JUMPOUT(0x192561A14);
}

void nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192561D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192561E9C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192561EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192561EA8);
}

void *nitro::ndarray<int>::ndarray(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  size_t v6 = (unsigned char *)a2[2];
  uint64_t v5 = (unsigned char *)a2[3];
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    a1[2] = v8;
    a1[3] = v8;
    unint64_t v9 = &v8[8 * (v7 >> 3)];
    a1[4] = v9;
    memcpy(v8, v6, v7);
    a1[3] = v9;
  }
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  uint64_t v11 = (unsigned char *)a2[5];
  unsigned __int8 v10 = (unsigned char *)a2[6];
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unsigned __int8 v13 = (char *)operator new(v10 - v11);
    a1[5] = v13;
    a1[6] = v13;
    uint64_t v14 = &v13[8 * (v12 >> 3)];
    a1[7] = v14;
    memcpy(v13, v11, v12);
    a1[6] = v14;
  }
  a1[8] = a2[8];
  return a1;
}

void sub_192561FC4(_Unwind_Exception *a1)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v5;
    operator delete(v5);
  }
  size_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v6;
    operator delete(v6);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *nitro::ndarray<unsigned char>::operator+=<half>(void *a1, void *a2, double a3, float a4)
{
  uint64_t v5 = (char *)a1[2];
  size_t v6 = (char *)a1[3];
  uint64_t v7 = v6 - v5;
  if (v6 == v5 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v7 - 8) < 8)
  {
    uint64_t v8 = 1;
    unint64_t v9 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v15 = *(void *)v9;
      v9 += 8;
      v8 *= v15;
    }
    while (v9 != v6);
    goto LABEL_9;
  }
  unint64_t v10 = ((unint64_t)(v7 - 8) >> 3) + 1;
  unint64_t v9 = &v5[8 * (v10 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v11 = v5 + 8;
  uint64_t v12 = 1;
  uint64_t v13 = v10 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v14 = 1;
  do
  {
    v12 *= *(v11 - 1);
    v14 *= *v11;
    v11 += 2;
    v13 -= 2;
  }
  while (v13);
  uint64_t v8 = v14 * v12;
  if (v10 != (v10 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v8)
  {
    unint64_t v16 = v7 >> 3;
    uint64_t v17 = (void *)a2[2];
    if (v16 != (uint64_t)(a2[3] - (void)v17) >> 3) {
      goto LABEL_19;
    }
    uint64_t v18 = v16 <= 1 ? 1 : v16;
    if (*(void *)v5 != *v17) {
      goto LABEL_19;
    }
    uint64_t v19 = 1;
    do
    {
      unint64_t v20 = v19;
      if (v18 == v19) {
        break;
      }
      uint64_t v21 = *(void *)&v5[8 * v19];
      uint64_t v22 = v17[v19++];
    }
    while (v21 == v22);
    if (v20 < v16) {
LABEL_19:
    }
      nitro::ndarray<unsigned char>::operator+<half>(a1, a2);
    nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(a1, a2, a3, a4);
  }
  return a1;
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(void *a1, void *a2, double a3, float a4)
{
  size_t v6 = (char *)a1[2];
  uint64_t v7 = (char *)a1[3];
  unint64_t v8 = (v7 - v6) >> 3;
  unint64_t v9 = (void *)a2[2];
  if (v8 != (uint64_t)(a2[3] - (void)v9) >> 3) {
    goto LABEL_13;
  }
  if (v7 == v6) {
    return;
  }
  uint64_t v10 = v8 <= 1 ? 1 : (v7 - v6) >> 3;
  if (*(void *)v6 != *v9) {
    goto LABEL_13;
  }
  uint64_t v11 = 1;
  do
  {
    unint64_t v12 = v11;
    if (v10 == v11) {
      break;
    }
    uint64_t v13 = *(void *)&v6[8 * v11];
    uint64_t v14 = v9[v11++];
  }
  while (v13 == v14);
  if (v12 < v8) {
LABEL_13:
  }
    nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1})::{lambda(void)#1}::operator()();
  int64_t v15 = v7 - v6;
  if (v7 == v6 || !*a1) {
    return;
  }
  if ((unint64_t)(v15 - 8) < 8)
  {
    uint64_t v16 = 1;
    uint64_t v17 = (char *)a1[2];
    do
    {
LABEL_20:
      uint64_t v23 = *(void *)v17;
      v17 += 8;
      v16 *= v23;
    }
    while (v17 != v7);
    goto LABEL_21;
  }
  unint64_t v18 = ((unint64_t)(v15 - 8) >> 3) + 1;
  uint64_t v17 = &v6[8 * (v18 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v19 = v6 + 8;
  uint64_t v20 = 1;
  uint64_t v21 = v18 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v22 = 1;
  do
  {
    v20 *= *(v19 - 1);
    v22 *= *v19;
    v19 += 2;
    v21 -= 2;
  }
  while (v21);
  uint64_t v16 = v22 * v20;
  if (v18 != (v18 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v16) {
    return;
  }
  unint64_t v24 = v15 >> 3;
  if (v15 >> 3 == 3)
  {
    unint64_t v45 = *(void *)v6;
    if (*(void *)v6)
    {
      unint64_t v46 = 0;
      uint64_t v47 = a2[8];
      uint64_t v48 = a1[8];
      do
      {
        if (*((void *)v6 + 1))
        {
          unint64_t v49 = 0;
          uint64_t v50 = v47;
          uint64_t v51 = v48;
          do
          {
            if (*((void *)v6 + 2))
            {
              unint64_t v54 = 0;
              uint64_t v55 = v50;
              uint64_t v56 = v51;
              do
              {
                _H0 = *(_WORD *)(*a2 + 2 * v55);
                __asm { FCVT            S0, H0 }
                LOBYTE(a4) = *(unsigned char *)(*a1 + v56);
                a4 = (float)LODWORD(a4);
                *(unsigned char *)(*a1 + v56) = (int)(float)(_S0 + a4);
                BOOL v52 = (void *)a1[5];
                v56 += v52[2];
                unint64_t v53 = (void *)a2[5];
                v55 += v53[2];
                ++v54;
                size_t v6 = (char *)a1[2];
              }
              while (v54 < *((void *)v6 + 2));
            }
            else
            {
              BOOL v52 = (void *)a1[5];
              unint64_t v53 = (void *)a2[5];
            }
            v51 += v52[1];
            v50 += v53[1];
            ++v49;
          }
          while (v49 < *((void *)v6 + 1));
          unint64_t v45 = *(void *)v6;
        }
        else
        {
          BOOL v52 = (void *)a1[5];
          unint64_t v53 = (void *)a2[5];
        }
        v48 += *v52;
        v47 += *v53;
        ++v46;
      }
      while (v46 < v45);
    }
  }
  else
  {
    if (v24 != 2)
    {
      if (v24 == 1)
      {
        if (*(void *)v6)
        {
          unint64_t v25 = 0;
          uint64_t v26 = a2[8];
          uint64_t v27 = a1[8];
          do
          {
            _H0 = *(_WORD *)(*a2 + 2 * v26);
            __asm { FCVT            S0, H0 }
            LOBYTE(a4) = *(unsigned char *)(*a1 + v27);
            a4 = (float)LODWORD(a4);
            *(unsigned char *)(*a1 + v27) = (int)(float)(_S0 + a4);
            v27 += *(void *)a1[5];
            v26 += *(void *)a2[5];
            ++v25;
          }
          while (v25 < *(void *)a1[2]);
        }
        return;
      }
      if (v15 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v59 = operator new(v15);
      bzero(v59, v15 & 0xFFFFFFFFFFFFFFF8);
      if (v24 <= 1) {
        unint64_t v61 = 1;
      }
      else {
        unint64_t v61 = v15 >> 3;
      }
      unint64_t v62 = v61 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        uint64_t v63 = a1[5];
        if (v61 < 2) {
          break;
        }
        uint64_t v66 = 0;
        uint64_t v67 = 0;
        unint64_t v68 = (void *)(v63 + 8);
        unint64_t v69 = v61 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v70 = v59 + 1;
        do
        {
          v66 += *(v68 - 1) * *(v70 - 1);
          v67 += *v68 * *v70;
          v70 += 2;
          v68 += 2;
          v69 -= 2;
        }
        while (v69);
        uint64_t v64 = v67 + v66;
        unint64_t v65 = v61 & 0xFFFFFFFFFFFFFFFELL;
        if (v61 != v62) {
          goto LABEL_60;
        }
LABEL_62:
        uint64_t v78 = a2[5];
        if (v61 < 2)
        {
          uint64_t v79 = 0;
          unint64_t v80 = 0;
LABEL_67:
          unint64_t v86 = v61 - v80;
          uint64_t v87 = v80;
          uint64_t v88 = (uint64_t *)(v78 + v87 * 8);
          unint64_t v89 = &v59[v87];
          do
          {
            uint64_t v91 = *v89++;
            uint64_t v90 = v91;
            uint64_t v92 = *v88++;
            v79 += v92 * v90;
            --v86;
          }
          while (v86);
          goto LABEL_69;
        }
        uint64_t v81 = 0;
        uint64_t v82 = 0;
        uint64_t v83 = (void *)(v78 + 8);
        unint64_t v84 = v61 & 0xFFFFFFFFFFFFFFFELL;
        BOOL v85 = v59 + 1;
        do
        {
          v81 += *(v83 - 1) * *(v85 - 1);
          v82 += *v83 * *v85;
          v85 += 2;
          v83 += 2;
          v84 -= 2;
        }
        while (v84);
        uint64_t v79 = v82 + v81;
        unint64_t v80 = v61 & 0xFFFFFFFFFFFFFFFELL;
        if (v61 != v62) {
          goto LABEL_67;
        }
LABEL_69:
        _H0 = *(_WORD *)(*a2 + 2 * (a2[8] + v79));
        __asm { FCVT            S0, H0 }
        LOBYTE(v60) = *(unsigned char *)(*a1 + v64);
        float v60 = (float)LODWORD(v60);
        *(unsigned char *)(*a1 + v64) = (int)(float)(_S0 + v60);
        if ((int)((unint64_t)v15 >> 3) >= 1)
        {
          uint64_t v95 = a1[2];
          uint64_t v96 = ((unint64_t)v15 >> 3) + 1;
          unint64_t v97 = (unint64_t)v15 >> 3;
          while (1)
          {
            uint64_t v98 = (v96 - 2);
            unint64_t v99 = v59[v98] + 1;
            v59[v98] = v99;
            if (v99 < *(void *)(v95 + v98 * 8)) {
              break;
            }
            v59[(v96 - 2)] = 0;
            LODWORD(v97) = v97 - 1;
            if ((unint64_t)--v96 <= 1) {
              goto LABEL_75;
            }
          }
          if ((int)v97 > 0) {
            continue;
          }
        }
LABEL_75:
        operator delete(v59);
        return;
      }
      uint64_t v64 = 0;
      unint64_t v65 = 0;
LABEL_60:
      unint64_t v71 = v61 - v65;
      uint64_t v72 = v65;
      unint64_t v73 = (uint64_t *)(v63 + v72 * 8);
      uint64_t v74 = &v59[v72];
      do
      {
        uint64_t v76 = *v74++;
        uint64_t v75 = v76;
        uint64_t v77 = *v73++;
        v64 += v77 * v75;
        --v71;
      }
      while (v71);
      goto LABEL_62;
    }
    unint64_t v34 = *(void *)v6;
    if (*(void *)v6)
    {
      unint64_t v35 = 0;
      uint64_t v36 = a2[8];
      uint64_t v37 = a1[8];
      do
      {
        if (*((void *)v6 + 1))
        {
          unint64_t v40 = 0;
          uint64_t v41 = v36;
          uint64_t v42 = v37;
          do
          {
            _H0 = *(_WORD *)(*a2 + 2 * v41);
            __asm { FCVT            S0, H0 }
            LOBYTE(a4) = *(unsigned char *)(*a1 + v42);
            a4 = (float)LODWORD(a4);
            *(unsigned char *)(*a1 + v42) = (int)(float)(_S0 + a4);
            uint64_t v38 = (void *)a1[5];
            v42 += v38[1];
            unint64_t v39 = (void *)a2[5];
            v41 += v39[1];
            ++v40;
            size_t v6 = (char *)a1[2];
          }
          while (v40 < *((void *)v6 + 1));
          unint64_t v34 = *(void *)v6;
        }
        else
        {
          uint64_t v38 = (void *)a1[5];
          unint64_t v39 = (void *)a2[5];
        }
        v37 += *v38;
        v36 += *v39;
        ++v35;
      }
      while (v35 < v34);
    }
  }
}

void sub_1925626C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::operator+<half>(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  unint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      unint64_t v39 = 0;
      unint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        unint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        unint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      uint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        uint64_t v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      unint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        uint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        unint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      unint64_t v29 = 0;
      unint64_t v30 = 0;
      unint64_t v31 = 0;
      unint64_t v24 = (unsigned char *)a2[5];
      uint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        unint64_t v29 = v26;
        unint64_t v31 = v27;
        memcpy(v26, v24, v25);
        unint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<unsigned char>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<unsigned char>::copy(&v28);
    }
  }
  nitro::ndarray<unsigned char>::copy(a1);
}

void sub_192562A44(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_192562A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      unint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  unint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    unint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  unint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_192562AF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x192562AD0);
  }
  JUMPOUT(0x192562AA0);
}

void sub_192562B04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x192562AE0);
  }
  JUMPOUT(0x192562AA8);
}

void sub_192562B14()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x192562AB8);
  }
  JUMPOUT(0x192562AB0);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    unint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192562DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192562F38(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192562F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192562F44);
}

uint64_t *nitro::ndarray<int>::operator+=<half>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    unint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  unint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  unint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    std::locale v15 = (void *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<int>::operator+<half>(a1, a2);
    nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(a1, a2);
  }
  return a1;
}

void nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (unint64_t *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v13 = *a1;
  if (!*a1) {
    return;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v16 = ((v12 - 8) >> 3) + 1;
  std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v17 = v4 + 1;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  uint64_t v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v171 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v76 = 0;
    uint64_t v77 = a2[8];
    uint64_t v78 = a1[8];
    unint64_t v79 = v4[1];
    unint64_t v80 = (uint64_t *)a1[5];
    uint64_t v166 = (uint64_t *)a2[5];
    uint64_t v81 = v13 + 4 * v78 + 32;
    uint64_t v169 = *v166;
    uint64_t v170 = *v80;
    uint64_t v168 = 4 * *v80;
    uint64_t v82 = 2 * v77 + 16;
    uint64_t v167 = 2 * *v166;
    while (!v79)
    {
LABEL_50:
      v78 += v170;
      v77 += v169;
      ++v76;
      v81 += v168;
      v82 += v167;
      if (v76 == v171) {
        return;
      }
    }
    uint64_t v83 = 0;
    unint64_t v84 = v4[2];
    uint64_t v85 = *a2;
    uint64_t v86 = a2[5];
    uint64_t v87 = v80[1];
    unint64_t v88 = v84 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v89 = (float16x8_t *)(*a2 + v82);
    uint64_t v90 = v166[1];
    uint64_t v91 = (int32x4_t *)v81;
    uint64_t v92 = v77;
    uint64_t v93 = v78;
    while (1)
    {
      if (v84)
      {
        uint64_t v94 = v80[2];
        uint64_t v95 = *(void *)(v86 + 16);
        if (v84 >= 0x10 && (v94 == 1 ? (BOOL v96 = v95 == 1) : (BOOL v96 = 0), v96))
        {
          uint64_t v98 = v92 + v88 * v95;
          uint64_t v107 = v89;
          uint64_t v108 = v91;
          unint64_t v109 = v84 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v99 = v93 + v88 * v94;
          do
          {
            float16x8_t v110 = v107[-1];
            float32x4_t v111 = vcvtq_f32_f16(*(float16x4_t *)v110.i8);
            float32x4_t v112 = vaddq_f32(vcvt_hight_f32_f16(*v107), vcvtq_f32_s32(v108[1]));
            int32x4_t v113 = vcvtq_s32_f32(vaddq_f32(vcvt_hight_f32_f16(v110), vcvtq_f32_s32(v108[-1])));
            int32x4_t v114 = vcvtq_s32_f32(vaddq_f32(vcvtq_f32_f16(*(float16x4_t *)v107->i8), vcvtq_f32_s32(*v108)));
            v108[-2] = vcvtq_s32_f32(vaddq_f32(v111, vcvtq_f32_s32(v108[-2])));
            v108[-1] = v113;
            int32x4_t *v108 = v114;
            v108[1] = vcvtq_s32_f32(v112);
            v108 += 4;
            v107 += 2;
            v109 -= 16;
          }
          while (v109);
          unint64_t v97 = v84 & 0xFFFFFFFFFFFFFFF0;
          if (v84 == v88) {
            goto LABEL_53;
          }
        }
        else
        {
          unint64_t v97 = 0;
          uint64_t v98 = v92;
          uint64_t v99 = v93;
        }
        unint64_t v100 = v84 - v97;
        uint64_t v101 = (__int16 *)(v85 + 2 * v98);
        uint64_t v102 = 2 * v95;
        uint64_t v103 = 4 * v94;
        uint64_t v104 = (int *)(v13 + 4 * v99);
        do
        {
          _H0 = *v101;
          __asm { FCVT            S0, H0 }
          *uint64_t v104 = (int)(float)(_S0 + (float)*v104);
          uint64_t v101 = (__int16 *)((char *)v101 + v102);
          uint64_t v104 = (int *)((char *)v104 + v103);
          --v100;
        }
        while (v100);
      }
LABEL_53:
      v93 += v87;
      v92 += v90;
      ++v83;
      uint64_t v91 = (int32x4_t *)((char *)v91 + 4 * v87);
      unint64_t v89 = (float16x8_t *)((char *)v89 + 2 * v90);
      if (v83 == v79) {
        goto LABEL_50;
      }
    }
  }
  if (v22 == 2)
  {
    unint64_t v40 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v41 = 0;
    uint64_t v42 = a2[8];
    uint64_t v43 = a1[8];
    unint64_t v44 = v4[1];
    uint64_t v45 = *a2;
    unint64_t v46 = (uint64_t *)a2[5];
    uint64_t v47 = (uint64_t *)a1[5];
    uint64_t v48 = *v47;
    uint64_t v49 = *v46;
    unint64_t v50 = v44 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v51 = v13 + 4 * v43 + 32;
    uint64_t v52 = 4 * *v47;
    uint64_t v53 = *a2 + 2 * v42 + 16;
    uint64_t v54 = 2 * *v46;
    while (1)
    {
      if (v44)
      {
        uint64_t v55 = v47[1];
        uint64_t v56 = v46[1];
        if (v44 >= 0x10 && (v55 == 1 ? (_ZF = v56 == 1) : (_ZF = 0), _ZF))
        {
          uint64_t v59 = v42 + v50 * v56;
          unint64_t v68 = (float16x8_t *)v53;
          unint64_t v69 = (int32x4_t *)v51;
          unint64_t v70 = v44 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v60 = v43 + v50 * v55;
          do
          {
            float16x8_t v71 = v68[-1];
            float32x4_t v72 = vcvtq_f32_f16(*(float16x4_t *)v71.i8);
            float32x4_t v73 = vaddq_f32(vcvt_hight_f32_f16(*v68), vcvtq_f32_s32(v69[1]));
            int32x4_t v74 = vcvtq_s32_f32(vaddq_f32(vcvt_hight_f32_f16(v71), vcvtq_f32_s32(v69[-1])));
            int32x4_t v75 = vcvtq_s32_f32(vaddq_f32(vcvtq_f32_f16(*(float16x4_t *)v68->i8), vcvtq_f32_s32(*v69)));
            v69[-2] = vcvtq_s32_f32(vaddq_f32(v72, vcvtq_f32_s32(v69[-2])));
            v69[-1] = v74;
            *unint64_t v69 = v75;
            v69[1] = vcvtq_s32_f32(v73);
            v69 += 4;
            v68 += 2;
            v70 -= 16;
          }
          while (v70);
          unint64_t v58 = v44 & 0xFFFFFFFFFFFFFFF0;
          if (v44 == v50) {
            goto LABEL_33;
          }
        }
        else
        {
          unint64_t v58 = 0;
          uint64_t v59 = v42;
          uint64_t v60 = v43;
        }
        unint64_t v61 = v44 - v58;
        unint64_t v62 = (__int16 *)(v45 + 2 * v59);
        uint64_t v63 = 2 * v56;
        uint64_t v64 = 4 * v55;
        unint64_t v65 = (int *)(v13 + 4 * v60);
        do
        {
          _H0 = *v62;
          __asm { FCVT            S0, H0 }
          *unint64_t v65 = (int)(float)(_S0 + (float)*v65);
          unint64_t v62 = (__int16 *)((char *)v62 + v63);
          unint64_t v65 = (int *)((char *)v65 + v64);
          --v61;
        }
        while (v61);
      }
LABEL_33:
      v43 += v48;
      v42 += v49;
      ++v41;
      v51 += v52;
      v53 += v54;
      if (v41 == v40) {
        return;
      }
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    int32x4_t v115 = operator new(v12);
    bzero(v115, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v116 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v117 = 1;
    }
    else {
      unint64_t v117 = v12 >> 3;
    }
    uint64_t v118 = a2[5];
    uint64_t v119 = a2[8];
    uint64_t v120 = v117 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v121 = a1[5];
    while (v117 >= 2)
    {
      uint64_t v124 = 0;
      uint64_t v125 = 0;
      uint64_t v126 = v117 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v127 = (void *)(v121 + 8);
      uint64_t v128 = v115 + 1;
      do
      {
        v124 += *(v127 - 1) * *(v128 - 1);
        v125 += *v127 * *v128;
        v128 += 2;
        v127 += 2;
        v126 -= 2;
      }
      while (v126);
      uint64_t v122 = v125 + v124;
      uint64_t v123 = v117 & 0x1FFFFFFFFFFFFFFELL;
      if (v117 != v120) {
        goto LABEL_78;
      }
LABEL_80:
      if (v117 < 2)
      {
        uint64_t v136 = 0;
        uint64_t v137 = 0;
LABEL_85:
        unint64_t v143 = v117 - v137;
        uint64_t v144 = v137;
        uint64_t v145 = (uint64_t *)(v118 + 8 * v137);
        uint64_t v146 = &v115[v144];
        do
        {
          uint64_t v148 = *v146++;
          uint64_t v147 = v148;
          uint64_t v149 = *v145++;
          v136 += v149 * v147;
          --v143;
        }
        while (v143);
        goto LABEL_87;
      }
      uint64_t v138 = 0;
      uint64_t v139 = 0;
      uint64_t v140 = v117 & 0x1FFFFFFFFFFFFFFELL;
      unint64_t v141 = (void *)(v118 + 8);
      float32x4_t v142 = v115 + 1;
      do
      {
        v138 += *(v141 - 1) * *(v142 - 1);
        v139 += *v141 * *v142;
        v142 += 2;
        v141 += 2;
        v140 -= 2;
      }
      while (v140);
      uint64_t v136 = v139 + v138;
      uint64_t v137 = v117 & 0x1FFFFFFFFFFFFFFELL;
      if (v117 != v120) {
        goto LABEL_85;
      }
LABEL_87:
      _H0 = *(_WORD *)(v116 + 2 * (v119 + v136));
      __asm { FCVT            S0, H0 }
      *(_DWORD *)(v13 + 4 * v122) = (int)(float)(_S0 + (float)*(int *)(v13 + 4 * v122));
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v152 = (v12 >> 3) + 1;
        int v153 = v12 >> 3;
        while (1)
        {
          uint64_t v154 = (v152 - 2);
          unint64_t v155 = v115[v154] + 1;
          v115[v154] = v155;
          if (v155 < v4[v154]) {
            break;
          }
          v115[(v152 - 2)] = 0;
          --v153;
          if ((unint64_t)--v152 <= 1) {
            goto LABEL_93;
          }
        }
        if (v153 > 0) {
          continue;
        }
      }
LABEL_93:
      operator delete(v115);
      return;
    }
    uint64_t v122 = 0;
    uint64_t v123 = 0;
LABEL_78:
    unint64_t v129 = v117 - v123;
    uint64_t v130 = v123;
    uint64_t v131 = (uint64_t *)(v121 + 8 * v123);
    uint64_t v132 = &v115[v130];
    do
    {
      uint64_t v134 = *v132++;
      uint64_t v133 = v134;
      uint64_t v135 = *v131++;
      v122 += v135 * v133;
      --v129;
    }
    while (v129);
    goto LABEL_80;
  }
  unint64_t v23 = *v4;
  if (!*v4) {
    return;
  }
  uint64_t v24 = a2[8];
  uint64_t v25 = a1[8];
  uint64_t v26 = *a2;
  uint64_t v27 = *(void *)a1[5];
  uint64_t v28 = *(void *)a2[5];
  if (v23 < 0x10)
  {
    unint64_t v29 = 0;
LABEL_28:
    unint64_t v30 = v23 - v29;
    unint64_t v31 = (__int16 *)(v26 + 2 * v24);
    uint64_t v32 = 2 * v28;
    uint64_t v33 = 4 * v27;
    unint64_t v34 = (int *)(v13 + 4 * v25);
    do
    {
      _H0 = *v31;
      __asm { FCVT            S0, H0 }
      *unint64_t v34 = (int)(float)(_S0 + (float)*v34);
      unint64_t v31 = (__int16 *)((char *)v31 + v32);
      unint64_t v34 = (int *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  unint64_t v29 = 0;
  if (v27 != 1) {
    goto LABEL_28;
  }
  if (v28 != 1) {
    goto LABEL_28;
  }
  unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  uint64_t v156 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v157 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v158 = (float16x8_t *)(v26 + 2 * v24 + 16);
  uint64_t v159 = (int32x4_t *)(v13 + 4 * v25 + 32);
  unint64_t v160 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    float16x8_t v161 = v158[-1];
    float32x4_t v162 = vcvtq_f32_f16(*(float16x4_t *)v161.i8);
    float32x4_t v163 = vaddq_f32(vcvt_hight_f32_f16(*v158), vcvtq_f32_s32(v159[1]));
    int32x4_t v164 = vcvtq_s32_f32(vaddq_f32(vcvt_hight_f32_f16(v161), vcvtq_f32_s32(v159[-1])));
    int32x4_t v165 = vcvtq_s32_f32(vaddq_f32(vcvtq_f32_f16(*(float16x4_t *)v158->i8), vcvtq_f32_s32(*v159)));
    v159[-2] = vcvtq_s32_f32(vaddq_f32(v162, vcvtq_f32_s32(v159[-2])));
    v159[-1] = v164;
    int32x4_t *v159 = v165;
    v159[1] = vcvtq_s32_f32(v163);
    v159 += 4;
    v158 += 2;
    v160 -= 16;
  }
  while (v160);
  uint64_t v24 = v156;
  uint64_t v25 = v157;
  if (v23 != v29) {
    goto LABEL_28;
  }
}

void sub_1925638A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::operator+<half>(void *a1, void *a2)
{
  unint64_t v5 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      unint64_t v39 = 0;
      unint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        unint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        unint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      unint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        uint64_t v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      unint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        uint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        unint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      unint64_t v29 = 0;
      unint64_t v30 = 0;
      unint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      unint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        unint64_t v29 = v26;
        unint64_t v31 = v27;
        memcpy(v26, v24, v25);
        unint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<int>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<int>::copy(&v28);
    }
  }
  nitro::ndarray<int>::copy(a1);
}

void sub_192563C28(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_192563C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      unint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  unint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    unint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  unint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_192563CD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x192563CB4);
  }
  JUMPOUT(0x192563C84);
}

void sub_192563CE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x192563CC4);
  }
  JUMPOUT(0x192563C8CLL);
}

void sub_192563CF8()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x192563C9CLL);
  }
  JUMPOUT(0x192563C94);
}

void nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192563F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19256411C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192564130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192564128);
}

uint64_t *nitro::ndarray<half>::operator+=<half>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    unint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  unint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  unint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    std::locale v15 = (void *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<half>::operator+<half>(a1, a2);
    nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(a1, a2);
  }
  return a1;
}

float16x8_t nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (unint64_t *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return result;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return result;
  }
  uint64_t v160 = *a1;
  if (!*a1) {
    return result;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v13 = 1;
    unint64_t v14 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v20 = *v14++;
      v13 *= v20;
    }
    while (v14 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v15 = ((v12 - 8) >> 3) + 1;
  unint64_t v14 = &v4[v15 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v16 = v4 + 1;
  uint64_t v17 = 1;
  uint64_t v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v19 = 1;
  do
  {
    v17 *= *(v16 - 1);
    v19 *= *v16;
    v16 += 2;
    v18 -= 2;
  }
  while (v18);
  uint64_t v13 = v19 * v17;
  if (v15 != (v15 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v13) {
    return result;
  }
  uint64_t v21 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v155 = *v4;
    if (!*v4) {
      return result;
    }
    uint64_t v71 = 0;
    uint64_t v72 = a2[8];
    uint64_t v73 = a1[8];
    unint64_t v74 = v4[1];
    int32x4_t v75 = (uint64_t *)a1[5];
    uint64_t v152 = (uint64_t *)a2[5];
    uint64_t v153 = *v152;
    uint64_t v154 = *v75;
    uint64_t v157 = 2 * *v75;
    uint64_t v156 = 2 * *v152;
    uint64_t v150 = 2 * v72;
    uint64_t v151 = 2 * v73;
    uint64_t v76 = 2 * v73 + v160 + 16;
    uint64_t v77 = 2 * v72 + 16;
    while (!v74)
    {
LABEL_55:
      v73 += v154;
      v72 += v153;
      ++v71;
      v76 += v157;
      v77 += v156;
      if (v71 == v155) {
        return result;
      }
    }
    uint64_t v78 = 0;
    uint64_t v79 = v150 + v156 * v71;
    unint64_t v80 = v4[2];
    uint64_t v81 = *a2;
    uint64_t v82 = v75[1];
    uint64_t v83 = v152[1];
    uint64_t v84 = 2 * v82;
    uint64_t v159 = v151 + v157 * v71;
    uint64_t v85 = 2 * v83;
    unint64_t v86 = v80 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v87 = a2[5];
    unint64_t v88 = (float16x8_t *)(*a2 + v77);
    unint64_t v89 = (float16x8_t *)v76;
    uint64_t v90 = v72;
    uint64_t v91 = v73;
    while (!v80)
    {
LABEL_58:
      v91 += v82;
      v90 += v83;
      ++v78;
      unint64_t v89 = (float16x8_t *)((char *)v89 + v84);
      unint64_t v88 = (float16x8_t *)((char *)v88 + v85);
      if (v78 == v74) {
        goto LABEL_55;
      }
    }
    uint64_t v92 = v75[2];
    uint64_t v93 = *(void *)(v87 + 16);
    if (v80 >= 0x10)
    {
      unint64_t v94 = 0;
      if (v92 != 1) {
        goto LABEL_62;
      }
      uint64_t v95 = v90;
      uint64_t v96 = v91;
      if (v93 != 1)
      {
LABEL_63:
        unint64_t v97 = v80 - v94;
        uint64_t v98 = (short float *)(v81 + 2 * v95);
        uint64_t v99 = 2 * v93;
        uint64_t v100 = 2 * v92;
        uint64_t v101 = (short float *)(v160 + 2 * v96);
        do
        {
          *(short float *)result.i16 = *v98 + *v101;
          short float *v101 = *(short float *)result.i16;
          uint64_t v98 = (short float *)((char *)v98 + v99);
          uint64_t v101 = (short float *)((char *)v101 + v100);
          --v97;
        }
        while (v97);
        goto LABEL_58;
      }
      if (v160 + v159 + v84 * v78 >= v81 + v79 + 2 * v80 + v85 * v78
        || v81 + v79 + v85 * v78 >= v160 + v159 + 2 * v80 + v84 * v78)
      {
        uint64_t v95 = v90 + v86;
        uint64_t v103 = v88;
        uint64_t v104 = v89;
        unint64_t v105 = v80 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v96 = v91 + v86;
        do
        {
          float16x8_t result = vaddq_f16(v103[-1], v104[-1]);
          float16x8_t v106 = vaddq_f16(*v103, *v104);
          v104[-1] = result;
          *uint64_t v104 = v106;
          v104 += 2;
          v103 += 2;
          v105 -= 16;
        }
        while (v105);
        unint64_t v94 = v80 & 0xFFFFFFFFFFFFFFF0;
        if (v80 == v86) {
          goto LABEL_58;
        }
        goto LABEL_63;
      }
    }
    unint64_t v94 = 0;
LABEL_62:
    uint64_t v95 = v90;
    uint64_t v96 = v91;
    goto LABEL_63;
  }
  if (v21 == 2)
  {
    unint64_t v37 = *v4;
    if (!*v4) {
      return result;
    }
    uint64_t v38 = 0;
    uint64_t v39 = a2[8];
    uint64_t v40 = a1[8];
    unint64_t v41 = v4[1];
    uint64_t v42 = (uint64_t *)a2[5];
    uint64_t v43 = (uint64_t *)a1[5];
    uint64_t v44 = *v43;
    uint64_t v45 = *v42;
    uint64_t v46 = 2 * *v43;
    uint64_t v47 = 2 * *v42;
    unint64_t v48 = v41 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v49 = *a2;
    uint64_t v50 = 2 * v40 + v160 + 16;
    uint64_t v51 = 2 * v39 + *a2 + 16;
    uint64_t v52 = v160 + 2 * v40;
    uint64_t v53 = v160 + 2 * v40 + 2 * v41;
    uint64_t v54 = *a2 + 2 * v39;
    uint64_t v55 = *a2 + 2 * v39 + 2 * v41;
    while (!v41)
    {
LABEL_34:
      v40 += v44;
      v39 += v45;
      ++v38;
      v50 += v46;
      v51 += v47;
      if (v38 == v37) {
        return result;
      }
    }
    uint64_t v56 = v43[1];
    uint64_t v57 = v42[1];
    if (v41 >= 0x10)
    {
      unint64_t v58 = 0;
      if (v56 != 1) {
        goto LABEL_38;
      }
      uint64_t v59 = v39;
      uint64_t v60 = v40;
      if (v57 != 1)
      {
LABEL_39:
        unint64_t v61 = v41 - v58;
        unint64_t v62 = (short float *)(v49 + 2 * v59);
        uint64_t v63 = 2 * v57;
        uint64_t v64 = 2 * v56;
        unint64_t v65 = (short float *)(v160 + 2 * v60);
        do
        {
          *(short float *)result.i16 = *v62 + *v65;
          *unint64_t v65 = *(short float *)result.i16;
          unint64_t v62 = (short float *)((char *)v62 + v63);
          unint64_t v65 = (short float *)((char *)v65 + v64);
          --v61;
        }
        while (v61);
        goto LABEL_34;
      }
      if (v52 + v46 * v38 >= (unint64_t)(v55 + v47 * v38)
        || v54 + v47 * v38 >= (unint64_t)(v53 + v46 * v38))
      {
        uint64_t v59 = v39 + v48;
        uint64_t v67 = (float16x8_t *)v51;
        unint64_t v68 = (float16x8_t *)v50;
        unint64_t v69 = v41 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v60 = v40 + v48;
        do
        {
          float16x8_t result = vaddq_f16(v67[-1], v68[-1]);
          float16x8_t v70 = vaddq_f16(*v67, *v68);
          v68[-1] = result;
          *unint64_t v68 = v70;
          v68 += 2;
          v67 += 2;
          v69 -= 16;
        }
        while (v69);
        unint64_t v58 = v41 & 0xFFFFFFFFFFFFFFF0;
        if (v41 == v48) {
          goto LABEL_34;
        }
        goto LABEL_39;
      }
    }
    unint64_t v58 = 0;
LABEL_38:
    uint64_t v59 = v39;
    uint64_t v60 = v40;
    goto LABEL_39;
  }
  if (v21 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v107 = operator new(v12);
    bzero(v107, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v108 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v109 = 1;
    }
    else {
      unint64_t v109 = v12 >> 3;
    }
    uint64_t v110 = a2[5];
    uint64_t v111 = a2[8];
    uint64_t v112 = v109 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v113 = a1[5];
    while (v109 >= 2)
    {
      uint64_t v116 = 0;
      uint64_t v117 = 0;
      uint64_t v118 = v109 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v119 = (void *)(v113 + 8);
      uint64_t v120 = v107 + 1;
      do
      {
        v116 += *(v119 - 1) * *(v120 - 1);
        v117 += *v119 * *v120;
        v120 += 2;
        v119 += 2;
        v118 -= 2;
      }
      while (v118);
      uint64_t v114 = v117 + v116;
      uint64_t v115 = v109 & 0x1FFFFFFFFFFFFFFELL;
      if (v109 != v112) {
        goto LABEL_87;
      }
LABEL_89:
      if (v109 < 2)
      {
        uint64_t v128 = 0;
        uint64_t v129 = 0;
LABEL_94:
        unint64_t v135 = v109 - v129;
        uint64_t v136 = v129;
        uint64_t v137 = (uint64_t *)(v110 + 8 * v129);
        uint64_t v138 = &v107[v136];
        do
        {
          uint64_t v140 = *v138++;
          uint64_t v139 = v140;
          uint64_t v141 = *v137++;
          v128 += v141 * v139;
          --v135;
        }
        while (v135);
        goto LABEL_96;
      }
      uint64_t v130 = 0;
      uint64_t v131 = 0;
      uint64_t v132 = v109 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v133 = (void *)(v110 + 8);
      uint64_t v134 = v107 + 1;
      do
      {
        v130 += *(v133 - 1) * *(v134 - 1);
        v131 += *v133 * *v134;
        v134 += 2;
        v133 += 2;
        v132 -= 2;
      }
      while (v132);
      uint64_t v128 = v131 + v130;
      uint64_t v129 = v109 & 0x1FFFFFFFFFFFFFFELL;
      if (v109 != v112) {
        goto LABEL_94;
      }
LABEL_96:
      *(short float *)(v160 + 2 * v114) = *(short float *)(v108 + 2 * (v111 + v128)) + *(short float *)(v160 + 2 * v114);
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v142 = (v12 >> 3) + 1;
        int v143 = v12 >> 3;
        while (1)
        {
          uint64_t v144 = (v142 - 2);
          unint64_t v145 = v107[v144] + 1;
          v107[v144] = v145;
          if (v145 < v4[v144]) {
            break;
          }
          v107[(v142 - 2)] = 0;
          --v143;
          if ((unint64_t)--v142 <= 1) {
            goto LABEL_102;
          }
        }
        if (v143 > 0) {
          continue;
        }
      }
LABEL_102:
      operator delete(v107);
      return result;
    }
    uint64_t v114 = 0;
    uint64_t v115 = 0;
LABEL_87:
    unint64_t v121 = v109 - v115;
    uint64_t v122 = v115;
    uint64_t v123 = (uint64_t *)(v113 + 8 * v115);
    uint64_t v124 = &v107[v122];
    do
    {
      uint64_t v126 = *v124++;
      uint64_t v125 = v126;
      uint64_t v127 = *v123++;
      v114 += v127 * v125;
      --v121;
    }
    while (v121);
    goto LABEL_89;
  }
  unint64_t v22 = *v4;
  if (!*v4) {
    return result;
  }
  uint64_t v23 = a2[8];
  uint64_t v24 = a1[8];
  uint64_t v25 = *a2;
  uint64_t v26 = *(void *)a1[5];
  uint64_t v27 = *(void *)a2[5];
  if (v22 < 0x10) {
    goto LABEL_27;
  }
  unint64_t v28 = 0;
  if (v26 != 1 || v27 != 1) {
    goto LABEL_28;
  }
  if (v160 + 2 * v24 < v25 + 2 * v22 + 2 * v23 && v25 + 2 * v23 < v160 + 2 * v22 + 2 * v24)
  {
LABEL_27:
    unint64_t v28 = 0;
LABEL_28:
    uint64_t v29 = a2[8];
    uint64_t v30 = a1[8];
LABEL_29:
    unint64_t v31 = v22 - v28;
    uint64_t v32 = (short float *)(v25 + 2 * v29);
    uint64_t v33 = 2 * v27;
    uint64_t v34 = 2 * v26;
    unint64_t v35 = (short float *)(v160 + 2 * v30);
    do
    {
      *(short float *)result.i16 = *v32 + *v35;
      *unint64_t v35 = *(short float *)result.i16;
      uint64_t v32 = (short float *)((char *)v32 + v33);
      unint64_t v35 = (short float *)((char *)v35 + v34);
      --v31;
    }
    while (v31);
    return result;
  }
  unint64_t v28 = v22 & 0xFFFFFFFFFFFFFFF0;
  uint64_t v29 = v23 + (v22 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = v24 + (v22 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = (float16x8_t *)(v25 + 2 * v23 + 16);
  uint64_t v147 = (float16x8_t *)(v160 + 2 * v24 + 16);
  unint64_t v148 = v22 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    float16x8_t result = vaddq_f16(v146[-1], v147[-1]);
    float16x8_t v149 = vaddq_f16(*v146, *v147);
    v147[-1] = result;
    *uint64_t v147 = v149;
    v146 += 2;
    v147 += 2;
    v148 -= 16;
  }
  while (v148);
  if (v22 != v28) {
    goto LABEL_29;
  }
  return result;
}

void sub_192564AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::operator+<half>(void *a1, void *a2)
{
  unint64_t v5 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        uint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        uint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      unint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      uint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        unint64_t v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        unint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        uint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      unint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      uint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        uint64_t v29 = v26;
        unint64_t v31 = v27;
        memcpy(v26, v24, v25);
        uint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<half>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<half>::copy(&v28);
    }
  }
  nitro::ndarray<half>::copy(a1);
}

void sub_192564E54(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_192564E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      uint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  uint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    uint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  uint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_192564F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x192564EE0);
  }
  JUMPOUT(0x192564EB0);
}

void sub_192564F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x192564EF0);
  }
  JUMPOUT(0x192564EB8);
}

void sub_192564F24()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x192564EC8);
  }
  JUMPOUT(0x192564EC0);
}

void nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925651C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192565348(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19256535C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192565354);
}

uint64_t *nitro::ndarray<float>::operator+=<half>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    unint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  unint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  unint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    std::locale v15 = (void *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<float>::operator+<half>(a1, a2);
    nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(a1, a2);
  }
  return a1;
}

void nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (unint64_t *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v13 = *a1;
  if (!*a1) {
    return;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v16 = ((v12 - 8) >> 3) + 1;
  std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v17 = v4 + 1;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  uint64_t v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v168 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v75 = 0;
    uint64_t v76 = a2[8];
    uint64_t v77 = a1[8];
    unint64_t v78 = v4[1];
    uint64_t v79 = (uint64_t *)a1[5];
    float32x4_t v163 = (uint64_t *)a2[5];
    uint64_t v80 = v13 + 4 * v77 + 32;
    uint64_t v166 = *v163;
    uint64_t v167 = *v79;
    uint64_t v165 = 4 * *v79;
    uint64_t v81 = 2 * v76 + 16;
    uint64_t v164 = 2 * *v163;
    while (!v78)
    {
LABEL_50:
      v77 += v167;
      v76 += v166;
      ++v75;
      v80 += v165;
      v81 += v164;
      if (v75 == v168) {
        return;
      }
    }
    uint64_t v82 = 0;
    unint64_t v83 = v4[2];
    uint64_t v84 = *a2;
    uint64_t v85 = a2[5];
    uint64_t v86 = v79[1];
    unint64_t v87 = v83 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v88 = (float16x4_t *)(*a2 + v81);
    uint64_t v89 = v163[1];
    uint64_t v90 = (float32x4_t *)v80;
    uint64_t v91 = v76;
    uint64_t v92 = v77;
    while (1)
    {
      if (v83)
      {
        uint64_t v93 = v79[2];
        uint64_t v94 = *(void *)(v85 + 16);
        if (v83 >= 0x10 && (v93 == 1 ? (BOOL v95 = v94 == 1) : (BOOL v95 = 0), v95))
        {
          uint64_t v97 = v91 + v87 * v94;
          float16x8_t v106 = v88;
          uint64_t v107 = v90;
          unint64_t v108 = v83 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v98 = v92 + v87 * v93;
          do
          {
            float16x8_t v109 = *(float16x8_t *)v106[-2].i8;
            float32x4_t v110 = vaddq_f32(v107[-1], vcvt_hight_f32_f16(v109));
            float32x4_t v111 = vaddq_f32(*v107, vcvtq_f32_f16(*v106));
            float32x4_t v112 = vaddq_f32(v107[1], vcvt_hight_f32_f16(*(float16x8_t *)v106->i8));
            v107[-2] = vaddq_f32(v107[-2], vcvtq_f32_f16(*(float16x4_t *)v109.i8));
            v107[-1] = v110;
            float32x4_t *v107 = v111;
            v107[1] = v112;
            v107 += 4;
            v106 += 4;
            v108 -= 16;
          }
          while (v108);
          unint64_t v96 = v83 & 0xFFFFFFFFFFFFFFF0;
          if (v83 == v87) {
            goto LABEL_53;
          }
        }
        else
        {
          unint64_t v96 = 0;
          uint64_t v97 = v91;
          uint64_t v98 = v92;
        }
        unint64_t v99 = v83 - v96;
        uint64_t v100 = (__int16 *)(v84 + 2 * v97);
        uint64_t v101 = 2 * v94;
        uint64_t v102 = 4 * v93;
        uint64_t v103 = (float *)(v13 + 4 * v98);
        do
        {
          _H0 = *v100;
          __asm { FCVT            S0, H0 }
          float *v103 = *v103 + _S0;
          uint64_t v100 = (__int16 *)((char *)v100 + v101);
          uint64_t v103 = (float *)((char *)v103 + v102);
          --v99;
        }
        while (v99);
      }
LABEL_53:
      v92 += v86;
      v91 += v89;
      ++v82;
      uint64_t v90 = (float32x4_t *)((char *)v90 + 4 * v86);
      unint64_t v88 = (float16x4_t *)((char *)v88 + 2 * v89);
      if (v82 == v78) {
        goto LABEL_50;
      }
    }
  }
  if (v22 == 2)
  {
    unint64_t v40 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v41 = 0;
    uint64_t v42 = a2[8];
    uint64_t v43 = a1[8];
    unint64_t v44 = v4[1];
    uint64_t v45 = *a2;
    uint64_t v46 = (uint64_t *)a2[5];
    uint64_t v47 = (uint64_t *)a1[5];
    uint64_t v48 = *v47;
    uint64_t v49 = *v46;
    unint64_t v50 = v44 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v51 = v13 + 4 * v43 + 32;
    uint64_t v52 = 4 * *v47;
    uint64_t v53 = *a2 + 2 * v42 + 16;
    uint64_t v54 = 2 * *v46;
    while (1)
    {
      if (v44)
      {
        uint64_t v55 = v47[1];
        uint64_t v56 = v46[1];
        if (v44 >= 0x10 && (v55 == 1 ? (_ZF = v56 == 1) : (_ZF = 0), _ZF))
        {
          uint64_t v59 = v42 + v50 * v56;
          unint64_t v68 = (float16x4_t *)v53;
          unint64_t v69 = (float32x4_t *)v51;
          unint64_t v70 = v44 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v60 = v43 + v50 * v55;
          do
          {
            float16x8_t v71 = *(float16x8_t *)v68[-2].i8;
            float32x4_t v72 = vaddq_f32(v69[-1], vcvt_hight_f32_f16(v71));
            float32x4_t v73 = vaddq_f32(*v69, vcvtq_f32_f16(*v68));
            float32x4_t v74 = vaddq_f32(v69[1], vcvt_hight_f32_f16(*(float16x8_t *)v68->i8));
            v69[-2] = vaddq_f32(v69[-2], vcvtq_f32_f16(*(float16x4_t *)v71.i8));
            v69[-1] = v72;
            *unint64_t v69 = v73;
            v69[1] = v74;
            v69 += 4;
            v68 += 4;
            v70 -= 16;
          }
          while (v70);
          unint64_t v58 = v44 & 0xFFFFFFFFFFFFFFF0;
          if (v44 == v50) {
            goto LABEL_33;
          }
        }
        else
        {
          unint64_t v58 = 0;
          uint64_t v59 = v42;
          uint64_t v60 = v43;
        }
        unint64_t v61 = v44 - v58;
        unint64_t v62 = (__int16 *)(v45 + 2 * v59);
        uint64_t v63 = 2 * v56;
        uint64_t v64 = 4 * v55;
        unint64_t v65 = (float *)(v13 + 4 * v60);
        do
        {
          _H0 = *v62;
          __asm { FCVT            S0, H0 }
          *unint64_t v65 = *v65 + _S0;
          unint64_t v62 = (__int16 *)((char *)v62 + v63);
          unint64_t v65 = (float *)((char *)v65 + v64);
          --v61;
        }
        while (v61);
      }
LABEL_33:
      v43 += v48;
      v42 += v49;
      ++v41;
      v51 += v52;
      v53 += v54;
      if (v41 == v40) {
        return;
      }
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v113 = operator new(v12);
    bzero(v113, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v114 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v115 = 1;
    }
    else {
      unint64_t v115 = v12 >> 3;
    }
    uint64_t v116 = a2[5];
    uint64_t v117 = a2[8];
    uint64_t v118 = v115 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v119 = a1[5];
    while (v115 >= 2)
    {
      uint64_t v122 = 0;
      uint64_t v123 = 0;
      uint64_t v124 = v115 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v125 = (void *)(v119 + 8);
      uint64_t v126 = v113 + 1;
      do
      {
        v122 += *(v125 - 1) * *(v126 - 1);
        v123 += *v125 * *v126;
        v126 += 2;
        v125 += 2;
        v124 -= 2;
      }
      while (v124);
      uint64_t v120 = v123 + v122;
      uint64_t v121 = v115 & 0x1FFFFFFFFFFFFFFELL;
      if (v115 != v118) {
        goto LABEL_78;
      }
LABEL_80:
      if (v115 < 2)
      {
        uint64_t v134 = 0;
        uint64_t v135 = 0;
LABEL_85:
        unint64_t v141 = v115 - v135;
        uint64_t v142 = v135;
        int v143 = (uint64_t *)(v116 + 8 * v135);
        uint64_t v144 = &v113[v142];
        do
        {
          uint64_t v146 = *v144++;
          uint64_t v145 = v146;
          uint64_t v147 = *v143++;
          v134 += v147 * v145;
          --v141;
        }
        while (v141);
        goto LABEL_87;
      }
      uint64_t v136 = 0;
      uint64_t v137 = 0;
      uint64_t v138 = v115 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v139 = (void *)(v116 + 8);
      uint64_t v140 = v113 + 1;
      do
      {
        v136 += *(v139 - 1) * *(v140 - 1);
        v137 += *v139 * *v140;
        v140 += 2;
        v139 += 2;
        v138 -= 2;
      }
      while (v138);
      uint64_t v134 = v137 + v136;
      uint64_t v135 = v115 & 0x1FFFFFFFFFFFFFFELL;
      if (v115 != v118) {
        goto LABEL_85;
      }
LABEL_87:
      _H0 = *(_WORD *)(v114 + 2 * (v117 + v134));
      __asm { FCVT            S0, H0 }
      *(float *)(v13 + 4 * v120) = *(float *)(v13 + 4 * v120) + _S0;
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v150 = (v12 >> 3) + 1;
        int v151 = v12 >> 3;
        while (1)
        {
          uint64_t v152 = (v150 - 2);
          unint64_t v153 = v113[v152] + 1;
          v113[v152] = v153;
          if (v153 < v4[v152]) {
            break;
          }
          v113[(v150 - 2)] = 0;
          --v151;
          if ((unint64_t)--v150 <= 1) {
            goto LABEL_93;
          }
        }
        if (v151 > 0) {
          continue;
        }
      }
LABEL_93:
      operator delete(v113);
      return;
    }
    uint64_t v120 = 0;
    uint64_t v121 = 0;
LABEL_78:
    unint64_t v127 = v115 - v121;
    uint64_t v128 = v121;
    uint64_t v129 = (uint64_t *)(v119 + 8 * v121);
    uint64_t v130 = &v113[v128];
    do
    {
      uint64_t v132 = *v130++;
      uint64_t v131 = v132;
      uint64_t v133 = *v129++;
      v120 += v133 * v131;
      --v127;
    }
    while (v127);
    goto LABEL_80;
  }
  unint64_t v23 = *v4;
  if (!*v4) {
    return;
  }
  uint64_t v24 = a2[8];
  uint64_t v25 = a1[8];
  uint64_t v26 = *a2;
  uint64_t v27 = *(void *)a1[5];
  uint64_t v28 = *(void *)a2[5];
  if (v23 < 0x10)
  {
    unint64_t v29 = 0;
LABEL_28:
    unint64_t v30 = v23 - v29;
    unint64_t v31 = (__int16 *)(v26 + 2 * v24);
    uint64_t v32 = 2 * v28;
    uint64_t v33 = 4 * v27;
    uint64_t v34 = (float *)(v13 + 4 * v25);
    do
    {
      _H0 = *v31;
      __asm { FCVT            S0, H0 }
      *uint64_t v34 = *v34 + _S0;
      unint64_t v31 = (__int16 *)((char *)v31 + v32);
      uint64_t v34 = (float *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  unint64_t v29 = 0;
  if (v27 != 1) {
    goto LABEL_28;
  }
  if (v28 != 1) {
    goto LABEL_28;
  }
  unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  uint64_t v154 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v155 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v156 = (float16x4_t *)(v26 + 2 * v24 + 16);
  uint64_t v157 = (float32x4_t *)(v13 + 4 * v25 + 32);
  unint64_t v158 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    float16x8_t v159 = *(float16x8_t *)v156[-2].i8;
    float32x4_t v160 = vaddq_f32(v157[-1], vcvt_hight_f32_f16(v159));
    float32x4_t v161 = vaddq_f32(*v157, vcvtq_f32_f16(*v156));
    float32x4_t v162 = vaddq_f32(v157[1], vcvt_hight_f32_f16(*(float16x8_t *)v156->i8));
    v157[-2] = vaddq_f32(v157[-2], vcvtq_f32_f16(*(float16x4_t *)v159.i8));
    v157[-1] = v160;
    *uint64_t v157 = v161;
    v157[1] = v162;
    v157 += 4;
    v156 += 4;
    v158 -= 16;
  }
  while (v158);
  uint64_t v24 = v154;
  uint64_t v25 = v155;
  if (v23 != v29) {
    goto LABEL_28;
  }
}

void sub_192565C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::operator+<half>(void *a1, void *a2)
{
  unint64_t v5 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      unint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        unint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        uint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      unint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      unint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        unint64_t v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        uint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        uint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      unint64_t v29 = 0;
      unint64_t v30 = 0;
      unint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      unint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        unint64_t v29 = v26;
        unint64_t v31 = v27;
        memcpy(v26, v24, v25);
        unint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<float>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<float>::copy(&v28);
    }
  }
  nitro::ndarray<float>::copy(a1);
}

void sub_192565FB8(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_192565FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      unint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  unint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    unint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  unint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_192566068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x192566044);
  }
  JUMPOUT(0x192566014);
}

void sub_192566078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x192566054);
  }
  JUMPOUT(0x19256601CLL);
}

void sub_192566088()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x19256602CLL);
  }
  JUMPOUT(0x192566024);
}

void nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192566324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925664AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925664C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925664B8);
}

void *nitro::ndarray<half>::ndarray(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  size_t v6 = (unsigned char *)a2[2];
  uint64_t v5 = (unsigned char *)a2[3];
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    a1[2] = v8;
    a1[3] = v8;
    unint64_t v9 = &v8[8 * (v7 >> 3)];
    a1[4] = v9;
    memcpy(v8, v6, v7);
    a1[3] = v9;
  }
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  uint64_t v11 = (unsigned char *)a2[5];
  unsigned __int8 v10 = (unsigned char *)a2[6];
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unsigned __int8 v13 = (char *)operator new(v10 - v11);
    a1[5] = v13;
    a1[6] = v13;
    uint64_t v14 = &v13[8 * (v12 >> 3)];
    a1[7] = v14;
    memcpy(v13, v11, v12);
    a1[6] = v14;
  }
  a1[8] = a2[8];
  return a1;
}

void sub_1925665D4(_Unwind_Exception *a1)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v5;
    operator delete(v5);
  }
  size_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v6;
    operator delete(v6);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator+=(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    int64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    int64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unsigned __int8 v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::locale v15 = v23;
      }
      else {
        std::locale v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  int64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192566860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void *nitro::ndarray<unsigned char>::operator+=<float>(void *a1, void *a2, double a3, float a4)
{
  uint64_t v5 = (char *)a1[2];
  size_t v6 = (char *)a1[3];
  uint64_t v7 = v6 - v5;
  if (v6 == v5 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v7 - 8) < 8)
  {
    uint64_t v8 = 1;
    unint64_t v9 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v15 = *(void *)v9;
      v9 += 8;
      v8 *= v15;
    }
    while (v9 != v6);
    goto LABEL_9;
  }
  unint64_t v10 = ((unint64_t)(v7 - 8) >> 3) + 1;
  unint64_t v9 = &v5[8 * (v10 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v11 = v5 + 8;
  uint64_t v12 = 1;
  uint64_t v13 = v10 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v14 = 1;
  do
  {
    v12 *= *(v11 - 1);
    v14 *= *v11;
    v11 += 2;
    v13 -= 2;
  }
  while (v13);
  uint64_t v8 = v14 * v12;
  if (v10 != (v10 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v8)
  {
    unint64_t v16 = v7 >> 3;
    uint64_t v17 = (void *)a2[2];
    if (v16 != (uint64_t)(a2[3] - (void)v17) >> 3) {
      goto LABEL_19;
    }
    uint64_t v18 = v16 <= 1 ? 1 : v16;
    if (*(void *)v5 != *v17) {
      goto LABEL_19;
    }
    uint64_t v19 = 1;
    do
    {
      unint64_t v20 = v19;
      if (v18 == v19) {
        break;
      }
      uint64_t v21 = *(void *)&v5[8 * v19];
      uint64_t v22 = v17[v19++];
    }
    while (v21 == v22);
    if (v20 < v16) {
LABEL_19:
    }
      nitro::ndarray<unsigned char>::operator+<float>(a1, a2);
    nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(a1, a2, a3, a4);
  }
  return a1;
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(void *a1, void *a2, double a3, float a4)
{
  size_t v6 = (char *)a1[2];
  uint64_t v7 = (char *)a1[3];
  unint64_t v8 = (v7 - v6) >> 3;
  unint64_t v9 = (void *)a2[2];
  if (v8 != (uint64_t)(a2[3] - (void)v9) >> 3) {
    goto LABEL_13;
  }
  if (v7 == v6) {
    return;
  }
  uint64_t v10 = v8 <= 1 ? 1 : (v7 - v6) >> 3;
  if (*(void *)v6 != *v9) {
    goto LABEL_13;
  }
  uint64_t v11 = 1;
  do
  {
    unint64_t v12 = v11;
    if (v10 == v11) {
      break;
    }
    uint64_t v13 = *(void *)&v6[8 * v11];
    uint64_t v14 = v9[v11++];
  }
  while (v13 == v14);
  if (v12 < v8) {
LABEL_13:
  }
    nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1})::{lambda(void)#1}::operator()();
  int64_t v15 = v7 - v6;
  if (v7 == v6 || !*a1) {
    return;
  }
  if ((unint64_t)(v15 - 8) < 8)
  {
    uint64_t v16 = 1;
    uint64_t v17 = (char *)a1[2];
    do
    {
LABEL_20:
      uint64_t v23 = *(void *)v17;
      v17 += 8;
      v16 *= v23;
    }
    while (v17 != v7);
    goto LABEL_21;
  }
  unint64_t v18 = ((unint64_t)(v15 - 8) >> 3) + 1;
  uint64_t v17 = &v6[8 * (v18 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v19 = v6 + 8;
  uint64_t v20 = 1;
  uint64_t v21 = v18 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v22 = 1;
  do
  {
    v20 *= *(v19 - 1);
    v22 *= *v19;
    v19 += 2;
    v21 -= 2;
  }
  while (v21);
  uint64_t v16 = v22 * v20;
  if (v18 != (v18 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v16) {
    return;
  }
  unint64_t v24 = v15 >> 3;
  if (v15 >> 3 == 3)
  {
    unint64_t v37 = *(void *)v6;
    if (*(void *)v6)
    {
      unint64_t v38 = 0;
      uint64_t v39 = a2[8];
      uint64_t v40 = a1[8];
      do
      {
        if (*((void *)v6 + 1))
        {
          unint64_t v41 = 0;
          uint64_t v42 = v39;
          uint64_t v43 = v40;
          do
          {
            if (*((void *)v6 + 2))
            {
              unint64_t v46 = 0;
              uint64_t v47 = v42;
              uint64_t v48 = v43;
              do
              {
                LOBYTE(a4) = *(unsigned char *)(*a1 + v48);
                a4 = (float)LODWORD(a4);
                *(unsigned char *)(*a1 + v48) = (int)(float)(*(float *)(*a2 + 4 * v47) + a4);
                unint64_t v44 = (void *)a1[5];
                v48 += v44[2];
                uint64_t v45 = (void *)a2[5];
                v47 += v45[2];
                ++v46;
                size_t v6 = (char *)a1[2];
              }
              while (v46 < *((void *)v6 + 2));
            }
            else
            {
              unint64_t v44 = (void *)a1[5];
              uint64_t v45 = (void *)a2[5];
            }
            v43 += v44[1];
            v42 += v45[1];
            ++v41;
          }
          while (v41 < *((void *)v6 + 1));
          unint64_t v37 = *(void *)v6;
        }
        else
        {
          unint64_t v44 = (void *)a1[5];
          uint64_t v45 = (void *)a2[5];
        }
        v40 += *v44;
        v39 += *v45;
        ++v38;
      }
      while (v38 < v37);
    }
  }
  else
  {
    if (v24 != 2)
    {
      if (v24 == 1)
      {
        if (*(void *)v6)
        {
          unint64_t v25 = 0;
          uint64_t v26 = a2[8];
          uint64_t v27 = a1[8];
          do
          {
            LOBYTE(a4) = *(unsigned char *)(*a1 + v27);
            a4 = (float)LODWORD(a4);
            *(unsigned char *)(*a1 + v27) = (int)(float)(*(float *)(*a2 + 4 * v26) + a4);
            v27 += *(void *)a1[5];
            v26 += *(void *)a2[5];
            ++v25;
          }
          while (v25 < *(void *)a1[2]);
        }
        return;
      }
      if (v15 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v49 = operator new(v15);
      bzero(v49, v15 & 0xFFFFFFFFFFFFFFF8);
      if (v24 <= 1) {
        unint64_t v51 = 1;
      }
      else {
        unint64_t v51 = v15 >> 3;
      }
      unint64_t v52 = v51 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        uint64_t v53 = a1[5];
        if (v51 < 2) {
          break;
        }
        uint64_t v56 = 0;
        uint64_t v57 = 0;
        unint64_t v58 = (void *)(v53 + 8);
        unint64_t v59 = v51 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v60 = v49 + 1;
        do
        {
          v56 += *(v58 - 1) * *(v60 - 1);
          v57 += *v58 * *v60;
          v60 += 2;
          v58 += 2;
          v59 -= 2;
        }
        while (v59);
        uint64_t v54 = v57 + v56;
        unint64_t v55 = v51 & 0xFFFFFFFFFFFFFFFELL;
        if (v51 != v52) {
          goto LABEL_60;
        }
LABEL_62:
        uint64_t v68 = a2[5];
        if (v51 < 2)
        {
          uint64_t v69 = 0;
          unint64_t v70 = 0;
LABEL_67:
          unint64_t v76 = v51 - v70;
          uint64_t v77 = v70;
          unint64_t v78 = (uint64_t *)(v68 + v77 * 8);
          uint64_t v79 = &v49[v77];
          do
          {
            uint64_t v81 = *v79++;
            uint64_t v80 = v81;
            uint64_t v82 = *v78++;
            v69 += v82 * v80;
            --v76;
          }
          while (v76);
          goto LABEL_69;
        }
        uint64_t v71 = 0;
        uint64_t v72 = 0;
        float32x4_t v73 = (void *)(v68 + 8);
        unint64_t v74 = v51 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v75 = v49 + 1;
        do
        {
          v71 += *(v73 - 1) * *(v75 - 1);
          v72 += *v73 * *v75;
          v75 += 2;
          v73 += 2;
          v74 -= 2;
        }
        while (v74);
        uint64_t v69 = v72 + v71;
        unint64_t v70 = v51 & 0xFFFFFFFFFFFFFFFELL;
        if (v51 != v52) {
          goto LABEL_67;
        }
LABEL_69:
        LOBYTE(v50) = *(unsigned char *)(*a1 + v54);
        float v50 = (float)LODWORD(v50);
        *(unsigned char *)(*a1 + v54) = (int)(float)(*(float *)(*a2 + 4 * (a2[8] + v69)) + v50);
        if ((int)((unint64_t)v15 >> 3) >= 1)
        {
          uint64_t v83 = a1[2];
          uint64_t v84 = ((unint64_t)v15 >> 3) + 1;
          unint64_t v85 = (unint64_t)v15 >> 3;
          while (1)
          {
            uint64_t v86 = (v84 - 2);
            unint64_t v87 = v49[v86] + 1;
            v49[v86] = v87;
            if (v87 < *(void *)(v83 + v86 * 8)) {
              break;
            }
            v49[(v84 - 2)] = 0;
            LODWORD(v85) = v85 - 1;
            if ((unint64_t)--v84 <= 1) {
              goto LABEL_75;
            }
          }
          if ((int)v85 > 0) {
            continue;
          }
        }
LABEL_75:
        operator delete(v49);
        return;
      }
      uint64_t v54 = 0;
      unint64_t v55 = 0;
LABEL_60:
      unint64_t v61 = v51 - v55;
      uint64_t v62 = v55;
      uint64_t v63 = (uint64_t *)(v53 + v62 * 8);
      uint64_t v64 = &v49[v62];
      do
      {
        uint64_t v66 = *v64++;
        uint64_t v65 = v66;
        uint64_t v67 = *v63++;
        v54 += v67 * v65;
        --v61;
      }
      while (v61);
      goto LABEL_62;
    }
    unint64_t v28 = *(void *)v6;
    if (*(void *)v6)
    {
      unint64_t v29 = 0;
      uint64_t v30 = a2[8];
      uint64_t v31 = a1[8];
      do
      {
        if (*((void *)v6 + 1))
        {
          unint64_t v34 = 0;
          uint64_t v35 = v30;
          uint64_t v36 = v31;
          do
          {
            LOBYTE(a4) = *(unsigned char *)(*a1 + v36);
            a4 = (float)LODWORD(a4);
            *(unsigned char *)(*a1 + v36) = (int)(float)(*(float *)(*a2 + 4 * v35) + a4);
            uint64_t v32 = (void *)a1[5];
            v36 += v32[1];
            uint64_t v33 = (void *)a2[5];
            v35 += v33[1];
            ++v34;
            size_t v6 = (char *)a1[2];
          }
          while (v34 < *((void *)v6 + 1));
          unint64_t v28 = *(void *)v6;
        }
        else
        {
          uint64_t v32 = (void *)a1[5];
          uint64_t v33 = (void *)a2[5];
        }
        v31 += *v32;
        v30 += *v33;
        ++v29;
      }
      while (v29 < v28);
    }
  }
}

void sub_192567040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::operator+<float>(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  unint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      unint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v38 = (char *)operator new(v4 - v5);
        uint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        uint64_t v39 = v40;
      }
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      unint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      uint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        uint64_t v35 = v19;
        unint64_t v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      unint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        uint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        unint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      unint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      unint64_t v24 = (unsigned char *)a2[5];
      uint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        unint64_t v29 = v26;
        uint64_t v31 = v27;
        memcpy(v26, v24, v25);
        uint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<unsigned char>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<unsigned char>::copy(&v28);
    }
  }
  nitro::ndarray<unsigned char>::copy(a1);
}

void sub_1925673C4(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1925673D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      unint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  unint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    uint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  uint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_192567474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x192567450);
  }
  JUMPOUT(0x192567420);
}

void sub_192567484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x192567460);
  }
  JUMPOUT(0x192567428);
}

void sub_192567494()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x192567438);
  }
  JUMPOUT(0x192567430);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    unint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192567730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925678B8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925678CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925678C4);
}

uint64_t *nitro::ndarray<int>::operator+=<float>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    unint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  unint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  unint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    std::locale v15 = (void *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<int>::operator+<float>(a1, a2);
    nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(a1, a2);
  }
  return a1;
}

void nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (unint64_t *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v13 = *a1;
  if (!*a1) {
    return;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v16 = ((v12 - 8) >> 3) + 1;
  std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v17 = v4 + 1;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  uint64_t v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v148 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v65 = 0;
    uint64_t v66 = a2[8];
    uint64_t v67 = a1[8];
    unint64_t v68 = v4[1];
    uint64_t v69 = (uint64_t *)a1[5];
    int v143 = (uint64_t *)a2[5];
    uint64_t v70 = v13 + 4 * v67 + 16;
    uint64_t v146 = *v143;
    uint64_t v147 = *v69;
    uint64_t v145 = 4 * *v69;
    uint64_t v71 = 4 * v66 + 16;
    uint64_t v144 = 4 * *v143;
    while (!v68)
    {
LABEL_50:
      v67 += v147;
      v66 += v146;
      ++v65;
      v70 += v145;
      v71 += v144;
      if (v65 == v148) {
        return;
      }
    }
    uint64_t v72 = 0;
    unint64_t v73 = v4[2];
    uint64_t v74 = *a2;
    uint64_t v75 = a2[5];
    uint64_t v76 = v69[1];
    unint64_t v77 = v73 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v78 = (float32x4_t *)(*a2 + v71);
    uint64_t v79 = v143[1];
    uint64_t v80 = (int32x4_t *)v70;
    uint64_t v81 = v66;
    uint64_t v82 = v67;
    while (1)
    {
      if (v73)
      {
        uint64_t v83 = v69[2];
        uint64_t v84 = *(void *)(v75 + 16);
        if (v73 >= 8 && (v83 == 1 ? (BOOL v85 = v84 == 1) : (BOOL v85 = 0), v85))
        {
          uint64_t v87 = v81 + v77 * v84;
          uint64_t v94 = v78;
          BOOL v95 = v80;
          unint64_t v96 = v73 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v88 = v82 + v77 * v83;
          do
          {
            int32x4_t v97 = vcvtq_s32_f32(vaddq_f32(*v94, vcvtq_f32_s32(*v95)));
            v95[-1] = vcvtq_s32_f32(vaddq_f32(v94[-1], vcvtq_f32_s32(v95[-1])));
            *BOOL v95 = v97;
            v95 += 2;
            v94 += 2;
            v96 -= 8;
          }
          while (v96);
          unint64_t v86 = v73 & 0xFFFFFFFFFFFFFFF8;
          if (v73 == v77) {
            goto LABEL_53;
          }
        }
        else
        {
          unint64_t v86 = 0;
          uint64_t v87 = v81;
          uint64_t v88 = v82;
        }
        unint64_t v89 = v73 - v86;
        uint64_t v90 = (float *)(v74 + 4 * v87);
        uint64_t v91 = 4 * v84;
        uint64_t v92 = 4 * v83;
        uint64_t v93 = (int *)(v13 + 4 * v88);
        do
        {
          int *v93 = (int)(float)(*v90 + (float)*v93);
          uint64_t v90 = (float *)((char *)v90 + v91);
          uint64_t v93 = (int *)((char *)v93 + v92);
          --v89;
        }
        while (v89);
      }
LABEL_53:
      v82 += v76;
      v81 += v79;
      ++v72;
      uint64_t v80 = (int32x4_t *)((char *)v80 + 4 * v76);
      unint64_t v78 = (float32x4_t *)((char *)v78 + 4 * v79);
      if (v72 == v68) {
        goto LABEL_50;
      }
    }
  }
  if (v22 == 2)
  {
    unint64_t v35 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v36 = 0;
    uint64_t v37 = a2[8];
    uint64_t v38 = a1[8];
    unint64_t v39 = v4[1];
    uint64_t v40 = *a2;
    unint64_t v41 = (uint64_t *)a2[5];
    uint64_t v42 = (uint64_t *)a1[5];
    uint64_t v43 = *v42;
    uint64_t v44 = *v41;
    unint64_t v45 = v39 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v46 = v13 + 4 * v38 + 16;
    uint64_t v47 = 4 * *v42;
    uint64_t v48 = *a2 + 4 * v37 + 16;
    uint64_t v49 = 4 * *v41;
    while (1)
    {
      if (v39)
      {
        uint64_t v50 = v42[1];
        uint64_t v51 = v41[1];
        if (v39 >= 8 && (v50 == 1 ? (BOOL v52 = v51 == 1) : (BOOL v52 = 0), v52))
        {
          uint64_t v54 = v37 + v45 * v51;
          unint64_t v61 = (float32x4_t *)v48;
          uint64_t v62 = (int32x4_t *)v46;
          unint64_t v63 = v39 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v55 = v38 + v45 * v50;
          do
          {
            int32x4_t v64 = vcvtq_s32_f32(vaddq_f32(*v61, vcvtq_f32_s32(*v62)));
            v62[-1] = vcvtq_s32_f32(vaddq_f32(v61[-1], vcvtq_f32_s32(v62[-1])));
            *uint64_t v62 = v64;
            v62 += 2;
            v61 += 2;
            v63 -= 8;
          }
          while (v63);
          unint64_t v53 = v39 & 0xFFFFFFFFFFFFFFF8;
          if (v39 == v45) {
            goto LABEL_33;
          }
        }
        else
        {
          unint64_t v53 = 0;
          uint64_t v54 = v37;
          uint64_t v55 = v38;
        }
        unint64_t v56 = v39 - v53;
        uint64_t v57 = (float *)(v40 + 4 * v54);
        uint64_t v58 = 4 * v51;
        uint64_t v59 = 4 * v50;
        uint64_t v60 = (int *)(v13 + 4 * v55);
        do
        {
          *uint64_t v60 = (int)(float)(*v57 + (float)*v60);
          uint64_t v57 = (float *)((char *)v57 + v58);
          uint64_t v60 = (int *)((char *)v60 + v59);
          --v56;
        }
        while (v56);
      }
LABEL_33:
      v38 += v43;
      v37 += v44;
      ++v36;
      v46 += v47;
      v48 += v49;
      if (v36 == v35) {
        return;
      }
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v98 = operator new(v12);
    bzero(v98, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v99 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v100 = 1;
    }
    else {
      unint64_t v100 = v12 >> 3;
    }
    uint64_t v101 = a2[5];
    uint64_t v102 = a2[8];
    uint64_t v103 = v100 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v104 = a1[5];
    while (v100 >= 2)
    {
      uint64_t v107 = 0;
      uint64_t v108 = 0;
      uint64_t v109 = v100 & 0x1FFFFFFFFFFFFFFELL;
      float32x4_t v110 = (void *)(v104 + 8);
      float32x4_t v111 = v98 + 1;
      do
      {
        v107 += *(v110 - 1) * *(v111 - 1);
        v108 += *v110 * *v111;
        v111 += 2;
        v110 += 2;
        v109 -= 2;
      }
      while (v109);
      uint64_t v105 = v108 + v107;
      uint64_t v106 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103) {
        goto LABEL_78;
      }
LABEL_80:
      if (v100 < 2)
      {
        uint64_t v119 = 0;
        uint64_t v120 = 0;
LABEL_85:
        unint64_t v126 = v100 - v120;
        uint64_t v127 = v120;
        uint64_t v128 = (uint64_t *)(v101 + 8 * v120);
        uint64_t v129 = &v98[v127];
        do
        {
          uint64_t v131 = *v129++;
          uint64_t v130 = v131;
          uint64_t v132 = *v128++;
          v119 += v132 * v130;
          --v126;
        }
        while (v126);
        goto LABEL_87;
      }
      uint64_t v121 = 0;
      uint64_t v122 = 0;
      uint64_t v123 = v100 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v124 = (void *)(v101 + 8);
      uint64_t v125 = v98 + 1;
      do
      {
        v121 += *(v124 - 1) * *(v125 - 1);
        v122 += *v124 * *v125;
        v125 += 2;
        v124 += 2;
        v123 -= 2;
      }
      while (v123);
      uint64_t v119 = v122 + v121;
      uint64_t v120 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103) {
        goto LABEL_85;
      }
LABEL_87:
      *(_DWORD *)(v13 + 4 * v105) = (int)(float)(*(float *)(v99 + 4 * (v102 + v119)) + (float)*(int *)(v13 + 4 * v105));
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v133 = (v12 >> 3) + 1;
        int v134 = v12 >> 3;
        while (1)
        {
          uint64_t v135 = (v133 - 2);
          unint64_t v136 = v98[v135] + 1;
          v98[v135] = v136;
          if (v136 < v4[v135]) {
            break;
          }
          v98[(v133 - 2)] = 0;
          --v134;
          if ((unint64_t)--v133 <= 1) {
            goto LABEL_93;
          }
        }
        if (v134 > 0) {
          continue;
        }
      }
LABEL_93:
      operator delete(v98);
      return;
    }
    uint64_t v105 = 0;
    uint64_t v106 = 0;
LABEL_78:
    unint64_t v112 = v100 - v106;
    uint64_t v113 = v106;
    uint64_t v114 = (uint64_t *)(v104 + 8 * v106);
    unint64_t v115 = &v98[v113];
    do
    {
      uint64_t v117 = *v115++;
      uint64_t v116 = v117;
      uint64_t v118 = *v114++;
      v105 += v118 * v116;
      --v112;
    }
    while (v112);
    goto LABEL_80;
  }
  unint64_t v23 = *v4;
  if (!*v4) {
    return;
  }
  uint64_t v24 = a2[8];
  uint64_t v25 = a1[8];
  uint64_t v26 = *a2;
  uint64_t v27 = *(void *)a1[5];
  uint64_t v28 = *(void *)a2[5];
  if (v23 < 8)
  {
    unint64_t v29 = 0;
LABEL_28:
    unint64_t v30 = v23 - v29;
    uint64_t v31 = (float *)(v26 + 4 * v24);
    uint64_t v32 = 4 * v28;
    uint64_t v33 = 4 * v27;
    unint64_t v34 = (int *)(v13 + 4 * v25);
    do
    {
      *unint64_t v34 = (int)(float)(*v31 + (float)*v34);
      uint64_t v31 = (float *)((char *)v31 + v32);
      unint64_t v34 = (int *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  unint64_t v29 = 0;
  if (v27 != 1) {
    goto LABEL_28;
  }
  if (v28 != 1) {
    goto LABEL_28;
  }
  unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v137 = v24 + (v23 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v138 = v25 + (v23 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v139 = (float32x4_t *)(v26 + 4 * v24 + 16);
  uint64_t v140 = (int32x4_t *)(v13 + 4 * v25 + 16);
  unint64_t v141 = v23 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    int32x4_t v142 = vcvtq_s32_f32(vaddq_f32(*v139, vcvtq_f32_s32(*v140)));
    v140[-1] = vcvtq_s32_f32(vaddq_f32(v139[-1], vcvtq_f32_s32(v140[-1])));
    int32x4_t *v140 = v142;
    v139 += 2;
    v140 += 2;
    v141 -= 8;
  }
  while (v141);
  uint64_t v24 = v137;
  uint64_t v25 = v138;
  if (v23 != v29) {
    goto LABEL_28;
  }
}

void sub_192568190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::operator+<float>(void *a1, void *a2)
{
  unint64_t v5 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      unint64_t v39 = 0;
      uint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        uint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        unint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      unint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        uint64_t v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      unint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        uint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        unint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      unint64_t v29 = 0;
      unint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      unint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        unint64_t v29 = v26;
        uint64_t v31 = v27;
        memcpy(v26, v24, v25);
        unint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<int>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<int>::copy(&v28);
    }
  }
  nitro::ndarray<int>::copy(a1);
}

void sub_192568514(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_192568528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      unint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  unint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    unint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  unint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1925685C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x1925685A0);
  }
  JUMPOUT(0x192568570);
}

void sub_1925685D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x1925685B0);
  }
  JUMPOUT(0x192568578);
}

void sub_1925685E4()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x192568588);
  }
  JUMPOUT(0x192568580);
}

void nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192568880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192568A08(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192568A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192568A14);
}

uint64_t *nitro::ndarray<half>::operator+=<float>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    unint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  unint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  unint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    std::locale v15 = (void *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<half>::operator+<float>(a1, a2);
    nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(a1, a2);
  }
  return a1;
}

void nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (unint64_t *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v13 = *a1;
  if (!*a1) {
    return;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v16 = ((v12 - 8) >> 3) + 1;
  std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v17 = v4 + 1;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  uint64_t v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v179 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v79 = 0;
    uint64_t v80 = a2[8];
    uint64_t v81 = a1[8];
    unint64_t v82 = v4[1];
    uint64_t v83 = (uint64_t *)a1[5];
    unint64_t v174 = (uint64_t *)a2[5];
    uint64_t v84 = v13 + 2 * v81 + 16;
    uint64_t v177 = *v174;
    uint64_t v178 = *v83;
    uint64_t v176 = 2 * *v83;
    uint64_t v85 = 4 * v80 + 32;
    uint64_t v175 = 4 * *v174;
    while (!v82)
    {
LABEL_50:
      v81 += v178;
      v80 += v177;
      ++v79;
      v84 += v176;
      v85 += v175;
      if (v79 == v179) {
        return;
      }
    }
    uint64_t v86 = 0;
    unint64_t v87 = v4[2];
    uint64_t v88 = *a2;
    uint64_t v89 = a2[5];
    uint64_t v90 = v83[1];
    unint64_t v91 = v87 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v92 = (float32x4_t *)(*a2 + v85);
    uint64_t v93 = v174[1];
    uint64_t v94 = (float16x4_t *)v84;
    uint64_t v95 = v80;
    uint64_t v96 = v81;
    while (1)
    {
      if (v87)
      {
        uint64_t v97 = v83[2];
        uint64_t v98 = *(void *)(v89 + 16);
        if (v87 >= 0x10 && (v97 == 1 ? (BOOL v99 = v98 == 1) : (BOOL v99 = 0), v99))
        {
          uint64_t v101 = v95 + v91 * v98;
          float32x4_t v111 = v92;
          unint64_t v112 = v94;
          unint64_t v113 = v87 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v102 = v96 + v91 * v97;
          do
          {
            float32x4_t v114 = v111[-2];
            float32x4_t v115 = v111[-1];
            float32x4_t v116 = *v111;
            float32x4_t v117 = v111[1];
            v111 += 4;
            float16x8_t v118 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(v114, vcvtq_f32_f16(v112[-2]))), vaddq_f32(v115, vcvt_hight_f32_f16(*(float16x8_t *)v112[-2].i8)));
            float16x8_t v119 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(v116, vcvtq_f32_f16(*v112))), vaddq_f32(v117, vcvt_hight_f32_f16(*(float16x8_t *)v112->i8)));
            *(float16x8_t *)v112[-2].i8 = v118;
            *(float16x8_t *)v112->i8 = v119;
            v112 += 4;
            v113 -= 16;
          }
          while (v113);
          unint64_t v100 = v87 & 0xFFFFFFFFFFFFFFF0;
          if (v87 == v91) {
            goto LABEL_53;
          }
        }
        else
        {
          unint64_t v100 = 0;
          uint64_t v101 = v95;
          uint64_t v102 = v96;
        }
        unint64_t v103 = v87 - v100;
        uint64_t v104 = (float *)(v88 + 4 * v101);
        uint64_t v105 = 4 * v98;
        uint64_t v106 = 2 * v97;
        uint64_t v107 = (__int16 *)(v13 + 2 * v102);
        do
        {
          _H1 = *v107;
          __asm { FCVT            S1, H1 }
          _S0 = *v104 + _S1;
          __asm { FCVT            H0, S0 }
          __int16 *v107 = LOWORD(_S0);
          uint64_t v104 = (float *)((char *)v104 + v105);
          uint64_t v107 = (__int16 *)((char *)v107 + v106);
          --v103;
        }
        while (v103);
      }
LABEL_53:
      v96 += v90;
      v95 += v93;
      ++v86;
      uint64_t v94 = (float16x4_t *)((char *)v94 + 2 * v90);
      uint64_t v92 = (float32x4_t *)((char *)v92 + 4 * v93);
      if (v86 == v82) {
        goto LABEL_50;
      }
    }
  }
  if (v22 == 2)
  {
    unint64_t v41 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v42 = 0;
    uint64_t v43 = a2[8];
    uint64_t v44 = a1[8];
    unint64_t v45 = v4[1];
    uint64_t v46 = *a2;
    uint64_t v47 = (uint64_t *)a2[5];
    uint64_t v48 = (uint64_t *)a1[5];
    uint64_t v49 = *v48;
    uint64_t v50 = *v47;
    unint64_t v51 = v45 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v52 = v13 + 2 * v44 + 16;
    uint64_t v53 = 2 * *v48;
    uint64_t v54 = *a2 + 4 * v43 + 32;
    uint64_t v55 = 4 * *v47;
    while (1)
    {
      if (v45)
      {
        uint64_t v56 = v48[1];
        uint64_t v57 = v47[1];
        if (v45 >= 0x10 && (v56 == 1 ? (_ZF = v57 == 1) : (_ZF = 0), _ZF))
        {
          uint64_t v60 = v43 + v51 * v57;
          uint64_t v70 = (float32x4_t *)v54;
          uint64_t v71 = (float16x4_t *)v52;
          unint64_t v72 = v45 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v61 = v44 + v51 * v56;
          do
          {
            float32x4_t v73 = v70[-2];
            float32x4_t v74 = v70[-1];
            float32x4_t v75 = *v70;
            float32x4_t v76 = v70[1];
            v70 += 4;
            float16x8_t v77 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(v73, vcvtq_f32_f16(v71[-2]))), vaddq_f32(v74, vcvt_hight_f32_f16(*(float16x8_t *)v71[-2].i8)));
            float16x8_t v78 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(v75, vcvtq_f32_f16(*v71))), vaddq_f32(v76, vcvt_hight_f32_f16(*(float16x8_t *)v71->i8)));
            *(float16x8_t *)v71[-2].i8 = v77;
            *(float16x8_t *)v71->i8 = v78;
            v71 += 4;
            v72 -= 16;
          }
          while (v72);
          unint64_t v59 = v45 & 0xFFFFFFFFFFFFFFF0;
          if (v45 == v51) {
            goto LABEL_33;
          }
        }
        else
        {
          unint64_t v59 = 0;
          uint64_t v60 = v43;
          uint64_t v61 = v44;
        }
        unint64_t v62 = v45 - v59;
        unint64_t v63 = (float *)(v46 + 4 * v60);
        uint64_t v64 = 4 * v57;
        uint64_t v65 = 2 * v56;
        uint64_t v66 = (__int16 *)(v13 + 2 * v61);
        do
        {
          _H1 = *v66;
          __asm { FCVT            S1, H1 }
          _S0 = *v63 + _S1;
          __asm { FCVT            H0, S0 }
          *uint64_t v66 = LOWORD(_S0);
          unint64_t v63 = (float *)((char *)v63 + v64);
          uint64_t v66 = (__int16 *)((char *)v66 + v65);
          --v62;
        }
        while (v62);
      }
LABEL_33:
      v44 += v49;
      v43 += v50;
      ++v42;
      v52 += v53;
      v54 += v55;
      if (v42 == v41) {
        return;
      }
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v120 = operator new(v12);
    bzero(v120, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v121 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v122 = 1;
    }
    else {
      unint64_t v122 = v12 >> 3;
    }
    uint64_t v123 = a2[5];
    uint64_t v124 = a2[8];
    uint64_t v125 = v122 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v126 = a1[5];
    while (v122 >= 2)
    {
      uint64_t v129 = 0;
      uint64_t v130 = 0;
      uint64_t v131 = v122 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v132 = (void *)(v126 + 8);
      uint64_t v133 = v120 + 1;
      do
      {
        v129 += *(v132 - 1) * *(v133 - 1);
        v130 += *v132 * *v133;
        v133 += 2;
        v132 += 2;
        v131 -= 2;
      }
      while (v131);
      uint64_t v127 = v130 + v129;
      uint64_t v128 = v122 & 0x1FFFFFFFFFFFFFFELL;
      if (v122 != v125) {
        goto LABEL_78;
      }
LABEL_80:
      if (v122 < 2)
      {
        uint64_t v141 = 0;
        uint64_t v142 = 0;
LABEL_85:
        unint64_t v148 = v122 - v142;
        uint64_t v149 = v142;
        uint64_t v150 = (uint64_t *)(v123 + 8 * v142);
        int v151 = &v120[v149];
        do
        {
          uint64_t v153 = *v151++;
          uint64_t v152 = v153;
          uint64_t v154 = *v150++;
          v141 += v154 * v152;
          --v148;
        }
        while (v148);
        goto LABEL_87;
      }
      uint64_t v143 = 0;
      uint64_t v144 = 0;
      uint64_t v145 = v122 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v146 = (void *)(v123 + 8);
      uint64_t v147 = v120 + 1;
      do
      {
        v143 += *(v146 - 1) * *(v147 - 1);
        v144 += *v146 * *v147;
        v147 += 2;
        v146 += 2;
        v145 -= 2;
      }
      while (v145);
      uint64_t v141 = v144 + v143;
      uint64_t v142 = v122 & 0x1FFFFFFFFFFFFFFELL;
      if (v122 != v125) {
        goto LABEL_85;
      }
LABEL_87:
      uint64_t v155 = 2 * v127;
      _H1 = *(_WORD *)(v13 + v155);
      __asm { FCVT            S1, H1 }
      _S0 = *(float *)(v121 + 4 * (v124 + v141)) + _S1;
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v13 + v155) = LOWORD(_S0);
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v159 = (v12 >> 3) + 1;
        int v160 = v12 >> 3;
        while (1)
        {
          uint64_t v161 = (v159 - 2);
          unint64_t v162 = v120[v161] + 1;
          v120[v161] = v162;
          if (v162 < v4[v161]) {
            break;
          }
          v120[(v159 - 2)] = 0;
          --v160;
          if ((unint64_t)--v159 <= 1) {
            goto LABEL_93;
          }
        }
        if (v160 > 0) {
          continue;
        }
      }
LABEL_93:
      operator delete(v120);
      return;
    }
    uint64_t v127 = 0;
    uint64_t v128 = 0;
LABEL_78:
    unint64_t v134 = v122 - v128;
    uint64_t v135 = v128;
    unint64_t v136 = (uint64_t *)(v126 + 8 * v128);
    uint64_t v137 = &v120[v135];
    do
    {
      uint64_t v139 = *v137++;
      uint64_t v138 = v139;
      uint64_t v140 = *v136++;
      v127 += v140 * v138;
      --v134;
    }
    while (v134);
    goto LABEL_80;
  }
  unint64_t v23 = *v4;
  if (!*v4) {
    return;
  }
  uint64_t v24 = a2[8];
  uint64_t v25 = a1[8];
  uint64_t v26 = *a2;
  uint64_t v27 = *(void *)a1[5];
  uint64_t v28 = *(void *)a2[5];
  if (v23 < 0x10)
  {
    unint64_t v29 = 0;
LABEL_28:
    unint64_t v30 = v23 - v29;
    uint64_t v31 = (float *)(v26 + 4 * v24);
    uint64_t v32 = 4 * v28;
    uint64_t v33 = 2 * v27;
    unint64_t v34 = (__int16 *)(v13 + 2 * v25);
    do
    {
      _H1 = *v34;
      __asm { FCVT            S1, H1 }
      _S0 = *v31 + _S1;
      __asm { FCVT            H0, S0 }
      *unint64_t v34 = LOWORD(_S0);
      uint64_t v31 = (float *)((char *)v31 + v32);
      unint64_t v34 = (__int16 *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  unint64_t v29 = 0;
  if (v27 != 1) {
    goto LABEL_28;
  }
  if (v28 != 1) {
    goto LABEL_28;
  }
  unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  uint64_t v163 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v164 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = (float32x4_t *)(v26 + 4 * v24 + 32);
  uint64_t v166 = (float16x4_t *)(v13 + 2 * v25 + 16);
  unint64_t v167 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    float32x4_t v168 = v165[-2];
    float32x4_t v169 = v165[-1];
    float32x4_t v170 = *v165;
    float32x4_t v171 = v165[1];
    v165 += 4;
    float16x8_t v172 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(v168, vcvtq_f32_f16(v166[-2]))), vaddq_f32(v169, vcvt_hight_f32_f16(*(float16x8_t *)v166[-2].i8)));
    float16x8_t v173 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(v170, vcvtq_f32_f16(*v166))), vaddq_f32(v171, vcvt_hight_f32_f16(*(float16x8_t *)v166->i8)));
    *(float16x8_t *)v166[-2].i8 = v172;
    *(float16x8_t *)v166->i8 = v173;
    v166 += 4;
    v167 -= 16;
  }
  while (v167);
  uint64_t v24 = v163;
  uint64_t v25 = v164;
  if (v23 != v29) {
    goto LABEL_28;
  }
}

void sub_192569328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::operator+<float>(void *a1, void *a2)
{
  unint64_t v5 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      unint64_t v39 = 0;
      uint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        uint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        unint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      unint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        uint64_t v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      unint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        uint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        unint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      unint64_t v29 = 0;
      unint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      unint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        unint64_t v29 = v26;
        uint64_t v31 = v27;
        memcpy(v26, v24, v25);
        unint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<half>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<half>::copy(&v28);
    }
  }
  nitro::ndarray<half>::copy(a1);
}

void sub_1925696AC(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1925696C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      unint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  unint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    unint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  unint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_19256975C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x192569738);
  }
  JUMPOUT(0x192569708);
}

void sub_19256976C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x192569748);
  }
  JUMPOUT(0x192569710);
}

void sub_19256977C()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x192569720);
  }
  JUMPOUT(0x192569718);
}

void nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192569A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192569BA0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192569BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192569BACLL);
}

uint64_t *nitro::ndarray<float>::operator+=<float>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    unint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  unint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  unint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    std::locale v15 = (void *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<float>::operator+<float>(a1, a2);
    nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(a1, a2);
  }
  return a1;
}

float32x4_t nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (unint64_t *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return result;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return result;
  }
  uint64_t v160 = *a1;
  if (!*a1) {
    return result;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v13 = 1;
    unint64_t v14 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v20 = *v14++;
      v13 *= v20;
    }
    while (v14 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v15 = ((v12 - 8) >> 3) + 1;
  unint64_t v14 = &v4[v15 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v16 = v4 + 1;
  uint64_t v17 = 1;
  uint64_t v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v19 = 1;
  do
  {
    v17 *= *(v16 - 1);
    v19 *= *v16;
    v16 += 2;
    v18 -= 2;
  }
  while (v18);
  uint64_t v13 = v19 * v17;
  if (v15 != (v15 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v13) {
    return result;
  }
  uint64_t v21 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v155 = *v4;
    if (!*v4) {
      return result;
    }
    uint64_t v71 = 0;
    uint64_t v72 = a2[8];
    uint64_t v73 = a1[8];
    unint64_t v74 = v4[1];
    float32x4_t v75 = (uint64_t *)a1[5];
    uint64_t v152 = (uint64_t *)a2[5];
    uint64_t v153 = *v152;
    uint64_t v154 = *v75;
    uint64_t v157 = 4 * *v75;
    uint64_t v156 = 4 * *v152;
    uint64_t v150 = 4 * v72;
    uint64_t v151 = 4 * v73;
    uint64_t v76 = 4 * v73 + v160 + 16;
    uint64_t v77 = 4 * v72 + 16;
    while (!v74)
    {
LABEL_55:
      v73 += v154;
      v72 += v153;
      ++v71;
      v76 += v157;
      v77 += v156;
      if (v71 == v155) {
        return result;
      }
    }
    uint64_t v78 = 0;
    uint64_t v79 = v150 + v156 * v71;
    unint64_t v80 = v4[2];
    uint64_t v81 = *a2;
    uint64_t v82 = v75[1];
    uint64_t v83 = v152[1];
    uint64_t v84 = 4 * v82;
    uint64_t v159 = v151 + v157 * v71;
    uint64_t v85 = 4 * v83;
    unint64_t v86 = v80 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v87 = a2[5];
    uint64_t v88 = (float32x4_t *)(*a2 + v77);
    uint64_t v89 = (float32x4_t *)v76;
    uint64_t v90 = v72;
    uint64_t v91 = v73;
    while (!v80)
    {
LABEL_58:
      v91 += v82;
      v90 += v83;
      ++v78;
      uint64_t v89 = (float32x4_t *)((char *)v89 + v84);
      uint64_t v88 = (float32x4_t *)((char *)v88 + v85);
      if (v78 == v74) {
        goto LABEL_55;
      }
    }
    uint64_t v92 = v75[2];
    uint64_t v93 = *(void *)(v87 + 16);
    if (v80 >= 8)
    {
      unint64_t v94 = 0;
      if (v92 != 1) {
        goto LABEL_62;
      }
      uint64_t v95 = v90;
      uint64_t v96 = v91;
      if (v93 != 1)
      {
LABEL_63:
        unint64_t v97 = v80 - v94;
        uint64_t v98 = (float *)(v81 + 4 * v95);
        uint64_t v99 = 4 * v93;
        uint64_t v100 = 4 * v92;
        uint64_t v101 = (float *)(v160 + 4 * v96);
        do
        {
          result.f32[0] = *v98 + *v101;
          float *v101 = result.f32[0];
          uint64_t v98 = (float *)((char *)v98 + v99);
          uint64_t v101 = (float *)((char *)v101 + v100);
          --v97;
        }
        while (v97);
        goto LABEL_58;
      }
      if (v160 + v159 + v84 * v78 >= v81 + v79 + 4 * v80 + v85 * v78
        || v81 + v79 + v85 * v78 >= v160 + v159 + 4 * v80 + v84 * v78)
      {
        uint64_t v95 = v90 + v86;
        unint64_t v103 = v88;
        uint64_t v104 = v89;
        unint64_t v105 = v80 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v96 = v91 + v86;
        do
        {
          float32x4_t result = vaddq_f32(v103[-1], v104[-1]);
          float32x4_t v106 = vaddq_f32(*v103, *v104);
          v104[-1] = result;
          *uint64_t v104 = v106;
          v104 += 2;
          v103 += 2;
          v105 -= 8;
        }
        while (v105);
        unint64_t v94 = v80 & 0xFFFFFFFFFFFFFFF8;
        if (v80 == v86) {
          goto LABEL_58;
        }
        goto LABEL_63;
      }
    }
    unint64_t v94 = 0;
LABEL_62:
    uint64_t v95 = v90;
    uint64_t v96 = v91;
    goto LABEL_63;
  }
  if (v21 == 2)
  {
    unint64_t v37 = *v4;
    if (!*v4) {
      return result;
    }
    uint64_t v38 = 0;
    uint64_t v39 = a2[8];
    uint64_t v40 = a1[8];
    unint64_t v41 = v4[1];
    uint64_t v42 = (uint64_t *)a2[5];
    uint64_t v43 = (uint64_t *)a1[5];
    uint64_t v44 = *v43;
    uint64_t v45 = *v42;
    uint64_t v46 = 4 * *v43;
    uint64_t v47 = 4 * *v42;
    unint64_t v48 = v41 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v49 = *a2;
    uint64_t v50 = 4 * v40 + v160 + 16;
    uint64_t v51 = 4 * v39 + *a2 + 16;
    uint64_t v52 = v160 + 4 * v40;
    uint64_t v53 = v160 + 4 * v40 + 4 * v41;
    uint64_t v54 = *a2 + 4 * v39;
    uint64_t v55 = *a2 + 4 * v39 + 4 * v41;
    while (!v41)
    {
LABEL_34:
      v40 += v44;
      v39 += v45;
      ++v38;
      v50 += v46;
      v51 += v47;
      if (v38 == v37) {
        return result;
      }
    }
    uint64_t v56 = v43[1];
    uint64_t v57 = v42[1];
    if (v41 >= 8)
    {
      unint64_t v58 = 0;
      if (v56 != 1) {
        goto LABEL_38;
      }
      uint64_t v59 = v39;
      uint64_t v60 = v40;
      if (v57 != 1)
      {
LABEL_39:
        unint64_t v61 = v41 - v58;
        unint64_t v62 = (float *)(v49 + 4 * v59);
        uint64_t v63 = 4 * v57;
        uint64_t v64 = 4 * v56;
        uint64_t v65 = (float *)(v160 + 4 * v60);
        do
        {
          result.f32[0] = *v62 + *v65;
          *uint64_t v65 = result.f32[0];
          unint64_t v62 = (float *)((char *)v62 + v63);
          uint64_t v65 = (float *)((char *)v65 + v64);
          --v61;
        }
        while (v61);
        goto LABEL_34;
      }
      if (v52 + v46 * v38 >= (unint64_t)(v55 + v47 * v38)
        || v54 + v47 * v38 >= (unint64_t)(v53 + v46 * v38))
      {
        uint64_t v59 = v39 + v48;
        uint64_t v67 = (float32x4_t *)v51;
        unint64_t v68 = (float32x4_t *)v50;
        unint64_t v69 = v41 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v60 = v40 + v48;
        do
        {
          float32x4_t result = vaddq_f32(v67[-1], v68[-1]);
          float32x4_t v70 = vaddq_f32(*v67, *v68);
          v68[-1] = result;
          *unint64_t v68 = v70;
          v68 += 2;
          v67 += 2;
          v69 -= 8;
        }
        while (v69);
        unint64_t v58 = v41 & 0xFFFFFFFFFFFFFFF8;
        if (v41 == v48) {
          goto LABEL_34;
        }
        goto LABEL_39;
      }
    }
    unint64_t v58 = 0;
LABEL_38:
    uint64_t v59 = v39;
    uint64_t v60 = v40;
    goto LABEL_39;
  }
  if (v21 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v107 = operator new(v12);
    bzero(v107, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v108 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v109 = 1;
    }
    else {
      unint64_t v109 = v12 >> 3;
    }
    uint64_t v110 = a2[5];
    uint64_t v111 = a2[8];
    uint64_t v112 = v109 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v113 = a1[5];
    while (v109 >= 2)
    {
      uint64_t v116 = 0;
      uint64_t v117 = 0;
      uint64_t v118 = v109 & 0x1FFFFFFFFFFFFFFELL;
      float16x8_t v119 = (void *)(v113 + 8);
      uint64_t v120 = v107 + 1;
      do
      {
        v116 += *(v119 - 1) * *(v120 - 1);
        v117 += *v119 * *v120;
        v120 += 2;
        v119 += 2;
        v118 -= 2;
      }
      while (v118);
      uint64_t v114 = v117 + v116;
      uint64_t v115 = v109 & 0x1FFFFFFFFFFFFFFELL;
      if (v109 != v112) {
        goto LABEL_87;
      }
LABEL_89:
      if (v109 < 2)
      {
        uint64_t v128 = 0;
        uint64_t v129 = 0;
LABEL_94:
        unint64_t v135 = v109 - v129;
        uint64_t v136 = v129;
        uint64_t v137 = (uint64_t *)(v110 + 8 * v129);
        uint64_t v138 = &v107[v136];
        do
        {
          uint64_t v140 = *v138++;
          uint64_t v139 = v140;
          uint64_t v141 = *v137++;
          v128 += v141 * v139;
          --v135;
        }
        while (v135);
        goto LABEL_96;
      }
      uint64_t v130 = 0;
      uint64_t v131 = 0;
      uint64_t v132 = v109 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v133 = (void *)(v110 + 8);
      unint64_t v134 = v107 + 1;
      do
      {
        v130 += *(v133 - 1) * *(v134 - 1);
        v131 += *v133 * *v134;
        v134 += 2;
        v133 += 2;
        v132 -= 2;
      }
      while (v132);
      uint64_t v128 = v131 + v130;
      uint64_t v129 = v109 & 0x1FFFFFFFFFFFFFFELL;
      if (v109 != v112) {
        goto LABEL_94;
      }
LABEL_96:
      *(float *)(v160 + 4 * v114) = *(float *)(v108 + 4 * (v111 + v128)) + *(float *)(v160 + 4 * v114);
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v142 = (v12 >> 3) + 1;
        int v143 = v12 >> 3;
        while (1)
        {
          uint64_t v144 = (v142 - 2);
          unint64_t v145 = v107[v144] + 1;
          v107[v144] = v145;
          if (v145 < v4[v144]) {
            break;
          }
          v107[(v142 - 2)] = 0;
          --v143;
          if ((unint64_t)--v142 <= 1) {
            goto LABEL_102;
          }
        }
        if (v143 > 0) {
          continue;
        }
      }
LABEL_102:
      operator delete(v107);
      return result;
    }
    uint64_t v114 = 0;
    uint64_t v115 = 0;
LABEL_87:
    unint64_t v121 = v109 - v115;
    uint64_t v122 = v115;
    uint64_t v123 = (uint64_t *)(v113 + 8 * v115);
    uint64_t v124 = &v107[v122];
    do
    {
      uint64_t v126 = *v124++;
      uint64_t v125 = v126;
      uint64_t v127 = *v123++;
      v114 += v127 * v125;
      --v121;
    }
    while (v121);
    goto LABEL_89;
  }
  unint64_t v22 = *v4;
  if (!*v4) {
    return result;
  }
  uint64_t v23 = a2[8];
  uint64_t v24 = a1[8];
  uint64_t v25 = *a2;
  uint64_t v26 = *(void *)a1[5];
  uint64_t v27 = *(void *)a2[5];
  if (v22 < 0xC) {
    goto LABEL_27;
  }
  unint64_t v28 = 0;
  if (v26 != 1 || v27 != 1) {
    goto LABEL_28;
  }
  if (v160 + 4 * v24 < v25 + 4 * v22 + 4 * v23 && v25 + 4 * v23 < v160 + 4 * v22 + 4 * v24)
  {
LABEL_27:
    unint64_t v28 = 0;
LABEL_28:
    uint64_t v29 = a2[8];
    uint64_t v30 = a1[8];
LABEL_29:
    unint64_t v31 = v22 - v28;
    uint64_t v32 = (float *)(v25 + 4 * v29);
    uint64_t v33 = 4 * v27;
    uint64_t v34 = 4 * v26;
    unint64_t v35 = (float *)(v160 + 4 * v30);
    do
    {
      result.f32[0] = *v32 + *v35;
      *unint64_t v35 = result.f32[0];
      uint64_t v32 = (float *)((char *)v32 + v33);
      unint64_t v35 = (float *)((char *)v35 + v34);
      --v31;
    }
    while (v31);
    return result;
  }
  unint64_t v28 = v22 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v29 = v23 + (v22 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v30 = v24 + (v22 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v146 = (float32x4_t *)(v25 + 4 * v23 + 16);
  uint64_t v147 = (float32x4_t *)(v160 + 4 * v24 + 16);
  unint64_t v148 = v22 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    float32x4_t result = vaddq_f32(v146[-1], v147[-1]);
    float32x4_t v149 = vaddq_f32(*v146, *v147);
    v147[-1] = result;
    *uint64_t v147 = v149;
    v146 += 2;
    v147 += 2;
    v148 -= 8;
  }
  while (v148);
  if (v22 != v28) {
    goto LABEL_29;
  }
  return result;
}

void sub_19256A554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::operator+<float>(void *a1, void *a2)
{
  unint64_t v5 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        uint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        uint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      unint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      uint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        unint64_t v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        unint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        uint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      unint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      uint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        uint64_t v29 = v26;
        unint64_t v31 = v27;
        memcpy(v26, v24, v25);
        uint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<float>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<float>::copy(&v28);
    }
  }
  nitro::ndarray<float>::copy(a1);
}

void sub_19256A8D8(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_19256A8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      uint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  uint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    uint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  uint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_19256A988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x19256A964);
  }
  JUMPOUT(0x19256A934);
}

void sub_19256A998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x19256A974);
  }
  JUMPOUT(0x19256A93CLL);
}

void sub_19256A9A8()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x19256A94CLL);
  }
  JUMPOUT(0x19256A944);
}

void nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19256AC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator+=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19256ADCC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19256ADE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19256ADD8);
}

void nitro::ndarray_container::visit<nitro::ndarray_container const,nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,(void *)0>(nitro::ndarray_container const &,nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 230, 1);
    std::stringbuf::str();
    unint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 230, 1);
    std::stringbuf::str();
    unsigned __int8 v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::locale v15 = v23;
      }
      else {
        std::locale v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  int64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19256B04C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unsigned __int8 v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::locale v15 = v23;
      }
      else {
        std::locale v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  int64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19256B3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void *nitro::ndarray<unsigned char>::operator-=<unsigned char>(void *a1, void *a2)
{
  unint64_t v3 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    unint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  unint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  unint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    std::locale v15 = (void *)a2[2];
    if (v14 != (uint64_t)(a2[3] - (void)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<unsigned char>::operator-<unsigned char>(a1, a2);
    nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(a1, a2);
  }
  return a1;
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[3];
  unint64_t v6 = (v5 - v4) >> 3;
  unint64_t v7 = (void *)a2[2];
  if (v6 != (uint64_t)(a2[3] - (void)v7) >> 3) {
    goto LABEL_13;
  }
  if (v5 == v4) {
    return;
  }
  uint64_t v8 = v6 <= 1 ? 1 : (v5 - v4) >> 3;
  if (*(void *)v4 != *v7) {
    goto LABEL_13;
  }
  uint64_t v9 = 1;
  do
  {
    unint64_t v10 = v9;
    if (v8 == v9) {
      break;
    }
    uint64_t v11 = *(void *)&v4[8 * v9];
    uint64_t v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6) {
LABEL_13:
  }
    nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator()();
  int64_t v13 = v5 - v4;
  if (v5 == v4 || !*a1) {
    return;
  }
  if ((unint64_t)(v13 - 8) < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (char *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *(void *)v15;
      v15 += 8;
      v14 *= v21;
    }
    while (v15 != v5);
    goto LABEL_21;
  }
  unint64_t v16 = ((unint64_t)(v13 - 8) >> 3) + 1;
  std::locale v15 = &v4[8 * (v16 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v17 = v4 + 8;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  unint64_t v22 = v13 >> 3;
  if (v13 >> 3 == 3)
  {
    unint64_t v35 = *(void *)v4;
    if (*(void *)v4)
    {
      unint64_t v36 = 0;
      uint64_t v37 = a2[8];
      uint64_t v38 = a1[8];
      do
      {
        if (*((void *)v4 + 1))
        {
          unint64_t v39 = 0;
          uint64_t v40 = v37;
          uint64_t v41 = v38;
          do
          {
            if (*((void *)v4 + 2))
            {
              unint64_t v44 = 0;
              uint64_t v45 = v40;
              uint64_t v46 = v41;
              do
              {
                *(unsigned char *)(*a1 + v46) -= *(unsigned char *)(*a2 + v45);
                uint64_t v42 = (void *)a1[5];
                v46 += v42[2];
                uint64_t v43 = (void *)a2[5];
                v45 += v43[2];
                ++v44;
                uint64_t v4 = (char *)a1[2];
              }
              while (v44 < *((void *)v4 + 2));
            }
            else
            {
              uint64_t v42 = (void *)a1[5];
              uint64_t v43 = (void *)a2[5];
            }
            v41 += v42[1];
            v40 += v43[1];
            ++v39;
          }
          while (v39 < *((void *)v4 + 1));
          unint64_t v35 = *(void *)v4;
        }
        else
        {
          uint64_t v42 = (void *)a1[5];
          uint64_t v43 = (void *)a2[5];
        }
        v38 += *v42;
        v37 += *v43;
        ++v36;
      }
      while (v36 < v35);
    }
  }
  else
  {
    if (v22 != 2)
    {
      if (v22 == 1)
      {
        if (*(void *)v4)
        {
          unint64_t v23 = 0;
          uint64_t v24 = a2[8];
          uint64_t v25 = a1[8];
          do
          {
            *(unsigned char *)(*a1 + v25) -= *(unsigned char *)(*a2 + v24);
            v25 += *(void *)a1[5];
            v24 += *(void *)a2[5];
            ++v23;
          }
          while (v23 < *(void *)a1[2]);
        }
        return;
      }
      if (v13 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v47 = operator new(v13);
      bzero(v47, v13 & 0xFFFFFFFFFFFFFFF8);
      if (v22 <= 1) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v13 >> 3;
      }
      unint64_t v49 = v48 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        uint64_t v50 = a1[5];
        if (v48 < 2) {
          break;
        }
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        uint64_t v55 = (void *)(v50 + 8);
        unint64_t v56 = v48 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v57 = v47 + 1;
        do
        {
          v53 += *(v55 - 1) * *(v57 - 1);
          v54 += *v55 * *v57;
          v57 += 2;
          v55 += 2;
          v56 -= 2;
        }
        while (v56);
        uint64_t v51 = v54 + v53;
        unint64_t v52 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49) {
          goto LABEL_60;
        }
LABEL_62:
        uint64_t v65 = a2[5];
        if (v48 < 2)
        {
          uint64_t v66 = 0;
          unint64_t v67 = 0;
LABEL_67:
          unint64_t v73 = v48 - v67;
          uint64_t v74 = v67;
          float32x4_t v75 = (uint64_t *)(v65 + v74 * 8);
          uint64_t v76 = &v47[v74];
          do
          {
            uint64_t v78 = *v76++;
            uint64_t v77 = v78;
            uint64_t v79 = *v75++;
            v66 += v79 * v77;
            --v73;
          }
          while (v73);
          goto LABEL_69;
        }
        uint64_t v68 = 0;
        uint64_t v69 = 0;
        float32x4_t v70 = (void *)(v65 + 8);
        unint64_t v71 = v48 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v72 = v47 + 1;
        do
        {
          v68 += *(v70 - 1) * *(v72 - 1);
          v69 += *v70 * *v72;
          v72 += 2;
          v70 += 2;
          v71 -= 2;
        }
        while (v71);
        uint64_t v66 = v69 + v68;
        unint64_t v67 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49) {
          goto LABEL_67;
        }
LABEL_69:
        *(unsigned char *)(*a1 + v51) -= *(unsigned char *)(*a2 + a2[8] + v66);
        if ((int)((unint64_t)v13 >> 3) >= 1)
        {
          uint64_t v80 = a1[2];
          uint64_t v81 = ((unint64_t)v13 >> 3) + 1;
          unint64_t v82 = (unint64_t)v13 >> 3;
          while (1)
          {
            uint64_t v83 = (v81 - 2);
            unint64_t v84 = v47[v83] + 1;
            v47[v83] = v84;
            if (v84 < *(void *)(v80 + v83 * 8)) {
              break;
            }
            v47[(v81 - 2)] = 0;
            LODWORD(v82) = v82 - 1;
            if ((unint64_t)--v81 <= 1) {
              goto LABEL_75;
            }
          }
          if ((int)v82 > 0) {
            continue;
          }
        }
LABEL_75:
        operator delete(v47);
        return;
      }
      uint64_t v51 = 0;
      unint64_t v52 = 0;
LABEL_60:
      unint64_t v58 = v48 - v52;
      uint64_t v59 = v52;
      uint64_t v60 = (uint64_t *)(v50 + v59 * 8);
      unint64_t v61 = &v47[v59];
      do
      {
        uint64_t v63 = *v61++;
        uint64_t v62 = v63;
        uint64_t v64 = *v60++;
        v51 += v64 * v62;
        --v58;
      }
      while (v58);
      goto LABEL_62;
    }
    unint64_t v26 = *(void *)v4;
    if (*(void *)v4)
    {
      unint64_t v27 = 0;
      uint64_t v28 = a2[8];
      uint64_t v29 = a1[8];
      do
      {
        if (*((void *)v4 + 1))
        {
          unint64_t v32 = 0;
          uint64_t v33 = v28;
          uint64_t v34 = v29;
          do
          {
            *(unsigned char *)(*a1 + v34) -= *(unsigned char *)(*a2 + v33);
            uint64_t v30 = (void *)a1[5];
            v34 += v30[1];
            unint64_t v31 = (void *)a2[5];
            v33 += v31[1];
            ++v32;
            uint64_t v4 = (char *)a1[2];
          }
          while (v32 < *((void *)v4 + 1));
          unint64_t v26 = *(void *)v4;
        }
        else
        {
          uint64_t v30 = (void *)a1[5];
          unint64_t v31 = (void *)a2[5];
        }
        v29 += *v30;
        v28 += *v31;
        ++v27;
      }
      while (v27 < v26);
    }
  }
}

void sub_19256BB8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::operator-<unsigned char>(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  uint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      unint64_t v39 = 0;
      uint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        uint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        unint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      unint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      unint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        uint64_t v37 = v20;
        memcpy(v19, v17, v18);
        unint64_t v36 = v20;
      }
      unint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        unint64_t v22 = &v21[8 * v10];
        unint64_t v32 = v21;
        uint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      unint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      unint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v26 = (char *)operator new(v23 - v24);
        unint64_t v27 = &v26[8 * (v25 >> 3)];
        uint64_t v29 = v26;
        unint64_t v31 = v27;
        memcpy(v26, v24, v25);
        uint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<unsigned char>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<unsigned char>::copy(&v28);
    }
  }
  nitro::ndarray<unsigned char>::copy(a1);
}

void sub_19256BF10(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_19256BF24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      uint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  uint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    uint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  uint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_19256BFC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x19256BF9CLL);
  }
  JUMPOUT(0x19256BF6CLL);
}

void sub_19256BFD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x19256BFACLL);
  }
  JUMPOUT(0x19256BF74);
}

void sub_19256BFE0()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x19256BF84);
  }
  JUMPOUT(0x19256BF7CLL);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19256C27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19256C404(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19256C418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19256C410);
}

uint64_t *nitro::ndarray<int>::operator-=<unsigned char>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    unint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  unint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    std::locale v15 = (void *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<int>::operator-<unsigned char>(a1, a2);
    nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(a1, a2);
  }
  return a1;
}

uint32x4_t nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (unint64_t *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return result;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return result;
  }
  uint64_t v13 = *a1;
  if (!*a1) {
    return result;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v16 = ((v12 - 8) >> 3) + 1;
  std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v17 = v4 + 1;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return result;
  }
  uint64_t v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v186 = *v4;
    if (!*v4) {
      return result;
    }
    uint64_t v81 = 0;
    uint64_t v82 = a2[8];
    uint64_t v83 = a1[8];
    unint64_t v84 = v4[1];
    uint64_t v85 = (uint64_t *)a1[5];
    unint64_t v182 = (uint64_t *)a2[5];
    uint64_t v183 = v83;
    uint64_t v184 = *v182;
    uint64_t v185 = *v85;
    uint64_t v187 = 4 * *v85;
    uint64_t v181 = 4 * v83;
    unint64_t v86 = (uint32x4_t *)(v13 + 4 * v83);
    while (!v84)
    {
LABEL_64:
      v83 += v185;
      v82 += v184;
      ++v81;
      unint64_t v86 = (uint32x4_t *)((char *)v86 + v187);
      if (v81 == v186) {
        return result;
      }
    }
    uint64_t v87 = 0;
    unint64_t v88 = v4[2];
    uint64_t v89 = *a2;
    uint64_t v90 = a2[5];
    uint64_t v91 = v85[1];
    uint64_t v92 = 4 * v91;
    uint64_t v93 = v182[1];
    unint64_t v189 = v88 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v94 = v88 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v95 = v86;
    uint64_t v96 = *a2;
    uint64_t v97 = v82;
    uint64_t v98 = v83;
    while (!v88)
    {
LABEL_67:
      v98 += v91;
      v97 += v93;
      ++v87;
      v96 += v93;
      uint64_t v95 = (uint32x4_t *)((char *)v95 + v92);
      if (v87 == v84) {
        goto LABEL_64;
      }
    }
    uint64_t v99 = v85[2];
    uint64_t v100 = *(void *)(v90 + 16);
    if (v88 < 8
      || (v99 == 1 ? (BOOL v101 = v100 == 1) : (BOOL v101 = 0),
          !v101
       || (v13 + v181 + v187 * v81 + v92 * v87 < v89 + v88 + v82 + v93 * v87
         ? (BOOL v102 = v89 + v97 >= v13 + v187 * v81 + 4 * (v183 + v88) + v92 * v87)
         : (BOOL v102 = 1),
           !v102)))
    {
      unint64_t v112 = 0;
      uint64_t v104 = v97;
      uint64_t v108 = v98;
      goto LABEL_87;
    }
    if (v88 >= 0x10)
    {
      uint64_t v117 = v95;
      uint64_t v118 = v96;
      unint64_t v119 = v88 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        uint8x16_t v120 = *(uint8x16_t *)(v118 + v82);
        uint16x8_t v121 = vmovl_high_u8(v120);
        uint16x8_t v122 = vmovl_u8(*(uint8x8_t *)v120.i8);
        uint32x4_t v123 = vsubw_u16(*v117, *(uint16x4_t *)v122.i8);
        uint32x4_t result = vsubw_high_u16(v117[1], v122);
        uint32x4_t v124 = vsubw_u16(v117[2], *(uint16x4_t *)v121.i8);
        uint32x4_t v125 = vsubw_high_u16(v117[3], v121);
        v117[2] = v124;
        v117[3] = v125;
        *uint64_t v117 = v123;
        v117[1] = result;
        v117 += 4;
        v118 += 16;
        v119 -= 16;
      }
      while (v119);
      if (v88 == v189) {
        goto LABEL_67;
      }
      unint64_t v103 = v88 & 0xFFFFFFFFFFFFFFF0;
      if ((v88 & 8) == 0)
      {
        uint64_t v108 = v98 + v189 * v99;
        unint64_t v112 = v88 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v104 = v97 + v189 * v100;
LABEL_87:
        unint64_t v113 = v88 - v112;
        uint64_t v114 = (unsigned __int8 *)(v89 + v104);
        uint64_t v115 = 4 * v99;
        uint64_t v116 = (_DWORD *)(v13 + 4 * v108);
        do
        {
          *v116 -= *v114;
          v114 += v100;
          uint64_t v116 = (_DWORD *)((char *)v116 + v115);
          --v113;
        }
        while (v113);
        goto LABEL_67;
      }
    }
    else
    {
      unint64_t v103 = 0;
    }
    uint64_t v104 = v97 + v94 * v100;
    unint64_t v105 = v103 - (v88 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v106 = v82 + v103;
    uint64_t v107 = 4 * v103;
    uint64_t v108 = v98 + v94 * v99;
    do
    {
      unint64_t v109 = (uint32x4_t *)((char *)v95 + v107);
      uint16x8_t v110 = vmovl_u8(*(uint8x8_t *)(v96 + v106));
      uint32x4_t v111 = vsubw_u16(*(uint32x4_t *)((char *)v95 + v107), *(uint16x4_t *)v110.i8);
      uint32x4_t result = vsubw_high_u16(*(uint32x4_t *)((char *)&v95[1] + v107), v110);
      *unint64_t v109 = v111;
      v109[1] = result;
      v106 += 8;
      v107 += 32;
      v105 += 8;
    }
    while (v105);
    unint64_t v112 = v88 & 0xFFFFFFFFFFFFFFF8;
    if (v88 == v94) {
      goto LABEL_67;
    }
    goto LABEL_87;
  }
  if (v22 == 2)
  {
    unint64_t v36 = *v4;
    if (!*v4) {
      return result;
    }
    uint64_t v37 = 0;
    uint64_t v38 = a2[8];
    uint64_t v39 = a1[8];
    unint64_t v40 = v4[1];
    uint64_t v41 = *a2;
    uint64_t v42 = (uint64_t *)a2[5];
    uint64_t v43 = (uint64_t *)a1[5];
    uint64_t v44 = *v43;
    uint64_t v45 = 4 * *v43;
    uint64_t v46 = *v42;
    uint64_t v47 = v38 + v40;
    unint64_t v48 = v40 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v49 = v40 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v50 = (uint32x4_t *)(v13 + 4 * v39);
    uint64_t v51 = v13 + 4 * (v39 + v40);
    unint64_t v52 = v50;
    while (!v40)
    {
LABEL_34:
      v39 += v44;
      v38 += v46;
      ++v37;
      unint64_t v52 = (uint32x4_t *)((char *)v52 + v45);
      if (v37 == v36) {
        return result;
      }
    }
    uint64_t v53 = v43[1];
    uint64_t v54 = v42[1];
    if (v40 < 8
      || (v53 == 1 ? (BOOL v55 = v54 == 1) : (BOOL v55 = 0),
          !v55
       || ((unint64_t)v50->u64 + v45 * v37 < v41 + v47 + v46 * v37
         ? (BOOL v56 = v41 + v38 >= (unint64_t)(v51 + v45 * v37))
         : (BOOL v56 = 1),
           !v56)))
    {
      unint64_t v67 = 0;
      uint64_t v58 = v38;
      uint64_t v62 = v39;
      goto LABEL_54;
    }
    if (v40 >= 0x10)
    {
      uint64_t v72 = v52;
      uint64_t v73 = v41;
      unint64_t v74 = v40 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        uint8x16_t v75 = *(uint8x16_t *)(v73 + v38);
        uint16x8_t v76 = vmovl_high_u8(v75);
        uint16x8_t v77 = vmovl_u8(*(uint8x8_t *)v75.i8);
        uint32x4_t v78 = vsubw_u16(*v72, *(uint16x4_t *)v77.i8);
        uint32x4_t result = vsubw_high_u16(v72[1], v77);
        uint32x4_t v79 = vsubw_u16(v72[2], *(uint16x4_t *)v76.i8);
        uint32x4_t v80 = vsubw_high_u16(v72[3], v76);
        void v72[2] = v79;
        v72[3] = v80;
        *uint64_t v72 = v78;
        v72[1] = result;
        v72 += 4;
        v73 += 16;
        v74 -= 16;
      }
      while (v74);
      if (v40 == v48) {
        goto LABEL_34;
      }
      unint64_t v57 = v40 & 0xFFFFFFFFFFFFFFF0;
      if ((v40 & 8) == 0)
      {
        uint64_t v62 = v39 + v48 * v53;
        unint64_t v67 = v40 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v58 = v38 + v48 * v54;
LABEL_54:
        unint64_t v68 = v40 - v67;
        uint64_t v69 = (unsigned __int8 *)(v41 + v58);
        uint64_t v70 = 4 * v53;
        unint64_t v71 = (_DWORD *)(v13 + 4 * v62);
        do
        {
          *v71 -= *v69;
          v69 += v54;
          unint64_t v71 = (_DWORD *)((char *)v71 + v70);
          --v68;
        }
        while (v68);
        goto LABEL_34;
      }
    }
    else
    {
      unint64_t v57 = 0;
    }
    uint64_t v58 = v38 + v49 * v54;
    unint64_t v59 = v57 - (v40 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v60 = v41 + v57;
    uint64_t v61 = 4 * v57;
    uint64_t v62 = v39 + v49 * v53;
    do
    {
      uint64_t v63 = (uint32x4_t *)((char *)v52 + v61);
      uint16x8_t v64 = vmovl_u8(*(uint8x8_t *)(v60 + v38));
      uint32x4_t v65 = vsubw_u16(*(uint32x4_t *)((char *)v52 + v61), *(uint16x4_t *)v64.i8);
      uint32x4_t result = vsubw_high_u16(*(uint32x4_t *)((char *)&v52[1] + v61), v64);
      *uint64_t v63 = v65;
      v63[1] = result;
      v60 += 8;
      v61 += 32;
      v59 += 8;
    }
    while (v59);
    unint64_t v67 = v40 & 0xFFFFFFFFFFFFFFF8;
    if (v40 == v49) {
      goto LABEL_34;
    }
    goto LABEL_54;
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v126 = operator new(v12);
    bzero(v126, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v127 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v128 = 1;
    }
    else {
      unint64_t v128 = v12 >> 3;
    }
    uint64_t v129 = a2[5];
    uint64_t v130 = a2[8];
    uint64_t v131 = v128 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v132 = a1[5];
    while (v128 >= 2)
    {
      uint64_t v135 = 0;
      uint64_t v136 = 0;
      uint64_t v137 = v128 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v138 = (void *)(v132 + 8);
      uint64_t v139 = v126 + 1;
      do
      {
        v135 += *(v138 - 1) * *(v139 - 1);
        v136 += *v138 * *v139;
        v139 += 2;
        v138 += 2;
        v137 -= 2;
      }
      while (v137);
      uint64_t v133 = v136 + v135;
      uint64_t v134 = v128 & 0x1FFFFFFFFFFFFFFELL;
      if (v128 != v131) {
        goto LABEL_105;
      }
LABEL_107:
      if (v128 < 2)
      {
        uint64_t v147 = 0;
        uint64_t v148 = 0;
LABEL_112:
        unint64_t v154 = v128 - v148;
        uint64_t v155 = v148;
        uint64_t v156 = (uint64_t *)(v129 + 8 * v148);
        uint64_t v157 = &v126[v155];
        do
        {
          uint64_t v159 = *v157++;
          uint64_t v158 = v159;
          uint64_t v160 = *v156++;
          v147 += v160 * v158;
          --v154;
        }
        while (v154);
        goto LABEL_114;
      }
      uint64_t v149 = 0;
      uint64_t v150 = 0;
      uint64_t v151 = v128 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v152 = (void *)(v129 + 8);
      uint64_t v153 = v126 + 1;
      do
      {
        v149 += *(v152 - 1) * *(v153 - 1);
        v150 += *v152 * *v153;
        v153 += 2;
        v152 += 2;
        v151 -= 2;
      }
      while (v151);
      uint64_t v147 = v150 + v149;
      uint64_t v148 = v128 & 0x1FFFFFFFFFFFFFFELL;
      if (v128 != v131) {
        goto LABEL_112;
      }
LABEL_114:
      *(_DWORD *)(v13 + 4 * v133) -= *(unsigned __int8 *)(v127 + v130 + v147);
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v161 = (v12 >> 3) + 1;
        int v162 = v12 >> 3;
        while (1)
        {
          uint64_t v163 = (v161 - 2);
          unint64_t v164 = v126[v163] + 1;
          v126[v163] = v164;
          if (v164 < v4[v163]) {
            break;
          }
          v126[(v161 - 2)] = 0;
          --v162;
          if ((unint64_t)--v161 <= 1) {
            goto LABEL_120;
          }
        }
        if (v162 > 0) {
          continue;
        }
      }
LABEL_120:
      operator delete(v126);
      return result;
    }
    uint64_t v133 = 0;
    uint64_t v134 = 0;
LABEL_105:
    unint64_t v140 = v128 - v134;
    uint64_t v141 = v134;
    uint64_t v142 = (uint64_t *)(v132 + 8 * v134);
    int v143 = &v126[v141];
    do
    {
      uint64_t v145 = *v143++;
      uint64_t v144 = v145;
      uint64_t v146 = *v142++;
      v133 += v146 * v144;
      --v140;
    }
    while (v140);
    goto LABEL_107;
  }
  unint64_t v23 = *v4;
  if (!*v4) {
    return result;
  }
  uint64_t v24 = a2[8];
  uint64_t v25 = a1[8];
  uint64_t v26 = *a2;
  uint64_t v27 = *(void *)a1[5];
  uint64_t v28 = *(void *)a2[5];
  if (v23 < 8) {
    goto LABEL_27;
  }
  unint64_t v29 = 0;
  if (v27 != 1 || v28 != 1) {
    goto LABEL_28;
  }
  if (v13 + 4 * v25 < v26 + v23 + v24 && v26 + v24 < v13 + 4 * (v23 + v25))
  {
LABEL_27:
    unint64_t v29 = 0;
LABEL_28:
    uint64_t v30 = a2[8];
    uint64_t v31 = a1[8];
    goto LABEL_29;
  }
  if (v23 >= 0x10)
  {
    unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF0;
    float16x8_t v172 = (uint8x16_t *)(v26 + v24);
    float16x8_t v173 = (uint32x4_t *)(v13 + 4 * v25);
    unint64_t v174 = v23 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      uint8x16_t v175 = *v172++;
      uint16x8_t v176 = vmovl_high_u8(v175);
      uint16x8_t v177 = vmovl_u8(*(uint8x8_t *)v175.i8);
      uint32x4_t v178 = vsubw_u16(*v173, *(uint16x4_t *)v177.i8);
      uint32x4_t result = vsubw_high_u16(v173[1], v177);
      uint32x4_t v179 = vsubw_u16(v173[2], *(uint16x4_t *)v176.i8);
      uint32x4_t v180 = vsubw_high_u16(v173[3], v176);
      v173[2] = v179;
      v173[3] = v180;
      *float16x8_t v173 = v178;
      v173[1] = result;
      v173 += 4;
      v174 -= 16;
    }
    while (v174);
    if (v23 == v29) {
      return result;
    }
    if ((v23 & 8) == 0)
    {
      uint64_t v31 = v25 + v29;
      uint64_t v30 = v24 + v29;
LABEL_29:
      unint64_t v32 = v23 - v29;
      uint64_t v33 = (unsigned __int8 *)(v26 + v30);
      uint64_t v34 = 4 * v27;
      unint64_t v35 = (_DWORD *)(v13 + 4 * v31);
      do
      {
        *v35 -= *v33;
        v33 += v28;
        unint64_t v35 = (_DWORD *)((char *)v35 + v34);
        --v32;
      }
      while (v32);
      return result;
    }
  }
  else
  {
    unint64_t v29 = 0;
  }
  unint64_t v165 = v29;
  unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v30 = v24 + (v23 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v31 = v25 + (v23 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v166 = v165 - (v23 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v167 = (uint8x8_t *)(v26 + v165 + v24);
  float32x4_t v168 = (uint32x4_t *)(v13 + 4 * (v165 + v25));
  do
  {
    uint8x8_t v169 = *v167++;
    uint16x8_t v170 = vmovl_u8(v169);
    uint32x4_t v171 = vsubw_u16(*v168, *(uint16x4_t *)v170.i8);
    uint32x4_t result = vsubw_high_u16(v168[1], v170);
    uint32x4_t *v168 = v171;
    v168[1] = result;
    v168 += 2;
    v166 += 8;
  }
  while (v166);
  if (v23 != v29) {
    goto LABEL_29;
  }
  return result;
}

void sub_19256CE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::operator-<unsigned char>(void *a1, void *a2)
{
  unint64_t v5 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      unint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        unint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        uint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      unint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      unint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        uint64_t v37 = v20;
        memcpy(v19, v17, v18);
        unint64_t v36 = v20;
      }
      unint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        uint64_t v22 = &v21[8 * v10];
        unint64_t v32 = v21;
        uint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      unint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      unint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        unint64_t v29 = v26;
        uint64_t v31 = v27;
        memcpy(v26, v24, v25);
        uint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<int>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<int>::copy(&v28);
    }
  }
  nitro::ndarray<int>::copy(a1);
}

void sub_19256D218(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_19256D22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      unint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  unint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    uint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  uint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_19256D2C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x19256D2A4);
  }
  JUMPOUT(0x19256D274);
}

void sub_19256D2D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x19256D2B4);
  }
  JUMPOUT(0x19256D27CLL);
}

void sub_19256D2E8()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x19256D28CLL);
  }
  JUMPOUT(0x19256D284);
}

void nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19256D584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19256D70C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19256D720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19256D718);
}

uint64_t *nitro::ndarray<half>::operator-=<unsigned char>(uint64_t *a1, uint64_t *a2, float a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  uint64_t v8 = (char *)a1[2];
  unint64_t v9 = (char *)a1[3];
  uint64_t v10 = v9 - v8;
  if (v9 == v8 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v10 - 8) < 8)
  {
    uint64_t v11 = 1;
    uint64_t v12 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v18 = *(void *)v12;
      v12 += 8;
      v11 *= v18;
    }
    while (v12 != v9);
    goto LABEL_9;
  }
  unint64_t v13 = ((unint64_t)(v10 - 8) >> 3) + 1;
  uint64_t v12 = &v8[8 * (v13 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v14 = v8 + 8;
  uint64_t v15 = 1;
  uint64_t v16 = v13 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v17 = 1;
  do
  {
    v15 *= *(v14 - 1);
    v17 *= *v14;
    v14 += 2;
    v16 -= 2;
  }
  while (v16);
  uint64_t v11 = v17 * v15;
  if (v13 != (v13 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v11)
  {
    unint64_t v19 = v10 >> 3;
    uint64_t v20 = (void *)a2[2];
    if (v19 != (a2[3] - (uint64_t)v20) >> 3) {
      goto LABEL_19;
    }
    uint64_t v21 = v19 <= 1 ? 1 : v19;
    if (*(void *)v8 != *v20) {
      goto LABEL_19;
    }
    uint64_t v22 = 1;
    do
    {
      unint64_t v23 = v22;
      if (v21 == v22) {
        break;
      }
      uint64_t v24 = *(void *)&v8[8 * v22];
      uint64_t v25 = v20[v22++];
    }
    while (v24 == v25);
    if (v23 < v19) {
LABEL_19:
    }
      nitro::ndarray<half>::operator-<unsigned char>(a1, a2);
    nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(a1, a2, a3, a4, a5, a6, a7);
  }
  return a1;
}

void nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(uint64_t *a1, uint64_t *a2, float _S0, double a4, int8x16_t a5, double a6, int8x16_t _Q4)
{
  unint64_t v9 = (unint64_t *)a1[2];
  uint64_t v8 = (char *)a1[3];
  unint64_t v10 = (v8 - (char *)v9) >> 3;
  uint64_t v11 = (void *)a2[2];
  if (v10 != (a2[3] - (uint64_t)v11) >> 3) {
    goto LABEL_13;
  }
  if (v8 == (char *)v9) {
    return;
  }
  uint64_t v12 = v10 <= 1 ? 1 : (v8 - (char *)v9) >> 3;
  if (*v9 != *v11) {
    goto LABEL_13;
  }
  uint64_t v13 = 1;
  do
  {
    unint64_t v14 = v13;
    if (v12 == v13) {
      break;
    }
    unint64_t v15 = v9[v13];
    uint64_t v16 = v11[v13++];
  }
  while (v15 == v16);
  if (v14 < v10) {
LABEL_13:
  }
    nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1})::{lambda(void)#1}::operator()();
  size_t v17 = v8 - (char *)v9;
  if (v8 == (char *)v9) {
    return;
  }
  uint64_t v18 = *a1;
  if (!*a1) {
    return;
  }
  if (v17 - 8 < 8)
  {
    uint64_t v19 = 1;
    uint64_t v20 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v26 = *v20++;
      v19 *= v26;
    }
    while (v20 != (unint64_t *)v8);
    goto LABEL_21;
  }
  unint64_t v21 = ((v17 - 8) >> 3) + 1;
  uint64_t v20 = &v9[v21 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v22 = v9 + 1;
  uint64_t v23 = 1;
  uint64_t v24 = v21 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v25 = 1;
  do
  {
    v23 *= *(v22 - 1);
    v25 *= *v22;
    v22 += 2;
    v24 -= 2;
  }
  while (v24);
  uint64_t v19 = v25 * v23;
  if (v21 != (v21 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v19) {
    return;
  }
  uint64_t v27 = (uint64_t)v17 >> 3;
  if ((uint64_t)v17 >> 3 == 3)
  {
    unint64_t v184 = *v9;
    if (!*v9) {
      return;
    }
    uint64_t v85 = 0;
    uint64_t v86 = a2[8];
    uint64_t v87 = a1[8];
    unint64_t v88 = v9[1];
    uint64_t v89 = (uint64_t *)a1[5];
    uint32x4_t v180 = (uint64_t *)a2[5];
    uint64_t v182 = *v180;
    uint64_t v183 = *v89;
    uint64_t v185 = 2 * *v89;
    uint64_t v179 = 2 * v87;
    uint64_t v90 = (float16x4_t *)(v18 + 2 * v87);
    uint64_t v181 = v87;
    while (!v88)
    {
LABEL_64:
      v87 += v183;
      v86 += v182;
      ++v85;
      uint64_t v90 = (float16x4_t *)((char *)v90 + v185);
      if (v85 == v184) {
        return;
      }
    }
    uint64_t v91 = 0;
    unint64_t v92 = v9[2];
    uint64_t v93 = *a2;
    uint64_t v94 = a2[5];
    uint64_t v95 = v89[1];
    uint64_t v96 = 2 * v95;
    uint64_t v97 = v180[1];
    unint64_t v187 = v92 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v98 = v92 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v99 = v90;
    uint64_t v100 = *a2;
    uint64_t v101 = v86;
    uint64_t v102 = v87;
    while (!v92)
    {
LABEL_67:
      v102 += v95;
      v101 += v97;
      ++v91;
      v100 += v97;
      uint64_t v99 = (float16x4_t *)((char *)v99 + v96);
      if (v91 == v88) {
        goto LABEL_64;
      }
    }
    uint64_t v103 = v89[2];
    uint64_t v104 = *(void *)(v94 + 16);
    if (v92 < 8
      || (v103 == 1 ? (BOOL v105 = v104 == 1) : (BOOL v105 = 0),
          !v105
       || (v18 + v179 + v185 * v85 + v96 * v91 < v93 + v92 + v86 + v97 * v91
         ? (BOOL v106 = v93 + v101 >= v18 + v185 * v85 + 2 * (v181 + v92) + v96 * v91)
         : (BOOL v106 = 1),
           !v106)))
    {
      unint64_t v113 = 0;
      uint64_t v108 = v101;
      uint64_t v112 = v102;
      goto LABEL_87;
    }
    if (v92 >= 0x10)
    {
      uint8x16_t v120 = v99;
      uint64_t v121 = v100;
      unint64_t v122 = v92 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        int8x16_t v123 = *(int8x16_t *)(v121 + v86);
        uint32x4_t v124 = (uint32x4_t)vqtbl1q_s8(v123, (int8x16_t)xmmword_192DAD3F0);
        uint32x4_t v125 = (uint32x4_t)vqtbl1q_s8(v123, (int8x16_t)xmmword_192DAD3E0);
        _Q4 = (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(v120[2]), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v123, (int8x16_t)xmmword_192DAD400)))), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v120[2].i8), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v123, (int8x16_t)xmmword_192DAD410))));
        *(float16x8_t *)v120->i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(*v120), vcvtq_f32_u32(v125))), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v120->i8), vcvtq_f32_u32(v124)));
        *(int8x16_t *)v120[2].i8 = _Q4;
        v120 += 4;
        v121 += 16;
        v122 -= 16;
      }
      while (v122);
      if (v92 == v187) {
        goto LABEL_67;
      }
      unint64_t v107 = v92 & 0xFFFFFFFFFFFFFFF0;
      if ((v92 & 8) == 0)
      {
        uint64_t v112 = v102 + v187 * v103;
        unint64_t v113 = v92 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v108 = v101 + v187 * v104;
LABEL_87:
        unint64_t v114 = v92 - v113;
        uint64_t v115 = (unsigned __int8 *)(v93 + v108);
        uint64_t v116 = 2 * v103;
        uint64_t v117 = (__int16 *)(v18 + 2 * v112);
        do
        {
          _Q4.i8[0] = *v115;
          _H5 = *v117;
          __asm { FCVT            S5, H5 }
          *(float *)_Q4.i32 = _S5 - (float)_Q4.u32[0];
          __asm { FCVT            H4, S4 }
          *uint64_t v117 = _Q4.i16[0];
          v115 += v104;
          uint64_t v117 = (__int16 *)((char *)v117 + v116);
          --v114;
        }
        while (v114);
        goto LABEL_67;
      }
    }
    else
    {
      unint64_t v107 = 0;
    }
    uint64_t v108 = v101 + v98 * v104;
    unint64_t v109 = v107 - (v92 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v110 = v86 + v107;
    uint64_t v111 = 2 * v107;
    uint64_t v112 = v102 + v98 * v103;
    do
    {
      _Q4.i64[0] = *(void *)(v100 + v110);
      _Q4 = (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(*(float16x4_t *)((char *)v99 + v111)), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q4, (int8x16_t)xmmword_192DAD3E0)))), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)&v99->i8[v111]), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q4, (int8x16_t)xmmword_192DAD3F0))));
      *(int8x16_t *)&v99->i8[v111] = _Q4;
      v110 += 8;
      v111 += 16;
      v109 += 8;
    }
    while (v109);
    unint64_t v113 = v92 & 0xFFFFFFFFFFFFFFF8;
    if (v92 == v98) {
      goto LABEL_67;
    }
    goto LABEL_87;
  }
  if (v27 == 2)
  {
    unint64_t v45 = *v9;
    if (!*v9) {
      return;
    }
    uint64_t v46 = 0;
    uint64_t v47 = a2[8];
    uint64_t v48 = a1[8];
    unint64_t v49 = v9[1];
    uint64_t v50 = *a2;
    uint64_t v51 = (uint64_t *)a2[5];
    unint64_t v52 = (uint64_t *)a1[5];
    uint64_t v53 = *v52;
    uint64_t v54 = *v51;
    uint64_t v55 = 2 * *v52;
    uint64_t v56 = v47 + v49;
    unint64_t v57 = v49 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v58 = v49 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v59 = (float16x4_t *)(v18 + 2 * v48);
    uint64_t v60 = v18 + 2 * (v48 + v49);
    uint64_t v61 = v59;
    while (!v49)
    {
LABEL_34:
      v48 += v53;
      v47 += v54;
      ++v46;
      uint64_t v61 = (float16x4_t *)((char *)v61 + v55);
      if (v46 == v45) {
        return;
      }
    }
    uint64_t v62 = v52[1];
    uint64_t v63 = v51[1];
    if (v49 < 8
      || (v62 == 1 ? (_ZF = v63 == 1) : (_ZF = 0),
          !_ZF
       || ((unint64_t)v59 + v55 * v46 < v50 + v56 + v54 * v46
         ? (_CF = v50 + v47 >= (unint64_t)(v60 + v55 * v46))
         : (_CF = 1),
           !_CF)))
    {
      unint64_t v72 = 0;
      uint64_t v67 = v47;
      uint64_t v71 = v48;
      goto LABEL_54;
    }
    if (v49 >= 0x10)
    {
      uint32x4_t v79 = v61;
      uint64_t v80 = v50;
      unint64_t v81 = v49 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        int8x16_t v82 = *(int8x16_t *)(v80 + v47);
        uint32x4_t v83 = (uint32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_192DAD3F0);
        uint32x4_t v84 = (uint32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_192DAD3E0);
        _Q4 = (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(v79[2]), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_192DAD400)))), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v79[2].i8), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_192DAD410))));
        *(float16x8_t *)v79->i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(*v79), vcvtq_f32_u32(v84))), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v79->i8), vcvtq_f32_u32(v83)));
        *(int8x16_t *)v79[2].i8 = _Q4;
        v79 += 4;
        v80 += 16;
        v81 -= 16;
      }
      while (v81);
      if (v49 == v57) {
        goto LABEL_34;
      }
      unint64_t v66 = v49 & 0xFFFFFFFFFFFFFFF0;
      if ((v49 & 8) == 0)
      {
        uint64_t v71 = v48 + v57 * v62;
        unint64_t v72 = v49 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v67 = v47 + v57 * v63;
LABEL_54:
        unint64_t v73 = v49 - v72;
        unint64_t v74 = (unsigned __int8 *)(v50 + v67);
        uint64_t v75 = 2 * v62;
        uint16x8_t v76 = (__int16 *)(v18 + 2 * v71);
        do
        {
          _Q4.i8[0] = *v74;
          _H5 = *v76;
          __asm { FCVT            S5, H5 }
          *(float *)_Q4.i32 = _S5 - (float)_Q4.u32[0];
          __asm { FCVT            H4, S4 }
          *uint16x8_t v76 = _Q4.i16[0];
          v74 += v63;
          uint16x8_t v76 = (__int16 *)((char *)v76 + v75);
          --v73;
        }
        while (v73);
        goto LABEL_34;
      }
    }
    else
    {
      unint64_t v66 = 0;
    }
    uint64_t v67 = v47 + v58 * v63;
    unint64_t v68 = v66 - (v49 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v69 = v50 + v66;
    uint64_t v70 = 2 * v66;
    uint64_t v71 = v48 + v58 * v62;
    do
    {
      _Q4.i64[0] = *(void *)(v69 + v47);
      _Q4 = (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(*(float16x4_t *)((char *)v61 + v70)), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q4, (int8x16_t)xmmword_192DAD3E0)))), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)&v61->i8[v70]), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q4, (int8x16_t)xmmword_192DAD3F0))));
      *(int8x16_t *)&v61->i8[v70] = _Q4;
      v69 += 8;
      v70 += 16;
      v68 += 8;
    }
    while (v68);
    unint64_t v72 = v49 & 0xFFFFFFFFFFFFFFF8;
    if (v49 == v58) {
      goto LABEL_34;
    }
    goto LABEL_54;
  }
  if (v27 != 1)
  {
    if ((v17 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v126 = operator new(v17);
    bzero(v126, v17 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v128 = *a2;
    if (v17 >> 3 <= 1) {
      unint64_t v129 = 1;
    }
    else {
      unint64_t v129 = v17 >> 3;
    }
    uint64_t v130 = a2[5];
    uint64_t v131 = a2[8];
    uint64_t v132 = v129 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v133 = a1[5];
    while (v129 >= 2)
    {
      uint64_t v136 = 0;
      uint64_t v137 = 0;
      uint64_t v138 = v129 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v139 = (void *)(v133 + 8);
      unint64_t v140 = v126 + 1;
      do
      {
        v136 += *(v139 - 1) * *(v140 - 1);
        v137 += *v139 * *v140;
        v140 += 2;
        v139 += 2;
        v138 -= 2;
      }
      while (v138);
      uint64_t v134 = v137 + v136;
      uint64_t v135 = v129 & 0x1FFFFFFFFFFFFFFELL;
      if (v129 != v132) {
        goto LABEL_105;
      }
LABEL_107:
      if (v129 < 2)
      {
        uint64_t v148 = 0;
        uint64_t v149 = 0;
LABEL_112:
        unint64_t v155 = v129 - v149;
        uint64_t v156 = v149;
        uint64_t v157 = (uint64_t *)(v130 + 8 * v149);
        uint64_t v158 = &v126[v156];
        do
        {
          uint64_t v160 = *v158++;
          uint64_t v159 = v160;
          uint64_t v161 = *v157++;
          v148 += v161 * v159;
          --v155;
        }
        while (v155);
        goto LABEL_114;
      }
      uint64_t v150 = 0;
      uint64_t v151 = 0;
      uint64_t v152 = v129 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v153 = (void *)(v130 + 8);
      unint64_t v154 = v126 + 1;
      do
      {
        v150 += *(v153 - 1) * *(v154 - 1);
        v151 += *v153 * *v154;
        v154 += 2;
        v153 += 2;
        v152 -= 2;
      }
      while (v152);
      uint64_t v148 = v151 + v150;
      uint64_t v149 = v129 & 0x1FFFFFFFFFFFFFFELL;
      if (v129 != v132) {
        goto LABEL_112;
      }
LABEL_114:
      LOBYTE(_S0) = *(unsigned char *)(v128 + v131 + v148);
      uint64_t v162 = 2 * v134;
      _H1 = *(_WORD *)(v18 + v162);
      __asm { FCVT            S1, H1 }
      _S0 = _S1 - (float)LODWORD(_S0);
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v18 + v162) = LOWORD(_S0);
      if ((int)(v17 >> 3) >= 1)
      {
        uint64_t v165 = (v17 >> 3) + 1;
        int v166 = v17 >> 3;
        while (1)
        {
          uint64_t v167 = (v165 - 2);
          unint64_t v168 = v126[v167] + 1;
          v126[v167] = v168;
          if (v168 < v9[v167]) {
            break;
          }
          v126[(v165 - 2)] = 0;
          --v166;
          if ((unint64_t)--v165 <= 1) {
            goto LABEL_120;
          }
        }
        if (v166 > 0) {
          continue;
        }
      }
LABEL_120:
      operator delete(v126);
      return;
    }
    uint64_t v134 = 0;
    uint64_t v135 = 0;
LABEL_105:
    unint64_t v141 = v129 - v135;
    uint64_t v142 = v135;
    int v143 = (uint64_t *)(v133 + 8 * v135);
    uint64_t v144 = &v126[v142];
    do
    {
      uint64_t v146 = *v144++;
      uint64_t v145 = v146;
      uint64_t v147 = *v143++;
      v134 += v147 * v145;
      --v141;
    }
    while (v141);
    goto LABEL_107;
  }
  unint64_t v28 = *v9;
  if (!*v9) {
    return;
  }
  uint64_t v29 = a2[8];
  uint64_t v30 = a1[8];
  uint64_t v31 = *a2;
  uint64_t v32 = *(void *)a1[5];
  uint64_t v33 = *(void *)a2[5];
  if (v28 < 8) {
    goto LABEL_27;
  }
  unint64_t v34 = 0;
  if (v32 != 1 || v33 != 1) {
    goto LABEL_28;
  }
  if (v18 + 2 * v30 < v31 + v28 + v29 && v31 + v29 < v18 + 2 * (v28 + v30))
  {
LABEL_27:
    unint64_t v34 = 0;
LABEL_28:
    uint64_t v35 = a2[8];
    uint64_t v36 = a1[8];
    goto LABEL_29;
  }
  if (v28 >= 0x10)
  {
    unint64_t v34 = v28 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v174 = (int8x16_t *)(v31 + v29);
    uint8x16_t v175 = (float16x4_t *)(v18 + 2 * v30);
    _S0 = NAN;
    a5.i64[1] = 0xFFFFFF0FFFFFFF0ELL;
    unint64_t v176 = v28 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      int8x16_t v177 = *v174++;
      float16x8_t v178 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(v175[2]), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v177, (int8x16_t)xmmword_192DAD400)))), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v175[2].i8), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v177, (int8x16_t)xmmword_192DAD410))));
      *(float16x8_t *)v175->i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(*v175), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v177, (int8x16_t)xmmword_192DAD3E0)))), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v175->i8), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v177, (int8x16_t)xmmword_192DAD3F0))));
      *(float16x8_t *)v175[2].i8 = v178;
      v175 += 4;
      v176 -= 16;
    }
    while (v176);
    if (v28 == v34) {
      return;
    }
    if ((v28 & 8) == 0)
    {
      uint64_t v36 = v30 + v34;
      uint64_t v35 = v29 + v34;
LABEL_29:
      unint64_t v37 = v28 - v34;
      uint64_t v38 = (unsigned char *)(v31 + v35);
      uint64_t v39 = 2 * v32;
      unint64_t v40 = (__int16 *)(v18 + 2 * v36);
      do
      {
        LOBYTE(_S0) = *v38;
        _H1 = *v40;
        __asm { FCVT            S1, H1 }
        _S0 = _S1 - (float)LODWORD(_S0);
        __asm { FCVT            H0, S0 }
        *unint64_t v40 = LOWORD(_S0);
        v38 += v33;
        unint64_t v40 = (__int16 *)((char *)v40 + v39);
        --v37;
      }
      while (v37);
      return;
    }
  }
  else
  {
    unint64_t v34 = 0;
  }
  unint64_t v169 = v34;
  unint64_t v34 = v28 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v35 = v29 + (v28 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v36 = v30 + (v28 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v170 = v169 - (v28 & 0xFFFFFFFFFFFFFFF8);
  uint32x4_t v171 = (unint64_t *)(v31 + v169 + v29);
  float16x8_t v172 = (float16x4_t *)(v18 + 2 * (v169 + v30));
  _S0 = NAN;
  do
  {
    unint64_t v173 = *v171++;
    a5.i64[0] = v173;
    a5 = (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(*v172), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_192DAD3E0)))), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v172->i8), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_192DAD3F0))));
    *(int8x16_t *)v172->i8 = a5;
    v172 += 2;
    v170 += 8;
  }
  while (v170);
  if (v28 != v34) {
    goto LABEL_29;
  }
}

void sub_19256E310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::operator-<unsigned char>(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      unint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        unint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        uint64_t v39 = v40;
      }
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      unint64_t v37 = 0;
      size_t v17 = (unsigned char *)a1[5];
      uint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        uint64_t v35 = v19;
        unint64_t v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      unint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v21 = (char *)operator new(v9 - v8);
        uint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        unint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      uint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        uint64_t v29 = v26;
        uint64_t v31 = v27;
        memcpy(v26, v24, v25);
        uint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<half>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<half>::copy(&v28);
    }
  }
  nitro::ndarray<half>::copy(a1);
}

void sub_19256E694(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_19256E6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      uint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  uint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    uint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  uint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_19256E744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x19256E720);
  }
  JUMPOUT(0x19256E6F0);
}

void sub_19256E754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x19256E730);
  }
  JUMPOUT(0x19256E6F8);
}

void sub_19256E764()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x19256E708);
  }
  JUMPOUT(0x19256E700);
}

void nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19256EA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19256EB88(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19256EB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19256EB94);
}

uint64_t *nitro::ndarray<float>::operator-=<unsigned char>(uint64_t *a1, uint64_t *a2, float a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  uint64_t v8 = (char *)a1[2];
  unint64_t v9 = (char *)a1[3];
  uint64_t v10 = v9 - v8;
  if (v9 == v8 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v10 - 8) < 8)
  {
    uint64_t v11 = 1;
    uint64_t v12 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v18 = *(void *)v12;
      v12 += 8;
      v11 *= v18;
    }
    while (v12 != v9);
    goto LABEL_9;
  }
  unint64_t v13 = ((unint64_t)(v10 - 8) >> 3) + 1;
  uint64_t v12 = &v8[8 * (v13 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v14 = v8 + 8;
  uint64_t v15 = 1;
  uint64_t v16 = v13 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v17 = 1;
  do
  {
    v15 *= *(v14 - 1);
    v17 *= *v14;
    v14 += 2;
    v16 -= 2;
  }
  while (v16);
  uint64_t v11 = v17 * v15;
  if (v13 != (v13 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v11)
  {
    unint64_t v19 = v10 >> 3;
    uint64_t v20 = (void *)a2[2];
    if (v19 != (a2[3] - (uint64_t)v20) >> 3) {
      goto LABEL_19;
    }
    uint64_t v21 = v19 <= 1 ? 1 : v19;
    if (*(void *)v8 != *v20) {
      goto LABEL_19;
    }
    uint64_t v22 = 1;
    do
    {
      unint64_t v23 = v22;
      if (v21 == v22) {
        break;
      }
      uint64_t v24 = *(void *)&v8[8 * v22];
      uint64_t v25 = v20[v22++];
    }
    while (v24 == v25);
    if (v23 < v19) {
LABEL_19:
    }
      nitro::ndarray<float>::operator-<unsigned char>(a1, a2);
    nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(a1, a2, a3, a4, a5, a6, a7);
  }
  return a1;
}

void nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(uint64_t *a1, uint64_t *a2, float a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  unint64_t v9 = (unint64_t *)a1[2];
  uint64_t v8 = (char *)a1[3];
  unint64_t v10 = (v8 - (char *)v9) >> 3;
  uint64_t v11 = (void *)a2[2];
  if (v10 != (a2[3] - (uint64_t)v11) >> 3) {
    goto LABEL_13;
  }
  if (v8 == (char *)v9) {
    return;
  }
  uint64_t v12 = v10 <= 1 ? 1 : (v8 - (char *)v9) >> 3;
  if (*v9 != *v11) {
    goto LABEL_13;
  }
  uint64_t v13 = 1;
  do
  {
    unint64_t v14 = v13;
    if (v12 == v13) {
      break;
    }
    unint64_t v15 = v9[v13];
    uint64_t v16 = v11[v13++];
  }
  while (v15 == v16);
  if (v14 < v10) {
LABEL_13:
  }
    nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1})::{lambda(void)#1}::operator()();
  size_t v17 = v8 - (char *)v9;
  if (v8 == (char *)v9) {
    return;
  }
  uint64_t v18 = *a1;
  if (!*a1) {
    return;
  }
  if (v17 - 8 < 8)
  {
    uint64_t v19 = 1;
    uint64_t v20 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v26 = *v20++;
      v19 *= v26;
    }
    while (v20 != (unint64_t *)v8);
    goto LABEL_21;
  }
  unint64_t v21 = ((v17 - 8) >> 3) + 1;
  uint64_t v20 = &v9[v21 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v22 = v9 + 1;
  uint64_t v23 = 1;
  uint64_t v24 = v21 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v25 = 1;
  do
  {
    v23 *= *(v22 - 1);
    v25 *= *v22;
    v22 += 2;
    v24 -= 2;
  }
  while (v24);
  uint64_t v19 = v25 * v23;
  if (v21 != (v21 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v19) {
    return;
  }
  uint64_t v27 = (uint64_t)v17 >> 3;
  if ((uint64_t)v17 >> 3 == 3)
  {
    unint64_t v192 = *v9;
    if (!*v9) {
      return;
    }
    uint64_t v82 = 0;
    uint64_t v83 = a2[8];
    uint64_t v84 = a1[8];
    unint64_t v85 = v9[1];
    uint64_t v86 = (uint64_t *)a1[5];
    unint64_t v188 = (uint64_t *)a2[5];
    uint64_t v190 = *v188;
    uint64_t v191 = *v86;
    uint64_t v194 = 4 * *v86;
    uint64_t v187 = 4 * v84;
    uint64_t v87 = (float32x4_t *)(v18 + 4 * v84);
    uint64_t v189 = v84;
    while (!v85)
    {
LABEL_64:
      v84 += v191;
      v83 += v190;
      ++v82;
      uint64_t v87 = (float32x4_t *)((char *)v87 + v194);
      if (v82 == v192) {
        return;
      }
    }
    uint64_t v88 = 0;
    uint64_t v89 = v187 + v194 * v82;
    unint64_t v90 = v9[2];
    uint64_t v91 = *a2;
    uint64_t v92 = a2[5];
    uint64_t v93 = v86[1];
    uint64_t v94 = 4 * v93;
    uint64_t v95 = v194 * v82 + 4 * (v189 + v90);
    uint64_t v96 = v188[1];
    uint64_t v97 = v90 + v83;
    unint64_t v196 = v90 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v197 = v90 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v193 = v82;
    unint64_t v98 = v87;
    uint64_t v99 = *a2;
    uint64_t v100 = v83;
    uint64_t v101 = v84;
    while (!v90)
    {
LABEL_67:
      v101 += v93;
      v100 += v96;
      ++v88;
      v99 += v96;
      unint64_t v98 = (float32x4_t *)((char *)v98 + v94);
      if (v88 == v85) {
        goto LABEL_64;
      }
    }
    uint64_t v102 = v86[2];
    uint64_t v103 = *(void *)(v92 + 16);
    if (v90 < 8
      || (v102 == 1 ? (BOOL v104 = v103 == 1) : (BOOL v104 = 0),
          !v104
       || (v18 + v89 + v94 * v88 < (unint64_t)(v91 + v97 + v96 * v88)
         ? (BOOL v105 = v91 + v100 >= (unint64_t)(v18 + v95 + v94 * v88))
         : (BOOL v105 = 1),
           !v105)))
    {
      unint64_t v121 = 0;
      uint64_t v114 = v100;
      uint64_t v118 = v101;
      goto LABEL_87;
    }
    if (v90 >= 0x10)
    {
      uint64_t v126 = v98;
      uint64_t v127 = v99;
      unint64_t v128 = v90 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        int8x16_t v129 = *(int8x16_t *)(v127 + v83);
        float32x4_t v130 = *v126;
        float32x4_t v131 = vsubq_f32(v126[1], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_192DAD3F0)));
        float32x4_t v132 = vsubq_f32(v126[3], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_192DAD410)));
        v126[2] = vsubq_f32(v126[2], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_192DAD400)));
        v126[3] = v132;
        a7 = (int8x16_t)vsubq_f32(v130, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_192DAD3E0)));
        *uint64_t v126 = (float32x4_t)a7;
        v126[1] = v131;
        v126 += 4;
        v127 += 16;
        v128 -= 16;
      }
      while (v128);
      if (v90 == v197) {
        goto LABEL_67;
      }
      unint64_t v106 = v90 & 0xFFFFFFFFFFFFFFF0;
      if ((v90 & 8) == 0)
      {
        uint64_t v118 = v101 + v197 * v102;
        unint64_t v121 = v90 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v114 = v100 + v197 * v103;
LABEL_87:
        unint64_t v122 = v90 - v121;
        int8x16_t v123 = (unsigned __int8 *)(v91 + v114);
        uint64_t v124 = 4 * v102;
        uint32x4_t v125 = (float *)(v18 + 4 * v118);
        do
        {
          a7.i8[0] = *v123;
          *(float *)a7.i32 = *v125 - (float)a7.u32[0];
          *uint32x4_t v125 = *(float *)a7.i32;
          v123 += v103;
          uint32x4_t v125 = (float *)((char *)v125 + v124);
          --v122;
        }
        while (v122);
        goto LABEL_67;
      }
    }
    else
    {
      unint64_t v106 = 0;
    }
    uint64_t v107 = v84;
    uint64_t v108 = v87;
    uint64_t v109 = v97;
    uint64_t v110 = v9;
    uint64_t v111 = v18;
    uint64_t v112 = v95;
    uint64_t v113 = v89;
    uint64_t v114 = v100 + v196 * v103;
    unint64_t v115 = v106 - (v90 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v116 = v83 + v106;
    uint64_t v117 = 4 * v106;
    uint64_t v118 = v101 + v196 * v102;
    do
    {
      uint64_t v119 = (uint64_t)v98 + v117;
      a7.i64[0] = *(void *)(v99 + v116);
      float32x4_t v120 = vsubq_f32(*(float32x4_t *)((char *)v98 + v117 + 16), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_192DAD3F0)));
      a7 = (int8x16_t)vsubq_f32(*(float32x4_t *)((char *)v98 + v117), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_192DAD3E0)));
      *(int8x16_t *)uint64_t v119 = a7;
      *(float32x4_t *)(v119 + 16) = v120;
      v116 += 8;
      v117 += 32;
      v115 += 8;
    }
    while (v115);
    unint64_t v121 = v90 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v89 = v113;
    uint64_t v95 = v112;
    uint64_t v18 = v111;
    unint64_t v9 = v110;
    uint64_t v97 = v109;
    uint64_t v87 = v108;
    uint64_t v84 = v107;
    uint64_t v82 = v193;
    if (v90 == v196) {
      goto LABEL_67;
    }
    goto LABEL_87;
  }
  if (v27 == 2)
  {
    unint64_t v41 = *v9;
    if (!*v9) {
      return;
    }
    uint64_t v42 = 0;
    uint64_t v43 = a2[8];
    uint64_t v44 = a1[8];
    unint64_t v45 = v9[1];
    uint64_t v46 = *a2;
    uint64_t v47 = (uint64_t *)a2[5];
    uint64_t v48 = (uint64_t *)a1[5];
    uint64_t v49 = *v48;
    uint64_t v50 = *v47;
    uint64_t v51 = 4 * *v48;
    uint64_t v52 = v43 + v45;
    unint64_t v53 = v45 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v54 = v45 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v55 = (float32x4_t *)(v18 + 4 * v44);
    uint64_t v56 = v18 + 4 * (v44 + v45);
    unint64_t v57 = v55;
    while (!v45)
    {
LABEL_34:
      v44 += v49;
      v43 += v50;
      ++v42;
      unint64_t v57 = (float32x4_t *)((char *)v57 + v51);
      if (v42 == v41) {
        return;
      }
    }
    uint64_t v58 = v48[1];
    uint64_t v59 = v47[1];
    if (v45 < 8
      || (v58 == 1 ? (BOOL v60 = v59 == 1) : (BOOL v60 = 0),
          !v60
       || ((unint64_t)v55 + v51 * v42 < v46 + v52 + v50 * v42
         ? (BOOL v61 = v46 + v43 >= (unint64_t)(v56 + v51 * v42))
         : (BOOL v61 = 1),
           !v61)))
    {
      unint64_t v70 = 0;
      uint64_t v63 = v43;
      uint64_t v67 = v44;
      goto LABEL_54;
    }
    if (v45 >= 0x10)
    {
      uint64_t v75 = v57;
      uint64_t v76 = v46;
      unint64_t v77 = v45 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        int8x16_t v78 = *(int8x16_t *)(v76 + v43);
        float32x4_t v79 = *v75;
        float32x4_t v80 = vsubq_f32(v75[1], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_192DAD3F0)));
        float32x4_t v81 = vsubq_f32(v75[3], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_192DAD410)));
        v75[2] = vsubq_f32(v75[2], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_192DAD400)));
        v75[3] = v81;
        a7 = (int8x16_t)vsubq_f32(v79, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_192DAD3E0)));
        *uint64_t v75 = (float32x4_t)a7;
        v75[1] = v80;
        v75 += 4;
        v76 += 16;
        v77 -= 16;
      }
      while (v77);
      if (v45 == v53) {
        goto LABEL_34;
      }
      unint64_t v62 = v45 & 0xFFFFFFFFFFFFFFF0;
      if ((v45 & 8) == 0)
      {
        uint64_t v67 = v44 + v53 * v58;
        unint64_t v70 = v45 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v63 = v43 + v53 * v59;
LABEL_54:
        unint64_t v71 = v45 - v70;
        unint64_t v72 = (unsigned __int8 *)(v46 + v63);
        uint64_t v73 = 4 * v58;
        unint64_t v74 = (float *)(v18 + 4 * v67);
        do
        {
          a7.i8[0] = *v72;
          *(float *)a7.i32 = *v74 - (float)a7.u32[0];
          *unint64_t v74 = *(float *)a7.i32;
          v72 += v59;
          unint64_t v74 = (float *)((char *)v74 + v73);
          --v71;
        }
        while (v71);
        goto LABEL_34;
      }
    }
    else
    {
      unint64_t v62 = 0;
    }
    uint64_t v63 = v43 + v54 * v59;
    unint64_t v64 = v62 - (v45 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v65 = v46 + v62;
    uint64_t v66 = 4 * v62;
    uint64_t v67 = v44 + v54 * v58;
    do
    {
      uint64_t v68 = (uint64_t)v57 + v66;
      a7.i64[0] = *(void *)(v65 + v43);
      float32x4_t v69 = vsubq_f32(*(float32x4_t *)((char *)v57 + v66 + 16), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_192DAD3F0)));
      a7 = (int8x16_t)vsubq_f32(*(float32x4_t *)((char *)v57 + v66), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_192DAD3E0)));
      *(int8x16_t *)uint64_t v68 = a7;
      *(float32x4_t *)(v68 + 16) = v69;
      v65 += 8;
      v66 += 32;
      v64 += 8;
    }
    while (v64);
    unint64_t v70 = v45 & 0xFFFFFFFFFFFFFFF8;
    if (v45 == v54) {
      goto LABEL_34;
    }
    goto LABEL_54;
  }
  if (v27 != 1)
  {
    if ((v17 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v133 = operator new(v17);
    bzero(v133, v17 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v135 = *a2;
    if (v17 >> 3 <= 1) {
      unint64_t v136 = 1;
    }
    else {
      unint64_t v136 = v17 >> 3;
    }
    uint64_t v137 = a2[5];
    uint64_t v138 = a2[8];
    uint64_t v139 = v136 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v140 = a1[5];
    while (v136 >= 2)
    {
      uint64_t v143 = 0;
      uint64_t v144 = 0;
      uint64_t v145 = v136 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v146 = (void *)(v140 + 8);
      uint64_t v147 = v133 + 1;
      do
      {
        v143 += *(v146 - 1) * *(v147 - 1);
        v144 += *v146 * *v147;
        v147 += 2;
        v146 += 2;
        v145 -= 2;
      }
      while (v145);
      uint64_t v141 = v144 + v143;
      uint64_t v142 = v136 & 0x1FFFFFFFFFFFFFFELL;
      if (v136 != v139) {
        goto LABEL_105;
      }
LABEL_107:
      if (v136 < 2)
      {
        uint64_t v155 = 0;
        uint64_t v156 = 0;
LABEL_112:
        unint64_t v162 = v136 - v156;
        uint64_t v163 = v156;
        unint64_t v164 = (uint64_t *)(v137 + 8 * v156);
        uint64_t v165 = &v133[v163];
        do
        {
          uint64_t v167 = *v165++;
          uint64_t v166 = v167;
          uint64_t v168 = *v164++;
          v155 += v168 * v166;
          --v162;
        }
        while (v162);
        goto LABEL_114;
      }
      uint64_t v157 = 0;
      uint64_t v158 = 0;
      uint64_t v159 = v136 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v160 = (void *)(v137 + 8);
      uint64_t v161 = v133 + 1;
      do
      {
        v157 += *(v160 - 1) * *(v161 - 1);
        v158 += *v160 * *v161;
        v161 += 2;
        v160 += 2;
        v159 -= 2;
      }
      while (v159);
      uint64_t v155 = v158 + v157;
      uint64_t v156 = v136 & 0x1FFFFFFFFFFFFFFELL;
      if (v136 != v139) {
        goto LABEL_112;
      }
LABEL_114:
      LOBYTE(v134) = *(unsigned char *)(v135 + v138 + v155);
      uint64_t v169 = 4 * v141;
      float v134 = *(float *)(v18 + v169) - (float)LODWORD(v134);
      *(float *)(v18 + v169) = v134;
      if ((int)(v17 >> 3) >= 1)
      {
        uint64_t v170 = (v17 >> 3) + 1;
        int v171 = v17 >> 3;
        while (1)
        {
          uint64_t v172 = (v170 - 2);
          unint64_t v173 = v133[v172] + 1;
          v133[v172] = v173;
          if (v173 < v9[v172]) {
            break;
          }
          v133[(v170 - 2)] = 0;
          --v171;
          if ((unint64_t)--v170 <= 1) {
            goto LABEL_120;
          }
        }
        if (v171 > 0) {
          continue;
        }
      }
LABEL_120:
      operator delete(v133);
      return;
    }
    uint64_t v141 = 0;
    uint64_t v142 = 0;
LABEL_105:
    unint64_t v148 = v136 - v142;
    uint64_t v149 = v142;
    uint64_t v150 = (uint64_t *)(v140 + 8 * v142);
    uint64_t v151 = &v133[v149];
    do
    {
      uint64_t v153 = *v151++;
      uint64_t v152 = v153;
      uint64_t v154 = *v150++;
      v141 += v154 * v152;
      --v148;
    }
    while (v148);
    goto LABEL_107;
  }
  unint64_t v28 = *v9;
  if (!*v9) {
    return;
  }
  uint64_t v29 = a2[8];
  uint64_t v30 = a1[8];
  uint64_t v31 = *a2;
  uint64_t v32 = *(void *)a1[5];
  uint64_t v33 = *(void *)a2[5];
  if (v28 < 8) {
    goto LABEL_27;
  }
  unint64_t v34 = 0;
  if (v32 != 1 || v33 != 1) {
    goto LABEL_28;
  }
  if (v18 + 4 * v30 < v31 + v28 + v29 && v31 + v29 < v18 + 4 * (v28 + v30))
  {
LABEL_27:
    unint64_t v34 = 0;
LABEL_28:
    uint64_t v35 = a2[8];
    uint64_t v36 = a1[8];
    goto LABEL_29;
  }
  if (v28 >= 0x10)
  {
    unint64_t v34 = v28 & 0xFFFFFFFFFFFFFFF0;
    uint32x4_t v180 = (int8x16_t *)(v31 + v29);
    uint64_t v181 = (float32x4_t *)(v18 + 4 * v30);
    a3 = NAN;
    a5.i64[1] = 0xFFFFFF0FFFFFFF0ELL;
    unint64_t v182 = v28 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      int8x16_t v183 = *v180++;
      float32x4_t v184 = *v181;
      float32x4_t v185 = vsubq_f32(v181[1], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v183, (int8x16_t)xmmword_192DAD3F0)));
      float32x4_t v186 = vsubq_f32(v181[3], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v183, (int8x16_t)xmmword_192DAD410)));
      void v181[2] = vsubq_f32(v181[2], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v183, (int8x16_t)xmmword_192DAD400)));
      v181[3] = v186;
      float32x4_t *v181 = vsubq_f32(v184, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v183, (int8x16_t)xmmword_192DAD3E0)));
      v181[1] = v185;
      v181 += 4;
      v182 -= 16;
    }
    while (v182);
    if (v28 == v34) {
      return;
    }
    if ((v28 & 8) == 0)
    {
      uint64_t v36 = v30 + v34;
      uint64_t v35 = v29 + v34;
LABEL_29:
      unint64_t v37 = v28 - v34;
      uint64_t v38 = (unsigned char *)(v31 + v35);
      uint64_t v39 = 4 * v32;
      unint64_t v40 = (float *)(v18 + 4 * v36);
      do
      {
        LOBYTE(a3) = *v38;
        a3 = *v40 - (float)LODWORD(a3);
        *unint64_t v40 = a3;
        v38 += v33;
        unint64_t v40 = (float *)((char *)v40 + v39);
        --v37;
      }
      while (v37);
      return;
    }
  }
  else
  {
    unint64_t v34 = 0;
  }
  unint64_t v174 = v34;
  unint64_t v34 = v28 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v35 = v29 + (v28 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v36 = v30 + (v28 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v175 = v174 - (v28 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v176 = (unint64_t *)(v31 + v174 + v29);
  int8x16_t v177 = (float32x4_t *)(v18 + 4 * (v174 + v30));
  a3 = NAN;
  do
  {
    unint64_t v178 = *v176++;
    a5.i64[0] = v178;
    float32x4_t v179 = vsubq_f32(v177[1], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_192DAD3F0)));
    a5 = (int8x16_t)vsubq_f32(*v177, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_192DAD3E0)));
    float32x4_t *v177 = (float32x4_t)a5;
    v177[1] = v179;
    v177 += 2;
    v175 += 8;
  }
  while (v175);
  if (v28 != v34) {
    goto LABEL_29;
  }
}

void sub_19256F738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void void nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19256F89C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19256F8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19256F8A8);
}

void *nitro::ndarray<unsigned char>::operator-=<int>(void *a1, void *a2)
{
  unint64_t v3 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    unint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  unint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  unint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    unint64_t v15 = (void *)a2[2];
    if (v14 != (uint64_t)(a2[3] - (void)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<unsigned char>::operator-<int>(a1, a2);
    nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(a1, a2);
  }
  return a1;
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[3];
  unint64_t v6 = (v5 - v4) >> 3;
  unint64_t v7 = (void *)a2[2];
  if (v6 != (uint64_t)(a2[3] - (void)v7) >> 3) {
    goto LABEL_13;
  }
  if (v5 == v4) {
    return;
  }
  uint64_t v8 = v6 <= 1 ? 1 : (v5 - v4) >> 3;
  if (*(void *)v4 != *v7) {
    goto LABEL_13;
  }
  uint64_t v9 = 1;
  do
  {
    unint64_t v10 = v9;
    if (v8 == v9) {
      break;
    }
    uint64_t v11 = *(void *)&v4[8 * v9];
    uint64_t v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6) {
LABEL_13:
  }
    nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1})::{lambda(void)#1}::operator()();
  int64_t v13 = v5 - v4;
  if (v5 == v4 || !*a1) {
    return;
  }
  if ((unint64_t)(v13 - 8) < 8)
  {
    uint64_t v14 = 1;
    unint64_t v15 = (char *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *(void *)v15;
      v15 += 8;
      v14 *= v21;
    }
    while (v15 != v5);
    goto LABEL_21;
  }
  unint64_t v16 = ((unint64_t)(v13 - 8) >> 3) + 1;
  unint64_t v15 = &v4[8 * (v16 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v17 = v4 + 8;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  unint64_t v22 = v13 >> 3;
  if (v13 >> 3 == 3)
  {
    unint64_t v35 = *(void *)v4;
    if (*(void *)v4)
    {
      unint64_t v36 = 0;
      uint64_t v37 = a2[8];
      uint64_t v38 = a1[8];
      do
      {
        if (*((void *)v4 + 1))
        {
          unint64_t v39 = 0;
          uint64_t v40 = v37;
          uint64_t v41 = v38;
          do
          {
            if (*((void *)v4 + 2))
            {
              unint64_t v44 = 0;
              uint64_t v45 = v40;
              uint64_t v46 = v41;
              do
              {
                *(unsigned char *)(*a1 + v46) -= *(_DWORD *)(*a2 + 4 * v45);
                uint64_t v42 = (void *)a1[5];
                v46 += v42[2];
                uint64_t v43 = (void *)a2[5];
                v45 += v43[2];
                ++v44;
                uint64_t v4 = (char *)a1[2];
              }
              while (v44 < *((void *)v4 + 2));
            }
            else
            {
              uint64_t v42 = (void *)a1[5];
              uint64_t v43 = (void *)a2[5];
            }
            v41 += v42[1];
            v40 += v43[1];
            ++v39;
          }
          while (v39 < *((void *)v4 + 1));
          unint64_t v35 = *(void *)v4;
        }
        else
        {
          uint64_t v42 = (void *)a1[5];
          uint64_t v43 = (void *)a2[5];
        }
        v38 += *v42;
        v37 += *v43;
        ++v36;
      }
      while (v36 < v35);
    }
  }
  else
  {
    if (v22 != 2)
    {
      if (v22 == 1)
      {
        if (*(void *)v4)
        {
          unint64_t v23 = 0;
          uint64_t v24 = a2[8];
          uint64_t v25 = a1[8];
          do
          {
            *(unsigned char *)(*a1 + v25) -= *(unsigned char *)(*a2 + 4 * v24);
            v25 += *(void *)a1[5];
            v24 += *(void *)a2[5];
            ++v23;
          }
          while (v23 < *(void *)a1[2]);
        }
        return;
      }
      if (v13 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v47 = operator new(v13);
      bzero(v47, v13 & 0xFFFFFFFFFFFFFFF8);
      if (v22 <= 1) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v13 >> 3;
      }
      unint64_t v49 = v48 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        uint64_t v50 = a1[5];
        if (v48 < 2) {
          break;
        }
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        uint64_t v55 = (void *)(v50 + 8);
        unint64_t v56 = v48 & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v57 = v47 + 1;
        do
        {
          v53 += *(v55 - 1) * *(v57 - 1);
          v54 += *v55 * *v57;
          v57 += 2;
          v55 += 2;
          v56 -= 2;
        }
        while (v56);
        uint64_t v51 = v54 + v53;
        unint64_t v52 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49) {
          goto LABEL_60;
        }
LABEL_62:
        uint64_t v65 = a2[5];
        if (v48 < 2)
        {
          uint64_t v66 = 0;
          unint64_t v67 = 0;
LABEL_67:
          unint64_t v73 = v48 - v67;
          uint64_t v74 = v67;
          uint64_t v75 = (uint64_t *)(v65 + v74 * 8);
          uint64_t v76 = &v47[v74];
          do
          {
            uint64_t v78 = *v76++;
            uint64_t v77 = v78;
            uint64_t v79 = *v75++;
            v66 += v79 * v77;
            --v73;
          }
          while (v73);
          goto LABEL_69;
        }
        uint64_t v68 = 0;
        uint64_t v69 = 0;
        unint64_t v70 = (void *)(v65 + 8);
        unint64_t v71 = v48 & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v72 = v47 + 1;
        do
        {
          v68 += *(v70 - 1) * *(v72 - 1);
          v69 += *v70 * *v72;
          v72 += 2;
          v70 += 2;
          v71 -= 2;
        }
        while (v71);
        uint64_t v66 = v69 + v68;
        unint64_t v67 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49) {
          goto LABEL_67;
        }
LABEL_69:
        *(unsigned char *)(*a1 + v51) -= *(unsigned char *)(*a2 + 4 * (a2[8] + v66));
        if ((int)((unint64_t)v13 >> 3) >= 1)
        {
          uint64_t v80 = a1[2];
          uint64_t v81 = ((unint64_t)v13 >> 3) + 1;
          unint64_t v82 = (unint64_t)v13 >> 3;
          while (1)
          {
            uint64_t v83 = (v81 - 2);
            unint64_t v84 = v47[v83] + 1;
            v47[v83] = v84;
            if (v84 < *(void *)(v80 + v83 * 8)) {
              break;
            }
            v47[(v81 - 2)] = 0;
            LODWORD(v82) = v82 - 1;
            if ((unint64_t)--v81 <= 1) {
              goto LABEL_75;
            }
          }
          if ((int)v82 > 0) {
            continue;
          }
        }
LABEL_75:
        operator delete(v47);
        return;
      }
      uint64_t v51 = 0;
      unint64_t v52 = 0;
LABEL_60:
      unint64_t v58 = v48 - v52;
      uint64_t v59 = v52;
      BOOL v60 = (uint64_t *)(v50 + v59 * 8);
      BOOL v61 = &v47[v59];
      do
      {
        uint64_t v63 = *v61++;
        uint64_t v62 = v63;
        uint64_t v64 = *v60++;
        v51 += v64 * v62;
        --v58;
      }
      while (v58);
      goto LABEL_62;
    }
    unint64_t v26 = *(void *)v4;
    if (*(void *)v4)
    {
      unint64_t v27 = 0;
      uint64_t v28 = a2[8];
      uint64_t v29 = a1[8];
      do
      {
        if (*((void *)v4 + 1))
        {
          unint64_t v32 = 0;
          uint64_t v33 = v28;
          uint64_t v34 = v29;
          do
          {
            *(unsigned char *)(*a1 + v34) -= *(_DWORD *)(*a2 + 4 * v33);
            uint64_t v30 = (void *)a1[5];
            v34 += v30[1];
            uint64_t v31 = (void *)a2[5];
            v33 += v31[1];
            ++v32;
            uint64_t v4 = (char *)a1[2];
          }
          while (v32 < *((void *)v4 + 1));
          unint64_t v26 = *(void *)v4;
        }
        else
        {
          uint64_t v30 = (void *)a1[5];
          uint64_t v31 = (void *)a2[5];
        }
        v29 += *v30;
        v28 += *v31;
        ++v27;
      }
      while (v27 < v26);
    }
  }
}

void sub_19256FF5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::operator-<int>(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  uint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      unint64_t v39 = 0;
      uint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        uint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        unint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      unint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      unint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        uint64_t v37 = v20;
        memcpy(v19, v17, v18);
        unint64_t v36 = v20;
      }
      unint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        unint64_t v22 = &v21[8 * v10];
        unint64_t v32 = v21;
        uint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      unint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v26 = (char *)operator new(v23 - v24);
        unint64_t v27 = &v26[8 * (v25 >> 3)];
        uint64_t v29 = v26;
        uint64_t v31 = v27;
        memcpy(v26, v24, v25);
        uint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<unsigned char>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<unsigned char>::copy(&v28);
    }
  }
  nitro::ndarray<unsigned char>::copy(a1);
}

void sub_1925702E0(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1925702F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      uint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  uint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    uint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  uint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_192570390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x19257036CLL);
  }
  JUMPOUT(0x19257033CLL);
}

void sub_1925703A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x19257037CLL);
  }
  JUMPOUT(0x192570344);
}

void sub_1925703B0()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x192570354);
  }
  JUMPOUT(0x19257034CLL);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19257064C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925707D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925707E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925707E0);
}

uint64_t *nitro::ndarray<int>::operator-=<int>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    unint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  unint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    std::locale v15 = (void *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<int>::operator-<int>(a1, a2);
    nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(a1, a2);
  }
  return a1;
}

int32x4_t nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (unint64_t *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return result;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return result;
  }
  uint64_t v160 = *a1;
  if (!*a1) {
    return result;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v13 = 1;
    unint64_t v14 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v20 = *v14++;
      v13 *= v20;
    }
    while (v14 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v15 = ((v12 - 8) >> 3) + 1;
  unint64_t v14 = &v4[v15 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v16 = v4 + 1;
  uint64_t v17 = 1;
  uint64_t v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v19 = 1;
  do
  {
    v17 *= *(v16 - 1);
    v19 *= *v16;
    v16 += 2;
    v18 -= 2;
  }
  while (v18);
  uint64_t v13 = v19 * v17;
  if (v15 != (v15 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v13) {
    return result;
  }
  uint64_t v21 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v155 = *v4;
    if (!*v4) {
      return result;
    }
    uint64_t v71 = 0;
    uint64_t v72 = a2[8];
    uint64_t v73 = a1[8];
    unint64_t v74 = v4[1];
    uint64_t v75 = (uint64_t *)a1[5];
    uint64_t v152 = (uint64_t *)a2[5];
    uint64_t v153 = *v152;
    uint64_t v154 = *v75;
    uint64_t v157 = 4 * *v75;
    uint64_t v156 = 4 * *v152;
    uint64_t v150 = 4 * v72;
    uint64_t v151 = 4 * v73;
    uint64_t v76 = 4 * v73 + v160 + 16;
    uint64_t v77 = 4 * v72 + 16;
    while (!v74)
    {
LABEL_55:
      v73 += v154;
      v72 += v153;
      ++v71;
      v76 += v157;
      v77 += v156;
      if (v71 == v155) {
        return result;
      }
    }
    uint64_t v78 = 0;
    uint64_t v79 = v150 + v156 * v71;
    unint64_t v80 = v4[2];
    uint64_t v81 = *a2;
    uint64_t v82 = v75[1];
    uint64_t v83 = v152[1];
    uint64_t v84 = 4 * v82;
    uint64_t v159 = v151 + v157 * v71;
    uint64_t v85 = 4 * v83;
    unint64_t v86 = v80 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v87 = a2[5];
    uint64_t v88 = (int32x4_t *)(*a2 + v77);
    uint64_t v89 = (int32x4_t *)v76;
    uint64_t v90 = v72;
    uint64_t v91 = v73;
    while (!v80)
    {
LABEL_58:
      v91 += v82;
      v90 += v83;
      ++v78;
      uint64_t v89 = (int32x4_t *)((char *)v89 + v84);
      uint64_t v88 = (int32x4_t *)((char *)v88 + v85);
      if (v78 == v74) {
        goto LABEL_55;
      }
    }
    uint64_t v92 = v75[2];
    uint64_t v93 = *(void *)(v87 + 16);
    if (v80 >= 8)
    {
      unint64_t v94 = 0;
      if (v92 != 1) {
        goto LABEL_62;
      }
      uint64_t v95 = v90;
      uint64_t v96 = v91;
      if (v93 != 1)
      {
LABEL_63:
        unint64_t v97 = v80 - v94;
        unint64_t v98 = (_DWORD *)(v81 + 4 * v95);
        uint64_t v99 = 4 * v93;
        uint64_t v100 = 4 * v92;
        uint64_t v101 = (_DWORD *)(v160 + 4 * v96);
        do
        {
          *v101 -= *v98;
          unint64_t v98 = (_DWORD *)((char *)v98 + v99);
          uint64_t v101 = (_DWORD *)((char *)v101 + v100);
          --v97;
        }
        while (v97);
        goto LABEL_58;
      }
      if (v160 + v159 + v84 * v78 >= v81 + v79 + 4 * v80 + v85 * v78
        || v81 + v79 + v85 * v78 >= v160 + v159 + 4 * v80 + v84 * v78)
      {
        uint64_t v95 = v90 + v86;
        uint64_t v103 = v88;
        BOOL v104 = v89;
        unint64_t v105 = v80 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v96 = v91 + v86;
        do
        {
          int32x4_t result = vsubq_s32(v104[-1], v103[-1]);
          int32x4_t v106 = vsubq_s32(*v104, *v103);
          v104[-1] = result;
          *BOOL v104 = v106;
          v104 += 2;
          v103 += 2;
          v105 -= 8;
        }
        while (v105);
        unint64_t v94 = v80 & 0xFFFFFFFFFFFFFFF8;
        if (v80 == v86) {
          goto LABEL_58;
        }
        goto LABEL_63;
      }
    }
    unint64_t v94 = 0;
LABEL_62:
    uint64_t v95 = v90;
    uint64_t v96 = v91;
    goto LABEL_63;
  }
  if (v21 == 2)
  {
    unint64_t v36 = *v4;
    if (!*v4) {
      return result;
    }
    uint64_t v37 = 0;
    uint64_t v38 = a2[8];
    uint64_t v39 = a1[8];
    unint64_t v40 = v4[1];
    uint64_t v41 = (uint64_t *)a2[5];
    uint64_t v42 = (uint64_t *)a1[5];
    uint64_t v43 = *v42;
    uint64_t v44 = *v41;
    uint64_t v45 = 4 * *v42;
    uint64_t v46 = 4 * *v41;
    unint64_t v47 = v40 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v48 = *a2;
    uint64_t v49 = 4 * v39 + v160 + 16;
    uint64_t v50 = 4 * v38 + *a2 + 16;
    uint64_t v51 = v160 + 4 * v39;
    uint64_t v52 = v160 + 4 * v39 + 4 * v40;
    uint64_t v53 = *a2 + 4 * v38;
    uint64_t v54 = *a2 + 4 * v38 + 4 * v40;
    while (!v40)
    {
LABEL_34:
      v39 += v43;
      v38 += v44;
      ++v37;
      v49 += v45;
      v50 += v46;
      if (v37 == v36) {
        return result;
      }
    }
    uint64_t v55 = v42[1];
    uint64_t v56 = v41[1];
    if (v40 >= 8)
    {
      unint64_t v57 = 0;
      if (v55 != 1) {
        goto LABEL_38;
      }
      uint64_t v58 = v38;
      uint64_t v59 = v39;
      if (v56 != 1)
      {
LABEL_39:
        unint64_t v60 = v40 - v57;
        BOOL v61 = (_DWORD *)(v48 + 4 * v58);
        uint64_t v62 = 4 * v56;
        uint64_t v63 = 4 * v55;
        uint64_t v64 = (_DWORD *)(v160 + 4 * v59);
        do
        {
          *v64 -= *v61;
          BOOL v61 = (_DWORD *)((char *)v61 + v62);
          uint64_t v64 = (_DWORD *)((char *)v64 + v63);
          --v60;
        }
        while (v60);
        goto LABEL_34;
      }
      if (v51 + v45 * v37 >= (unint64_t)(v54 + v46 * v37)
        || v53 + v46 * v37 >= (unint64_t)(v52 + v45 * v37))
      {
        uint64_t v58 = v38 + v47;
        uint64_t v66 = (int32x4_t *)v50;
        unint64_t v67 = (int32x4_t *)v49;
        unint64_t v68 = v40 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v59 = v39 + v47;
        do
        {
          int32x4_t result = vsubq_s32(v67[-1], v66[-1]);
          int32x4_t v70 = vsubq_s32(*v67, *v66);
          v67[-1] = result;
          *unint64_t v67 = v70;
          v67 += 2;
          v66 += 2;
          v68 -= 8;
        }
        while (v68);
        unint64_t v57 = v40 & 0xFFFFFFFFFFFFFFF8;
        if (v40 == v47) {
          goto LABEL_34;
        }
        goto LABEL_39;
      }
    }
    unint64_t v57 = 0;
LABEL_38:
    uint64_t v58 = v38;
    uint64_t v59 = v39;
    goto LABEL_39;
  }
  if (v21 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v107 = operator new(v12);
    bzero(v107, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v108 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v109 = 1;
    }
    else {
      unint64_t v109 = v12 >> 3;
    }
    uint64_t v110 = a2[5];
    uint64_t v111 = a2[8];
    uint64_t v112 = v109 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v113 = a1[5];
    while (v109 >= 2)
    {
      uint64_t v116 = 0;
      uint64_t v117 = 0;
      uint64_t v118 = v109 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v119 = (void *)(v113 + 8);
      float32x4_t v120 = v107 + 1;
      do
      {
        v116 += *(v119 - 1) * *(v120 - 1);
        v117 += *v119 * *v120;
        v120 += 2;
        v119 += 2;
        v118 -= 2;
      }
      while (v118);
      uint64_t v114 = v117 + v116;
      uint64_t v115 = v109 & 0x1FFFFFFFFFFFFFFELL;
      if (v109 != v112) {
        goto LABEL_87;
      }
LABEL_89:
      if (v109 < 2)
      {
        uint64_t v128 = 0;
        uint64_t v129 = 0;
LABEL_94:
        unint64_t v135 = v109 - v129;
        uint64_t v136 = v129;
        uint64_t v137 = (uint64_t *)(v110 + 8 * v129);
        uint64_t v138 = &v107[v136];
        do
        {
          uint64_t v140 = *v138++;
          uint64_t v139 = v140;
          uint64_t v141 = *v137++;
          v128 += v141 * v139;
          --v135;
        }
        while (v135);
        goto LABEL_96;
      }
      uint64_t v130 = 0;
      uint64_t v131 = 0;
      uint64_t v132 = v109 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v133 = (void *)(v110 + 8);
      float v134 = v107 + 1;
      do
      {
        v130 += *(v133 - 1) * *(v134 - 1);
        v131 += *v133 * *v134;
        v134 += 2;
        v133 += 2;
        v132 -= 2;
      }
      while (v132);
      uint64_t v128 = v131 + v130;
      uint64_t v129 = v109 & 0x1FFFFFFFFFFFFFFELL;
      if (v109 != v112) {
        goto LABEL_94;
      }
LABEL_96:
      *(_DWORD *)(v160 + 4 * v114) -= *(_DWORD *)(v108 + 4 * (v111 + v128));
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v142 = (v12 >> 3) + 1;
        int v143 = v12 >> 3;
        while (1)
        {
          uint64_t v144 = (v142 - 2);
          unint64_t v145 = v107[v144] + 1;
          v107[v144] = v145;
          if (v145 < v4[v144]) {
            break;
          }
          v107[(v142 - 2)] = 0;
          --v143;
          if ((unint64_t)--v142 <= 1) {
            goto LABEL_102;
          }
        }
        if (v143 > 0) {
          continue;
        }
      }
LABEL_102:
      operator delete(v107);
      return result;
    }
    uint64_t v114 = 0;
    uint64_t v115 = 0;
LABEL_87:
    unint64_t v121 = v109 - v115;
    uint64_t v122 = v115;
    int8x16_t v123 = (uint64_t *)(v113 + 8 * v115);
    uint64_t v124 = &v107[v122];
    do
    {
      uint64_t v126 = *v124++;
      uint64_t v125 = v126;
      uint64_t v127 = *v123++;
      v114 += v127 * v125;
      --v121;
    }
    while (v121);
    goto LABEL_89;
  }
  unint64_t v22 = *v4;
  if (!*v4) {
    return result;
  }
  uint64_t v23 = a2[8];
  uint64_t v24 = a1[8];
  uint64_t v25 = *a2;
  uint64_t v26 = *(void *)a1[5];
  uint64_t v27 = *(void *)a2[5];
  if (v22 < 0xC) {
    goto LABEL_27;
  }
  unint64_t v28 = 0;
  if (v26 != 1 || v27 != 1) {
    goto LABEL_28;
  }
  if (v160 + 4 * v24 < v25 + 4 * v22 + 4 * v23 && v25 + 4 * v23 < v160 + 4 * v22 + 4 * v24)
  {
LABEL_27:
    unint64_t v28 = 0;
LABEL_28:
    uint64_t v29 = a2[8];
    uint64_t v30 = a1[8];
LABEL_29:
    unint64_t v31 = v22 - v28;
    unint64_t v32 = (_DWORD *)(v25 + 4 * v29);
    uint64_t v33 = 4 * v27;
    uint64_t v34 = 4 * v26;
    unint64_t v35 = (_DWORD *)(v160 + 4 * v30);
    do
    {
      *v35 -= *v32;
      unint64_t v32 = (_DWORD *)((char *)v32 + v33);
      unint64_t v35 = (_DWORD *)((char *)v35 + v34);
      --v31;
    }
    while (v31);
    return result;
  }
  unint64_t v28 = v22 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v29 = v23 + (v22 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v30 = v24 + (v22 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v146 = (int32x4_t *)(v25 + 4 * v23 + 16);
  uint64_t v147 = (int32x4_t *)(v160 + 4 * v24 + 16);
  unint64_t v148 = v22 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    int32x4_t result = vsubq_s32(v147[-1], v146[-1]);
    int32x4_t v149 = vsubq_s32(*v147, *v146);
    v147[-1] = result;
    *uint64_t v147 = v149;
    v146 += 2;
    v147 += 2;
    v148 -= 8;
  }
  while (v148);
  if (v22 != v28) {
    goto LABEL_29;
  }
  return result;
}

void sub_192571188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::operator-<int>(void *a1, void *a2)
{
  unint64_t v5 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      unint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        unint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        uint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      unint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      uint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        uint64_t v37 = v20;
        memcpy(v19, v17, v18);
        unint64_t v36 = v20;
      }
      unint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        unint64_t v22 = &v21[8 * v10];
        unint64_t v32 = v21;
        uint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      unint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      uint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        uint64_t v29 = v26;
        unint64_t v31 = v27;
        memcpy(v26, v24, v25);
        uint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<int>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<int>::copy(&v28);
    }
  }
  nitro::ndarray<int>::copy(a1);
}

void sub_19257150C(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_192571520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      uint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  uint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    uint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  uint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1925715BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x192571598);
  }
  JUMPOUT(0x192571568);
}

void sub_1925715CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x1925715A8);
  }
  JUMPOUT(0x192571570);
}

void sub_1925715DC()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x192571580);
  }
  JUMPOUT(0x192571578);
}

uint64_t *nitro::ndarray<half>::operator-=<int>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    unint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  unint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  unint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    uint64_t v15 = (void *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<half>::operator-<int>(a1, a2);
    nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(a1, a2);
  }
  return a1;
}

void nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (unint64_t *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v13 = *a1;
  if (!*a1) {
    return;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v14 = 1;
    uint64_t v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v16 = ((v12 - 8) >> 3) + 1;
  uint64_t v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v17 = v4 + 1;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  uint64_t v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v179 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v79 = 0;
    uint64_t v80 = a2[8];
    uint64_t v81 = a1[8];
    unint64_t v82 = v4[1];
    uint64_t v83 = (uint64_t *)a1[5];
    unint64_t v174 = (uint64_t *)a2[5];
    uint64_t v84 = v13 + 2 * v81 + 16;
    uint64_t v177 = *v174;
    uint64_t v178 = *v83;
    uint64_t v176 = 2 * *v83;
    uint64_t v85 = 4 * v80 + 32;
    uint64_t v175 = 4 * *v174;
    while (!v82)
    {
LABEL_50:
      v81 += v178;
      v80 += v177;
      ++v79;
      v84 += v176;
      v85 += v175;
      if (v79 == v179) {
        return;
      }
    }
    uint64_t v86 = 0;
    unint64_t v87 = v4[2];
    uint64_t v88 = *a2;
    uint64_t v89 = a2[5];
    uint64_t v90 = v83[1];
    unint64_t v91 = v87 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v92 = (int32x4_t *)(*a2 + v85);
    uint64_t v93 = v174[1];
    unint64_t v94 = (float16x4_t *)v84;
    uint64_t v95 = v80;
    uint64_t v96 = v81;
    while (1)
    {
      if (v87)
      {
        uint64_t v97 = v83[2];
        uint64_t v98 = *(void *)(v89 + 16);
        if (v87 >= 0x10 && (v97 == 1 ? (BOOL v99 = v98 == 1) : (BOOL v99 = 0), v99))
        {
          uint64_t v101 = v95 + v91 * v98;
          uint64_t v111 = v92;
          uint64_t v112 = v94;
          unint64_t v113 = v87 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v102 = v96 + v91 * v97;
          do
          {
            int32x4_t v115 = v111[-2];
            int32x4_t v114 = v111[-1];
            int32x4_t v117 = *v111;
            int32x4_t v116 = v111[1];
            v111 += 4;
            float16x8_t v118 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(v112[-2]), vcvtq_f32_s32(v115))), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v112[-2].i8), vcvtq_f32_s32(v114)));
            float16x8_t v119 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(*v112), vcvtq_f32_s32(v117))), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v112->i8), vcvtq_f32_s32(v116)));
            *(float16x8_t *)v112[-2].i8 = v118;
            *(float16x8_t *)v112->i8 = v119;
            v112 += 4;
            v113 -= 16;
          }
          while (v113);
          unint64_t v100 = v87 & 0xFFFFFFFFFFFFFFF0;
          if (v87 == v91) {
            goto LABEL_53;
          }
        }
        else
        {
          unint64_t v100 = 0;
          uint64_t v101 = v95;
          uint64_t v102 = v96;
        }
        unint64_t v103 = v87 - v100;
        BOOL v104 = (int *)(v88 + 4 * v101);
        uint64_t v105 = 4 * v98;
        uint64_t v106 = 2 * v97;
        uint64_t v107 = (__int16 *)(v13 + 2 * v102);
        do
        {
          _H1 = *v107;
          __asm { FCVT            S1, H1 }
          _S0 = _S1 - (float)*v104;
          __asm { FCVT            H0, S0 }
          __int16 *v107 = LOWORD(_S0);
          BOOL v104 = (int *)((char *)v104 + v105);
          uint64_t v107 = (__int16 *)((char *)v107 + v106);
          --v103;
        }
        while (v103);
      }
LABEL_53:
      v96 += v90;
      v95 += v93;
      ++v86;
      unint64_t v94 = (float16x4_t *)((char *)v94 + 2 * v90);
      uint64_t v92 = (int32x4_t *)((char *)v92 + 4 * v93);
      if (v86 == v82) {
        goto LABEL_50;
      }
    }
  }
  if (v22 == 2)
  {
    unint64_t v41 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v42 = 0;
    uint64_t v43 = a2[8];
    uint64_t v44 = a1[8];
    unint64_t v45 = v4[1];
    uint64_t v46 = *a2;
    unint64_t v47 = (uint64_t *)a2[5];
    uint64_t v48 = (uint64_t *)a1[5];
    uint64_t v49 = *v48;
    uint64_t v50 = *v47;
    unint64_t v51 = v45 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v52 = v13 + 2 * v44 + 16;
    uint64_t v53 = 2 * *v48;
    uint64_t v54 = *a2 + 4 * v43 + 32;
    uint64_t v55 = 4 * *v47;
    while (1)
    {
      if (v45)
      {
        uint64_t v56 = v48[1];
        uint64_t v57 = v47[1];
        if (v45 >= 0x10 && (v56 == 1 ? (_ZF = v57 == 1) : (_ZF = 0), _ZF))
        {
          uint64_t v60 = v43 + v51 * v57;
          int32x4_t v70 = (int32x4_t *)v54;
          uint64_t v71 = (float16x4_t *)v52;
          unint64_t v72 = v45 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v61 = v44 + v51 * v56;
          do
          {
            int32x4_t v74 = v70[-2];
            int32x4_t v73 = v70[-1];
            int32x4_t v76 = *v70;
            int32x4_t v75 = v70[1];
            v70 += 4;
            float16x8_t v77 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(v71[-2]), vcvtq_f32_s32(v74))), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v71[-2].i8), vcvtq_f32_s32(v73)));
            float16x8_t v78 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(*v71), vcvtq_f32_s32(v76))), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v71->i8), vcvtq_f32_s32(v75)));
            *(float16x8_t *)v71[-2].i8 = v77;
            *(float16x8_t *)v71->i8 = v78;
            v71 += 4;
            v72 -= 16;
          }
          while (v72);
          unint64_t v59 = v45 & 0xFFFFFFFFFFFFFFF0;
          if (v45 == v51) {
            goto LABEL_33;
          }
        }
        else
        {
          unint64_t v59 = 0;
          uint64_t v60 = v43;
          uint64_t v61 = v44;
        }
        unint64_t v62 = v45 - v59;
        uint64_t v63 = (int *)(v46 + 4 * v60);
        uint64_t v64 = 4 * v57;
        uint64_t v65 = 2 * v56;
        uint64_t v66 = (__int16 *)(v13 + 2 * v61);
        do
        {
          _H1 = *v66;
          __asm { FCVT            S1, H1 }
          _S0 = _S1 - (float)*v63;
          __asm { FCVT            H0, S0 }
          *uint64_t v66 = LOWORD(_S0);
          uint64_t v63 = (int *)((char *)v63 + v64);
          uint64_t v66 = (__int16 *)((char *)v66 + v65);
          --v62;
        }
        while (v62);
      }
LABEL_33:
      v44 += v49;
      v43 += v50;
      ++v42;
      v52 += v53;
      v54 += v55;
      if (v42 == v41) {
        return;
      }
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    float32x4_t v120 = operator new(v12);
    bzero(v120, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v121 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v122 = 1;
    }
    else {
      unint64_t v122 = v12 >> 3;
    }
    uint64_t v123 = a2[5];
    uint64_t v124 = a2[8];
    uint64_t v125 = v122 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v126 = a1[5];
    while (v122 >= 2)
    {
      uint64_t v129 = 0;
      uint64_t v130 = 0;
      uint64_t v131 = v122 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v132 = (void *)(v126 + 8);
      uint64_t v133 = v120 + 1;
      do
      {
        v129 += *(v132 - 1) * *(v133 - 1);
        v130 += *v132 * *v133;
        v133 += 2;
        v132 += 2;
        v131 -= 2;
      }
      while (v131);
      uint64_t v127 = v130 + v129;
      uint64_t v128 = v122 & 0x1FFFFFFFFFFFFFFELL;
      if (v122 != v125) {
        goto LABEL_78;
      }
LABEL_80:
      if (v122 < 2)
      {
        uint64_t v141 = 0;
        uint64_t v142 = 0;
LABEL_85:
        unint64_t v148 = v122 - v142;
        uint64_t v149 = v142;
        uint64_t v150 = (uint64_t *)(v123 + 8 * v142);
        uint64_t v151 = &v120[v149];
        do
        {
          uint64_t v153 = *v151++;
          uint64_t v152 = v153;
          uint64_t v154 = *v150++;
          v141 += v154 * v152;
          --v148;
        }
        while (v148);
        goto LABEL_87;
      }
      uint64_t v143 = 0;
      uint64_t v144 = 0;
      uint64_t v145 = v122 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v146 = (void *)(v123 + 8);
      uint64_t v147 = v120 + 1;
      do
      {
        v143 += *(v146 - 1) * *(v147 - 1);
        v144 += *v146 * *v147;
        v147 += 2;
        v146 += 2;
        v145 -= 2;
      }
      while (v145);
      uint64_t v141 = v144 + v143;
      uint64_t v142 = v122 & 0x1FFFFFFFFFFFFFFELL;
      if (v122 != v125) {
        goto LABEL_85;
      }
LABEL_87:
      uint64_t v155 = 2 * v127;
      _H1 = *(_WORD *)(v13 + v155);
      __asm { FCVT            S1, H1 }
      _S0 = _S1 - (float)*(int *)(v121 + 4 * (v124 + v141));
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v13 + v155) = LOWORD(_S0);
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v159 = (v12 >> 3) + 1;
        int v160 = v12 >> 3;
        while (1)
        {
          uint64_t v161 = (v159 - 2);
          unint64_t v162 = v120[v161] + 1;
          v120[v161] = v162;
          if (v162 < v4[v161]) {
            break;
          }
          v120[(v159 - 2)] = 0;
          --v160;
          if ((unint64_t)--v159 <= 1) {
            goto LABEL_93;
          }
        }
        if (v160 > 0) {
          continue;
        }
      }
LABEL_93:
      operator delete(v120);
      return;
    }
    uint64_t v127 = 0;
    uint64_t v128 = 0;
LABEL_78:
    unint64_t v134 = v122 - v128;
    uint64_t v135 = v128;
    uint64_t v136 = (uint64_t *)(v126 + 8 * v128);
    uint64_t v137 = &v120[v135];
    do
    {
      uint64_t v139 = *v137++;
      uint64_t v138 = v139;
      uint64_t v140 = *v136++;
      v127 += v140 * v138;
      --v134;
    }
    while (v134);
    goto LABEL_80;
  }
  unint64_t v23 = *v4;
  if (!*v4) {
    return;
  }
  uint64_t v24 = a2[8];
  uint64_t v25 = a1[8];
  uint64_t v26 = *a2;
  uint64_t v27 = *(void *)a1[5];
  uint64_t v28 = *(void *)a2[5];
  if (v23 < 0x10)
  {
    unint64_t v29 = 0;
LABEL_28:
    unint64_t v30 = v23 - v29;
    unint64_t v31 = (int *)(v26 + 4 * v24);
    uint64_t v32 = 4 * v28;
    uint64_t v33 = 2 * v27;
    uint64_t v34 = (__int16 *)(v13 + 2 * v25);
    do
    {
      _H1 = *v34;
      __asm { FCVT            S1, H1 }
      _S0 = _S1 - (float)*v31;
      __asm { FCVT            H0, S0 }
      *uint64_t v34 = LOWORD(_S0);
      unint64_t v31 = (int *)((char *)v31 + v32);
      uint64_t v34 = (__int16 *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  unint64_t v29 = 0;
  if (v27 != 1) {
    goto LABEL_28;
  }
  if (v28 != 1) {
    goto LABEL_28;
  }
  unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  uint64_t v163 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v164 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = (int32x4_t *)(v26 + 4 * v24 + 32);
  uint64_t v166 = (float16x4_t *)(v13 + 2 * v25 + 16);
  unint64_t v167 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    int32x4_t v169 = v165[-2];
    int32x4_t v168 = v165[-1];
    int32x4_t v171 = *v165;
    int32x4_t v170 = v165[1];
    v165 += 4;
    float16x8_t v172 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(v166[-2]), vcvtq_f32_s32(v169))), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v166[-2].i8), vcvtq_f32_s32(v168)));
    float16x8_t v173 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(*v166), vcvtq_f32_s32(v171))), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v166->i8), vcvtq_f32_s32(v170)));
    *(float16x8_t *)v166[-2].i8 = v172;
    *(float16x8_t *)v166->i8 = v173;
    v166 += 4;
    v167 -= 16;
  }
  while (v167);
  uint64_t v24 = v163;
  uint64_t v25 = v164;
  if (v23 != v29) {
    goto LABEL_28;
  }
}

void sub_192571F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void void nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192572080(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192572094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19257208CLL);
}

uint64_t *nitro::ndarray<float>::operator-=<int>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    uint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  uint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  unint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    uint64_t v15 = (void *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<float>::operator-<int>(a1, a2);
    nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(a1, a2);
  }
  return a1;
}

void nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (unint64_t *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v13 = *a1;
  if (!*a1) {
    return;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v14 = 1;
    uint64_t v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v16 = ((v12 - 8) >> 3) + 1;
  uint64_t v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v17 = v4 + 1;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  uint64_t v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v148 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v65 = 0;
    uint64_t v66 = a2[8];
    uint64_t v67 = a1[8];
    unint64_t v68 = v4[1];
    uint64_t v69 = (uint64_t *)a1[5];
    uint64_t v143 = (uint64_t *)a2[5];
    uint64_t v70 = v13 + 4 * v67 + 16;
    uint64_t v146 = *v143;
    uint64_t v147 = *v69;
    uint64_t v145 = 4 * *v69;
    uint64_t v71 = 4 * v66 + 16;
    uint64_t v144 = 4 * *v143;
    while (!v68)
    {
LABEL_50:
      v67 += v147;
      v66 += v146;
      ++v65;
      v70 += v145;
      v71 += v144;
      if (v65 == v148) {
        return;
      }
    }
    uint64_t v72 = 0;
    unint64_t v73 = v4[2];
    uint64_t v74 = *a2;
    uint64_t v75 = a2[5];
    uint64_t v76 = v69[1];
    unint64_t v77 = v73 & 0xFFFFFFFFFFFFFFF8;
    float16x8_t v78 = (int32x4_t *)(*a2 + v71);
    uint64_t v79 = v143[1];
    uint64_t v80 = (float32x4_t *)v70;
    uint64_t v81 = v66;
    uint64_t v82 = v67;
    while (1)
    {
      if (v73)
      {
        uint64_t v83 = v69[2];
        uint64_t v84 = *(void *)(v75 + 16);
        if (v73 >= 8 && (v83 == 1 ? (BOOL v85 = v84 == 1) : (BOOL v85 = 0), v85))
        {
          uint64_t v87 = v81 + v77 * v84;
          unint64_t v94 = v78;
          uint64_t v95 = v80;
          unint64_t v96 = v73 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v88 = v82 + v77 * v83;
          do
          {
            float32x4_t v97 = vsubq_f32(*v95, vcvtq_f32_s32(*v94));
            v95[-1] = vsubq_f32(v95[-1], vcvtq_f32_s32(v94[-1]));
            *uint64_t v95 = v97;
            v95 += 2;
            v94 += 2;
            v96 -= 8;
          }
          while (v96);
          unint64_t v86 = v73 & 0xFFFFFFFFFFFFFFF8;
          if (v73 == v77) {
            goto LABEL_53;
          }
        }
        else
        {
          unint64_t v86 = 0;
          uint64_t v87 = v81;
          uint64_t v88 = v82;
        }
        unint64_t v89 = v73 - v86;
        uint64_t v90 = (int *)(v74 + 4 * v87);
        uint64_t v91 = 4 * v84;
        uint64_t v92 = 4 * v83;
        uint64_t v93 = (float *)(v13 + 4 * v88);
        do
        {
          float *v93 = *v93 - (float)*v90;
          uint64_t v90 = (int *)((char *)v90 + v91);
          uint64_t v93 = (float *)((char *)v93 + v92);
          --v89;
        }
        while (v89);
      }
LABEL_53:
      v82 += v76;
      v81 += v79;
      ++v72;
      uint64_t v80 = (float32x4_t *)((char *)v80 + 4 * v76);
      float16x8_t v78 = (int32x4_t *)((char *)v78 + 4 * v79);
      if (v72 == v68) {
        goto LABEL_50;
      }
    }
  }
  if (v22 == 2)
  {
    unint64_t v35 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v36 = 0;
    uint64_t v37 = a2[8];
    uint64_t v38 = a1[8];
    unint64_t v39 = v4[1];
    uint64_t v40 = *a2;
    unint64_t v41 = (uint64_t *)a2[5];
    uint64_t v42 = (uint64_t *)a1[5];
    uint64_t v43 = *v42;
    uint64_t v44 = *v41;
    unint64_t v45 = v39 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v46 = v13 + 4 * v38 + 16;
    uint64_t v47 = 4 * *v42;
    uint64_t v48 = *a2 + 4 * v37 + 16;
    uint64_t v49 = 4 * *v41;
    while (1)
    {
      if (v39)
      {
        uint64_t v50 = v42[1];
        uint64_t v51 = v41[1];
        if (v39 >= 8 && (v50 == 1 ? (BOOL v52 = v51 == 1) : (BOOL v52 = 0), v52))
        {
          uint64_t v54 = v37 + v45 * v51;
          uint64_t v61 = (int32x4_t *)v48;
          unint64_t v62 = (float32x4_t *)v46;
          unint64_t v63 = v39 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v55 = v38 + v45 * v50;
          do
          {
            float32x4_t v64 = vsubq_f32(*v62, vcvtq_f32_s32(*v61));
            v62[-1] = vsubq_f32(v62[-1], vcvtq_f32_s32(v61[-1]));
            *unint64_t v62 = v64;
            v62 += 2;
            v61 += 2;
            v63 -= 8;
          }
          while (v63);
          unint64_t v53 = v39 & 0xFFFFFFFFFFFFFFF8;
          if (v39 == v45) {
            goto LABEL_33;
          }
        }
        else
        {
          unint64_t v53 = 0;
          uint64_t v54 = v37;
          uint64_t v55 = v38;
        }
        unint64_t v56 = v39 - v53;
        uint64_t v57 = (int *)(v40 + 4 * v54);
        uint64_t v58 = 4 * v51;
        uint64_t v59 = 4 * v50;
        uint64_t v60 = (float *)(v13 + 4 * v55);
        do
        {
          *uint64_t v60 = *v60 - (float)*v57;
          uint64_t v57 = (int *)((char *)v57 + v58);
          uint64_t v60 = (float *)((char *)v60 + v59);
          --v56;
        }
        while (v56);
      }
LABEL_33:
      v38 += v43;
      v37 += v44;
      ++v36;
      v46 += v47;
      v48 += v49;
      if (v36 == v35) {
        return;
      }
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v98 = operator new(v12);
    bzero(v98, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v99 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v100 = 1;
    }
    else {
      unint64_t v100 = v12 >> 3;
    }
    uint64_t v101 = a2[5];
    uint64_t v102 = a2[8];
    uint64_t v103 = v100 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v104 = a1[5];
    while (v100 >= 2)
    {
      uint64_t v107 = 0;
      uint64_t v108 = 0;
      uint64_t v109 = v100 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v110 = (void *)(v104 + 8);
      uint64_t v111 = v98 + 1;
      do
      {
        v107 += *(v110 - 1) * *(v111 - 1);
        v108 += *v110 * *v111;
        v111 += 2;
        v110 += 2;
        v109 -= 2;
      }
      while (v109);
      uint64_t v105 = v108 + v107;
      uint64_t v106 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103) {
        goto LABEL_78;
      }
LABEL_80:
      if (v100 < 2)
      {
        uint64_t v119 = 0;
        uint64_t v120 = 0;
LABEL_85:
        unint64_t v126 = v100 - v120;
        uint64_t v127 = v120;
        uint64_t v128 = (uint64_t *)(v101 + 8 * v120);
        uint64_t v129 = &v98[v127];
        do
        {
          uint64_t v131 = *v129++;
          uint64_t v130 = v131;
          uint64_t v132 = *v128++;
          v119 += v132 * v130;
          --v126;
        }
        while (v126);
        goto LABEL_87;
      }
      uint64_t v121 = 0;
      uint64_t v122 = 0;
      uint64_t v123 = v100 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v124 = (void *)(v101 + 8);
      uint64_t v125 = v98 + 1;
      do
      {
        v121 += *(v124 - 1) * *(v125 - 1);
        v122 += *v124 * *v125;
        v125 += 2;
        v124 += 2;
        v123 -= 2;
      }
      while (v123);
      uint64_t v119 = v122 + v121;
      uint64_t v120 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103) {
        goto LABEL_85;
      }
LABEL_87:
      *(float *)(v13 + 4 * v105) = *(float *)(v13 + 4 * v105) - (float)*(int *)(v99 + 4 * (v102 + v119));
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v133 = (v12 >> 3) + 1;
        int v134 = v12 >> 3;
        while (1)
        {
          uint64_t v135 = (v133 - 2);
          unint64_t v136 = v98[v135] + 1;
          v98[v135] = v136;
          if (v136 < v4[v135]) {
            break;
          }
          v98[(v133 - 2)] = 0;
          --v134;
          if ((unint64_t)--v133 <= 1) {
            goto LABEL_93;
          }
        }
        if (v134 > 0) {
          continue;
        }
      }
LABEL_93:
      operator delete(v98);
      return;
    }
    uint64_t v105 = 0;
    uint64_t v106 = 0;
LABEL_78:
    unint64_t v112 = v100 - v106;
    uint64_t v113 = v106;
    int32x4_t v114 = (uint64_t *)(v104 + 8 * v106);
    int32x4_t v115 = &v98[v113];
    do
    {
      uint64_t v117 = *v115++;
      uint64_t v116 = v117;
      uint64_t v118 = *v114++;
      v105 += v118 * v116;
      --v112;
    }
    while (v112);
    goto LABEL_80;
  }
  unint64_t v23 = *v4;
  if (!*v4) {
    return;
  }
  uint64_t v24 = a2[8];
  uint64_t v25 = a1[8];
  uint64_t v26 = *a2;
  uint64_t v27 = *(void *)a1[5];
  uint64_t v28 = *(void *)a2[5];
  if (v23 < 8)
  {
    unint64_t v29 = 0;
LABEL_28:
    unint64_t v30 = v23 - v29;
    unint64_t v31 = (int *)(v26 + 4 * v24);
    uint64_t v32 = 4 * v28;
    uint64_t v33 = 4 * v27;
    uint64_t v34 = (float *)(v13 + 4 * v25);
    do
    {
      *uint64_t v34 = *v34 - (float)*v31;
      unint64_t v31 = (int *)((char *)v31 + v32);
      uint64_t v34 = (float *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  unint64_t v29 = 0;
  if (v27 != 1) {
    goto LABEL_28;
  }
  if (v28 != 1) {
    goto LABEL_28;
  }
  unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v137 = v24 + (v23 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v138 = v25 + (v23 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v139 = (int32x4_t *)(v26 + 4 * v24 + 16);
  uint64_t v140 = (float32x4_t *)(v13 + 4 * v25 + 16);
  unint64_t v141 = v23 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    float32x4_t v142 = vsubq_f32(*v140, vcvtq_f32_s32(*v139));
    v140[-1] = vsubq_f32(v140[-1], vcvtq_f32_s32(v139[-1]));
    float32x4_t *v140 = v142;
    v139 += 2;
    v140 += 2;
    v141 -= 8;
  }
  while (v141);
  uint64_t v24 = v137;
  uint64_t v25 = v138;
  if (v23 != v29) {
    goto LABEL_28;
  }
}

void sub_192572930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::operator-<int>(void *a1, void *a2)
{
  unint64_t v5 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      unint64_t v39 = 0;
      uint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        uint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        unint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      unint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        uint64_t v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        uint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        uint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      unint64_t v29 = 0;
      unint64_t v30 = 0;
      unint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      unint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        unint64_t v29 = v26;
        unint64_t v31 = v27;
        memcpy(v26, v24, v25);
        unint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<float>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<float>::copy(&v28);
    }
  }
  nitro::ndarray<float>::copy(a1);
}

void sub_192572CB4(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_192572CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      unint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  unint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    unint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  unint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_192572D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x192572D40);
  }
  JUMPOUT(0x192572D10);
}

void sub_192572D74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x192572D50);
  }
  JUMPOUT(0x192572D18);
}

void sub_192572D84()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x192572D28);
  }
  JUMPOUT(0x192572D20);
}

void nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192573020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925731A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925731BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925731B4);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator-=(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unsigned __int8 v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::locale v15 = v23;
      }
      else {
        std::locale v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  int64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192573428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void *nitro::ndarray<unsigned char>::operator-=<half>(void *a1, void *a2, double a3, float a4)
{
  uint64_t v5 = (char *)a1[2];
  size_t v6 = (char *)a1[3];
  uint64_t v7 = v6 - v5;
  if (v6 == v5 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v7 - 8) < 8)
  {
    uint64_t v8 = 1;
    unint64_t v9 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v15 = *(void *)v9;
      v9 += 8;
      v8 *= v15;
    }
    while (v9 != v6);
    goto LABEL_9;
  }
  unint64_t v10 = ((unint64_t)(v7 - 8) >> 3) + 1;
  unint64_t v9 = &v5[8 * (v10 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v11 = v5 + 8;
  uint64_t v12 = 1;
  uint64_t v13 = v10 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v14 = 1;
  do
  {
    v12 *= *(v11 - 1);
    v14 *= *v11;
    v11 += 2;
    v13 -= 2;
  }
  while (v13);
  uint64_t v8 = v14 * v12;
  if (v10 != (v10 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v8)
  {
    unint64_t v16 = v7 >> 3;
    uint64_t v17 = (void *)a2[2];
    if (v16 != (uint64_t)(a2[3] - (void)v17) >> 3) {
      goto LABEL_19;
    }
    uint64_t v18 = v16 <= 1 ? 1 : v16;
    if (*(void *)v5 != *v17) {
      goto LABEL_19;
    }
    uint64_t v19 = 1;
    do
    {
      unint64_t v20 = v19;
      if (v18 == v19) {
        break;
      }
      uint64_t v21 = *(void *)&v5[8 * v19];
      uint64_t v22 = v17[v19++];
    }
    while (v21 == v22);
    if (v20 < v16) {
LABEL_19:
    }
      nitro::ndarray<unsigned char>::operator-<half>(a1, a2);
    nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(a1, a2, a3, a4);
  }
  return a1;
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(void *a1, void *a2, double a3, float a4)
{
  size_t v6 = (char *)a1[2];
  uint64_t v7 = (char *)a1[3];
  unint64_t v8 = (v7 - v6) >> 3;
  unint64_t v9 = (void *)a2[2];
  if (v8 != (uint64_t)(a2[3] - (void)v9) >> 3) {
    goto LABEL_13;
  }
  if (v7 == v6) {
    return;
  }
  uint64_t v10 = v8 <= 1 ? 1 : (v7 - v6) >> 3;
  if (*(void *)v6 != *v9) {
    goto LABEL_13;
  }
  uint64_t v11 = 1;
  do
  {
    unint64_t v12 = v11;
    if (v10 == v11) {
      break;
    }
    uint64_t v13 = *(void *)&v6[8 * v11];
    uint64_t v14 = v9[v11++];
  }
  while (v13 == v14);
  if (v12 < v8) {
LABEL_13:
  }
    nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1})::{lambda(void)#1}::operator()();
  int64_t v15 = v7 - v6;
  if (v7 == v6 || !*a1) {
    return;
  }
  if ((unint64_t)(v15 - 8) < 8)
  {
    uint64_t v16 = 1;
    uint64_t v17 = (char *)a1[2];
    do
    {
LABEL_20:
      uint64_t v23 = *(void *)v17;
      v17 += 8;
      v16 *= v23;
    }
    while (v17 != v7);
    goto LABEL_21;
  }
  unint64_t v18 = ((unint64_t)(v15 - 8) >> 3) + 1;
  uint64_t v17 = &v6[8 * (v18 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v19 = v6 + 8;
  uint64_t v20 = 1;
  uint64_t v21 = v18 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v22 = 1;
  do
  {
    v20 *= *(v19 - 1);
    v22 *= *v19;
    v19 += 2;
    v21 -= 2;
  }
  while (v21);
  uint64_t v16 = v22 * v20;
  if (v18 != (v18 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v16) {
    return;
  }
  unint64_t v24 = v15 >> 3;
  if (v15 >> 3 == 3)
  {
    unint64_t v45 = *(void *)v6;
    if (*(void *)v6)
    {
      unint64_t v46 = 0;
      uint64_t v47 = a2[8];
      uint64_t v48 = a1[8];
      do
      {
        if (*((void *)v6 + 1))
        {
          unint64_t v49 = 0;
          uint64_t v50 = v47;
          uint64_t v51 = v48;
          do
          {
            if (*((void *)v6 + 2))
            {
              unint64_t v54 = 0;
              uint64_t v55 = v50;
              uint64_t v56 = v51;
              do
              {
                _H0 = *(_WORD *)(*a2 + 2 * v55);
                __asm { FCVT            S0, H0 }
                LOBYTE(a4) = *(unsigned char *)(*a1 + v56);
                a4 = (float)LODWORD(a4);
                *(unsigned char *)(*a1 + v56) = (int)(float)(a4 - _S0);
                BOOL v52 = (void *)a1[5];
                v56 += v52[2];
                unint64_t v53 = (void *)a2[5];
                v55 += v53[2];
                ++v54;
                size_t v6 = (char *)a1[2];
              }
              while (v54 < *((void *)v6 + 2));
            }
            else
            {
              BOOL v52 = (void *)a1[5];
              unint64_t v53 = (void *)a2[5];
            }
            v51 += v52[1];
            v50 += v53[1];
            ++v49;
          }
          while (v49 < *((void *)v6 + 1));
          unint64_t v45 = *(void *)v6;
        }
        else
        {
          BOOL v52 = (void *)a1[5];
          unint64_t v53 = (void *)a2[5];
        }
        v48 += *v52;
        v47 += *v53;
        ++v46;
      }
      while (v46 < v45);
    }
  }
  else
  {
    if (v24 != 2)
    {
      if (v24 == 1)
      {
        if (*(void *)v6)
        {
          unint64_t v25 = 0;
          uint64_t v26 = a2[8];
          uint64_t v27 = a1[8];
          do
          {
            _H0 = *(_WORD *)(*a2 + 2 * v26);
            __asm { FCVT            S0, H0 }
            LOBYTE(a4) = *(unsigned char *)(*a1 + v27);
            a4 = (float)LODWORD(a4);
            *(unsigned char *)(*a1 + v27) = (int)(float)(a4 - _S0);
            v27 += *(void *)a1[5];
            v26 += *(void *)a2[5];
            ++v25;
          }
          while (v25 < *(void *)a1[2]);
        }
        return;
      }
      if (v15 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v59 = operator new(v15);
      bzero(v59, v15 & 0xFFFFFFFFFFFFFFF8);
      if (v24 <= 1) {
        unint64_t v61 = 1;
      }
      else {
        unint64_t v61 = v15 >> 3;
      }
      unint64_t v62 = v61 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        uint64_t v63 = a1[5];
        if (v61 < 2) {
          break;
        }
        uint64_t v66 = 0;
        uint64_t v67 = 0;
        unint64_t v68 = (void *)(v63 + 8);
        unint64_t v69 = v61 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v70 = v59 + 1;
        do
        {
          v66 += *(v68 - 1) * *(v70 - 1);
          v67 += *v68 * *v70;
          v70 += 2;
          v68 += 2;
          v69 -= 2;
        }
        while (v69);
        uint64_t v64 = v67 + v66;
        unint64_t v65 = v61 & 0xFFFFFFFFFFFFFFFELL;
        if (v61 != v62) {
          goto LABEL_60;
        }
LABEL_62:
        uint64_t v78 = a2[5];
        if (v61 < 2)
        {
          uint64_t v79 = 0;
          unint64_t v80 = 0;
LABEL_67:
          unint64_t v86 = v61 - v80;
          uint64_t v87 = v80;
          uint64_t v88 = (uint64_t *)(v78 + v87 * 8);
          unint64_t v89 = &v59[v87];
          do
          {
            uint64_t v91 = *v89++;
            uint64_t v90 = v91;
            uint64_t v92 = *v88++;
            v79 += v92 * v90;
            --v86;
          }
          while (v86);
          goto LABEL_69;
        }
        uint64_t v81 = 0;
        uint64_t v82 = 0;
        uint64_t v83 = (void *)(v78 + 8);
        unint64_t v84 = v61 & 0xFFFFFFFFFFFFFFFELL;
        BOOL v85 = v59 + 1;
        do
        {
          v81 += *(v83 - 1) * *(v85 - 1);
          v82 += *v83 * *v85;
          v85 += 2;
          v83 += 2;
          v84 -= 2;
        }
        while (v84);
        uint64_t v79 = v82 + v81;
        unint64_t v80 = v61 & 0xFFFFFFFFFFFFFFFELL;
        if (v61 != v62) {
          goto LABEL_67;
        }
LABEL_69:
        _H0 = *(_WORD *)(*a2 + 2 * (a2[8] + v79));
        __asm { FCVT            S0, H0 }
        LOBYTE(v60) = *(unsigned char *)(*a1 + v64);
        float v60 = (float)LODWORD(v60);
        *(unsigned char *)(*a1 + v64) = (int)(float)(v60 - _S0);
        if ((int)((unint64_t)v15 >> 3) >= 1)
        {
          uint64_t v95 = a1[2];
          uint64_t v96 = ((unint64_t)v15 >> 3) + 1;
          unint64_t v97 = (unint64_t)v15 >> 3;
          while (1)
          {
            uint64_t v98 = (v96 - 2);
            unint64_t v99 = v59[v98] + 1;
            v59[v98] = v99;
            if (v99 < *(void *)(v95 + v98 * 8)) {
              break;
            }
            v59[(v96 - 2)] = 0;
            LODWORD(v97) = v97 - 1;
            if ((unint64_t)--v96 <= 1) {
              goto LABEL_75;
            }
          }
          if ((int)v97 > 0) {
            continue;
          }
        }
LABEL_75:
        operator delete(v59);
        return;
      }
      uint64_t v64 = 0;
      unint64_t v65 = 0;
LABEL_60:
      unint64_t v71 = v61 - v65;
      uint64_t v72 = v65;
      unint64_t v73 = (uint64_t *)(v63 + v72 * 8);
      uint64_t v74 = &v59[v72];
      do
      {
        uint64_t v76 = *v74++;
        uint64_t v75 = v76;
        uint64_t v77 = *v73++;
        v64 += v77 * v75;
        --v71;
      }
      while (v71);
      goto LABEL_62;
    }
    unint64_t v34 = *(void *)v6;
    if (*(void *)v6)
    {
      unint64_t v35 = 0;
      uint64_t v36 = a2[8];
      uint64_t v37 = a1[8];
      do
      {
        if (*((void *)v6 + 1))
        {
          unint64_t v40 = 0;
          uint64_t v41 = v36;
          uint64_t v42 = v37;
          do
          {
            _H0 = *(_WORD *)(*a2 + 2 * v41);
            __asm { FCVT            S0, H0 }
            LOBYTE(a4) = *(unsigned char *)(*a1 + v42);
            a4 = (float)LODWORD(a4);
            *(unsigned char *)(*a1 + v42) = (int)(float)(a4 - _S0);
            uint64_t v38 = (void *)a1[5];
            v42 += v38[1];
            unint64_t v39 = (void *)a2[5];
            v41 += v39[1];
            ++v40;
            size_t v6 = (char *)a1[2];
          }
          while (v40 < *((void *)v6 + 1));
          unint64_t v34 = *(void *)v6;
        }
        else
        {
          uint64_t v38 = (void *)a1[5];
          unint64_t v39 = (void *)a2[5];
        }
        v37 += *v38;
        v36 += *v39;
        ++v35;
      }
      while (v35 < v34);
    }
  }
}

void sub_192573C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void void nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192573D7C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192573D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192573D88);
}

uint64_t *nitro::ndarray<int>::operator-=<half>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    uint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  uint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  unint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    int64_t v15 = (void *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<int>::operator-<half>(a1, a2);
    nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(a1, a2);
  }
  return a1;
}

void nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (unint64_t *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v13 = *a1;
  if (!*a1) {
    return;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v14 = 1;
    int64_t v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v16 = ((v12 - 8) >> 3) + 1;
  int64_t v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v17 = v4 + 1;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  uint64_t v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v171 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v76 = 0;
    uint64_t v77 = a2[8];
    uint64_t v78 = a1[8];
    unint64_t v79 = v4[1];
    unint64_t v80 = (uint64_t *)a1[5];
    uint64_t v166 = (uint64_t *)a2[5];
    uint64_t v81 = v13 + 4 * v78 + 32;
    uint64_t v169 = *v166;
    uint64_t v170 = *v80;
    uint64_t v168 = 4 * *v80;
    uint64_t v82 = 2 * v77 + 16;
    uint64_t v167 = 2 * *v166;
    while (!v79)
    {
LABEL_50:
      v78 += v170;
      v77 += v169;
      ++v76;
      v81 += v168;
      v82 += v167;
      if (v76 == v171) {
        return;
      }
    }
    uint64_t v83 = 0;
    unint64_t v84 = v4[2];
    uint64_t v85 = *a2;
    uint64_t v86 = a2[5];
    uint64_t v87 = v80[1];
    unint64_t v88 = v84 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v89 = (float16x8_t *)(*a2 + v82);
    uint64_t v90 = v166[1];
    uint64_t v91 = (int32x4_t *)v81;
    uint64_t v92 = v77;
    uint64_t v93 = v78;
    while (1)
    {
      if (v84)
      {
        uint64_t v94 = v80[2];
        uint64_t v95 = *(void *)(v86 + 16);
        if (v84 >= 0x10 && (v94 == 1 ? (BOOL v96 = v95 == 1) : (BOOL v96 = 0), v96))
        {
          uint64_t v98 = v92 + v88 * v95;
          uint64_t v107 = v89;
          uint64_t v108 = v91;
          unint64_t v109 = v84 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v99 = v93 + v88 * v94;
          do
          {
            float16x8_t v110 = v107[-1];
            float32x4_t v111 = vcvtq_f32_f16(*(float16x4_t *)v110.i8);
            float32x4_t v112 = vsubq_f32(vcvtq_f32_s32(v108[1]), vcvt_hight_f32_f16(*v107));
            int32x4_t v113 = vcvtq_s32_f32(vsubq_f32(vcvtq_f32_s32(v108[-1]), vcvt_hight_f32_f16(v110)));
            int32x4_t v114 = vcvtq_s32_f32(vsubq_f32(vcvtq_f32_s32(*v108), vcvtq_f32_f16(*(float16x4_t *)v107->i8)));
            v108[-2] = vcvtq_s32_f32(vsubq_f32(vcvtq_f32_s32(v108[-2]), v111));
            v108[-1] = v113;
            int32x4_t *v108 = v114;
            v108[1] = vcvtq_s32_f32(v112);
            v108 += 4;
            v107 += 2;
            v109 -= 16;
          }
          while (v109);
          unint64_t v97 = v84 & 0xFFFFFFFFFFFFFFF0;
          if (v84 == v88) {
            goto LABEL_53;
          }
        }
        else
        {
          unint64_t v97 = 0;
          uint64_t v98 = v92;
          uint64_t v99 = v93;
        }
        unint64_t v100 = v84 - v97;
        uint64_t v101 = (__int16 *)(v85 + 2 * v98);
        uint64_t v102 = 2 * v95;
        uint64_t v103 = 4 * v94;
        uint64_t v104 = (int *)(v13 + 4 * v99);
        do
        {
          _H0 = *v101;
          __asm { FCVT            S0, H0 }
          *uint64_t v104 = (int)(float)((float)*v104 - _S0);
          uint64_t v101 = (__int16 *)((char *)v101 + v102);
          uint64_t v104 = (int *)((char *)v104 + v103);
          --v100;
        }
        while (v100);
      }
LABEL_53:
      v93 += v87;
      v92 += v90;
      ++v83;
      uint64_t v91 = (int32x4_t *)((char *)v91 + 4 * v87);
      unint64_t v89 = (float16x8_t *)((char *)v89 + 2 * v90);
      if (v83 == v79) {
        goto LABEL_50;
      }
    }
  }
  if (v22 == 2)
  {
    unint64_t v40 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v41 = 0;
    uint64_t v42 = a2[8];
    uint64_t v43 = a1[8];
    unint64_t v44 = v4[1];
    uint64_t v45 = *a2;
    unint64_t v46 = (uint64_t *)a2[5];
    uint64_t v47 = (uint64_t *)a1[5];
    uint64_t v48 = *v47;
    uint64_t v49 = *v46;
    unint64_t v50 = v44 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v51 = v13 + 4 * v43 + 32;
    uint64_t v52 = 4 * *v47;
    uint64_t v53 = *a2 + 2 * v42 + 16;
    uint64_t v54 = 2 * *v46;
    while (1)
    {
      if (v44)
      {
        uint64_t v55 = v47[1];
        uint64_t v56 = v46[1];
        if (v44 >= 0x10 && (v55 == 1 ? (_ZF = v56 == 1) : (_ZF = 0), _ZF))
        {
          uint64_t v59 = v42 + v50 * v56;
          unint64_t v68 = (float16x8_t *)v53;
          unint64_t v69 = (int32x4_t *)v51;
          unint64_t v70 = v44 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v60 = v43 + v50 * v55;
          do
          {
            float16x8_t v71 = v68[-1];
            float32x4_t v72 = vcvtq_f32_f16(*(float16x4_t *)v71.i8);
            float32x4_t v73 = vsubq_f32(vcvtq_f32_s32(v69[1]), vcvt_hight_f32_f16(*v68));
            int32x4_t v74 = vcvtq_s32_f32(vsubq_f32(vcvtq_f32_s32(v69[-1]), vcvt_hight_f32_f16(v71)));
            int32x4_t v75 = vcvtq_s32_f32(vsubq_f32(vcvtq_f32_s32(*v69), vcvtq_f32_f16(*(float16x4_t *)v68->i8)));
            v69[-2] = vcvtq_s32_f32(vsubq_f32(vcvtq_f32_s32(v69[-2]), v72));
            v69[-1] = v74;
            *unint64_t v69 = v75;
            v69[1] = vcvtq_s32_f32(v73);
            v69 += 4;
            v68 += 2;
            v70 -= 16;
          }
          while (v70);
          unint64_t v58 = v44 & 0xFFFFFFFFFFFFFFF0;
          if (v44 == v50) {
            goto LABEL_33;
          }
        }
        else
        {
          unint64_t v58 = 0;
          uint64_t v59 = v42;
          uint64_t v60 = v43;
        }
        unint64_t v61 = v44 - v58;
        unint64_t v62 = (__int16 *)(v45 + 2 * v59);
        uint64_t v63 = 2 * v56;
        uint64_t v64 = 4 * v55;
        unint64_t v65 = (int *)(v13 + 4 * v60);
        do
        {
          _H0 = *v62;
          __asm { FCVT            S0, H0 }
          *unint64_t v65 = (int)(float)((float)*v65 - _S0);
          unint64_t v62 = (__int16 *)((char *)v62 + v63);
          unint64_t v65 = (int *)((char *)v65 + v64);
          --v61;
        }
        while (v61);
      }
LABEL_33:
      v43 += v48;
      v42 += v49;
      ++v41;
      v51 += v52;
      v53 += v54;
      if (v41 == v40) {
        return;
      }
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    int32x4_t v115 = operator new(v12);
    bzero(v115, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v116 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v117 = 1;
    }
    else {
      unint64_t v117 = v12 >> 3;
    }
    uint64_t v118 = a2[5];
    uint64_t v119 = a2[8];
    uint64_t v120 = v117 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v121 = a1[5];
    while (v117 >= 2)
    {
      uint64_t v124 = 0;
      uint64_t v125 = 0;
      uint64_t v126 = v117 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v127 = (void *)(v121 + 8);
      uint64_t v128 = v115 + 1;
      do
      {
        v124 += *(v127 - 1) * *(v128 - 1);
        v125 += *v127 * *v128;
        v128 += 2;
        v127 += 2;
        v126 -= 2;
      }
      while (v126);
      uint64_t v122 = v125 + v124;
      uint64_t v123 = v117 & 0x1FFFFFFFFFFFFFFELL;
      if (v117 != v120) {
        goto LABEL_78;
      }
LABEL_80:
      if (v117 < 2)
      {
        uint64_t v136 = 0;
        uint64_t v137 = 0;
LABEL_85:
        unint64_t v143 = v117 - v137;
        uint64_t v144 = v137;
        uint64_t v145 = (uint64_t *)(v118 + 8 * v137);
        uint64_t v146 = &v115[v144];
        do
        {
          uint64_t v148 = *v146++;
          uint64_t v147 = v148;
          uint64_t v149 = *v145++;
          v136 += v149 * v147;
          --v143;
        }
        while (v143);
        goto LABEL_87;
      }
      uint64_t v138 = 0;
      uint64_t v139 = 0;
      uint64_t v140 = v117 & 0x1FFFFFFFFFFFFFFELL;
      unint64_t v141 = (void *)(v118 + 8);
      float32x4_t v142 = v115 + 1;
      do
      {
        v138 += *(v141 - 1) * *(v142 - 1);
        v139 += *v141 * *v142;
        v142 += 2;
        v141 += 2;
        v140 -= 2;
      }
      while (v140);
      uint64_t v136 = v139 + v138;
      uint64_t v137 = v117 & 0x1FFFFFFFFFFFFFFELL;
      if (v117 != v120) {
        goto LABEL_85;
      }
LABEL_87:
      _H0 = *(_WORD *)(v116 + 2 * (v119 + v136));
      __asm { FCVT            S0, H0 }
      *(_DWORD *)(v13 + 4 * v122) = (int)(float)((float)*(int *)(v13 + 4 * v122) - _S0);
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v152 = (v12 >> 3) + 1;
        int v153 = v12 >> 3;
        while (1)
        {
          uint64_t v154 = (v152 - 2);
          unint64_t v155 = v115[v154] + 1;
          v115[v154] = v155;
          if (v155 < v4[v154]) {
            break;
          }
          v115[(v152 - 2)] = 0;
          --v153;
          if ((unint64_t)--v152 <= 1) {
            goto LABEL_93;
          }
        }
        if (v153 > 0) {
          continue;
        }
      }
LABEL_93:
      operator delete(v115);
      return;
    }
    uint64_t v122 = 0;
    uint64_t v123 = 0;
LABEL_78:
    unint64_t v129 = v117 - v123;
    uint64_t v130 = v123;
    uint64_t v131 = (uint64_t *)(v121 + 8 * v123);
    uint64_t v132 = &v115[v130];
    do
    {
      uint64_t v134 = *v132++;
      uint64_t v133 = v134;
      uint64_t v135 = *v131++;
      v122 += v135 * v133;
      --v129;
    }
    while (v129);
    goto LABEL_80;
  }
  unint64_t v23 = *v4;
  if (!*v4) {
    return;
  }
  uint64_t v24 = a2[8];
  uint64_t v25 = a1[8];
  uint64_t v26 = *a2;
  uint64_t v27 = *(void *)a1[5];
  uint64_t v28 = *(void *)a2[5];
  if (v23 < 0x10)
  {
    unint64_t v29 = 0;
LABEL_28:
    unint64_t v30 = v23 - v29;
    unint64_t v31 = (__int16 *)(v26 + 2 * v24);
    uint64_t v32 = 2 * v28;
    uint64_t v33 = 4 * v27;
    unint64_t v34 = (int *)(v13 + 4 * v25);
    do
    {
      _H0 = *v31;
      __asm { FCVT            S0, H0 }
      *unint64_t v34 = (int)(float)((float)*v34 - _S0);
      unint64_t v31 = (__int16 *)((char *)v31 + v32);
      unint64_t v34 = (int *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  unint64_t v29 = 0;
  if (v27 != 1) {
    goto LABEL_28;
  }
  if (v28 != 1) {
    goto LABEL_28;
  }
  unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  uint64_t v156 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v157 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v158 = (float16x8_t *)(v26 + 2 * v24 + 16);
  uint64_t v159 = (int32x4_t *)(v13 + 4 * v25 + 32);
  unint64_t v160 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    float16x8_t v161 = v158[-1];
    float32x4_t v162 = vcvtq_f32_f16(*(float16x4_t *)v161.i8);
    float32x4_t v163 = vsubq_f32(vcvtq_f32_s32(v159[1]), vcvt_hight_f32_f16(*v158));
    int32x4_t v164 = vcvtq_s32_f32(vsubq_f32(vcvtq_f32_s32(v159[-1]), vcvt_hight_f32_f16(v161)));
    int32x4_t v165 = vcvtq_s32_f32(vsubq_f32(vcvtq_f32_s32(*v159), vcvtq_f32_f16(*(float16x4_t *)v158->i8)));
    v159[-2] = vcvtq_s32_f32(vsubq_f32(vcvtq_f32_s32(v159[-2]), v162));
    v159[-1] = v164;
    int32x4_t *v159 = v165;
    v159[1] = vcvtq_s32_f32(v163);
    v159 += 4;
    v158 += 2;
    v160 -= 16;
  }
  while (v160);
  uint64_t v24 = v156;
  uint64_t v25 = v157;
  if (v23 != v29) {
    goto LABEL_28;
  }
}

void sub_1925746E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::operator-<half>(void *a1, void *a2)
{
  unint64_t v5 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      unint64_t v39 = 0;
      unint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        unint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        unint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      unint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        uint64_t v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      unint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        uint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        unint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      unint64_t v29 = 0;
      unint64_t v30 = 0;
      unint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      unint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        unint64_t v29 = v26;
        unint64_t v31 = v27;
        memcpy(v26, v24, v25);
        unint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<int>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<int>::copy(&v28);
    }
  }
  nitro::ndarray<int>::copy(a1);
}

void sub_192574A6C(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_192574A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      unint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  unint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    unint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  unint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_192574B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x192574AF8);
  }
  JUMPOUT(0x192574AC8);
}

void sub_192574B2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x192574B08);
  }
  JUMPOUT(0x192574AD0);
}

void sub_192574B3C()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x192574AE0);
  }
  JUMPOUT(0x192574AD8);
}

void nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192574DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192574F60(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192574F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192574F6CLL);
}

uint64_t *nitro::ndarray<half>::operator-=<half>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    unint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  unint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  unint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    std::locale v15 = (void *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<half>::operator-<half>(a1, a2);
    nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(a1, a2);
  }
  return a1;
}

float16x8_t nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (unint64_t *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return result;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return result;
  }
  uint64_t v160 = *a1;
  if (!*a1) {
    return result;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v13 = 1;
    unint64_t v14 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v20 = *v14++;
      v13 *= v20;
    }
    while (v14 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v15 = ((v12 - 8) >> 3) + 1;
  unint64_t v14 = &v4[v15 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v16 = v4 + 1;
  uint64_t v17 = 1;
  uint64_t v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v19 = 1;
  do
  {
    v17 *= *(v16 - 1);
    v19 *= *v16;
    v16 += 2;
    v18 -= 2;
  }
  while (v18);
  uint64_t v13 = v19 * v17;
  if (v15 != (v15 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v13) {
    return result;
  }
  uint64_t v21 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v155 = *v4;
    if (!*v4) {
      return result;
    }
    uint64_t v71 = 0;
    uint64_t v72 = a2[8];
    uint64_t v73 = a1[8];
    unint64_t v74 = v4[1];
    int32x4_t v75 = (uint64_t *)a1[5];
    uint64_t v152 = (uint64_t *)a2[5];
    uint64_t v153 = *v152;
    uint64_t v154 = *v75;
    uint64_t v157 = 2 * *v75;
    uint64_t v156 = 2 * *v152;
    uint64_t v150 = 2 * v72;
    uint64_t v151 = 2 * v73;
    uint64_t v76 = 2 * v73 + v160 + 16;
    uint64_t v77 = 2 * v72 + 16;
    while (!v74)
    {
LABEL_55:
      v73 += v154;
      v72 += v153;
      ++v71;
      v76 += v157;
      v77 += v156;
      if (v71 == v155) {
        return result;
      }
    }
    uint64_t v78 = 0;
    uint64_t v79 = v150 + v156 * v71;
    unint64_t v80 = v4[2];
    uint64_t v81 = *a2;
    uint64_t v82 = v75[1];
    uint64_t v83 = v152[1];
    uint64_t v84 = 2 * v82;
    uint64_t v159 = v151 + v157 * v71;
    uint64_t v85 = 2 * v83;
    unint64_t v86 = v80 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v87 = a2[5];
    unint64_t v88 = (float16x8_t *)(*a2 + v77);
    unint64_t v89 = (float16x8_t *)v76;
    uint64_t v90 = v72;
    uint64_t v91 = v73;
    while (!v80)
    {
LABEL_58:
      v91 += v82;
      v90 += v83;
      ++v78;
      unint64_t v89 = (float16x8_t *)((char *)v89 + v84);
      unint64_t v88 = (float16x8_t *)((char *)v88 + v85);
      if (v78 == v74) {
        goto LABEL_55;
      }
    }
    uint64_t v92 = v75[2];
    uint64_t v93 = *(void *)(v87 + 16);
    if (v80 >= 0x10)
    {
      unint64_t v94 = 0;
      if (v92 != 1) {
        goto LABEL_62;
      }
      uint64_t v95 = v90;
      uint64_t v96 = v91;
      if (v93 != 1)
      {
LABEL_63:
        unint64_t v97 = v80 - v94;
        uint64_t v98 = (short float *)(v81 + 2 * v95);
        uint64_t v99 = 2 * v93;
        uint64_t v100 = 2 * v92;
        uint64_t v101 = (short float *)(v160 + 2 * v96);
        do
        {
          *(short float *)result.i16 = *v101 - *v98;
          short float *v101 = *(short float *)result.i16;
          uint64_t v98 = (short float *)((char *)v98 + v99);
          uint64_t v101 = (short float *)((char *)v101 + v100);
          --v97;
        }
        while (v97);
        goto LABEL_58;
      }
      if (v160 + v159 + v84 * v78 >= v81 + v79 + 2 * v80 + v85 * v78
        || v81 + v79 + v85 * v78 >= v160 + v159 + 2 * v80 + v84 * v78)
      {
        uint64_t v95 = v90 + v86;
        uint64_t v103 = v88;
        uint64_t v104 = v89;
        unint64_t v105 = v80 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v96 = v91 + v86;
        do
        {
          float16x8_t result = vsubq_f16(v104[-1], v103[-1]);
          float16x8_t v106 = vsubq_f16(*v104, *v103);
          v104[-1] = result;
          *uint64_t v104 = v106;
          v104 += 2;
          v103 += 2;
          v105 -= 16;
        }
        while (v105);
        unint64_t v94 = v80 & 0xFFFFFFFFFFFFFFF0;
        if (v80 == v86) {
          goto LABEL_58;
        }
        goto LABEL_63;
      }
    }
    unint64_t v94 = 0;
LABEL_62:
    uint64_t v95 = v90;
    uint64_t v96 = v91;
    goto LABEL_63;
  }
  if (v21 == 2)
  {
    unint64_t v37 = *v4;
    if (!*v4) {
      return result;
    }
    uint64_t v38 = 0;
    uint64_t v39 = a2[8];
    uint64_t v40 = a1[8];
    unint64_t v41 = v4[1];
    uint64_t v42 = (uint64_t *)a2[5];
    uint64_t v43 = (uint64_t *)a1[5];
    uint64_t v44 = *v43;
    uint64_t v45 = *v42;
    uint64_t v46 = 2 * *v43;
    uint64_t v47 = 2 * *v42;
    unint64_t v48 = v41 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v49 = *a2;
    uint64_t v50 = 2 * v40 + v160 + 16;
    uint64_t v51 = 2 * v39 + *a2 + 16;
    uint64_t v52 = v160 + 2 * v40;
    uint64_t v53 = v160 + 2 * v40 + 2 * v41;
    uint64_t v54 = *a2 + 2 * v39;
    uint64_t v55 = *a2 + 2 * v39 + 2 * v41;
    while (!v41)
    {
LABEL_34:
      v40 += v44;
      v39 += v45;
      ++v38;
      v50 += v46;
      v51 += v47;
      if (v38 == v37) {
        return result;
      }
    }
    uint64_t v56 = v43[1];
    uint64_t v57 = v42[1];
    if (v41 >= 0x10)
    {
      unint64_t v58 = 0;
      if (v56 != 1) {
        goto LABEL_38;
      }
      uint64_t v59 = v39;
      uint64_t v60 = v40;
      if (v57 != 1)
      {
LABEL_39:
        unint64_t v61 = v41 - v58;
        unint64_t v62 = (short float *)(v49 + 2 * v59);
        uint64_t v63 = 2 * v57;
        uint64_t v64 = 2 * v56;
        unint64_t v65 = (short float *)(v160 + 2 * v60);
        do
        {
          *(short float *)result.i16 = *v65 - *v62;
          *unint64_t v65 = *(short float *)result.i16;
          unint64_t v62 = (short float *)((char *)v62 + v63);
          unint64_t v65 = (short float *)((char *)v65 + v64);
          --v61;
        }
        while (v61);
        goto LABEL_34;
      }
      if (v52 + v46 * v38 >= (unint64_t)(v55 + v47 * v38)
        || v54 + v47 * v38 >= (unint64_t)(v53 + v46 * v38))
      {
        uint64_t v59 = v39 + v48;
        uint64_t v67 = (float16x8_t *)v51;
        unint64_t v68 = (float16x8_t *)v50;
        unint64_t v69 = v41 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v60 = v40 + v48;
        do
        {
          float16x8_t result = vsubq_f16(v68[-1], v67[-1]);
          float16x8_t v70 = vsubq_f16(*v68, *v67);
          v68[-1] = result;
          *unint64_t v68 = v70;
          v68 += 2;
          v67 += 2;
          v69 -= 16;
        }
        while (v69);
        unint64_t v58 = v41 & 0xFFFFFFFFFFFFFFF0;
        if (v41 == v48) {
          goto LABEL_34;
        }
        goto LABEL_39;
      }
    }
    unint64_t v58 = 0;
LABEL_38:
    uint64_t v59 = v39;
    uint64_t v60 = v40;
    goto LABEL_39;
  }
  if (v21 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v107 = operator new(v12);
    bzero(v107, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v108 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v109 = 1;
    }
    else {
      unint64_t v109 = v12 >> 3;
    }
    uint64_t v110 = a2[5];
    uint64_t v111 = a2[8];
    uint64_t v112 = v109 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v113 = a1[5];
    while (v109 >= 2)
    {
      uint64_t v116 = 0;
      uint64_t v117 = 0;
      uint64_t v118 = v109 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v119 = (void *)(v113 + 8);
      uint64_t v120 = v107 + 1;
      do
      {
        v116 += *(v119 - 1) * *(v120 - 1);
        v117 += *v119 * *v120;
        v120 += 2;
        v119 += 2;
        v118 -= 2;
      }
      while (v118);
      uint64_t v114 = v117 + v116;
      uint64_t v115 = v109 & 0x1FFFFFFFFFFFFFFELL;
      if (v109 != v112) {
        goto LABEL_87;
      }
LABEL_89:
      if (v109 < 2)
      {
        uint64_t v128 = 0;
        uint64_t v129 = 0;
LABEL_94:
        unint64_t v135 = v109 - v129;
        uint64_t v136 = v129;
        uint64_t v137 = (uint64_t *)(v110 + 8 * v129);
        uint64_t v138 = &v107[v136];
        do
        {
          uint64_t v140 = *v138++;
          uint64_t v139 = v140;
          uint64_t v141 = *v137++;
          v128 += v141 * v139;
          --v135;
        }
        while (v135);
        goto LABEL_96;
      }
      uint64_t v130 = 0;
      uint64_t v131 = 0;
      uint64_t v132 = v109 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v133 = (void *)(v110 + 8);
      uint64_t v134 = v107 + 1;
      do
      {
        v130 += *(v133 - 1) * *(v134 - 1);
        v131 += *v133 * *v134;
        v134 += 2;
        v133 += 2;
        v132 -= 2;
      }
      while (v132);
      uint64_t v128 = v131 + v130;
      uint64_t v129 = v109 & 0x1FFFFFFFFFFFFFFELL;
      if (v109 != v112) {
        goto LABEL_94;
      }
LABEL_96:
      *(short float *)(v160 + 2 * v114) = *(short float *)(v160 + 2 * v114) - *(short float *)(v108 + 2 * (v111 + v128));
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v142 = (v12 >> 3) + 1;
        int v143 = v12 >> 3;
        while (1)
        {
          uint64_t v144 = (v142 - 2);
          unint64_t v145 = v107[v144] + 1;
          v107[v144] = v145;
          if (v145 < v4[v144]) {
            break;
          }
          v107[(v142 - 2)] = 0;
          --v143;
          if ((unint64_t)--v142 <= 1) {
            goto LABEL_102;
          }
        }
        if (v143 > 0) {
          continue;
        }
      }
LABEL_102:
      operator delete(v107);
      return result;
    }
    uint64_t v114 = 0;
    uint64_t v115 = 0;
LABEL_87:
    unint64_t v121 = v109 - v115;
    uint64_t v122 = v115;
    uint64_t v123 = (uint64_t *)(v113 + 8 * v115);
    uint64_t v124 = &v107[v122];
    do
    {
      uint64_t v126 = *v124++;
      uint64_t v125 = v126;
      uint64_t v127 = *v123++;
      v114 += v127 * v125;
      --v121;
    }
    while (v121);
    goto LABEL_89;
  }
  unint64_t v22 = *v4;
  if (!*v4) {
    return result;
  }
  uint64_t v23 = a2[8];
  uint64_t v24 = a1[8];
  uint64_t v25 = *a2;
  uint64_t v26 = *(void *)a1[5];
  uint64_t v27 = *(void *)a2[5];
  if (v22 < 0x10) {
    goto LABEL_27;
  }
  unint64_t v28 = 0;
  if (v26 != 1 || v27 != 1) {
    goto LABEL_28;
  }
  if (v160 + 2 * v24 < v25 + 2 * v22 + 2 * v23 && v25 + 2 * v23 < v160 + 2 * v22 + 2 * v24)
  {
LABEL_27:
    unint64_t v28 = 0;
LABEL_28:
    uint64_t v29 = a2[8];
    uint64_t v30 = a1[8];
LABEL_29:
    unint64_t v31 = v22 - v28;
    uint64_t v32 = (short float *)(v25 + 2 * v29);
    uint64_t v33 = 2 * v27;
    uint64_t v34 = 2 * v26;
    unint64_t v35 = (short float *)(v160 + 2 * v30);
    do
    {
      *(short float *)result.i16 = *v35 - *v32;
      *unint64_t v35 = *(short float *)result.i16;
      uint64_t v32 = (short float *)((char *)v32 + v33);
      unint64_t v35 = (short float *)((char *)v35 + v34);
      --v31;
    }
    while (v31);
    return result;
  }
  unint64_t v28 = v22 & 0xFFFFFFFFFFFFFFF0;
  uint64_t v29 = v23 + (v22 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = v24 + (v22 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = (float16x8_t *)(v25 + 2 * v23 + 16);
  uint64_t v147 = (float16x8_t *)(v160 + 2 * v24 + 16);
  unint64_t v148 = v22 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    float16x8_t result = vsubq_f16(v147[-1], v146[-1]);
    float16x8_t v149 = vsubq_f16(*v147, *v146);
    v147[-1] = result;
    *uint64_t v147 = v149;
    v146 += 2;
    v147 += 2;
    v148 -= 16;
  }
  while (v148);
  if (v22 != v28) {
    goto LABEL_29;
  }
  return result;
}

void sub_192575914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::operator-<half>(void *a1, void *a2)
{
  unint64_t v5 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        uint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        uint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      unint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      uint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        unint64_t v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        unint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        uint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      unint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      uint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        uint64_t v29 = v26;
        unint64_t v31 = v27;
        memcpy(v26, v24, v25);
        uint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<half>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<half>::copy(&v28);
    }
  }
  nitro::ndarray<half>::copy(a1);
}

void sub_192575C98(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_192575CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      uint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  uint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    uint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  uint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_192575D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x192575D24);
  }
  JUMPOUT(0x192575CF4);
}

void sub_192575D58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x192575D34);
  }
  JUMPOUT(0x192575CFCLL);
}

void sub_192575D68()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x192575D0CLL);
  }
  JUMPOUT(0x192575D04);
}

void nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192576004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19257618C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925761A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192576198);
}

uint64_t *nitro::ndarray<float>::operator-=<half>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    unint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  unint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  unint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    std::locale v15 = (void *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<float>::operator-<half>(a1, a2);
    nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(a1, a2);
  }
  return a1;
}

void nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (unint64_t *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v13 = *a1;
  if (!*a1) {
    return;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v16 = ((v12 - 8) >> 3) + 1;
  std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v17 = v4 + 1;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  uint64_t v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v168 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v75 = 0;
    uint64_t v76 = a2[8];
    uint64_t v77 = a1[8];
    unint64_t v78 = v4[1];
    uint64_t v79 = (uint64_t *)a1[5];
    float32x4_t v163 = (uint64_t *)a2[5];
    uint64_t v80 = v13 + 4 * v77 + 32;
    uint64_t v166 = *v163;
    uint64_t v167 = *v79;
    uint64_t v165 = 4 * *v79;
    uint64_t v81 = 2 * v76 + 16;
    uint64_t v164 = 2 * *v163;
    while (!v78)
    {
LABEL_50:
      v77 += v167;
      v76 += v166;
      ++v75;
      v80 += v165;
      v81 += v164;
      if (v75 == v168) {
        return;
      }
    }
    uint64_t v82 = 0;
    unint64_t v83 = v4[2];
    uint64_t v84 = *a2;
    uint64_t v85 = a2[5];
    uint64_t v86 = v79[1];
    unint64_t v87 = v83 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v88 = (float16x4_t *)(*a2 + v81);
    uint64_t v89 = v163[1];
    uint64_t v90 = (float32x4_t *)v80;
    uint64_t v91 = v76;
    uint64_t v92 = v77;
    while (1)
    {
      if (v83)
      {
        uint64_t v93 = v79[2];
        uint64_t v94 = *(void *)(v85 + 16);
        if (v83 >= 0x10 && (v93 == 1 ? (BOOL v95 = v94 == 1) : (BOOL v95 = 0), v95))
        {
          uint64_t v97 = v91 + v87 * v94;
          float16x8_t v106 = v88;
          uint64_t v107 = v90;
          unint64_t v108 = v83 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v98 = v92 + v87 * v93;
          do
          {
            float16x8_t v109 = *(float16x8_t *)v106[-2].i8;
            float32x4_t v110 = vsubq_f32(v107[-1], vcvt_hight_f32_f16(v109));
            float32x4_t v111 = vsubq_f32(*v107, vcvtq_f32_f16(*v106));
            float32x4_t v112 = vsubq_f32(v107[1], vcvt_hight_f32_f16(*(float16x8_t *)v106->i8));
            v107[-2] = vsubq_f32(v107[-2], vcvtq_f32_f16(*(float16x4_t *)v109.i8));
            v107[-1] = v110;
            float32x4_t *v107 = v111;
            v107[1] = v112;
            v107 += 4;
            v106 += 4;
            v108 -= 16;
          }
          while (v108);
          unint64_t v96 = v83 & 0xFFFFFFFFFFFFFFF0;
          if (v83 == v87) {
            goto LABEL_53;
          }
        }
        else
        {
          unint64_t v96 = 0;
          uint64_t v97 = v91;
          uint64_t v98 = v92;
        }
        unint64_t v99 = v83 - v96;
        uint64_t v100 = (__int16 *)(v84 + 2 * v97);
        uint64_t v101 = 2 * v94;
        uint64_t v102 = 4 * v93;
        uint64_t v103 = (float *)(v13 + 4 * v98);
        do
        {
          _H0 = *v100;
          __asm { FCVT            S0, H0 }
          float *v103 = *v103 - _S0;
          uint64_t v100 = (__int16 *)((char *)v100 + v101);
          uint64_t v103 = (float *)((char *)v103 + v102);
          --v99;
        }
        while (v99);
      }
LABEL_53:
      v92 += v86;
      v91 += v89;
      ++v82;
      uint64_t v90 = (float32x4_t *)((char *)v90 + 4 * v86);
      unint64_t v88 = (float16x4_t *)((char *)v88 + 2 * v89);
      if (v82 == v78) {
        goto LABEL_50;
      }
    }
  }
  if (v22 == 2)
  {
    unint64_t v40 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v41 = 0;
    uint64_t v42 = a2[8];
    uint64_t v43 = a1[8];
    unint64_t v44 = v4[1];
    uint64_t v45 = *a2;
    uint64_t v46 = (uint64_t *)a2[5];
    uint64_t v47 = (uint64_t *)a1[5];
    uint64_t v48 = *v47;
    uint64_t v49 = *v46;
    unint64_t v50 = v44 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v51 = v13 + 4 * v43 + 32;
    uint64_t v52 = 4 * *v47;
    uint64_t v53 = *a2 + 2 * v42 + 16;
    uint64_t v54 = 2 * *v46;
    while (1)
    {
      if (v44)
      {
        uint64_t v55 = v47[1];
        uint64_t v56 = v46[1];
        if (v44 >= 0x10 && (v55 == 1 ? (_ZF = v56 == 1) : (_ZF = 0), _ZF))
        {
          uint64_t v59 = v42 + v50 * v56;
          unint64_t v68 = (float16x4_t *)v53;
          unint64_t v69 = (float32x4_t *)v51;
          unint64_t v70 = v44 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v60 = v43 + v50 * v55;
          do
          {
            float16x8_t v71 = *(float16x8_t *)v68[-2].i8;
            float32x4_t v72 = vsubq_f32(v69[-1], vcvt_hight_f32_f16(v71));
            float32x4_t v73 = vsubq_f32(*v69, vcvtq_f32_f16(*v68));
            float32x4_t v74 = vsubq_f32(v69[1], vcvt_hight_f32_f16(*(float16x8_t *)v68->i8));
            v69[-2] = vsubq_f32(v69[-2], vcvtq_f32_f16(*(float16x4_t *)v71.i8));
            v69[-1] = v72;
            *unint64_t v69 = v73;
            v69[1] = v74;
            v69 += 4;
            v68 += 4;
            v70 -= 16;
          }
          while (v70);
          unint64_t v58 = v44 & 0xFFFFFFFFFFFFFFF0;
          if (v44 == v50) {
            goto LABEL_33;
          }
        }
        else
        {
          unint64_t v58 = 0;
          uint64_t v59 = v42;
          uint64_t v60 = v43;
        }
        unint64_t v61 = v44 - v58;
        unint64_t v62 = (__int16 *)(v45 + 2 * v59);
        uint64_t v63 = 2 * v56;
        uint64_t v64 = 4 * v55;
        unint64_t v65 = (float *)(v13 + 4 * v60);
        do
        {
          _H0 = *v62;
          __asm { FCVT            S0, H0 }
          *unint64_t v65 = *v65 - _S0;
          unint64_t v62 = (__int16 *)((char *)v62 + v63);
          unint64_t v65 = (float *)((char *)v65 + v64);
          --v61;
        }
        while (v61);
      }
LABEL_33:
      v43 += v48;
      v42 += v49;
      ++v41;
      v51 += v52;
      v53 += v54;
      if (v41 == v40) {
        return;
      }
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v113 = operator new(v12);
    bzero(v113, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v114 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v115 = 1;
    }
    else {
      unint64_t v115 = v12 >> 3;
    }
    uint64_t v116 = a2[5];
    uint64_t v117 = a2[8];
    uint64_t v118 = v115 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v119 = a1[5];
    while (v115 >= 2)
    {
      uint64_t v122 = 0;
      uint64_t v123 = 0;
      uint64_t v124 = v115 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v125 = (void *)(v119 + 8);
      uint64_t v126 = v113 + 1;
      do
      {
        v122 += *(v125 - 1) * *(v126 - 1);
        v123 += *v125 * *v126;
        v126 += 2;
        v125 += 2;
        v124 -= 2;
      }
      while (v124);
      uint64_t v120 = v123 + v122;
      uint64_t v121 = v115 & 0x1FFFFFFFFFFFFFFELL;
      if (v115 != v118) {
        goto LABEL_78;
      }
LABEL_80:
      if (v115 < 2)
      {
        uint64_t v134 = 0;
        uint64_t v135 = 0;
LABEL_85:
        unint64_t v141 = v115 - v135;
        uint64_t v142 = v135;
        int v143 = (uint64_t *)(v116 + 8 * v135);
        uint64_t v144 = &v113[v142];
        do
        {
          uint64_t v146 = *v144++;
          uint64_t v145 = v146;
          uint64_t v147 = *v143++;
          v134 += v147 * v145;
          --v141;
        }
        while (v141);
        goto LABEL_87;
      }
      uint64_t v136 = 0;
      uint64_t v137 = 0;
      uint64_t v138 = v115 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v139 = (void *)(v116 + 8);
      uint64_t v140 = v113 + 1;
      do
      {
        v136 += *(v139 - 1) * *(v140 - 1);
        v137 += *v139 * *v140;
        v140 += 2;
        v139 += 2;
        v138 -= 2;
      }
      while (v138);
      uint64_t v134 = v137 + v136;
      uint64_t v135 = v115 & 0x1FFFFFFFFFFFFFFELL;
      if (v115 != v118) {
        goto LABEL_85;
      }
LABEL_87:
      _H0 = *(_WORD *)(v114 + 2 * (v117 + v134));
      __asm { FCVT            S0, H0 }
      *(float *)(v13 + 4 * v120) = *(float *)(v13 + 4 * v120) - _S0;
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v150 = (v12 >> 3) + 1;
        int v151 = v12 >> 3;
        while (1)
        {
          uint64_t v152 = (v150 - 2);
          unint64_t v153 = v113[v152] + 1;
          v113[v152] = v153;
          if (v153 < v4[v152]) {
            break;
          }
          v113[(v150 - 2)] = 0;
          --v151;
          if ((unint64_t)--v150 <= 1) {
            goto LABEL_93;
          }
        }
        if (v151 > 0) {
          continue;
        }
      }
LABEL_93:
      operator delete(v113);
      return;
    }
    uint64_t v120 = 0;
    uint64_t v121 = 0;
LABEL_78:
    unint64_t v127 = v115 - v121;
    uint64_t v128 = v121;
    uint64_t v129 = (uint64_t *)(v119 + 8 * v121);
    uint64_t v130 = &v113[v128];
    do
    {
      uint64_t v132 = *v130++;
      uint64_t v131 = v132;
      uint64_t v133 = *v129++;
      v120 += v133 * v131;
      --v127;
    }
    while (v127);
    goto LABEL_80;
  }
  unint64_t v23 = *v4;
  if (!*v4) {
    return;
  }
  uint64_t v24 = a2[8];
  uint64_t v25 = a1[8];
  uint64_t v26 = *a2;
  uint64_t v27 = *(void *)a1[5];
  uint64_t v28 = *(void *)a2[5];
  if (v23 < 0x10)
  {
    unint64_t v29 = 0;
LABEL_28:
    unint64_t v30 = v23 - v29;
    unint64_t v31 = (__int16 *)(v26 + 2 * v24);
    uint64_t v32 = 2 * v28;
    uint64_t v33 = 4 * v27;
    uint64_t v34 = (float *)(v13 + 4 * v25);
    do
    {
      _H0 = *v31;
      __asm { FCVT            S0, H0 }
      *uint64_t v34 = *v34 - _S0;
      unint64_t v31 = (__int16 *)((char *)v31 + v32);
      uint64_t v34 = (float *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  unint64_t v29 = 0;
  if (v27 != 1) {
    goto LABEL_28;
  }
  if (v28 != 1) {
    goto LABEL_28;
  }
  unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  uint64_t v154 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v155 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v156 = (float16x4_t *)(v26 + 2 * v24 + 16);
  uint64_t v157 = (float32x4_t *)(v13 + 4 * v25 + 32);
  unint64_t v158 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    float16x8_t v159 = *(float16x8_t *)v156[-2].i8;
    float32x4_t v160 = vsubq_f32(v157[-1], vcvt_hight_f32_f16(v159));
    float32x4_t v161 = vsubq_f32(*v157, vcvtq_f32_f16(*v156));
    float32x4_t v162 = vsubq_f32(v157[1], vcvt_hight_f32_f16(*(float16x8_t *)v156->i8));
    v157[-2] = vsubq_f32(v157[-2], vcvtq_f32_f16(*(float16x4_t *)v159.i8));
    v157[-1] = v160;
    *uint64_t v157 = v161;
    v157[1] = v162;
    v157 += 4;
    v156 += 4;
    v158 -= 16;
  }
  while (v158);
  uint64_t v24 = v154;
  uint64_t v25 = v155;
  if (v23 != v29) {
    goto LABEL_28;
  }
}

void sub_192576A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::operator-<half>(void *a1, void *a2)
{
  unint64_t v5 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      unint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        unint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        uint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      unint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      unint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        unint64_t v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        uint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        uint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      unint64_t v29 = 0;
      unint64_t v30 = 0;
      unint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      unint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        unint64_t v29 = v26;
        unint64_t v31 = v27;
        memcpy(v26, v24, v25);
        unint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<float>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<float>::copy(&v28);
    }
  }
  nitro::ndarray<float>::copy(a1);
}

void sub_192576DFC(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_192576E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      unint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  unint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    unint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  unint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_192576EAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x192576E88);
  }
  JUMPOUT(0x192576E58);
}

void sub_192576EBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x192576E98);
  }
  JUMPOUT(0x192576E60);
}

void sub_192576ECC()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x192576E70);
  }
  JUMPOUT(0x192576E68);
}

void nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192577168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925772F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192577304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925772FCLL);
}

void *nitro::ndarray<unsigned char>::operator-=<float>(void *a1, void *a2, double a3, float a4)
{
  uint64_t v5 = (char *)a1[2];
  size_t v6 = (char *)a1[3];
  uint64_t v7 = v6 - v5;
  if (v6 == v5 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v7 - 8) < 8)
  {
    uint64_t v8 = 1;
    unint64_t v9 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v15 = *(void *)v9;
      v9 += 8;
      v8 *= v15;
    }
    while (v9 != v6);
    goto LABEL_9;
  }
  unint64_t v10 = ((unint64_t)(v7 - 8) >> 3) + 1;
  unint64_t v9 = &v5[8 * (v10 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v11 = v5 + 8;
  uint64_t v12 = 1;
  uint64_t v13 = v10 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v14 = 1;
  do
  {
    v12 *= *(v11 - 1);
    v14 *= *v11;
    v11 += 2;
    v13 -= 2;
  }
  while (v13);
  uint64_t v8 = v14 * v12;
  if (v10 != (v10 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v8)
  {
    unint64_t v16 = v7 >> 3;
    uint64_t v17 = (void *)a2[2];
    if (v16 != (uint64_t)(a2[3] - (void)v17) >> 3) {
      goto LABEL_19;
    }
    uint64_t v18 = v16 <= 1 ? 1 : v16;
    if (*(void *)v5 != *v17) {
      goto LABEL_19;
    }
    uint64_t v19 = 1;
    do
    {
      unint64_t v20 = v19;
      if (v18 == v19) {
        break;
      }
      uint64_t v21 = *(void *)&v5[8 * v19];
      uint64_t v22 = v17[v19++];
    }
    while (v21 == v22);
    if (v20 < v16) {
LABEL_19:
    }
      nitro::ndarray<unsigned char>::operator-<float>(a1, a2);
    nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(a1, a2, a3, a4);
  }
  return a1;
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(void *a1, void *a2, double a3, float a4)
{
  size_t v6 = (char *)a1[2];
  uint64_t v7 = (char *)a1[3];
  unint64_t v8 = (v7 - v6) >> 3;
  unint64_t v9 = (void *)a2[2];
  if (v8 != (uint64_t)(a2[3] - (void)v9) >> 3) {
    goto LABEL_13;
  }
  if (v7 == v6) {
    return;
  }
  uint64_t v10 = v8 <= 1 ? 1 : (v7 - v6) >> 3;
  if (*(void *)v6 != *v9) {
    goto LABEL_13;
  }
  uint64_t v11 = 1;
  do
  {
    unint64_t v12 = v11;
    if (v10 == v11) {
      break;
    }
    uint64_t v13 = *(void *)&v6[8 * v11];
    uint64_t v14 = v9[v11++];
  }
  while (v13 == v14);
  if (v12 < v8) {
LABEL_13:
  }
    nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1})::{lambda(void)#1}::operator()();
  int64_t v15 = v7 - v6;
  if (v7 == v6 || !*a1) {
    return;
  }
  if ((unint64_t)(v15 - 8) < 8)
  {
    uint64_t v16 = 1;
    uint64_t v17 = (char *)a1[2];
    do
    {
LABEL_20:
      uint64_t v23 = *(void *)v17;
      v17 += 8;
      v16 *= v23;
    }
    while (v17 != v7);
    goto LABEL_21;
  }
  unint64_t v18 = ((unint64_t)(v15 - 8) >> 3) + 1;
  uint64_t v17 = &v6[8 * (v18 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v19 = v6 + 8;
  uint64_t v20 = 1;
  uint64_t v21 = v18 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v22 = 1;
  do
  {
    v20 *= *(v19 - 1);
    v22 *= *v19;
    v19 += 2;
    v21 -= 2;
  }
  while (v21);
  uint64_t v16 = v22 * v20;
  if (v18 != (v18 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v16) {
    return;
  }
  unint64_t v24 = v15 >> 3;
  if (v15 >> 3 == 3)
  {
    unint64_t v37 = *(void *)v6;
    if (*(void *)v6)
    {
      unint64_t v38 = 0;
      uint64_t v39 = a2[8];
      uint64_t v40 = a1[8];
      do
      {
        if (*((void *)v6 + 1))
        {
          unint64_t v41 = 0;
          uint64_t v42 = v39;
          uint64_t v43 = v40;
          do
          {
            if (*((void *)v6 + 2))
            {
              unint64_t v46 = 0;
              uint64_t v47 = v42;
              uint64_t v48 = v43;
              do
              {
                LOBYTE(a4) = *(unsigned char *)(*a1 + v48);
                a4 = (float)LODWORD(a4);
                *(unsigned char *)(*a1 + v48) = (int)(float)(a4 - *(float *)(*a2 + 4 * v47));
                unint64_t v44 = (void *)a1[5];
                v48 += v44[2];
                uint64_t v45 = (void *)a2[5];
                v47 += v45[2];
                ++v46;
                size_t v6 = (char *)a1[2];
              }
              while (v46 < *((void *)v6 + 2));
            }
            else
            {
              unint64_t v44 = (void *)a1[5];
              uint64_t v45 = (void *)a2[5];
            }
            v43 += v44[1];
            v42 += v45[1];
            ++v41;
          }
          while (v41 < *((void *)v6 + 1));
          unint64_t v37 = *(void *)v6;
        }
        else
        {
          unint64_t v44 = (void *)a1[5];
          uint64_t v45 = (void *)a2[5];
        }
        v40 += *v44;
        v39 += *v45;
        ++v38;
      }
      while (v38 < v37);
    }
  }
  else
  {
    if (v24 != 2)
    {
      if (v24 == 1)
      {
        if (*(void *)v6)
        {
          unint64_t v25 = 0;
          uint64_t v26 = a2[8];
          uint64_t v27 = a1[8];
          do
          {
            LOBYTE(a4) = *(unsigned char *)(*a1 + v27);
            a4 = (float)LODWORD(a4);
            *(unsigned char *)(*a1 + v27) = (int)(float)(a4 - *(float *)(*a2 + 4 * v26));
            v27 += *(void *)a1[5];
            v26 += *(void *)a2[5];
            ++v25;
          }
          while (v25 < *(void *)a1[2]);
        }
        return;
      }
      if (v15 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v49 = operator new(v15);
      bzero(v49, v15 & 0xFFFFFFFFFFFFFFF8);
      if (v24 <= 1) {
        unint64_t v51 = 1;
      }
      else {
        unint64_t v51 = v15 >> 3;
      }
      unint64_t v52 = v51 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        uint64_t v53 = a1[5];
        if (v51 < 2) {
          break;
        }
        uint64_t v56 = 0;
        uint64_t v57 = 0;
        unint64_t v58 = (void *)(v53 + 8);
        unint64_t v59 = v51 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v60 = v49 + 1;
        do
        {
          v56 += *(v58 - 1) * *(v60 - 1);
          v57 += *v58 * *v60;
          v60 += 2;
          v58 += 2;
          v59 -= 2;
        }
        while (v59);
        uint64_t v54 = v57 + v56;
        unint64_t v55 = v51 & 0xFFFFFFFFFFFFFFFELL;
        if (v51 != v52) {
          goto LABEL_60;
        }
LABEL_62:
        uint64_t v68 = a2[5];
        if (v51 < 2)
        {
          uint64_t v69 = 0;
          unint64_t v70 = 0;
LABEL_67:
          unint64_t v76 = v51 - v70;
          uint64_t v77 = v70;
          unint64_t v78 = (uint64_t *)(v68 + v77 * 8);
          uint64_t v79 = &v49[v77];
          do
          {
            uint64_t v81 = *v79++;
            uint64_t v80 = v81;
            uint64_t v82 = *v78++;
            v69 += v82 * v80;
            --v76;
          }
          while (v76);
          goto LABEL_69;
        }
        uint64_t v71 = 0;
        uint64_t v72 = 0;
        float32x4_t v73 = (void *)(v68 + 8);
        unint64_t v74 = v51 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v75 = v49 + 1;
        do
        {
          v71 += *(v73 - 1) * *(v75 - 1);
          v72 += *v73 * *v75;
          v75 += 2;
          v73 += 2;
          v74 -= 2;
        }
        while (v74);
        uint64_t v69 = v72 + v71;
        unint64_t v70 = v51 & 0xFFFFFFFFFFFFFFFELL;
        if (v51 != v52) {
          goto LABEL_67;
        }
LABEL_69:
        LOBYTE(v50) = *(unsigned char *)(*a1 + v54);
        float v50 = (float)LODWORD(v50);
        *(unsigned char *)(*a1 + v54) = (int)(float)(v50 - *(float *)(*a2 + 4 * (a2[8] + v69)));
        if ((int)((unint64_t)v15 >> 3) >= 1)
        {
          uint64_t v83 = a1[2];
          uint64_t v84 = ((unint64_t)v15 >> 3) + 1;
          unint64_t v85 = (unint64_t)v15 >> 3;
          while (1)
          {
            uint64_t v86 = (v84 - 2);
            unint64_t v87 = v49[v86] + 1;
            v49[v86] = v87;
            if (v87 < *(void *)(v83 + v86 * 8)) {
              break;
            }
            v49[(v84 - 2)] = 0;
            LODWORD(v85) = v85 - 1;
            if ((unint64_t)--v84 <= 1) {
              goto LABEL_75;
            }
          }
          if ((int)v85 > 0) {
            continue;
          }
        }
LABEL_75:
        operator delete(v49);
        return;
      }
      uint64_t v54 = 0;
      unint64_t v55 = 0;
LABEL_60:
      unint64_t v61 = v51 - v55;
      uint64_t v62 = v55;
      uint64_t v63 = (uint64_t *)(v53 + v62 * 8);
      uint64_t v64 = &v49[v62];
      do
      {
        uint64_t v66 = *v64++;
        uint64_t v65 = v66;
        uint64_t v67 = *v63++;
        v54 += v67 * v65;
        --v61;
      }
      while (v61);
      goto LABEL_62;
    }
    unint64_t v28 = *(void *)v6;
    if (*(void *)v6)
    {
      unint64_t v29 = 0;
      uint64_t v30 = a2[8];
      uint64_t v31 = a1[8];
      do
      {
        if (*((void *)v6 + 1))
        {
          unint64_t v34 = 0;
          uint64_t v35 = v30;
          uint64_t v36 = v31;
          do
          {
            LOBYTE(a4) = *(unsigned char *)(*a1 + v36);
            a4 = (float)LODWORD(a4);
            *(unsigned char *)(*a1 + v36) = (int)(float)(a4 - *(float *)(*a2 + 4 * v35));
            uint64_t v32 = (void *)a1[5];
            v36 += v32[1];
            uint64_t v33 = (void *)a2[5];
            v35 += v33[1];
            ++v34;
            size_t v6 = (char *)a1[2];
          }
          while (v34 < *((void *)v6 + 1));
          unint64_t v28 = *(void *)v6;
        }
        else
        {
          uint64_t v32 = (void *)a1[5];
          uint64_t v33 = (void *)a2[5];
        }
        v31 += *v32;
        v30 += *v33;
        ++v29;
      }
      while (v29 < v28);
    }
  }
}

void sub_1925779D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::operator-<float>(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  unint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      unint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v38 = (char *)operator new(v4 - v5);
        uint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        uint64_t v39 = v40;
      }
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      unint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      uint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        uint64_t v35 = v19;
        unint64_t v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      unint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        uint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        unint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      unint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      unint64_t v24 = (unsigned char *)a2[5];
      uint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        unint64_t v29 = v26;
        uint64_t v31 = v27;
        memcpy(v26, v24, v25);
        uint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<unsigned char>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<unsigned char>::copy(&v28);
    }
  }
  nitro::ndarray<unsigned char>::copy(a1);
}

void sub_192577D54(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_192577D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      unint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  unint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    uint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  uint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_192577E04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x192577DE0);
  }
  JUMPOUT(0x192577DB0);
}

void sub_192577E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x192577DF0);
  }
  JUMPOUT(0x192577DB8);
}

void sub_192577E24()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x192577DC8);
  }
  JUMPOUT(0x192577DC0);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    unint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925780C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192578248(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19257825C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192578254);
}

uint64_t *nitro::ndarray<int>::operator-=<float>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    unint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  unint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  unint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    std::locale v15 = (void *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<int>::operator-<float>(a1, a2);
    nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(a1, a2);
  }
  return a1;
}

void nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (unint64_t *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v13 = *a1;
  if (!*a1) {
    return;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v16 = ((v12 - 8) >> 3) + 1;
  std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v17 = v4 + 1;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  uint64_t v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v148 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v65 = 0;
    uint64_t v66 = a2[8];
    uint64_t v67 = a1[8];
    unint64_t v68 = v4[1];
    uint64_t v69 = (uint64_t *)a1[5];
    int v143 = (uint64_t *)a2[5];
    uint64_t v70 = v13 + 4 * v67 + 16;
    uint64_t v146 = *v143;
    uint64_t v147 = *v69;
    uint64_t v145 = 4 * *v69;
    uint64_t v71 = 4 * v66 + 16;
    uint64_t v144 = 4 * *v143;
    while (!v68)
    {
LABEL_50:
      v67 += v147;
      v66 += v146;
      ++v65;
      v70 += v145;
      v71 += v144;
      if (v65 == v148) {
        return;
      }
    }
    uint64_t v72 = 0;
    unint64_t v73 = v4[2];
    uint64_t v74 = *a2;
    uint64_t v75 = a2[5];
    uint64_t v76 = v69[1];
    unint64_t v77 = v73 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v78 = (float32x4_t *)(*a2 + v71);
    uint64_t v79 = v143[1];
    uint64_t v80 = (int32x4_t *)v70;
    uint64_t v81 = v66;
    uint64_t v82 = v67;
    while (1)
    {
      if (v73)
      {
        uint64_t v83 = v69[2];
        uint64_t v84 = *(void *)(v75 + 16);
        if (v73 >= 8 && (v83 == 1 ? (BOOL v85 = v84 == 1) : (BOOL v85 = 0), v85))
        {
          uint64_t v87 = v81 + v77 * v84;
          uint64_t v94 = v78;
          BOOL v95 = v80;
          unint64_t v96 = v73 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v88 = v82 + v77 * v83;
          do
          {
            int32x4_t v97 = vcvtq_s32_f32(vsubq_f32(vcvtq_f32_s32(*v95), *v94));
            v95[-1] = vcvtq_s32_f32(vsubq_f32(vcvtq_f32_s32(v95[-1]), v94[-1]));
            *BOOL v95 = v97;
            v95 += 2;
            v94 += 2;
            v96 -= 8;
          }
          while (v96);
          unint64_t v86 = v73 & 0xFFFFFFFFFFFFFFF8;
          if (v73 == v77) {
            goto LABEL_53;
          }
        }
        else
        {
          unint64_t v86 = 0;
          uint64_t v87 = v81;
          uint64_t v88 = v82;
        }
        unint64_t v89 = v73 - v86;
        uint64_t v90 = (float *)(v74 + 4 * v87);
        uint64_t v91 = 4 * v84;
        uint64_t v92 = 4 * v83;
        uint64_t v93 = (int *)(v13 + 4 * v88);
        do
        {
          int *v93 = (int)(float)((float)*v93 - *v90);
          uint64_t v90 = (float *)((char *)v90 + v91);
          uint64_t v93 = (int *)((char *)v93 + v92);
          --v89;
        }
        while (v89);
      }
LABEL_53:
      v82 += v76;
      v81 += v79;
      ++v72;
      uint64_t v80 = (int32x4_t *)((char *)v80 + 4 * v76);
      unint64_t v78 = (float32x4_t *)((char *)v78 + 4 * v79);
      if (v72 == v68) {
        goto LABEL_50;
      }
    }
  }
  if (v22 == 2)
  {
    unint64_t v35 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v36 = 0;
    uint64_t v37 = a2[8];
    uint64_t v38 = a1[8];
    unint64_t v39 = v4[1];
    uint64_t v40 = *a2;
    unint64_t v41 = (uint64_t *)a2[5];
    uint64_t v42 = (uint64_t *)a1[5];
    uint64_t v43 = *v42;
    uint64_t v44 = *v41;
    unint64_t v45 = v39 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v46 = v13 + 4 * v38 + 16;
    uint64_t v47 = 4 * *v42;
    uint64_t v48 = *a2 + 4 * v37 + 16;
    uint64_t v49 = 4 * *v41;
    while (1)
    {
      if (v39)
      {
        uint64_t v50 = v42[1];
        uint64_t v51 = v41[1];
        if (v39 >= 8 && (v50 == 1 ? (BOOL v52 = v51 == 1) : (BOOL v52 = 0), v52))
        {
          uint64_t v54 = v37 + v45 * v51;
          unint64_t v61 = (float32x4_t *)v48;
          uint64_t v62 = (int32x4_t *)v46;
          unint64_t v63 = v39 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v55 = v38 + v45 * v50;
          do
          {
            int32x4_t v64 = vcvtq_s32_f32(vsubq_f32(vcvtq_f32_s32(*v62), *v61));
            v62[-1] = vcvtq_s32_f32(vsubq_f32(vcvtq_f32_s32(v62[-1]), v61[-1]));
            *uint64_t v62 = v64;
            v62 += 2;
            v61 += 2;
            v63 -= 8;
          }
          while (v63);
          unint64_t v53 = v39 & 0xFFFFFFFFFFFFFFF8;
          if (v39 == v45) {
            goto LABEL_33;
          }
        }
        else
        {
          unint64_t v53 = 0;
          uint64_t v54 = v37;
          uint64_t v55 = v38;
        }
        unint64_t v56 = v39 - v53;
        uint64_t v57 = (float *)(v40 + 4 * v54);
        uint64_t v58 = 4 * v51;
        uint64_t v59 = 4 * v50;
        uint64_t v60 = (int *)(v13 + 4 * v55);
        do
        {
          *uint64_t v60 = (int)(float)((float)*v60 - *v57);
          uint64_t v57 = (float *)((char *)v57 + v58);
          uint64_t v60 = (int *)((char *)v60 + v59);
          --v56;
        }
        while (v56);
      }
LABEL_33:
      v38 += v43;
      v37 += v44;
      ++v36;
      v46 += v47;
      v48 += v49;
      if (v36 == v35) {
        return;
      }
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v98 = operator new(v12);
    bzero(v98, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v99 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v100 = 1;
    }
    else {
      unint64_t v100 = v12 >> 3;
    }
    uint64_t v101 = a2[5];
    uint64_t v102 = a2[8];
    uint64_t v103 = v100 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v104 = a1[5];
    while (v100 >= 2)
    {
      uint64_t v107 = 0;
      uint64_t v108 = 0;
      uint64_t v109 = v100 & 0x1FFFFFFFFFFFFFFELL;
      float32x4_t v110 = (void *)(v104 + 8);
      float32x4_t v111 = v98 + 1;
      do
      {
        v107 += *(v110 - 1) * *(v111 - 1);
        v108 += *v110 * *v111;
        v111 += 2;
        v110 += 2;
        v109 -= 2;
      }
      while (v109);
      uint64_t v105 = v108 + v107;
      uint64_t v106 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103) {
        goto LABEL_78;
      }
LABEL_80:
      if (v100 < 2)
      {
        uint64_t v119 = 0;
        uint64_t v120 = 0;
LABEL_85:
        unint64_t v126 = v100 - v120;
        uint64_t v127 = v120;
        uint64_t v128 = (uint64_t *)(v101 + 8 * v120);
        uint64_t v129 = &v98[v127];
        do
        {
          uint64_t v131 = *v129++;
          uint64_t v130 = v131;
          uint64_t v132 = *v128++;
          v119 += v132 * v130;
          --v126;
        }
        while (v126);
        goto LABEL_87;
      }
      uint64_t v121 = 0;
      uint64_t v122 = 0;
      uint64_t v123 = v100 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v124 = (void *)(v101 + 8);
      uint64_t v125 = v98 + 1;
      do
      {
        v121 += *(v124 - 1) * *(v125 - 1);
        v122 += *v124 * *v125;
        v125 += 2;
        v124 += 2;
        v123 -= 2;
      }
      while (v123);
      uint64_t v119 = v122 + v121;
      uint64_t v120 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103) {
        goto LABEL_85;
      }
LABEL_87:
      *(_DWORD *)(v13 + 4 * v105) = (int)(float)((float)*(int *)(v13 + 4 * v105) - *(float *)(v99 + 4 * (v102 + v119)));
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v133 = (v12 >> 3) + 1;
        int v134 = v12 >> 3;
        while (1)
        {
          uint64_t v135 = (v133 - 2);
          unint64_t v136 = v98[v135] + 1;
          v98[v135] = v136;
          if (v136 < v4[v135]) {
            break;
          }
          v98[(v133 - 2)] = 0;
          --v134;
          if ((unint64_t)--v133 <= 1) {
            goto LABEL_93;
          }
        }
        if (v134 > 0) {
          continue;
        }
      }
LABEL_93:
      operator delete(v98);
      return;
    }
    uint64_t v105 = 0;
    uint64_t v106 = 0;
LABEL_78:
    unint64_t v112 = v100 - v106;
    uint64_t v113 = v106;
    uint64_t v114 = (uint64_t *)(v104 + 8 * v106);
    unint64_t v115 = &v98[v113];
    do
    {
      uint64_t v117 = *v115++;
      uint64_t v116 = v117;
      uint64_t v118 = *v114++;
      v105 += v118 * v116;
      --v112;
    }
    while (v112);
    goto LABEL_80;
  }
  unint64_t v23 = *v4;
  if (!*v4) {
    return;
  }
  uint64_t v24 = a2[8];
  uint64_t v25 = a1[8];
  uint64_t v26 = *a2;
  uint64_t v27 = *(void *)a1[5];
  uint64_t v28 = *(void *)a2[5];
  if (v23 < 8)
  {
    unint64_t v29 = 0;
LABEL_28:
    unint64_t v30 = v23 - v29;
    uint64_t v31 = (float *)(v26 + 4 * v24);
    uint64_t v32 = 4 * v28;
    uint64_t v33 = 4 * v27;
    unint64_t v34 = (int *)(v13 + 4 * v25);
    do
    {
      *unint64_t v34 = (int)(float)((float)*v34 - *v31);
      uint64_t v31 = (float *)((char *)v31 + v32);
      unint64_t v34 = (int *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  unint64_t v29 = 0;
  if (v27 != 1) {
    goto LABEL_28;
  }
  if (v28 != 1) {
    goto LABEL_28;
  }
  unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v137 = v24 + (v23 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v138 = v25 + (v23 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v139 = (float32x4_t *)(v26 + 4 * v24 + 16);
  uint64_t v140 = (int32x4_t *)(v13 + 4 * v25 + 16);
  unint64_t v141 = v23 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    int32x4_t v142 = vcvtq_s32_f32(vsubq_f32(vcvtq_f32_s32(*v140), *v139));
    v140[-1] = vcvtq_s32_f32(vsubq_f32(vcvtq_f32_s32(v140[-1]), v139[-1]));
    int32x4_t *v140 = v142;
    v139 += 2;
    v140 += 2;
    v141 -= 8;
  }
  while (v141);
  uint64_t v24 = v137;
  uint64_t v25 = v138;
  if (v23 != v29) {
    goto LABEL_28;
  }
}

void sub_192578B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::operator-<float>(void *a1, void *a2)
{
  unint64_t v5 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      unint64_t v39 = 0;
      uint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        uint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        unint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      unint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        uint64_t v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      unint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        uint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        unint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      unint64_t v29 = 0;
      unint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      unint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        unint64_t v29 = v26;
        uint64_t v31 = v27;
        memcpy(v26, v24, v25);
        unint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<int>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<int>::copy(&v28);
    }
  }
  nitro::ndarray<int>::copy(a1);
}

void sub_192578EA4(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_192578EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      unint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  unint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    unint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  unint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_192578F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x192578F30);
  }
  JUMPOUT(0x192578F00);
}

void sub_192578F64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x192578F40);
  }
  JUMPOUT(0x192578F08);
}

void sub_192578F74()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x192578F18);
  }
  JUMPOUT(0x192578F10);
}

void nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192579210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192579398(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925793AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925793A4);
}

uint64_t *nitro::ndarray<half>::operator-=<float>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    unint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  unint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  unint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    std::locale v15 = (void *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<half>::operator-<float>(a1, a2);
    nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(a1, a2);
  }
  return a1;
}

void nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (unint64_t *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v13 = *a1;
  if (!*a1) {
    return;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v16 = ((v12 - 8) >> 3) + 1;
  std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v17 = v4 + 1;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  uint64_t v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v179 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v79 = 0;
    uint64_t v80 = a2[8];
    uint64_t v81 = a1[8];
    unint64_t v82 = v4[1];
    uint64_t v83 = (uint64_t *)a1[5];
    unint64_t v174 = (uint64_t *)a2[5];
    uint64_t v84 = v13 + 2 * v81 + 16;
    uint64_t v177 = *v174;
    uint64_t v178 = *v83;
    uint64_t v176 = 2 * *v83;
    uint64_t v85 = 4 * v80 + 32;
    uint64_t v175 = 4 * *v174;
    while (!v82)
    {
LABEL_50:
      v81 += v178;
      v80 += v177;
      ++v79;
      v84 += v176;
      v85 += v175;
      if (v79 == v179) {
        return;
      }
    }
    uint64_t v86 = 0;
    unint64_t v87 = v4[2];
    uint64_t v88 = *a2;
    uint64_t v89 = a2[5];
    uint64_t v90 = v83[1];
    unint64_t v91 = v87 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v92 = (float32x4_t *)(*a2 + v85);
    uint64_t v93 = v174[1];
    uint64_t v94 = (float16x4_t *)v84;
    uint64_t v95 = v80;
    uint64_t v96 = v81;
    while (1)
    {
      if (v87)
      {
        uint64_t v97 = v83[2];
        uint64_t v98 = *(void *)(v89 + 16);
        if (v87 >= 0x10 && (v97 == 1 ? (BOOL v99 = v98 == 1) : (BOOL v99 = 0), v99))
        {
          uint64_t v101 = v95 + v91 * v98;
          float32x4_t v111 = v92;
          unint64_t v112 = v94;
          unint64_t v113 = v87 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v102 = v96 + v91 * v97;
          do
          {
            float32x4_t v114 = v111[-2];
            float32x4_t v115 = v111[-1];
            float32x4_t v116 = *v111;
            float32x4_t v117 = v111[1];
            v111 += 4;
            float16x8_t v118 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(v112[-2]), v114)), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v112[-2].i8), v115));
            float16x8_t v119 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(*v112), v116)), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v112->i8), v117));
            *(float16x8_t *)v112[-2].i8 = v118;
            *(float16x8_t *)v112->i8 = v119;
            v112 += 4;
            v113 -= 16;
          }
          while (v113);
          unint64_t v100 = v87 & 0xFFFFFFFFFFFFFFF0;
          if (v87 == v91) {
            goto LABEL_53;
          }
        }
        else
        {
          unint64_t v100 = 0;
          uint64_t v101 = v95;
          uint64_t v102 = v96;
        }
        unint64_t v103 = v87 - v100;
        uint64_t v104 = (float *)(v88 + 4 * v101);
        uint64_t v105 = 4 * v98;
        uint64_t v106 = 2 * v97;
        uint64_t v107 = (__int16 *)(v13 + 2 * v102);
        do
        {
          _H1 = *v107;
          __asm { FCVT            S1, H1 }
          _S0 = _S1 - *v104;
          __asm { FCVT            H0, S0 }
          __int16 *v107 = LOWORD(_S0);
          uint64_t v104 = (float *)((char *)v104 + v105);
          uint64_t v107 = (__int16 *)((char *)v107 + v106);
          --v103;
        }
        while (v103);
      }
LABEL_53:
      v96 += v90;
      v95 += v93;
      ++v86;
      uint64_t v94 = (float16x4_t *)((char *)v94 + 2 * v90);
      uint64_t v92 = (float32x4_t *)((char *)v92 + 4 * v93);
      if (v86 == v82) {
        goto LABEL_50;
      }
    }
  }
  if (v22 == 2)
  {
    unint64_t v41 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v42 = 0;
    uint64_t v43 = a2[8];
    uint64_t v44 = a1[8];
    unint64_t v45 = v4[1];
    uint64_t v46 = *a2;
    uint64_t v47 = (uint64_t *)a2[5];
    uint64_t v48 = (uint64_t *)a1[5];
    uint64_t v49 = *v48;
    uint64_t v50 = *v47;
    unint64_t v51 = v45 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v52 = v13 + 2 * v44 + 16;
    uint64_t v53 = 2 * *v48;
    uint64_t v54 = *a2 + 4 * v43 + 32;
    uint64_t v55 = 4 * *v47;
    while (1)
    {
      if (v45)
      {
        uint64_t v56 = v48[1];
        uint64_t v57 = v47[1];
        if (v45 >= 0x10 && (v56 == 1 ? (_ZF = v57 == 1) : (_ZF = 0), _ZF))
        {
          uint64_t v60 = v43 + v51 * v57;
          uint64_t v70 = (float32x4_t *)v54;
          uint64_t v71 = (float16x4_t *)v52;
          unint64_t v72 = v45 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v61 = v44 + v51 * v56;
          do
          {
            float32x4_t v73 = v70[-2];
            float32x4_t v74 = v70[-1];
            float32x4_t v75 = *v70;
            float32x4_t v76 = v70[1];
            v70 += 4;
            float16x8_t v77 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(v71[-2]), v73)), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v71[-2].i8), v74));
            float16x8_t v78 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(*v71), v75)), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v71->i8), v76));
            *(float16x8_t *)v71[-2].i8 = v77;
            *(float16x8_t *)v71->i8 = v78;
            v71 += 4;
            v72 -= 16;
          }
          while (v72);
          unint64_t v59 = v45 & 0xFFFFFFFFFFFFFFF0;
          if (v45 == v51) {
            goto LABEL_33;
          }
        }
        else
        {
          unint64_t v59 = 0;
          uint64_t v60 = v43;
          uint64_t v61 = v44;
        }
        unint64_t v62 = v45 - v59;
        unint64_t v63 = (float *)(v46 + 4 * v60);
        uint64_t v64 = 4 * v57;
        uint64_t v65 = 2 * v56;
        uint64_t v66 = (__int16 *)(v13 + 2 * v61);
        do
        {
          _H1 = *v66;
          __asm { FCVT            S1, H1 }
          _S0 = _S1 - *v63;
          __asm { FCVT            H0, S0 }
          *uint64_t v66 = LOWORD(_S0);
          unint64_t v63 = (float *)((char *)v63 + v64);
          uint64_t v66 = (__int16 *)((char *)v66 + v65);
          --v62;
        }
        while (v62);
      }
LABEL_33:
      v44 += v49;
      v43 += v50;
      ++v42;
      v52 += v53;
      v54 += v55;
      if (v42 == v41) {
        return;
      }
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v120 = operator new(v12);
    bzero(v120, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v121 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v122 = 1;
    }
    else {
      unint64_t v122 = v12 >> 3;
    }
    uint64_t v123 = a2[5];
    uint64_t v124 = a2[8];
    uint64_t v125 = v122 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v126 = a1[5];
    while (v122 >= 2)
    {
      uint64_t v129 = 0;
      uint64_t v130 = 0;
      uint64_t v131 = v122 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v132 = (void *)(v126 + 8);
      uint64_t v133 = v120 + 1;
      do
      {
        v129 += *(v132 - 1) * *(v133 - 1);
        v130 += *v132 * *v133;
        v133 += 2;
        v132 += 2;
        v131 -= 2;
      }
      while (v131);
      uint64_t v127 = v130 + v129;
      uint64_t v128 = v122 & 0x1FFFFFFFFFFFFFFELL;
      if (v122 != v125) {
        goto LABEL_78;
      }
LABEL_80:
      if (v122 < 2)
      {
        uint64_t v141 = 0;
        uint64_t v142 = 0;
LABEL_85:
        unint64_t v148 = v122 - v142;
        uint64_t v149 = v142;
        uint64_t v150 = (uint64_t *)(v123 + 8 * v142);
        int v151 = &v120[v149];
        do
        {
          uint64_t v153 = *v151++;
          uint64_t v152 = v153;
          uint64_t v154 = *v150++;
          v141 += v154 * v152;
          --v148;
        }
        while (v148);
        goto LABEL_87;
      }
      uint64_t v143 = 0;
      uint64_t v144 = 0;
      uint64_t v145 = v122 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v146 = (void *)(v123 + 8);
      uint64_t v147 = v120 + 1;
      do
      {
        v143 += *(v146 - 1) * *(v147 - 1);
        v144 += *v146 * *v147;
        v147 += 2;
        v146 += 2;
        v145 -= 2;
      }
      while (v145);
      uint64_t v141 = v144 + v143;
      uint64_t v142 = v122 & 0x1FFFFFFFFFFFFFFELL;
      if (v122 != v125) {
        goto LABEL_85;
      }
LABEL_87:
      uint64_t v155 = 2 * v127;
      _H1 = *(_WORD *)(v13 + v155);
      __asm { FCVT            S1, H1 }
      _S0 = _S1 - *(float *)(v121 + 4 * (v124 + v141));
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v13 + v155) = LOWORD(_S0);
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v159 = (v12 >> 3) + 1;
        int v160 = v12 >> 3;
        while (1)
        {
          uint64_t v161 = (v159 - 2);
          unint64_t v162 = v120[v161] + 1;
          v120[v161] = v162;
          if (v162 < v4[v161]) {
            break;
          }
          v120[(v159 - 2)] = 0;
          --v160;
          if ((unint64_t)--v159 <= 1) {
            goto LABEL_93;
          }
        }
        if (v160 > 0) {
          continue;
        }
      }
LABEL_93:
      operator delete(v120);
      return;
    }
    uint64_t v127 = 0;
    uint64_t v128 = 0;
LABEL_78:
    unint64_t v134 = v122 - v128;
    uint64_t v135 = v128;
    unint64_t v136 = (uint64_t *)(v126 + 8 * v128);
    uint64_t v137 = &v120[v135];
    do
    {
      uint64_t v139 = *v137++;
      uint64_t v138 = v139;
      uint64_t v140 = *v136++;
      v127 += v140 * v138;
      --v134;
    }
    while (v134);
    goto LABEL_80;
  }
  unint64_t v23 = *v4;
  if (!*v4) {
    return;
  }
  uint64_t v24 = a2[8];
  uint64_t v25 = a1[8];
  uint64_t v26 = *a2;
  uint64_t v27 = *(void *)a1[5];
  uint64_t v28 = *(void *)a2[5];
  if (v23 < 0x10)
  {
    unint64_t v29 = 0;
LABEL_28:
    unint64_t v30 = v23 - v29;
    uint64_t v31 = (float *)(v26 + 4 * v24);
    uint64_t v32 = 4 * v28;
    uint64_t v33 = 2 * v27;
    unint64_t v34 = (__int16 *)(v13 + 2 * v25);
    do
    {
      _H1 = *v34;
      __asm { FCVT            S1, H1 }
      _S0 = _S1 - *v31;
      __asm { FCVT            H0, S0 }
      *unint64_t v34 = LOWORD(_S0);
      uint64_t v31 = (float *)((char *)v31 + v32);
      unint64_t v34 = (__int16 *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  unint64_t v29 = 0;
  if (v27 != 1) {
    goto LABEL_28;
  }
  if (v28 != 1) {
    goto LABEL_28;
  }
  unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  uint64_t v163 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v164 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = (float32x4_t *)(v26 + 4 * v24 + 32);
  uint64_t v166 = (float16x4_t *)(v13 + 2 * v25 + 16);
  unint64_t v167 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    float32x4_t v168 = v165[-2];
    float32x4_t v169 = v165[-1];
    float32x4_t v170 = *v165;
    float32x4_t v171 = v165[1];
    v165 += 4;
    float16x8_t v172 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(v166[-2]), v168)), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v166[-2].i8), v169));
    float16x8_t v173 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vsubq_f32(vcvtq_f32_f16(*v166), v170)), vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v166->i8), v171));
    *(float16x8_t *)v166[-2].i8 = v172;
    *(float16x8_t *)v166->i8 = v173;
    v166 += 4;
    v167 -= 16;
  }
  while (v167);
  uint64_t v24 = v163;
  uint64_t v25 = v164;
  if (v23 != v29) {
    goto LABEL_28;
  }
}

void sub_192579CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::operator-<float>(void *a1, void *a2)
{
  unint64_t v5 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      unint64_t v39 = 0;
      uint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        uint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        unint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      unint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        uint64_t v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      unint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        uint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        unint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      unint64_t v29 = 0;
      unint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      unint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        unint64_t v29 = v26;
        uint64_t v31 = v27;
        memcpy(v26, v24, v25);
        unint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<half>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<half>::copy(&v28);
    }
  }
  nitro::ndarray<half>::copy(a1);
}

void sub_19257A03C(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_19257A050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      unint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  unint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    unint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  unint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_19257A0EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x19257A0C8);
  }
  JUMPOUT(0x19257A098);
}

void sub_19257A0FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x19257A0D8);
  }
  JUMPOUT(0x19257A0A0);
}

void sub_19257A10C()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x19257A0B0);
  }
  JUMPOUT(0x19257A0A8);
}

void nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19257A3A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19257A530(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19257A544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19257A53CLL);
}

uint64_t *nitro::ndarray<float>::operator-=<float>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    unint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  unint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  unint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    std::locale v15 = (void *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<float>::operator-<float>(a1, a2);
    nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(a1, a2);
  }
  return a1;
}

float32x4_t nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (unint64_t *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return result;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return result;
  }
  uint64_t v160 = *a1;
  if (!*a1) {
    return result;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v13 = 1;
    unint64_t v14 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v20 = *v14++;
      v13 *= v20;
    }
    while (v14 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v15 = ((v12 - 8) >> 3) + 1;
  unint64_t v14 = &v4[v15 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v16 = v4 + 1;
  uint64_t v17 = 1;
  uint64_t v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v19 = 1;
  do
  {
    v17 *= *(v16 - 1);
    v19 *= *v16;
    v16 += 2;
    v18 -= 2;
  }
  while (v18);
  uint64_t v13 = v19 * v17;
  if (v15 != (v15 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v13) {
    return result;
  }
  uint64_t v21 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v155 = *v4;
    if (!*v4) {
      return result;
    }
    uint64_t v71 = 0;
    uint64_t v72 = a2[8];
    uint64_t v73 = a1[8];
    unint64_t v74 = v4[1];
    float32x4_t v75 = (uint64_t *)a1[5];
    uint64_t v152 = (uint64_t *)a2[5];
    uint64_t v153 = *v152;
    uint64_t v154 = *v75;
    uint64_t v157 = 4 * *v75;
    uint64_t v156 = 4 * *v152;
    uint64_t v150 = 4 * v72;
    uint64_t v151 = 4 * v73;
    uint64_t v76 = 4 * v73 + v160 + 16;
    uint64_t v77 = 4 * v72 + 16;
    while (!v74)
    {
LABEL_55:
      v73 += v154;
      v72 += v153;
      ++v71;
      v76 += v157;
      v77 += v156;
      if (v71 == v155) {
        return result;
      }
    }
    uint64_t v78 = 0;
    uint64_t v79 = v150 + v156 * v71;
    unint64_t v80 = v4[2];
    uint64_t v81 = *a2;
    uint64_t v82 = v75[1];
    uint64_t v83 = v152[1];
    uint64_t v84 = 4 * v82;
    uint64_t v159 = v151 + v157 * v71;
    uint64_t v85 = 4 * v83;
    unint64_t v86 = v80 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v87 = a2[5];
    uint64_t v88 = (float32x4_t *)(*a2 + v77);
    uint64_t v89 = (float32x4_t *)v76;
    uint64_t v90 = v72;
    uint64_t v91 = v73;
    while (!v80)
    {
LABEL_58:
      v91 += v82;
      v90 += v83;
      ++v78;
      uint64_t v89 = (float32x4_t *)((char *)v89 + v84);
      uint64_t v88 = (float32x4_t *)((char *)v88 + v85);
      if (v78 == v74) {
        goto LABEL_55;
      }
    }
    uint64_t v92 = v75[2];
    uint64_t v93 = *(void *)(v87 + 16);
    if (v80 >= 8)
    {
      unint64_t v94 = 0;
      if (v92 != 1) {
        goto LABEL_62;
      }
      uint64_t v95 = v90;
      uint64_t v96 = v91;
      if (v93 != 1)
      {
LABEL_63:
        unint64_t v97 = v80 - v94;
        uint64_t v98 = (float *)(v81 + 4 * v95);
        uint64_t v99 = 4 * v93;
        uint64_t v100 = 4 * v92;
        uint64_t v101 = (float *)(v160 + 4 * v96);
        do
        {
          result.f32[0] = *v101 - *v98;
          float *v101 = result.f32[0];
          uint64_t v98 = (float *)((char *)v98 + v99);
          uint64_t v101 = (float *)((char *)v101 + v100);
          --v97;
        }
        while (v97);
        goto LABEL_58;
      }
      if (v160 + v159 + v84 * v78 >= v81 + v79 + 4 * v80 + v85 * v78
        || v81 + v79 + v85 * v78 >= v160 + v159 + 4 * v80 + v84 * v78)
      {
        uint64_t v95 = v90 + v86;
        unint64_t v103 = v88;
        uint64_t v104 = v89;
        unint64_t v105 = v80 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v96 = v91 + v86;
        do
        {
          float32x4_t result = vsubq_f32(v104[-1], v103[-1]);
          float32x4_t v106 = vsubq_f32(*v104, *v103);
          v104[-1] = result;
          *uint64_t v104 = v106;
          v104 += 2;
          v103 += 2;
          v105 -= 8;
        }
        while (v105);
        unint64_t v94 = v80 & 0xFFFFFFFFFFFFFFF8;
        if (v80 == v86) {
          goto LABEL_58;
        }
        goto LABEL_63;
      }
    }
    unint64_t v94 = 0;
LABEL_62:
    uint64_t v95 = v90;
    uint64_t v96 = v91;
    goto LABEL_63;
  }
  if (v21 == 2)
  {
    unint64_t v37 = *v4;
    if (!*v4) {
      return result;
    }
    uint64_t v38 = 0;
    uint64_t v39 = a2[8];
    uint64_t v40 = a1[8];
    unint64_t v41 = v4[1];
    uint64_t v42 = (uint64_t *)a2[5];
    uint64_t v43 = (uint64_t *)a1[5];
    uint64_t v44 = *v43;
    uint64_t v45 = *v42;
    uint64_t v46 = 4 * *v43;
    uint64_t v47 = 4 * *v42;
    unint64_t v48 = v41 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v49 = *a2;
    uint64_t v50 = 4 * v40 + v160 + 16;
    uint64_t v51 = 4 * v39 + *a2 + 16;
    uint64_t v52 = v160 + 4 * v40;
    uint64_t v53 = v160 + 4 * v40 + 4 * v41;
    uint64_t v54 = *a2 + 4 * v39;
    uint64_t v55 = *a2 + 4 * v39 + 4 * v41;
    while (!v41)
    {
LABEL_34:
      v40 += v44;
      v39 += v45;
      ++v38;
      v50 += v46;
      v51 += v47;
      if (v38 == v37) {
        return result;
      }
    }
    uint64_t v56 = v43[1];
    uint64_t v57 = v42[1];
    if (v41 >= 8)
    {
      unint64_t v58 = 0;
      if (v56 != 1) {
        goto LABEL_38;
      }
      uint64_t v59 = v39;
      uint64_t v60 = v40;
      if (v57 != 1)
      {
LABEL_39:
        unint64_t v61 = v41 - v58;
        unint64_t v62 = (float *)(v49 + 4 * v59);
        uint64_t v63 = 4 * v57;
        uint64_t v64 = 4 * v56;
        uint64_t v65 = (float *)(v160 + 4 * v60);
        do
        {
          result.f32[0] = *v65 - *v62;
          *uint64_t v65 = result.f32[0];
          unint64_t v62 = (float *)((char *)v62 + v63);
          uint64_t v65 = (float *)((char *)v65 + v64);
          --v61;
        }
        while (v61);
        goto LABEL_34;
      }
      if (v52 + v46 * v38 >= (unint64_t)(v55 + v47 * v38)
        || v54 + v47 * v38 >= (unint64_t)(v53 + v46 * v38))
      {
        uint64_t v59 = v39 + v48;
        uint64_t v67 = (float32x4_t *)v51;
        unint64_t v68 = (float32x4_t *)v50;
        unint64_t v69 = v41 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v60 = v40 + v48;
        do
        {
          float32x4_t result = vsubq_f32(v68[-1], v67[-1]);
          float32x4_t v70 = vsubq_f32(*v68, *v67);
          v68[-1] = result;
          *unint64_t v68 = v70;
          v68 += 2;
          v67 += 2;
          v69 -= 8;
        }
        while (v69);
        unint64_t v58 = v41 & 0xFFFFFFFFFFFFFFF8;
        if (v41 == v48) {
          goto LABEL_34;
        }
        goto LABEL_39;
      }
    }
    unint64_t v58 = 0;
LABEL_38:
    uint64_t v59 = v39;
    uint64_t v60 = v40;
    goto LABEL_39;
  }
  if (v21 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v107 = operator new(v12);
    bzero(v107, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v108 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v109 = 1;
    }
    else {
      unint64_t v109 = v12 >> 3;
    }
    uint64_t v110 = a2[5];
    uint64_t v111 = a2[8];
    uint64_t v112 = v109 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v113 = a1[5];
    while (v109 >= 2)
    {
      uint64_t v116 = 0;
      uint64_t v117 = 0;
      uint64_t v118 = v109 & 0x1FFFFFFFFFFFFFFELL;
      float16x8_t v119 = (void *)(v113 + 8);
      uint64_t v120 = v107 + 1;
      do
      {
        v116 += *(v119 - 1) * *(v120 - 1);
        v117 += *v119 * *v120;
        v120 += 2;
        v119 += 2;
        v118 -= 2;
      }
      while (v118);
      uint64_t v114 = v117 + v116;
      uint64_t v115 = v109 & 0x1FFFFFFFFFFFFFFELL;
      if (v109 != v112) {
        goto LABEL_87;
      }
LABEL_89:
      if (v109 < 2)
      {
        uint64_t v128 = 0;
        uint64_t v129 = 0;
LABEL_94:
        unint64_t v135 = v109 - v129;
        uint64_t v136 = v129;
        uint64_t v137 = (uint64_t *)(v110 + 8 * v129);
        uint64_t v138 = &v107[v136];
        do
        {
          uint64_t v140 = *v138++;
          uint64_t v139 = v140;
          uint64_t v141 = *v137++;
          v128 += v141 * v139;
          --v135;
        }
        while (v135);
        goto LABEL_96;
      }
      uint64_t v130 = 0;
      uint64_t v131 = 0;
      uint64_t v132 = v109 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v133 = (void *)(v110 + 8);
      unint64_t v134 = v107 + 1;
      do
      {
        v130 += *(v133 - 1) * *(v134 - 1);
        v131 += *v133 * *v134;
        v134 += 2;
        v133 += 2;
        v132 -= 2;
      }
      while (v132);
      uint64_t v128 = v131 + v130;
      uint64_t v129 = v109 & 0x1FFFFFFFFFFFFFFELL;
      if (v109 != v112) {
        goto LABEL_94;
      }
LABEL_96:
      *(float *)(v160 + 4 * v114) = *(float *)(v160 + 4 * v114) - *(float *)(v108 + 4 * (v111 + v128));
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v142 = (v12 >> 3) + 1;
        int v143 = v12 >> 3;
        while (1)
        {
          uint64_t v144 = (v142 - 2);
          unint64_t v145 = v107[v144] + 1;
          v107[v144] = v145;
          if (v145 < v4[v144]) {
            break;
          }
          v107[(v142 - 2)] = 0;
          --v143;
          if ((unint64_t)--v142 <= 1) {
            goto LABEL_102;
          }
        }
        if (v143 > 0) {
          continue;
        }
      }
LABEL_102:
      operator delete(v107);
      return result;
    }
    uint64_t v114 = 0;
    uint64_t v115 = 0;
LABEL_87:
    unint64_t v121 = v109 - v115;
    uint64_t v122 = v115;
    uint64_t v123 = (uint64_t *)(v113 + 8 * v115);
    uint64_t v124 = &v107[v122];
    do
    {
      uint64_t v126 = *v124++;
      uint64_t v125 = v126;
      uint64_t v127 = *v123++;
      v114 += v127 * v125;
      --v121;
    }
    while (v121);
    goto LABEL_89;
  }
  unint64_t v22 = *v4;
  if (!*v4) {
    return result;
  }
  uint64_t v23 = a2[8];
  uint64_t v24 = a1[8];
  uint64_t v25 = *a2;
  uint64_t v26 = *(void *)a1[5];
  uint64_t v27 = *(void *)a2[5];
  if (v22 < 0xC) {
    goto LABEL_27;
  }
  unint64_t v28 = 0;
  if (v26 != 1 || v27 != 1) {
    goto LABEL_28;
  }
  if (v160 + 4 * v24 < v25 + 4 * v22 + 4 * v23 && v25 + 4 * v23 < v160 + 4 * v22 + 4 * v24)
  {
LABEL_27:
    unint64_t v28 = 0;
LABEL_28:
    uint64_t v29 = a2[8];
    uint64_t v30 = a1[8];
LABEL_29:
    unint64_t v31 = v22 - v28;
    uint64_t v32 = (float *)(v25 + 4 * v29);
    uint64_t v33 = 4 * v27;
    uint64_t v34 = 4 * v26;
    unint64_t v35 = (float *)(v160 + 4 * v30);
    do
    {
      result.f32[0] = *v35 - *v32;
      *unint64_t v35 = result.f32[0];
      uint64_t v32 = (float *)((char *)v32 + v33);
      unint64_t v35 = (float *)((char *)v35 + v34);
      --v31;
    }
    while (v31);
    return result;
  }
  unint64_t v28 = v22 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v29 = v23 + (v22 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v30 = v24 + (v22 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v146 = (float32x4_t *)(v25 + 4 * v23 + 16);
  uint64_t v147 = (float32x4_t *)(v160 + 4 * v24 + 16);
  unint64_t v148 = v22 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    float32x4_t result = vsubq_f32(v147[-1], v146[-1]);
    float32x4_t v149 = vsubq_f32(*v147, *v146);
    v147[-1] = result;
    *uint64_t v147 = v149;
    v146 += 2;
    v147 += 2;
    v148 -= 8;
  }
  while (v148);
  if (v22 != v28) {
    goto LABEL_29;
  }
  return result;
}

void sub_19257AEE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::operator-<float>(void *a1, void *a2)
{
  unint64_t v5 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        uint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        uint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      unint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      uint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        unint64_t v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        unint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        uint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      unint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      uint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        uint64_t v29 = v26;
        unint64_t v31 = v27;
        memcpy(v26, v24, v25);
        uint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<float>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<float>::copy(&v28);
    }
  }
  nitro::ndarray<float>::copy(a1);
}