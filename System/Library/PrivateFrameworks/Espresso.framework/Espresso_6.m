void sub_1923FFCDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;
  void *v34;

  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    v34 = a19;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v34 = a19;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1923FFE90(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_19240014C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1924001C0(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          result = sub_1923FFE90(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_192400478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_1924004EC(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          result = sub_1924001C0(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1924007A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<signed char,unsigned char>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  uint64_t DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  unsigned int ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    v71 = operator new(v68 - *(void *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_192401448((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_192401778(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_192401AA4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (void *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_192401AA4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_192401244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_192401448(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_192401704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_192401778(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          result = sub_192401448(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_192401A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_192401AA4(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          result = sub_192401778(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_192401D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<float,signed char>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  uint64_t DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  unsigned int ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    v71 = operator new(v68 - *(void *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_192402A00((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_192402D30(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_19240305C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (void *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_19240305C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_1924027FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_192402A00(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_192402CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_192402D30(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          result = sub_192402A00(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_192402FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_19240305C(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          result = sub_192402D30(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_192403310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void _ZN4E5RT34ElementwiseOperationImplementationIDF16_aEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  uint64_t DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  unsigned int ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    v71 = operator new(v68 - *(void *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_192403FB8((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1924042E8(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_192404614(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (void *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_192404614(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_192403DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_192403FB8(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_192404274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1924042E8(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          result = sub_192403FB8(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1924045A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_192404614(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          result = sub_1924042E8(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1924048C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned int,signed char>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  uint64_t DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  unsigned int ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    v71 = operator new(v68 - *(void *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_192405570((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1924058A0(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_192405BCC(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (void *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_192405BCC(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_19240536C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_192405570(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_19240582C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1924058A0(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          result = sub_192405570(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_192405B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_192405BCC(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          result = sub_1924058A0(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_192405E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<int,signed char>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  uint64_t DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  unsigned int ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    v71 = operator new(v68 - *(void *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_192406B28((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_192406E58(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_192407184(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (void *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_192407184(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_192406924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_192406B28(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_192406DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_192406E58(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          result = sub_192406B28(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_192407110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_192407184(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          result = sub_192406E58(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_192407438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned short,signed char>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  uint64_t DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  unsigned int ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    v71 = operator new(v68 - *(void *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_1924080E0((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_192408410(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_19240873C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (void *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_19240873C(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_192407EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_1924080E0(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_19240839C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_192408410(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          result = sub_1924080E0(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_1924086C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_19240873C(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          result = sub_192408410(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_1924089F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<short,signed char>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  uint64_t DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  unsigned int ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    v71 = operator new(v68 - *(void *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_192409698((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_1924099C8(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_192409CF4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (void *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_192409CF4(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_192409494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_192409698(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_192409954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_1924099C8(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          result = sub_192409698(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_192409C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_192409CF4(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          result = sub_1924099C8(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_192409FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<unsigned char,signed char>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  uint64_t DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v112, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v112);
  unsigned int ElementSize = E5RT::TensorDataType::GetElementSize(v112);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v106 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_37;
  }
  v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_39;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_38;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_28:
      if (v26 <= NumElements)
      {
        uint64_t v61 = v20[v19];
        unint64_t v62 = v26 * NumComponents;
        uint64_t v63 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = NumElements / v26;
        }
        do
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v109 = (void *)v62;
          uint64_t v65 = *(void *)(a5 + 24);
          if (!v65) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v65 + 48))(v65, v114, v113, &v109);
          DataSpan += v61;
          v12 += v63;
          --v64;
        }
        while (v64);
      }
      goto LABEL_56;
    }
    uint64_t v53 = *(void *)(v25 + 8 * v19);
    uint64_t v54 = v53 * v28;
    uint64_t v55 = v30 * v53;
    int64_t v56 = Rank - 3;
    while (1)
    {
      uint64_t v57 = v20[v56];
      uint64_t v58 = v57 - v54;
      uint64_t v59 = v23[v56];
      if (v58 != v59 - v55) {
        break;
      }
      uint64_t v60 = *(void *)(v25 + 8 * v56);
      uint64_t v55 = v59 * v60;
      uint64_t v54 = v60 * v57;
      BOOL v33 = v56-- <= 0;
      if (v33) {
        goto LABEL_28;
      }
    }
    if (v21 < 1) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_38:
    v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_39:
    char v66 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_43;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_38;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_38;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      unint64_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v109 = (void *)v49;
        uint64_t v52 = *(void *)(a5 + 24);
        if (!v52) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, void *, void *, void **))(*(void *)v52 + 48))(v52, v114, v113, &v109);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_56;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_37:
  if (Rank) {
    goto LABEL_38;
  }
  char v66 = 0;
LABEL_43:
  uint64_t v67 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v69 = *(const void **)v67;
  uint64_t v68 = *(void *)(v67 + 8);
  int64_t v70 = v68 - *(void *)v67;
  if (v68 == *(void *)v67)
  {
    __p = 0;
    v72 = 0;
    if (Rank > 5)
    {
LABEL_50:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v115, 2, v113);
      E5RT::E5RTError::E5RTError(exception, v114, v115);
    }
  }
  else
  {
    if (v70 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    v71 = operator new(v68 - *(void *)v67);
    v72 = (char *)&v71[v70 >> 3];
    v109 = v71;
    v111 = v72;
    __p = (char *)v71;
    memcpy(v71, v69, v70);
    v110 = v72;
  }
  switch(Rank)
  {
    case 0uLL:
      v114[0] = v12;
      v113[0] = DataSpan;
      v115[0] = NumComponents;
      uint64_t v73 = *(void *)(a5 + 24);
      if (!v73) {
        goto LABEL_91;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v73 + 48))(v73, v114, v113, v115);
LABEL_54:
      if (__p) {
        break;
      }
      goto LABEL_56;
    case 1uLL:
      if (v72 - __p <= 7)
      {
        v100 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v100, v114, v115);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      uint64_t v76 = ((v72 - __p) >> 3) - 1;
      if ((v66 & 1) == 0)
      {
        uint64_t v95 = *(void *)&__p[8 * v76] * NumComponents;
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = v95;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
        goto LABEL_84;
      }
      if (*(void *)&__p[8 * v76])
      {
        uint64_t v77 = 0;
        uint64_t v78 = *(void *)(*TensorStrides + 8 * v76);
        uint64_t v79 = (*v18)[v76];
        while (1)
        {
          v114[0] = v12;
          v113[0] = DataSpan;
          v115[0] = NumComponents;
          uint64_t v80 = *(void *)(a5 + 24);
          if (!v80) {
            goto LABEL_91;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v80 + 48))(v80, v114, v113, v115);
          DataSpan += v78;
          v12 += v79;
          if ((unint64_t)++v77 >= *(void *)&__p[8 * v76]) {
            goto LABEL_55;
          }
        }
      }
      break;
    case 2uLL:
      sub_19240AC50((void *)*TensorStrides, DataSpan, *v18, v12, (uint64_t)&v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 3uLL:
      sub_19240AF80(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 4uLL:
      sub_19240B2AC(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, NumElements, v66, a5);
      goto LABEL_54;
    case 5uLL:
      uint64_t v81 = v72 - __p;
      if (v72 - __p <= 39)
      {
        v101 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v114, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v113, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v115, 1, v113);
        E5RT::E5RTError::E5RTError(v101, v114, v115);
      }
      v82 = (void *)*TensorStrides;
      v83 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v106 == **v18 * *(void *)__p)
      {
        v114[0] = v12;
        v113[0] = DataSpan;
        v115[0] = NumElements * NumComponents;
        uint64_t v94 = *(void *)(a5 + 24);
        if (!v94) {
          goto LABEL_91;
        }
LABEL_84:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v94 + 48))(v94, v114, v113, v115);
      }
      else
      {
        uint64_t v85 = v81 >> 3;
        uint64_t v86 = (v81 >> 3) - 5;
        uint64_t v87 = (v81 >> 3) - 1;
        unint64_t v88 = *(void *)&__p[8 * v86];
        if (*(void *)&__p[8 * v85 - 24]
           * *(void *)&__p[8 * v85 - 32]
           * *(void *)&__p[8 * v85 - 16]
           * *(void *)&__p[8 * v87] == 1)
        {
          if (v88)
          {
            uint64_t v89 = 0;
            uint64_t v90 = v87;
            uint64_t v91 = v82[v90];
            uint64_t v92 = v83[v90];
            while (1)
            {
              v114[0] = v12;
              v113[0] = DataSpan;
              v115[0] = NumComponents;
              uint64_t v93 = *(void *)(a5 + 24);
              if (!v93) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v93 + 48))(v93, v114, v113, v115);
              DataSpan += v91;
              v12 += v92;
              if ((unint64_t)++v89 >= *(void *)&__p[8 * v86]) {
                goto LABEL_55;
              }
            }
LABEL_91:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v102 = v86;
          uint64_t v103 = *(void *)&__p[8 * v86];
          uint64_t v96 = v82[v86];
          uint64_t v97 = v83[v86];
          *(void *)&__p[8 * v86] = 1;
          if (v88)
          {
            unint64_t v98 = v88;
            unint64_t v99 = NumElements / v88;
            do
            {
              sub_19240B2AC(TensorStrides, DataSpan, v18, v12, &v109, NumComponents, ElementSize, v106, v99, v66, a5);
              DataSpan += v96;
              v12 += v97;
              --v98;
            }
            while (v98);
          }
          *(void *)&__p[8 * v102] = v103;
        }
      }
      return;
    default:
      goto LABEL_50;
  }
LABEL_55:
  operator delete(__p);
LABEL_56:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v112);
}

void sub_19240AA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a18;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a18;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_19240AC50(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_19240AF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_19240AF80(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          result = sub_19240AC50(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_19240B238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_19240B2AC(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          result = sub_19240AF80(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_19240B560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void E5RT::ElementwiseOperationImplementation<signed char,signed char>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t a5)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  TensorShape = (uint64_t *)E5RT::TensorDescriptor::GetTensorShape(a1);
  uint64_t DataSpan = (char *)E5RT::BufferObject::GetDataSpan(a2);
  uint64_t v12 = (char *)E5RT::BufferObject::GetDataSpan(a4);
  TensorDataTypeRef = (const E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)v110, TensorDataTypeRef);
  unsigned int NumComponents = E5RT::TensorDataType::GetNumComponents(v110);
  unsigned int ElementSize = E5RT::TensorDataType::GetElementSize(v110);
  v15 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  unsigned int v16 = E5RT::TensorDataType::GetElementSize(v15);
  TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1);
  uint64_t v18 = (void **)E5RT::TensorDescriptor::GetTensorStrides(a3);
  unint64_t NumElements = E5RT::TensorDescriptor::GetNumElements((E5RT::TensorDescriptorImpl **)a1);
  uint64_t v105 = v16;
  uint64_t v19 = Rank - 2;
  if (Rank < 2) {
    goto LABEL_35;
  }
  v20 = (void *)*TensorStrides;
  uint64_t v21 = Rank - 1;
  if ((uint64_t)(Rank - 1) < 0) {
    goto LABEL_37;
  }
  uint64_t v22 = v20[v21];
  uint64_t v23 = *v18;
  uint64_t v24 = (*v18)[v21];
  if (v22 - ElementSize != v24 - v16) {
    goto LABEL_36;
  }
  uint64_t v25 = *TensorShape;
  unint64_t v26 = *(void *)(*TensorShape + 8 * v21);
  unint64_t v27 = v26 * v22;
  uint64_t v28 = v20[v19];
  unint64_t v29 = v24 * v26;
  uint64_t v30 = v23[v19];
  if (v28 - v26 * v22 != v30 - v29)
  {
    if (Rank == 2)
    {
LABEL_27:
      if (v26 <= NumElements)
      {
        uint64_t v60 = v20[v19];
        size_t v61 = v26 * NumComponents;
        uint64_t v62 = v23[v19];
        if (NumElements / v26 <= 1) {
          uint64_t v63 = 1;
        }
        else {
          uint64_t v63 = NumElements / v26;
        }
        do
        {
          memcpy(v12, DataSpan, v61);
          DataSpan += v60;
          v12 += v62;
          --v63;
        }
        while (v63);
      }
      goto LABEL_54;
    }
    uint64_t v52 = *(void *)(v25 + 8 * v19);
    uint64_t v53 = v52 * v28;
    uint64_t v54 = v30 * v52;
    int64_t v55 = Rank - 3;
    while (1)
    {
      uint64_t v56 = v20[v55];
      uint64_t v57 = v56 - v53;
      uint64_t v58 = v23[v55];
      if (v57 != v58 - v54) {
        break;
      }
      uint64_t v59 = *(void *)(v25 + 8 * v55);
      uint64_t v54 = v58 * v59;
      uint64_t v53 = v59 * v56;
      BOOL v33 = v55-- <= 0;
      if (v33) {
        goto LABEL_27;
      }
    }
    if (v21 < 1) {
      goto LABEL_36;
    }
    goto LABEL_6;
  }
  if (Rank <= 2)
  {
LABEL_36:
    v20 = (void *)*TensorStrides;
    uint64_t v21 = Rank - 1;
LABEL_37:
    char v64 = v20[v21] != ElementSize || (*v18)[v21] != v16;
    goto LABEL_41;
  }
LABEL_6:
  uint64_t v31 = v20[v19];
  uint64_t v32 = v23[v19];
  BOOL v33 = v31 - v27 != v32 - v29 || v19 < 1;
  if (v33) {
    goto LABEL_36;
  }
  uint64_t v34 = *(void *)(v25 + 8 * v19);
  uint64_t v35 = Rank - 3;
  uint64_t v36 = v20[v35];
  uint64_t v37 = v36 - v34 * v31;
  uint64_t v38 = v23[v35];
  if (v37 == v38 - v32 * v34) {
    goto LABEL_36;
  }
  if (Rank == 3)
  {
LABEL_16:
    unint64_t v47 = *(void *)(v25 + 8 * v19) * v26;
    if (v47 <= NumElements)
    {
      uint64_t v48 = v20[v35];
      size_t v49 = v47 * NumComponents;
      uint64_t v50 = v23[v35];
      if (NumElements / v47 <= 1) {
        uint64_t v51 = 1;
      }
      else {
        uint64_t v51 = NumElements / v47;
      }
      do
      {
        memcpy(v12, DataSpan, v49);
        DataSpan += v48;
        v12 += v50;
        --v51;
      }
      while (v51);
    }
    goto LABEL_54;
  }
  uint64_t v39 = *(void *)(v25 + v35 * 8);
  uint64_t v40 = v39 * v36;
  uint64_t v41 = v38 * v39;
  int64_t v42 = Rank - 4;
  while (1)
  {
    uint64_t v43 = v20[v42];
    uint64_t v44 = v43 - v40;
    uint64_t v45 = v23[v42];
    if (v44 != v45 - v41) {
      break;
    }
    uint64_t v46 = *(void *)(v25 + 8 * v42);
    uint64_t v41 = v45 * v46;
    uint64_t v40 = v46 * v43;
    BOOL v33 = v42-- <= 0;
    if (v33) {
      goto LABEL_16;
    }
  }
LABEL_35:
  if (Rank) {
    goto LABEL_36;
  }
  char v64 = 0;
LABEL_41:
  uint64_t v65 = E5RT::TensorDescriptor::GetTensorShape(a1);
  v107 = 0;
  v108 = 0;
  v109 = 0;
  uint64_t v67 = *(const void **)v65;
  uint64_t v66 = *(void *)(v65 + 8);
  int64_t v68 = v66 - *(void *)v65;
  if (v66 == *(void *)v65)
  {
    __p = 0;
    int64_t v70 = 0;
    if (Rank > 5)
    {
LABEL_48:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v112, "ElementwiseOperationImplementation");
      std::string::basic_string[abi:ne180100]<0>(v111, "Tensor rank must be betweeen 0 and 5.");
      E5RT::Status::Status(v113, 2, v111);
      E5RT::E5RTError::E5RTError(exception, v112, v113);
    }
  }
  else
  {
    if (v68 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    v69 = (char *)operator new(v66 - *(void *)v65);
    int64_t v70 = &v69[8 * (v68 >> 3)];
    __p = v69;
    v107 = v69;
    v109 = v70;
    memcpy(v69, v67, v68);
    v108 = v70;
  }
  switch(Rank)
  {
    case 0uLL:
      v112[0] = v12;
      v111[0] = DataSpan;
      v113[0] = NumComponents;
      uint64_t v71 = *(void *)(a5 + 24);
      if (!v71) {
        goto LABEL_89;
      }
      (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v71 + 48))(v71, v112, v111, v113);
LABEL_52:
      if (__p) {
        break;
      }
      goto LABEL_54;
    case 1uLL:
      if (v70 - __p <= 7)
      {
        unint64_t v98 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v112, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v111, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v113, 1, v111);
        E5RT::E5RTError::E5RTError(v98, v112, v113);
      }
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v105 == **v18 * *(void *)__p)
      {
        v112[0] = v12;
        v111[0] = DataSpan;
        v113[0] = NumElements * NumComponents;
        uint64_t v92 = *(void *)(a5 + 24);
        if (!v92) {
          goto LABEL_89;
        }
        goto LABEL_82;
      }
      uint64_t v74 = ((v70 - __p) >> 3) - 1;
      if ((v64 & 1) == 0)
      {
        uint64_t v93 = *(void *)&__p[8 * v74] * NumComponents;
        v112[0] = v12;
        v111[0] = DataSpan;
        v113[0] = v93;
        uint64_t v92 = *(void *)(a5 + 24);
        if (!v92) {
          goto LABEL_89;
        }
        goto LABEL_82;
      }
      if (*(void *)&__p[8 * v74])
      {
        uint64_t v75 = 0;
        uint64_t v76 = *(void *)(*TensorStrides + 8 * v74);
        uint64_t v77 = (*v18)[v74];
        while (1)
        {
          v112[0] = v12;
          v111[0] = DataSpan;
          v113[0] = NumComponents;
          uint64_t v78 = *(void *)(a5 + 24);
          if (!v78) {
            goto LABEL_89;
          }
          (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v78 + 48))(v78, v112, v111, v113);
          DataSpan += v76;
          v12 += v77;
          if ((unint64_t)++v75 >= *(void *)&__p[8 * v74]) {
            goto LABEL_53;
          }
        }
      }
      break;
    case 2uLL:
      sub_19240C110((void *)*TensorStrides, (uint64_t)DataSpan, *v18, (uint64_t)v12, (uint64_t)&v107, NumComponents, ElementSize, v105, NumElements, v64, a5);
      goto LABEL_52;
    case 3uLL:
      sub_19240C440(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v107, NumComponents, ElementSize, v105, NumElements, v64, a5);
      goto LABEL_52;
    case 4uLL:
      sub_19240C76C(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v107, NumComponents, ElementSize, v105, NumElements, v64, a5);
      goto LABEL_52;
    case 5uLL:
      uint64_t v79 = v70 - __p;
      if (v70 - __p <= 39)
      {
        unint64_t v99 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v112, "ElementwiseOperationImplementation");
        std::string::basic_string[abi:ne180100]<0>(v111, "Tensor rank is less than dimension provided.");
        E5RT::Status::Status(v113, 1, v111);
        E5RT::E5RTError::E5RTError(v99, v112, v113);
      }
      uint64_t v80 = (void *)*TensorStrides;
      uint64_t v81 = *v18;
      if (NumElements * ElementSize == *(void *)*TensorStrides * *(void *)__p
        && NumElements * v105 == **v18 * *(void *)__p)
      {
        v112[0] = v12;
        v111[0] = DataSpan;
        v113[0] = NumElements * NumComponents;
        uint64_t v92 = *(void *)(a5 + 24);
        if (!v92) {
          goto LABEL_89;
        }
LABEL_82:
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v92 + 48))(v92, v112, v111, v113);
      }
      else
      {
        uint64_t v83 = v79 >> 3;
        uint64_t v84 = (v79 >> 3) - 5;
        uint64_t v85 = (v79 >> 3) - 1;
        unint64_t v86 = *(void *)&__p[8 * v84];
        if (*(void *)&__p[8 * v83 - 24]
           * *(void *)&__p[8 * v83 - 32]
           * *(void *)&__p[8 * v83 - 16]
           * *(void *)&__p[8 * v85] == 1)
        {
          if (v86)
          {
            uint64_t v87 = 0;
            uint64_t v88 = v85;
            uint64_t v89 = v80[v88];
            uint64_t v90 = v81[v88];
            while (1)
            {
              v112[0] = v12;
              v111[0] = DataSpan;
              v113[0] = NumComponents;
              uint64_t v91 = *(void *)(a5 + 24);
              if (!v91) {
                break;
              }
              (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v91 + 48))(v91, v112, v111, v113);
              DataSpan += v89;
              v12 += v90;
              if ((unint64_t)++v87 >= *(void *)&__p[8 * v84]) {
                goto LABEL_53;
              }
            }
LABEL_89:
            std::__throw_bad_function_call[abi:ne180100]();
          }
        }
        else
        {
          uint64_t v100 = v84;
          uint64_t v101 = *(void *)&__p[8 * v84];
          uint64_t v94 = v80[v84];
          uint64_t v95 = v81[v84];
          *(void *)&__p[8 * v84] = 1;
          if (v86)
          {
            unint64_t v96 = v86;
            unint64_t v97 = NumElements / v86;
            do
            {
              sub_19240C76C(TensorStrides, (uint64_t)DataSpan, v18, (uint64_t)v12, &v107, NumComponents, ElementSize, v105, v97, v64, a5);
              DataSpan += v94;
              v12 += v95;
              --v96;
            }
            while (v96);
          }
          *(void *)&__p[8 * v100] = v101;
        }
      }
      return;
    default:
      goto LABEL_48;
  }
LABEL_53:
  operator delete(__p);
LABEL_54:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v110);
}

void sub_19240BF5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)(v32 - 96));
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 97) < 0)
  {
    operator delete(*(void **)(v32 - 120));
    uint64_t v34 = a19;
    if ((v31 & 1) == 0)
    {
LABEL_8:
      if (v34) {
        operator delete(v34);
      }
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v34 = a19;
    if (!v31) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void *sub_19240C110(void *result, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  v11 = *(void **)a5;
  uint64_t v12 = *(void *)(a5 + 8) - *(void *)a5;
  if (v12 <= 15)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v40, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v39, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v41, 1, v39);
    E5RT::E5RTError::E5RTError(exception, v40, &v41);
  }
  uint64_t v13 = a4;
  uint64_t v14 = a2;
  if (a9 * a7 == *result * *v11 && a9 * a8 == *a3 * *v11)
  {
    v40[0] = a4;
    v39[0] = a2;
    uint64_t v41 = a6 * a9;
    uint64_t v29 = *(void *)(a11 + 24);
    if (v29) {
      return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v29 + 48))(v29, v40, v39, &v41);
    }
    goto LABEL_24;
  }
  uint64_t v16 = v12 >> 3;
  uint64_t v17 = v16 - 1;
  uint64_t v18 = v16 - 2;
  uint64_t v38 = result[v18];
  uint64_t v37 = a3[v18];
  uint64_t v19 = v11[v18];
  if ((a10 & 1) == 0)
  {
    if (!v19) {
      return result;
    }
    uint64_t v30 = v11[v17] * a6;
    while (1)
    {
      v40[0] = v13;
      v39[0] = v14;
      uint64_t v41 = v30;
      uint64_t v31 = *(void *)(a11 + 24);
      if (!v31) {
        break;
      }
      uint64_t v32 = v19;
      result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v40, v39, &v41);
      v14 += v38;
      v13 += v37;
      uint64_t v19 = v32 - 1;
      if (v32 == 1) {
        return result;
      }
    }
LABEL_24:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  if (v19 && v11[v17])
  {
    uint64_t v21 = 0;
    uint64_t v22 = result[v17];
    uint64_t v23 = a3[v17];
    uint64_t v24 = a6;
    uint64_t v34 = v11[v18];
    do
    {
      if (v11[v17])
      {
        unint64_t v25 = 0;
        uint64_t v26 = v13 + v21 * v37;
        uint64_t v27 = v14 + v21 * v38;
        do
        {
          v40[0] = v26;
          v39[0] = v27;
          uint64_t v41 = v24;
          uint64_t v28 = *(void *)(a11 + 24);
          if (!v28) {
            goto LABEL_24;
          }
          result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v28 + 48))(v28, v40, v39, &v41);
          v27 += v22;
          v26 += v23;
          ++v25;
          v11 = *(void **)a5;
        }
        while (v25 < *(void *)(*(void *)a5 + 8 * v17));
        uint64_t v14 = a2;
        uint64_t v13 = a4;
        uint64_t v19 = v34;
      }
      ++v21;
    }
    while (v21 != v19);
  }
  return result;
}

void sub_19240C3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a26);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0)
  {
    operator delete(a20);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void *sub_19240C440(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 23)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a11;
  uint64_t v18 = (void *)*result;
  uint64_t v19 = (uint64_t)*a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v31 = *(void *)(a11 + 24);
    if (!v31) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
  }
  else
  {
    uint64_t v21 = a5;
    uint64_t v22 = v12 >> 3;
    uint64_t v23 = (v12 >> 3) - 3;
    uint64_t v24 = (v12 >> 3) - 1;
    unint64_t v25 = v11[v23];
    if (v11[v24] * v11[v22 - 2] == 1)
    {
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = v18[v24];
        uint64_t v28 = *(void *)(v19 + 8 * v24);
        uint64_t v29 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v29;
          uint64_t v30 = *(void *)(a11 + 24);
          if (!v30) {
            break;
          }
          result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v30 + 48))(v30, v47, v46, &v48);
          v16 += v27;
          v14 += v28;
          if ((unint64_t)++v26 >= *(void *)(*v21 + 8 * v23)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v23;
      uint64_t v32 = v23;
      uint64_t v33 = v18[v23];
      uint64_t v34 = *(void *)(v19 + v32 * 8);
      v11[v32] = 1;
      if (v25)
      {
        unint64_t v35 = v25;
        unint64_t v42 = v25;
        uint64_t v44 = a9 / v25;
        uint64_t v45 = (void **)result;
        do
        {
          uint64_t v41 = v17;
          uint64_t v36 = (uint64_t)v21;
          uint64_t v37 = a6;
          uint64_t v38 = (void **)v21;
          uint64_t v39 = a8;
          result = sub_19240C110(*v45, v16, *a3, v14, v36, a6, a7, a8, v44, a10, v41);
          a8 = v39;
          uint64_t v21 = v38;
          a6 = v37;
          uint64_t v17 = a11;
          v16 += v33;
          v14 += v34;
          --v35;
        }
        while (v35);
        v11 = *v38;
        unint64_t v25 = v42;
      }
      v11[v43] = v25;
    }
  }
  return result;
}

void sub_19240C6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void *sub_19240C76C(void *result, uint64_t a2, void **a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, uint64_t a11)
{
  v11 = (void *)*a5;
  uint64_t v12 = a5[1] - *a5;
  if (v12 <= 31)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v47, "ElementwiseOperationImplementation");
    std::string::basic_string[abi:ne180100]<0>(v46, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(&v48, 1, v46);
    E5RT::E5RTError::E5RTError(exception, v47, &v48);
  }
  uint64_t v14 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = result;
  uint64_t v18 = a11;
  uint64_t v19 = (void *)*result;
  v20 = *a3;
  if (a9 * a7 == *(void *)*result * *v11 && a9 * a8 == **a3 * *v11)
  {
    v47[0] = a4;
    v46[0] = a2;
    uint64_t v48 = a6 * a9;
    uint64_t v32 = *(void *)(a11 + 24);
    if (!v32) {
      goto LABEL_21;
    }
    return (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v32 + 48))(v32, v47, v46, &v48);
  }
  else
  {
    uint64_t v22 = a5;
    uint64_t v23 = v12 >> 3;
    uint64_t v24 = (v12 >> 3) - 4;
    uint64_t v25 = (v12 >> 3) - 1;
    unint64_t v26 = v11[v24];
    if (v11[v25] * v11[v23 - 2] * v11[v23 - 3] == 1)
    {
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = v19[v25];
        uint64_t v29 = v20[v25];
        uint64_t v30 = a6;
        while (1)
        {
          v47[0] = v14;
          v46[0] = v16;
          uint64_t v48 = v30;
          uint64_t v31 = *(void *)(a11 + 24);
          if (!v31) {
            break;
          }
          result = (void *)(*(uint64_t (**)(uint64_t, void *, void *, uint64_t *))(*(void *)v31 + 48))(v31, v47, v46, &v48);
          v16 += v28;
          v14 += v29;
          if ((unint64_t)++v27 >= *(void *)(*v22 + 8 * v24)) {
            return result;
          }
        }
LABEL_21:
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    else
    {
      uint64_t v43 = v24;
      uint64_t v33 = v24;
      uint64_t v34 = v19[v24];
      uint64_t v35 = v20[v33];
      v11[v33] = 1;
      if (v26)
      {
        unint64_t v36 = v26;
        unint64_t v42 = v26;
        unint64_t v44 = a9 / v26;
        do
        {
          uint64_t v41 = v18;
          uint64_t v37 = v22;
          uint64_t v38 = a6;
          uint64_t v39 = a7;
          result = sub_19240C440(v17, v16, a3, v14, v37, a6, a7, a8, v44, a10, v41);
          a7 = v39;
          a6 = v38;
          uint64_t v22 = a5;
          uint64_t v18 = a11;
          v16 += v34;
          v14 += v35;
          --v36;
        }
        while (v36);
        v11 = (void *)*a5;
        unint64_t v26 = v42;
      }
      v11[v43] = v26;
    }
  }
  return result;
}

void sub_19240CA20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 88));
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

unint64_t E5RT::TensorElementAt<float>(E5RT::TensorDescriptor *a1, uint64_t *a2, unsigned int a3, E5RT::BufferObject *this)
{
  uint64_t DataSpan = E5RT::BufferObject::GetDataSpan(this);
  uint64_t ByteOffset = E5RT::TensorDescriptor::GetByteOffset((uint64_t)a1, a2);
  TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  if (E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef) <= a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "TensorElementAt");
    std::string::basic_string[abi:ne180100]<0>(v12, "Component index is out of bounds.");
    E5RT::Status::Status(v13, 4, v12);
    E5RT::E5RTError::E5RTError(exception, v14, v13);
  }
  return DataSpan
       + ByteOffset
       + E5RT::TensorDataType::GetComponentSize(TensorDataTypeRef) * (unint64_t)a3;
}

void sub_19240CB88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

float E5RT::TensorElementAt<float>(E5RT::TensorDescriptor *a1, uint64_t *a2, unsigned int a3, E5RT::BufferObject *a4)
{
  return *(float *)E5RT::TensorElementAt<float>(a1, a2, a3, a4);
}

unint64_t _ZN4E5RT15TensorElementAtIDF16_EERT_RKNS_16TensorDescriptorERKNSt3__16vectorImNS6_9allocatorImEEEEhRNS_12BufferObjectE(E5RT::TensorDescriptor *a1, uint64_t *a2, unsigned int a3, E5RT::BufferObject *this)
{
  uint64_t DataSpan = E5RT::BufferObject::GetDataSpan(this);
  uint64_t ByteOffset = E5RT::TensorDescriptor::GetByteOffset((uint64_t)a1, a2);
  TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  if (E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef) <= a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "TensorElementAt");
    std::string::basic_string[abi:ne180100]<0>(v12, "Component index is out of bounds.");
    E5RT::Status::Status(v13, 4, v12);
    E5RT::E5RTError::E5RTError(exception, v14, v13);
  }
  return DataSpan
       + ByteOffset
       + E5RT::TensorDataType::GetComponentSize(TensorDataTypeRef) * (unint64_t)a3;
}

void sub_19240CD0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

__int16 _ZN4E5RT15TensorElementAtIDF16_EET_RKNS_16TensorDescriptorERKNSt3__16vectorImNS5_9allocatorImEEEEhRKNS_12BufferObjectE@<H0>(E5RT::TensorDescriptor *a1@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, E5RT::BufferObject *a4@<X3>)
{
  return *(_WORD *)_ZN4E5RT15TensorElementAtIDF16_EERT_RKNS_16TensorDescriptorERKNSt3__16vectorImNS6_9allocatorImEEEEhRNS_12BufferObjectE(a1, a2, a3, a4);
}

unint64_t E5RT::TensorElementAt<unsigned char>(E5RT::TensorDescriptor *a1, uint64_t *a2, unsigned int a3, E5RT::BufferObject *this)
{
  uint64_t DataSpan = E5RT::BufferObject::GetDataSpan(this);
  uint64_t ByteOffset = E5RT::TensorDescriptor::GetByteOffset((uint64_t)a1, a2);
  TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  if (E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef) <= a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "TensorElementAt");
    std::string::basic_string[abi:ne180100]<0>(v12, "Component index is out of bounds.");
    E5RT::Status::Status(v13, 4, v12);
    E5RT::E5RTError::E5RTError(exception, v14, v13);
  }
  return DataSpan
       + ByteOffset
       + E5RT::TensorDataType::GetComponentSize(TensorDataTypeRef) * (unint64_t)a3;
}

void sub_19240CE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::TensorElementAt<unsigned char>(E5RT::TensorDescriptor *a1, uint64_t *a2, unsigned int a3, E5RT::BufferObject *a4)
{
  return *(unsigned __int8 *)E5RT::TensorElementAt<unsigned char>(a1, a2, a3, a4);
}

unint64_t E5RT::TensorElementAt<signed char>(E5RT::TensorDescriptor *a1, uint64_t *a2, unsigned int a3, E5RT::BufferObject *this)
{
  uint64_t DataSpan = E5RT::BufferObject::GetDataSpan(this);
  uint64_t ByteOffset = E5RT::TensorDescriptor::GetByteOffset((uint64_t)a1, a2);
  TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  if (E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef) <= a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "TensorElementAt");
    std::string::basic_string[abi:ne180100]<0>(v12, "Component index is out of bounds.");
    E5RT::Status::Status(v13, 4, v12);
    E5RT::E5RTError::E5RTError(exception, v14, v13);
  }
  return DataSpan
       + ByteOffset
       + E5RT::TensorDataType::GetComponentSize(TensorDataTypeRef) * (unint64_t)a3;
}

void sub_19240D014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::TensorElementAt<signed char>(E5RT::TensorDescriptor *a1, uint64_t *a2, unsigned int a3, E5RT::BufferObject *a4)
{
  return *(char *)E5RT::TensorElementAt<signed char>(a1, a2, a3, a4);
}

unint64_t E5RT::TensorElementAt<unsigned short>(E5RT::TensorDescriptor *a1, uint64_t *a2, unsigned int a3, E5RT::BufferObject *this)
{
  uint64_t DataSpan = E5RT::BufferObject::GetDataSpan(this);
  uint64_t ByteOffset = E5RT::TensorDescriptor::GetByteOffset((uint64_t)a1, a2);
  TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  if (E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef) <= a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "TensorElementAt");
    std::string::basic_string[abi:ne180100]<0>(v12, "Component index is out of bounds.");
    E5RT::Status::Status(v13, 4, v12);
    E5RT::E5RTError::E5RTError(exception, v14, v13);
  }
  return DataSpan
       + ByteOffset
       + E5RT::TensorDataType::GetComponentSize(TensorDataTypeRef) * (unint64_t)a3;
}

void sub_19240D198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::TensorElementAt<unsigned short>(E5RT::TensorDescriptor *a1, uint64_t *a2, unsigned int a3, E5RT::BufferObject *a4)
{
  return *(unsigned __int16 *)E5RT::TensorElementAt<unsigned short>(a1, a2, a3, a4);
}

unint64_t E5RT::TensorElementAt<short>(E5RT::TensorDescriptor *a1, uint64_t *a2, unsigned int a3, E5RT::BufferObject *this)
{
  uint64_t DataSpan = E5RT::BufferObject::GetDataSpan(this);
  uint64_t ByteOffset = E5RT::TensorDescriptor::GetByteOffset((uint64_t)a1, a2);
  TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  if (E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef) <= a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "TensorElementAt");
    std::string::basic_string[abi:ne180100]<0>(v12, "Component index is out of bounds.");
    E5RT::Status::Status(v13, 4, v12);
    E5RT::E5RTError::E5RTError(exception, v14, v13);
  }
  return DataSpan
       + ByteOffset
       + E5RT::TensorDataType::GetComponentSize(TensorDataTypeRef) * (unint64_t)a3;
}

void sub_19240D31C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::TensorElementAt<short>(E5RT::TensorDescriptor *a1, uint64_t *a2, unsigned int a3, E5RT::BufferObject *a4)
{
  return *(__int16 *)E5RT::TensorElementAt<short>(a1, a2, a3, a4);
}

unint64_t E5RT::TensorElementAt<unsigned int>(E5RT::TensorDescriptor *a1, uint64_t *a2, unsigned int a3, E5RT::BufferObject *this)
{
  uint64_t DataSpan = E5RT::BufferObject::GetDataSpan(this);
  uint64_t ByteOffset = E5RT::TensorDescriptor::GetByteOffset((uint64_t)a1, a2);
  TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  if (E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef) <= a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "TensorElementAt");
    std::string::basic_string[abi:ne180100]<0>(v12, "Component index is out of bounds.");
    E5RT::Status::Status(v13, 4, v12);
    E5RT::E5RTError::E5RTError(exception, v14, v13);
  }
  return DataSpan
       + ByteOffset
       + E5RT::TensorDataType::GetComponentSize(TensorDataTypeRef) * (unint64_t)a3;
}

void sub_19240D4A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::TensorElementAt<unsigned int>(E5RT::TensorDescriptor *a1, uint64_t *a2, unsigned int a3, E5RT::BufferObject *a4)
{
  return *(unsigned int *)E5RT::TensorElementAt<unsigned int>(a1, a2, a3, a4);
}

unint64_t E5RT::TensorElementAt<int>(E5RT::TensorDescriptor *a1, uint64_t *a2, unsigned int a3, E5RT::BufferObject *this)
{
  uint64_t DataSpan = E5RT::BufferObject::GetDataSpan(this);
  uint64_t ByteOffset = E5RT::TensorDescriptor::GetByteOffset((uint64_t)a1, a2);
  TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  if (E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef) <= a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "TensorElementAt");
    std::string::basic_string[abi:ne180100]<0>(v12, "Component index is out of bounds.");
    E5RT::Status::Status(v13, 4, v12);
    E5RT::E5RTError::E5RTError(exception, v14, v13);
  }
  return DataSpan
       + ByteOffset
       + E5RT::TensorDataType::GetComponentSize(TensorDataTypeRef) * (unint64_t)a3;
}

void sub_19240D624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::TensorElementAt<int>(E5RT::TensorDescriptor *a1, uint64_t *a2, unsigned int a3, E5RT::BufferObject *a4)
{
  return *(unsigned int *)E5RT::TensorElementAt<int>(a1, a2, a3, a4);
}

void E5RT::CopyTensorFromSrcToDest(E5RT *this, const E5RT::TensorDescriptor *a2, const E5RT::BufferObject *a3, const E5RT::TensorDescriptor *a4, E5RT::BufferObject *a5)
{
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  uint64_t v10 = E5RT::TensorDescriptor::GetTensorShape(a3);
  size_t v11 = *(void *)(TensorShape + 8) - *(void *)TensorShape;
  if (v11 != *(void *)(v10 + 8) - *(void *)v10 || memcmp(*(const void **)TensorShape, *(const void **)v10, v11))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "CopyTensorFromSrcToDest");
    std::string::basic_string[abi:ne180100]<0>(v41, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(&v38, 1, v41);
    E5RT::E5RTError::E5RTError(exception, &__p, &v38);
  }
  uint64_t TensorDataTypeRef = E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  uint64_t v13 = E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  if (E5RT::operator!=(TensorDataTypeRef, v13))
  {
    uint64_t v35 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "CopyTensorFromSrcToDest");
    std::string::basic_string[abi:ne180100]<0>(v41, "Src and Dst tensor data types must be identical.");
    E5RT::Status::Status(&v38, 1, v41);
    E5RT::E5RTError::E5RTError(v35, &__p, &v38);
  }
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(this);
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  if (Rank)
  {
    unint64_t v15 = Rank;
    if (Rank >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = (char *)operator new(8 * Rank);
    uint64_t v17 = &v16[8 * v15];
    uint64_t v38 = v16;
    uint64_t v40 = v17;
    bzero(v16, 8 * v15);
    uint64_t v39 = v17;
    switch(v15)
    {
      case 1uLL:
        sub_19240DED0(this, a2, a3, a4, (uint64_t *)&v38);
        goto LABEL_20;
      case 2uLL:
        sub_19240E1D0(this, a2, a3, a4, (uint64_t *)&v38);
        goto LABEL_20;
      case 3uLL:
        sub_19240E4C0(this, a2, a3, a4, (uint64_t *)&v38);
        goto LABEL_20;
      case 4uLL:
        sub_19240E7B0(this, a2, a3, a4, (uint64_t *)&v38);
        goto LABEL_20;
      case 5uLL:
        int64_t v19 = E5RT::TensorDescriptor::GetRank(this) - 5;
        if (v19 < 0)
        {
          unint64_t v36 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&__p, "CopyTensorFromSrcToDestRecursive");
          std::string::basic_string[abi:ne180100]<0>(v41, "Tensor rank is less than dimension provided.");
          E5RT::Status::Status(v42, 1, v41);
          E5RT::E5RTError::E5RTError(v36, &__p, v42);
        }
        unint64_t v20 = E5RT::TensorDescriptor::GetRank(this);
        if (v20 == E5RT::TensorDescriptor::GetRank(a3))
        {
          TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(this);
          uint64_t v22 = (void *)E5RT::TensorDescriptor::GetTensorStrides(a3);
          if (!memcmp((const void *)(*TensorStrides + 8 * v19), (const void *)(*v22 + 8 * v19), 8 * (v20 - v19)))
          {
            int v30 = (E5RT::TensorDimension *)E5RT::TensorDescriptor::operator[]((uint64_t)this, v19);
            uint64_t Length = E5RT::TensorDimension::GetLength(v30);
            uint64_t v32 = (E5RT::TensorDimension *)E5RT::TensorDescriptor::operator[]((uint64_t)this, v19);
            uint64_t Stride = E5RT::TensorDimension::GetStride(v32);
            sub_19240DD9C((uint64_t)this, a2, (uint64_t)a3, a4, (uint64_t *)&v38, Stride * Length);
            goto LABEL_20;
          }
        }
        uint64_t v23 = E5RT::TensorDescriptor::GetTensorShape(this);
        __p = 0;
        unint64_t v44 = 0;
        uint64_t v45 = 0;
        uint64_t v25 = *(const void **)v23;
        uint64_t v24 = *(void *)(v23 + 8);
        size_t v26 = v24 - *(void *)v23;
        if (v24 == *(void *)v23)
        {
          uint64_t v27 = 0;
          if (!*(void *)(8 * v19)) {
            goto LABEL_26;
          }
        }
        else
        {
          if ((v26 & 0x8000000000000000) != 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v27 = operator new(v24 - *(void *)v23);
          memcpy(v27, v25, v26);
          if (!*((void *)v27 + v19))
          {
LABEL_26:
            operator delete(v27);
            uint64_t v28 = (char *)v38;
            if (v38) {
              goto LABEL_21;
            }
            return;
          }
        }
        unint64_t v29 = 0;
        do
        {
          *((void *)v38 + v19) = v29;
          sub_19240E7B0(this, a2, a3, a4, (uint64_t *)&v38);
          ++v29;
        }
        while (v29 < *((void *)v27 + v19));
        goto LABEL_26;
      default:
        uint64_t v37 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&__p, "CopyTensorFromSrcToDest");
        std::string::basic_string[abi:ne180100]<0>(v41, "Tensor rank must be betweeen 0 and 5.");
        E5RT::Status::Status(v42, 2, v41);
        E5RT::E5RTError::E5RTError(v37, &__p, v42);
    }
  }
  __p = 0;
  unint64_t v44 = 0;
  uint64_t v45 = 0;
  size_t Size = E5RT::TensorDescriptor::GetSize((E5RT::TensorDescriptorImpl **)this);
  sub_19240DD9C((uint64_t)this, a2, (uint64_t)a3, a4, (uint64_t *)&__p, Size);
  if (__p)
  {
    unint64_t v44 = __p;
    operator delete(__p);
  }
  else
  {
LABEL_20:
    uint64_t v28 = (char *)v38;
    if (v38)
    {
LABEL_21:
      uint64_t v39 = v28;
      operator delete(v28);
    }
  }
}

void sub_19240DBC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  E5RT::Status::~Status((E5RT::Status *)&a18);
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a24 < 0)
  {
    operator delete(a19);
    if ((v25 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v25)
  {
LABEL_8:
    if (a9)
    {
      operator delete(a9);
      _Unwind_Resume(a1);
    }
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v24);
  goto LABEL_8;
}

void sub_19240DD38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v21);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v21);
  _Unwind_Resume(a1);
}

void sub_19240DD60(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_19240DD9C(uint64_t a1, E5RT::BufferObject *a2, uint64_t a3, E5RT::BufferObject *a4, uint64_t *a5, size_t a6)
{
  unint64_t ByteOffset = E5RT::TensorDescriptor::GetByteOffset(a1, a5);
  unint64_t v12 = E5RT::TensorDescriptor::GetByteOffset(a3, a5);
  uint64_t DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  if (!a6
    || v14 <= ByteOffset
    || ByteOffset + a6 > v14
    || (v15 = DataSpan, uint64_t v16 = E5RT::BufferObject::GetDataSpan(a4), v17 <= v12)
    || v12 + a6 > v17)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_1E5745140, MEMORY[0x1E4FBA1B8]);
  }
  uint64_t v18 = (void *)(v16 + v12);

  return memmove(v18, (const void *)(v15 + ByteOffset), a6);
}

void sub_19240DEA8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19240DEBC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19240DED0(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t *a5)
{
  int64_t v10 = E5RT::TensorDescriptor::GetRank(a1) - 1;
  if (v10 < 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v30, "CopyTensorFromSrcToDestRecursive");
    std::string::basic_string[abi:ne180100]<0>(v28, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(v29, 1, v28);
    E5RT::E5RTError::E5RTError(exception, v30, v29);
  }
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  if (Rank != E5RT::TensorDescriptor::GetRank(a3)
    || (unint64_t v12 = Rank - v10,
        TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1),
        unint64_t v14 = (void *)E5RT::TensorDescriptor::GetTensorStrides(a3),
        memcmp((const void *)(*TensorStrides + 8 * v10), (const void *)(*v14 + 8 * v10), 8 * v12)))
  {
    uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(a1);
    memset(v30, 0, sizeof(v30));
    unint64_t v17 = *(const void **)TensorShape;
    uint64_t v16 = *(void *)(TensorShape + 8);
    size_t v18 = v16 - *(void *)TensorShape;
    if (v16 == *(void *)TensorShape)
    {
      int64_t v19 = 0;
      if (!*(void *)(8 * v10)) {
        goto LABEL_11;
      }
    }
    else
    {
      if ((v18 & 0x8000000000000000) != 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      int64_t v19 = operator new(v16 - *(void *)TensorShape);
      memcpy(v19, v17, v18);
      if (!*((void *)v19 + v10)) {
        goto LABEL_11;
      }
    }
    unint64_t v20 = 0;
    do
    {
      *(void *)(*a5 + 8 * v10) = v20;
      uint64_t TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
      unsigned int ElementSize = E5RT::TensorDataType::GetElementSize(TensorDataTypeRef);
      sub_19240DD9C((uint64_t)a1, a2, (uint64_t)a3, a4, a5, ElementSize);
      ++v20;
    }
    while (v20 < *((void *)v19 + v10));
LABEL_11:
    operator delete(v19);
    return;
  }
  uint64_t v23 = (E5RT::TensorDimension *)E5RT::TensorDescriptor::operator[]((uint64_t)a1, v10);
  uint64_t Length = E5RT::TensorDimension::GetLength(v23);
  int v25 = (E5RT::TensorDimension *)E5RT::TensorDescriptor::operator[]((uint64_t)a1, v10);
  size_t v26 = E5RT::TensorDimension::GetStride(v25) * Length;

  sub_19240DD9C((uint64_t)a1, a2, (uint64_t)a3, a4, a5, v26);
}

void sub_19240E124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_19240E198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v19);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

void sub_19240E1D0(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t *a5)
{
  int64_t v10 = E5RT::TensorDescriptor::GetRank(a1) - 2;
  if (v10 < 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v28, "CopyTensorFromSrcToDestRecursive");
    std::string::basic_string[abi:ne180100]<0>(v26, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(v27, 1, v26);
    E5RT::E5RTError::E5RTError(exception, v28, v27);
  }
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  if (Rank != E5RT::TensorDescriptor::GetRank(a3)
    || (unint64_t v12 = Rank - v10,
        TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1),
        unint64_t v14 = (void *)E5RT::TensorDescriptor::GetTensorStrides(a3),
        memcmp((const void *)(*TensorStrides + 8 * v10), (const void *)(*v14 + 8 * v10), 8 * v12)))
  {
    uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(a1);
    memset(v28, 0, sizeof(v28));
    unint64_t v17 = *(const void **)TensorShape;
    uint64_t v16 = *(void *)(TensorShape + 8);
    size_t v18 = v16 - *(void *)TensorShape;
    if (v16 == *(void *)TensorShape)
    {
      int64_t v19 = 0;
      if (!*(void *)(8 * v10)) {
        goto LABEL_11;
      }
    }
    else
    {
      if ((v18 & 0x8000000000000000) != 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      int64_t v19 = operator new(v16 - *(void *)TensorShape);
      memcpy(v19, v17, v18);
      if (!*((void *)v19 + v10)) {
        goto LABEL_11;
      }
    }
    unint64_t v20 = 0;
    do
    {
      *(void *)(*a5 + 8 * v10) = v20;
      sub_19240DED0(a1, a2, a3, a4, a5);
      ++v20;
    }
    while (v20 < *((void *)v19 + v10));
LABEL_11:
    operator delete(v19);
    return;
  }
  uint64_t v21 = (E5RT::TensorDimension *)E5RT::TensorDescriptor::operator[]((uint64_t)a1, v10);
  uint64_t Length = E5RT::TensorDimension::GetLength(v21);
  uint64_t v23 = (E5RT::TensorDimension *)E5RT::TensorDescriptor::operator[]((uint64_t)a1, v10);
  size_t v24 = E5RT::TensorDimension::GetStride(v23) * Length;

  sub_19240DD9C((uint64_t)a1, a2, (uint64_t)a3, a4, a5, v24);
}

void sub_19240E414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_19240E488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v19);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

void sub_19240E4C0(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t *a5)
{
  int64_t v10 = E5RT::TensorDescriptor::GetRank(a1) - 3;
  if (v10 < 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v28, "CopyTensorFromSrcToDestRecursive");
    std::string::basic_string[abi:ne180100]<0>(v26, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(v27, 1, v26);
    E5RT::E5RTError::E5RTError(exception, v28, v27);
  }
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  if (Rank != E5RT::TensorDescriptor::GetRank(a3)
    || (unint64_t v12 = Rank - v10,
        TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1),
        unint64_t v14 = (void *)E5RT::TensorDescriptor::GetTensorStrides(a3),
        memcmp((const void *)(*TensorStrides + 8 * v10), (const void *)(*v14 + 8 * v10), 8 * v12)))
  {
    uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(a1);
    memset(v28, 0, sizeof(v28));
    unint64_t v17 = *(const void **)TensorShape;
    uint64_t v16 = *(void *)(TensorShape + 8);
    size_t v18 = v16 - *(void *)TensorShape;
    if (v16 == *(void *)TensorShape)
    {
      int64_t v19 = 0;
      if (!*(void *)(8 * v10)) {
        goto LABEL_11;
      }
    }
    else
    {
      if ((v18 & 0x8000000000000000) != 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      int64_t v19 = operator new(v16 - *(void *)TensorShape);
      memcpy(v19, v17, v18);
      if (!*((void *)v19 + v10)) {
        goto LABEL_11;
      }
    }
    unint64_t v20 = 0;
    do
    {
      *(void *)(*a5 + 8 * v10) = v20;
      sub_19240E1D0(a1, a2, a3, a4, a5);
      ++v20;
    }
    while (v20 < *((void *)v19 + v10));
LABEL_11:
    operator delete(v19);
    return;
  }
  uint64_t v21 = (E5RT::TensorDimension *)E5RT::TensorDescriptor::operator[]((uint64_t)a1, v10);
  uint64_t Length = E5RT::TensorDimension::GetLength(v21);
  uint64_t v23 = (E5RT::TensorDimension *)E5RT::TensorDescriptor::operator[]((uint64_t)a1, v10);
  size_t v24 = E5RT::TensorDimension::GetStride(v23) * Length;

  sub_19240DD9C((uint64_t)a1, a2, (uint64_t)a3, a4, a5, v24);
}

void sub_19240E704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_19240E778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v19);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

void sub_19240E7B0(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t *a5)
{
  int64_t v10 = E5RT::TensorDescriptor::GetRank(a1) - 4;
  if (v10 < 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v28, "CopyTensorFromSrcToDestRecursive");
    std::string::basic_string[abi:ne180100]<0>(v26, "Tensor rank is less than dimension provided.");
    E5RT::Status::Status(v27, 1, v26);
    E5RT::E5RTError::E5RTError(exception, v28, v27);
  }
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  if (Rank != E5RT::TensorDescriptor::GetRank(a3)
    || (unint64_t v12 = Rank - v10,
        TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1),
        unint64_t v14 = (void *)E5RT::TensorDescriptor::GetTensorStrides(a3),
        memcmp((const void *)(*TensorStrides + 8 * v10), (const void *)(*v14 + 8 * v10), 8 * v12)))
  {
    uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(a1);
    memset(v28, 0, sizeof(v28));
    unint64_t v17 = *(const void **)TensorShape;
    uint64_t v16 = *(void *)(TensorShape + 8);
    size_t v18 = v16 - *(void *)TensorShape;
    if (v16 == *(void *)TensorShape)
    {
      int64_t v19 = 0;
      if (!*(void *)(8 * v10)) {
        goto LABEL_11;
      }
    }
    else
    {
      if ((v18 & 0x8000000000000000) != 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      int64_t v19 = operator new(v16 - *(void *)TensorShape);
      memcpy(v19, v17, v18);
      if (!*((void *)v19 + v10)) {
        goto LABEL_11;
      }
    }
    unint64_t v20 = 0;
    do
    {
      *(void *)(*a5 + 8 * v10) = v20;
      sub_19240E4C0(a1, a2, a3, a4, a5);
      ++v20;
    }
    while (v20 < *((void *)v19 + v10));
LABEL_11:
    operator delete(v19);
    return;
  }
  uint64_t v21 = (E5RT::TensorDimension *)E5RT::TensorDescriptor::operator[]((uint64_t)a1, v10);
  uint64_t Length = E5RT::TensorDimension::GetLength(v21);
  uint64_t v23 = (E5RT::TensorDimension *)E5RT::TensorDescriptor::operator[]((uint64_t)a1, v10);
  size_t v24 = E5RT::TensorDimension::GetStride(v23) * Length;

  sub_19240DD9C((uint64_t)a1, a2, (uint64_t)a3, a4, a5, v24);
}

void sub_19240E9F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_19240EA68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v19);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

uint64_t E5RT::AreTensorsEqual(E5RT *this, const E5RT::TensorDescriptor *a2, const E5RT::BufferObject *a3, const E5RT::TensorDescriptor *a4, const E5RT::BufferObject *a5)
{
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  uint64_t v10 = E5RT::TensorDescriptor::GetTensorShape(a3);
  size_t v11 = *(void *)(TensorShape + 8) - *(void *)TensorShape;
  if (v11 != *(void *)(v10 + 8) - *(void *)v10) {
    return 0;
  }
  if (memcmp(*(const void **)TensorShape, *(const void **)v10, v11)) {
    return 0;
  }
  uint64_t TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  uint64_t v13 = E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  if (E5RT::operator!=((uint64_t)TensorDataTypeRef, v13)) {
    return 0;
  }
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(this);
  if (Rank)
  {
    unint64_t v17 = Rank;
    __p = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    if (Rank >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    size_t v18 = 8 * Rank;
    __p = operator new(8 * Rank);
    uint64_t v23 = (char *)__p + 8 * v17;
    bzero(__p, v18);
    uint64_t v22 = v23;
    uint64_t v19 = sub_19240F204(this, a2, a3, a4, (uint64_t *)&__p, 0);
  }
  else
  {
    __p = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    unsigned int ElementSize = E5RT::TensorDataType::GetElementSize(TensorDataTypeRef);
    uint64_t v19 = sub_19240EC1C(this, a2, (uint64_t)a3, a4, (uint64_t *)&__p, ElementSize);
  }
  uint64_t v14 = v19;
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }
  return v14;
}

void sub_19240EBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_19240EC1C(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, uint64_t a3, E5RT::BufferObject *a4, uint64_t *a5, unint64_t a6)
{
  unint64_t ByteOffset = E5RT::TensorDescriptor::GetByteOffset((uint64_t)a1, a5);
  unint64_t v13 = E5RT::TensorDescriptor::GetByteOffset(a3, a5);
  uint64_t DataSpan = E5RT::BufferObject::GetDataSpan(a2);
  if (!a6
    || v15 <= ByteOffset
    || ByteOffset + a6 > v15
    || (uint64_t v16 = DataSpan, v17 = E5RT::BufferObject::GetDataSpan(a4), v18 <= v13)
    || v13 + a6 > v18)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_1E5745140, MEMORY[0x1E4FBA1B8]);
  }
  uint64_t v19 = v17;
  E5RT::TensorDescriptor::GetTensorDataType(a1, (E5RT::TensorDataType *)v111);
  unint64_t v20 = (char *)(v16 + ByteOffset);
  uint64_t v21 = (__int16 *)(v19 + v13);
  if (E5RT::TensorDataType::IsType<float>((uint64_t)v111))
  {
    if (a6 >= 4) {
      uint64_t v22 = (float *)v20;
    }
    else {
      uint64_t v22 = 0;
    }
    if (a6 >= 4)
    {
      uint64_t v23 = 4 * (a6 >> 2) - 4;
      do
      {
        float v24 = *v22++;
        float v25 = v24;
        float v26 = *(float *)v21;
        v21 += 2;
        float v27 = vabds_f32(v25, v26);
        float v28 = fabsf(v25);
        float v29 = fabsf(v26);
        if (v28 < v29) {
          float v28 = v29;
        }
        float v30 = v28 * 0.001;
        if (v30 < 0.001) {
          float v30 = 0.001;
        }
        BOOL v31 = v27 <= v30;
        _ZF = v27 > v30 || v23 == 0;
        v23 -= 4;
      }
      while (!_ZF);
      goto LABEL_63;
    }
LABEL_27:
    BOOL v31 = 1;
    goto LABEL_63;
  }
  if (_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)v111))
  {
    if (a6 >= 2) {
      uint64_t v33 = v20;
    }
    else {
      uint64_t v33 = 0;
    }
    if (a6 < 2) {
      goto LABEL_27;
    }
    uint64_t v42 = 2 * (a6 >> 1) - 2;
    do
    {
      __int16 v43 = *(_WORD *)v33;
      v33 += 2;
      _H0 = v43;
      __asm { FCVT            S0, H0 }
      __int16 v49 = *v21++;
      _H1 = v49;
      __asm { FCVT            S1, H1 }
      float v52 = vabds_f32(_S0, _S1);
      float v53 = fabsf(_S0);
      float v54 = fabsf(_S1);
      if (v53 < v54) {
        float v53 = v54;
      }
      float v55 = v53 * 0.001;
      if (v55 < 0.001) {
        float v55 = 0.001;
      }
      BOOL v31 = v52 <= v55;
      BOOL v56 = v52 > v55 || v42 == 0;
      v42 -= 2;
    }
    while (!v56);
  }
  else if (E5RT::TensorDataType::IsType<unsigned char>((uint64_t)v111))
  {
    unint64_t v34 = a6 - 1;
    do
    {
      unsigned int v35 = *v20++;
      float v36 = (float)v35;
      unsigned int v37 = *(unsigned __int8 *)v21;
      uint64_t v21 = (__int16 *)((char *)v21 + 1);
      float v38 = (float)v37;
      float v39 = vabds_f32(v36, (float)v37);
      if (v36 < (float)v37) {
        float v36 = v38;
      }
      float v40 = v36 * 0.001;
      if (v40 < 0.001) {
        float v40 = 0.001;
      }
      BOOL v31 = v39 <= v40;
    }
    while (v39 <= v40 && v34-- != 0);
  }
  else if (E5RT::TensorDataType::IsType<signed char>((uint64_t)v111))
  {
    unint64_t v57 = a6 - 1;
    do
    {
      int v58 = *v20++;
      float v59 = (float)v58;
      int v60 = *(char *)v21;
      uint64_t v21 = (__int16 *)((char *)v21 + 1);
      float v61 = (float)v60;
      float v62 = fabsf(v59);
      float v63 = fabsf((float)v60);
      if (v62 < v63) {
        float v62 = v63;
      }
      float v64 = v62 * 0.001;
      float v65 = vabds_f32(v59, v61);
      if (v64 >= 0.001) {
        float v66 = v64;
      }
      else {
        float v66 = 0.001;
      }
      BOOL v31 = v65 <= v66;
    }
    while (v65 <= v66 && v57-- != 0);
  }
  else if (E5RT::TensorDataType::IsType<unsigned short>((uint64_t)v111))
  {
    if (a6 >= 2) {
      v69 = v20;
    }
    else {
      v69 = 0;
    }
    if (a6 < 2) {
      goto LABEL_27;
    }
    uint64_t v70 = 2 * (a6 >> 1) - 2;
    do
    {
      unsigned int v71 = *(unsigned __int16 *)v69;
      v69 += 2;
      float v72 = (float)v71;
      unsigned int v73 = (unsigned __int16)*v21++;
      float v74 = (float)v73;
      float v75 = vabds_f32(v72, (float)v73);
      if (v72 < (float)v73) {
        float v72 = v74;
      }
      float v76 = v72 * 0.001;
      if (v76 < 0.001) {
        float v76 = 0.001;
      }
      BOOL v31 = v75 <= v76;
      BOOL v77 = v75 > v76 || v70 == 0;
      v70 -= 2;
    }
    while (!v77);
  }
  else if (E5RT::TensorDataType::IsType<short>((uint64_t)v111))
  {
    if (a6 >= 2) {
      uint64_t v78 = v20;
    }
    else {
      uint64_t v78 = 0;
    }
    if (a6 < 2) {
      goto LABEL_27;
    }
    uint64_t v79 = 2 * (a6 >> 1) - 2;
    do
    {
      int v80 = *(__int16 *)v78;
      v78 += 2;
      float v81 = (float)v80;
      int v82 = *v21++;
      float v83 = (float)v82;
      float v84 = fabsf(v81);
      float v85 = fabsf((float)v82);
      if (v84 < v85) {
        float v84 = v85;
      }
      float v86 = v84 * 0.001;
      float v87 = vabds_f32(v81, v83);
      if (v86 >= 0.001) {
        float v88 = v86;
      }
      else {
        float v88 = 0.001;
      }
      BOOL v31 = v87 <= v88;
      BOOL v89 = v87 > v88 || v79 == 0;
      v79 -= 2;
    }
    while (!v89);
  }
  else if (E5RT::TensorDataType::IsType<unsigned int>((uint64_t)v111))
  {
    if (a6 >= 4) {
      uint64_t v90 = (unsigned int *)v20;
    }
    else {
      uint64_t v90 = 0;
    }
    if (a6 < 4) {
      goto LABEL_27;
    }
    uint64_t v91 = 4 * (a6 >> 2) - 4;
    do
    {
      unsigned int v92 = *v90++;
      float v93 = (float)v92;
      unsigned int v94 = *(_DWORD *)v21;
      v21 += 2;
      float v95 = (float)v94;
      float v96 = vabds_f32(v93, (float)v94);
      if (v93 < (float)v94) {
        float v93 = v95;
      }
      float v97 = v93 * 0.001;
      if (v97 < 0.001) {
        float v97 = 0.001;
      }
      BOOL v31 = v96 <= v97;
      BOOL v98 = v96 > v97 || v91 == 0;
      v91 -= 4;
    }
    while (!v98);
  }
  else
  {
    if (!E5RT::TensorDataType::IsType<int>((uint64_t)v111))
    {
      v110 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v114, "AreEqual");
      std::string::basic_string[abi:ne180100]<0>(v112, "Unsupported dtype.");
      E5RT::Status::Status(v113, 1, v112);
      E5RT::E5RTError::E5RTError(v110, v114, v113);
    }
    if (a6 >= 4) {
      unint64_t v99 = (int *)v20;
    }
    else {
      unint64_t v99 = 0;
    }
    if (a6 < 4) {
      goto LABEL_27;
    }
    uint64_t v100 = 4 * (a6 >> 2) - 4;
    do
    {
      int v101 = *v99++;
      float v102 = (float)v101;
      int v103 = *(_DWORD *)v21;
      v21 += 2;
      float v104 = vabds_f32(v102, (float)v103);
      float v105 = fabsf(v102);
      float v106 = fabsf((float)v103);
      if (v105 < v106) {
        float v105 = v106;
      }
      float v107 = v105 * 0.001;
      if (v107 < 0.001) {
        float v107 = 0.001;
      }
      BOOL v31 = v104 <= v107;
      BOOL v108 = v104 > v107 || v100 == 0;
      v100 -= 4;
    }
    while (!v108);
  }
LABEL_63:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v111);
  return v31;
}

void sub_19240F138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  E5RT::Status::~Status((E5RT::Status *)&a18);
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a24 < 0)
  {
    operator delete(a19);
    if ((v25 & 1) == 0)
    {
LABEL_8:
      E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a10);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v24);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a10);
  _Unwind_Resume(a1);
}

void sub_19240F1DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19240F1F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19240F204(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *a3, E5RT::BufferObject *a4, uint64_t *a5, unint64_t a6)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  if (Rank == E5RT::TensorDescriptor::GetRank(a3)
    && (unint64_t v13 = Rank - a6,
        TensorStrides = (void *)E5RT::TensorDescriptor::GetTensorStrides(a1),
        unint64_t v15 = (void *)E5RT::TensorDescriptor::GetTensorStrides(a3),
        !memcmp((const void *)(*TensorStrides + 8 * a6), (const void *)(*v15 + 8 * a6), 8 * v13)))
  {
    uint64_t v23 = (E5RT::TensorDimension *)E5RT::TensorDescriptor::operator[]((uint64_t)a1, a6);
    uint64_t Length = E5RT::TensorDimension::GetLength(v23);
    int v25 = (E5RT::TensorDimension *)E5RT::TensorDescriptor::operator[]((uint64_t)a1, a6);
    unint64_t v26 = E5RT::TensorDimension::GetStride(v25) * Length;
    return sub_19240EC1C(a1, a2, (uint64_t)a3, a4, a5, v26);
  }
  else
  {
    uint64_t v16 = (E5RT::TensorDimension *)E5RT::TensorDescriptor::operator[]((uint64_t)a1, a6);
    uint64_t v17 = E5RT::TensorDimension::GetLength(v16);
    if (v17)
    {
      uint64_t v18 = v17;
      for (uint64_t i = 0; v18 != i; ++i)
      {
        *(void *)(*a5 + 8 * a6) = i;
        if (E5RT::TensorDescriptor::GetRank(a1) - 1 == a6)
        {
          uint64_t TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
          unsigned int ElementSize = E5RT::TensorDataType::GetElementSize(TensorDataTypeRef);
          if (!sub_19240EC1C(a1, a2, (uint64_t)a3, a4, a5, ElementSize)) {
            return 0;
          }
        }
        else
        {
          uint64_t result = sub_19240F204(a1, a2, a3, a4, a5, a6 + 1);
          if (!result) {
            return result;
          }
        }
      }
    }
    return 1;
  }
}

uint64_t _ZN4E5RT10TensorCastIfDF16_EEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<float>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x50uLL);
    long long v18 = xmmword_192DB9900;
    strcpy(v17, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(exception, v20, v19);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    unint64_t v15 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DA90C0;
    strcpy(v17, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v15, v20, v19);
  }
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  uint64_t v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  size_t v12 = *(void *)(TensorShape + 8) - *(void *)TensorShape;
  if (v12 != *(void *)(v11 + 8) - *(void *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    uint64_t v16 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DAA4A0;
    strcpy(v17, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v16, v20, v19);
  }
  v20[0] = &unk_1EE3785A0;
  v20[1] = _ZN4E5RT17ElementwiseOpCastIfDF16_EEvPT_PKT0_m;
  uint64_t v21 = v20;
  _ZN4E5RT34ElementwiseOperationImplementationIfDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a4, a1, a2, (uint64_t)v20);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
  }
  else if (v21)
  {
    (*(void (**)(void))(*v21 + 40))();
  }
  return kdebug_trace();
}

void sub_19240F7CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::TensorCast<float,unsigned int>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<unsigned int>((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<float>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x50uLL);
    long long v18 = xmmword_192DB9900;
    strcpy(v17, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(exception, v20, v19);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    unint64_t v15 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DA90C0;
    strcpy(v17, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v15, v20, v19);
  }
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  uint64_t v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  size_t v12 = *(void *)(TensorShape + 8) - *(void *)TensorShape;
  if (v12 != *(void *)(v11 + 8) - *(void *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    uint64_t v16 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DAA4A0;
    strcpy(v17, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v16, v20, v19);
  }
  v20[0] = &unk_1EE378758;
  v20[1] = E5RT::ElementwiseOpCast<float,unsigned int>;
  uint64_t v21 = v20;
  E5RT::ElementwiseOperationImplementation<float,unsigned int>(this, a4, a1, a2, (uint64_t)v20);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
  }
  else if (v21)
  {
    (*(void (**)(void))(*v21 + 40))();
  }
  return kdebug_trace();
}

void sub_19240FCF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::TensorCast<float,int>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<int>((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<float>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x50uLL);
    long long v18 = xmmword_192DB9900;
    strcpy(v17, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(exception, v20, v19);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    unint64_t v15 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DA90C0;
    strcpy(v17, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v15, v20, v19);
  }
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  uint64_t v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  size_t v12 = *(void *)(TensorShape + 8) - *(void *)TensorShape;
  if (v12 != *(void *)(v11 + 8) - *(void *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    uint64_t v16 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DAA4A0;
    strcpy(v17, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v16, v20, v19);
  }
  v20[0] = &unk_1EE378700;
  v20[1] = E5RT::ElementwiseOpCast<float,int>;
  uint64_t v21 = v20;
  E5RT::ElementwiseOperationImplementation<float,int>(this, a4, a1, a2, (uint64_t)v20);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
  }
  else if (v21)
  {
    (*(void (**)(void))(*v21 + 40))();
  }
  return kdebug_trace();
}

void sub_192410224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::TensorCast<float,unsigned short>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<unsigned short>((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<float>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x50uLL);
    long long v18 = xmmword_192DB9900;
    strcpy(v17, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(exception, v20, v19);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    unint64_t v15 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DA90C0;
    strcpy(v17, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v15, v20, v19);
  }
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  uint64_t v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  size_t v12 = *(void *)(TensorShape + 8) - *(void *)TensorShape;
  if (v12 != *(void *)(v11 + 8) - *(void *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    uint64_t v16 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DAA4A0;
    strcpy(v17, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v16, v20, v19);
  }
  v20[0] = &unk_1EE378808;
  v20[1] = E5RT::ElementwiseOpCast<float,unsigned short>;
  uint64_t v21 = v20;
  E5RT::ElementwiseOperationImplementation<float,unsigned short>(this, a4, a1, a2, (uint64_t)v20);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
  }
  else if (v21)
  {
    (*(void (**)(void))(*v21 + 40))();
  }
  return kdebug_trace();
}

void sub_192410750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::TensorCast<float,short>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<short>((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<float>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x50uLL);
    long long v18 = xmmword_192DB9900;
    strcpy(v17, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(exception, v20, v19);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    unint64_t v15 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DA90C0;
    strcpy(v17, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v15, v20, v19);
  }
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  uint64_t v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  size_t v12 = *(void *)(TensorShape + 8) - *(void *)TensorShape;
  if (v12 != *(void *)(v11 + 8) - *(void *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    uint64_t v16 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DAA4A0;
    strcpy(v17, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v16, v20, v19);
  }
  v20[0] = &unk_1EE3787B0;
  v20[1] = E5RT::ElementwiseOpCast<float,short>;
  uint64_t v21 = v20;
  E5RT::ElementwiseOperationImplementation<float,short>(this, a4, a1, a2, (uint64_t)v20);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
  }
  else if (v21)
  {
    (*(void (**)(void))(*v21 + 40))();
  }
  return kdebug_trace();
}

void sub_192410C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::TensorCast<float,unsigned char>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<unsigned char>((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<float>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x50uLL);
    long long v18 = xmmword_192DB9900;
    strcpy(v17, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(exception, v20, v19);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    unint64_t v15 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DA90C0;
    strcpy(v17, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v15, v20, v19);
  }
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  uint64_t v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  size_t v12 = *(void *)(TensorShape + 8) - *(void *)TensorShape;
  if (v12 != *(void *)(v11 + 8) - *(void *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    uint64_t v16 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DAA4A0;
    strcpy(v17, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v16, v20, v19);
  }
  v20[0] = &unk_1EE3786A8;
  v20[1] = E5RT::ElementwiseOpCast<float,unsigned char>;
  uint64_t v21 = v20;
  E5RT::ElementwiseOperationImplementation<float,unsigned char>(this, a4, a1, a2, (uint64_t)v20);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
  }
  else if (v21)
  {
    (*(void (**)(void))(*v21 + 40))();
  }
  return kdebug_trace();
}

void sub_1924111A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::TensorCast<float,signed char>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<signed char>((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<float>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x50uLL);
    long long v18 = xmmword_192DB9900;
    strcpy(v17, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(exception, v20, v19);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    unint64_t v15 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DA90C0;
    strcpy(v17, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v15, v20, v19);
  }
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  uint64_t v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  size_t v12 = *(void *)(TensorShape + 8) - *(void *)TensorShape;
  if (v12 != *(void *)(v11 + 8) - *(void *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    uint64_t v16 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DAA4A0;
    strcpy(v17, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v16, v20, v19);
  }
  v20[0] = &unk_1EE3785F8;
  v20[1] = E5RT::ElementwiseOpCast<float,signed char>;
  uint64_t v21 = v20;
  E5RT::ElementwiseOperationImplementation<float,signed char>(this, a4, a1, a2, (uint64_t)v20);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
  }
  else if (v21)
  {
    (*(void (**)(void))(*v21 + 40))();
  }
  return kdebug_trace();
}

void sub_1924116D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t _ZN4E5RT10TensorCastIDF16_fEEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<float>((uint64_t)TensorDataTypeRef)
    || !_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x50uLL);
    long long v18 = xmmword_192DB9900;
    strcpy(v17, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(exception, v20, v19);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    unint64_t v15 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DA90C0;
    strcpy(v17, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v15, v20, v19);
  }
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  uint64_t v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  size_t v12 = *(void *)(TensorShape + 8) - *(void *)TensorShape;
  if (v12 != *(void *)(v11 + 8) - *(void *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    uint64_t v16 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DAA4A0;
    strcpy(v17, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v16, v20, v19);
  }
  v20[0] = &unk_1EE3780D0;
  v20[1] = _ZN4E5RT17ElementwiseOpCastIDF16_fEEvPT_PKT0_m;
  uint64_t v21 = v20;
  _ZN4E5RT34ElementwiseOperationImplementationIDF16_fEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a4, a1, a2, (uint64_t)v20);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
  }
  else if (v21)
  {
    (*(void (**)(void))(*v21 + 40))();
  }
  return kdebug_trace();
}

void sub_192411C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::TensorCast<unsigned int,float>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<float>((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<unsigned int>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x50uLL);
    long long v18 = xmmword_192DB9900;
    strcpy(v17, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(exception, v20, v19);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    unint64_t v15 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DA90C0;
    strcpy(v17, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v15, v20, v19);
  }
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  uint64_t v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  size_t v12 = *(void *)(TensorShape + 8) - *(void *)TensorShape;
  if (v12 != *(void *)(v11 + 8) - *(void *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    uint64_t v16 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DAA4A0;
    strcpy(v17, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v16, v20, v19);
  }
  v20[0] = &unk_1EE378E90;
  v20[1] = E5RT::ElementwiseOpCast<unsigned int,float>;
  uint64_t v21 = v20;
  E5RT::ElementwiseOperationImplementation<unsigned int,float>(this, a4, a1, a2, (uint64_t)v20);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
  }
  else if (v21)
  {
    (*(void (**)(void))(*v21 + 40))();
  }
  return kdebug_trace();
}

void sub_19241212C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::TensorCast<int,float>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<float>((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<int>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x50uLL);
    long long v18 = xmmword_192DB9900;
    strcpy(v17, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(exception, v20, v19);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    unint64_t v15 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DA90C0;
    strcpy(v17, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v15, v20, v19);
  }
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  uint64_t v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  size_t v12 = *(void *)(TensorShape + 8) - *(void *)TensorShape;
  if (v12 != *(void *)(v11 + 8) - *(void *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    uint64_t v16 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DAA4A0;
    strcpy(v17, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v16, v20, v19);
  }
  v20[0] = &unk_1EE378BD0;
  v20[1] = E5RT::ElementwiseOpCast<int,float>;
  uint64_t v21 = v20;
  E5RT::ElementwiseOperationImplementation<int,float>(this, a4, a1, a2, (uint64_t)v20);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
  }
  else if (v21)
  {
    (*(void (**)(void))(*v21 + 40))();
  }
  return kdebug_trace();
}

void sub_192412658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::TensorCast<unsigned short,float>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<float>((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<unsigned short>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x50uLL);
    long long v18 = xmmword_192DB9900;
    strcpy(v17, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(exception, v20, v19);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    unint64_t v15 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DA90C0;
    strcpy(v17, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v15, v20, v19);
  }
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  uint64_t v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  size_t v12 = *(void *)(TensorShape + 8) - *(void *)TensorShape;
  if (v12 != *(void *)(v11 + 8) - *(void *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    uint64_t v16 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DAA4A0;
    strcpy(v17, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v16, v20, v19);
  }
  v20[0] = &unk_1EE379410;
  v20[1] = E5RT::ElementwiseOpCast<unsigned short,float>;
  uint64_t v21 = v20;
  E5RT::ElementwiseOperationImplementation<unsigned short,float>(this, a4, a1, a2, (uint64_t)v20);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
  }
  else if (v21)
  {
    (*(void (**)(void))(*v21 + 40))();
  }
  return kdebug_trace();
}

void sub_192412B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::TensorCast<short,float>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<float>((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<short>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x50uLL);
    long long v18 = xmmword_192DB9900;
    strcpy(v17, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(exception, v20, v19);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    unint64_t v15 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DA90C0;
    strcpy(v17, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v15, v20, v19);
  }
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  uint64_t v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  size_t v12 = *(void *)(TensorShape + 8) - *(void *)TensorShape;
  if (v12 != *(void *)(v11 + 8) - *(void *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    uint64_t v16 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DAA4A0;
    strcpy(v17, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v16, v20, v19);
  }
  v20[0] = &unk_1EE379150;
  v20[1] = E5RT::ElementwiseOpCast<short,float>;
  uint64_t v21 = v20;
  E5RT::ElementwiseOperationImplementation<short,float>(this, a4, a1, a2, (uint64_t)v20);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
  }
  else if (v21)
  {
    (*(void (**)(void))(*v21 + 40))();
  }
  return kdebug_trace();
}

void sub_1924130B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::TensorCast<signed char,float>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<float>((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<signed char>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x50uLL);
    long long v18 = xmmword_192DB9900;
    strcpy(v17, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(exception, v20, v19);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    unint64_t v15 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DA90C0;
    strcpy(v17, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v15, v20, v19);
  }
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  uint64_t v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  size_t v12 = *(void *)(TensorShape + 8) - *(void *)TensorShape;
  if (v12 != *(void *)(v11 + 8) - *(void *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    uint64_t v16 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DAA4A0;
    strcpy(v17, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v16, v20, v19);
  }
  v20[0] = &unk_1EE378390;
  v20[1] = E5RT::ElementwiseOpCast<signed char,float>;
  uint64_t v21 = v20;
  E5RT::ElementwiseOperationImplementation<signed char,float>(this, a4, a1, a2, (uint64_t)v20);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
  }
  else if (v21)
  {
    (*(void (**)(void))(*v21 + 40))();
  }
  return kdebug_trace();
}

void sub_1924135DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t _ZN4E5RT10TensorCastIDF16_jEEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<unsigned int>((uint64_t)TensorDataTypeRef)
    || !_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x50uLL);
    long long v18 = xmmword_192DB9900;
    strcpy(v17, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(exception, v20, v19);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    unint64_t v15 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DA90C0;
    strcpy(v17, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v15, v20, v19);
  }
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  uint64_t v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  size_t v12 = *(void *)(TensorShape + 8) - *(void *)TensorShape;
  if (v12 != *(void *)(v11 + 8) - *(void *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    uint64_t v16 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DAA4A0;
    strcpy(v17, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v16, v20, v19);
  }
  v20[0] = &unk_1EE3781D8;
  v20[1] = _ZN4E5RT17ElementwiseOpCastIDF16_jEEvPT_PKT0_m;
  uint64_t v21 = v20;
  _ZN4E5RT34ElementwiseOperationImplementationIDF16_jEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a4, a1, a2, (uint64_t)v20);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
  }
  else if (v21)
  {
    (*(void (**)(void))(*v21 + 40))();
  }
  return kdebug_trace();
}

void sub_192413B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t _ZN4E5RT10TensorCastIDF16_iEEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<int>((uint64_t)TensorDataTypeRef)
    || !_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x50uLL);
    long long v18 = xmmword_192DB9900;
    strcpy(v17, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(exception, v20, v19);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    unint64_t v15 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DA90C0;
    strcpy(v17, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v15, v20, v19);
  }
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  uint64_t v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  size_t v12 = *(void *)(TensorShape + 8) - *(void *)TensorShape;
  if (v12 != *(void *)(v11 + 8) - *(void *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    uint64_t v16 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DAA4A0;
    strcpy(v17, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v16, v20, v19);
  }
  v20[0] = &unk_1EE378180;
  v20[1] = _ZN4E5RT17ElementwiseOpCastIDF16_iEEvPT_PKT0_m;
  uint64_t v21 = v20;
  _ZN4E5RT34ElementwiseOperationImplementationIDF16_iEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a4, a1, a2, (uint64_t)v20);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
  }
  else if (v21)
  {
    (*(void (**)(void))(*v21 + 40))();
  }
  return kdebug_trace();
}

void sub_192414034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t _ZN4E5RT10TensorCastIDF16_tEEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<unsigned short>((uint64_t)TensorDataTypeRef)
    || !_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x50uLL);
    long long v18 = xmmword_192DB9900;
    strcpy(v17, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(exception, v20, v19);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    unint64_t v15 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DA90C0;
    strcpy(v17, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v15, v20, v19);
  }
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  uint64_t v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  size_t v12 = *(void *)(TensorShape + 8) - *(void *)TensorShape;
  if (v12 != *(void *)(v11 + 8) - *(void *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    uint64_t v16 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DAA4A0;
    strcpy(v17, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v16, v20, v19);
  }
  v20[0] = &unk_1EE378288;
  v20[1] = _ZN4E5RT17ElementwiseOpCastIDF16_tEEvPT_PKT0_m;
  uint64_t v21 = v20;
  _ZN4E5RT34ElementwiseOperationImplementationIDF16_tEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a4, a1, a2, (uint64_t)v20);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
  }
  else if (v21)
  {
    (*(void (**)(void))(*v21 + 40))();
  }
  return kdebug_trace();
}

void sub_192414560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t _ZN4E5RT10TensorCastIDF16_sEEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<short>((uint64_t)TensorDataTypeRef)
    || !_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x50uLL);
    long long v18 = xmmword_192DB9900;
    strcpy(v17, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(exception, v20, v19);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    unint64_t v15 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DA90C0;
    strcpy(v17, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v15, v20, v19);
  }
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  uint64_t v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  size_t v12 = *(void *)(TensorShape + 8) - *(void *)TensorShape;
  if (v12 != *(void *)(v11 + 8) - *(void *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    uint64_t v16 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DAA4A0;
    strcpy(v17, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v16, v20, v19);
  }
  v20[0] = &unk_1EE378230;
  v20[1] = _ZN4E5RT17ElementwiseOpCastIDF16_sEEvPT_PKT0_m;
  uint64_t v21 = v20;
  _ZN4E5RT34ElementwiseOperationImplementationIDF16_sEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a4, a1, a2, (uint64_t)v20);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
  }
  else if (v21)
  {
    (*(void (**)(void))(*v21 + 40))();
  }
  return kdebug_trace();
}

void sub_192414A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t _ZN4E5RT10TensorCastIDF16_hEEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<unsigned char>((uint64_t)TensorDataTypeRef)
    || !_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x50uLL);
    long long v18 = xmmword_192DB9900;
    strcpy(v17, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(exception, v20, v19);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    unint64_t v15 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DA90C0;
    strcpy(v17, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v15, v20, v19);
  }
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  uint64_t v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  size_t v12 = *(void *)(TensorShape + 8) - *(void *)TensorShape;
  if (v12 != *(void *)(v11 + 8) - *(void *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    uint64_t v16 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DAA4A0;
    strcpy(v17, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v16, v20, v19);
  }
  v20[0] = &unk_1EE378128;
  v20[1] = _ZN4E5RT17ElementwiseOpCastIDF16_hEEvPT_PKT0_m;
  uint64_t v21 = v20;
  _ZN4E5RT34ElementwiseOperationImplementationIDF16_hEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a4, a1, a2, (uint64_t)v20);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
  }
  else if (v21)
  {
    (*(void (**)(void))(*v21 + 40))();
  }
  return kdebug_trace();
}

void sub_192414FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t _ZN4E5RT10TensorCastIDF16_aEEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<signed char>((uint64_t)TensorDataTypeRef)
    || !_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x50uLL);
    long long v18 = xmmword_192DB9900;
    strcpy(v17, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(exception, v20, v19);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    unint64_t v15 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DA90C0;
    strcpy(v17, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v15, v20, v19);
  }
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  uint64_t v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  size_t v12 = *(void *)(TensorShape + 8) - *(void *)TensorShape;
  if (v12 != *(void *)(v11 + 8) - *(void *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    uint64_t v16 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DAA4A0;
    strcpy(v17, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v16, v20, v19);
  }
  v20[0] = &unk_1EE378078;
  v20[1] = _ZN4E5RT17ElementwiseOpCastIDF16_aEEvPT_PKT0_m;
  uint64_t v21 = v20;
  _ZN4E5RT34ElementwiseOperationImplementationIDF16_aEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a4, a1, a2, (uint64_t)v20);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
  }
  else if (v21)
  {
    (*(void (**)(void))(*v21 + 40))();
  }
  return kdebug_trace();
}

void sub_1924154E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t _ZN4E5RT10TensorCastIjDF16_EEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<unsigned int>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x50uLL);
    long long v18 = xmmword_192DB9900;
    strcpy(v17, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(exception, v20, v19);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    unint64_t v15 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DA90C0;
    strcpy(v17, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v15, v20, v19);
  }
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  uint64_t v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  size_t v12 = *(void *)(TensorShape + 8) - *(void *)TensorShape;
  if (v12 != *(void *)(v11 + 8) - *(void *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    uint64_t v16 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DAA4A0;
    strcpy(v17, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v16, v20, v19);
  }
  v20[0] = &unk_1EE378DE0;
  v20[1] = _ZN4E5RT17ElementwiseOpCastIjDF16_EEvPT_PKT0_m;
  uint64_t v21 = v20;
  _ZN4E5RT34ElementwiseOperationImplementationIjDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a4, a1, a2, (uint64_t)v20);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
  }
  else if (v21)
  {
    (*(void (**)(void))(*v21 + 40))();
  }
  return kdebug_trace();
}

void sub_192415A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t _ZN4E5RT10TensorCastIiDF16_EEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<int>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x50uLL);
    long long v18 = xmmword_192DB9900;
    strcpy(v17, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(exception, v20, v19);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    unint64_t v15 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DA90C0;
    strcpy(v17, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v15, v20, v19);
  }
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  uint64_t v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  size_t v12 = *(void *)(TensorShape + 8) - *(void *)TensorShape;
  if (v12 != *(void *)(v11 + 8) - *(void *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    uint64_t v16 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DAA4A0;
    strcpy(v17, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v16, v20, v19);
  }
  v20[0] = &unk_1EE378B20;
  v20[1] = _ZN4E5RT17ElementwiseOpCastIiDF16_EEvPT_PKT0_m;
  uint64_t v21 = v20;
  _ZN4E5RT34ElementwiseOperationImplementationIiDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a4, a1, a2, (uint64_t)v20);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
  }
  else if (v21)
  {
    (*(void (**)(void))(*v21 + 40))();
  }
  return kdebug_trace();
}

void sub_192415F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t _ZN4E5RT10TensorCastItDF16_EEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<unsigned short>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x50uLL);
    long long v18 = xmmword_192DB9900;
    strcpy(v17, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(exception, v20, v19);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    unint64_t v15 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DA90C0;
    strcpy(v17, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v15, v20, v19);
  }
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  uint64_t v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  size_t v12 = *(void *)(TensorShape + 8) - *(void *)TensorShape;
  if (v12 != *(void *)(v11 + 8) - *(void *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    uint64_t v16 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DAA4A0;
    strcpy(v17, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v16, v20, v19);
  }
  v20[0] = &unk_1EE379360;
  v20[1] = _ZN4E5RT17ElementwiseOpCastItDF16_EEvPT_PKT0_m;
  uint64_t v21 = v20;
  _ZN4E5RT34ElementwiseOperationImplementationItDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a4, a1, a2, (uint64_t)v20);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
  }
  else if (v21)
  {
    (*(void (**)(void))(*v21 + 40))();
  }
  return kdebug_trace();
}

void sub_192416468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t _ZN4E5RT10TensorCastIsDF16_EEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<short>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x50uLL);
    long long v18 = xmmword_192DB9900;
    strcpy(v17, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(exception, v20, v19);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    unint64_t v15 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DA90C0;
    strcpy(v17, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v15, v20, v19);
  }
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  uint64_t v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  size_t v12 = *(void *)(TensorShape + 8) - *(void *)TensorShape;
  if (v12 != *(void *)(v11 + 8) - *(void *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    uint64_t v16 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DAA4A0;
    strcpy(v17, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v16, v20, v19);
  }
  v20[0] = &unk_1EE3790A0;
  v20[1] = _ZN4E5RT17ElementwiseOpCastIsDF16_EEvPT_PKT0_m;
  uint64_t v21 = v20;
  _ZN4E5RT34ElementwiseOperationImplementationIsDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a4, a1, a2, (uint64_t)v20);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
  }
  else if (v21)
  {
    (*(void (**)(void))(*v21 + 40))();
  }
  return kdebug_trace();
}

void sub_192416994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t _ZN4E5RT10TensorCastIhDF16_EEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<unsigned char>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x50uLL);
    long long v18 = xmmword_192DB9900;
    strcpy(v17, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(exception, v20, v19);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    unint64_t v15 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DA90C0;
    strcpy(v17, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v15, v20, v19);
  }
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  uint64_t v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  size_t v12 = *(void *)(TensorShape + 8) - *(void *)TensorShape;
  if (v12 != *(void *)(v11 + 8) - *(void *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    uint64_t v16 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DAA4A0;
    strcpy(v17, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v16, v20, v19);
  }
  v20[0] = &unk_1EE378860;
  v20[1] = _ZN4E5RT17ElementwiseOpCastIhDF16_EEvPT_PKT0_m;
  uint64_t v21 = v20;
  _ZN4E5RT34ElementwiseOperationImplementationIhDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a4, a1, a2, (uint64_t)v20);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
  }
  else if (v21)
  {
    (*(void (**)(void))(*v21 + 40))();
  }
  return kdebug_trace();
}

void sub_192416EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t _ZN4E5RT10TensorCastIaDF16_EEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<signed char>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x50uLL);
    long long v18 = xmmword_192DB9900;
    strcpy(v17, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(exception, v20, v19);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    unint64_t v15 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DA90C0;
    strcpy(v17, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v15, v20, v19);
  }
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  uint64_t v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  size_t v12 = *(void *)(TensorShape + 8) - *(void *)TensorShape;
  if (v12 != *(void *)(v11 + 8) - *(void *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    uint64_t v16 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DAA4A0;
    strcpy(v17, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v16, v20, v19);
  }
  v20[0] = &unk_1EE3782E0;
  v20[1] = _ZN4E5RT17ElementwiseOpCastIaDF16_EEvPT_PKT0_m;
  uint64_t v21 = v20;
  _ZN4E5RT34ElementwiseOperationImplementationIaDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(this, a4, a1, a2, (uint64_t)v20);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
  }
  else if (v21)
  {
    (*(void (**)(void))(*v21 + 40))();
  }
  return kdebug_trace();
}

void sub_1924173EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::TensorQuantize(E5RT *this, const E5RT::TensorDescriptor *a2, E5RT::BufferObject *a3, const E5RT::TensorDescriptor *a4, const E5RT::BufferObject *a5, float a6)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  size_t v12 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentDataType(v12);
  E5RT::TensorDataType::GetComponentPack(v12);
  kdebug_trace();
  if (E5RT::TensorDataType::IsType<unsigned char>((uint64_t)TensorDataTypeRef)
    && E5RT::TensorDataType::IsType<float>((uint64_t)v12))
  {
    unint64_t v13 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
    uint64_t v14 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
    if (E5RT::TensorDataType::GetNumComponents(v13) != 1
      || E5RT::TensorDataType::GetNumComponents(v14) != 1)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v64, "TensorQuantizeHelper");
      std::string::basic_string[abi:ne180100]<0>(&__p, "Src and dst tensor must have interleave = 1.");
      E5RT::Status::Status(v63, 1, &__p);
      E5RT::E5RTError::E5RTError(exception, v64, v63);
    }
    uint64_t TensorShape = (void *)E5RT::TensorDescriptor::GetTensorShape(a3);
    uint64_t v16 = TensorShape[1];
    if (v16 == *TensorShape)
    {
      __p = 0;
      float v61 = 0;
      unint64_t v17 = 1;
      float v62 = 0;
    }
    else
    {
      unint64_t v17 = *(void *)(v16 - 8);
      __p = 0;
      float v61 = 0;
      float v62 = 0;
      if (!v17)
      {
LABEL_45:
        float v39 = (float *)operator new(0x20uLL);
        *(void *)float v39 = &unk_1EE39A0B8;
        v39[2] = a6;
        *((void *)v39 + 2) = v17;
        *((void *)v39 + 3) = &__p;
        float v65 = v39;
        E5RT::ElementwiseOperationImplementation<unsigned char,float>(a3, a4, this, a2, (uint64_t)v64);
        if (v65 == (float *)v64)
        {
          (*(void (**)(void *))(v64[0] + 32))(v64);
          float v38 = (char *)__p;
          if (!__p) {
            return kdebug_trace();
          }
          goto LABEL_63;
        }
        if (v65)
        {
          (*(void (**)(float *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v65 + 40))(v65, v40, v41, v42, v43);
          float v38 = (char *)__p;
          if (!__p) {
            return kdebug_trace();
          }
          goto LABEL_63;
        }
        goto LABEL_62;
      }
      if (v17 >> 62) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
    }
    __p = operator new(4 * v17);
    float v62 = (char *)__p + 4 * v17;
    bzero(__p, 4 * v17);
    float v61 = v62;
    goto LABEL_45;
  }
  if (E5RT::TensorDataType::IsType<unsigned char>((uint64_t)TensorDataTypeRef)
    && _ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)v12))
  {
    long long v18 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
    uint64_t v19 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
    if (E5RT::TensorDataType::GetNumComponents(v18) != 1
      || E5RT::TensorDataType::GetNumComponents(v19) != 1)
    {
      unint64_t v57 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v64, "TensorQuantizeHelper");
      std::string::basic_string[abi:ne180100]<0>(&__p, "Src and dst tensor must have interleave = 1.");
      E5RT::Status::Status(v63, 1, &__p);
      E5RT::E5RTError::E5RTError(v57, v64, v63);
    }
    unint64_t v20 = (void *)E5RT::TensorDescriptor::GetTensorShape(a3);
    uint64_t v21 = v20[1];
    if (v21 == *v20)
    {
      __p = 0;
      float v61 = 0;
      unint64_t v22 = 1;
      float v62 = 0;
    }
    else
    {
      unint64_t v22 = *(void *)(v21 - 8);
      __p = 0;
      float v61 = 0;
      float v62 = 0;
      if (!v22)
      {
LABEL_53:
        unint64_t v44 = (float *)operator new(0x20uLL);
        *(void *)unint64_t v44 = &unk_1EE39A138;
        v44[2] = a6;
        *((void *)v44 + 2) = v22;
        *((void *)v44 + 3) = &__p;
        float v65 = v44;
        _ZN4E5RT34ElementwiseOperationImplementationIhDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(a3, a4, this, a2, (uint64_t)v64);
        if (v65 == (float *)v64)
        {
          (*(void (**)(void *))(v64[0] + 32))(v64);
          float v38 = (char *)__p;
          if (!__p) {
            return kdebug_trace();
          }
          goto LABEL_63;
        }
        if (v65)
        {
          (*(void (**)(float *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v65 + 40))(v65, v45, v46, v47, v48);
          float v38 = (char *)__p;
          if (!__p) {
            return kdebug_trace();
          }
          goto LABEL_63;
        }
        goto LABEL_62;
      }
      if (v22 >> 62) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
    }
    __p = operator new(4 * v22);
    float v62 = (char *)__p + 4 * v22;
    bzero(__p, 4 * v22);
    float v61 = v62;
    goto LABEL_53;
  }
  if (!E5RT::TensorDataType::IsType<signed char>((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<float>((uint64_t)v12))
  {
    if (!E5RT::TensorDataType::IsType<signed char>((uint64_t)TensorDataTypeRef)
      || !_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)v12))
    {
      float v59 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v64, "TensorQuantize");
      std::string::basic_string[abi:ne180100]<0>(&__p, "Src and Dst tensor data types are not compatible for a quantization operation.");
      E5RT::Status::Status(v63, 1, &__p);
      E5RT::E5RTError::E5RTError(v59, v64, v63);
    }
    float v28 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
    float v29 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
    if (E5RT::TensorDataType::GetNumComponents(v28) != 1
      || E5RT::TensorDataType::GetNumComponents(v29) != 1)
    {
      float v55 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v64, "TensorQuantizeHelper");
      std::string::basic_string[abi:ne180100]<0>(&__p, "Src and dst tensor must have interleave = 1.");
      E5RT::Status::Status(v63, 1, &__p);
      E5RT::E5RTError::E5RTError(v55, v64, v63);
    }
    float v30 = (void *)E5RT::TensorDescriptor::GetTensorShape(a3);
    uint64_t v31 = v30[1];
    if (v31 == *v30)
    {
      __p = 0;
      float v61 = 0;
      unint64_t v32 = 1;
      float v62 = 0;
    }
    else
    {
      unint64_t v32 = *(void *)(v31 - 8);
      __p = 0;
      float v61 = 0;
      float v62 = 0;
      if (!v32)
      {
LABEL_35:
        uint64_t v33 = (float *)operator new(0x20uLL);
        *(void *)uint64_t v33 = &unk_1EE39A238;
        v33[2] = a6;
        *((void *)v33 + 2) = v32;
        *((void *)v33 + 3) = &__p;
        float v65 = v33;
        _ZN4E5RT34ElementwiseOperationImplementationIaDF16_EEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(a3, a4, this, a2, (uint64_t)v64);
        if (v65 == (float *)v64)
        {
          (*(void (**)(void *))(v64[0] + 32))(v64);
          float v38 = (char *)__p;
          if (!__p) {
            return kdebug_trace();
          }
          goto LABEL_63;
        }
        if (v65)
        {
          (*(void (**)(float *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v65 + 40))(v65, v34, v35, v36, v37);
          float v38 = (char *)__p;
          if (!__p) {
            return kdebug_trace();
          }
          goto LABEL_63;
        }
        goto LABEL_62;
      }
      if (v32 >> 62) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
    }
    __p = operator new(4 * v32);
    float v62 = (char *)__p + 4 * v32;
    bzero(__p, 4 * v32);
    float v61 = v62;
    goto LABEL_35;
  }
  uint64_t v23 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  float v24 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  if (E5RT::TensorDataType::GetNumComponents(v23) != 1
    || E5RT::TensorDataType::GetNumComponents(v24) != 1)
  {
    int v58 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v64, "TensorQuantizeHelper");
    std::string::basic_string[abi:ne180100]<0>(&__p, "Src and dst tensor must have interleave = 1.");
    E5RT::Status::Status(v63, 1, &__p);
    E5RT::E5RTError::E5RTError(v58, v64, v63);
  }
  int v25 = (void *)E5RT::TensorDescriptor::GetTensorShape(a3);
  uint64_t v26 = v25[1];
  if (v26 == *v25)
  {
    __p = 0;
    float v61 = 0;
    unint64_t v27 = 1;
    float v62 = 0;
LABEL_52:
    __p = operator new(4 * v27);
    float v62 = (char *)__p + 4 * v27;
    bzero(__p, 4 * v27);
    float v61 = v62;
    goto LABEL_59;
  }
  unint64_t v27 = *(void *)(v26 - 8);
  __p = 0;
  float v61 = 0;
  float v62 = 0;
  if (v27)
  {
    if (v27 >> 62) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_52;
  }
LABEL_59:
  __int16 v49 = (float *)operator new(0x20uLL);
  *(void *)__int16 v49 = &unk_1EE39A1B8;
  v49[2] = a6;
  *((void *)v49 + 2) = v27;
  *((void *)v49 + 3) = &__p;
  float v65 = v49;
  E5RT::ElementwiseOperationImplementation<signed char,float>(a3, a4, this, a2, (uint64_t)v64);
  if (v65 == (float *)v64)
  {
    (*(void (**)(void *))(v64[0] + 32))(v64);
    float v38 = (char *)__p;
    if (!__p) {
      return kdebug_trace();
    }
    goto LABEL_63;
  }
  if (v65) {
    (*(void (**)(float *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v65 + 40))(v65, v50, v51, v52, v53);
  }
LABEL_62:
  float v38 = (char *)__p;
  if (__p)
  {
LABEL_63:
    float v61 = v38;
    operator delete(v38);
  }
  return kdebug_trace();
}

void sub_192417EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a20);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a26 < 0)
  {
    operator delete(a21);
    if ((v27 & 1) == 0)
    {
LABEL_8:
      E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

uint64_t E5RT::TensorDequantize(E5RT *this, const E5RT::TensorDescriptor *a2, E5RT::BufferObject *a3, const E5RT::TensorDescriptor *a4, const E5RT::BufferObject *a5, float a6)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  size_t v12 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentDataType(v12);
  E5RT::TensorDataType::GetComponentPack(v12);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<float>((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<unsigned char>((uint64_t)v12))
  {
    if (E5RT::TensorDataType::IsType<float>((uint64_t)TensorDataTypeRef)
      && E5RT::TensorDataType::IsType<signed char>((uint64_t)v12))
    {
      unint64_t v20 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
      uint64_t v21 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
      if (E5RT::TensorDataType::GetNumComponents(v20) != 1
        || E5RT::TensorDataType::GetNumComponents(v21) != 1)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v49, "TensorDequantizeHelper");
        std::string::basic_string[abi:ne180100]<0>(&__p, "Src and dst tensor must have interleave = 1.");
        E5RT::Status::Status(v48, 1, &__p);
        E5RT::E5RTError::E5RTError(exception, &v49, v48);
      }
      __int16 v49 = (void (**)(void **))&unk_1EE39A338;
      float v50 = 1.0 / a6;
      uint64_t v51 = (void **)&v49;
      E5RT::ElementwiseOperationImplementation<float,signed char>(a3, a4, this, a2, (uint64_t)&v49);
      uint64_t v19 = v51;
      if (v51 != (void **)&v49)
      {
        if (!v51) {
          return kdebug_trace();
        }
        goto LABEL_7;
      }
LABEL_35:
      v49[4]((void **)&v49);
      return kdebug_trace();
    }
    if (_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)TensorDataTypeRef)
      && E5RT::TensorDataType::IsType<unsigned char>((uint64_t)v12))
    {
      unint64_t v22 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
      uint64_t v23 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
      if (E5RT::TensorDataType::GetNumComponents(v22) != 1
        || E5RT::TensorDataType::GetNumComponents(v23) != 1)
      {
        uint64_t v43 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v49, "TensorDequantizeHelper");
        std::string::basic_string[abi:ne180100]<0>(&__p, "Src and dst tensor must have interleave = 1.");
        E5RT::Status::Status(v48, 1, &__p);
        E5RT::E5RTError::E5RTError(v43, &v49, v48);
      }
      unint64_t v24 = *(void *)(*(void *)(E5RT::TensorDescriptor::GetTensorShape(a3) + 8) - 8);
      __p = 0;
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      if (v24)
      {
        if (v24 >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        __p = operator new(4 * v24);
        uint64_t v47 = (char *)__p + 4 * v24;
        bzero(__p, 4 * v24);
        uint64_t v46 = v47;
      }
      uint64_t v34 = (float *)operator new(0x28uLL);
      *(void *)uint64_t v34 = &unk_1EE39A3B8;
      v34[2] = a6;
      *((void *)v34 + 2) = v24;
      v34[6] = 1.0 / a6;
      *((void *)v34 + 4) = &__p;
      uint64_t v51 = (void **)v34;
      _ZN4E5RT34ElementwiseOperationImplementationIDF16_hEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(a3, a4, this, a2, (uint64_t)&v49);
      if (v51 == (void **)&v49)
      {
        v49[4]((void **)&v49);
        uint64_t v33 = (char *)__p;
        if (!__p) {
          return kdebug_trace();
        }
        goto LABEL_41;
      }
      if (v51) {
        (*((void (**)(void **, uint64_t, uint64_t, uint64_t, uint64_t))*v51 + 5))(v51, v35, v36, v37, v38);
      }
    }
    else
    {
      if (!_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)TensorDataTypeRef)
        || !E5RT::TensorDataType::IsType<signed char>((uint64_t)v12))
      {
        unint64_t v44 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v49, "TensorDequantize");
        std::string::basic_string[abi:ne180100]<0>(&__p, "Src and Dst tensor data types are not compatible for a de-quantization operation.");
        E5RT::Status::Status(v48, 1, &__p);
        E5RT::E5RTError::E5RTError(v44, &v49, v48);
      }
      int v25 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
      uint64_t v26 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
      if (E5RT::TensorDataType::GetNumComponents(v25) != 1
        || E5RT::TensorDataType::GetNumComponents(v26) != 1)
      {
        uint64_t v40 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v49, "TensorDequantizeHelper");
        std::string::basic_string[abi:ne180100]<0>(&__p, "Src and dst tensor must have interleave = 1.");
        E5RT::Status::Status(v48, 1, &__p);
        E5RT::E5RTError::E5RTError(v40, &v49, v48);
      }
      unint64_t v27 = *(void *)(*(void *)(E5RT::TensorDescriptor::GetTensorShape(a3) + 8) - 8);
      __p = 0;
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      if (v27)
      {
        if (v27 >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        __p = operator new(4 * v27);
        uint64_t v47 = (char *)__p + 4 * v27;
        bzero(__p, 4 * v27);
        uint64_t v46 = v47;
      }
      float v28 = (float *)operator new(0x28uLL);
      *(void *)float v28 = &unk_1EE39A438;
      v28[2] = a6;
      *((void *)v28 + 2) = v27;
      v28[6] = 1.0 / a6;
      *((void *)v28 + 4) = &__p;
      uint64_t v51 = (void **)v28;
      _ZN4E5RT34ElementwiseOperationImplementationIDF16_aEEvRKNS_16TensorDescriptorERKNS_12BufferObjectES3_RS4_RKNSt3__18functionIFvPT_PKT0_mEEE(a3, a4, this, a2, (uint64_t)&v49);
      if (v51 == (void **)&v49)
      {
        v49[4]((void **)&v49);
        uint64_t v33 = (char *)__p;
        if (!__p) {
          return kdebug_trace();
        }
        goto LABEL_41;
      }
      if (v51)
      {
        (*((void (**)(void **, uint64_t, uint64_t, uint64_t, uint64_t))*v51 + 5))(v51, v29, v30, v31, v32);
        uint64_t v33 = (char *)__p;
        if (!__p) {
          return kdebug_trace();
        }
        goto LABEL_41;
      }
    }
    uint64_t v33 = (char *)__p;
    if (!__p) {
      return kdebug_trace();
    }
LABEL_41:
    uint64_t v46 = v33;
    operator delete(v33);
    return kdebug_trace();
  }
  unint64_t v13 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a3);
  uint64_t v14 = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  if (E5RT::TensorDataType::GetNumComponents(v13) != 1
    || E5RT::TensorDataType::GetNumComponents(v14) != 1)
  {
    uint64_t v41 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v49, "TensorDequantizeHelper");
    std::string::basic_string[abi:ne180100]<0>(&__p, "Src and dst tensor must have interleave = 1.");
    E5RT::Status::Status(v48, 1, &__p);
    E5RT::E5RTError::E5RTError(v41, &v49, v48);
  }
  __int16 v49 = (void (**)(void **))&unk_1EE39A2B8;
  float v50 = 1.0 / a6;
  uint64_t v51 = (void **)&v49;
  E5RT::ElementwiseOperationImplementation<float,unsigned char>(a3, a4, this, a2, (uint64_t)&v49);
  uint64_t v19 = v51;
  if (v51 == (void **)&v49) {
    goto LABEL_35;
  }
  if (v51) {
LABEL_7:
  }
    (*((void (**)(void **, uint64_t, uint64_t, uint64_t, uint64_t))*v51 + 5))(v19, v15, v16, v17, v18);
  return kdebug_trace();
}

void sub_192418908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a20);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a26 < 0)
  {
    operator delete(a21);
    if ((v27 & 1) == 0)
    {
LABEL_8:
      E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a9);
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void E5RT::InitializeTensorRandomly(E5RT *this, const E5RT::TensorDescriptor *a2, E5RT::BufferObject *a3, uint64_t a4)
{
  if (a4 < a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "InitializeTensorRandomly");
    std::string::basic_string[abi:ne180100]<0>(v12, "Max should be >= min.");
    E5RT::Status::Status(v13, 1, v12);
    E5RT::E5RTError::E5RTError(exception, &__p, v13);
  }
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(this);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  __p = 0;
  if (Rank)
  {
    unint64_t v9 = Rank;
    if (Rank >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    size_t v10 = 8 * Rank;
    __p = operator new(8 * Rank);
    uint64_t v16 = (char *)__p + 8 * v9;
    bzero(__p, v10);
    uint64_t v15 = v16;
  }
  sub_192418C78(this, a2, (uint64_t *)&__p, 0, (uint64_t)a3, a4);
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }
}

void sub_192418BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_192418C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v19);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

uint64_t sub_192418C78(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t Rank = E5RT::TensorDescriptor::GetRank(a1);
  if (Rank)
  {
    unint64_t v13 = (E5RT::TensorDimension *)E5RT::TensorDescriptor::operator[]((uint64_t)a1, a4);
    uint64_t result = E5RT::TensorDimension::GetLength(v13);
    unint64_t v15 = result;
    if (Rank - 1 != a4)
    {
      if (result)
      {
        unint64_t v53 = a4;
        uint64_t v54 = 0;
        do
        {
          *(void *)(*a3 + 8 * v53) = v54;
          uint64_t result = sub_192418C78(a1, a2, a3, v53 + 1, a5, a6);
          ++v54;
        }
        while (v15 != v54);
      }
      return result;
    }
    unint64_t v60 = a4;
    unint64_t v61 = Rank;
    uint64_t TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
    uint64_t result = E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef);
    if (!v15) {
      return result;
    }
  }
  else
  {
    unint64_t v60 = a4;
    unint64_t v61 = 0;
    unint64_t v15 = 1;
    uint64_t TensorDataTypeRef = (E5RT::TensorDataType::Impl **)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
    uint64_t result = E5RT::TensorDataType::GetNumComponents(TensorDataTypeRef);
  }
  unint64_t v59 = v15;
  if (result)
  {
    uint64_t v17 = 0;
    uint64_t v18 = result;
    float v19 = (float)a5;
    float v20 = (float)a6;
    float v21 = (float)a6 - (float)a5;
    while (1)
    {
      uint64_t v62 = v17;
      if (v61) {
        *(void *)(*a3 + 8 * v60) = v17;
      }
      else {
        std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(a3, 0, 0, 0);
      }
      for (uint64_t i = 0; i != v18; ++i)
      {
        if (E5RT::TensorDataType::IsType<float>((uint64_t)TensorDataTypeRef))
        {
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9303038, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_1E9303038))
          {
            std::random_device::random_device[abi:ne180100](&v63);
            uint32_t v41 = arc4random();
            dword_1E9303040[0] = v41;
            uint64_t v42 = 3;
            uint64_t v43 = 1;
            do
            {
              int v44 = 1812433253 * (v41 ^ (v41 >> 30));
              uint32_t v41 = v44 + v43;
              *((_DWORD *)&qword_1E9303038 + v42) = v42 + v44 - 2;
              ++v43;
              ++v42;
            }
            while (v42 != 626);
            qword_1E9303A00 = 0;
            std::random_device::~random_device(&v63);
            __cxa_guard_release(&qword_1E9303038);
          }
          unint64_t v24 = (qword_1E9303A00 + 1) % 0x270uLL;
          unsigned int v25 = dword_1E9303040[(qword_1E9303A00 + 397) % 0x270uLL] ^ ((dword_1E9303040[v24] & 0x7FFFFFFE | dword_1E9303040[qword_1E9303A00] & 0x80000000) >> 1) ^ (dword_1E9303040[v24] << 31 >> 31) & 0x9908B0DF;
          dword_1E9303040[qword_1E9303A00] = v25;
          qword_1E9303A00 = v24;
          unsigned int v26 = ((v25 ^ (v25 >> 11)) << 7) & 0x9D2C5680 ^ v25 ^ (v25 >> 11);
          float v27 = v19
              + (float)(v21
                      * (float)((float)((v26 << 15) & 0xEFC60000 ^ v26 ^ (((v26 << 15) & 0xEFC60000 ^ v26) >> 18))
                              * 2.3283e-10));
          uint64_t result = E5RT::TensorElementAt<float>(a1, a3, i, a2);
          *(float *)uint64_t result = v27;
        }
        else if (_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)TensorDataTypeRef))
        {
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9303038, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_1E9303038))
          {
            std::random_device::random_device[abi:ne180100](&v64);
            uint32_t v45 = arc4random();
            dword_1E9303040[0] = v45;
            uint64_t v46 = 3;
            uint64_t v47 = 1;
            do
            {
              int v48 = 1812433253 * (v45 ^ (v45 >> 30));
              uint32_t v45 = v48 + v47;
              *((_DWORD *)&qword_1E9303038 + v46) = v46 + v48 - 2;
              ++v47;
              ++v46;
            }
            while (v46 != 626);
            qword_1E9303A00 = 0;
            std::random_device::~random_device(&v64);
            __cxa_guard_release(&qword_1E9303038);
          }
          unint64_t v28 = (qword_1E9303A00 + 1) % 0x270uLL;
          unsigned int v29 = dword_1E9303040[(qword_1E9303A00 + 397) % 0x270uLL] ^ ((dword_1E9303040[v28] & 0x7FFFFFFE | dword_1E9303040[qword_1E9303A00] & 0x80000000) >> 1) ^ (dword_1E9303040[v28] << 31 >> 31) & 0x9908B0DF;
          dword_1E9303040[qword_1E9303A00] = v29;
          qword_1E9303A00 = v28;
          unsigned int v30 = ((v29 ^ (v29 >> 11)) << 7) & 0x9D2C5680 ^ v29 ^ (v29 >> 11);
          _S0 = v19
              + (float)(v21
                      * (float)((float)((v30 << 15) & 0xEFC60000 ^ v30 ^ (((v30 << 15) & 0xEFC60000 ^ v30) >> 18))
                              * 2.3283e-10));
          __asm { FCVT            H11, S0 }
          uint64_t result = _ZN4E5RT15TensorElementAtIDF16_EERT_RKNS_16TensorDescriptorERKNSt3__16vectorImNS6_9allocatorImEEEEhRNS_12BufferObjectE(a1, a3, i, a2);
          *(_WORD *)uint64_t result = _H11;
        }
        else
        {
          if (E5RT::TensorDataType::IsType<unsigned char>((uint64_t)TensorDataTypeRef))
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9303038, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_1E9303038))
            {
              std::random_device::random_device[abi:ne180100](&v65);
              uint32_t v49 = arc4random();
              dword_1E9303040[0] = v49;
              uint64_t v50 = 3;
              uint64_t v51 = 1;
              do
              {
                int v52 = 1812433253 * (v49 ^ (v49 >> 30));
                uint32_t v49 = v52 + v51;
                *((_DWORD *)&qword_1E9303038 + v50) = v50 + v52 - 2;
                ++v51;
                ++v50;
              }
              while (v50 != 626);
              qword_1E9303A00 = 0;
              std::random_device::~random_device(&v65);
              __cxa_guard_release(&qword_1E9303038);
            }
            unint64_t v37 = (qword_1E9303A00 + 1) % 0x270uLL;
            unsigned int v38 = dword_1E9303040[(qword_1E9303A00 + 397) % 0x270uLL] ^ ((dword_1E9303040[v37] & 0x7FFFFFFE | dword_1E9303040[qword_1E9303A00] & 0x80000000) >> 1) ^ (dword_1E9303040[v37] << 31 >> 31) & 0x9908B0DF;
            dword_1E9303040[qword_1E9303A00] = v38;
            unsigned int v39 = ((v38 ^ (v38 >> 11)) << 7) & 0x9D2C5680 ^ v38 ^ (v38 >> 11);
            qword_1E9303A00 = v37;
            int v23 = (int)(float)(v19
                             + (float)(v21
                                     * (float)((float)((v39 << 15) & 0xEFC60000 ^ v39 ^ (((v39 << 15) & 0xEFC60000 ^ v39) >> 18))
                                             * 2.3283e-10)));
            uint64_t result = E5RT::TensorElementAt<unsigned char>(a1, a3, i, a2);
            goto LABEL_13;
          }
          if (E5RT::TensorDataType::IsType<signed char>((uint64_t)TensorDataTypeRef))
          {
            int v23 = (int)sub_1924195E4(v19, v20);
            uint64_t result = E5RT::TensorElementAt<signed char>(a1, a3, i, a2);
LABEL_13:
            *(unsigned char *)uint64_t result = v23;
            continue;
          }
          if (E5RT::TensorDataType::IsType<unsigned short>((uint64_t)TensorDataTypeRef))
          {
            int v40 = (int)sub_1924195E4(v19, v20);
            uint64_t result = E5RT::TensorElementAt<unsigned short>(a1, a3, i, a2);
LABEL_29:
            *(_WORD *)uint64_t result = v40;
            continue;
          }
          if (E5RT::TensorDataType::IsType<short>((uint64_t)TensorDataTypeRef))
          {
            int v40 = (int)sub_1924195E4(v19, v20);
            uint64_t result = E5RT::TensorElementAt<short>(a1, a3, i, a2);
            goto LABEL_29;
          }
          if (E5RT::TensorDataType::IsType<unsigned int>((uint64_t)TensorDataTypeRef))
          {
            int v58 = sub_1924195E4(v19, v20);
            uint64_t result = E5RT::TensorElementAt<unsigned int>(a1, a3, i, a2);
          }
          else
          {
            uint64_t result = E5RT::TensorDataType::IsType<int>((uint64_t)TensorDataTypeRef);
            if (!result) {
              continue;
            }
            int v58 = (int)sub_1924195E4(v19, v20);
            uint64_t result = E5RT::TensorElementAt<int>(a1, a3, i, a2);
          }
          *(_DWORD *)uint64_t result = v58;
        }
      }
      uint64_t v17 = v62 + 1;
      if (v62 + 1 == v59) {
        return result;
      }
    }
  }
  if (v61)
  {
    if (v15 >= 2)
    {
      unint64_t v55 = v15 & 0xFFFFFFFFFFFFFFFELL;
      unint64_t v56 = v15 & 0xFFFFFFFFFFFFFFFELL;
      do
        v56 -= 2;
      while (v56);
      goto LABEL_62;
    }
    unint64_t v55 = 0;
    do
    {
      ++v55;
LABEL_62:
      ;
    }
    while (v15 != v55);
    *(void *)(*a3 + 8 * v60) = v55 - 1;
  }
  else
  {
    unint64_t v57 = v15;
    do
    {
      uint64_t result = (uint64_t)std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(a3, 0, 0, 0);
      --v57;
    }
    while (v57);
  }
  return result;
}

std::runtime_error *std::range_error::range_error[abi:ne180100](std::runtime_error *a1, const char *a2)
{
  uint64_t result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA4B8] + 16);
  return result;
}

void *std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(void *result, char *__src, char *a3, size_t __sz)
{
  v6 = __src;
  v7 = result;
  uint64_t v8 = result[2];
  unint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 61) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 61) {
LABEL_22:
    }
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    uint64_t v13 = v12;
    uint64_t result = operator new(8 * v12);
    unint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14);
    }
    unint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  unint64_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    float v19 = (void *)*result;
LABEL_20:
    uint64_t result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  uint64_t v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9);
    unint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    float v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *unint64_t v15 = &v9[v14];
  return result;
}

float sub_1924195E4(float a1, float a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9303038, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9303038))
  {
    std::random_device::random_device[abi:ne180100](&v12);
    uint32_t v8 = arc4random();
    dword_1E9303040[0] = v8;
    uint64_t v9 = 1;
    for (uint64_t i = 3; i != 626; ++i)
    {
      int v11 = 1812433253 * (v8 ^ (v8 >> 30));
      uint32_t v8 = v11 + v9;
      *((_DWORD *)&qword_1E9303038 + i) = i + v11 - 2;
      ++v9;
    }
    qword_1E9303A00 = 0;
    std::random_device::~random_device(&v12);
    __cxa_guard_release(&qword_1E9303038);
  }
  unint64_t v4 = (qword_1E9303A00 + 1) % 0x270uLL;
  unsigned int v5 = dword_1E9303040[(qword_1E9303A00 + 397) % 0x270uLL] ^ ((dword_1E9303040[v4] & 0x7FFFFFFE | dword_1E9303040[qword_1E9303A00] & 0x80000000) >> 1) ^ (dword_1E9303040[v4] << 31 >> 31) & 0x9908B0DF;
  dword_1E9303040[qword_1E9303A00] = v5;
  unsigned int v6 = ((v5 ^ (v5 >> 11)) << 7) & 0x9D2C5680 ^ v5 ^ (v5 >> 11);
  qword_1E9303A00 = v4;
  return a1
       + (float)((float)(a2 - a1)
               * (float)((float)((v6 << 15) & 0xEFC60000 ^ v6 ^ (((v6 << 15) & 0xEFC60000 ^ v6) >> 18)) * 2.3283e-10));
}

void sub_192419764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, std::random_device a11, std::random_device a12)
{
}

void sub_192419784(_Unwind_Exception *a1)
{
}

std::random_device *std::random_device::random_device[abi:ne180100](std::random_device *a1)
{
  *((unsigned char *)&__token.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&__token, "/dev/urandom");
  std::random_device::random_device(a1, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__token.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_19241981C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19241983C()
{
}

__n128 sub_192419850(uint64_t a1)
{
  v2 = (char *)operator new(0x20uLL);
  *(void *)v2 = &unk_1EE39A0B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1924198A4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE39A0B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1924198DC(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  unint64_t v4 = *a4;
  unint64_t v5 = (*a4 - 1) / *(void *)(a1 + 16);
  if (v5 != -1)
  {
    uint64_t v7 = 0;
    uint32_t v8 = (const float *)(a1 + 8);
    uint64_t v9 = *a2;
    uint64_t v10 = *a3;
    unint64_t v11 = v5 + 1;
    do
    {
      uint64_t v12 = *(void *)(a1 + 16);
      uint64_t v13 = *(float ***)(a1 + 24);
      uint64_t v14 = v12 * v7++;
      unint64_t v15 = v12 * v7;
      if (v15 >= v4) {
        unint64_t v15 = v4;
      }
      float __C = 255.0;
      float __B = 0.0;
      vDSP_Length v16 = v15 - v14;
      vDSP_vsmul((const float *)(v10 + 4 * v14), 1, v8, *v13, 1, v15 - v14);
      vDSP_vclip(**(const float ***)(a1 + 24), 1, &__B, &__C, **(float ***)(a1 + 24), 1, v16);
      vDSP_vfixru8(**(const float ***)(a1 + 24), 1, (unsigned __int8 *)(v9 + v14), 1, v16);
    }
    while (v11 != v7);
  }
}

uint64_t sub_1924199D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN12_GLOBAL__N_120TensorQuantizeHelperIhfEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPhPKfmE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN12_GLOBAL__N_120TensorQuantizeHelperIhfEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObje"
                                "ctES4_RKS5_fEUlPhPKfmE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12_GLOBAL__N_120TensorQuantizeHelperIhfEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPhPKfmE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12_GLOBAL__N_120TensorQuantizeHelperIhfEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPhPKfmE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192419A48()
{
  return &unk_1EE39A118;
}

void sub_192419A58()
{
}

__n128 sub_192419A6C(uint64_t a1)
{
  v2 = (char *)operator new(0x20uLL);
  *(void *)v2 = &unk_1EE39A138;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_192419AC0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE39A138;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_192419AF8(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  unint64_t v4 = *a4;
  unint64_t v5 = (*a4 - 1) / *(void *)(a1 + 16);
  if (v5 != -1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v45 = *a2;
    float __B = (float *)(a1 + 8);
    uint64_t v44 = *a3;
    uint64_t v43 = *a3 + 16;
    uint64_t v10 = 1;
    do
    {
      uint64_t v12 = *(void *)(a1 + 16);
      uint64_t v13 = *(float32x4_t ***)(a1 + 24);
      uint64_t v14 = v12 * v9;
      unint64_t v15 = v12 * (v9 + 1);
      if (v15 >= v4) {
        unint64_t v15 = v4;
      }
      float __C = 255.0;
      float v48 = 0.0;
      vDSP_Length v16 = *v13;
      vDSP_Length v17 = v15 - v14;
      if (v15 - v14 >= 4)
      {
        uint64_t v19 = v12 * v10;
        if (v4 < v12 * v10) {
          uint64_t v19 = v4;
        }
        unint64_t v20 = (unint64_t)(v19 + v12 * v8) >> 2;
        float v21 = (float16x4_t *)(v44 + v12 * v7);
        unint64_t v22 = v16;
        do
        {
          float16x4_t v23 = *v21++;
          *v22++ = vcvtq_f32_f16(v23);
          --v20;
        }
        while (v20);
        unint64_t v18 = v17 & 0xFFFFFFFFFFFFFFFCLL;
        if ((v17 & 0xFFFFFFFFFFFFFFFCLL) >= v17) {
          goto LABEL_3;
        }
      }
      else
      {
        unint64_t v18 = 0;
        if (!v17) {
          goto LABEL_3;
        }
      }
      unint64_t v24 = v15 - (v14 + v18);
      if (v24 >= 0x10)
      {
        unint64_t v25 = v18 + (v24 & 0xFFFFFFFFFFFFFFF0);
        uint64_t v26 = v12 * v10;
        if (v4 < v12 * v10) {
          uint64_t v26 = v4;
        }
        unint64_t v27 = (v26 - (v18 + v12 * v9)) & 0xFFFFFFFFFFFFFFF0;
        unint64_t v28 = (float16x4_t *)(v43 + v12 * v7 + 2 * v18);
        unsigned int v29 = (float32x4_t *)((char *)v16 + 4 * v18 + 32);
        do
        {
          float16x8_t v30 = *(float16x8_t *)v28[-2].i8;
          float32x4_t v31 = vcvtq_f32_f16(*v28);
          float32x4_t v32 = vcvt_hight_f32_f16(*(float16x8_t *)v28->i8);
          v29[-2] = vcvtq_f32_f16(*(float16x4_t *)v30.i8);
          v29[-1] = vcvt_hight_f32_f16(v30);
          *unsigned int v29 = v31;
          v29[1] = v32;
          v29 += 4;
          v28 += 4;
          v27 -= 16;
        }
        while (v27);
        if (v24 == (v24 & 0xFFFFFFFFFFFFFFF0)) {
          goto LABEL_3;
        }
      }
      else
      {
        unint64_t v25 = v18;
      }
      uint64_t v33 = v12 * v10;
      if (v4 < v12 * v10) {
        uint64_t v33 = v4;
      }
      unint64_t v34 = v33 + v12 * v8 - v25;
      uint64_t v35 = &v16->i32[v25];
      uint64_t v36 = (__int16 *)(v44 + v12 * v7 + 2 * v25);
      do
      {
        __int16 v37 = *v36++;
        _H0 = v37;
        __asm { FCVT            S0, H0 }
        *v35++ = _S0;
        --v34;
      }
      while (v34);
LABEL_3:
      vDSP_vsmul(**(const float ***)(a1 + 24), 1, __B, **(float ***)(a1 + 24), 1, v17);
      vDSP_vclip(**(const float ***)(a1 + 24), 1, &v48, &__C, **(float ***)(a1 + 24), 1, v17);
      vDSP_vfixru8(**(const float ***)(a1 + 24), 1, (unsigned __int8 *)(v45 + v14), 1, v17);
      ++v10;
      --v8;
      v7 += 2;
    }
    while (v9++ != v5);
  }
}

uint64_t sub_192419D44(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN12_GLOBAL__N_120TensorQuantizeHelperIhDF16_EEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_R"
                     "KS5_fEUlPhPKDF16_mE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN12_GLOBAL__N_120TensorQuantizeHelperIhDF16_EEvRKN4E5RT16TensorDescriptorERNS1_12Buffer"
                                "ObjectES4_RKS5_fEUlPhPKDF16_mE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12_GLOBAL__N_120TensorQuantizeHelperIhDF16_EEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPhPKDF16_mE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12_GLOBAL__N_120TensorQuantizeHelperIhDF16_EEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPhPKDF16_mE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192419DB4()
{
  return &unk_1EE39A198;
}

void sub_192419DC4()
{
}

__n128 sub_192419DD8(uint64_t a1)
{
  v2 = (char *)operator new(0x20uLL);
  *(void *)v2 = &unk_1EE39A1B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_192419E2C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE39A1B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_192419E64(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  unint64_t v4 = *a4;
  unint64_t v5 = (*a4 - 1) / *(void *)(a1 + 16);
  if (v5 != -1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (const float *)(a1 + 8);
    uint64_t v9 = *a2;
    uint64_t v10 = *a3;
    unint64_t v11 = v5 + 1;
    do
    {
      uint64_t v12 = *(void *)(a1 + 16);
      uint64_t v13 = *(float ***)(a1 + 24);
      uint64_t v14 = v12 * v7++;
      unint64_t v15 = v12 * v7;
      if (v15 >= v4) {
        unint64_t v15 = v4;
      }
      float __C = 127.0;
      float __B = -128.0;
      vDSP_Length v16 = v15 - v14;
      vDSP_vsmul((const float *)(v10 + 4 * v14), 1, v8, *v13, 1, v15 - v14);
      vDSP_vclip(**(const float ***)(a1 + 24), 1, &__B, &__C, **(float ***)(a1 + 24), 1, v16);
      vDSP_vfixr8(**(const float ***)(a1 + 24), 1, (char *)(v9 + v14), 1, v16);
    }
    while (v11 != v7);
  }
}

uint64_t sub_192419F64(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN12_GLOBAL__N_120TensorQuantizeHelperIafEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPaPKfmE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN12_GLOBAL__N_120TensorQuantizeHelperIafEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObje"
                                "ctES4_RKS5_fEUlPaPKfmE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12_GLOBAL__N_120TensorQuantizeHelperIafEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPaPKfmE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12_GLOBAL__N_120TensorQuantizeHelperIafEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPaPKfmE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192419FD4()
{
  return &unk_1EE39A218;
}

void sub_192419FE4()
{
}

__n128 sub_192419FF8(uint64_t a1)
{
  v2 = (char *)operator new(0x20uLL);
  *(void *)v2 = &unk_1EE39A238;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_19241A04C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE39A238;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_19241A084(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  unint64_t v4 = *a4;
  unint64_t v5 = (*a4 - 1) / *(void *)(a1 + 16);
  if (v5 != -1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v45 = *a2;
    float __B = (float *)(a1 + 8);
    uint64_t v44 = *a3;
    uint64_t v43 = *a3 + 16;
    uint64_t v10 = 1;
    do
    {
      uint64_t v12 = *(void *)(a1 + 16);
      uint64_t v13 = *(float32x4_t ***)(a1 + 24);
      uint64_t v14 = v12 * v9;
      unint64_t v15 = v12 * (v9 + 1);
      if (v15 >= v4) {
        unint64_t v15 = v4;
      }
      float v48 = -128.0;
      float __C = 127.0;
      vDSP_Length v16 = *v13;
      vDSP_Length v17 = v15 - v14;
      if (v15 - v14 >= 4)
      {
        uint64_t v19 = v12 * v10;
        if (v4 < v12 * v10) {
          uint64_t v19 = v4;
        }
        unint64_t v20 = (unint64_t)(v19 + v12 * v8) >> 2;
        float v21 = (float16x4_t *)(v44 + v12 * v7);
        unint64_t v22 = v16;
        do
        {
          float16x4_t v23 = *v21++;
          *v22++ = vcvtq_f32_f16(v23);
          --v20;
        }
        while (v20);
        unint64_t v18 = v17 & 0xFFFFFFFFFFFFFFFCLL;
        if ((v17 & 0xFFFFFFFFFFFFFFFCLL) >= v17) {
          goto LABEL_3;
        }
      }
      else
      {
        unint64_t v18 = 0;
        if (!v17) {
          goto LABEL_3;
        }
      }
      unint64_t v24 = v15 - (v14 + v18);
      if (v24 >= 0x10)
      {
        unint64_t v25 = v18 + (v24 & 0xFFFFFFFFFFFFFFF0);
        uint64_t v26 = v12 * v10;
        if (v4 < v12 * v10) {
          uint64_t v26 = v4;
        }
        unint64_t v27 = (v26 - (v18 + v12 * v9)) & 0xFFFFFFFFFFFFFFF0;
        unint64_t v28 = (float16x4_t *)(v43 + v12 * v7 + 2 * v18);
        unsigned int v29 = (float32x4_t *)((char *)v16 + 4 * v18 + 32);
        do
        {
          float16x8_t v30 = *(float16x8_t *)v28[-2].i8;
          float32x4_t v31 = vcvtq_f32_f16(*v28);
          float32x4_t v32 = vcvt_hight_f32_f16(*(float16x8_t *)v28->i8);
          v29[-2] = vcvtq_f32_f16(*(float16x4_t *)v30.i8);
          v29[-1] = vcvt_hight_f32_f16(v30);
          *unsigned int v29 = v31;
          v29[1] = v32;
          v29 += 4;
          v28 += 4;
          v27 -= 16;
        }
        while (v27);
        if (v24 == (v24 & 0xFFFFFFFFFFFFFFF0)) {
          goto LABEL_3;
        }
      }
      else
      {
        unint64_t v25 = v18;
      }
      uint64_t v33 = v12 * v10;
      if (v4 < v12 * v10) {
        uint64_t v33 = v4;
      }
      unint64_t v34 = v33 + v12 * v8 - v25;
      uint64_t v35 = &v16->i32[v25];
      uint64_t v36 = (__int16 *)(v44 + v12 * v7 + 2 * v25);
      do
      {
        __int16 v37 = *v36++;
        _H0 = v37;
        __asm { FCVT            S0, H0 }
        *v35++ = _S0;
        --v34;
      }
      while (v34);
LABEL_3:
      vDSP_vsmul(**(const float ***)(a1 + 24), 1, __B, **(float ***)(a1 + 24), 1, v17);
      vDSP_vclip(**(const float ***)(a1 + 24), 1, &v48, &__C, **(float ***)(a1 + 24), 1, v17);
      vDSP_vfixr8(**(const float ***)(a1 + 24), 1, (char *)(v45 + v14), 1, v17);
      ++v10;
      --v8;
      v7 += 2;
    }
    while (v9++ != v5);
  }
}

uint64_t sub_19241A2D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN12_GLOBAL__N_120TensorQuantizeHelperIaDF16_EEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_R"
                     "KS5_fEUlPaPKDF16_mE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN12_GLOBAL__N_120TensorQuantizeHelperIaDF16_EEvRKN4E5RT16TensorDescriptorERNS1_12Buffer"
                                "ObjectES4_RKS5_fEUlPaPKDF16_mE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12_GLOBAL__N_120TensorQuantizeHelperIaDF16_EEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPaPKDF16_mE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12_GLOBAL__N_120TensorQuantizeHelperIaDF16_EEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPaPKDF16_mE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19241A348()
{
  return &unk_1EE39A298;
}

void sub_19241A358()
{
}

_DWORD *sub_19241A36C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  int v3 = *(_DWORD *)(a1 + 8);
  *(void *)__n128 result = &unk_1EE39A2B8;
  result[2] = v3;
  return result;
}

uint64_t sub_19241A3B8(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 8);
  *(void *)a2 = &unk_1EE39A2B8;
  *(_DWORD *)(a2 + 8) = v2;
  return result;
}

void sub_19241A3E8(uint64_t a1, float **a2, const unsigned __int8 **a3, vDSP_Length *a4)
{
  unint64_t v4 = (const float *)(a1 + 8);
  unint64_t v5 = *a2;
  vDSP_Length v6 = *a4;
  vDSP_vfltu8(*a3, 1, *a2, 1, *a4);

  vDSP_vsmul(v5, 1, v4, v5, 1, v6);
}

uint64_t sub_19241A458(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN12_GLOBAL__N_122TensorDequantizeHelperIfhEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPfPKhmE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN12_GLOBAL__N_122TensorDequantizeHelperIfhEEvRKN4E5RT16TensorDescriptorERNS1_12BufferOb"
                                "jectES4_RKS5_fEUlPfPKhmE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12_GLOBAL__N_122TensorDequantizeHelperIfhEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPfPKhmE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12_GLOBAL__N_122TensorDequantizeHelperIfhEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPfPKhmE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19241A4C8()
{
  return &unk_1EE39A318;
}

void sub_19241A4D8()
{
}

_DWORD *sub_19241A4EC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  int v3 = *(_DWORD *)(a1 + 8);
  *(void *)__n128 result = &unk_1EE39A338;
  result[2] = v3;
  return result;
}

uint64_t sub_19241A538(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 8);
  *(void *)a2 = &unk_1EE39A338;
  *(_DWORD *)(a2 + 8) = v2;
  return result;
}

void sub_19241A568(uint64_t a1, float **a2, const char **a3, vDSP_Length *a4)
{
  unint64_t v4 = (const float *)(a1 + 8);
  unint64_t v5 = *a2;
  vDSP_Length v6 = *a4;
  vDSP_vflt8(*a3, 1, *a2, 1, *a4);

  vDSP_vsmul(v5, 1, v4, v5, 1, v6);
}

uint64_t sub_19241A5D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN12_GLOBAL__N_122TensorDequantizeHelperIfaEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPfPKamE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN12_GLOBAL__N_122TensorDequantizeHelperIfaEEvRKN4E5RT16TensorDescriptorERNS1_12BufferOb"
                                "jectES4_RKS5_fEUlPfPKamE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12_GLOBAL__N_122TensorDequantizeHelperIfaEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPfPKamE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12_GLOBAL__N_122TensorDequantizeHelperIfaEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPfPKamE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19241A648()
{
  return &unk_1EE39A398;
}

void sub_19241A658()
{
}

__n128 sub_19241A66C(uint64_t a1)
{
  int v2 = (char *)operator new(0x28uLL);
  *(void *)int v2 = &unk_1EE39A3B8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_19241A6C0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE39A3B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_19241A6F8(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  unint64_t v4 = *a4;
  unint64_t v45 = (*a4 - 1) / *(void *)(a1 + 16);
  if (v45 != -1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    float __B = (float *)(a1 + 24);
    uint64_t v44 = *a3;
    uint64_t v42 = *a2;
    uint64_t v41 = *a2 + 16;
    uint64_t v8 = 1;
    do
    {
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v11 = v10 * v7;
      if (v10 * (v7 + 1) >= v4) {
        uint64_t v12 = v4;
      }
      else {
        uint64_t v12 = v10 * (v7 + 1);
      }
      unint64_t v13 = v12 - v11;
      vDSP_vfltu8((const unsigned __int8 *)(v44 + v11), 1, **(float ***)(a1 + 32), 1, v12 - v11);
      vDSP_vsmul(**(const float ***)(a1 + 32), 1, __B, **(float ***)(a1 + 32), 1, v12 - v11);
      uint64_t v14 = **(void **)(a1 + 32);
      if ((unint64_t)(v12 - v11) >= 4)
      {
        unint64_t v17 = v10 * v8;
        if (v4 < v10 * v8) {
          unint64_t v17 = v4;
        }
        unint64_t v18 = (v17 + v10 * v6) >> 2;
        uint64_t v19 = (float16x4_t *)(v42 + v10 * v5);
        unint64_t v20 = **(float32x4_t ***)(a1 + 32);
        do
        {
          float32x4_t v21 = *v20++;
          *v19++ = vcvt_f16_f32(v21);
          --v18;
        }
        while (v18);
        unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v16 = v7 + 1;
        if ((v13 & 0xFFFFFFFFFFFFFFFCLL) >= v13) {
          goto LABEL_3;
        }
      }
      else
      {
        unint64_t v15 = 0;
        uint64_t v16 = v7 + 1;
        if (!v13) {
          goto LABEL_3;
        }
      }
      unint64_t v22 = v12 - (v11 + v15);
      if (v22 >= 0x10)
      {
        unint64_t v23 = v15 + (v22 & 0xFFFFFFFFFFFFFFF0);
        unint64_t v24 = v10 * v8;
        if (v4 < v10 * v8) {
          unint64_t v24 = v4;
        }
        unint64_t v25 = (v24 - (v15 + v10 * v7)) & 0xFFFFFFFFFFFFFFF0;
        uint64_t v26 = (float32x4_t *)(v14 + 4 * v15 + 32);
        unint64_t v27 = (float16x8_t *)(v41 + v10 * v5 + 2 * v15);
        do
        {
          float32x4_t v29 = v26[-2];
          float32x4_t v28 = v26[-1];
          float32x4_t v31 = *v26;
          float32x4_t v30 = v26[1];
          v26 += 4;
          v27[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v29), v28);
          *unint64_t v27 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v31), v30);
          v27 += 2;
          v25 -= 16;
        }
        while (v25);
        if (v22 == (v22 & 0xFFFFFFFFFFFFFFF0)) {
          goto LABEL_3;
        }
      }
      else
      {
        unint64_t v23 = v15;
      }
      unint64_t v32 = v10 * v8;
      if (v4 < v10 * v8) {
        unint64_t v32 = v4;
      }
      unint64_t v33 = v32 + v10 * v6 - v23;
      unint64_t v34 = (_WORD *)(v42 + v10 * v5 + 2 * v23);
      uint64_t v35 = (int *)(v14 + 4 * v23);
      do
      {
        int v36 = *v35++;
        _S0 = v36;
        __asm { FCVT            H0, S0 }
        *v34++ = _S0;
        --v33;
      }
      while (v33);
LABEL_3:
      ++v8;
      --v6;
      v5 += 2;
      _ZF = v7 == v45;
      uint64_t v7 = v16;
    }
    while (!_ZF);
  }
}

uint64_t sub_19241A934(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN12_GLOBAL__N_122TensorDequantizeHelperIDF16_hEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4"
                     "_RKS5_fEUlPDF16_PKhmE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN12_GLOBAL__N_122TensorDequantizeHelperIDF16_hEEvRKN4E5RT16TensorDescriptorERNS1_12Buff"
                                "erObjectES4_RKS5_fEUlPDF16_PKhmE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12_GLOBAL__N_122TensorDequantizeHelperIDF16_hEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPDF16_PKhmE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12_GLOBAL__N_122TensorDequantizeHelperIDF16_hEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPDF16_PKhmE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19241A9A4()
{
  return &unk_1EE39A418;
}

void sub_19241A9B4()
{
}

__n128 sub_19241A9C8(uint64_t a1)
{
  int v2 = (char *)operator new(0x28uLL);
  *(void *)int v2 = &unk_1EE39A438;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_19241AA1C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE39A438;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_19241AA54(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  unint64_t v4 = *a4;
  unint64_t v45 = (*a4 - 1) / *(void *)(a1 + 16);
  if (v45 != -1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    float __B = (float *)(a1 + 24);
    uint64_t v44 = *a3;
    uint64_t v42 = *a2;
    uint64_t v41 = *a2 + 16;
    uint64_t v8 = 1;
    do
    {
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v11 = v10 * v7;
      if (v10 * (v7 + 1) >= v4) {
        uint64_t v12 = v4;
      }
      else {
        uint64_t v12 = v10 * (v7 + 1);
      }
      unint64_t v13 = v12 - v11;
      vDSP_vflt8((const char *)(v44 + v11), 1, **(float ***)(a1 + 32), 1, v12 - v11);
      vDSP_vsmul(**(const float ***)(a1 + 32), 1, __B, **(float ***)(a1 + 32), 1, v12 - v11);
      uint64_t v14 = **(void **)(a1 + 32);
      if ((unint64_t)(v12 - v11) >= 4)
      {
        unint64_t v17 = v10 * v8;
        if (v4 < v10 * v8) {
          unint64_t v17 = v4;
        }
        unint64_t v18 = (v17 + v10 * v6) >> 2;
        uint64_t v19 = (float16x4_t *)(v42 + v10 * v5);
        unint64_t v20 = **(float32x4_t ***)(a1 + 32);
        do
        {
          float32x4_t v21 = *v20++;
          *v19++ = vcvt_f16_f32(v21);
          --v18;
        }
        while (v18);
        unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v16 = v7 + 1;
        if ((v13 & 0xFFFFFFFFFFFFFFFCLL) >= v13) {
          goto LABEL_3;
        }
      }
      else
      {
        unint64_t v15 = 0;
        uint64_t v16 = v7 + 1;
        if (!v13) {
          goto LABEL_3;
        }
      }
      unint64_t v22 = v12 - (v11 + v15);
      if (v22 >= 0x10)
      {
        unint64_t v23 = v15 + (v22 & 0xFFFFFFFFFFFFFFF0);
        unint64_t v24 = v10 * v8;
        if (v4 < v10 * v8) {
          unint64_t v24 = v4;
        }
        unint64_t v25 = (v24 - (v15 + v10 * v7)) & 0xFFFFFFFFFFFFFFF0;
        uint64_t v26 = (float32x4_t *)(v14 + 4 * v15 + 32);
        unint64_t v27 = (float16x8_t *)(v41 + v10 * v5 + 2 * v15);
        do
        {
          float32x4_t v29 = v26[-2];
          float32x4_t v28 = v26[-1];
          float32x4_t v31 = *v26;
          float32x4_t v30 = v26[1];
          v26 += 4;
          v27[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v29), v28);
          *unint64_t v27 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v31), v30);
          v27 += 2;
          v25 -= 16;
        }
        while (v25);
        if (v22 == (v22 & 0xFFFFFFFFFFFFFFF0)) {
          goto LABEL_3;
        }
      }
      else
      {
        unint64_t v23 = v15;
      }
      unint64_t v32 = v10 * v8;
      if (v4 < v10 * v8) {
        unint64_t v32 = v4;
      }
      unint64_t v33 = v32 + v10 * v6 - v23;
      unint64_t v34 = (_WORD *)(v42 + v10 * v5 + 2 * v23);
      uint64_t v35 = (int *)(v14 + 4 * v23);
      do
      {
        int v36 = *v35++;
        _S0 = v36;
        __asm { FCVT            H0, S0 }
        *v34++ = _S0;
        --v33;
      }
      while (v33);
LABEL_3:
      ++v8;
      --v6;
      v5 += 2;
      _ZF = v7 == v45;
      uint64_t v7 = v16;
    }
    while (!_ZF);
  }
}

uint64_t sub_19241AC90(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN12_GLOBAL__N_122TensorDequantizeHelperIDF16_aEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4"
                     "_RKS5_fEUlPDF16_PKamE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN12_GLOBAL__N_122TensorDequantizeHelperIDF16_aEEvRKN4E5RT16TensorDescriptorERNS1_12Buff"
                                "erObjectES4_RKS5_fEUlPDF16_PKamE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12_GLOBAL__N_122TensorDequantizeHelperIDF16_aEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPDF16_PKamE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12_GLOBAL__N_122TensorDequantizeHelperIDF16_aEEvRKN4E5RT16TensorDescriptorERNS1_12BufferObjectES4_RKS5_fEUlPDF16_PKamE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19241AD00()
{
  return &unk_1EE39A498;
}

uint64_t sub_19241AD0C(uint64_t result)
{
  if (result)
  {
    OUTLINED_FUNCTION_0();
    return (*(uint64_t (**)(void))(v1 + 40))();
  }
  return result;
}

uint64_t sub_19241AD48(uint64_t result)
{
  if (result)
  {
    OUTLINED_FUNCTION_0();
    return (*(uint64_t (**)(void))(v1 + 40))();
  }
  return result;
}

uint64_t sub_19241AD84(uint64_t result)
{
  if (result)
  {
    OUTLINED_FUNCTION_0();
    return (*(uint64_t (**)(void))(v1 + 40))();
  }
  return result;
}

uint64_t sub_19241ADC0(uint64_t result)
{
  if (result)
  {
    OUTLINED_FUNCTION_0();
    return (*(uint64_t (**)(void))(v1 + 40))();
  }
  return result;
}

uint64_t sub_19241ADFC(uint64_t result)
{
  if (result)
  {
    OUTLINED_FUNCTION_0();
    return (*(uint64_t (**)(void))(v1 + 40))();
  }
  return result;
}

uint64_t sub_19241AE38(uint64_t result)
{
  if (result)
  {
    OUTLINED_FUNCTION_0();
    return (*(uint64_t (**)(void))(v1 + 40))();
  }
  return result;
}

uint64_t sub_19241AE74(uint64_t result)
{
  if (result)
  {
    OUTLINED_FUNCTION_0();
    return (*(uint64_t (**)(void))(v1 + 40))();
  }
  return result;
}

uint64_t sub_19241AEB0(uint64_t result)
{
  if (result)
  {
    OUTLINED_FUNCTION_0();
    return (*(uint64_t (**)(void))(v1 + 40))();
  }
  return result;
}

uint64_t sub_19241AEEC(uint64_t result)
{
  if (result)
  {
    OUTLINED_FUNCTION_0();
    return (*(uint64_t (**)(void))(v1 + 40))();
  }
  return result;
}

uint64_t sub_19241AF28(uint64_t result)
{
  if (result)
  {
    OUTLINED_FUNCTION_0();
    return (*(uint64_t (**)(void))(v1 + 40))();
  }
  return result;
}

uint64_t sub_19241AF64(uint64_t result)
{
  if (result)
  {
    OUTLINED_FUNCTION_0();
    return (*(uint64_t (**)(void))(v1 + 40))();
  }
  return result;
}

uint64_t sub_19241AFA0(uint64_t result)
{
  if (result)
  {
    OUTLINED_FUNCTION_0();
    return (*(uint64_t (**)(void))(v1 + 40))();
  }
  return result;
}

uint64_t sub_19241AFDC(uint64_t result)
{
  if (result)
  {
    OUTLINED_FUNCTION_0();
    return (*(uint64_t (**)(void))(v1 + 40))();
  }
  return result;
}

uint64_t sub_19241B018(uint64_t result)
{
  if (result)
  {
    OUTLINED_FUNCTION_0();
    return (*(uint64_t (**)(void))(v1 + 40))();
  }
  return result;
}

uint64_t sub_19241B054(uint64_t result)
{
  if (result)
  {
    OUTLINED_FUNCTION_0();
    return (*(uint64_t (**)(void))(v1 + 40))();
  }
  return result;
}

uint64_t sub_19241B090(uint64_t result)
{
  if (result)
  {
    OUTLINED_FUNCTION_0();
    return (*(uint64_t (**)(void))(v1 + 40))();
  }
  return result;
}

uint64_t sub_19241B0CC(uint64_t result)
{
  if (result)
  {
    OUTLINED_FUNCTION_0();
    return (*(uint64_t (**)(void))(v1 + 40))();
  }
  return result;
}

uint64_t sub_19241B108(uint64_t result)
{
  if (result)
  {
    OUTLINED_FUNCTION_0();
    return (*(uint64_t (**)(void))(v1 + 40))();
  }
  return result;
}

uint64_t sub_19241B144(uint64_t result)
{
  if (result)
  {
    OUTLINED_FUNCTION_0();
    return (*(uint64_t (**)(void))(v1 + 40))();
  }
  return result;
}

uint64_t sub_19241B180(uint64_t result)
{
  if (result)
  {
    OUTLINED_FUNCTION_0();
    return (*(uint64_t (**)(void))(v1 + 40))();
  }
  return result;
}

uint64_t sub_19241B1BC(uint64_t result)
{
  if (result)
  {
    OUTLINED_FUNCTION_0();
    return (*(uint64_t (**)(void))(v1 + 40))();
  }
  return result;
}

uint64_t sub_19241B1F8(uint64_t result)
{
  if (result)
  {
    OUTLINED_FUNCTION_0();
    return (*(uint64_t (**)(void))(v1 + 40))();
  }
  return result;
}

uint64_t sub_19241B234(uint64_t result)
{
  if (result)
  {
    OUTLINED_FUNCTION_0();
    return (*(uint64_t (**)(void))(v1 + 40))();
  }
  return result;
}

uint64_t sub_19241B270(uint64_t result)
{
  if (result)
  {
    OUTLINED_FUNCTION_0();
    return (*(uint64_t (**)(void))(v1 + 40))();
  }
  return result;
}

uint64_t sub_19241B2AC(uint64_t result)
{
  if (result)
  {
    OUTLINED_FUNCTION_0();
    return (*(uint64_t (**)(void))(v1 + 40))();
  }
  return result;
}

uint64_t sub_19241B2E8(uint64_t result)
{
  if (result)
  {
    OUTLINED_FUNCTION_0();
    return (*(uint64_t (**)(void))(v1 + 40))();
  }
  return result;
}

uint64_t E5Common::BnnsTargetSystemFromString(E5Common *this, const char *a2)
{
  uint64_t __dst = 0;
  size_t v3 = strlen((const char *)this);
  if (v3 >= 8) {
    size_t v4 = 8;
  }
  else {
    size_t v4 = v3;
  }
  if (!v4) {
    goto LABEL_103;
  }
  memcpy(&__dst, this, v4);
  if (__dst <= 1144336711)
  {
    if (__dst > 3551559)
    {
      if (__dst > 1127428423)
      {
        if (__dst > 1127625031)
        {
          switch(__dst)
          {
            case 1127625032:
              return 2014;
            case 1144205640:
              return 2003;
            case 1144271176:
              return 2007;
            default:
              goto LABEL_103;
          }
        }
        else
        {
          switch(__dst)
          {
            case 1127428424:
              return 2002;
            case 1127493960:
              return 2004;
            case 1127559496:
              return 2010;
            default:
              goto LABEL_103;
          }
        }
      }
      if (__dst <= 4667719)
      {
        if (__dst != 3551560)
        {
          if (__dst != 3617096) {
            goto LABEL_103;
          }
          return 2016;
        }
        return 1014;
      }
      if (__dst == 4667720) {
        return 1005;
      }
      if (__dst != 5257032)
      {
        if (__dst != 5257544) {
          goto LABEL_103;
        }
        return 1004;
      }
    }
    else
    {
      if (__dst > 3223879)
      {
        if (__dst > 3354951)
        {
          if (__dst == 3354952) {
            return 1010;
          }
          if (__dst == 3420488) {
            return 1012;
          }
          if (__dst != 3486024) {
            goto LABEL_103;
          }
          return 1013;
        }
        if (__dst != 3223880)
        {
          if (__dst == 3223885) {
            return 3006;
          }
          if (__dst != 3289416) {
            goto LABEL_103;
          }
          return 1009;
        }
        return 1007;
      }
      if (__dst > 14668)
      {
        if (__dst == 14669) {
          return 3002;
        }
        if (__dst != 3158344)
        {
          if (__dst != 3158349) {
            goto LABEL_103;
          }
          return 3005;
        }
        return 1006;
      }
      if (__dst != 14152)
      {
        if (__dst != 14664) {
          goto LABEL_103;
        }
        return 1004;
      }
    }
    return 1000;
  }
  if (__dst <= 1345532231)
  {
    if (__dst <= 1194668359)
    {
      if (__dst <= 1194406215)
      {
        if (__dst == 1144336712)
        {
          return 2011;
        }
        else
        {
          if (__dst != 1144402248) {
            goto LABEL_103;
          }
          return 2015;
        }
      }
      else
      {
        switch(__dst)
        {
          case 1194406216:
            return 1008;
          case 1194537288:
            return 2000;
          case 1194602824:
            return 2006;
          default:
            goto LABEL_103;
        }
      }
    }
    if (__dst <= 1345335623)
    {
      if (__dst == 1194668360) {
        return 2008;
      }
      if (__dst == 1194733896) {
        return 2012;
      }
      if (__dst != 1295331656) {
        goto LABEL_103;
      }
      return 2010;
    }
    if (__dst != 1345335624)
    {
      if (__dst != 1345401160)
      {
        if (__dst != 1345466696) {
          goto LABEL_103;
        }
        return 1009;
      }
      return 1007;
    }
    return 1006;
  }
  if (__dst <= 1395929415)
  {
    if (__dst <= 1345728839)
    {
      if (__dst != 1345532232)
      {
        if (__dst != 1345597768)
        {
          if (__dst == 1345663304) {
            return 1013;
          }
LABEL_103:
          exception = __cxa_allocate_exception(0x18uLL);
          uint64_t v16 = (char *)operator new(0x20uLL);
          long long v17 = xmmword_192DBA240;
          strcpy(v16, "BnnsTargetSystemFromString");
          v12.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
          *(_OWORD *)&v12.__r_.__value_.__r.__words[1] = xmmword_192DB3C40;
          strcpy(v12.__r_.__value_.__l.__data_, "Unsupported platform identifier '");
          uint64_t v8 = std::string::append(&v12, (const std::string::value_type *)this);
          long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
          v13.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v9;
          v8->__r_.__value_.__l.__size_ = 0;
          v8->__r_.__value_.__r.__words[2] = 0;
          v8->__r_.__value_.__r.__words[0] = 0;
          uint64_t v10 = std::string::append(&v13, "' encountered in the E5 BNNS backend. This could be because the SDK used to perform BNNS compilation is not new enough to support the platform, an unsupported value was passed to --bnns-experimental-target-override, or there is a defect in the E5 BNNS backend. Please file a radar on SIML Espresso | E5ML if this message appears for a valid target.");
          long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
          *(void *)&v15[16] = *((void *)&v10->__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v15 = v11;
          v10->__r_.__value_.__l.__size_ = 0;
          v10->__r_.__value_.__r.__words[2] = 0;
          v10->__r_.__value_.__r.__words[0] = 0;
          E5RT::Status::Status(v14, 2, v15);
          E5RT::E5RTError::E5RTError(exception, &v16, v14);
        }
        return 1012;
      }
      return 1010;
    }
    if (__dst != 1345728840)
    {
      if (__dst != 1345794376)
      {
        if (__dst != 1395863880) {
          goto LABEL_103;
        }
        return 2001;
      }
      return 2016;
    }
    return 1014;
  }
  if (__dst > 0x6C65746E68)
  {
    switch(__dst)
    {
      case 0x6C65746E69:
        return 1;
      case 0x6378452E47363148:
        return 4000;
      case 0x6173726576696E75:
        uint64_t v6 = __cxa_allocate_exception(0x18uLL);
        uint64_t v16 = (char *)operator new(0x20uLL);
        long long v17 = xmmword_192DBA240;
        strcpy(v16, "BnnsTargetSystemFromString");
        *(void *)unint64_t v15 = operator new(0x48uLL);
        *(_OWORD *)&v15[8] = xmmword_192DAB6E0;
        strcpy(*(char **)v15, "Compilation for universal target is not available in the BNNS backend.");
        E5RT::Status::Status(&v13, 2, v15);
        E5RT::E5RTError::E5RTError(v6, &v16, &v13);
      default:
        goto LABEL_103;
    }
  }
  else
  {
    switch(__dst)
    {
      case 1395929416:
        return 2005;
      case 1395994952:
        return 2009;
      case 1396060488:
        return 2013;
      default:
        goto LABEL_103;
    }
  }
}

void sub_19241BC78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a28 < 0)
  {
    operator delete(__p);
    if (*(char *)(v30 - 41) < 0)
    {
LABEL_7:
      operator delete(*(void **)(v30 - 64));
      if ((v29 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  else if (*(char *)(v30 - 41) < 0)
  {
    goto LABEL_7;
  }
  if ((v29 & 1) == 0) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_8:
  __cxa_free_exception(v28);
  goto LABEL_9;
}

void E5Common::RegisterBnnsOpsets(bnns **a1)
{
  int v2 = *a1;
  char v7 = 5;
  strcpy((char *)__p, "bnnsx");
  uint64_t v3 = (*(uint64_t (**)(bnns *, void **))(*(void *)v2 + 16))(v2, __p);
  uint64_t v5 = v3;
  if ((v7 & 0x80000000) == 0)
  {
    if (v3) {
      return;
    }
LABEL_5:
    bnns::RegisterOpsets(*a1, v4);
    return;
  }
  operator delete(__p[0]);
  if (!v5) {
    goto LABEL_5;
  }
}

void sub_19241BE38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void E5Common::CreateBnnsGraphProgramFromMIL(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  BNNSGraphCompileOptionsMakeDefault();
  size_t v4 = [v3 objectForKeyedSubscript:E5Common::kBnnsGraphOutputPathStrKey[0]];

  if (v4)
  {
    id v5 = [v3 objectForKeyedSubscript:E5Common::kBnnsGraphOutputPathStrKey[0]];
    uint64_t v6 = (const char *)[v5 UTF8String];

    BNNSGraphCompileOptionsSetOutputPathWithPermissionsAndProtectionClass();
  }
  else
  {
    uint64_t v6 = 0;
  }
  char v7 = [v3 objectForKeyedSubscript:E5Common::kBnnsGraphTargetStrKey[0]];

  if (v7)
  {
    id v8 = [v3 objectForKeyedSubscript:E5Common::kBnnsGraphTargetStrKey[0]];
    long long v9 = (E5Common *)[v8 UTF8String];

    E5Common::BnnsTargetSystemFromString(v9, v10);
    BNNSGraphCompileOptionsSetTarget();
  }
  long long v11 = [v3 objectForKeyedSubscript:E5Common::kBnnsGraphGenerateDebugInfoKey];

  if (v11)
  {
    std::string v12 = [v3 objectForKeyedSubscript:E5Common::kBnnsGraphGenerateDebugInfoKey];
    [v12 isEqual:MEMORY[0x1E4F1CC38]];

    BNNSGraphCompileOptionsSetGenerateDebugInfo();
  }
  BNNSGraphCompileOptionsSetFileWriteFSyncBarrier();
  BNNSGraphCompileOptionsSetMessageLogMask();
  memset(v26, 0, sizeof(v26));
  uint64_t v24 = 24;
  unint64_t v25 = v26;
  BNNSGraphCompileOptionsSetMessageLogCallback();
  uint64_t v13 = bnns::GraphCompile();
  BNNSGraphCompileOptionsDestroy();
  if (!v13)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "CreateBnnsGraphProgramFromMIL");
    E5Common::StringUtils::SummarizeBNNSErrorMessages("Error(s) occurred compiling MIL to BNNS graph:\n", (uint64_t *)v26, &__dst);
    E5RT::Status::Status(v22, 9, &__dst);
    E5RT::E5RTError::E5RTError(exception, &__p, v22);
  }
  if (!v6) {
LABEL_23:
  }
    operator new();
  size_t v14 = strlen(v6);
  if (v14 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v15 = v14;
  if (v14 >= 0x17)
  {
    uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v17 = v14 | 7;
    }
    uint64_t v18 = v17 + 1;
    p_dst = (std::string *)operator new(v17 + 1);
    __dst.__r_.__value_.__l.__size_ = v15;
    __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v14;
    p_dst = &__dst;
    if (!v14) {
      goto LABEL_18;
    }
  }
  memmove(p_dst, v6, v15);
LABEL_18:
  p_dst->__r_.__value_.__s.__data_[v15] = 0;
  E5RT::PathWrapper::PathWrapper(&__p, (uint64_t)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (!E5RT::PathWrapper::PathExists((const std::__fs::filesystem::path *)&__p))
  {
    unint64_t v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v20, "Failed in serializing BNNS IR program on disk.");
    __cxa_throw(v20, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  goto LABEL_23;
}

void sub_19241C340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26)
{
  __cxa_free_exception(v27);
  if (a23 < 0)
  {
    operator delete(__p);
    std::vector<std::string>::~vector[abi:ne180100](&a26);

    _Unwind_Resume(a1);
  }
  std::vector<std::string>::~vector[abi:ne180100](&a26);

  _Unwind_Resume(a1);
}

void sub_19241C3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);

  _Unwind_Resume(a1);
}

void sub_19241C3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::vector<std::string>::~vector[abi:ne180100](&a20);

  _Unwind_Resume(a1);
}

void sub_19241C40C(void *a1)
{
  __cxa_begin_catch(a1);
  id v3 = *(void **)v2;
  if (v1) {
    munmap(v3, *(void *)(v2 + 8));
  }
  else {
    free(v3);
  }
  MEMORY[0x192FF16B0](v2, 0x1050C40717B85FCLL);
  __cxa_rethrow();
}

void sub_19241C448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  __cxa_end_catch();
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);

  _Unwind_Resume(a1);
}

void sub_19241C458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);

  _Unwind_Resume(a1);
}

void sub_19241C470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);

  _Unwind_Resume(a1);
}

void sub_19241C488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19241C498(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19241C4A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19241C4B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19241C4C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);

  _Unwind_Resume(a1);
}

void sub_19241C4E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19241C4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a17);
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0)
  {
    operator delete(a18);
    if ((v28 & 1) == 0)
    {
LABEL_8:
      std::vector<std::string>::~vector[abi:ne180100](&a26);

      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

void E5Common::CreateBnnsGraphProgramFromMILFile(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v4 = a4;
  E5Common::AutoResourcePtr::MakeFromFile();
}

void sub_19241C8F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a24 < 0) {
    operator delete(__p);
  }
  uint64_t v33 = *(void *)(v31 - 88);
  *(void *)(v31 - 88) = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v31 - 80);

  _Unwind_Resume(a1);
}

void sub_19241C9DC(int a1, const std::string::value_type *a2, const std::string::value_type *a3, uint64_t a4)
{
  if (a1 == 8 && a2 && a4 && *(void *)(a4 + 8))
  {
    v18.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
    *(_OWORD *)&v18.__r_.__value_.__r.__words[1] = xmmword_192DB3C40;
    strcpy(v18.__r_.__value_.__l.__data_, "[CreateBnnsGraphProgramFromMIL]: ");
    char v7 = std::string::append(&v18, a2);
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v18.__r_.__value_.__l.__data_);
      if (!a3) {
        goto LABEL_17;
      }
    }
    else if (!a3)
    {
LABEL_17:
      uint64_t v13 = *(void *)(a4 + 8);
      unint64_t v14 = *(void *)(v13 + 8);
      if (v14 < *(void *)(v13 + 16))
      {
LABEL_18:
        long long v15 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
        *(void *)(v14 + 16) = *((void *)&v19.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v14 = v15;
        memset(&v19, 0, sizeof(v19));
        uint64_t v16 = (char *)(v14 + 24);
        goto LABEL_22;
      }
LABEL_21:
      uint64_t v16 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)v13, (uint64_t)&v19);
LABEL_22:
      *(void *)(v13 + 8) = v16;
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
      return;
    }
    *((unsigned char *)&v17.__r_.__value_.__s + 23) = 13;
    strcpy((char *)&v17, " at location ");
    long long v9 = std::string::append(&v17, a3);
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v11 = &v18;
    }
    else {
      long long v11 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v18.__r_.__value_.__l.__size_;
    }
    std::string::append(&v19, (const std::string::value_type *)v11, size);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v18.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_17;
      }
    }
    else if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_17;
    }
    operator delete(v17.__r_.__value_.__l.__data_);
    uint64_t v13 = *(void *)(a4 + 8);
    unint64_t v14 = *(void *)(v13 + 8);
    if (v14 < *(void *)(v13 + 16)) {
      goto LABEL_18;
    }
    goto LABEL_21;
  }
}

void sub_19241CBA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19241CC2C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void sub_19241CC64(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  int v2 = *(unsigned __int8 *)(a1 + 32);
  id v3 = *(void **)v1;
  if (v2) {
    munmap(v3, *(void *)(v1 + 8));
  }
  else {
    free(v3);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t sub_19241CCC8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN8E5Common29CreateBnnsGraphProgramFromMILERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS4_11char_tr"
                     "aitsIcEENS4_9allocatorIcEEEEP12NSDictionaryE3$_1")
    return a1 + 32;
  if (((v3 & (unint64_t)"ZN8E5Common29CreateBnnsGraphProgramFromMILERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS"
                                "4_11char_traitsIcEENS4_9allocatorIcEEEEP12NSDictionaryE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8E5Common29CreateBnnsGraphProgramFromMILERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEP12NSDictionaryE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8E5Common29CreateBnnsGraphProgramFromMILERKN3MIL9IRProgramERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEP12NSDictionaryE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 32; {
  return 0;
  }
}

void std::__shared_ptr_pointer<E5Common::AutoResourcePtr  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<E5Common::AutoResourcePtr  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5Common::AutoResourcePtr  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN8E5Common15AutoResourcePtrEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN8E5Common15AutoResourcePtrEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN8E5Common15AutoResourcePtrEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN8E5Common15AutoResourcePtrEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t sub_19241CE1C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

uint64_t E5RT::ComputeProgramHeaderPriv::GetIdentifier(E5RT::ComputeProgramHeaderPriv *this)
{
  return **((unsigned __int16 **)this + 1);
}

void E5RT::E5BlockBuilder::Create(E5RT::E5BlockBuilder *this)
{
}

void sub_19241CF1C(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x10A1C4023DA19C4);
  _Unwind_Resume(a1);
}

void *E5RT::E5BlockBuilder::Finish@<X0>(const void **a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = *a1;
  *a1 = 0;
  if (!v3
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "Finish");
    std::string::basic_string[abi:ne180100]<0>(v7, "Invalid builder object in Finish call for E5Block");
    E5RT::Status::Status(v8, 2, v7);
    E5RT::E5RTError::E5RTError(exception, v9, v8);
  }
  *a2 = result;
  return result;
}

void sub_19241D040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::E5BlockImpl::~E5BlockImpl(void **this)
{
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(this + 31);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(this + 18);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(this + 5);
  int v2 = (char *)this[2];
  if (v2)
  {
    unint64_t v3 = (char *)this[3];
    id v4 = this[2];
    if (v3 != v2)
    {
      do
      {
        id v5 = (std::__shared_weak_count *)*((void *)v3 - 1);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      id v4 = this[2];
    }
    this[3] = v2;
    operator delete(v4);
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(this + 1));

  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)this);
}

{
  uint64_t vars8;

  E5RT::E5BlockImpl::~E5BlockImpl(this);

  JUMPOUT(0x192FF16B0);
}

void non-virtual thunk to'E5RT::E5BlockImpl::~E5BlockImpl(void **this)
{
}

{
  uint64_t vars8;

  E5RT::E5BlockImpl::~E5BlockImpl(this - 1);

  JUMPOUT(0x192FF16B0);
}

uint64_t E5RT::E5BlockImpl::GetInputs(E5RT::E5BlockImpl *this)
{
  return (uint64_t)this + 40;
}

uint64_t E5RT::E5BlockImpl::GetOutputs(E5RT::E5BlockImpl *this)
{
  return (uint64_t)this + 144;
}

uint64_t E5RT::E5BlockImpl::GetInOuts(E5RT::E5BlockImpl *this)
{
  return (uint64_t)this + 248;
}

_OWORD *non-virtual thunk to'E5RT::E5BlockImpl::AddOperation(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)(a1 + 16);
  if ((unint64_t)v3 >= *(void *)(a1 + 24))
  {
    uint64_t result = std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__push_back_slow_path<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions> const&>(a1 + 8, (long long *)a2);
    *(void *)(a1 + 16) = result;
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 8);
    *unint64_t v3 = *(void *)a2;
    v3[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t result = v3 + 2;
    *(void *)(a1 + 16) = v3 + 2;
  }
  return result;
}

void non-virtual thunk to'E5RT::E5BlockImpl::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 32, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  char v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5BlockImpl::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 136, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  char v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void E5RT::E5BlockImpl::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 248, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  char v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5BlockImpl::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 240, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  char v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void E5RT::E5BuildInfoBuilder::Create(E5RT::E5BuildInfoBuilder *this)
{
}

void sub_19241D56C(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x10A1C40912BD604);
  _Unwind_Resume(a1);
}

void *E5RT::E5BuildInfoBuilder::Finish@<X0>(const void **a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = *a1;
  *a1 = 0;
  if (!v3
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "Finish");
    std::string::basic_string[abi:ne180100]<0>(v7, "Invalid builder object in Finish call for E5BuildInfo");
    E5RT::Status::Status(v8, 2, v7);
    E5RT::E5RTError::E5RTError(exception, v9, v8);
  }
  *a2 = result;
  return result;
}

void sub_19241D690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void non-virtual thunk to'E5RT::E5BuildInfoImpl::~E5BuildInfoImpl(E5RT::E5BuildInfoImpl *this)
{
}

{
  uint64_t vars8;

  E5RT::E5BuildInfoImpl::~E5BuildInfoImpl((E5RT::E5BuildInfoImpl *)((char *)this - 8));

  JUMPOUT(0x192FF16B0);
}

uint64_t E5RT::E5BuildInfoImpl::GetBuildInfoEntries(E5RT::E5BuildInfoImpl *this)
{
  return (uint64_t)this + 16;
}

void E5RT::E5BuildInfoImpl::SetBuildInfoEntries(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)(a1 + 16);
  if (v3 != (void *)a2)
  {
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>(v3, *(uint64_t **)(a2 + 16), 0);
  }
}

void non-virtual thunk to'E5RT::E5BuildInfoImpl::SetBuildInfoEntries(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)(a1 + 8);
  if (v3 != (void *)a2)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>(v3, *(uint64_t **)(a2 + 16), 0);
  }
}

void non-virtual thunk to'E5RT::E5BuildInfoImpl::SetBuildInfoEntries(uint64_t a1, uint64_t *a2)
{
}

std::exception_ptr *sub_19241D7E0(std::exception_ptr *a1, const std::exception_ptr *a2)
{
  return std::exception_ptr::exception_ptr(a1 + 5, a2 + 5);
}

void sub_19241D7EC(std::exception_ptr *a1)
{
}

uint64_t sub_19241D7F4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_19241D82C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  std::exception_ptr::operator=((std::exception_ptr *)(*(void *)(*(void *)(v14 + 40) + 8) + 40), v15);
  std::exception_ptr::~exception_ptr(v15);
  __cxa_end_catch();
}

void E5Common::AutoResourcePtr::MakeFromSharedData()
{
}

void sub_19241D940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_ptr_emplace<cxxopts::OptionDetails>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::string&,std::shared_ptr<cxxopts::Value const> &,std::allocator<cxxopts::OptionDetails>,0>(a10);
  }
  MEMORY[0x192FF16B0](v10, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

void E5RT::E5FunctionBuilder::Create(E5RT::E5FunctionBuilder *this)
{
}

void sub_19241D9C8(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x10B3C4031B97F05);
  _Unwind_Resume(a1);
}

void *E5RT::E5FunctionBuilder::Finish@<X0>(const void **a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = *a1;
  *a1 = 0;
  if (!v3
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "Finish");
    std::string::basic_string[abi:ne180100]<0>(v7, "Invalid builder object in Finish call for E5Function");
    E5RT::Status::Status(v8, 2, v7);
    E5RT::E5RTError::E5RTError(exception, v9, v8);
  }
  *a2 = result;
  return result;
}

void sub_19241DAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::E5FunctionImpl::~E5FunctionImpl(E5RT::E5FunctionImpl *this)
{
  int v2 = (void **)*((void *)this + 53);
  if (v2)
  {
    do
    {
      while (1)
      {
        unint64_t v3 = (void **)*v2;
        uint64_t v4 = (std::__shared_weak_count *)v2[6];
        if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        if (*((char *)v2 + 39) < 0) {
          break;
        }
        operator delete(v2);
        int v2 = v3;
        if (!v3) {
          goto LABEL_9;
        }
      }
      operator delete(v2[2]);
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
LABEL_9:
  uint64_t v5 = (void *)*((void *)this + 51);
  *((void *)this + 5E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = 0;
  if (v5) {
    operator delete(v5);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)this + 38);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)this + 25);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)this + 12);
  uint64_t v6 = *((void *)this + 9);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 10);
    long long v8 = (void *)*((void *)this + 9);
    if (v7 != v6)
    {
      do
      {
        long long v9 = *(std::__shared_weak_count **)(v7 - 8);
        if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        v7 -= 16;
      }
      while (v7 != v6);
      long long v8 = (void *)*((void *)this + 9);
    }
    *((void *)this + 10) = v6;
    operator delete(v8);
  }
  if (*((char *)this + 71) < 0)
  {
    operator delete(*((void **)this + 6));
    if ((*((char *)this + 47) & 0x80000000) == 0) {
      goto LABEL_22;
    }
  }
  else if ((*((char *)this + 47) & 0x80000000) == 0)
  {
    goto LABEL_22;
  }
  operator delete(*((void **)this + 3));
LABEL_22:
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::E5FunctionImpl *)((char *)this + 8));

  E5RT::AsyncEventImpl::~AsyncEventImpl(this);
}

{
  uint64_t vars8;

  E5RT::E5FunctionImpl::~E5FunctionImpl(this);

  JUMPOUT(0x192FF16B0);
}

void non-virtual thunk to'E5RT::E5FunctionImpl::~E5FunctionImpl(E5RT::E5FunctionImpl *this)
{
}

{
  uint64_t vars8;

  E5RT::E5FunctionImpl::~E5FunctionImpl((E5RT::E5FunctionImpl *)((char *)this - 8));

  JUMPOUT(0x192FF16B0);
}

char *non-virtual thunk to'E5RT::E5FunctionImpl::AddBlock(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(_OWORD **)(a1 + 72);
  if ((unint64_t)v3 >= *(void *)(a1 + 80))
  {
    uint64_t result = std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>((char **)(a1 + 64), a2);
  }
  else
  {
    *unint64_t v3 = *(_OWORD *)a2;
    uint64_t result = (char *)(v3 + 1);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  *(void *)(a1 + 72) = result;
  return result;
}

uint64_t E5RT::E5FunctionImpl::SetIntermediateBufferSize(uint64_t this, uint64_t a2)
{
  *(void *)(this + 16) = a2;
  return this;
}

uint64_t non-virtual thunk to'E5RT::E5FunctionImpl::SetIntermediateBufferSize(uint64_t this, uint64_t a2)
{
  *(void *)(this + 8) = a2;
  return this;
}

std::string *non-virtual thunk to'E5RT::E5FunctionImpl::SetName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 16), a2);
}

void non-virtual thunk to'E5RT::E5FunctionImpl::AddInput(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 88, a2);
  long long v5 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = 0;
  uint64_t v6 = (std::__shared_weak_count *)v4[1];
  *(_OWORD *)uint64_t v4 = v5;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void non-virtual thunk to'E5RT::E5FunctionImpl::AddOutput(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 192, a2);
  long long v5 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = 0;
  uint64_t v6 = (std::__shared_weak_count *)v4[1];
  *(_OWORD *)uint64_t v4 = v5;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void E5RT::E5FunctionImpl::AddInOut(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 304, a2);
  long long v5 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = 0;
  uint64_t v6 = (std::__shared_weak_count *)v4[1];
  *(_OWORD *)uint64_t v4 = v5;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void non-virtual thunk to'E5RT::E5FunctionImpl::AddInOut(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 296, a2);
  long long v5 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = 0;
  uint64_t v6 = (std::__shared_weak_count *)v4[1];
  *(_OWORD *)uint64_t v4 = v5;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void E5RT::E5FunctionImpl::MapOperand(uint64_t a1, long long *a2, long long *a3)
{
  uint64_t v7 = a2;
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 408, (uint64_t)a2, (uint64_t)&std::piecewise_construct, &v7);
  long long v5 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = 0;
  uint64_t v6 = (std::__shared_weak_count *)v4[6];
  *(_OWORD *)(v4 + 5) = v5;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void non-virtual thunk to'E5RT::E5FunctionImpl::MapOperand(uint64_t a1, long long *a2, long long *a3)
{
  uint64_t v7 = a2;
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 400, (uint64_t)a2, (uint64_t)&std::piecewise_construct, &v7);
  long long v5 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = 0;
  uint64_t v6 = (std::__shared_weak_count *)v4[6];
  *(_OWORD *)(v4 + 5) = v5;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

std::string *non-virtual thunk to'E5RT::E5FunctionImpl::SetUserVersion(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 40), a2);
}

void *std::function<std::unique_ptr<KernelInfoT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void *std::function<BOOL ()(flatbuffers::Verifier &)>::~function(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void sub_19241E2FC(std::string *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = a3;
  uint64_t v6 = *(void *)a2;
  long long v7 = *(_OWORD *)(*(void *)(*(uint64_t (**)(void))(**(void **)(a2 + 8) + 16))(*(void *)(a2 + 8))
                 + 16 * a3);
  long long v32 = v7;
  uint64_t v8 = *((void *)&v7 + 1);
  if (*((void *)&v7 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)uint64_t v30 = 0u;
  int v31 = 1065353216;
  long long v9 = *(void **)(a2 + 16);
  unint64_t v10 = v9[1];
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v12 = v3;
      if (v10 <= v3) {
        unint64_t v12 = v3 % v10;
      }
    }
    else
    {
      unint64_t v12 = (v10 - 1) & v3;
    }
    uint64_t v13 = *(uint64_t ***)(*v9 + 8 * v12);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (v14)
      {
        if (v11.u32[0] < 2uLL)
        {
          unint64_t v15 = v10 - 1;
          while (1)
          {
            uint64_t v17 = v14[1];
            if (v17 == v3)
            {
              if (*((_DWORD *)v14 + 4) == v3) {
                goto LABEL_24;
              }
            }
            else if ((v17 & v15) != v12)
            {
              goto LABEL_26;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_26;
            }
          }
        }
        do
        {
          unint64_t v16 = v14[1];
          if (v16 == v3)
          {
            if (*((_DWORD *)v14 + 4) == v3)
            {
LABEL_24:
              if (__p != (void **)(v14 + 3))
              {
                int v31 = *((_DWORD *)v14 + 14);
                long long v26 = v7;
                std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(__p, (uint64_t *)v14[5], 0);
                long long v7 = v26;
              }
              break;
            }
          }
          else
          {
            if (v16 >= v10) {
              v16 %= v10;
            }
            if (v16 != v12) {
              break;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_26:
  long long v27 = v7;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  E5RT::E5FunctionImpl::LoadOperandInfo(v6, (uint64_t **)&v27, *(void *)(a2 + 24), v28);
  std::string v18 = (std::__shared_weak_count *)*((void *)&v27 + 1);
  if (*((void *)&v27 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = (*(uint64_t (**)(void))(*(void *)v32 + 16))(v32);
  if (*(char *)(v19 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)v19, *(void *)(v19 + 8));
  }
  else
  {
    long long v20 = *(_OWORD *)v19;
    a1->__r_.__value_.__r.__words[2] = *(void *)(v19 + 16);
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v20;
  }
  float32x4_t v21 = (std::__shared_weak_count *)v28[1];
  a1[1].__r_.__value_.__r.__words[0] = v28[0];
  a1[1].__r_.__value_.__l.__size_ = (std::string::size_type)v21;
  if (v21)
  {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  unint64_t v22 = (void **)v30[0];
  if (v30[0])
  {
    do
    {
      unint64_t v25 = (void **)*v22;
      if (*((char *)v22 + 39) < 0) {
        operator delete(v22[2]);
      }
      operator delete(v22);
      unint64_t v22 = v25;
    }
    while (v25);
  }
  int v23 = __p[0];
  __p[0] = 0;
  if (v23) {
    operator delete(v23);
  }
  uint64_t v24 = (std::__shared_weak_count *)*((void *)&v32 + 1);
  if (*((void *)&v32 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v32 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_19241E654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v7 - 64);
  _Unwind_Resume(a1);
}

void sub_19241E670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v3 - 64);
  _Unwind_Resume(a1);
}

void sub_19241E694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v5 - 64);
  _Unwind_Resume(a1);
}

void sub_19241E6B8(std::string *a1, std::string *a2, uint64_t a3)
{
  uint64_t v4 = (const std::string::value_type *)a2;
  memset(&v20, 0, sizeof(v20));
  std::string::size_type v6 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  std::string::size_type size = a2->__r_.__value_.__l.__size_;
  if ((v6 & 0x80u) != 0)
  {
    a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
    std::string::size_type v6 = size;
  }
  std::string::append[abi:ne180100]<char const*,0>(&v20, a2, (std::string *)((char *)a2 + v6));
  memset(&__p, 0, sizeof(__p));
  uint64_t v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) == 0) {
    uint64_t v9 = (std::string *)a3;
  }
  else {
    uint64_t v9 = *(std::string **)a3;
  }
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a3 + 8);
  }
  std::string::append[abi:ne180100]<char const*,0>(&__p, v9, (std::string *)((char *)v9 + v8));
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)&v20, &v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_10;
    }
LABEL_16:
    operator delete(v20.__r_.__value_.__l.__data_);
    goto LABEL_10;
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_16;
  }
LABEL_10:
  std::__fs::filesystem::__status(&v21, 0);
  if (v20.__r_.__value_.__s.__data_[0] == 255 || !v20.__r_.__value_.__s.__data_[0])
  {
    std::operator+<char>();
    unint64_t v10 = std::string::append(&v18, " in bundle = ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    int v12 = v4[23];
    if (v12 >= 0) {
      uint64_t v13 = v4;
    }
    else {
      uint64_t v13 = *(const std::string::value_type **)v4;
    }
    if (v12 >= 0) {
      std::string::size_type v14 = *((unsigned __int8 *)v4 + 23);
    }
    else {
      std::string::size_type v14 = *((void *)v4 + 1);
    }
    unint64_t v15 = std::string::append(&__p, v13, v14);
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "FindPathForResource");
    E5RT::Status::Status(&v18, 8, &v20);
    E5RT::E5RTError::E5RTError(exception, &__p, &v18);
  }
  if (SHIBYTE(v21.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a1, v21.__pn_.__r_.__value_.__l.__data_, v21.__pn_.__r_.__value_.__l.__size_);
    if (SHIBYTE(v21.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__pn_.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(std::__fs::filesystem::path *)a1 = v21;
  }
}

void sub_19241E8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  E5RT::Status::~Status((E5RT::Status *)&a10);
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
    {
LABEL_6:
      if (a28 < 0) {
        operator delete(a23);
      }
      if (*(char *)(v30 - 33) < 0) {
        operator delete(*(void **)(v30 - 56));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v28);
  goto LABEL_6;
}

BnnsCpuInferenceOpT **std::unique_ptr<BnnsCpuInferenceOpT>::~unique_ptr[abi:ne180100](BnnsCpuInferenceOpT **a1)
{
  int v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    BnnsCpuInferenceOpT::~BnnsCpuInferenceOpT(v2);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

uint64_t *std::unique_ptr<CpuInferenceOpT>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 47) < 0)
    {
      operator delete(*(void **)(v2 + 24));
      if ((*(char *)(v2 + 23) & 0x80000000) == 0) {
        goto LABEL_4;
      }
    }
    else if ((*(char *)(v2 + 23) & 0x80000000) == 0)
    {
LABEL_4:
      MEMORY[0x192FF16B0](v2, 0x1012C403467C318);
      return a1;
    }
    operator delete(*(void **)v2);
    goto LABEL_4;
  }
  return a1;
}

uint64_t *std::unique_ptr<EirInferenceOpT>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 56);
    if (v3)
    {
      *(void *)(v2 + 64) = v3;
      operator delete(v3);
    }
    if (*(char *)(v2 + 55) < 0)
    {
      operator delete(*(void **)(v2 + 32));
      if ((*(char *)(v2 + 23) & 0x80000000) == 0) {
        goto LABEL_6;
      }
    }
    else if ((*(char *)(v2 + 23) & 0x80000000) == 0)
    {
LABEL_6:
      MEMORY[0x192FF16B0](v2, 0x1092C403B4DE647);
      return a1;
    }
    operator delete(*(void **)v2);
    goto LABEL_6;
  }
  return a1;
}

uint64_t *std::unique_ptr<CastOpT>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 8);
    if (v3)
    {
      *(void *)(v2 + 16) = v3;
      operator delete(v3);
    }
    MEMORY[0x192FF16B0](v2, 0x1010C402EF3923FLL);
  }
  return a1;
}

uint64_t *std::unique_ptr<QuantOpT>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 8);
    if (v3)
    {
      *(void *)(v2 + 16) = v3;
      operator delete(v3);
    }
    MEMORY[0x192FF16B0](v2, 0x1080C406BDE4C18);
  }
  return a1;
}

uint64_t *std::unique_ptr<MlcCpuInferenceOpT>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x192FF16B0](v2, 0x1012C40EC159624);
  }
  return a1;
}

JitCallOpT **std::unique_ptr<JitCallOpT>::~unique_ptr[abi:ne180100](JitCallOpT **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    JitCallOpT::~JitCallOpT(v2);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

unsigned __int8 **std::unique_ptr<E5RT_FB::OperandDescT>::~unique_ptr[abi:ne180100](unsigned __int8 **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    E5RT_FB::OperandUnion::Reset(v2);
    MEMORY[0x192FF16B0](v2, 0x1080C403DA8C3A5);
  }
  return a1;
}

void *std::function<std::unique_ptr<E5RT_FB::OperandDescT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

double BnnsCpuInferenceOp::UnPackTo(int *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = -v4;
  std::string::size_type v6 = (char *)a1 - v4;
  unsigned int v7 = *(unsigned __int16 *)((char *)a1 - v4);
  if (v7 <= 4)
  {
    *(unsigned char *)a2 = 0;
  }
  else
  {
    uint64_t v8 = *((unsigned __int16 *)v6 + 2);
    if (*((_WORD *)v6 + 2))
    {
      *(unsigned char *)a2 = *((unsigned char *)a1 + v8);
      if (v7 < 7) {
        goto LABEL_12;
      }
    }
    else
    {
      *(unsigned char *)a2 = 0;
      if (v7 < 7) {
        goto LABEL_12;
      }
    }
    uint64_t v9 = *((unsigned __int16 *)v6 + 3);
    if (v9)
    {
      uint64_t v10 = (uint64_t)a1 + v9 + *(unsigned int *)((char *)a1 + v9);
      if (v8) {
        int v11 = *((unsigned __int8 *)a1 + v8);
      }
      else {
        int v11 = 0;
      }
      *(void *)(a2 + 8) = BnnsProgramUrlUnion::UnPack(v10, v11);
      uint64_t v5 = -(uint64_t)*a1;
    }
  }
LABEL_12:
  if (*(unsigned __int16 *)((char *)a1 + v5) >= 9u)
  {
    uint64_t v13 = *(unsigned __int16 *)((char *)a1 + v5 + 8);
    if (*(_WORD *)((char *)a1 + v5 + 8))
    {
      std::string::size_type v14 = (char *)a1 + v13;
      uint64_t v15 = *(unsigned int *)((char *)a1 + v13);
      uint64_t v17 = &v14[v15 + 4];
      size_t v16 = *(unsigned int *)&v14[v15];
      if (v16 >= 0x17)
      {
        if ((v16 | 7) == 0x17) {
          uint64_t v32 = (v16 & 0xFFFFFFF8) + 8;
        }
        else {
          uint64_t v32 = v16 | 7;
        }
        p_dst = (long long *)operator new(v32 + 1);
        *((void *)&__dst + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = v16;
        uint64_t v45 = v32 - 0x7FFFFFFFFFFFFFFFLL;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v45) = *(_DWORD *)&v14[v15];
        p_dst = &__dst;
        if (!v16)
        {
          *((unsigned char *)&__dst + v16) = 0;
          uint64_t v19 = a2 + 16;
          if ((*(char *)(a2 + 39) & 0x80000000) == 0)
          {
LABEL_17:
            double result = *(double *)&__dst;
            *(_OWORD *)uint64_t v19 = __dst;
            *(void *)(v19 + 16) = v45;
            uint64_t v5 = -(uint64_t)*a1;
            goto LABEL_18;
          }
LABEL_38:
          operator delete(*(void **)v19);
          goto LABEL_17;
        }
      }
      memcpy(p_dst, v17, v16);
      *((unsigned char *)p_dst + v16) = 0;
      uint64_t v19 = a2 + 16;
      if ((*(char *)(a2 + 39) & 0x80000000) == 0) {
        goto LABEL_17;
      }
      goto LABEL_38;
    }
  }
LABEL_18:
  std::string v20 = (unsigned __int16 *)((char *)a1 + v5);
  unsigned int v21 = *v20;
  if (v21 <= 0xA)
  {
    *(unsigned char *)(a2 + 40) = 0;
LABEL_26:
    uint64_t v30 = *(void *)(a2 + 48);
    uint64_t v31 = *(void *)(a2 + 56);
    if (v31 != v30)
    {
      do
      {
        if (*(char *)(v31 - 1) < 0) {
          operator delete(*(void **)(v31 - 24));
        }
        v31 -= 24;
      }
      while (v31 != v30);
      *(void *)(a2 + 56) = v30;
    }
    return result;
  }
  uint64_t v22 = v20[5];
  if (v20[5]) {
    LOBYTE(v22) = *((unsigned char *)a1 + v22) != 0;
  }
  *(unsigned char *)(a2 + 40) = v22;
  if (v21 < 0xD) {
    goto LABEL_26;
  }
  uint64_t v23 = v20[6];
  if (!v23) {
    goto LABEL_26;
  }
  uint64_t v24 = (int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23));
  uint64_t v25 = *(void *)(a2 + 48);
  uint64_t v27 = *(void *)(a2 + 56);
  long long v26 = (void *)(a2 + 48);
  unint64_t v28 = *v24;
  unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((v27 - v25) >> 3);
  if (v28 <= v29)
  {
    if (v28 < v29)
    {
      uint64_t v33 = v25 + 24 * v28;
      while (v27 != v33)
      {
        if (*(char *)(v27 - 1) < 0) {
          operator delete(*(void **)(v27 - 24));
        }
        v27 -= 24;
      }
      *(void *)(a2 + 56) = v33;
    }
  }
  else
  {
    std::vector<std::string>::__append((std::vector<std::string> *)(a2 + 48), v28 - v29);
  }
  if (*v24)
  {
    uint64_t v34 = 0;
    unint64_t v35 = 0;
    int v36 = v24;
    __int16 v37 = v24;
    do
    {
      unsigned int v38 = v37[1];
      ++v37;
      unsigned int v39 = (char *)v36 + v38;
      size_t v40 = *((unsigned int *)v39 + 1);
      if (v40 >= 0x17)
      {
        if ((v40 | 7) == 0x17) {
          uint64_t v43 = (v40 & 0xFFFFFFF8) + 8;
        }
        else {
          uint64_t v43 = v40 | 7;
        }
        uint64_t v41 = (long long *)operator new(v43 + 1);
        *((void *)&__dst + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = v40;
        uint64_t v45 = v43 - 0x7FFFFFFFFFFFFFFFLL;
        *(void *)&long long __dst = v41;
      }
      else
      {
        HIBYTE(v45) = *((_DWORD *)v39 + 1);
        uint64_t v41 = &__dst;
        if (!v40)
        {
          *((unsigned char *)&__dst + v40) = 0;
          uint64_t v42 = *v26 + v34;
          if (*(char *)(v42 + 23) < 0) {
            goto LABEL_58;
          }
          goto LABEL_48;
        }
      }
      memcpy(v41, v39 + 8, v40);
      *((unsigned char *)v41 + v40) = 0;
      uint64_t v42 = *v26 + v34;
      if (*(char *)(v42 + 23) < 0) {
LABEL_58:
      }
        operator delete(*(void **)v42);
LABEL_48:
      double result = *(double *)&__dst;
      *(_OWORD *)uint64_t v42 = __dst;
      *(void *)(v42 + 16) = v45;
      ++v35;
      v34 += 24;
      int v36 = v37;
    }
    while (v35 < *v24);
  }
  return result;
}

uint64_t BnnsProgramUrlUnion::UnPack(uint64_t a1, int a2)
{
  if (a2 == 2) {
    operator new();
  }
  if (a2 == 1) {
    operator new();
  }
  return 0;
}

void sub_19241F1B4(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

__n128 EirInferenceOp::UnPackTo(int *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = -v4;
  std::string::size_type v6 = (unsigned __int16 *)((char *)a1 - v4);
  if (*v6 >= 5u)
  {
    uint64_t v7 = v6[2];
    if (v7)
    {
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = *(unsigned int *)((char *)a1 + v7);
      int v11 = &v8[v9 + 4];
      size_t v10 = *(unsigned int *)&v8[v9];
      if (v10 >= 0x17)
      {
        if ((v10 | 7) == 0x17) {
          uint64_t v29 = (v10 & 0xFFFFFFF8) + 8;
        }
        else {
          uint64_t v29 = v10 | 7;
        }
        p_dst = (long long *)operator new(v29 + 1);
        *((void *)&__dst + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = v10;
        uint64_t v45 = v29 - 0x7FFFFFFFFFFFFFFFLL;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v45) = *(_DWORD *)&v8[v9];
        p_dst = &__dst;
        if (!v10)
        {
          *((unsigned char *)&__dst + v10) = 0;
          if ((*(char *)(a2 + 23) & 0x80000000) == 0)
          {
LABEL_6:
            result.n128_u64[0] = __dst;
            *(_OWORD *)a2 = __dst;
            *(void *)(a2 + 16) = v45;
            uint64_t v5 = -(uint64_t)*a1;
            goto LABEL_7;
          }
LABEL_25:
          operator delete(*(void **)a2);
          goto LABEL_6;
        }
      }
      memcpy(p_dst, v11, v10);
      *((unsigned char *)p_dst + v10) = 0;
      if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_25;
    }
  }
LABEL_7:
  std::string::size_type v14 = (char *)a1 + v5;
  unsigned int v15 = *(unsigned __int16 *)((char *)a1 + v5);
  if (v15 <= 6)
  {
    *(_DWORD *)(a2 + 24) = 0;
  }
  else
  {
    uint64_t v16 = *((unsigned __int16 *)v14 + 3);
    if (*((_WORD *)v14 + 3)) {
      LODWORD(v16) = *(int *)((char *)a1 + v16);
    }
    *(_DWORD *)(a2 + 24) = v16;
    if (v15 >= 9)
    {
      uint64_t v17 = *((unsigned __int16 *)v14 + 4);
      if (v17)
      {
        std::string v18 = (char *)a1 + v17;
        uint64_t v19 = *(unsigned int *)((char *)a1 + v17);
        unsigned int v21 = &v18[v19 + 4];
        size_t v20 = *(unsigned int *)&v18[v19];
        if (v20 >= 0x17)
        {
          if ((v20 | 7) == 0x17) {
            uint64_t v37 = (v20 & 0xFFFFFFF8) + 8;
          }
          else {
            uint64_t v37 = v20 | 7;
          }
          uint64_t v22 = (long long *)operator new(v37 + 1);
          *((void *)&__dst + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = v20;
          uint64_t v45 = v37 - 0x7FFFFFFFFFFFFFFFLL;
          *(void *)&long long __dst = v22;
        }
        else
        {
          HIBYTE(v45) = *(_DWORD *)&v18[v19];
          uint64_t v22 = &__dst;
          if (!v20)
          {
LABEL_40:
            *((unsigned char *)v22 + v20) = 0;
            unsigned int v38 = (void **)(a2 + 32);
            if (*(char *)(a2 + 55) < 0) {
              operator delete(*v38);
            }
            result.n128_u64[0] = __dst;
            *(_OWORD *)unsigned int v38 = __dst;
            *(void *)(a2 + 48) = v45;
            uint64_t v23 = (unsigned __int16 *)((char *)a1 - *a1);
            if (*v23 < 0xBu) {
              goto LABEL_43;
            }
            goto LABEL_17;
          }
        }
        memcpy(v22, v21, v20);
        goto LABEL_40;
      }
    }
  }
  uint64_t v23 = (unsigned __int16 *)((char *)a1 + v5);
  if (*v23 < 0xBu) {
    goto LABEL_43;
  }
LABEL_17:
  uint64_t v24 = v23[5];
  if (!v23[5])
  {
LABEL_43:
    uint64_t v39 = *(void *)(a2 + 56);
    if (*(void *)(a2 + 64) != v39) {
      *(void *)(a2 + 64) = v39;
    }
    return result;
  }
  uint64_t v25 = *(unsigned int *)((char *)a1 + v24);
  uint64_t v26 = *(void *)(a2 + 56);
  unint64_t v27 = *(unsigned int *)((char *)a1 + v24 + v25);
  unint64_t v28 = (*(void *)(a2 + 64) - v26) >> 2;
  if (v27 <= v28)
  {
    if (v27 < v28) {
      *(void *)(a2 + 64) = v26 + 4 * v27;
    }
  }
  else
  {
    std::vector<Device>::__append((std::vector<int> *)(a2 + 56), v27 - v28);
    LODWORD(v27) = *(int *)((char *)a1 + v24 + v25);
  }
  if (v27)
  {
    uint64_t v30 = *(__n128 **)(a2 + 56);
    uint64_t v31 = v27;
    if (v27 < 0xC || (unint64_t)((char *)v30 - ((char *)a1 + v24) - v25 - 4) < 0x20)
    {
      uint64_t v32 = 0;
LABEL_32:
      uint64_t v33 = (int *)((char *)&a1[v32 + 1] + v25 + v24);
      uint64_t v34 = (_DWORD *)v30 + v32;
      uint64_t v35 = v31 - v32;
      do
      {
        int v36 = *v33++;
        *v34++ = v36;
        --v35;
      }
      while (v35);
      return result;
    }
    uint64_t v32 = v27 & 0xFFFFFFF8;
    size_t v40 = (__n128 *)((char *)a1 + v25 + v24 + 20);
    uint64_t v41 = v30 + 1;
    uint64_t v42 = v31 & 0xFFFFFFF8;
    do
    {
      __n128 result = v40[-1];
      __n128 v43 = *v40;
      v41[-1] = result;
      *uint64_t v41 = v43;
      v40 += 2;
      v41 += 2;
      v42 -= 8;
    }
    while (v42);
    if (v32 != v31) {
      goto LABEL_32;
    }
  }
  return result;
}

void std::vector<float>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  std::string::size_type v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      std::string::size_type v6 = &v5[4 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    uint64_t v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 2;
    unint64_t v10 = (v8 >> 2) + a2;
    if (v10 >> 62) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - (void)v7;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v13 = operator new(4 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    std::string::size_type v14 = &v13[4 * v9];
    size_t v15 = 4 * a2;
    uint64_t v16 = &v13[4 * v12];
    bzero(v14, v15);
    uint64_t v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 4;
      if (v18 < 0x2C) {
        goto LABEL_31;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 2) + 1;
      uint64_t v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      std::string::size_type v6 = &v5[-v20];
      v14 -= v20;
      unsigned int v21 = &v13[4 * v9 - 16];
      uint64_t v22 = v5 - 16;
      uint64_t v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = *((_OWORD *)v22 - 1);
        *unsigned int v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_31:
        do
        {
          int v25 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = v25;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

double MpsGraphInferenceOp::UnPackTo(int *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = -v4;
  std::string::size_type v6 = (unsigned __int16 *)((char *)a1 - v4);
  if (*v6 >= 5u)
  {
    uint64_t v7 = v6[2];
    if (v7)
    {
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = *(unsigned int *)((char *)a1 + v7);
      uint64_t v11 = &v8[v9 + 4];
      size_t v10 = *(unsigned int *)&v8[v9];
      if (v10 >= 0x17)
      {
        if ((v10 | 7) == 0x17) {
          uint64_t v34 = (v10 & 0xFFFFFFF8) + 8;
        }
        else {
          uint64_t v34 = v10 | 7;
        }
        p_dst = (long long *)operator new(v34 + 1);
        *((void *)&__dst + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = v10;
        uint64_t v48 = v34 - 0x7FFFFFFFFFFFFFFFLL;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v48) = *(_DWORD *)&v8[v9];
        p_dst = &__dst;
        if (!v10)
        {
          *((unsigned char *)&__dst + v10) = 0;
          if ((*(char *)(a2 + 23) & 0x80000000) == 0)
          {
LABEL_6:
            double result = *(double *)&__dst;
            *(_OWORD *)a2 = __dst;
            *(void *)(a2 + 16) = v48;
            uint64_t v5 = -(uint64_t)*a1;
            goto LABEL_7;
          }
LABEL_37:
          operator delete(*(void **)a2);
          goto LABEL_6;
        }
      }
      memcpy(p_dst, v11, v10);
      *((unsigned char *)p_dst + v10) = 0;
      if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_37;
    }
  }
LABEL_7:
  if (*(unsigned __int16 *)((char *)a1 + v5) >= 7u)
  {
    uint64_t v14 = *(unsigned __int16 *)((char *)a1 + v5 + 6);
    if (*(_WORD *)((char *)a1 + v5 + 6))
    {
      size_t v15 = (char *)a1 + v14;
      uint64_t v16 = *(unsigned int *)((char *)a1 + v14);
      unint64_t v18 = &v15[v16 + 4];
      size_t v17 = *(unsigned int *)&v15[v16];
      if (v17 >= 0x17)
      {
        if ((v17 | 7) == 0x17) {
          uint64_t v35 = (v17 & 0xFFFFFFF8) + 8;
        }
        else {
          uint64_t v35 = v17 | 7;
        }
        uint64_t v19 = (long long *)operator new(v35 + 1);
        *((void *)&__dst + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = v17;
        uint64_t v48 = v35 - 0x7FFFFFFFFFFFFFFFLL;
        *(void *)&long long __dst = v19;
      }
      else
      {
        HIBYTE(v48) = *(_DWORD *)&v15[v16];
        uint64_t v19 = &__dst;
        if (!v17)
        {
          *((unsigned char *)&__dst + v17) = 0;
          uint64_t v20 = a2 + 24;
          if ((*(char *)(a2 + 47) & 0x80000000) == 0)
          {
LABEL_12:
            double result = *(double *)&__dst;
            *(_OWORD *)uint64_t v20 = __dst;
            *(void *)(v20 + 16) = v48;
            uint64_t v5 = -(uint64_t)*a1;
            goto LABEL_13;
          }
LABEL_43:
          operator delete(*(void **)v20);
          goto LABEL_12;
        }
      }
      memcpy(v19, v18, v17);
      *((unsigned char *)v19 + v17) = 0;
      uint64_t v20 = a2 + 24;
      if ((*(char *)(a2 + 47) & 0x80000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_43;
    }
  }
LABEL_13:
  unsigned int v21 = (unsigned __int16 *)((char *)a1 + v5);
  unsigned int v22 = *v21;
  if (v22 <= 8)
  {
    *(void *)(a2 + 48) = 0;
LABEL_24:
    *(unsigned char *)(a2 + 56) = 0;
LABEL_25:
    uint64_t v32 = *(void *)(a2 + 64);
    uint64_t v33 = *(void *)(a2 + 72);
    if (v33 != v32)
    {
      do
      {
        if (*(char *)(v33 - 1) < 0) {
          operator delete(*(void **)(v33 - 24));
        }
        v33 -= 24;
      }
      while (v33 != v32);
      *(void *)(a2 + 72) = v32;
    }
    return result;
  }
  uint64_t v23 = v21[4];
  if (v21[4]) {
    uint64_t v23 = *(void *)((char *)a1 + v23);
  }
  *(void *)(a2 + 48) = v23;
  if (v22 < 0xB) {
    goto LABEL_24;
  }
  uint64_t v24 = v21[5];
  if (v21[5]) {
    LOBYTE(v24) = *((unsigned char *)a1 + v24) != 0;
  }
  *(unsigned char *)(a2 + 56) = v24;
  if (v22 < 0xD) {
    goto LABEL_25;
  }
  uint64_t v25 = v21[6];
  if (!v25) {
    goto LABEL_25;
  }
  uint64_t v26 = (int *)((char *)a1 + v25 + *(unsigned int *)((char *)a1 + v25));
  uint64_t v27 = *(void *)(a2 + 64);
  uint64_t v29 = *(void *)(a2 + 72);
  unint64_t v28 = (void *)(a2 + 64);
  unint64_t v30 = *v26;
  unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((v29 - v27) >> 3);
  if (v30 <= v31)
  {
    if (v30 < v31)
    {
      uint64_t v36 = v27 + 24 * v30;
      while (v29 != v36)
      {
        if (*(char *)(v29 - 1) < 0) {
          operator delete(*(void **)(v29 - 24));
        }
        v29 -= 24;
      }
      *(void *)(a2 + 72) = v36;
    }
  }
  else
  {
    std::vector<std::string>::__append((std::vector<std::string> *)(a2 + 64), v30 - v31);
  }
  if (*v26)
  {
    uint64_t v37 = 0;
    unint64_t v38 = 0;
    uint64_t v39 = v26;
    size_t v40 = v26;
    do
    {
      unsigned int v41 = v40[1];
      ++v40;
      uint64_t v42 = (char *)v39 + v41;
      size_t v43 = *((unsigned int *)v42 + 1);
      if (v43 >= 0x17)
      {
        if ((v43 | 7) == 0x17) {
          uint64_t v46 = (v43 & 0xFFFFFFF8) + 8;
        }
        else {
          uint64_t v46 = v43 | 7;
        }
        uint64_t v44 = (long long *)operator new(v46 + 1);
        *((void *)&__dst + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = v43;
        uint64_t v48 = v46 - 0x7FFFFFFFFFFFFFFFLL;
        *(void *)&long long __dst = v44;
      }
      else
      {
        HIBYTE(v48) = *((_DWORD *)v42 + 1);
        uint64_t v44 = &__dst;
        if (!v43)
        {
          *((unsigned char *)&__dst + v43) = 0;
          uint64_t v45 = *v28 + v37;
          if (*(char *)(v45 + 23) < 0) {
            goto LABEL_63;
          }
          goto LABEL_53;
        }
      }
      memcpy(v44, v42 + 8, v43);
      *((unsigned char *)v44 + v43) = 0;
      uint64_t v45 = *v28 + v37;
      if (*(char *)(v45 + 23) < 0) {
LABEL_63:
      }
        operator delete(*(void **)v45);
LABEL_53:
      double result = *(double *)&__dst;
      *(_OWORD *)uint64_t v45 = __dst;
      *(void *)(v45 + 16) = v48;
      ++v38;
      v37 += 24;
      uint64_t v39 = v40;
    }
    while (v38 < *v26);
  }
  return result;
}

double JitCallOp::UnPackTo(int *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = -v4;
  std::string::size_type v6 = (unsigned __int16 *)((char *)a1 - v4);
  if (*v6 >= 5u)
  {
    uint64_t v7 = v6[2];
    if (v7)
    {
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = *(unsigned int *)((char *)a1 + v7);
      uint64_t v11 = &v8[v9 + 4];
      size_t v10 = *(unsigned int *)&v8[v9];
      if (v10 >= 0x17)
      {
        if ((v10 | 7) == 0x17) {
          uint64_t v31 = (v10 & 0xFFFFFFF8) + 8;
        }
        else {
          uint64_t v31 = v10 | 7;
        }
        p_dst = (long long *)operator new(v31 + 1);
        *((void *)&__dst + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = v10;
        uint64_t v67 = v31 - 0x7FFFFFFFFFFFFFFFLL;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v67) = *(_DWORD *)&v8[v9];
        p_dst = &__dst;
        if (!v10)
        {
          *((unsigned char *)&__dst + v10) = 0;
          if ((*(char *)(a2 + 23) & 0x80000000) == 0)
          {
LABEL_6:
            double result = *(double *)&__dst;
            *(_OWORD *)a2 = __dst;
            *(void *)(a2 + 16) = v67;
            uint64_t v5 = -(uint64_t)*a1;
            goto LABEL_7;
          }
LABEL_28:
          operator delete(*(void **)a2);
          goto LABEL_6;
        }
      }
      memcpy(p_dst, v11, v10);
      *((unsigned char *)p_dst + v10) = 0;
      if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_28;
    }
  }
LABEL_7:
  if (*(unsigned __int16 *)((char *)a1 + v5) >= 7u)
  {
    uint64_t v14 = *(unsigned __int16 *)((char *)a1 + v5 + 6);
    if (*(_WORD *)((char *)a1 + v5 + 6))
    {
      size_t v15 = (char *)a1 + v14;
      uint64_t v16 = *(unsigned int *)((char *)a1 + v14);
      unint64_t v18 = &v15[v16 + 4];
      size_t v17 = *(unsigned int *)&v15[v16];
      if (v17 >= 0x17)
      {
        if ((v17 | 7) == 0x17) {
          uint64_t v32 = (v17 & 0xFFFFFFF8) + 8;
        }
        else {
          uint64_t v32 = v17 | 7;
        }
        uint64_t v19 = (long long *)operator new(v32 + 1);
        *((void *)&__dst + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = v17;
        uint64_t v67 = v32 - 0x7FFFFFFFFFFFFFFFLL;
        *(void *)&long long __dst = v19;
      }
      else
      {
        HIBYTE(v67) = *(_DWORD *)&v15[v16];
        uint64_t v19 = &__dst;
        if (!v17)
        {
          *((unsigned char *)&__dst + v17) = 0;
          uint64_t v20 = a2 + 24;
          if ((*(char *)(a2 + 47) & 0x80000000) == 0)
          {
LABEL_12:
            double result = *(double *)&__dst;
            *(_OWORD *)uint64_t v20 = __dst;
            *(void *)(v20 + 16) = v67;
            uint64_t v5 = -(uint64_t)*a1;
            goto LABEL_13;
          }
LABEL_34:
          operator delete(*(void **)v20);
          goto LABEL_12;
        }
      }
      memcpy(v19, v18, v17);
      *((unsigned char *)v19 + v17) = 0;
      uint64_t v20 = a2 + 24;
      if ((*(char *)(a2 + 47) & 0x80000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_34;
    }
  }
LABEL_13:
  unsigned int v21 = (unsigned __int16 *)((char *)a1 + v5);
  std::random_device v65 = (std::vector<std::string> *)a2;
  if (*v21 >= 9u && (uint64_t v22 = v21[4]) != 0)
  {
    uint64_t v23 = (int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    uint64_t v24 = *(void *)(a2 + 48);
    uint64_t v26 = *(void *)(a2 + 56);
    uint64_t v25 = (void *)(a2 + 48);
    unint64_t v27 = *v23;
    unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((v26 - v24) >> 3);
    if (v27 <= v28)
    {
      if (v27 < v28)
      {
        uint64_t v33 = v24 + 24 * v27;
        while (v26 != v33)
        {
          if (*(char *)(v26 - 1) < 0) {
            operator delete(*(void **)(v26 - 24));
          }
          v26 -= 24;
        }
        *(void *)(a2 + 56) = v33;
      }
    }
    else
    {
      std::vector<std::string>::__append((std::vector<std::string> *)(a2 + 48), v27 - v28);
    }
    if (*v23)
    {
      uint64_t v34 = 0;
      unint64_t v35 = 0;
      uint64_t v36 = v23;
      uint64_t v37 = v23;
      do
      {
        unsigned int v38 = v37[1];
        ++v37;
        uint64_t v39 = (char *)v36 + v38;
        size_t v40 = *((unsigned int *)v39 + 1);
        if (v40 >= 0x17)
        {
          if ((v40 | 7) == 0x17) {
            uint64_t v43 = (v40 & 0xFFFFFFF8) + 8;
          }
          else {
            uint64_t v43 = v40 | 7;
          }
          unsigned int v41 = (long long *)operator new(v43 + 1);
          *((void *)&__dst + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = v40;
          uint64_t v67 = v43 - 0x7FFFFFFFFFFFFFFFLL;
          *(void *)&long long __dst = v41;
        }
        else
        {
          HIBYTE(v67) = *((_DWORD *)v39 + 1);
          unsigned int v41 = &__dst;
          if (!v40)
          {
            *((unsigned char *)&__dst + v40) = 0;
            uint64_t v42 = *v25 + v34;
            if (*(char *)(v42 + 23) < 0) {
              goto LABEL_54;
            }
            goto LABEL_44;
          }
        }
        memcpy(v41, v39 + 8, v40);
        *((unsigned char *)v41 + v40) = 0;
        uint64_t v42 = *v25 + v34;
        if (*(char *)(v42 + 23) < 0) {
LABEL_54:
        }
          operator delete(*(void **)v42);
LABEL_44:
        double result = *(double *)&__dst;
        *(_OWORD *)uint64_t v42 = __dst;
        *(void *)(v42 + 16) = v67;
        ++v35;
        v34 += 24;
        uint64_t v36 = v37;
      }
      while (v35 < *v23);
    }
  }
  else
  {
    uint64_t v29 = *(void *)(a2 + 48);
    uint64_t v30 = *(void *)(a2 + 56);
    if (v30 != v29)
    {
      do
      {
        if (*(char *)(v30 - 1) < 0) {
          operator delete(*(void **)(v30 - 24));
        }
        v30 -= 24;
      }
      while (v30 != v29);
      *(void *)(a2 + 56) = v29;
    }
  }
  uint64_t v44 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v44 >= 0xBu && (uint64_t v45 = v44[5]) != 0)
  {
    uint64_t v46 = (int *)((char *)a1 + v45 + *(unsigned int *)((char *)a1 + v45));
    std::vector<std::string>::pointer begin = v65[3].__begin_;
    std::vector<std::string>::pointer end = v65[3].__end_;
    uint64_t v48 = v65 + 3;
    unint64_t v50 = *v46;
    unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3);
    if (v50 <= v51)
    {
      if (v50 < v51)
      {
        uint64_t v54 = &begin[v50];
        while (end != v54)
        {
          if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(end[-1].__r_.__value_.__l.__data_);
          }
          --end;
        }
        v65[3].__end_ = v54;
      }
    }
    else
    {
      std::vector<std::string>::__append(v65 + 3, v50 - v51);
    }
    if (*v46)
    {
      uint64_t v55 = 0;
      unint64_t v56 = 0;
      unint64_t v57 = v46;
      int v58 = v46;
      do
      {
        unsigned int v59 = v58[1];
        ++v58;
        unint64_t v60 = (char *)v57 + v59;
        size_t v61 = *((unsigned int *)v60 + 1);
        if (v61 >= 0x17)
        {
          if ((v61 | 7) == 0x17) {
            uint64_t v64 = (v61 & 0xFFFFFFF8) + 8;
          }
          else {
            uint64_t v64 = v61 | 7;
          }
          uint64_t v62 = (long long *)operator new(v64 + 1);
          *((void *)&__dst + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = v61;
          uint64_t v67 = v64 - 0x7FFFFFFFFFFFFFFFLL;
          *(void *)&long long __dst = v62;
        }
        else
        {
          HIBYTE(v67) = *((_DWORD *)v60 + 1);
          uint64_t v62 = &__dst;
          if (!v61)
          {
            *((unsigned char *)&__dst + v6E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = 0;
            std::random_device v63 = &v48->__begin_[v55];
            if (SHIBYTE(v63->__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_84;
            }
            goto LABEL_74;
          }
        }
        memcpy(v62, v60 + 8, v61);
        *((unsigned char *)v62 + v6E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = 0;
        std::random_device v63 = &v48->__begin_[v55];
        if (SHIBYTE(v63->__r_.__value_.__r.__words[2]) < 0) {
LABEL_84:
        }
          operator delete(v63->__r_.__value_.__l.__data_);
LABEL_74:
        double result = *(double *)&__dst;
        *(_OWORD *)&v63->__r_.__value_.__l.__data_ = __dst;
        v63->__r_.__value_.__r.__words[2] = v67;
        ++v56;
        ++v55;
        unint64_t v57 = v58;
      }
      while (v56 < *v46);
    }
  }
  else
  {
    int v52 = v65[3].__begin_;
    std::vector<std::string>::pointer v53 = v65[3].__end_;
    if (v53 != v52)
    {
      do
      {
        if (SHIBYTE(v53[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v53[-1].__r_.__value_.__l.__data_);
        }
        --v53;
      }
      while (v53 != v52);
      v65[3].__end_ = v52;
    }
  }
  return result;
}

void std::default_delete<AneInferenceOpT>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a2 + 56);
    if (v3)
    {
      uint64_t v4 = *(void *)(a2 + 64);
      uint64_t v5 = *(void **)(a2 + 56);
      if (v4 != v3)
      {
        do
        {
          if (*(char *)(v4 - 1) < 0) {
            operator delete(*(void **)(v4 - 24));
          }
          v4 -= 24;
        }
        while (v4 != v3);
        uint64_t v5 = *(void **)(a2 + 56);
      }
      *(void *)(a2 + 64) = v3;
      operator delete(v5);
    }
    if (*(char *)(a2 + 47) < 0)
    {
      operator delete(*(void **)(a2 + 24));
      if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
        goto LABEL_13;
      }
    }
    else if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(*(void **)a2);
LABEL_13:
    JUMPOUT(0x192FF16B0);
  }
}

void std::default_delete<MpsGraphInferenceOpT>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a2 + 64);
    if (v3)
    {
      uint64_t v4 = *(void *)(a2 + 72);
      uint64_t v5 = *(void **)(a2 + 64);
      if (v4 != v3)
      {
        do
        {
          if (*(char *)(v4 - 1) < 0) {
            operator delete(*(void **)(v4 - 24));
          }
          v4 -= 24;
        }
        while (v4 != v3);
        uint64_t v5 = *(void **)(a2 + 64);
      }
      *(void *)(a2 + 72) = v3;
      operator delete(v5);
    }
    if (*(char *)(a2 + 47) < 0)
    {
      operator delete(*(void **)(a2 + 24));
      if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
        goto LABEL_13;
      }
    }
    else if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(*(void **)a2);
LABEL_13:
    JUMPOUT(0x192FF16B0);
  }
}

void BnnsCpuInferenceOpT::~BnnsCpuInferenceOpT(BnnsCpuInferenceOpT *this)
{
  uint64_t v2 = *((void *)this + 6);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 7);
    uint64_t v4 = (void *)*((void *)this + 6);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 6);
    }
    *((void *)this + 7) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 39) < 0)
  {
    operator delete(*((void **)this + 2));
    int v5 = *(unsigned __int8 *)this;
    if (v5 == 2) {
      goto LABEL_14;
    }
LABEL_13:
    if (v5 != 1) {
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  int v5 = *(unsigned __int8 *)this;
  if (v5 != 2) {
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v6 = *((void *)this + 1);
  if (v6)
  {
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    MEMORY[0x192FF16B0](v6, 0x1012C40EC159624);
  }
LABEL_18:
  *((void *)this + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = 0;
  *(unsigned char *)this = 0;
}

void JitCallOpT::~JitCallOpT(JitCallOpT *this)
{
  uint64_t v2 = *((void *)this + 9);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 10);
    uint64_t v4 = (void *)*((void *)this + 9);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 9);
    }
    *((void *)this + 10) = v2;
    operator delete(v4);
  }
  uint64_t v5 = *((void *)this + 6);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 7);
    uint64_t v7 = (void *)*((void *)this + 6);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while (v6 != v5);
      uint64_t v7 = (void *)*((void *)this + 6);
    }
    *((void *)this + 7) = v5;
    operator delete(v7);
  }
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
    if ((*((char *)this + 23) & 0x80000000) == 0) {
      return;
    }
LABEL_21:
    operator delete(*(void **)this);
    return;
  }
  operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0) {
    goto LABEL_21;
  }
}

uint64_t E5MinimalCpuOp::Verify(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 1E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v13 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v14 = 0;
    if (v4 || v6 - 2 < v13) {
      return v14;
    }
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13) {
    return 0;
  }
  uint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 < 5u) {
    goto LABEL_57;
  }
  uint64_t v20 = v19[2];
  if (!v19[2]) {
    goto LABEL_57;
  }
  uint64_t v14 = 0;
  unint64_t v21 = (unint64_t)&v3[v20];
  BOOL v23 = (v21 & 3) == 0 || v4 == 0;
  if (v7 >= v21 && v23)
  {
    uint64_t v24 = *(unsigned int *)(v2 + v21);
    if ((int)v24 < 1 || v6 - 1 < v21 + v24) {
      return 0;
    }
    uint64_t v14 = 0;
    uint64_t v25 = (unsigned int *)((char *)a1 + v20 + *(unsigned int *)((char *)a1 + v20));
    uint64_t v26 = (char *)v25 - v2;
    BOOL v27 = (((unint64_t)v25 - v2) & 3) == 0 || v4 == 0;
    BOOL v28 = v27;
    if (v7 >= (unint64_t)v26 && v28)
    {
      uint64_t v29 = *v25;
      if (v29 > 0x7FFFFFFE) {
        return 0;
      }
      unint64_t v30 = v29 + 4;
      unint64_t v31 = (unint64_t)&v26[v29 + 4];
      BOOL v32 = v6 - 1 >= v31 && v6 > v30;
      BOOL v33 = v32 && v6 - v30 >= (unint64_t)v26;
      if (!v33 || *(unsigned char *)(v2 + v31)) {
        return 0;
      }
LABEL_57:
      *((_DWORD *)a2 + 10) = v10;
      return 1;
    }
  }
  return v14;
}

void std::__function::__func<BOOL (*)(flatbuffers::Verifier &),std::allocator<BOOL (*)(flatbuffers::Verifier &)>,BOOL ()(flatbuffers::Verifier &)>::~__func()
{
}

void *std::__function::__func<BOOL (*)(flatbuffers::Verifier &),std::allocator<BOOL (*)(flatbuffers::Verifier &)>,BOOL ()(flatbuffers::Verifier &)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1EE377EC0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(flatbuffers::Verifier &),std::allocator<BOOL (*)(flatbuffers::Verifier &)>,BOOL ()(flatbuffers::Verifier &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE377EC0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(flatbuffers::Verifier &),std::allocator<BOOL (*)(flatbuffers::Verifier &)>,BOOL ()(flatbuffers::Verifier &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "PFbRN11flatbuffers8VerifierEE") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"PFbRN11flatbuffers8VerifierEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "PFbRN11flatbuffers8VerifierEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFbRN11flatbuffers8VerifierEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<BOOL (*)(flatbuffers::Verifier &),std::allocator<BOOL (*)(flatbuffers::Verifier &)>,BOOL ()(flatbuffers::Verifier &)>::target_type()
{
}

void std::__function::__func<std::unique_ptr<KernelInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<KernelInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<KernelInfoT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::~__func()
{
}

void *std::__function::__func<std::unique_ptr<KernelInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<KernelInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<KernelInfoT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1EE377AA0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<KernelInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<KernelInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<KernelInfoT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE377AA0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<KernelInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<KernelInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<KernelInfoT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "PFNSt3__110unique_ptrI11KernelInfoTNS_14default_deleteIS1_EEEEPKvPKNS_8functionIFvPPvyEEEE") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"PFNSt3__110unique_ptrI11KernelInfoTNS_14default_deleteIS1_EEEEPKvPKNS_8functionIFvPPvyEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "PFNSt3__110unique_ptrI11KernelInfoTNS_14default_deleteIS1_EEEEPKvPKNS_8functionIFvPPvyEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFNSt3__110unique_ptrI11KernelInfoTNS_14default_deleteIS1_EEEEPKvPKNS_8functionIFvPPvyEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<std::unique_ptr<KernelInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<KernelInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<KernelInfoT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::target_type()
{
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<AneInferenceOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380AB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<AneInferenceOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380AB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<E5RT::E5OperationImpl<AneInferenceOpT>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_pointer<AneInferenceOpT  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_pointer<AneInferenceOpT  *>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<AneInferenceOpT  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteI15AneInferenceOpTEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteI15AneInferenceOpTEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteI15AneInferenceOpTEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteI15AneInferenceOpTEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void E5RT::E5OperationImpl<AneInferenceOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::E5OperationImpl<AneInferenceOpT>::~E5OperationImpl(a1);

  JUMPOUT(0x192FF16B0);
}

{
  E5RT::AsyncEventImpl *v2;
  void *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE324F48;
  uint64_t v2 = (E5RT::AsyncEventImpl *)(a1 + 8);
  *(void *)(a1 + 8) = &unk_1EE324FD8;
  unint64_t v3 = *(void **)(a1 + 376);
  if (v3)
  {
    *(void *)(a1 + 384) = v3;
    operator delete(v3);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 272));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 168));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 64));
  int v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*(char *)(a1 + 39) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (*(char *)(a1 + 39) < 0) {
LABEL_6:
  }
    operator delete(*(void **)(a1 + 16));
LABEL_7:
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);

  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)a1);
}

uint64_t E5RT::E5OperationImpl<AneInferenceOpT>::GetDependentEvents(uint64_t a1)
{
  return a1 + 376;
}

uint64_t E5RT::E5OperationImpl<AneInferenceOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

std::string *E5RT::E5OperationImpl<AneInferenceOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 16), a2);
}

void E5RT::E5OperationImpl<AneInferenceOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 64, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = (std::__shared_weak_count *)v4[1];
  *int v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void E5RT::E5OperationImpl<AneInferenceOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 168, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = (std::__shared_weak_count *)v4[1];
  *int v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void E5RT::E5OperationImpl<AneInferenceOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 272, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = (std::__shared_weak_count *)v4[1];
  *int v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t E5RT::E5OperationImpl<AneInferenceOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(void *)(result + 400) = a2;
  *(unsigned char *)(result + 408) = 1;
  return result;
}

void E5RT::E5OperationImpl<AneInferenceOpT>::AddDependentEvent(void *a1, uint64_t a2)
{
  uint64_t v5 = (char *)a1[48];
  unint64_t v4 = a1[49];
  uint64_t v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(void *)uint64_t v5 = a2;
    uint64_t v7 = (uint64_t)(v5 + 8);
    goto LABEL_22;
  }
  BOOL v8 = (char *)a1[47];
  uint64_t v9 = (v5 - v8) >> 3;
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = v4 - (void)v8;
  if (v11 >> 2 > v10) {
    unint64_t v10 = v11 >> 2;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v13 = operator new(8 * v12);
    uint64_t v14 = &v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    *uint64_t v14 = a2;
    uint64_t v7 = (uint64_t)(v14 + 1);
    int64_t v16 = v5 - v8;
    if (v5 == v8) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  unint64_t v13 = 0;
  uint64_t v14 = (void *)(8 * v9);
  unint64_t v15 = 0;
  *(void *)(8 * v9) = a2;
  uint64_t v7 = 8 * v9 + 8;
  int64_t v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    unint64_t v17 = v16 - 8;
    if (v17 < 0x58) {
      goto LABEL_27;
    }
    if ((unint64_t)(v8 - v13) < 0x20) {
      goto LABEL_27;
    }
    uint64_t v18 = (v17 >> 3) + 1;
    uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v6 = &v5[-v19];
    uint64_t v14 = (void *)((char *)v14 - v19);
    uint64_t v20 = &v13[8 * v9 - 16];
    unint64_t v21 = v5 - 16;
    uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *(_OWORD *)v21;
      *(v20 - E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = *((_OWORD *)v21 - 1);
      _OWORD *v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        uint64_t v24 = *((void *)v6 - 1);
        v6 -= 8;
        *--uint64_t v14 = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  a1[47] = v14;
  a1[48] = v7;
  a1[49] = v15;
  if (v8) {
    operator delete(v8);
  }
LABEL_22:
  a1[48] = v7;
}

void non-virtual thunk to'E5RT::E5OperationImpl<AneInferenceOpT>::~E5OperationImpl(uint64_t a1)
{
}

{
  uint64_t vars8;

  E5RT::E5OperationImpl<AneInferenceOpT>::~E5OperationImpl(a1 - 8);

  JUMPOUT(0x192FF16B0);
}

uint64_t non-virtual thunk to'E5RT::E5OperationImpl<AneInferenceOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

std::string *non-virtual thunk to'E5RT::E5OperationImpl<AneInferenceOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void non-virtual thunk to'E5RT::E5OperationImpl<AneInferenceOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 56, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<AneInferenceOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 160, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<AneInferenceOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 264, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<AneInferenceOpT>::AddDependentEvent(uint64_t a1, uint64_t a2)
{
}

uint64_t non-virtual thunk to'E5RT::E5OperationImpl<AneInferenceOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(void *)(result + 392) = a2;
  *(unsigned char *)(result + 400) = 1;
  return result;
}

uint64_t BnnsCpuInferenceOp::Verify(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_95;
  }
  uint64_t v22 = v20[2];
  if (!v20[2])
  {
    if (v21 <= 6)
    {
LABEL_95:
      uint64_t result = flatbuffers::Table::VerifyOffset(a1, a2, 0xCu);
      if (result)
      {
        uint64_t v48 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v48 >= 0xDu && (uint64_t v49 = v48[6]) != 0) {
          unint64_t v50 = (unsigned int *)((char *)a1 + v49 + *(unsigned int *)((char *)a1 + v49));
        }
        else {
          unint64_t v50 = 0;
        }
        uint64_t result = flatbuffers::Verifier::VerifyVector<flatbuffers::Offset<flatbuffers::String>>(a2, v50);
        if (result)
        {
          unint64_t v51 = (unsigned __int16 *)((char *)a1 - *a1);
          if (*v51 >= 0xDu && (uint64_t v52 = v51[6]) != 0) {
            std::vector<std::string>::pointer v53 = (unsigned int *)((char *)a1 + v52 + *(unsigned int *)((char *)a1 + v52));
          }
          else {
            std::vector<std::string>::pointer v53 = 0;
          }
          uint64_t result = flatbuffers::Verifier::VerifyVectorOfStrings(a2, v53);
          if (result)
          {
            --*(_DWORD *)(a2 + 40);
            return 1;
          }
        }
      }
      return result;
    }
LABEL_34:
    long long v23 = (unsigned int *)v20[3];
    if (v20[3])
    {
      uint64_t result = 0;
      uint64_t v24 = (char *)v23 + (void)v3;
      BOOL v26 = (((uint64_t)v23 + (void)v3) & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v24 || !v26) {
        return result;
      }
      uint64_t v27 = *(unsigned int *)&v24[v2];
      if ((int)v27 < 1 || v7 - 1 < (unint64_t)&v24[v27]) {
        return 0;
      }
      long long v23 = (unsigned int *)((char *)v23 + (void)a1 + *(unsigned int *)((char *)v23 + (void)a1));
    }
    if (!v20[2]) {
      goto LABEL_67;
    }
    goto LABEL_47;
  }
  if (v7 - 1 < (unint64_t)&v3[v22]) {
    return 0;
  }
  if (v21 >= 7) {
    goto LABEL_34;
  }
  long long v23 = 0;
LABEL_47:
  int v28 = *((unsigned __int8 *)a1 + v22);
  if (v28 == 2)
  {
    if (!v23) {
      goto LABEL_67;
    }
  }
  else if (v28 != 1 || v23 == 0)
  {
    goto LABEL_67;
  }
  uint64_t result = 0;
  unint64_t v30 = (char *)v23 - v2;
  BOOL v32 = (((unint64_t)v23 - v2) & 3) == 0 || v4 == 0;
  if (v8 < (unint64_t)v30 || !v32) {
    return result;
  }
  uint64_t v33 = *v23;
  if (v33 > 0x7FFFFFFE) {
    return 0;
  }
  uint64_t result = 0;
  unint64_t v34 = v33 + 4;
  unint64_t v35 = (unint64_t)&v30[v33 + 4];
  if (v7 - 1 < v35 || v7 <= v34 || v7 - v34 < (unint64_t)v30) {
    return result;
  }
  if (*(unsigned char *)(v2 + v35)) {
    return 0;
  }
LABEL_67:
  if (v21 < 9) {
    goto LABEL_95;
  }
  uint64_t v36 = v20[4];
  if (!v20[4])
  {
LABEL_92:
    if (v21 >= 0xB && v20[5] && v7 - 1 < (unint64_t)&v3[v20[5]]) {
      return 0;
    }
    goto LABEL_95;
  }
  uint64_t result = 0;
  uint64_t v37 = &v3[v36];
  BOOL v39 = ((unint64_t)&v3[v36] & 3) == 0 || v4 == 0;
  if (v8 >= (unint64_t)v37 && v39)
  {
    uint64_t v40 = *(unsigned int *)&v37[v2];
    if ((int)v40 < 1 || v7 - 1 < (unint64_t)&v37[v40]) {
      return 0;
    }
    uint64_t result = 0;
    unsigned int v41 = (unsigned int *)((char *)a1 + v36 + *(unsigned int *)((char *)a1 + v36));
    uint64_t v42 = (char *)v41 - v2;
    BOOL v43 = (((unint64_t)v41 - v2) & 3) == 0 || v4 == 0;
    BOOL v44 = v43;
    if (v8 >= (unint64_t)v42 && v44)
    {
      uint64_t v45 = *v41;
      if (v45 <= 0x7FFFFFFE)
      {
        uint64_t result = 0;
        unint64_t v46 = v45 + 4;
        unint64_t v47 = (unint64_t)&v42[v45 + 4];
        if (v7 - 1 < v47 || v7 <= v46 || v7 - v46 < (unint64_t)v42) {
          return result;
        }
        if (!*(unsigned char *)(v2 + v47)) {
          goto LABEL_92;
        }
      }
      return 0;
    }
  }
  return result;
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<BnnsCpuInferenceOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380BD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<BnnsCpuInferenceOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380BD0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<E5RT::E5OperationImpl<BnnsCpuInferenceOpT>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<E5RT::E5OperationImpl<BnnsCpuInferenceOpT>>::construct[abi:ne180100]<E5RT::E5OperationImpl<BnnsCpuInferenceOpT>,std::string const&,OpCode &,std::unique_ptr<BnnsCpuInferenceOpT>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::vector<unsigned long long>,std::optional<unsigned long long> &>(uint64_t a1, uint64_t a2, long long *a3, int *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9, uint64_t *a10)
{
  int v10 = *a4;
  uint64_t v12 = *a5;
  if (v12) {
    operator new();
  }
  unsigned int v13 = 0;
  *a5 = 0;
  E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::E5OperationImpl(a2, a3, v10, &v12, a6, a7, a8, a9, *a10, a10[1]);
  uint64_t v11 = v13;
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1924213D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<BnnsCpuInferenceOpT  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

BnnsCpuInferenceOpT *std::__shared_ptr_pointer<BnnsCpuInferenceOpT  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(BnnsCpuInferenceOpT **)(a1 + 24);
  if (result)
  {
    BnnsCpuInferenceOpT::~BnnsCpuInferenceOpT(result);
    JUMPOUT(0x192FF16B0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<BnnsCpuInferenceOpT  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteI19BnnsCpuInferenceOpTEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteI19BnnsCpuInferenceOpTEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteI19BnnsCpuInferenceOpTEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteI19BnnsCpuInferenceOpTEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::E5OperationImpl(uint64_t a1, long long *a2, int a3, void *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v18 = E5RT::E5Operation::E5Operation((void *)a1) + 1;
  E5RT::E5OperationBuilder::E5OperationBuilder(v18);
  *(void *)a1 = &unk_1EE3253D0;
  *(void *)(a1 + 8) = &unk_1EE325460;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v19 = *a2;
    *(void *)(a1 + 32) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v19;
  }
  uint64_t v20 = a4[1];
  *(void *)(a1 + 48) = *a4;
  *(_DWORD *)(a1 + 40) = a3;
  *(void *)(a1 + 56) = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((void *)(a1 + 64), a5);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((void *)(a1 + 168), a6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((void *)(a1 + 272), a7);
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  unsigned int v21 = *(const void **)a8;
  int64_t v22 = *(void *)(a8 + 8) - *(void *)a8;
  if (v22)
  {
    if (v22 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    long long v23 = (char *)operator new(v22);
    *(void *)(a1 + 376) = v23;
    *(void *)(a1 + 384) = v23;
    uint64_t v24 = &v23[8 * (v22 >> 3)];
    *(void *)(a1 + 392) = v24;
    memcpy(v23, v21, v22);
    *(void *)(a1 + 384) = v24;
  }
  *(void *)(a1 + 400) = a9;
  *(void *)(a1 + 408) = a10;
  return a1;
}

void sub_192421664(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void sub_192421680(_Unwind_Exception *a1)
{
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v4);
  if (v1[39] < 0) {
    operator delete(*v3);
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v1);
  _Unwind_Resume(a1);
}

void E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::~E5OperationImpl(a1);

  JUMPOUT(0x192FF16B0);
}

{
  E5RT::AsyncEventImpl *v2;
  void *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE3253D0;
  uint64_t v2 = (E5RT::AsyncEventImpl *)(a1 + 8);
  *(void *)(a1 + 8) = &unk_1EE325460;
  unint64_t v3 = *(void **)(a1 + 376);
  if (v3)
  {
    *(void *)(a1 + 384) = v3;
    operator delete(v3);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 272));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 168));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 64));
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*(char *)(a1 + 39) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (*(char *)(a1 + 39) < 0) {
LABEL_6:
  }
    operator delete(*(void **)(a1 + 16));
LABEL_7:
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);

  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)a1);
}

uint64_t E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::GetOpcode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::GetOpName(uint64_t a1)
{
  return a1 + 16;
}

uint64_t E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::GetInputs(uint64_t a1)
{
  return a1 + 64;
}

uint64_t E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::GetOutputs(uint64_t a1)
{
  return a1 + 168;
}

uint64_t E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::GetInOuts(uint64_t a1)
{
  return a1 + 272;
}

uint64_t E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::GetCompletionEvent(uint64_t a1)
{
  return a1 + 400;
}

uint64_t E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::GetDependentEvents(uint64_t a1)
{
  return a1 + 376;
}

uint64_t E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

std::string *E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 16), a2);
}

void E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 64, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 168, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 272, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(void *)(result + 400) = a2;
  *(unsigned char *)(result + 408) = 1;
  return result;
}

void E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::AddDependentEvent(void *a1, uint64_t a2)
{
  uint64_t v5 = (char *)a1[48];
  unint64_t v4 = a1[49];
  uint64_t v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(void *)uint64_t v5 = a2;
    uint64_t v7 = (uint64_t)(v5 + 8);
    goto LABEL_22;
  }
  unint64_t v8 = (char *)a1[47];
  uint64_t v9 = (v5 - v8) >> 3;
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = v4 - (void)v8;
  if (v11 >> 2 > v10) {
    unint64_t v10 = v11 >> 2;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unsigned int v13 = operator new(8 * v12);
    unsigned int v14 = &v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    *unsigned int v14 = a2;
    uint64_t v7 = (uint64_t)(v14 + 1);
    int64_t v16 = v5 - v8;
    if (v5 == v8) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  unsigned int v13 = 0;
  unsigned int v14 = (void *)(8 * v9);
  unint64_t v15 = 0;
  *(void *)(8 * v9) = a2;
  uint64_t v7 = 8 * v9 + 8;
  int64_t v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    unint64_t v17 = v16 - 8;
    if (v17 < 0x58) {
      goto LABEL_27;
    }
    if ((unint64_t)(v8 - v13) < 0x20) {
      goto LABEL_27;
    }
    uint64_t v18 = (v17 >> 3) + 1;
    uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v6 = &v5[-v19];
    unsigned int v14 = (void *)((char *)v14 - v19);
    uint64_t v20 = &v13[8 * v9 - 16];
    unsigned int v21 = v5 - 16;
    uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *(_OWORD *)v21;
      *(v20 - E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = *((_OWORD *)v21 - 1);
      _OWORD *v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        uint64_t v24 = *((void *)v6 - 1);
        v6 -= 8;
        *--unsigned int v14 = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  a1[47] = v14;
  a1[48] = v7;
  a1[49] = v15;
  if (v8) {
    operator delete(v8);
  }
LABEL_22:
  a1[48] = v7;
}

void non-virtual thunk to'E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::~E5OperationImpl(uint64_t a1)
{
}

{
  uint64_t vars8;

  E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::~E5OperationImpl(a1 - 8);

  JUMPOUT(0x192FF16B0);
}

uint64_t non-virtual thunk to'E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

std::string *non-virtual thunk to'E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void non-virtual thunk to'E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 56, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 160, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 264, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::AddDependentEvent(uint64_t a1, uint64_t a2)
{
}

uint64_t non-virtual thunk to'E5RT::E5OperationImpl<BnnsCpuInferenceOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(void *)(result + 392) = a2;
  *(unsigned char *)(result + 400) = 1;
  return result;
}

uint64_t CpuInferenceOp::Verify(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 1E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v13 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v14 = 0;
    if (v4 || v6 - 2 < v13) {
      return v14;
    }
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13) {
    return 0;
  }
  uint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_82;
  }
  uint64_t v21 = v19[2];
  if (v19[2])
  {
    uint64_t v14 = 0;
    uint64_t v22 = &v3[v21];
    BOOL v24 = ((unint64_t)&v3[v21] & 3) == 0 || v4 == 0;
    if (v7 < (unint64_t)v22 || !v24) {
      return v14;
    }
    uint64_t v25 = *(unsigned int *)&v22[v2];
    if ((int)v25 < 1 || v6 - 1 < (unint64_t)&v22[v25]) {
      return 0;
    }
    uint64_t v14 = 0;
    BOOL v26 = (unsigned int *)((char *)a1 + v21 + *(unsigned int *)((char *)a1 + v21));
    uint64_t v27 = (char *)v26 - v2;
    BOOL v28 = (((unint64_t)v26 - v2) & 3) == 0 || v4 == 0;
    BOOL v29 = v28;
    if (v7 < (unint64_t)v27 || !v29) {
      return v14;
    }
    uint64_t v30 = *v26;
    if (v30 > 0x7FFFFFFE) {
      return 0;
    }
    unint64_t v31 = v30 + 4;
    unint64_t v32 = (unint64_t)&v27[v30 + 4];
    BOOL v33 = v6 - 1 >= v32 && v6 > v31;
    BOOL v34 = v33 && v6 - v31 >= (unint64_t)v27;
    if (!v34 || *(unsigned char *)(v2 + v32)) {
      return 0;
    }
  }
  if (v20 < 7 || (uint64_t v35 = v19[3]) == 0)
  {
LABEL_82:
    *((_DWORD *)a2 + 10) = v10;
    return 1;
  }
  uint64_t v14 = 0;
  unint64_t v36 = (unint64_t)&v3[v35];
  BOOL v38 = (v36 & 3) == 0 || v4 == 0;
  if (v7 >= v36 && v38)
  {
    uint64_t v39 = *(unsigned int *)(v2 + v36);
    if ((int)v39 < 1 || v6 - 1 < v36 + v39) {
      return 0;
    }
    uint64_t v14 = 0;
    uint64_t v40 = (unsigned int *)((char *)a1 + v35 + *(unsigned int *)((char *)a1 + v35));
    unsigned int v41 = (char *)v40 - v2;
    BOOL v42 = (((unint64_t)v40 - v2) & 3) == 0 || v4 == 0;
    BOOL v43 = v42;
    if (v7 >= (unint64_t)v41 && v43)
    {
      uint64_t v44 = *v40;
      if (v44 > 0x7FFFFFFE) {
        return 0;
      }
      uint64_t v14 = 0;
      unint64_t v45 = v44 + 4;
      unint64_t v46 = (unint64_t)&v41[v44 + 4];
      if (v6 - 1 < v46 || v6 <= v45 || v6 - v45 < (unint64_t)v41) {
        return v14;
      }
      if (*(unsigned char *)(v2 + v46)) {
        return 0;
      }
      goto LABEL_82;
    }
  }
  return v14;
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<CpuInferenceOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380AF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<CpuInferenceOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380AF0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<E5RT::E5OperationImpl<CpuInferenceOpT>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<E5RT::E5OperationImpl<CpuInferenceOpT>>::construct[abi:ne180100]<E5RT::E5OperationImpl<CpuInferenceOpT>,std::string const&,OpCode &,std::unique_ptr<CpuInferenceOpT>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::vector<unsigned long long>,std::optional<unsigned long long> &>(uint64_t a1, uint64_t a2, long long *a3, int *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9, uint64_t *a10)
{
  int v10 = *a4;
  uint64_t v12 = *a5;
  if (v12) {
    operator new();
  }
  unint64_t v13 = 0;
  *a5 = 0;
  E5RT::E5OperationImpl<CpuInferenceOpT>::E5OperationImpl(a2, a3, v10, &v12, a6, a7, a8, a9, *a10, a10[1]);
  unsigned int v11 = v13;
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_192422244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<CpuInferenceOpT  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<CpuInferenceOpT  *>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    if (*(char *)(v1 + 47) < 0)
    {
      operator delete(*(void **)(v1 + 24));
      if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
        goto LABEL_4;
      }
    }
    else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(*(void **)v1);
LABEL_4:
    JUMPOUT(0x192FF16B0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<CpuInferenceOpT  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteI15CpuInferenceOpTEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteI15CpuInferenceOpTEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteI15CpuInferenceOpTEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteI15CpuInferenceOpTEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t E5RT::E5OperationImpl<CpuInferenceOpT>::E5OperationImpl(uint64_t a1, long long *a2, int a3, void *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v18 = E5RT::E5Operation::E5Operation((void *)a1) + 1;
  E5RT::E5OperationBuilder::E5OperationBuilder(v18);
  *(void *)a1 = &unk_1EE325030;
  *(void *)(a1 + 8) = &unk_1EE3250C0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v19 = *a2;
    *(void *)(a1 + 32) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v19;
  }
  uint64_t v20 = a4[1];
  *(void *)(a1 + 48) = *a4;
  *(_DWORD *)(a1 + 40) = a3;
  *(void *)(a1 + 56) = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((void *)(a1 + 64), a5);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((void *)(a1 + 168), a6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((void *)(a1 + 272), a7);
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  uint64_t v21 = *(const void **)a8;
  int64_t v22 = *(void *)(a8 + 8) - *(void *)a8;
  if (v22)
  {
    if (v22 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    long long v23 = (char *)operator new(v22);
    *(void *)(a1 + 376) = v23;
    *(void *)(a1 + 384) = v23;
    BOOL v24 = &v23[8 * (v22 >> 3)];
    *(void *)(a1 + 392) = v24;
    memcpy(v23, v21, v22);
    *(void *)(a1 + 384) = v24;
  }
  *(void *)(a1 + 400) = a9;
  *(void *)(a1 + 408) = a10;
  return a1;
}

void sub_192422508(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void sub_192422524(_Unwind_Exception *a1)
{
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v4);
  if (v1[39] < 0) {
    operator delete(*v3);
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v1);
  _Unwind_Resume(a1);
}

void E5RT::E5OperationImpl<CpuInferenceOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::E5OperationImpl<CpuInferenceOpT>::~E5OperationImpl(a1);

  JUMPOUT(0x192FF16B0);
}

{
  E5RT::AsyncEventImpl *v2;
  void *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE325030;
  uint64_t v2 = (E5RT::AsyncEventImpl *)(a1 + 8);
  *(void *)(a1 + 8) = &unk_1EE3250C0;
  unint64_t v3 = *(void **)(a1 + 376);
  if (v3)
  {
    *(void *)(a1 + 384) = v3;
    operator delete(v3);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 272));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 168));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 64));
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*(char *)(a1 + 39) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (*(char *)(a1 + 39) < 0) {
LABEL_6:
  }
    operator delete(*(void **)(a1 + 16));
LABEL_7:
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);

  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)a1);
}

uint64_t E5RT::E5OperationImpl<CpuInferenceOpT>::GetOpcode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t E5RT::E5OperationImpl<CpuInferenceOpT>::GetOpName(uint64_t a1)
{
  return a1 + 16;
}

uint64_t E5RT::E5OperationImpl<CpuInferenceOpT>::GetInputs(uint64_t a1)
{
  return a1 + 64;
}

uint64_t E5RT::E5OperationImpl<CpuInferenceOpT>::GetOutputs(uint64_t a1)
{
  return a1 + 168;
}

uint64_t E5RT::E5OperationImpl<CpuInferenceOpT>::GetInOuts(uint64_t a1)
{
  return a1 + 272;
}

uint64_t E5RT::E5OperationImpl<CpuInferenceOpT>::GetCompletionEvent(uint64_t a1)
{
  return a1 + 400;
}

uint64_t E5RT::E5OperationImpl<CpuInferenceOpT>::GetDependentEvents(uint64_t a1)
{
  return a1 + 376;
}

uint64_t E5RT::E5OperationImpl<CpuInferenceOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

std::string *E5RT::E5OperationImpl<CpuInferenceOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 16), a2);
}

void E5RT::E5OperationImpl<CpuInferenceOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 64, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void E5RT::E5OperationImpl<CpuInferenceOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 168, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void E5RT::E5OperationImpl<CpuInferenceOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 272, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t E5RT::E5OperationImpl<CpuInferenceOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(void *)(result + 400) = a2;
  *(unsigned char *)(result + 408) = 1;
  return result;
}

void E5RT::E5OperationImpl<CpuInferenceOpT>::AddDependentEvent(void *a1, uint64_t a2)
{
  uint64_t v5 = (char *)a1[48];
  unint64_t v4 = a1[49];
  uint64_t v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(void *)uint64_t v5 = a2;
    uint64_t v7 = (uint64_t)(v5 + 8);
    goto LABEL_22;
  }
  BOOL v8 = (char *)a1[47];
  uint64_t v9 = (v5 - v8) >> 3;
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = v4 - (void)v8;
  if (v11 >> 2 > v10) {
    unint64_t v10 = v11 >> 2;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v13 = operator new(8 * v12);
    uint64_t v14 = &v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    *uint64_t v14 = a2;
    uint64_t v7 = (uint64_t)(v14 + 1);
    int64_t v16 = v5 - v8;
    if (v5 == v8) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  unint64_t v13 = 0;
  uint64_t v14 = (void *)(8 * v9);
  unint64_t v15 = 0;
  *(void *)(8 * v9) = a2;
  uint64_t v7 = 8 * v9 + 8;
  int64_t v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    unint64_t v17 = v16 - 8;
    if (v17 < 0x58) {
      goto LABEL_27;
    }
    if ((unint64_t)(v8 - v13) < 0x20) {
      goto LABEL_27;
    }
    uint64_t v18 = (v17 >> 3) + 1;
    uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v6 = &v5[-v19];
    uint64_t v14 = (void *)((char *)v14 - v19);
    uint64_t v20 = &v13[8 * v9 - 16];
    uint64_t v21 = v5 - 16;
    uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *(_OWORD *)v21;
      *(v20 - E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = *((_OWORD *)v21 - 1);
      _OWORD *v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        uint64_t v24 = *((void *)v6 - 1);
        v6 -= 8;
        *--uint64_t v14 = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  a1[47] = v14;
  a1[48] = v7;
  a1[49] = v15;
  if (v8) {
    operator delete(v8);
  }
LABEL_22:
  a1[48] = v7;
}

void non-virtual thunk to'E5RT::E5OperationImpl<CpuInferenceOpT>::~E5OperationImpl(uint64_t a1)
{
}

{
  uint64_t vars8;

  E5RT::E5OperationImpl<CpuInferenceOpT>::~E5OperationImpl(a1 - 8);

  JUMPOUT(0x192FF16B0);
}

uint64_t non-virtual thunk to'E5RT::E5OperationImpl<CpuInferenceOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

std::string *non-virtual thunk to'E5RT::E5OperationImpl<CpuInferenceOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void non-virtual thunk to'E5RT::E5OperationImpl<CpuInferenceOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 56, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<CpuInferenceOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 160, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<CpuInferenceOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 264, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<CpuInferenceOpT>::AddDependentEvent(uint64_t a1, uint64_t a2)
{
}

uint64_t non-virtual thunk to'E5RT::E5OperationImpl<CpuInferenceOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(void *)(result + 392) = a2;
  *(unsigned char *)(result + 400) = 1;
  return result;
}

BOOL EirInferenceOp::Verify(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    BOOL result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_95;
  }
  uint64_t v22 = v20[2];
  if (v20[2])
  {
    BOOL result = 0;
    long long v23 = &v3[v22];
    BOOL v25 = ((unint64_t)&v3[v22] & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v23 || !v25) {
      return result;
    }
    uint64_t v26 = *(unsigned int *)&v23[v2];
    if ((int)v26 < 1 || v7 - 1 < (unint64_t)&v23[v26]) {
      return 0;
    }
    BOOL result = 0;
    uint64_t v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    BOOL v28 = (char *)v27 - v2;
    BOOL v29 = (((unint64_t)v27 - v2) & 3) == 0 || v4 == 0;
    BOOL v30 = v29;
    if (v8 < (unint64_t)v28 || !v30) {
      return result;
    }
    uint64_t v31 = *v27;
    if (v31 > 0x7FFFFFFE) {
      return 0;
    }
    unint64_t v32 = v31 + 4;
    unint64_t v33 = (unint64_t)&v28[v31 + 4];
    BOOL v34 = v7 - 1 >= v33 && v7 > v32;
    BOOL v35 = v34 && v7 - v32 >= (unint64_t)v28;
    if (!v35 || *(unsigned char *)(v2 + v33)) {
      return 0;
    }
  }
  if (v21 < 7) {
    goto LABEL_95;
  }
  uint64_t v36 = v20[3];
  if (v20[3])
  {
    BOOL result = 0;
    uint64_t v37 = &v3[v36];
    BOOL v38 = ((unint64_t)&v3[v36] & 3) == 0 || v4 == 0;
    BOOL v39 = v38;
    if (v8 < (unint64_t)v37 || !v39) {
      return result;
    }
  }
  if (v21 < 9) {
    goto LABEL_95;
  }
  uint64_t v40 = v20[4];
  if (!v40) {
    goto LABEL_95;
  }
  BOOL result = 0;
  unint64_t v41 = (unint64_t)&v3[v40];
  BOOL v43 = (v41 & 3) == 0 || v4 == 0;
  if (v8 >= v41 && v43)
  {
    uint64_t v44 = *(unsigned int *)(v2 + v41);
    if ((int)v44 < 1 || v7 - 1 < v41 + v44) {
      return 0;
    }
    BOOL result = 0;
    unint64_t v45 = (unsigned int *)((char *)a1 + v40 + *(unsigned int *)((char *)a1 + v40));
    unint64_t v46 = (char *)v45 - v2;
    BOOL v47 = (((unint64_t)v45 - v2) & 3) == 0 || v4 == 0;
    BOOL v48 = v47;
    if (v8 >= (unint64_t)v46 && v48)
    {
      uint64_t v49 = *v45;
      if (v49 > 0x7FFFFFFE) {
        return 0;
      }
      BOOL result = 0;
      unint64_t v50 = v49 + 4;
      unint64_t v51 = (unint64_t)&v46[v49 + 4];
      if (v7 - 1 < v51 || v7 <= v50 || v7 - v50 < (unint64_t)v46) {
        return result;
      }
      if (*(unsigned char *)(v2 + v51)) {
        return 0;
      }
LABEL_95:
      BOOL result = flatbuffers::Table::VerifyOffset(a1, a2, 0xAu);
      if (result)
      {
        uint64_t v52 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v52 >= 0xBu && (uint64_t v53 = v52[5]) != 0) {
          uint64_t v54 = (unsigned int *)((char *)a1 + v53 + *(unsigned int *)((char *)a1 + v53));
        }
        else {
          uint64_t v54 = 0;
        }
        BOOL result = flatbuffers::Verifier::VerifyVector<flatbuffers::Offset<flatbuffers::String>>(a2, v54);
        if (result)
        {
          --*(_DWORD *)(a2 + 40);
          return 1;
        }
      }
    }
  }
  return result;
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<EirInferenceOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380B60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<EirInferenceOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380B60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<E5RT::E5OperationImpl<EirInferenceOpT>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<E5RT::E5OperationImpl<EirInferenceOpT>>::construct[abi:ne180100]<E5RT::E5OperationImpl<EirInferenceOpT>,std::string const&,OpCode &,std::unique_ptr<EirInferenceOpT>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::vector<unsigned long long>,std::optional<unsigned long long> &>(uint64_t a1, uint64_t a2, long long *a3, int *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9, uint64_t *a10)
{
  int v10 = *a4;
  uint64_t v12 = *a5;
  if (v12) {
    operator new();
  }
  unsigned int v13 = 0;
  *a5 = 0;
  E5RT::E5OperationImpl<EirInferenceOpT>::E5OperationImpl(a2, a3, v10, &v12, a6, a7, a8, a9, *a10, a10[1]);
  uint64_t v11 = v13;
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1924231A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<EirInferenceOpT  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<EirInferenceOpT  *>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    uint64_t v2 = *(void **)(v1 + 56);
    if (v2)
    {
      *(void *)(v1 + 64) = v2;
      operator delete(v2);
    }
    if (*(char *)(v1 + 55) < 0)
    {
      operator delete(*(void **)(v1 + 32));
      if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
        goto LABEL_6;
      }
    }
    else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(*(void **)v1);
LABEL_6:
    JUMPOUT(0x192FF16B0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<EirInferenceOpT  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteI15EirInferenceOpTEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteI15EirInferenceOpTEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteI15EirInferenceOpTEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteI15EirInferenceOpTEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t E5RT::E5OperationImpl<EirInferenceOpT>::E5OperationImpl(uint64_t a1, long long *a2, int a3, void *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v18 = E5RT::E5Operation::E5Operation((void *)a1) + 1;
  E5RT::E5OperationBuilder::E5OperationBuilder(v18);
  *(void *)a1 = &unk_1EE325200;
  *(void *)(a1 + 8) = &unk_1EE325290;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v19 = *a2;
    *(void *)(a1 + 32) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v19;
  }
  uint64_t v20 = a4[1];
  *(void *)(a1 + 48) = *a4;
  *(_DWORD *)(a1 + 40) = a3;
  *(void *)(a1 + 56) = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((void *)(a1 + 64), a5);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((void *)(a1 + 168), a6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((void *)(a1 + 272), a7);
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  unsigned int v21 = *(const void **)a8;
  int64_t v22 = *(void *)(a8 + 8) - *(void *)a8;
  if (v22)
  {
    if (v22 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    long long v23 = (char *)operator new(v22);
    *(void *)(a1 + 376) = v23;
    *(void *)(a1 + 384) = v23;
    uint64_t v24 = &v23[8 * (v22 >> 3)];
    *(void *)(a1 + 392) = v24;
    memcpy(v23, v21, v22);
    *(void *)(a1 + 384) = v24;
  }
  *(void *)(a1 + 400) = a9;
  *(void *)(a1 + 408) = a10;
  return a1;
}

void sub_192423478(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void sub_192423494(_Unwind_Exception *a1)
{
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v4);
  if (v1[39] < 0) {
    operator delete(*v3);
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v1);
  _Unwind_Resume(a1);
}

void E5RT::E5OperationImpl<EirInferenceOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::E5OperationImpl<EirInferenceOpT>::~E5OperationImpl(a1);

  JUMPOUT(0x192FF16B0);
}

{
  E5RT::AsyncEventImpl *v2;
  void *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE325200;
  uint64_t v2 = (E5RT::AsyncEventImpl *)(a1 + 8);
  *(void *)(a1 + 8) = &unk_1EE325290;
  unint64_t v3 = *(void **)(a1 + 376);
  if (v3)
  {
    *(void *)(a1 + 384) = v3;
    operator delete(v3);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 272));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 168));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 64));
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*(char *)(a1 + 39) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (*(char *)(a1 + 39) < 0) {
LABEL_6:
  }
    operator delete(*(void **)(a1 + 16));
LABEL_7:
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);

  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)a1);
}

uint64_t E5RT::E5OperationImpl<EirInferenceOpT>::GetOpcode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t E5RT::E5OperationImpl<EirInferenceOpT>::GetOpName(uint64_t a1)
{
  return a1 + 16;
}

uint64_t E5RT::E5OperationImpl<EirInferenceOpT>::GetInputs(uint64_t a1)
{
  return a1 + 64;
}

uint64_t E5RT::E5OperationImpl<EirInferenceOpT>::GetOutputs(uint64_t a1)
{
  return a1 + 168;
}

uint64_t E5RT::E5OperationImpl<EirInferenceOpT>::GetInOuts(uint64_t a1)
{
  return a1 + 272;
}

uint64_t E5RT::E5OperationImpl<EirInferenceOpT>::GetCompletionEvent(uint64_t a1)
{
  return a1 + 400;
}

uint64_t E5RT::E5OperationImpl<EirInferenceOpT>::GetDependentEvents(uint64_t a1)
{
  return a1 + 376;
}

uint64_t E5RT::E5OperationImpl<EirInferenceOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

std::string *E5RT::E5OperationImpl<EirInferenceOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 16), a2);
}

void E5RT::E5OperationImpl<EirInferenceOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 64, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void E5RT::E5OperationImpl<EirInferenceOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 168, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void E5RT::E5OperationImpl<EirInferenceOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 272, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t E5RT::E5OperationImpl<EirInferenceOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(void *)(result + 400) = a2;
  *(unsigned char *)(result + 408) = 1;
  return result;
}

void E5RT::E5OperationImpl<EirInferenceOpT>::AddDependentEvent(void *a1, uint64_t a2)
{
  uint64_t v5 = (char *)a1[48];
  unint64_t v4 = a1[49];
  uint64_t v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(void *)uint64_t v5 = a2;
    uint64_t v7 = (uint64_t)(v5 + 8);
    goto LABEL_22;
  }
  unint64_t v8 = (char *)a1[47];
  uint64_t v9 = (v5 - v8) >> 3;
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = v4 - (void)v8;
  if (v11 >> 2 > v10) {
    unint64_t v10 = v11 >> 2;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unsigned int v13 = operator new(8 * v12);
    unsigned int v14 = &v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    *unsigned int v14 = a2;
    uint64_t v7 = (uint64_t)(v14 + 1);
    int64_t v16 = v5 - v8;
    if (v5 == v8) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  unsigned int v13 = 0;
  unsigned int v14 = (void *)(8 * v9);
  unint64_t v15 = 0;
  *(void *)(8 * v9) = a2;
  uint64_t v7 = 8 * v9 + 8;
  int64_t v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    unint64_t v17 = v16 - 8;
    if (v17 < 0x58) {
      goto LABEL_27;
    }
    if ((unint64_t)(v8 - v13) < 0x20) {
      goto LABEL_27;
    }
    uint64_t v18 = (v17 >> 3) + 1;
    uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v6 = &v5[-v19];
    unsigned int v14 = (void *)((char *)v14 - v19);
    uint64_t v20 = &v13[8 * v9 - 16];
    unsigned int v21 = v5 - 16;
    uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *(_OWORD *)v21;
      *(v20 - E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = *((_OWORD *)v21 - 1);
      _OWORD *v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        uint64_t v24 = *((void *)v6 - 1);
        v6 -= 8;
        *--unsigned int v14 = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  a1[47] = v14;
  a1[48] = v7;
  a1[49] = v15;
  if (v8) {
    operator delete(v8);
  }
LABEL_22:
  a1[48] = v7;
}

void non-virtual thunk to'E5RT::E5OperationImpl<EirInferenceOpT>::~E5OperationImpl(uint64_t a1)
{
}

{
  uint64_t vars8;

  E5RT::E5OperationImpl<EirInferenceOpT>::~E5OperationImpl(a1 - 8);

  JUMPOUT(0x192FF16B0);
}

uint64_t non-virtual thunk to'E5RT::E5OperationImpl<EirInferenceOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

std::string *non-virtual thunk to'E5RT::E5OperationImpl<EirInferenceOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void non-virtual thunk to'E5RT::E5OperationImpl<EirInferenceOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 56, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<EirInferenceOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 160, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<EirInferenceOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 264, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<EirInferenceOpT>::AddDependentEvent(uint64_t a1, uint64_t a2)
{
}

uint64_t non-virtual thunk to'E5RT::E5OperationImpl<EirInferenceOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(void *)(result + 392) = a2;
  *(unsigned char *)(result + 400) = 1;
  return result;
}

uint64_t CastOp::Verify(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 1E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = v11;
  BOOL v12 = (v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5);
  if (v12) {
    return 0;
  }
  unint64_t v13 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v14 = 0;
    if (v4 || v6 - 2 < v13) {
      return v14;
    }
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13) {
    return 0;
  }
  uint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_61;
  }
  uint64_t v21 = v19[2];
  if (!v19[2]
    || ((uint64_t v14 = 0, v22 = &v3[v21], ((unint64_t)&v3[v21] & 3) != 0) ? (v23 = v4 == 0) : (v23 = 1),
        !v23 ? (int v24 = 0) : (int v24 = 1),
        v7 >= (unint64_t)v22 && v24))
  {
    if (v20 < 7) {
      goto LABEL_61;
    }
    uint64_t v25 = v19[3];
    if (!v25) {
      goto LABEL_61;
    }
    uint64_t v14 = 0;
    unint64_t v26 = (unint64_t)&v3[v25];
    BOOL v27 = (v26 & 3) == 0 || v4 == 0;
    BOOL v28 = v27;
    if (v7 >= v26 && v28)
    {
      uint64_t v29 = *(unsigned int *)(v2 + v26);
      if ((int)v29 < 1 || v6 - 1 < v26 + v29) {
        return 0;
      }
      uint64_t v14 = 0;
      BOOL v30 = (unsigned int *)((char *)a1 + v25 + *(unsigned int *)((char *)a1 + v25));
      uint64_t v31 = (char *)v30 - v2;
      BOOL v32 = (v31 & 3) == 0 || v4 == 0;
      BOOL v33 = v32;
      if (v7 >= (unint64_t)v31 && v33)
      {
        uint64_t v34 = *v30;
        if (v34 > 0xFFFFFFE) {
          return 0;
        }
        uint64_t v14 = 0;
        unint64_t v35 = (8 * v34) | 4;
        BOOL v12 = v6 > v35;
        unint64_t v36 = v6 - v35;
        if (v12 && v36 >= (unint64_t)v31)
        {
LABEL_61:
          *((_DWORD *)a2 + 10) = v10;
          return 1;
        }
      }
    }
  }
  return v14;
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<CastOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380C40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<CastOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380C40;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<E5RT::E5OperationImpl<CastOpT>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<E5RT::E5OperationImpl<CastOpT>>::construct[abi:ne180100]<E5RT::E5OperationImpl<CastOpT>,std::string const&,OpCode &,std::unique_ptr<CastOpT>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::vector<unsigned long long>,std::optional<unsigned long long> &>(uint64_t a1, uint64_t a2, long long *a3, int *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9, uint64_t *a10)
{
  int v10 = *a4;
  uint64_t v12 = *a5;
  if (v12) {
    operator new();
  }
  unint64_t v13 = 0;
  *a5 = 0;
  E5RT::E5OperationImpl<CastOpT>::E5OperationImpl(a2, a3, v10, &v12, a6, a7, a8, a9, *a10, a10[1]);
  unsigned int v11 = v13;
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_192423FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<CastOpT  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<CastOpT  *>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    uint64_t v2 = *(void **)(v1 + 8);
    if (v2)
    {
      *(void *)(v1 + 16) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x192FF16B0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<CastOpT  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteI7CastOpTEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteI7CastOpTEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteI7CastOpTEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteI7CastOpTEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t E5RT::E5OperationImpl<CastOpT>::E5OperationImpl(uint64_t a1, long long *a2, int a3, void *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v18 = E5RT::E5Operation::E5Operation((void *)a1) + 1;
  E5RT::E5OperationBuilder::E5OperationBuilder(v18);
  *(void *)a1 = &unk_1EE3255A0;
  *(void *)(a1 + 8) = &unk_1EE325630;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v19 = *a2;
    *(void *)(a1 + 32) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v19;
  }
  uint64_t v20 = a4[1];
  *(void *)(a1 + 48) = *a4;
  *(_DWORD *)(a1 + 40) = a3;
  *(void *)(a1 + 56) = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((void *)(a1 + 64), a5);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((void *)(a1 + 168), a6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((void *)(a1 + 272), a7);
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  uint64_t v21 = *(const void **)a8;
  int64_t v22 = *(void *)(a8 + 8) - *(void *)a8;
  if (v22)
  {
    if (v22 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    BOOL v23 = (char *)operator new(v22);
    *(void *)(a1 + 376) = v23;
    *(void *)(a1 + 384) = v23;
    int v24 = &v23[8 * (v22 >> 3)];
    *(void *)(a1 + 392) = v24;
    memcpy(v23, v21, v22);
    *(void *)(a1 + 384) = v24;
  }
  *(void *)(a1 + 400) = a9;
  *(void *)(a1 + 408) = a10;
  return a1;
}

void sub_192424270(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void sub_19242428C(_Unwind_Exception *a1)
{
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v4);
  if (v1[39] < 0) {
    operator delete(*v3);
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v1);
  _Unwind_Resume(a1);
}

void E5RT::E5OperationImpl<CastOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::E5OperationImpl<CastOpT>::~E5OperationImpl(a1);

  JUMPOUT(0x192FF16B0);
}

{
  E5RT::AsyncEventImpl *v2;
  void *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE3255A0;
  uint64_t v2 = (E5RT::AsyncEventImpl *)(a1 + 8);
  *(void *)(a1 + 8) = &unk_1EE325630;
  unint64_t v3 = *(void **)(a1 + 376);
  if (v3)
  {
    *(void *)(a1 + 384) = v3;
    operator delete(v3);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 272));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 168));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 64));
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*(char *)(a1 + 39) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (*(char *)(a1 + 39) < 0) {
LABEL_6:
  }
    operator delete(*(void **)(a1 + 16));
LABEL_7:
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);

  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)a1);
}

uint64_t E5RT::E5OperationImpl<CastOpT>::GetOpcode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t E5RT::E5OperationImpl<CastOpT>::GetOpName(uint64_t a1)
{
  return a1 + 16;
}

uint64_t E5RT::E5OperationImpl<CastOpT>::GetInputs(uint64_t a1)
{
  return a1 + 64;
}

uint64_t E5RT::E5OperationImpl<CastOpT>::GetOutputs(uint64_t a1)
{
  return a1 + 168;
}

uint64_t E5RT::E5OperationImpl<CastOpT>::GetInOuts(uint64_t a1)
{
  return a1 + 272;
}

uint64_t E5RT::E5OperationImpl<CastOpT>::GetCompletionEvent(uint64_t a1)
{
  return a1 + 400;
}

uint64_t E5RT::E5OperationImpl<CastOpT>::GetDependentEvents(uint64_t a1)
{
  return a1 + 376;
}

uint64_t E5RT::E5OperationImpl<CastOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

std::string *E5RT::E5OperationImpl<CastOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 16), a2);
}

void E5RT::E5OperationImpl<CastOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 64, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void E5RT::E5OperationImpl<CastOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 168, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void E5RT::E5OperationImpl<CastOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 272, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t E5RT::E5OperationImpl<CastOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(void *)(result + 400) = a2;
  *(unsigned char *)(result + 408) = 1;
  return result;
}

void E5RT::E5OperationImpl<CastOpT>::AddDependentEvent(void *a1, uint64_t a2)
{
  uint64_t v5 = (char *)a1[48];
  unint64_t v4 = a1[49];
  uint64_t v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(void *)uint64_t v5 = a2;
    uint64_t v7 = (uint64_t)(v5 + 8);
    goto LABEL_22;
  }
  BOOL v8 = (char *)a1[47];
  uint64_t v9 = (v5 - v8) >> 3;
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = v4 - (void)v8;
  if (v11 >> 2 > v10) {
    unint64_t v10 = v11 >> 2;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v13 = operator new(8 * v12);
    uint64_t v14 = &v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    *uint64_t v14 = a2;
    uint64_t v7 = (uint64_t)(v14 + 1);
    int64_t v16 = v5 - v8;
    if (v5 == v8) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  unint64_t v13 = 0;
  uint64_t v14 = (void *)(8 * v9);
  unint64_t v15 = 0;
  *(void *)(8 * v9) = a2;
  uint64_t v7 = 8 * v9 + 8;
  int64_t v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    unint64_t v17 = v16 - 8;
    if (v17 < 0x58) {
      goto LABEL_27;
    }
    if ((unint64_t)(v8 - v13) < 0x20) {
      goto LABEL_27;
    }
    uint64_t v18 = (v17 >> 3) + 1;
    uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v6 = &v5[-v19];
    uint64_t v14 = (void *)((char *)v14 - v19);
    uint64_t v20 = &v13[8 * v9 - 16];
    uint64_t v21 = v5 - 16;
    uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *(_OWORD *)v21;
      *(v20 - E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = *((_OWORD *)v21 - 1);
      _OWORD *v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        uint64_t v24 = *((void *)v6 - 1);
        v6 -= 8;
        *--uint64_t v14 = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  a1[47] = v14;
  a1[48] = v7;
  a1[49] = v15;
  if (v8) {
    operator delete(v8);
  }
LABEL_22:
  a1[48] = v7;
}

void non-virtual thunk to'E5RT::E5OperationImpl<CastOpT>::~E5OperationImpl(uint64_t a1)
{
}

{
  uint64_t vars8;

  E5RT::E5OperationImpl<CastOpT>::~E5OperationImpl(a1 - 8);

  JUMPOUT(0x192FF16B0);
}

uint64_t non-virtual thunk to'E5RT::E5OperationImpl<CastOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

std::string *non-virtual thunk to'E5RT::E5OperationImpl<CastOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void non-virtual thunk to'E5RT::E5OperationImpl<CastOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 56, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<CastOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 160, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<CastOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 264, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<CastOpT>::AddDependentEvent(uint64_t a1, uint64_t a2)
{
}

uint64_t non-virtual thunk to'E5RT::E5OperationImpl<CastOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(void *)(result + 392) = a2;
  *(unsigned char *)(result + 400) = 1;
  return result;
}

uint64_t QuantOp::Verify(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 1E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = v11;
  BOOL v12 = (v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5);
  if (v12) {
    return 0;
  }
  unint64_t v13 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v14 = 0;
    if (v4 || v6 - 2 < v13) {
      return v14;
    }
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13) {
    return 0;
  }
  uint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_61;
  }
  uint64_t v21 = v19[2];
  if (!v19[2]
    || ((uint64_t v14 = 0, v22 = &v3[v21], ((unint64_t)&v3[v21] & 3) != 0) ? (v23 = v4 == 0) : (v23 = 1),
        !v23 ? (int v24 = 0) : (int v24 = 1),
        v7 >= (unint64_t)v22 && v24))
  {
    if (v20 < 7) {
      goto LABEL_61;
    }
    uint64_t v25 = v19[3];
    if (!v25) {
      goto LABEL_61;
    }
    uint64_t v14 = 0;
    unint64_t v26 = (unint64_t)&v3[v25];
    BOOL v27 = (v26 & 3) == 0 || v4 == 0;
    BOOL v28 = v27;
    if (v7 >= v26 && v28)
    {
      uint64_t v29 = *(unsigned int *)(v2 + v26);
      if ((int)v29 < 1 || v6 - 1 < v26 + v29) {
        return 0;
      }
      uint64_t v14 = 0;
      BOOL v30 = (unsigned int *)((char *)a1 + v25 + *(unsigned int *)((char *)a1 + v25));
      uint64_t v31 = (char *)v30 - v2;
      BOOL v32 = (v31 & 3) == 0 || v4 == 0;
      BOOL v33 = v32;
      if (v7 >= (unint64_t)v31 && v33)
      {
        uint64_t v34 = *v30;
        if (v34 > 0x1FFFFFFE) {
          return 0;
        }
        uint64_t v14 = 0;
        unint64_t v35 = 4 * v34 + 4;
        BOOL v12 = v6 > v35;
        unint64_t v36 = v6 - v35;
        if (v12 && v36 >= (unint64_t)v31)
        {
LABEL_61:
          *((_DWORD *)a2 + 10) = v10;
          return 1;
        }
      }
    }
  }
  return v14;
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<QuantOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380C78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<QuantOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380C78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<E5RT::E5OperationImpl<QuantOpT>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<E5RT::E5OperationImpl<QuantOpT>>::construct[abi:ne180100]<E5RT::E5OperationImpl<QuantOpT>,std::string const&,OpCode &,std::unique_ptr<QuantOpT>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::vector<unsigned long long>,std::optional<unsigned long long> &>(uint64_t a1, uint64_t a2, long long *a3, int *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9, uint64_t *a10)
{
  int v10 = *a4;
  uint64_t v12 = *a5;
  if (v12) {
    operator new();
  }
  unint64_t v13 = 0;
  *a5 = 0;
  E5RT::E5OperationImpl<QuantOpT>::E5OperationImpl(a2, a3, v10, &v12, a6, a7, a8, a9, *a10, a10[1]);
  unsigned int v11 = v13;
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_192424DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<QuantOpT  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<QuantOpT  *>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    uint64_t v2 = *(void **)(v1 + 8);
    if (v2)
    {
      *(void *)(v1 + 16) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x192FF16B0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<QuantOpT  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteI8QuantOpTEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteI8QuantOpTEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteI8QuantOpTEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteI8QuantOpTEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t E5RT::E5OperationImpl<QuantOpT>::E5OperationImpl(uint64_t a1, long long *a2, int a3, void *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v18 = E5RT::E5Operation::E5Operation((void *)a1) + 1;
  E5RT::E5OperationBuilder::E5OperationBuilder(v18);
  *(void *)a1 = &unk_1EE325688;
  *(void *)(a1 + 8) = &unk_1EE325718;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v19 = *a2;
    *(void *)(a1 + 32) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v19;
  }
  uint64_t v20 = a4[1];
  *(void *)(a1 + 48) = *a4;
  *(_DWORD *)(a1 + 40) = a3;
  *(void *)(a1 + 56) = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((void *)(a1 + 64), a5);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((void *)(a1 + 168), a6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((void *)(a1 + 272), a7);
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  uint64_t v21 = *(const void **)a8;
  int64_t v22 = *(void *)(a8 + 8) - *(void *)a8;
  if (v22)
  {
    if (v22 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    BOOL v23 = (char *)operator new(v22);
    *(void *)(a1 + 376) = v23;
    *(void *)(a1 + 384) = v23;
    int v24 = &v23[8 * (v22 >> 3)];
    *(void *)(a1 + 392) = v24;
    memcpy(v23, v21, v22);
    *(void *)(a1 + 384) = v24;
  }
  *(void *)(a1 + 400) = a9;
  *(void *)(a1 + 408) = a10;
  return a1;
}

void sub_192425068(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void sub_192425084(_Unwind_Exception *a1)
{
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v4);
  if (v1[39] < 0) {
    operator delete(*v3);
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v1);
  _Unwind_Resume(a1);
}

void E5RT::E5OperationImpl<QuantOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::E5OperationImpl<QuantOpT>::~E5OperationImpl(a1);

  JUMPOUT(0x192FF16B0);
}

{
  E5RT::AsyncEventImpl *v2;
  void *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE325688;
  uint64_t v2 = (E5RT::AsyncEventImpl *)(a1 + 8);
  *(void *)(a1 + 8) = &unk_1EE325718;
  unint64_t v3 = *(void **)(a1 + 376);
  if (v3)
  {
    *(void *)(a1 + 384) = v3;
    operator delete(v3);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 272));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 168));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 64));
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*(char *)(a1 + 39) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (*(char *)(a1 + 39) < 0) {
LABEL_6:
  }
    operator delete(*(void **)(a1 + 16));
LABEL_7:
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);

  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)a1);
}

uint64_t E5RT::E5OperationImpl<QuantOpT>::GetOpcode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t E5RT::E5OperationImpl<QuantOpT>::GetOpName(uint64_t a1)
{
  return a1 + 16;
}

uint64_t E5RT::E5OperationImpl<QuantOpT>::GetInputs(uint64_t a1)
{
  return a1 + 64;
}

uint64_t E5RT::E5OperationImpl<QuantOpT>::GetOutputs(uint64_t a1)
{
  return a1 + 168;
}

uint64_t E5RT::E5OperationImpl<QuantOpT>::GetInOuts(uint64_t a1)
{
  return a1 + 272;
}

uint64_t E5RT::E5OperationImpl<QuantOpT>::GetCompletionEvent(uint64_t a1)
{
  return a1 + 400;
}

uint64_t E5RT::E5OperationImpl<QuantOpT>::GetDependentEvents(uint64_t a1)
{
  return a1 + 376;
}

uint64_t E5RT::E5OperationImpl<QuantOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

std::string *E5RT::E5OperationImpl<QuantOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 16), a2);
}

void E5RT::E5OperationImpl<QuantOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 64, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void E5RT::E5OperationImpl<QuantOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 168, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void E5RT::E5OperationImpl<QuantOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 272, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t E5RT::E5OperationImpl<QuantOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(void *)(result + 400) = a2;
  *(unsigned char *)(result + 408) = 1;
  return result;
}

void E5RT::E5OperationImpl<QuantOpT>::AddDependentEvent(void *a1, uint64_t a2)
{
  uint64_t v5 = (char *)a1[48];
  unint64_t v4 = a1[49];
  uint64_t v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(void *)uint64_t v5 = a2;
    uint64_t v7 = (uint64_t)(v5 + 8);
    goto LABEL_22;
  }
  BOOL v8 = (char *)a1[47];
  uint64_t v9 = (v5 - v8) >> 3;
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = v4 - (void)v8;
  if (v11 >> 2 > v10) {
    unint64_t v10 = v11 >> 2;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v13 = operator new(8 * v12);
    uint64_t v14 = &v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    *uint64_t v14 = a2;
    uint64_t v7 = (uint64_t)(v14 + 1);
    int64_t v16 = v5 - v8;
    if (v5 == v8) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  unint64_t v13 = 0;
  uint64_t v14 = (void *)(8 * v9);
  unint64_t v15 = 0;
  *(void *)(8 * v9) = a2;
  uint64_t v7 = 8 * v9 + 8;
  int64_t v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    unint64_t v17 = v16 - 8;
    if (v17 < 0x58) {
      goto LABEL_27;
    }
    if ((unint64_t)(v8 - v13) < 0x20) {
      goto LABEL_27;
    }
    uint64_t v18 = (v17 >> 3) + 1;
    uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v6 = &v5[-v19];
    uint64_t v14 = (void *)((char *)v14 - v19);
    uint64_t v20 = &v13[8 * v9 - 16];
    uint64_t v21 = v5 - 16;
    uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *(_OWORD *)v21;
      *(v20 - E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = *((_OWORD *)v21 - 1);
      _OWORD *v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        uint64_t v24 = *((void *)v6 - 1);
        v6 -= 8;
        *--uint64_t v14 = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  a1[47] = v14;
  a1[48] = v7;
  a1[49] = v15;
  if (v8) {
    operator delete(v8);
  }
LABEL_22:
  a1[48] = v7;
}

void non-virtual thunk to'E5RT::E5OperationImpl<QuantOpT>::~E5OperationImpl(uint64_t a1)
{
}

{
  uint64_t vars8;

  E5RT::E5OperationImpl<QuantOpT>::~E5OperationImpl(a1 - 8);

  JUMPOUT(0x192FF16B0);
}

uint64_t non-virtual thunk to'E5RT::E5OperationImpl<QuantOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

std::string *non-virtual thunk to'E5RT::E5OperationImpl<QuantOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void non-virtual thunk to'E5RT::E5OperationImpl<QuantOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 56, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<QuantOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 160, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<QuantOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 264, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<QuantOpT>::AddDependentEvent(uint64_t a1, uint64_t a2)
{
}

uint64_t non-virtual thunk to'E5RT::E5OperationImpl<QuantOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(void *)(result + 392) = a2;
  *(unsigned char *)(result + 400) = 1;
  return result;
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<DequantOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380A48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<DequantOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380A48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<E5RT::E5OperationImpl<DequantOpT>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<E5RT::E5OperationImpl<DequantOpT>>::construct[abi:ne180100]<E5RT::E5OperationImpl<DequantOpT>,std::string const&,OpCode &,std::unique_ptr<DequantOpT>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::vector<unsigned long long>,std::optional<unsigned long long> &>(uint64_t a1, uint64_t a2, long long *a3, int *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9, uint64_t *a10)
{
  int v10 = *a4;
  uint64_t v12 = *a5;
  if (v12) {
    operator new();
  }
  unint64_t v13 = 0;
  *a5 = 0;
  E5RT::E5OperationImpl<DequantOpT>::E5OperationImpl(a2, a3, v10, &v12, a6, a7, a8, a9, *a10, a10[1]);
  uint64_t v11 = v13;
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_192425A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<DequantOpT  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<DequantOpT  *>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    uint64_t v2 = *(void **)(v1 + 8);
    if (v2)
    {
      *(void *)(v1 + 16) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x192FF16B0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<DequantOpT  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteI10DequantOpTEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteI10DequantOpTEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteI10DequantOpTEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteI10DequantOpTEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t E5RT::E5OperationImpl<DequantOpT>::E5OperationImpl(uint64_t a1, long long *a2, int a3, void *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v18 = E5RT::E5Operation::E5Operation((void *)a1) + 1;
  E5RT::E5OperationBuilder::E5OperationBuilder(v18);
  *(void *)a1 = &unk_1EE324D78;
  *(void *)(a1 + 8) = &unk_1EE324E08;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v19 = *a2;
    *(void *)(a1 + 32) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v19;
  }
  uint64_t v20 = a4[1];
  *(void *)(a1 + 48) = *a4;
  *(_DWORD *)(a1 + 40) = a3;
  *(void *)(a1 + 56) = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((void *)(a1 + 64), a5);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((void *)(a1 + 168), a6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((void *)(a1 + 272), a7);
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  uint64_t v21 = *(const void **)a8;
  int64_t v22 = *(void *)(a8 + 8) - *(void *)a8;
  if (v22)
  {
    if (v22 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    long long v23 = (char *)operator new(v22);
    *(void *)(a1 + 376) = v23;
    *(void *)(a1 + 384) = v23;
    uint64_t v24 = &v23[8 * (v22 >> 3)];
    *(void *)(a1 + 392) = v24;
    memcpy(v23, v21, v22);
    *(void *)(a1 + 384) = v24;
  }
  *(void *)(a1 + 400) = a9;
  *(void *)(a1 + 408) = a10;
  return a1;
}

void sub_192425CC0(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void sub_192425CDC(_Unwind_Exception *a1)
{
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v4);
  if (v1[39] < 0) {
    operator delete(*v3);
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v1);
  _Unwind_Resume(a1);
}

void E5RT::E5OperationImpl<DequantOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::E5OperationImpl<DequantOpT>::~E5OperationImpl(a1);

  JUMPOUT(0x192FF16B0);
}

{
  E5RT::AsyncEventImpl *v2;
  void *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE324D78;
  uint64_t v2 = (E5RT::AsyncEventImpl *)(a1 + 8);
  *(void *)(a1 + 8) = &unk_1EE324E08;
  unint64_t v3 = *(void **)(a1 + 376);
  if (v3)
  {
    *(void *)(a1 + 384) = v3;
    operator delete(v3);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 272));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 168));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 64));
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*(char *)(a1 + 39) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (*(char *)(a1 + 39) < 0) {
LABEL_6:
  }
    operator delete(*(void **)(a1 + 16));
LABEL_7:
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);

  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)a1);
}

uint64_t E5RT::E5OperationImpl<DequantOpT>::GetOpcode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t E5RT::E5OperationImpl<DequantOpT>::GetOpName(uint64_t a1)
{
  return a1 + 16;
}

uint64_t E5RT::E5OperationImpl<DequantOpT>::GetInputs(uint64_t a1)
{
  return a1 + 64;
}

uint64_t E5RT::E5OperationImpl<DequantOpT>::GetOutputs(uint64_t a1)
{
  return a1 + 168;
}

uint64_t E5RT::E5OperationImpl<DequantOpT>::GetInOuts(uint64_t a1)
{
  return a1 + 272;
}

uint64_t E5RT::E5OperationImpl<DequantOpT>::GetCompletionEvent(uint64_t a1)
{
  return a1 + 400;
}

uint64_t E5RT::E5OperationImpl<DequantOpT>::GetDependentEvents(uint64_t a1)
{
  return a1 + 376;
}

uint64_t E5RT::E5OperationImpl<DequantOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

std::string *E5RT::E5OperationImpl<DequantOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 16), a2);
}

void E5RT::E5OperationImpl<DequantOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 64, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void E5RT::E5OperationImpl<DequantOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 168, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void E5RT::E5OperationImpl<DequantOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 272, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t E5RT::E5OperationImpl<DequantOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(void *)(result + 400) = a2;
  *(unsigned char *)(result + 408) = 1;
  return result;
}

void E5RT::E5OperationImpl<DequantOpT>::AddDependentEvent(void *a1, uint64_t a2)
{
  uint64_t v5 = (char *)a1[48];
  unint64_t v4 = a1[49];
  uint64_t v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(void *)uint64_t v5 = a2;
    uint64_t v7 = (uint64_t)(v5 + 8);
    goto LABEL_22;
  }
  BOOL v8 = (char *)a1[47];
  uint64_t v9 = (v5 - v8) >> 3;
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = v4 - (void)v8;
  if (v11 >> 2 > v10) {
    unint64_t v10 = v11 >> 2;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v13 = operator new(8 * v12);
    uint64_t v14 = &v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    *uint64_t v14 = a2;
    uint64_t v7 = (uint64_t)(v14 + 1);
    int64_t v16 = v5 - v8;
    if (v5 == v8) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  unint64_t v13 = 0;
  uint64_t v14 = (void *)(8 * v9);
  unint64_t v15 = 0;
  *(void *)(8 * v9) = a2;
  uint64_t v7 = 8 * v9 + 8;
  int64_t v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    unint64_t v17 = v16 - 8;
    if (v17 < 0x58) {
      goto LABEL_27;
    }
    if ((unint64_t)(v8 - v13) < 0x20) {
      goto LABEL_27;
    }
    uint64_t v18 = (v17 >> 3) + 1;
    uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v6 = &v5[-v19];
    uint64_t v14 = (void *)((char *)v14 - v19);
    uint64_t v20 = &v13[8 * v9 - 16];
    uint64_t v21 = v5 - 16;
    uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *(_OWORD *)v21;
      *(v20 - E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = *((_OWORD *)v21 - 1);
      _OWORD *v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        uint64_t v24 = *((void *)v6 - 1);
        v6 -= 8;
        *--uint64_t v14 = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  a1[47] = v14;
  a1[48] = v7;
  a1[49] = v15;
  if (v8) {
    operator delete(v8);
  }
LABEL_22:
  a1[48] = v7;
}

void non-virtual thunk to'E5RT::E5OperationImpl<DequantOpT>::~E5OperationImpl(uint64_t a1)
{
}

{
  uint64_t vars8;

  E5RT::E5OperationImpl<DequantOpT>::~E5OperationImpl(a1 - 8);

  JUMPOUT(0x192FF16B0);
}

uint64_t non-virtual thunk to'E5RT::E5OperationImpl<DequantOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

std::string *non-virtual thunk to'E5RT::E5OperationImpl<DequantOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void non-virtual thunk to'E5RT::E5OperationImpl<DequantOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 56, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<DequantOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 160, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<DequantOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 264, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<DequantOpT>::AddDependentEvent(uint64_t a1, uint64_t a2)
{
}

uint64_t non-virtual thunk to'E5RT::E5OperationImpl<DequantOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(void *)(result + 392) = a2;
  *(unsigned char *)(result + 400) = 1;
  return result;
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<MlcCpuInferenceOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380B98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<MlcCpuInferenceOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380B98;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<E5RT::E5OperationImpl<MlcCpuInferenceOpT>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<E5RT::E5OperationImpl<MlcCpuInferenceOpT>>::construct[abi:ne180100]<E5RT::E5OperationImpl<MlcCpuInferenceOpT>,std::string const&,OpCode &,std::unique_ptr<MlcCpuInferenceOpT>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::vector<unsigned long long>,std::optional<unsigned long long> &>(uint64_t a1, uint64_t a2, long long *a3, int *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9, uint64_t *a10)
{
  int v10 = *a4;
  uint64_t v12 = *a5;
  if (v12) {
    operator new();
  }
  unint64_t v13 = 0;
  *a5 = 0;
  E5RT::E5OperationImpl<MlcCpuInferenceOpT>::E5OperationImpl(a2, a3, v10, &v12, a6, a7, a8, a9, *a10, a10[1]);
  uint64_t v11 = v13;
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_192426670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<MlcCpuInferenceOpT  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<MlcCpuInferenceOpT  *>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    JUMPOUT(0x192FF16B0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MlcCpuInferenceOpT  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteI18MlcCpuInferenceOpTEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteI18MlcCpuInferenceOpTEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteI18MlcCpuInferenceOpTEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteI18MlcCpuInferenceOpTEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t E5RT::E5OperationImpl<MlcCpuInferenceOpT>::E5OperationImpl(uint64_t a1, long long *a2, int a3, void *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v18 = E5RT::E5Operation::E5Operation((void *)a1) + 1;
  E5RT::E5OperationBuilder::E5OperationBuilder(v18);
  *(void *)a1 = &unk_1EE3252E8;
  *(void *)(a1 + 8) = &unk_1EE325378;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v19 = *a2;
    *(void *)(a1 + 32) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v19;
  }
  uint64_t v20 = a4[1];
  *(void *)(a1 + 48) = *a4;
  *(_DWORD *)(a1 + 40) = a3;
  *(void *)(a1 + 56) = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((void *)(a1 + 64), a5);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((void *)(a1 + 168), a6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((void *)(a1 + 272), a7);
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  uint64_t v21 = *(const void **)a8;
  int64_t v22 = *(void *)(a8 + 8) - *(void *)a8;
  if (v22)
  {
    if (v22 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    long long v23 = (char *)operator new(v22);
    *(void *)(a1 + 376) = v23;
    *(void *)(a1 + 384) = v23;
    uint64_t v24 = &v23[8 * (v22 >> 3)];
    *(void *)(a1 + 392) = v24;
    memcpy(v23, v21, v22);
    *(void *)(a1 + 384) = v24;
  }
  *(void *)(a1 + 400) = a9;
  *(void *)(a1 + 408) = a10;
  return a1;
}

void sub_192426918(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void sub_192426934(_Unwind_Exception *a1)
{
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v4);
  if (v1[39] < 0) {
    operator delete(*v3);
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v1);
  _Unwind_Resume(a1);
}

void E5RT::E5OperationImpl<MlcCpuInferenceOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::E5OperationImpl<MlcCpuInferenceOpT>::~E5OperationImpl(a1);

  JUMPOUT(0x192FF16B0);
}

{
  E5RT::AsyncEventImpl *v2;
  void *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE3252E8;
  uint64_t v2 = (E5RT::AsyncEventImpl *)(a1 + 8);
  *(void *)(a1 + 8) = &unk_1EE325378;
  unint64_t v3 = *(void **)(a1 + 376);
  if (v3)
  {
    *(void *)(a1 + 384) = v3;
    operator delete(v3);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 272));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 168));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 64));
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*(char *)(a1 + 39) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (*(char *)(a1 + 39) < 0) {
LABEL_6:
  }
    operator delete(*(void **)(a1 + 16));
LABEL_7:
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);

  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)a1);
}

uint64_t E5RT::E5OperationImpl<MlcCpuInferenceOpT>::GetOpcode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t E5RT::E5OperationImpl<MlcCpuInferenceOpT>::GetOpName(uint64_t a1)
{
  return a1 + 16;
}

uint64_t E5RT::E5OperationImpl<MlcCpuInferenceOpT>::GetInputs(uint64_t a1)
{
  return a1 + 64;
}

uint64_t E5RT::E5OperationImpl<MlcCpuInferenceOpT>::GetOutputs(uint64_t a1)
{
  return a1 + 168;
}

uint64_t E5RT::E5OperationImpl<MlcCpuInferenceOpT>::GetInOuts(uint64_t a1)
{
  return a1 + 272;
}

uint64_t E5RT::E5OperationImpl<MlcCpuInferenceOpT>::GetCompletionEvent(uint64_t a1)
{
  return a1 + 400;
}

uint64_t E5RT::E5OperationImpl<MlcCpuInferenceOpT>::GetDependentEvents(uint64_t a1)
{
  return a1 + 376;
}

uint64_t E5RT::E5OperationImpl<MlcCpuInferenceOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

std::string *E5RT::E5OperationImpl<MlcCpuInferenceOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 16), a2);
}

void E5RT::E5OperationImpl<MlcCpuInferenceOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 64, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void E5RT::E5OperationImpl<MlcCpuInferenceOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 168, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void E5RT::E5OperationImpl<MlcCpuInferenceOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 272, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t E5RT::E5OperationImpl<MlcCpuInferenceOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(void *)(result + 400) = a2;
  *(unsigned char *)(result + 408) = 1;
  return result;
}

void E5RT::E5OperationImpl<MlcCpuInferenceOpT>::AddDependentEvent(void *a1, uint64_t a2)
{
  uint64_t v5 = (char *)a1[48];
  unint64_t v4 = a1[49];
  uint64_t v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(void *)uint64_t v5 = a2;
    uint64_t v7 = (uint64_t)(v5 + 8);
    goto LABEL_22;
  }
  BOOL v8 = (char *)a1[47];
  uint64_t v9 = (v5 - v8) >> 3;
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = v4 - (void)v8;
  if (v11 >> 2 > v10) {
    unint64_t v10 = v11 >> 2;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v13 = operator new(8 * v12);
    uint64_t v14 = &v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    *uint64_t v14 = a2;
    uint64_t v7 = (uint64_t)(v14 + 1);
    int64_t v16 = v5 - v8;
    if (v5 == v8) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  unint64_t v13 = 0;
  uint64_t v14 = (void *)(8 * v9);
  unint64_t v15 = 0;
  *(void *)(8 * v9) = a2;
  uint64_t v7 = 8 * v9 + 8;
  int64_t v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    unint64_t v17 = v16 - 8;
    if (v17 < 0x58) {
      goto LABEL_27;
    }
    if ((unint64_t)(v8 - v13) < 0x20) {
      goto LABEL_27;
    }
    uint64_t v18 = (v17 >> 3) + 1;
    uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v6 = &v5[-v19];
    uint64_t v14 = (void *)((char *)v14 - v19);
    uint64_t v20 = &v13[8 * v9 - 16];
    uint64_t v21 = v5 - 16;
    uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *(_OWORD *)v21;
      *(v20 - E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = *((_OWORD *)v21 - 1);
      _OWORD *v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        uint64_t v24 = *((void *)v6 - 1);
        v6 -= 8;
        *--uint64_t v14 = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  a1[47] = v14;
  a1[48] = v7;
  a1[49] = v15;
  if (v8) {
    operator delete(v8);
  }
LABEL_22:
  a1[48] = v7;
}

void non-virtual thunk to'E5RT::E5OperationImpl<MlcCpuInferenceOpT>::~E5OperationImpl(uint64_t a1)
{
}

{
  uint64_t vars8;

  E5RT::E5OperationImpl<MlcCpuInferenceOpT>::~E5OperationImpl(a1 - 8);

  JUMPOUT(0x192FF16B0);
}

uint64_t non-virtual thunk to'E5RT::E5OperationImpl<MlcCpuInferenceOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

std::string *non-virtual thunk to'E5RT::E5OperationImpl<MlcCpuInferenceOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void non-virtual thunk to'E5RT::E5OperationImpl<MlcCpuInferenceOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 56, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<MlcCpuInferenceOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 160, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<MlcCpuInferenceOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 264, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<MlcCpuInferenceOpT>::AddDependentEvent(uint64_t a1, uint64_t a2)
{
}

uint64_t non-virtual thunk to'E5RT::E5OperationImpl<MlcCpuInferenceOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(void *)(result + 392) = a2;
  *(unsigned char *)(result + 400) = 1;
  return result;
}

uint64_t MpsGraphInferenceOp::Verify(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_92;
  }
  uint64_t v22 = v20[2];
  if (v20[2])
  {
    uint64_t result = 0;
    long long v23 = &v3[v22];
    BOOL v25 = ((unint64_t)&v3[v22] & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v23 || !v25) {
      return result;
    }
    uint64_t v26 = *(unsigned int *)&v23[v2];
    if ((int)v26 < 1 || v7 - 1 < (unint64_t)&v23[v26]) {
      return 0;
    }
    uint64_t result = 0;
    BOOL v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    BOOL v28 = (char *)v27 - v2;
    BOOL v29 = (((unint64_t)v27 - v2) & 3) == 0 || v4 == 0;
    BOOL v30 = v29;
    if (v8 < (unint64_t)v28 || !v30) {
      return result;
    }
    uint64_t v31 = *v27;
    if (v31 > 0x7FFFFFFE) {
      return 0;
    }
    unint64_t v32 = v31 + 4;
    unint64_t v33 = (unint64_t)&v28[v31 + 4];
    BOOL v34 = v7 - 1 >= v33 && v7 > v32;
    BOOL v35 = v34 && v7 - v32 >= (unint64_t)v28;
    if (!v35 || *(unsigned char *)(v2 + v33)) {
      return 0;
    }
  }
  if (v21 < 7) {
    goto LABEL_92;
  }
  uint64_t v36 = v20[3];
  if (v20[3])
  {
    uint64_t result = 0;
    uint64_t v37 = &v3[v36];
    BOOL v39 = ((unint64_t)&v3[v36] & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v37 || !v39) {
      return result;
    }
    uint64_t v40 = *(unsigned int *)&v37[v2];
    if ((int)v40 < 1 || v7 - 1 < (unint64_t)&v37[v40]) {
      return 0;
    }
    uint64_t result = 0;
    unint64_t v41 = (unsigned int *)((char *)a1 + v36 + *(unsigned int *)((char *)a1 + v36));
    BOOL v42 = (char *)v41 - v2;
    BOOL v43 = (((unint64_t)v41 - v2) & 3) == 0 || v4 == 0;
    BOOL v44 = v43;
    if (v8 < (unint64_t)v42 || !v44) {
      return result;
    }
    uint64_t v45 = *v41;
    if (v45 > 0x7FFFFFFE) {
      return 0;
    }
    uint64_t result = 0;
    unint64_t v46 = v45 + 4;
    unint64_t v47 = (unint64_t)&v42[v45 + 4];
    if (v7 - 1 < v47 || v7 <= v46 || v7 - v46 < (unint64_t)v42) {
      return result;
    }
    if (*(unsigned char *)(v2 + v47)) {
      return 0;
    }
  }
  if (v21 < 9)
  {
LABEL_92:
    uint64_t result = flatbuffers::Table::VerifyOffset(a1, a2, 0xCu);
    if (result)
    {
      uint64_t v49 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v49 >= 0xDu && (uint64_t v50 = v49[6]) != 0) {
        unint64_t v51 = (unsigned int *)((char *)a1 + v50 + *(unsigned int *)((char *)a1 + v50));
      }
      else {
        unint64_t v51 = 0;
      }
      uint64_t result = flatbuffers::Verifier::VerifyVector<flatbuffers::Offset<flatbuffers::String>>(a2, v51);
      if (result)
      {
        uint64_t v52 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v52 >= 0xDu && (uint64_t v53 = v52[6]) != 0) {
          uint64_t v54 = (unsigned int *)((char *)a1 + v53 + *(unsigned int *)((char *)a1 + v53));
        }
        else {
          uint64_t v54 = 0;
        }
        uint64_t result = flatbuffers::Verifier::VerifyVectorOfStrings(a2, v54);
        if (result)
        {
          --*(_DWORD *)(a2 + 40);
          return 1;
        }
      }
    }
    return result;
  }
  if (!v20[4]) {
    goto LABEL_91;
  }
  unint64_t v48 = (unint64_t)&v3[v20[4]];
  if ((v48 & 7) != 0 && v4) {
    return 0;
  }
  uint64_t result = 0;
  if (v7 >= 9 && v7 - 8 >= v48)
  {
LABEL_91:
    if (v21 >= 0xB && v20[5] && v7 - 1 < (unint64_t)&v3[v20[5]]) {
      return 0;
    }
    goto LABEL_92;
  }
  return result;
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<MpsGraphInferenceOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380C08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<MpsGraphInferenceOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380C08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<E5RT::E5OperationImpl<MpsGraphInferenceOpT>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<E5RT::E5OperationImpl<MpsGraphInferenceOpT>>::construct[abi:ne180100]<E5RT::E5OperationImpl<MpsGraphInferenceOpT>,std::string const&,OpCode &,std::unique_ptr<MpsGraphInferenceOpT>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::vector<unsigned long long>,std::optional<unsigned long long> &>(uint64_t a1, uint64_t a2, long long *a3, int *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9, uint64_t *a10)
{
  int v10 = *a4;
  uint64_t v12 = *a5;
  if (v12) {
    operator new();
  }
  unsigned int v13 = 0;
  *a5 = 0;
  E5RT::E5OperationImpl<MpsGraphInferenceOpT>::E5OperationImpl(a2, a3, v10, &v12, a6, a7, a8, a9, *a10, a10[1]);
  uint64_t v11 = v13;
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_192427618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<MpsGraphInferenceOpT  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_pointer<MpsGraphInferenceOpT  *>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<MpsGraphInferenceOpT  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteI20MpsGraphInferenceOpTEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteI20MpsGraphInferenceOpTEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteI20MpsGraphInferenceOpTEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteI20MpsGraphInferenceOpTEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t E5RT::E5OperationImpl<MpsGraphInferenceOpT>::E5OperationImpl(uint64_t a1, long long *a2, int a3, void *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v18 = E5RT::E5Operation::E5Operation((void *)a1) + 1;
  E5RT::E5OperationBuilder::E5OperationBuilder(v18);
  *(void *)a1 = &unk_1EE3254B8;
  *(void *)(a1 + 8) = &unk_1EE325548;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v19 = *a2;
    *(void *)(a1 + 32) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v19;
  }
  uint64_t v20 = a4[1];
  *(void *)(a1 + 48) = *a4;
  *(_DWORD *)(a1 + 40) = a3;
  *(void *)(a1 + 56) = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((void *)(a1 + 64), a5);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((void *)(a1 + 168), a6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((void *)(a1 + 272), a7);
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  unsigned int v21 = *(const void **)a8;
  int64_t v22 = *(void *)(a8 + 8) - *(void *)a8;
  if (v22)
  {
    if (v22 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    long long v23 = (char *)operator new(v22);
    *(void *)(a1 + 376) = v23;
    *(void *)(a1 + 384) = v23;
    uint64_t v24 = &v23[8 * (v22 >> 3)];
    *(void *)(a1 + 392) = v24;
    memcpy(v23, v21, v22);
    *(void *)(a1 + 384) = v24;
  }
  *(void *)(a1 + 400) = a9;
  *(void *)(a1 + 408) = a10;
  return a1;
}

void sub_192427864(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void sub_192427880(_Unwind_Exception *a1)
{
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v4);
  if (v1[39] < 0) {
    operator delete(*v3);
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v1);
  _Unwind_Resume(a1);
}

void E5RT::E5OperationImpl<MpsGraphInferenceOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::E5OperationImpl<MpsGraphInferenceOpT>::~E5OperationImpl(a1);

  JUMPOUT(0x192FF16B0);
}

{
  E5RT::AsyncEventImpl *v2;
  void *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE3254B8;
  uint64_t v2 = (E5RT::AsyncEventImpl *)(a1 + 8);
  *(void *)(a1 + 8) = &unk_1EE325548;
  unint64_t v3 = *(void **)(a1 + 376);
  if (v3)
  {
    *(void *)(a1 + 384) = v3;
    operator delete(v3);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 272));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 168));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 64));
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*(char *)(a1 + 39) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (*(char *)(a1 + 39) < 0) {
LABEL_6:
  }
    operator delete(*(void **)(a1 + 16));
LABEL_7:
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);

  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)a1);
}

uint64_t E5RT::E5OperationImpl<MpsGraphInferenceOpT>::GetOpcode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t E5RT::E5OperationImpl<MpsGraphInferenceOpT>::GetOpName(uint64_t a1)
{
  return a1 + 16;
}

uint64_t E5RT::E5OperationImpl<MpsGraphInferenceOpT>::GetInputs(uint64_t a1)
{
  return a1 + 64;
}

uint64_t E5RT::E5OperationImpl<MpsGraphInferenceOpT>::GetOutputs(uint64_t a1)
{
  return a1 + 168;
}

uint64_t E5RT::E5OperationImpl<MpsGraphInferenceOpT>::GetInOuts(uint64_t a1)
{
  return a1 + 272;
}

uint64_t E5RT::E5OperationImpl<MpsGraphInferenceOpT>::GetCompletionEvent(uint64_t a1)
{
  return a1 + 400;
}

uint64_t E5RT::E5OperationImpl<MpsGraphInferenceOpT>::GetDependentEvents(uint64_t a1)
{
  return a1 + 376;
}

uint64_t E5RT::E5OperationImpl<MpsGraphInferenceOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

std::string *E5RT::E5OperationImpl<MpsGraphInferenceOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 16), a2);
}

void E5RT::E5OperationImpl<MpsGraphInferenceOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 64, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void E5RT::E5OperationImpl<MpsGraphInferenceOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 168, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void E5RT::E5OperationImpl<MpsGraphInferenceOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 272, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t E5RT::E5OperationImpl<MpsGraphInferenceOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(void *)(result + 400) = a2;
  *(unsigned char *)(result + 408) = 1;
  return result;
}

void E5RT::E5OperationImpl<MpsGraphInferenceOpT>::AddDependentEvent(void *a1, uint64_t a2)
{
  uint64_t v5 = (char *)a1[48];
  unint64_t v4 = a1[49];
  uint64_t v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(void *)uint64_t v5 = a2;
    uint64_t v7 = (uint64_t)(v5 + 8);
    goto LABEL_22;
  }
  unint64_t v8 = (char *)a1[47];
  uint64_t v9 = (v5 - v8) >> 3;
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = v4 - (void)v8;
  if (v11 >> 2 > v10) {
    unint64_t v10 = v11 >> 2;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unsigned int v13 = operator new(8 * v12);
    unsigned int v14 = &v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    *unsigned int v14 = a2;
    uint64_t v7 = (uint64_t)(v14 + 1);
    int64_t v16 = v5 - v8;
    if (v5 == v8) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  unsigned int v13 = 0;
  unsigned int v14 = (void *)(8 * v9);
  unint64_t v15 = 0;
  *(void *)(8 * v9) = a2;
  uint64_t v7 = 8 * v9 + 8;
  int64_t v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    unint64_t v17 = v16 - 8;
    if (v17 < 0x58) {
      goto LABEL_27;
    }
    if ((unint64_t)(v8 - v13) < 0x20) {
      goto LABEL_27;
    }
    uint64_t v18 = (v17 >> 3) + 1;
    uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v6 = &v5[-v19];
    unsigned int v14 = (void *)((char *)v14 - v19);
    uint64_t v20 = &v13[8 * v9 - 16];
    unsigned int v21 = v5 - 16;
    uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *(_OWORD *)v21;
      *(v20 - E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = *((_OWORD *)v21 - 1);
      _OWORD *v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        uint64_t v24 = *((void *)v6 - 1);
        v6 -= 8;
        *--unsigned int v14 = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  a1[47] = v14;
  a1[48] = v7;
  a1[49] = v15;
  if (v8) {
    operator delete(v8);
  }
LABEL_22:
  a1[48] = v7;
}

void non-virtual thunk to'E5RT::E5OperationImpl<MpsGraphInferenceOpT>::~E5OperationImpl(uint64_t a1)
{
}

{
  uint64_t vars8;

  E5RT::E5OperationImpl<MpsGraphInferenceOpT>::~E5OperationImpl(a1 - 8);

  JUMPOUT(0x192FF16B0);
}

uint64_t non-virtual thunk to'E5RT::E5OperationImpl<MpsGraphInferenceOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

std::string *non-virtual thunk to'E5RT::E5OperationImpl<MpsGraphInferenceOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void non-virtual thunk to'E5RT::E5OperationImpl<MpsGraphInferenceOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 56, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<MpsGraphInferenceOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 160, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<MpsGraphInferenceOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 264, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<MpsGraphInferenceOpT>::AddDependentEvent(uint64_t a1, uint64_t a2)
{
}

uint64_t non-virtual thunk to'E5RT::E5OperationImpl<MpsGraphInferenceOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(void *)(result + 392) = a2;
  *(unsigned char *)(result + 400) = 1;
  return result;
}

uint64_t JitCallOp::Verify(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_96;
  }
  uint64_t v22 = v20[2];
  if (v20[2])
  {
    uint64_t result = 0;
    long long v23 = &v3[v22];
    BOOL v25 = ((unint64_t)&v3[v22] & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v23 || !v25) {
      return result;
    }
    uint64_t v26 = *(unsigned int *)&v23[v2];
    if ((int)v26 < 1 || v7 - 1 < (unint64_t)&v23[v26]) {
      return 0;
    }
    uint64_t result = 0;
    BOOL v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    BOOL v28 = (char *)v27 - v2;
    BOOL v29 = (((unint64_t)v27 - v2) & 3) == 0 || v4 == 0;
    BOOL v30 = v29;
    if (v8 < (unint64_t)v28 || !v30) {
      return result;
    }
    uint64_t v31 = *v27;
    if (v31 > 0x7FFFFFFE) {
      return 0;
    }
    unint64_t v32 = v31 + 4;
    unint64_t v33 = (unint64_t)&v28[v31 + 4];
    BOOL v34 = v7 - 1 >= v33 && v7 > v32;
    BOOL v35 = v34 && v7 - v32 >= (unint64_t)v28;
    if (!v35 || *(unsigned char *)(v2 + v33)) {
      return 0;
    }
  }
  if (v21 < 7) {
    goto LABEL_96;
  }
  uint64_t v36 = v20[3];
  if (!v20[3])
  {
LABEL_83:
    if (v21 >= 9)
    {
      uint64_t v48 = v20[4];
      if (v48)
      {
        uint64_t result = 0;
        unint64_t v49 = (unint64_t)&v3[v48];
        BOOL v51 = (v49 & 3) == 0 || v4 == 0;
        if (v8 < v49 || !v51) {
          return result;
        }
        uint64_t v52 = *(unsigned int *)(v2 + v49);
        if ((int)v52 < 1 || v7 - 1 < v49 + v52) {
          return 0;
        }
        uint64_t v53 = (unsigned int *)((char *)a1 + v48 + *(unsigned int *)((char *)a1 + v48));
        goto LABEL_97;
      }
    }
LABEL_96:
    uint64_t v53 = 0;
LABEL_97:
    uint64_t result = flatbuffers::Verifier::VerifyVector<flatbuffers::Offset<flatbuffers::String>>(a2, v53);
    if (result)
    {
      uint64_t v54 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v54 >= 9u && (uint64_t v55 = v54[4]) != 0) {
        unint64_t v56 = (unsigned int *)((char *)a1 + v55 + *(unsigned int *)((char *)a1 + v55));
      }
      else {
        unint64_t v56 = 0;
      }
      uint64_t result = flatbuffers::Verifier::VerifyVectorOfStrings(a2, v56);
      if (result)
      {
        uint64_t result = flatbuffers::Table::VerifyOffset(a1, a2, 0xAu);
        if (result)
        {
          unint64_t v57 = (unsigned __int16 *)((char *)a1 - *a1);
          if (*v57 >= 0xBu && (uint64_t v58 = v57[5]) != 0) {
            unsigned int v59 = (unsigned int *)((char *)a1 + v58 + *(unsigned int *)((char *)a1 + v58));
          }
          else {
            unsigned int v59 = 0;
          }
          uint64_t result = flatbuffers::Verifier::VerifyVector<flatbuffers::Offset<flatbuffers::String>>(a2, v59);
          if (result)
          {
            unint64_t v60 = (unsigned __int16 *)((char *)a1 - *a1);
            if (*v60 >= 0xBu && (uint64_t v61 = v60[5]) != 0) {
              uint64_t v62 = (unsigned int *)((char *)a1 + v61 + *(unsigned int *)((char *)a1 + v61));
            }
            else {
              uint64_t v62 = 0;
            }
            uint64_t result = flatbuffers::Verifier::VerifyVectorOfStrings(a2, v62);
            if (result)
            {
              --*(_DWORD *)(a2 + 40);
              return 1;
            }
          }
        }
      }
    }
    return result;
  }
  uint64_t result = 0;
  uint64_t v37 = &v3[v36];
  BOOL v39 = ((unint64_t)&v3[v36] & 3) == 0 || v4 == 0;
  if (v8 >= (unint64_t)v37 && v39)
  {
    uint64_t v40 = *(unsigned int *)&v37[v2];
    if ((int)v40 < 1 || v7 - 1 < (unint64_t)&v37[v40]) {
      return 0;
    }
    uint64_t result = 0;
    unint64_t v41 = (unsigned int *)((char *)a1 + v36 + *(unsigned int *)((char *)a1 + v36));
    BOOL v42 = (char *)v41 - v2;
    BOOL v43 = (((unint64_t)v41 - v2) & 3) == 0 || v4 == 0;
    BOOL v44 = v43;
    if (v8 >= (unint64_t)v42 && v44)
    {
      uint64_t v45 = *v41;
      if (v45 > 0x7FFFFFFE) {
        return 0;
      }
      uint64_t result = 0;
      unint64_t v46 = v45 + 4;
      unint64_t v47 = (unint64_t)&v42[v45 + 4];
      if (v7 - 1 < v47 || v7 <= v46 || v7 - v46 < (unint64_t)v42) {
        return result;
      }
      if (*(unsigned char *)(v2 + v47)) {
        return 0;
      }
      goto LABEL_83;
    }
  }
  return result;
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<JitCallOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380A80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<JitCallOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380A80;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<E5RT::E5OperationImpl<JitCallOpT>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<E5RT::E5OperationImpl<JitCallOpT>>::construct[abi:ne180100]<E5RT::E5OperationImpl<JitCallOpT>,std::string const&,OpCode &,std::unique_ptr<JitCallOpT>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::vector<unsigned long long>,std::optional<unsigned long long> &>(uint64_t a1, uint64_t a2, long long *a3, int *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9, uint64_t *a10)
{
  int v10 = *a4;
  uint64_t v12 = *a5;
  if (v12) {
    operator new();
  }
  unsigned int v13 = 0;
  *a5 = 0;
  E5RT::E5OperationImpl<JitCallOpT>::E5OperationImpl(a2, a3, v10, &v12, a6, a7, a8, a9, *a10, a10[1]);
  uint64_t v11 = v13;
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1924285B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<JitCallOpT  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

JitCallOpT *std::__shared_ptr_pointer<JitCallOpT  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(JitCallOpT **)(a1 + 24);
  if (result)
  {
    JitCallOpT::~JitCallOpT(result);
    JUMPOUT(0x192FF16B0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<JitCallOpT  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteI10JitCallOpTEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteI10JitCallOpTEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteI10JitCallOpTEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteI10JitCallOpTEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t E5RT::E5OperationImpl<JitCallOpT>::E5OperationImpl(uint64_t a1, long long *a2, int a3, void *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v18 = E5RT::E5Operation::E5Operation((void *)a1) + 1;
  E5RT::E5OperationBuilder::E5OperationBuilder(v18);
  *(void *)a1 = &unk_1EE324E60;
  *(void *)(a1 + 8) = &unk_1EE324EF0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v19 = *a2;
    *(void *)(a1 + 32) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v19;
  }
  uint64_t v20 = a4[1];
  *(void *)(a1 + 48) = *a4;
  *(_DWORD *)(a1 + 40) = a3;
  *(void *)(a1 + 56) = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((void *)(a1 + 64), a5);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((void *)(a1 + 168), a6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((void *)(a1 + 272), a7);
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  unsigned int v21 = *(const void **)a8;
  int64_t v22 = *(void *)(a8 + 8) - *(void *)a8;
  if (v22)
  {
    if (v22 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    long long v23 = (char *)operator new(v22);
    *(void *)(a1 + 376) = v23;
    *(void *)(a1 + 384) = v23;
    uint64_t v24 = &v23[8 * (v22 >> 3)];
    *(void *)(a1 + 392) = v24;
    memcpy(v23, v21, v22);
    *(void *)(a1 + 384) = v24;
  }
  *(void *)(a1 + 400) = a9;
  *(void *)(a1 + 408) = a10;
  return a1;
}

void sub_192428840(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void sub_19242885C(_Unwind_Exception *a1)
{
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v4);
  if (v1[39] < 0) {
    operator delete(*v3);
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v1);
  _Unwind_Resume(a1);
}

void E5RT::E5OperationImpl<JitCallOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::E5OperationImpl<JitCallOpT>::~E5OperationImpl(a1);

  JUMPOUT(0x192FF16B0);
}

{
  E5RT::AsyncEventImpl *v2;
  void *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE324E60;
  uint64_t v2 = (E5RT::AsyncEventImpl *)(a1 + 8);
  *(void *)(a1 + 8) = &unk_1EE324EF0;
  unint64_t v3 = *(void **)(a1 + 376);
  if (v3)
  {
    *(void *)(a1 + 384) = v3;
    operator delete(v3);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 272));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 168));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 64));
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*(char *)(a1 + 39) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (*(char *)(a1 + 39) < 0) {
LABEL_6:
  }
    operator delete(*(void **)(a1 + 16));
LABEL_7:
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);

  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)a1);
}

uint64_t E5RT::E5OperationImpl<JitCallOpT>::GetOpcode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t E5RT::E5OperationImpl<JitCallOpT>::GetOpName(uint64_t a1)
{
  return a1 + 16;
}

uint64_t E5RT::E5OperationImpl<JitCallOpT>::GetInputs(uint64_t a1)
{
  return a1 + 64;
}

uint64_t E5RT::E5OperationImpl<JitCallOpT>::GetOutputs(uint64_t a1)
{
  return a1 + 168;
}

uint64_t E5RT::E5OperationImpl<JitCallOpT>::GetInOuts(uint64_t a1)
{
  return a1 + 272;
}

uint64_t E5RT::E5OperationImpl<JitCallOpT>::GetCompletionEvent(uint64_t a1)
{
  return a1 + 400;
}

uint64_t E5RT::E5OperationImpl<JitCallOpT>::GetDependentEvents(uint64_t a1)
{
  return a1 + 376;
}

uint64_t E5RT::E5OperationImpl<JitCallOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

std::string *E5RT::E5OperationImpl<JitCallOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 16), a2);
}

void E5RT::E5OperationImpl<JitCallOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 64, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void E5RT::E5OperationImpl<JitCallOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 168, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void E5RT::E5OperationImpl<JitCallOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 272, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t E5RT::E5OperationImpl<JitCallOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(void *)(result + 400) = a2;
  *(unsigned char *)(result + 408) = 1;
  return result;
}

void E5RT::E5OperationImpl<JitCallOpT>::AddDependentEvent(void *a1, uint64_t a2)
{
  uint64_t v5 = (char *)a1[48];
  unint64_t v4 = a1[49];
  uint64_t v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(void *)uint64_t v5 = a2;
    uint64_t v7 = (uint64_t)(v5 + 8);
    goto LABEL_22;
  }
  unint64_t v8 = (char *)a1[47];
  uint64_t v9 = (v5 - v8) >> 3;
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = v4 - (void)v8;
  if (v11 >> 2 > v10) {
    unint64_t v10 = v11 >> 2;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unsigned int v13 = operator new(8 * v12);
    unsigned int v14 = &v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    *unsigned int v14 = a2;
    uint64_t v7 = (uint64_t)(v14 + 1);
    int64_t v16 = v5 - v8;
    if (v5 == v8) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  unsigned int v13 = 0;
  unsigned int v14 = (void *)(8 * v9);
  unint64_t v15 = 0;
  *(void *)(8 * v9) = a2;
  uint64_t v7 = 8 * v9 + 8;
  int64_t v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    unint64_t v17 = v16 - 8;
    if (v17 < 0x58) {
      goto LABEL_27;
    }
    if ((unint64_t)(v8 - v13) < 0x20) {
      goto LABEL_27;
    }
    uint64_t v18 = (v17 >> 3) + 1;
    uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v6 = &v5[-v19];
    unsigned int v14 = (void *)((char *)v14 - v19);
    uint64_t v20 = &v13[8 * v9 - 16];
    unsigned int v21 = v5 - 16;
    uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *(_OWORD *)v21;
      *(v20 - E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = *((_OWORD *)v21 - 1);
      _OWORD *v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        uint64_t v24 = *((void *)v6 - 1);
        v6 -= 8;
        *--unsigned int v14 = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  a1[47] = v14;
  a1[48] = v7;
  a1[49] = v15;
  if (v8) {
    operator delete(v8);
  }
LABEL_22:
  a1[48] = v7;
}

void non-virtual thunk to'E5RT::E5OperationImpl<JitCallOpT>::~E5OperationImpl(uint64_t a1)
{
}

{
  uint64_t vars8;

  E5RT::E5OperationImpl<JitCallOpT>::~E5OperationImpl(a1 - 8);

  JUMPOUT(0x192FF16B0);
}

uint64_t non-virtual thunk to'E5RT::E5OperationImpl<JitCallOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

std::string *non-virtual thunk to'E5RT::E5OperationImpl<JitCallOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void non-virtual thunk to'E5RT::E5OperationImpl<JitCallOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 56, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<JitCallOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 160, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<JitCallOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 264, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<JitCallOpT>::AddDependentEvent(uint64_t a1, uint64_t a2)
{
}

uint64_t non-virtual thunk to'E5RT::E5OperationImpl<JitCallOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(void *)(result + 392) = a2;
  *(unsigned char *)(result + 400) = 1;
  return result;
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<E5MinimalCpuOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380B28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::E5OperationImpl<E5MinimalCpuOpT>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380B28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<E5RT::E5OperationImpl<E5MinimalCpuOpT>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<E5RT::E5OperationImpl<E5MinimalCpuOpT>>::construct[abi:ne180100]<E5RT::E5OperationImpl<E5MinimalCpuOpT>,std::string const&,OpCode &,std::unique_ptr<E5MinimalCpuOpT>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::vector<unsigned long long>,std::optional<unsigned long long> &>(uint64_t a1, uint64_t a2, long long *a3, int *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9, uint64_t *a10)
{
  int v10 = *a4;
  uint64_t v12 = *a5;
  if (v12) {
    operator new();
  }
  unsigned int v13 = 0;
  *a5 = 0;
  E5RT::E5OperationImpl<E5MinimalCpuOpT>::E5OperationImpl(a2, a3, v10, &v12, a6, a7, a8, a9, *a10, a10[1]);
  uint64_t v11 = v13;
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1924291F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<E5MinimalCpuOpT  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<E5MinimalCpuOpT  *>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    JUMPOUT(0x192FF16B0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5MinimalCpuOpT  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteI15E5MinimalCpuOpTEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteI15E5MinimalCpuOpTEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteI15E5MinimalCpuOpTEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteI15E5MinimalCpuOpTEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t E5RT::E5OperationImpl<E5MinimalCpuOpT>::E5OperationImpl(uint64_t a1, long long *a2, int a3, void *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v18 = E5RT::E5Operation::E5Operation((void *)a1) + 1;
  E5RT::E5OperationBuilder::E5OperationBuilder(v18);
  *(void *)a1 = &unk_1EE325118;
  *(void *)(a1 + 8) = &unk_1EE3251A8;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v19 = *a2;
    *(void *)(a1 + 32) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v19;
  }
  uint64_t v20 = a4[1];
  *(void *)(a1 + 48) = *a4;
  *(_DWORD *)(a1 + 40) = a3;
  *(void *)(a1 + 56) = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((void *)(a1 + 64), a5);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((void *)(a1 + 168), a6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((void *)(a1 + 272), a7);
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  unsigned int v21 = *(const void **)a8;
  int64_t v22 = *(void *)(a8 + 8) - *(void *)a8;
  if (v22)
  {
    if (v22 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    long long v23 = (char *)operator new(v22);
    *(void *)(a1 + 376) = v23;
    *(void *)(a1 + 384) = v23;
    uint64_t v24 = &v23[8 * (v22 >> 3)];
    *(void *)(a1 + 392) = v24;
    memcpy(v23, v21, v22);
    *(void *)(a1 + 384) = v24;
  }
  *(void *)(a1 + 400) = a9;
  *(void *)(a1 + 408) = a10;
  return a1;
}

void sub_192429498(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void sub_1924294B4(_Unwind_Exception *a1)
{
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v4);
  if (v1[39] < 0) {
    operator delete(*v3);
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v1);
  _Unwind_Resume(a1);
}

void E5RT::E5OperationImpl<E5MinimalCpuOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::E5OperationImpl<E5MinimalCpuOpT>::~E5OperationImpl(a1);

  JUMPOUT(0x192FF16B0);
}

{
  E5RT::AsyncEventImpl *v2;
  void *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE325118;
  uint64_t v2 = (E5RT::AsyncEventImpl *)(a1 + 8);
  *(void *)(a1 + 8) = &unk_1EE3251A8;
  unint64_t v3 = *(void **)(a1 + 376);
  if (v3)
  {
    *(void *)(a1 + 384) = v3;
    operator delete(v3);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 272));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 168));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 64));
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*(char *)(a1 + 39) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (*(char *)(a1 + 39) < 0) {
LABEL_6:
  }
    operator delete(*(void **)(a1 + 16));
LABEL_7:
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);

  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)a1);
}

uint64_t E5RT::E5OperationImpl<E5MinimalCpuOpT>::GetOpcode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t E5RT::E5OperationImpl<E5MinimalCpuOpT>::GetOpName(uint64_t a1)
{
  return a1 + 16;
}

uint64_t E5RT::E5OperationImpl<E5MinimalCpuOpT>::GetInputs(uint64_t a1)
{
  return a1 + 64;
}

uint64_t E5RT::E5OperationImpl<E5MinimalCpuOpT>::GetOutputs(uint64_t a1)
{
  return a1 + 168;
}

uint64_t E5RT::E5OperationImpl<E5MinimalCpuOpT>::GetInOuts(uint64_t a1)
{
  return a1 + 272;
}

uint64_t E5RT::E5OperationImpl<E5MinimalCpuOpT>::GetCompletionEvent(uint64_t a1)
{
  return a1 + 400;
}

uint64_t E5RT::E5OperationImpl<E5MinimalCpuOpT>::GetDependentEvents(uint64_t a1)
{
  return a1 + 376;
}

uint64_t E5RT::E5OperationImpl<E5MinimalCpuOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

std::string *E5RT::E5OperationImpl<E5MinimalCpuOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 16), a2);
}

void E5RT::E5OperationImpl<E5MinimalCpuOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 64, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void E5RT::E5OperationImpl<E5MinimalCpuOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 168, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void E5RT::E5OperationImpl<E5MinimalCpuOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 272, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t E5RT::E5OperationImpl<E5MinimalCpuOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(void *)(result + 400) = a2;
  *(unsigned char *)(result + 408) = 1;
  return result;
}

void E5RT::E5OperationImpl<E5MinimalCpuOpT>::AddDependentEvent(void *a1, uint64_t a2)
{
  uint64_t v5 = (char *)a1[48];
  unint64_t v4 = a1[49];
  uint64_t v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(void *)uint64_t v5 = a2;
    uint64_t v7 = (uint64_t)(v5 + 8);
    goto LABEL_22;
  }
  unint64_t v8 = (char *)a1[47];
  uint64_t v9 = (v5 - v8) >> 3;
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = v4 - (void)v8;
  if (v11 >> 2 > v10) {
    unint64_t v10 = v11 >> 2;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unsigned int v13 = operator new(8 * v12);
    unsigned int v14 = &v13[8 * v9];
    unint64_t v15 = &v13[8 * v12];
    *unsigned int v14 = a2;
    uint64_t v7 = (uint64_t)(v14 + 1);
    int64_t v16 = v5 - v8;
    if (v5 == v8) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  unsigned int v13 = 0;
  unsigned int v14 = (void *)(8 * v9);
  unint64_t v15 = 0;
  *(void *)(8 * v9) = a2;
  uint64_t v7 = 8 * v9 + 8;
  int64_t v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    unint64_t v17 = v16 - 8;
    if (v17 < 0x58) {
      goto LABEL_27;
    }
    if ((unint64_t)(v8 - v13) < 0x20) {
      goto LABEL_27;
    }
    uint64_t v18 = (v17 >> 3) + 1;
    uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v6 = &v5[-v19];
    unsigned int v14 = (void *)((char *)v14 - v19);
    uint64_t v20 = &v13[8 * v9 - 16];
    unsigned int v21 = v5 - 16;
    uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *(_OWORD *)v21;
      *(v20 - E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = *((_OWORD *)v21 - 1);
      _OWORD *v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        uint64_t v24 = *((void *)v6 - 1);
        v6 -= 8;
        *--unsigned int v14 = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  a1[47] = v14;
  a1[48] = v7;
  a1[49] = v15;
  if (v8) {
    operator delete(v8);
  }
LABEL_22:
  a1[48] = v7;
}

void non-virtual thunk to'E5RT::E5OperationImpl<E5MinimalCpuOpT>::~E5OperationImpl(uint64_t a1)
{
}

{
  uint64_t vars8;

  E5RT::E5OperationImpl<E5MinimalCpuOpT>::~E5OperationImpl(a1 - 8);

  JUMPOUT(0x192FF16B0);
}

uint64_t non-virtual thunk to'E5RT::E5OperationImpl<E5MinimalCpuOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

std::string *non-virtual thunk to'E5RT::E5OperationImpl<E5MinimalCpuOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void non-virtual thunk to'E5RT::E5OperationImpl<E5MinimalCpuOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 56, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<E5MinimalCpuOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 160, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<E5MinimalCpuOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 264, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<E5MinimalCpuOpT>::AddDependentEvent(uint64_t a1, uint64_t a2)
{
}

uint64_t non-virtual thunk to'E5RT::E5OperationImpl<E5MinimalCpuOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(void *)(result + 392) = a2;
  *(unsigned char *)(result + 400) = 1;
  return result;
}

void std::__function::__func<std::unique_ptr<E5RT_FB::OperandDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::OperandDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::OperandDescT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::~__func()
{
}

void *std::__function::__func<std::unique_ptr<E5RT_FB::OperandDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::OperandDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::OperandDescT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE377C58;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<E5RT_FB::OperandDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::OperandDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::OperandDescT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE377C58;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<E5RT_FB::OperandDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::OperandDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::OperandDescT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "PFNSt3__110unique_ptrIN7E5RT_FB12OperandDescTENS_14default_deleteIS2_EEEEPKvPKNS_8functionIFvPPvyEEEE") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"PFNSt3__110unique_ptrIN7E5RT_FB12OperandDescTENS_14default_deleteIS2_EEEEPKvPKNS_8functionIFvPPvyEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "PFNSt3__110unique_ptrIN7E5RT_FB12OperandDescTENS_14default_deleteIS2_EEEEPKvPKNS_8functionIFvPPvyEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFNSt3__110unique_ptrIN7E5RT_FB12OperandDescTENS_14default_deleteIS2_EEEEPKvPKNS_8functionIFvPPvyEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<std::unique_ptr<E5RT_FB::OperandDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::OperandDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::OperandDescT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::target_type()
{
}

void std::__shared_ptr_emplace<E5RT::E5OperandImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3809A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::E5OperandImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3809A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<E5RT::E5OperandImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_192429E1C()
{
}

void sub_192429E48(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
}

void sub_192429EB0(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 16) && *((char *)__p + 39) < 0) {
    operator delete(__p[2]);
  }
  operator delete(__p);
}

void sub_192429EF0(uint64_t *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = (uint64_t)v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = (uint64_t)v3;
    operator delete(v3);
  }
  uint64_t v4 = *a1;
  *a1 = 0;
  if (v4) {
    MEMORY[0x192FF16B0](v4, 0x1000C404A09149ALL);
  }

  JUMPOUT(0x192FF16B0);
}

const char *E5RT::GetComputeUnitName(unsigned int a1)
{
  if (!a1) {
    return "cpu";
  }
  if (a1 == 2) {
    return "ane";
  }
  if (a1 != 1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "GetComputeUnitName");
    std::to_string(&v6, a1);
    uint64_t v4 = std::string::insert(&v6, 0, "Invalid compute unit identifier: ");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v8 = v4->__r_.__value_.__r.__words[2];
    long long v7 = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    E5RT::Status::Status(v9, 1, &v7);
    E5RT::E5RTError::E5RTError(exception, v10, v9);
  }
  return "gpu";
}

void sub_19242A0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  E5RT::Status::~Status((E5RT::Status *)&a23);
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if (*(char *)(v25 - 33) < 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if (*(char *)(v25 - 33) < 0)
  {
LABEL_4:
    operator delete(*(void **)(v25 - 56));
    if (v24)
    {
LABEL_10:
      __cxa_free_exception(v23);
      _Unwind_Resume(a1);
    }
LABEL_9:
    _Unwind_Resume(a1);
  }
LABEL_8:
  if (v24) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

BOOL Espresso::AOT::Utils::DoesPlatformHaveANE(uint64_t a1)
{
  return ((unint64_t)(a1 - 32784) > 5 || ((1 << (a1 - 16)) & 0x27) == 0)
      && a1 != 0
      && a1 != 28672;
}

uint64_t Espresso::AOT::Utils::HasMPSGraphAvailable(uint64_t a1)
{
  uint64_t result = 0;
  if (a1 <= 32773)
  {
    if (a1 && a1 != 28672) {
      return 1;
    }
  }
  else if (((unint64_t)(a1 - 32774) > 0xF || ((1 << (a1 - 6)) & 0x8C01) == 0) {
         && a1 != 33537
  }
         && a1 != 33552)
  {
    return 1;
  }
  return result;
}

void Espresso::AOT::Utils::GetSupportedPlatformsStr(Espresso::AOT::Utils *this)
{
  char v8 = 3;
  LODWORD(v7) = 2128928;
  uint64_t v1 = E5Common::E5PlatformManager::Instance(this);
  (*(void (**)(void **__return_ptr))(*(void *)v1 + 72))(&__p);
  E5Common::StringUtils::Join((uint64_t)&v7, (uint64_t *)&__p);
  uint64_t v2 = (void **)__p;
  if (__p)
  {
    unint64_t v3 = v6;
    uint64_t v4 = __p;
    if (v6 != __p)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 3;
      }
      while (v3 != v2);
      uint64_t v4 = __p;
    }
    std::string v6 = v2;
    operator delete(v4);
  }
  if (v8 < 0) {
    operator delete(v7);
  }
}

void sub_19242A324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::AOT::Utils::GetSupportedPlatformFamiliesStr(Espresso::AOT::Utils *this)
{
  char v8 = 3;
  LODWORD(v7) = 2128928;
  uint64_t v1 = E5Common::E5PlatformManager::Instance(this);
  (*(void (**)(void **__return_ptr))(*(void *)v1 + 80))(&__p);
  E5Common::StringUtils::Join((uint64_t)&v7, (uint64_t *)&__p);
  uint64_t v2 = (void **)__p;
  if (__p)
  {
    unint64_t v3 = v6;
    uint64_t v4 = __p;
    if (v6 != __p)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 3;
      }
      while (v3 != v2);
      uint64_t v4 = __p;
    }
    std::string v6 = v2;
    operator delete(v4);
  }
  if (v8 < 0) {
    operator delete(v7);
  }
}

void sub_19242A428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void E5RT::E5OperandBuilder::Create(E5RT::E5OperandBuilder *this)
{
}

void sub_19242A4A4(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x10F3C40D85C1E88);
  _Unwind_Resume(a1);
}

void *E5RT::E5OperandBuilder::Finish@<X0>(const void **a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = *a1;
  *a1 = 0;
  if (!v3
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "Finish");
    std::string::basic_string[abi:ne180100]<0>(v7, "Invalid builder object in Finish call for E5Operand");
    E5RT::Status::Status(v8, 2, v7);
    E5RT::E5RTError::E5RTError(exception, v9, v8);
  }
  *a2 = result;
  return result;
}

void sub_19242A5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

E5RT::E5OperandImpl *E5RT::E5OperandImpl::E5OperandImpl(E5RT::E5OperandImpl *this)
{
  uint64_t v2 = E5RT::E5Operand::E5Operand(this);
  E5RT::E5OperandBuilder::E5OperandBuilder(v2 + 1);
  *(void *)this = &unk_1EE324848;
  *((void *)this + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = &unk_1EE3248C0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_DWORD *)this + 26) = 1065353216;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  return this;
}

void sub_19242A6C4(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void E5RT::E5OperandImpl::~E5OperandImpl(E5RT::E5OperandImpl *this)
{
  *(void *)this = &unk_1EE324848;
  uint64_t v2 = (E5RT::E5OperandImpl *)((char *)this + 8);
  *((void *)this + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = &unk_1EE3248C0;
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (void **)*((void *)this + 11);
    if (!v4) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v4 = (void **)*((void *)this + 11);
    if (!v4) {
      goto LABEL_6;
    }
  }
  do
  {
    long long v7 = (void **)*v4;
    if (*((char *)v4 + 39) < 0) {
      operator delete(v4[2]);
    }
    operator delete(v4);
    uint64_t v4 = v7;
  }
  while (v7);
LABEL_6:
  long long v5 = (void *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v5) {
    operator delete(v5);
  }
  std::string v6 = (std::__shared_weak_count *)*((void *)this + 8);
  if (!v6 || atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*((char *)this + 39) & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (*((char *)this + 39) < 0) {
LABEL_11:
  }
    operator delete(*((void **)this + 2));
LABEL_12:
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);

  E5RT::AsyncEventImpl::~AsyncEventImpl(this);
}

{
  uint64_t vars8;

  E5RT::E5OperandImpl::~E5OperandImpl(this);

  JUMPOUT(0x192FF16B0);
}

void non-virtual thunk to'E5RT::E5OperandImpl::~E5OperandImpl(E5RT::E5OperandImpl *this)
{
}

{
  uint64_t vars8;

  E5RT::E5OperandImpl::~E5OperandImpl((E5RT::E5OperandImpl *)((char *)this - 8));

  JUMPOUT(0x192FF16B0);
}

uint64_t E5RT::E5OperandImpl::GetOperandName(E5RT::E5OperandImpl *this)
{
  return (uint64_t)this + 16;
}

uint64_t E5RT::E5OperandImpl::GetAllocationType(E5RT::E5OperandImpl *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t E5RT::E5OperandImpl::GetAddr(E5RT::E5OperandImpl *this)
{
  if (*((_DWORD *)this + 10) == 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "GetAddr");
    std::string::basic_string[abi:ne180100]<0>(v3, "Dynamic allocation, no static allocation info available.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return *((void *)this + 6);
}

void sub_19242A994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::E5OperandImpl::SetOperandDesc(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = 0;
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v2;
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void non-virtual thunk to'E5RT::E5OperandImpl::SetOperandDesc(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = 0;
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = v2;
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

std::string *E5RT::E5OperandImpl::SetOperandName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 16), a2);
}

std::string *non-virtual thunk to'E5RT::E5OperandImpl::SetOperandName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

uint64_t E5RT::E5OperandImpl::SetAllocationType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

uint64_t non-virtual thunk to'E5RT::E5OperandImpl::SetAllocationType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

uint64_t E5RT::E5OperandImpl::SetAddr(uint64_t this, uint64_t a2)
{
  if (*(_DWORD *)(this + 40) == 2)
  {
    *(void *)(this + 48) = 0;
  }
  else
  {
    if ((a2 & 0x3FFF) != 0)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v5, "SetAddr");
      std::string::basic_string[abi:ne180100]<0>(v3, "Allocation offsets should always be 16KB aligned.");
      E5RT::Status::Status(v4, 1, v3);
      E5RT::E5RTError::E5RTError(exception, v5, v4);
    }
    *(void *)(this + 48) = a2;
  }
  return this;
}

void sub_19242AC10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t non-virtual thunk to'E5RT::E5OperandImpl::SetAddr(E5RT::E5OperandImpl *this, uint64_t a2)
{
  return E5RT::E5OperandImpl::SetAddr((uint64_t)this - 8, a2);
}

uint64_t *E5RT::E5OperandImpl::AddAlias(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "AddAlias");
    std::string::basic_string[abi:ne180100]<0>(v7, "Alias cannot be an empty string.");
    E5RT::Status::Status(v8, 1, v7);
    E5RT::E5RTError::E5RTError(exception, v9, v8);
  }
  uint64_t result = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1 + 72, a2, a2);
  if ((v4 & 1) == 0)
  {
    std::string v6 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "AddAlias");
    std::string::basic_string[abi:ne180100]<0>(v7, "Adding an operand alias more than once is not allowed.");
    E5RT::Status::Status(v8, 1, v7);
    E5RT::E5RTError::E5RTError(v6, v9, v8);
  }
  return result;
}

void sub_19242ADD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if ((v23 & 1) == 0)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t *non-virtual thunk to'E5RT::E5OperandImpl::AddAlias(uint64_t a1, uint64_t a2)
{
  return E5RT::E5OperandImpl::AddAlias(a1 - 8, a2);
}

void *E5RT::E5Operation::GetOperationAttributes<BnnsCpuInferenceOpT>@<X0>(const void *a1@<X0>, void *a2@<X8>)
{
  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "GetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v6, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v7, 2, v6);
    E5RT::E5RTError::E5RTError(exception, v8, v7);
  }
  uint64_t v4 = result[7];
  *a2 = result[6];
  a2[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_19242AF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *E5RT::E5Operation::GetOperationAttributes<CpuInferenceOpT>@<X0>(const void *a1@<X0>, void *a2@<X8>)
{
  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "GetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v6, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v7, 2, v6);
    E5RT::E5RTError::E5RTError(exception, v8, v7);
  }
  uint64_t v4 = result[7];
  *a2 = result[6];
  a2[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_19242B114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *E5RT::E5Operation::GetOperationAttributes<CastOpT>@<X0>(const void *a1@<X0>, void *a2@<X8>)
{
  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "GetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v6, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v7, 2, v6);
    E5RT::E5RTError::E5RTError(exception, v8, v7);
  }
  uint64_t v4 = result[7];
  *a2 = result[6];
  a2[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_19242B290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *E5RT::E5Operation::GetOperationAttributes<QuantOpT>@<X0>(const void *a1@<X0>, void *a2@<X8>)
{
  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "GetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v6, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v7, 2, v6);
    E5RT::E5RTError::E5RTError(exception, v8, v7);
  }
  uint64_t v4 = result[7];
  *a2 = result[6];
  a2[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_19242B40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *E5RT::E5Operation::GetOperationAttributes<DequantOpT>@<X0>(const void *a1@<X0>, void *a2@<X8>)
{
  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "GetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v6, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v7, 2, v6);
    E5RT::E5RTError::E5RTError(exception, v8, v7);
  }
  uint64_t v4 = result[7];
  *a2 = result[6];
  a2[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_19242B588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *E5RT::E5Operation::GetOperationAttributes<MlcCpuInferenceOpT>@<X0>(const void *a1@<X0>, void *a2@<X8>)
{
  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "GetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v6, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v7, 2, v6);
    E5RT::E5RTError::E5RTError(exception, v8, v7);
  }
  uint64_t v4 = result[7];
  *a2 = result[6];
  a2[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_19242B704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *E5RT::E5Operation::GetOperationAttributes<MpsGraphInferenceOpT>@<X0>(const void *a1@<X0>, void *a2@<X8>)
{
  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "GetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v6, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v7, 2, v6);
    E5RT::E5RTError::E5RTError(exception, v8, v7);
  }
  uint64_t v4 = result[7];
  *a2 = result[6];
  a2[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_19242B880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *E5RT::E5Operation::GetOperationAttributes<EirInferenceOpT>@<X0>(const void *a1@<X0>, void *a2@<X8>)
{
  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "GetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v6, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v7, 2, v6);
    E5RT::E5RTError::E5RTError(exception, v8, v7);
  }
  uint64_t v4 = result[7];
  *a2 = result[6];
  a2[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_19242B9FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *E5RT::E5Operation::GetOperationAttributes<JitCallOpT>@<X0>(const void *a1@<X0>, void *a2@<X8>)
{
  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "GetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v6, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v7, 2, v6);
    E5RT::E5RTError::E5RTError(exception, v8, v7);
  }
  uint64_t v4 = result[7];
  *a2 = result[6];
  a2[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_19242BB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *E5RT::E5Operation::GetOperationAttributes<BarrierOpT>@<X0>(const void *a1@<X0>, void *a2@<X8>)
{
  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "GetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v6, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v7, 2, v6);
    E5RT::E5RTError::E5RTError(exception, v8, v7);
  }
  uint64_t v4 = result[7];
  *a2 = result[6];
  a2[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_19242BCF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *E5RT::E5Operation::GetOperationAttributes<E5MinimalCpuOpT>@<X0>(const void *a1@<X0>, void *a2@<X8>)
{
  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "GetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v6, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v7, 2, v6);
    E5RT::E5RTError::E5RTError(exception, v8, v7);
  }
  uint64_t v4 = result[7];
  *a2 = result[6];
  a2[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_19242BE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5Common::StringUtils::IsInteger(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  if (v1) {
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v3, "[+-]?[0-9]+", 0);
  }
  return 0;
}

void sub_19242C078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v20 = *(void **)(v18 - 144);
  if (v20)
  {
    *(void *)(v18 - 136) = v20;
    operator delete(v20);
    unsigned int v21 = __p;
    if (!__p)
    {
LABEL_3:
      std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&a9);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    unsigned int v21 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  a18 = (uint64_t)v21;
  operator delete(v21);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&a9);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  uint64_t v1 = this;
  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (locale && !atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
    this = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  std::locale::~locale(this);
}

std::string *E5Common::StringUtils::SummarizeBNNSErrorMessages@<X0>(const char *a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  size_t v6 = strlen(a1);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v11 = v6 | 7;
    }
    uint64_t v12 = v11 + 1;
    char v8 = operator new(v11 + 1);
    a3->__r_.__value_.__l.__size_ = v7;
    a3->__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    a3->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  }
  else
  {
    *((unsigned char *)&a3->__r_.__value_.__s + 23) = v6;
    char v8 = a3;
    if (!v6)
    {
      a3->__r_.__value_.__s.__data_[0] = 0;
      uint64_t v9 = *a2;
      uint64_t v10 = a2[1];
      if (*a2 == v10) {
        return std::string::append(a3, "(No messages were received from the BNNS graph context log callback. Please file a radar on BasicNeuralNetworkSubroutines with your model and E5 bundle attached.)");
      }
      goto LABEL_10;
    }
  }
  memcpy(v8, a1, v7);
  *((unsigned char *)v8 + v7) = 0;
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (*a2 == v10) {
    return std::string::append(a3, "(No messages were received from the BNNS graph context log callback. Please file a radar on BasicNeuralNetworkSubroutines with your model and E5 bundle attached.)");
  }
  do
  {
LABEL_10:
    int v13 = *(char *)(v9 + 23);
    if (v13 >= 0) {
      unsigned int v14 = (const std::string::value_type *)v9;
    }
    else {
      unsigned int v14 = *(const std::string::value_type **)v9;
    }
    if (v13 >= 0) {
      std::string::size_type v15 = *(unsigned __int8 *)(v9 + 23);
    }
    else {
      std::string::size_type v15 = *(void *)(v9 + 8);
    }
    std::string::append(a3, v14, v15);
    uint64_t result = std::string::append(a3, "\n");
    v9 += 24;
  }
  while (v9 != v10);
  if (*a2 == a2[1]) {
    return std::string::append(a3, "(No messages were received from the BNNS graph context log callback. Please file a radar on BasicNeuralNetworkSubroutines with your model and E5 bundle attached.)");
  }
  return result;
}

void sub_19242C288(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *E5Common::StringUtils::IntsVectorToString<long>@<X0>(std::string *result@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v3 = result->__r_.__value_.__r.__words[0];
  if (result->__r_.__value_.__r.__words[0] == result->__r_.__value_.__l.__size_)
  {
    *((unsigned char *)&a2->__r_.__value_.__s + 23) = 2;
    strcpy((char *)a2, "[]");
  }
  else
  {
    uint64_t v4 = (std::string::__raw *)result;
    unint64_t v5 = 0;
    *((unsigned char *)&a2->__r_.__value_.__s + 23) = 1;
    LOWORD(a2->__r_.__value_.__l.__data_) = 91;
    do
    {
      std::to_string(&v10, *(void *)(v3 + 8 * v5));
      if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v6 = &v10;
      }
      else {
        size_t v6 = (std::string *)v10.__r_.__value_.__r.__words[0];
      }
      if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v10.__r_.__value_.__l.__size_;
      }
      std::string::append(a2, (const std::string::value_type *)v6, size);
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v10.__r_.__value_.__l.__data_);
      }
      uint64_t result = std::string::append(a2, ",");
      ++v5;
      std::string::size_type v3 = v4->__words[0];
    }
    while (v5 < (uint64_t)(v4->__words[1] - v4->__words[0]) >> 3);
    std::string::size_type v8 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if ((v8 & 0x80u) == 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    if ((v8 & 0x80u) != 0) {
      std::string::size_type v8 = a2->__r_.__value_.__l.__size_;
    }
    v9->__r_.__value_.__s.__data_[v8 - 1] = 93;
  }
  return result;
}

void sub_19242C3BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v15 + 23) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v15 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

std::string *E5Common::StringUtils::IntsVectorToString<unsigned long long>@<X0>(std::string *result@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v3 = result->__r_.__value_.__r.__words[0];
  if (result->__r_.__value_.__r.__words[0] == result->__r_.__value_.__l.__size_)
  {
    *((unsigned char *)&a2->__r_.__value_.__s + 23) = 2;
    strcpy((char *)a2, "[]");
  }
  else
  {
    uint64_t v4 = (std::string::__raw *)result;
    unint64_t v5 = 0;
    *((unsigned char *)&a2->__r_.__value_.__s + 23) = 1;
    LOWORD(a2->__r_.__value_.__l.__data_) = 91;
    do
    {
      std::to_string(&v10, *(void *)(v3 + 8 * v5));
      if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v6 = &v10;
      }
      else {
        size_t v6 = (std::string *)v10.__r_.__value_.__r.__words[0];
      }
      if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v10.__r_.__value_.__l.__size_;
      }
      std::string::append(a2, (const std::string::value_type *)v6, size);
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v10.__r_.__value_.__l.__data_);
      }
      uint64_t result = std::string::append(a2, ",");
      ++v5;
      std::string::size_type v3 = v4->__words[0];
    }
    while (v5 < (uint64_t)(v4->__words[1] - v4->__words[0]) >> 3);
    std::string::size_type v8 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if ((v8 & 0x80u) == 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    if ((v8 & 0x80u) != 0) {
      std::string::size_type v8 = a2->__r_.__value_.__l.__size_;
    }
    v9->__r_.__value_.__s.__data_[v8 - 1] = 93;
  }
  return result;
}

void sub_19242C520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v15 + 23) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v15 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](uint64_t a1, const char *a2, int a3)
{
  size_t v6 = (const std::locale *)MEMORY[0x192FF1530]();
  *(void *)(a1 + 8) = std::locale::use_facet(v6, MEMORY[0x1E4FBA258]);
  *(void *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E4FBA280]);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  strlen(a2);
  std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>();
}

void sub_19242C610(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_19242C62C(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>()
{
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FF0EF0](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_19242CB08(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  size_t v6 = a2;
  do
  {
    size_t v7 = v6;
    size_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v6, a3);
  }
  while (v6 != v7);
  if (v7 == a2) {
    operator new();
  }
  if (v7 != a3)
  {
    if (*v7 == 124)
    {
      std::string::size_type v8 = v7 + 1;
      uint64_t v9 = v7 + 1;
      do
      {
        std::string v10 = v9;
        uint64_t v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v9, a3);
      }
      while (v9 != v10);
      if (v10 == v8) {
        operator new();
      }
      operator new();
    }
    return v7;
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  std::string::size_type v3 = (std::basic_regex<char> *)a2;
  if (a2 == a3) {
    return a2;
  }
  if (*a2 == 94) {
    operator new();
  }
  if (a2 != a3)
  {
    while (v3 != (std::basic_regex<char> *)a3)
    {
      size_t v6 = (unsigned __int8 *)v3;
      std::vector<std::string>::pointer end = a1->__end_;
      unsigned int marked_count = a1->__marked_count_;
      uint64_t v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>((uint64_t)a1, v6, a3);
      if (v9 != v6)
      {
        std::string::size_type v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(a1, (std::basic_regex<char> *)v9, (std::basic_regex<char> *)a3, end, marked_count + 1, a1->__marked_count_ + 1);
        if (v3 != (std::basic_regex<char> *)v6) {
          continue;
        }
      }
      if (v6 + 1 == a3 && *v6 == 36) {
        operator new();
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
    }
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  size_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v6 == a2) {
    goto LABEL_12;
  }
  do
  {
    size_t v7 = v6;
    size_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v6, a3);
  }
  while (v6 != v7);
  if (v7 == a2) {
    goto LABEL_12;
  }
  if (v7 == a3) {
    return a3;
  }
  if (LOBYTE(v7->__traits_.__loc_.__locale_) == 124)
  {
    std::string::size_type v8 = (std::basic_regex<char> *)((char *)&v7->__traits_.__loc_.__locale_ + 1);
    uint64_t v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (std::basic_regex<char> *)((char *)&v7->__traits_.__loc_.__locale_ + 1), a3);
    if (v9 != (std::basic_regex<char> *)((char *)&v7->__traits_.__loc_.__locale_ + 1))
    {
      do
      {
        std::string v10 = v9;
        uint64_t v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v9, a3);
      }
      while (v9 != v10);
      if (v10 != v8) {
        operator new();
      }
    }
LABEL_12:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  }
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(std::basic_regex<char> *a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  size_t v6 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v6) {
    size_t v7 = v6;
  }
  else {
    size_t v7 = a3;
  }
  if (v7 == __s) {
    operator new();
  }
  std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, __s, v7);
  if (v7 == a3) {
    std::string::size_type v8 = v7;
  }
  else {
    std::string::size_type v8 = v7 + 1;
  }
  if (v8 != a3)
  {
    uint64_t v9 = (unsigned __int8 *)memchr(v8, 10, a3 - v8);
    if (v9) {
      std::string v10 = v9;
    }
    else {
      std::string v10 = a3;
    }
    if (v10 != v8)
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, v8, v10);
      operator new();
    }
    operator new();
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(uint64_t a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  size_t v6 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v6) {
    size_t v7 = v6;
  }
  else {
    size_t v7 = a3;
  }
  if (v7 == __s) {
    operator new();
  }
  std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, __s, v7);
  if (v7 == a3) {
    std::string::size_type v8 = v7;
  }
  else {
    std::string::size_type v8 = (std::basic_regex<char> *)((char *)&v7->__traits_.__loc_.__locale_ + 1);
  }
  if (v8 != a3)
  {
    uint64_t v9 = (std::basic_regex<char> *)memchr(v8, 10, (char *)a3 - (char *)v8);
    if (v9) {
      std::string v10 = v9;
    }
    else {
      std::string v10 = a3;
    }
    if (v10 != v8)
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, v8, v10);
      operator new();
    }
    operator new();
  }
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FF0EF0](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_19242D59C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::~__end_state()
{
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DBB72ALL) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DBB72ALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DBB72ALL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DBB72ALL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x192FF16B0);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
}

{
  std::__node<char> *first;
  uint64_t vars8;

  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }

  JUMPOUT(0x192FF16B0);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_alternative<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  do
  {
    unint64_t v5 = (std::basic_regex<char> *)a2;
    a2 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, a2, a3);
    if (a2 != (char *)v5) {
      continue;
    }
    std::vector<std::string>::pointer end = a1->__end_;
    unsigned int marked_count = a1->__marked_count_;
    std::string::size_type v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, v5, (std::basic_regex<char> *)a3);
    if (v8 == (unsigned __int8 *)v5) {
      break;
    }
    a2 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, (std::basic_regex<char> *)v8, (std::basic_regex<char> *)a3, end, marked_count + 1, a1->__marked_count_ + 1);
  }
  while (a2 != (char *)v5);
  return v5;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, a2, a3);
  if (result == a2)
  {
    std::vector<std::string>::pointer end = a1->__end_;
    unsigned int marked_count = a1->__marked_count_;
    uint64_t v9 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, (std::basic_regex<char> *)a2);
    uint64_t result = a2;
    if (v9 != (std::basic_regex<char> *)a2)
    {
      size_t v10 = a1->__marked_count_ + 1;
      return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v9, (std::basic_regex<char> *)a3, end, marked_count + 1, v10);
    }
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        int v10 = a2[1];
        if (v10 == 66) {
          operator new();
        }
        if (v10 == 98) {
          operator new();
        }
      }
    }
    else if (v6 == 94)
    {
      operator new();
    }
    return a2;
  }
  if (v6 == 36) {
    operator new();
  }
  BOOL v8 = v6 == 40;
  size_t v7 = a2 + 1;
  BOOL v8 = !v8 || v7 == a3;
  if (v8) {
    return a2;
  }
  BOOL v8 = *v7 == 63;
  uint64_t v11 = a2 + 2;
  if (!v8 || v11 == a3) {
    return a2;
  }
  int v13 = *v11;
  if (v13 == 33)
  {
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v17);
    v17.__flags_ = a1->__flags_;
    unsigned int v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v17, a2 + 3, a3);
    unsigned int marked_count = v17.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(a1, &v17, 1, a1->__marked_count_);
    a1->__marked_count_ += marked_count;
    if (v14 == a3 || *v14 != 41) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    goto LABEL_30;
  }
  if (v13 != 61) {
    return a2;
  }
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v17);
  v17.__flags_ = a1->__flags_;
  unsigned int v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v17, a2 + 3, a3);
  unsigned int v15 = v17.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(a1, &v17, 0, a1->__marked_count_);
  a1->__marked_count_ += v15;
  if (v14 == a3 || *v14 != 41) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
  }
LABEL_30:
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v17.__traits_.__loc_);
  return v14 + 1;
}

void sub_19242DD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_19242DD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_19242DDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_19242DDBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(std::basic_regex<char> *this, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3)
  {
    switch(LOBYTE(a2->__traits_.__loc_.__locale_))
    {
      case '(':
        if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1) == a3) {
          goto LABEL_30;
        }
        if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 2) != a3
          && BYTE1(a2->__traits_.__loc_.__locale_) == 63
          && BYTE2(a2->__traits_.__loc_.__locale_) == 58)
        {
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          size_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, (char *)&a2->__traits_.__loc_.__locale_ + 3, (char *)a3);
          if (v7 == (char *)a3) {
            goto LABEL_30;
          }
          BOOL v8 = v7;
          if (*v7 != 41) {
            goto LABEL_30;
          }
        }
        else
        {
          if ((this->__flags_ & 2) == 0) {
            operator new();
          }
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          int v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, (char *)&a2->__traits_.__loc_.__locale_ + 1, (char *)a3);
          if (v10 == (char *)a3 || (BOOL v8 = v10, *v10 != 41)) {
LABEL_30:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          if ((this->__flags_ & 2) == 0) {
            operator new();
          }
        }
        --*p_open_count;
        uint64_t v3 = (std::basic_regex<char> *)(v8 + 1);
        break;
      case ')':
      case ',':
      case '-':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
      case '<':
      case '=':
      case '>':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
        goto LABEL_20;
      case '*':
      case '+':
      case '?':
        goto LABEL_29;
      case '.':
        operator new();
      case '[':
        return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
      case '\\':
        return std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      default:
        if (LOBYTE(a2->__traits_.__loc_.__locale_) == 123) {
LABEL_29:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
LABEL_20:
        return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
    }
  }
  return (unsigned __int8 *)v3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  if (this == a3) {
    return this;
  }
  int v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 62)
  {
    if (locale_low == 42)
    {
      BOOL v8 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (v6) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v8 == a3;
      }
      if (!v20 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        uint64_t v9 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_std::vector<std::string>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::string>::pointer end = __mexp_end;
        size_t v10 = 0;
        goto LABEL_35;
      }
      __mexp_std::vector<std::string>::pointer begin = __mexp_begin;
      __mexp_std::vector<std::string>::pointer end = __mexp_end;
      size_t v24 = 0;
      goto LABEL_44;
    }
    if (locale_low == 43)
    {
      BOOL v8 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (!v6 && v8 != a3 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        uint64_t v9 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_std::vector<std::string>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::string>::pointer end = __mexp_end;
        size_t v10 = 1;
LABEL_35:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v10, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 0);
        return (std::basic_regex<char> *)v9;
      }
      __mexp_std::vector<std::string>::pointer begin = __mexp_begin;
      __mexp_std::vector<std::string>::pointer end = __mexp_end;
      size_t v24 = 1;
      goto LABEL_44;
    }
    return this;
  }
  if (locale_low == 63)
  {
    unsigned int v21 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    if (v6) {
      BOOL v22 = 1;
    }
    else {
      BOOL v22 = v21 == a3;
    }
    if (v22 || LOBYTE(v21->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 1);
      return v21;
    }
    else
    {
      int v23 = (char *)&this->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v23;
    }
  }
  else
  {
    if (locale_low != 123) {
      return this;
    }
    uint64_t v11 = (char *)&this->__traits_.__loc_.__locale_ + 1;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
      goto LABEL_71;
    }
    int v12 = *v11;
    if ((v12 & 0xF8) != 0x30 && (v12 & 0xFE) != 0x38) {
      goto LABEL_71;
    }
    int v13 = v12 - 48;
    unsigned int v14 = (char *)&this->__traits_.__loc_.__locale_ + 2;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_19:
      unsigned int v14 = (char *)a3;
    }
    else
    {
      while (1)
      {
        int v15 = *v14;
        if ((v15 & 0xF8) != 0x30 && (v15 & 0xFE) != 0x38) {
          break;
        }
        if (v13 >= 214748364) {
          goto LABEL_71;
        }
        int v13 = v15 + 10 * v13 - 48;
        if (++v14 == (char *)a3) {
          goto LABEL_19;
        }
      }
    }
    if (v14 == v11) {
      goto LABEL_71;
    }
    if (v14 == (char *)a3) {
      goto LABEL_72;
    }
    int v16 = *v14;
    if (v16 != 44)
    {
      if (v16 == 125)
      {
        std::basic_regex<char> v17 = (std::basic_regex<char> *)(v14 + 1);
        if (v6 || v17 == a3 || LOBYTE(v17->__traits_.__loc_.__locale_) != 63)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v13, a4, __mexp_begin, __mexp_end, 1);
          return v17;
        }
        else
        {
          uint64_t v18 = (unsigned __int8 *)(v14 + 2);
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v13, a4, __mexp_begin, __mexp_end, 0);
          return (std::basic_regex<char> *)v18;
        }
      }
LABEL_71:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    }
    uint64_t v25 = (std::basic_regex<char> *)(v14 + 1);
    if (v14 + 1 == (char *)a3) {
      goto LABEL_71;
    }
    int v26 = LOBYTE(v25->__traits_.__loc_.__locale_);
    if (v26 == 125)
    {
      BOOL v8 = (std::basic_regex<char> *)(v14 + 2);
      if (!v6 && v8 != a3 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        size_t v10 = v13;
        uint64_t v9 = v14 + 3;
        __mexp_std::vector<std::string>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::string>::pointer end = __mexp_end;
        goto LABEL_35;
      }
      size_t v24 = v13;
      __mexp_std::vector<std::string>::pointer begin = __mexp_begin;
      __mexp_std::vector<std::string>::pointer end = __mexp_end;
LABEL_44:
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v24, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
      return v8;
    }
    if ((v26 & 0xF8) != 0x30 && (v26 & 0xFE) != 0x38) {
      goto LABEL_72;
    }
    int v27 = v26 - 48;
    BOOL v28 = (std::basic_regex<char> *)(v14 + 2);
    if (v28 == a3)
    {
LABEL_60:
      BOOL v28 = a3;
    }
    else
    {
      while (1)
      {
        int v29 = LOBYTE(v28->__traits_.__loc_.__locale_);
        if ((v29 & 0xF8) != 0x30 && (v29 & 0xFE) != 0x38) {
          break;
        }
        if (v27 >= 214748364) {
          goto LABEL_71;
        }
        int v27 = v29 + 10 * v27 - 48;
        BOOL v28 = (std::basic_regex<char> *)((char *)v28 + 1);
        if (v28 == a3) {
          goto LABEL_60;
        }
      }
    }
    if (v28 == v25 || v28 == a3 || LOBYTE(v28->__traits_.__loc_.__locale_) != 125) {
LABEL_72:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    if (v27 < v13) {
      goto LABEL_71;
    }
    BOOL v30 = (std::basic_regex<char> *)((char *)&v28->__traits_.__loc_.__locale_ + 1);
    if (v6 || v30 == a3 || LOBYTE(v30->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v27, a4, __mexp_begin, __mexp_end, 1);
      return v30;
    }
    else
    {
      uint64_t v31 = (char *)&v28->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v27, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v31;
    }
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = (const std::locale *)MEMORY[0x192FF1530]();
  *(void *)(a1 + 8) = std::locale::use_facet(v2, MEMORY[0x1E4FBA258]);
  *(void *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E4FBA280]);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  return a1;
}

void sub_19242E5D4(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FF0EF0](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_19242E6FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 92))
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
LABEL_11:
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 80) = *(void *)(result + 8);
    return result;
  }
  if (*(void *)(a2 + 16) == *(void *)(a2 + 8) && (*(unsigned char *)(a2 + 88) & 1) == 0) {
    goto LABEL_11;
  }
LABEL_12:
  *(_DWORD *)a2 = -993;
  *(void *)(a2 + 80) = 0;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((v3 = *v2, v3 != 13) ? (BOOL v4 = v3 == 10) : (BOOL v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EE37EC80;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EE37EC80;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 8);
  int v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_19;
  }
  BOOL v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 != v3)
  {
    if (v4 == v2)
    {
      int v5 = *(_DWORD *)(a2 + 88);
      if ((v5 & 0x80) == 0)
      {
        if ((v5 & 4) == 0)
        {
          uint64_t v6 = *v2;
          if (v6 == 95) {
            goto LABEL_17;
          }
          goto LABEL_15;
        }
        goto LABEL_19;
      }
    }
    uint64_t v7 = *(v4 - 1);
    uint64_t v8 = *v4;
    if (v7 == 95
      || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0)
    {
      int v9 = 1;
      if (v8 == 95) {
        goto LABEL_24;
      }
    }
    else
    {
      int v9 = 0;
      if (v8 == 95) {
        goto LABEL_24;
      }
    }
    if ((v8 & 0x80) != 0 || (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) == 0)
    {
      if (*(unsigned char *)(result + 40) == (v9 != 0)) {
        goto LABEL_20;
      }
      goto LABEL_27;
    }
LABEL_24:
    if (*(unsigned char *)(result + 40) != (v9 != 1)) {
      goto LABEL_27;
    }
    goto LABEL_20;
  }
  if ((*(unsigned char *)(a2 + 88) & 8) == 0)
  {
    uint64_t v6 = *(v3 - 1);
    if (v6 == 95) {
      goto LABEL_17;
    }
LABEL_15:
    if ((v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
    {
LABEL_17:
      if (*(unsigned char *)(result + 40) != 1) {
        goto LABEL_27;
      }
LABEL_20:
      *(_DWORD *)a2 = -993;
      *(void *)(a2 + 80) = 0;
      return result;
    }
  }
LABEL_19:
  if (!*(unsigned char *)(result + 40)) {
    goto LABEL_20;
  }
LABEL_27:
  uint64_t v10 = *(void *)(result + 8);
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = v10;
  return result;
}

std::locale *std::__lookahead<char,std::regex_traits<char>>::~__lookahead(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EE37EBC0;
  int v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale && !atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
    std::locale::~locale(v2);
    BOOL v4 = a1[1].__locale_;
    if (!v4) {
      return a1;
    }
    goto LABEL_4;
  }
  std::locale::~locale(a1 + 2);
  BOOL v4 = a1[1].__locale_;
  if (v4) {
LABEL_4:
  }
    (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EE37EBC0;
  int v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale && !atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
    std::locale::~locale(v2);
    BOOL v4 = a1[1].__locale_;
    if (!v4)
    {
LABEL_5:
      JUMPOUT(0x192FF16B0);
    }
  }
  else
  {
    std::locale::~locale(a1 + 2);
    BOOL v4 = a1[1].__locale_;
    if (!v4) {
      goto LABEL_5;
    }
  }
  (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
  goto LABEL_5;
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  char v21 = 0;
  memset(&v22, 0, 17);
  char v23 = 0;
  uint64_t v24 = 0;
  memset(&__p, 0, sizeof(__p));
  std::vector<std::csub_match>::size_type v4 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v5 = *(void *)(a2 + 16);
  v18.first = *(const char **)(a2 + 24);
  v18.second = v18.first;
  v18.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v18);
  uint64_t v19 = v5;
  uint64_t v20 = v5;
  char v21 = 0;
  std::vector<std::csub_match>::value_type v22 = v18;
  uint64_t v24 = v5;
  char v23 = 1;
  uint64_t v6 = *(const char **)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v7 = v6 == *(const char **)(a2 + 8);
  }
  else {
    BOOL v7 = 0;
  }
  char v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    std::vector<std::string>::pointer begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(a1 + 8);
  std::vector<std::string>::pointer begin = __p.__begin_;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin) {
      return;
    }
    goto LABEL_14;
  }
  int v11 = 0;
  int v12 = *(_DWORD *)(a1 + 80);
  uint64_t v13 = *(void *)(a2 + 32);
  unint64_t v14 = 1;
  do
  {
    int v15 = &begin[v14];
    uint64_t v16 = v13 + 24 * (v12 + v11);
    *(std::pair<const char *, const char *> *)uint64_t v16 = v15->std::pair<const char *, const char *>;
    *(unsigned char *)(v16 + 16) = v15->matched;
    unint64_t v14 = (v11 + 2);
    ++v11;
  }
  while (v10 > v14);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_19242EFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  unint64_t v49 = 0;
  uint64_t v50 = 0;
  unint64_t v51 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6) {
    return 0;
  }
  __x.first = a3;
  __x.second = a3;
  __x.matched = 0;
  *(_DWORD *)uint64_t v45 = 0;
  memset(&v45[8], 0, 48);
  *(_OWORD *)std::vector<std::csub_match> __p = 0u;
  memset(v47, 0, 21);
  uint64_t v50 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v49, (uint64_t)v45);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*(void *)&v45[32])
  {
    *(void *)&v45[40] = *(void *)&v45[32];
    operator delete(*(void **)&v45[32]);
  }
  uint64_t v13 = v50;
  *((_DWORD *)v50 - 24) = 0;
  *((void *)v13 - 1E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = a2;
  *((void *)v13 - 10) = a2;
  *((void *)v13 - 9) = a3;
  uint64_t v14 = *((void *)v13 - 8);
  unint64_t v15 = *(unsigned int *)(a1 + 28);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v13 - 7) - v14) >> 3);
  if (v15 <= v16)
  {
    if (v15 < v16) {
      *((void *)v13 - 7) = v14 + 24 * v15;
    }
  }
  else
  {
    std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v13 - 64), v15 - v16, &__x);
    uint64_t v13 = v50;
  }
  uint64_t v18 = *((void *)v13 - 5);
  unint64_t v19 = *(unsigned int *)(a1 + 32);
  unint64_t v20 = (*((void *)v13 - 4) - v18) >> 4;
  if (v19 <= v20)
  {
    if (v19 < v20) {
      *((void *)v13 - 4) = v18 + 16 * v19;
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v13 - 40), v19 - v20);
    uint64_t v13 = v50;
  }
  *((void *)v13 - 2) = v6;
  *((_DWORD *)v13 - 2) = a5;
  *(v13 - 4) = a6;
  unsigned int v21 = 1;
  while (2)
  {
    if ((v21 & 0xFFF) == 0 && (int)(v21 >> 12) >= (int)a3 - (int)a2) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    }
    uint64_t v23 = *((void *)v13 - 2);
    if (v23) {
      (*(void (**)(uint64_t, char *))(*(void *)v23 + 16))(v23, v13 - 96);
    }
    switch(*((_DWORD *)v13 - 24))
    {
      case 0xFFFFFC18:
        uint64_t v24 = (const char *)*((void *)v13 - 10);
        if ((a5 & 0x20) != 0 && v24 == a2 || (a5 & 0x1000) != 0 && v24 != a3) {
          goto LABEL_27;
        }
        uint64_t v36 = *a4;
        *(void *)uint64_t v36 = a2;
        *(void *)(v36 + 8) = v24;
        *(unsigned char *)(v36 + 16) = 1;
        uint64_t v37 = *((void *)v13 - 8);
        uint64_t v38 = *((void *)v13 - 7) - v37;
        if (v38)
        {
          unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * (v38 >> 3);
          uint64_t v40 = (unsigned char *)(v37 + 16);
          unsigned int v41 = 1;
          do
          {
            uint64_t v42 = v36 + 24 * v41;
            *(_OWORD *)uint64_t v42 = *((_OWORD *)v40 - 1);
            char v43 = *v40;
            v40 += 24;
            *(unsigned char *)(v42 + 16) = v43;
          }
          while (v39 > v41++);
        }
        uint64_t v17 = 1;
        std::vector<std::csub_match>::value_type v22 = v49;
        if (!v49) {
          return v17;
        }
        goto LABEL_38;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_17;
      case 0xFFFFFC1F:
LABEL_27:
        uint64_t v25 = v50;
        int v26 = (void *)*((void *)v50 - 5);
        if (v26)
        {
          *((void *)v50 - 4) = v26;
          operator delete(v26);
        }
        int v27 = (void *)*((void *)v25 - 8);
        if (v27)
        {
          *((void *)v25 - 7) = v27;
          operator delete(v27);
        }
        uint64_t v50 = v25 - 96;
        goto LABEL_17;
      case 0xFFFFFC20:
        std::__state<char>::__state((uint64_t)v45, (long long *)v13 - 6);
        (*(void (**)(void, uint64_t, char *))(**((void **)v13 - 2) + 24))(*((void *)v13 - 2), 1, v13 - 96);
        (*(void (**)(void, void, unsigned char *))(*(void *)v47[1] + 24))(v47[1], 0, v45);
        BOOL v28 = v50;
        if ((unint64_t)v50 >= v51)
        {
          uint64_t v50 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v49, (uint64_t)v45);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v29 = *(_OWORD *)&v45[16];
          *(_OWORD *)uint64_t v50 = *(_OWORD *)v45;
          *((_OWORD *)v28 + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = v29;
          *((void *)v28 + 4) = 0;
          *((void *)v28 + 5) = 0;
          *((void *)v28 + 6) = 0;
          *((void *)v28 + 7) = 0;
          *((_OWORD *)v28 + 2) = *(_OWORD *)&v45[32];
          *((void *)v28 + 6) = *(void *)&v45[48];
          memset(&v45[32], 0, 24);
          *((void *)v28 + 8) = 0;
          *((void *)v28 + 9) = 0;
          *(_OWORD *)(v28 + 56) = *(_OWORD *)__p;
          *((void *)v28 + 9) = v47[0];
          __p[0] = 0;
          __p[1] = 0;
          v47[0] = 0;
          uint64_t v30 = v47[1];
          *(void *)(v28 + 85) = *(void *)((char *)&v47[1] + 5);
          *((void *)v28 + 10) = v30;
          uint64_t v50 = v28 + 96;
        }
        if (*(void *)&v45[32])
        {
          *(void *)&v45[40] = *(void *)&v45[32];
          operator delete(*(void **)&v45[32]);
        }
LABEL_17:
        std::vector<std::csub_match>::value_type v22 = v49;
        uint64_t v13 = v50;
        ++v21;
        if (v49 != v50) {
          continue;
        }
        uint64_t v17 = 0;
        if (v49)
        {
LABEL_38:
          uint64_t v31 = v50;
          unint64_t v32 = v22;
          if (v50 != v22)
          {
            do
            {
              unint64_t v33 = (void *)*((void *)v31 - 5);
              if (v33)
              {
                *((void *)v31 - 4) = v33;
                operator delete(v33);
              }
              BOOL v34 = (void *)*((void *)v31 - 8);
              if (v34)
              {
                *((void *)v31 - 7) = v34;
                operator delete(v34);
              }
              v31 -= 96;
            }
            while (v31 != v22);
            unint64_t v32 = v49;
          }
          uint64_t v50 = v22;
          operator delete(v32);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    return v17;
  }
}

void sub_19242F454(_Unwind_Exception *a1)
{
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_19242F468(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__state<char>::~__state((uint64_t *)va);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_19242F4B0(_Unwind_Exception *a1)
{
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_19242F4C4(_Unwind_Exception *a1)
{
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  value = this->__end_cap_.__value_;
  std::vector<std::string>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) < __n)
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_26;
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    std::vector<std::csub_match>::size_type v9 = 2 * v8;
    if (2 * v8 <= __n) {
      std::vector<std::csub_match>::size_type v9 = __n;
    }
    unint64_t v10 = v8 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
LABEL_26:
    }
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    uint64_t v11 = v10;
    int v12 = (std::sub_match<const char *> *)operator new(24 * v10);
    this->__begin_ = v12;
    this->__end_ = v12;
    this->__end_cap_.__value_ = &v12[v11];
    std::vector<std::csub_match>::size_type v13 = 24 * __n;
    uint64_t v14 = &v12[__n];
    do
    {
      v12->std::pair<const char *, const char *> = __u->std::pair<const char *, const char *>;
      *(void *)&v12->matched = *(void *)&__u->matched;
      ++v12;
      v13 -= 24;
    }
    while (v13);
    goto LABEL_25;
  }
  std::vector<std::csub_match>::pointer end = this->__end_;
  unint64_t v16 = end - begin;
  if (v16 >= __n) {
    std::vector<std::csub_match>::size_type v17 = __n;
  }
  else {
    std::vector<std::csub_match>::size_type v17 = end - begin;
  }
  if (v17)
  {
    uint64_t v18 = begin;
    do
    {
      *v18++ = *__u;
      --v17;
    }
    while (v17);
  }
  if (__n <= v16)
  {
    uint64_t v14 = &begin[__n];
LABEL_25:
    this->__end_ = v14;
    return;
  }
  unint64_t v19 = &end[__n - v16];
  std::vector<std::csub_match>::size_type v20 = 24 * __n - 24 * v16;
  do
  {
    std::pair<const char *, const char *> v21 = __u->std::pair<const char *, const char *>;
    *(void *)&end->matched = *(void *)&__u->matched;
    end->std::pair<const char *, const char *> = v21;
    ++end;
    v20 -= 24;
  }
  while (v20);
  this->__end_ = v19;
}

void *std::__state<char>::~__state(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FF0EF0](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_19242F724(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FF0EF0](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_19242F77C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void **std::vector<std::__state<char>>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    int v3 = (char *)a1[1];
    std::vector<std::csub_match>::size_type v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void *)*((void *)v3 - 5);
        if (v5)
        {
          *((void *)v3 - 4) = v5;
          operator delete(v5);
        }
        uint64_t v6 = (void *)*((void *)v3 - 8);
        if (v6)
        {
          *((void *)v3 - 7) = v6;
          operator delete(v6);
        }
        v3 -= 96;
      }
      while (v3 != v2);
      std::vector<std::csub_match>::size_type v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    BOOL v7 = (char *)operator new(96 * v6);
  }
  else
  {
    BOOL v7 = 0;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  std::vector<std::csub_match>::size_type v9 = &v7[96 * v3];
  *(_OWORD *)std::vector<std::csub_match>::size_type v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = v8;
  unint64_t v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v9 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(v9 + 85) = *(void *)(a2 + 85);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  *((void *)v9 + 9) = 0;
  *((void *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v9 + 9) = v11;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  std::vector<std::csub_match>::size_type v13 = v9 + 96;
  uint64_t v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
    if (!v15) {
      return v13;
    }
    goto LABEL_23;
  }
  uint64_t v16 = 0;
  do
  {
    std::vector<std::csub_match>::size_type v17 = &v9[v16];
    uint64_t v18 = &v15[v16];
    long long v19 = *(_OWORD *)&v15[v16 - 80];
    *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
    *((_OWORD *)v17 - 5) = v19;
    *((void *)v17 - 7) = 0;
    *((void *)v17 - 6) = 0;
    *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
    *((void *)v17 - 6) = *(void *)&v15[v16 - 48];
    *((void *)v18 - 8) = 0;
    *((void *)v18 - 7) = 0;
    *((void *)v18 - 6) = 0;
    *((void *)v17 - 4) = 0;
    *((void *)v17 - 3) = 0;
    *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
    *((void *)v17 - 3) = *(void *)&v15[v16 - 24];
    *((void *)v18 - 5) = 0;
    *((void *)v18 - 4) = 0;
    *((void *)v18 - 3) = 0;
    uint64_t v20 = *(void *)&v15[v16 - 16];
    *(void *)(v17 - 1E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = *(void *)&v15[v16 - 11];
    *((void *)v17 - 2) = v20;
    v16 -= 96;
  }
  while (&v15[v16] != v14);
  std::pair<const char *, const char *> v21 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  *a1 = &v9[v16];
  a1[1] = v13;
  a1[2] = v10;
  if (v15 != v21)
  {
    do
    {
      std::vector<std::csub_match>::value_type v22 = (void *)*((void *)v15 - 5);
      if (v22)
      {
        *((void *)v15 - 4) = v22;
        operator delete(v22);
      }
      uint64_t v23 = (void *)*((void *)v15 - 8);
      if (v23)
      {
        *((void *)v15 - 7) = v23;
        operator delete(v23);
      }
      v15 -= 96;
    }
    while (v15 != v21);
    unint64_t v15 = v21;
  }
  if (v15) {
LABEL_23:
  }
    operator delete(v15);
  return v13;
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      std::vector<std::csub_match>::size_type v13 = &end[__n];
      std::vector<std::csub_match>::size_type v14 = 24 * __n;
      do
      {
        std::pair<const char *, const char *> v15 = __x->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__x->matched;
        end->std::pair<const char *, const char *> = v15;
        ++end;
        v14 -= 24;
      }
      while (v14);
      std::vector<std::csub_match>::pointer end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    unint64_t v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v12 = (char *)operator new(24 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v16 = (std::sub_match<const char *> *)&v12[24 * v8];
    std::vector<std::csub_match>::size_type v17 = 24 * __n;
    uint64_t v18 = &v16[__n];
    long long v19 = v16;
    do
    {
      std::pair<const char *, const char *> v20 = __x->std::pair<const char *, const char *>;
      v19[1].first = *(const char **)&__x->matched;
      *long long v19 = v20;
      long long v19 = (std::pair<const char *, const char *> *)((char *)v19 + 24);
      v17 -= 24;
    }
    while (v17);
    std::vector<std::csub_match>::pointer begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        std::pair<const char *, const char *> v22 = end[-1].std::pair<const char *, const char *>;
        *(void *)&v16[-1].matched = *(void *)&end[-1].matched;
        v16[-1].std::pair<const char *, const char *> = v22;
        --v16;
        --end;
      }
      while (end != begin);
      std::vector<std::csub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v16;
    this->__end_ = v18;
    this->__end_cap_.__value_ = (std::sub_match<const char *> *)&v12[24 * v11];
    if (end)
    {
      operator delete(end);
    }
  }
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __n)
{
  std::vector<std::csub_match>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      std::vector<std::pair<unsigned long, const char *>>::size_type v12 = 16 * __n;
      bzero(this->__end_, 16 * __n);
      std::vector<std::csub_match>::pointer end = (std::pair<unsigned long, const char *> *)((char *)end + v12);
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<std::pair<unsigned long, const char *>>::pointer begin = this->__begin_;
    uint64_t v7 = end - this->__begin_;
    unint64_t v8 = v7 + __n;
    if ((v7 + __n) >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = (char *)value - (char *)begin;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v11 = (char *)operator new(16 * v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    std::vector<std::csub_match>::size_type v13 = (std::pair<unsigned long, const char *> *)&v11[16 * v7];
    size_t v14 = __n;
    std::pair<const char *, const char *> v15 = (std::pair<unsigned long, const char *> *)&v11[16 * v10];
    bzero(v13, v14 * 16);
    uint64_t v16 = &v13[v14];
    if (end != begin)
    {
      do
      {
        v13[-1] = end[-1];
        --v13;
        --end;
      }
      while (end != begin);
      std::vector<std::csub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
    {
      operator delete(end);
    }
  }
}

uint64_t std::__state<char>::__state(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v7 = (unsigned char *)*((void *)a2 + 4);
  unint64_t v6 = (unsigned char *)*((void *)a2 + 5);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = (char *)operator new(v8);
    *(void *)(a1 + 32) = v9;
    *(void *)(a1 + 40) = v9;
    *(void *)(a1 + 48) = &v9[8 * (v8 >> 3)];
    size_t v10 = 24 * ((v8 - 24) / 0x18uLL) + 24;
    memcpy(v9, v7, v10);
    *(void *)(a1 + 40) = &v9[v10];
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<std::pair<unsigned long, const char *>>::size_type v12 = (unsigned char *)*((void *)a2 + 7);
  unint64_t v11 = (unsigned char *)*((void *)a2 + 8);
  uint64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    size_t v14 = (char *)operator new(v11 - v12);
    *(void *)(a1 + 56) = v14;
    *(void *)(a1 + 64) = v14;
    *(void *)(a1 + 72) = &v14[16 * (v13 >> 4)];
    memcpy(v14, v12, v13 & 0xFFFFFFFFFFFFFFF0);
    *(void *)(a1 + 64) = &v14[v13 & 0xFFFFFFFFFFFFFFF0];
  }
  uint64_t v15 = *((void *)a2 + 10);
  *(void *)(a1 + 85) = *(void *)((char *)a2 + 85);
  *(void *)(a1 + 80) = v15;
  return a1;
}

void sub_19242FE34(_Unwind_Exception *exception_object)
{
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 64) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3 || *a2 != 92) {
    return a2;
  }
  long long v5 = a2 + 1;
  if (a2 + 1 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int v7 = *v5;
  unsigned int v8 = v7 - 48;
  if (v7 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v8);
    return a2 + 2;
  }
  if ((v7 - 49) > 8) {
    goto LABEL_18;
  }
  size_t v10 = a2 + 2;
  if (a2 + 2 == a3)
  {
    size_t v10 = a3;
  }
  else
  {
    while (1)
    {
      int v11 = *v10;
      if ((v11 - 48) > 9) {
        break;
      }
      if (v8 >= 0x19999999) {
        goto LABEL_23;
      }
      ++v10;
      unsigned int v8 = v11 + 10 * v8 - 48;
      if (v10 == a3)
      {
        size_t v10 = a3;
        break;
      }
    }
    if (!v8) {
LABEL_23:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  if (v8 > this->__marked_count_) {
    goto LABEL_23;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v8);
  if (v10 == v5)
  {
LABEL_18:
    size_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>((uint64_t)this, a2 + 1, a3);
    if (v10 == v5)
    {
      std::vector<std::pair<unsigned long, const char *>>::size_type v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(this, a2 + 1, a3, 0);
      if (v12 == v5) {
        return a2;
      }
      else {
        return v12;
      }
    }
  }
  return v10;
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 != a3) {
      operator new();
    }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  return a2;
}

void sub_192430134(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FF0EF0](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_19243019C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3) {
    return this;
  }
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '{':
    case '|':
    case '}':
      return this;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
      uint64_t result = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      break;
  }
  return result;
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x192FF16B0);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FF0EF0](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1924304D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        operator new();
      case 'S':
        operator new();
      case 'W':
        operator new();
      case 'd':
        operator new();
      case 's':
        operator new();
      case 'w':
        operator new();
      default:
        return a2;
    }
  }
  return a2;
}

void sub_192430720(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, std::string *this)
{
  long long v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  char v5 = 0;
  switch(*a2)
  {
    case '0':
      if (this)
      {
        std::string::operator=(this, 0);
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char>::value_type v8 = 0;
LABEL_55:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
        return v4 + 1;
      }
    case 'c':
      if (a2 + 1 == a3) {
        goto LABEL_62;
      }
      unsigned __int8 v9 = a2[1];
      if (((v9 & 0xDF) - 65) > 0x19u) {
        goto LABEL_62;
      }
      std::string::value_type v10 = v9 & 0x1F;
      if (this)
      {
        std::string::operator=(this, v10);
        v4 += 2;
        return v4;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v10);
      uint64_t result = v4 + 2;
      break;
    case 'f':
      if (this) {
        std::string::operator=(this, 12);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
      }
      return v4 + 1;
    case 'n':
      if (this) {
        std::string::operator=(this, 10);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
      }
      return v4 + 1;
    case 'r':
      if (this) {
        std::string::operator=(this, 13);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
      }
      return v4 + 1;
    case 't':
      if (this) {
        std::string::operator=(this, 9);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
      }
      return v4 + 1;
    case 'u':
      if (a2 + 1 == a3) {
        goto LABEL_62;
      }
      int v11 = a2[1];
      if ((v11 & 0xF8) != 0x30 && (v11 & 0xFE) != 0x38 && (v11 | 0x20u) - 97 >= 6) {
        goto LABEL_62;
      }
      long long v4 = a2 + 2;
      if (a2 + 2 == a3) {
        goto LABEL_62;
      }
      int v12 = *v4;
      char v13 = -48;
      if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38) {
        goto LABEL_36;
      }
      v12 |= 0x20u;
      if ((v12 - 97) >= 6) {
        goto LABEL_62;
      }
      char v13 = -87;
LABEL_36:
      char v5 = 16 * (v13 + v12);
LABEL_37:
      if (v4 + 1 == a3) {
        goto LABEL_62;
      }
      int v14 = v4[1];
      char v15 = -48;
      if ((v14 & 0xF8) == 0x30 || (v14 & 0xFE) == 0x38) {
        goto LABEL_42;
      }
      v14 |= 0x20u;
      if ((v14 - 97) >= 6) {
        goto LABEL_62;
      }
      char v15 = -87;
LABEL_42:
      if (v4 + 2 == a3) {
        goto LABEL_62;
      }
      int v16 = v4[2];
      char v17 = -48;
      if ((v16 & 0xF8) != 0x30 && (v16 & 0xFE) != 0x38)
      {
        v16 |= 0x20u;
        if ((v16 - 97) >= 6) {
LABEL_62:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        char v17 = -87;
      }
      std::string::value_type v18 = v17 + v16 + 16 * (v15 + v14 + v5);
      if (this) {
        std::string::operator=(this, v18);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v18);
      }
      return v4 + 3;
    case 'v':
      if (this) {
        std::string::operator=(this, 11);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
      }
      return v4 + 1;
    case 'x':
      goto LABEL_37;
    default:
      uint64_t v7 = *a2;
      if (*a2 == 95 || (v7 & 0x80) == 0 && (a1->__traits_.__ct_->__tab_[v7] & 0x500) != 0) {
        goto LABEL_62;
      }
      std::basic_regex<char>::value_type v8 = *a2;
      if (!this) {
        goto LABEL_55;
      }
      std::string::operator=(this, v7);
      return v4 + 1;
  }
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_192430E9C(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  uint64_t v4 = (uint64_t)v1[1];
  if (v4) {
    sub_19243984C(v4);
  }
  MEMORY[0x192FF16B0](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FF0EF0](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_192430F38(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EE37EDC8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EE37EDC8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x192FF16B0);
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EE37EE58;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EE37EE58;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EE37ECB0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EE37ECB0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (!*(unsigned char *)(v3 + 16)
    || (uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3, v5 = *(void *)(a2 + 16), *(void *)(a2 + 24) - v5 < v4))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    return result;
  }
  uint64_t v6 = result;
  if (v4 >= 1)
  {
    uint64_t v7 = 0;
    while (1)
    {
      int v8 = (*(uint64_t (**)(void, void))(**(void **)(v6 + 24) + 40))(*(void *)(v6 + 24), *(char *)(*(void *)v3 + v7));
      uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v6 + 24) + 40))(*(void *)(v6 + 24), *(char *)(*(void *)(a2 + 16) + v7));
      if (v8 != result) {
        goto LABEL_3;
      }
      if (v4 == ++v7)
      {
        uint64_t v5 = *(void *)(a2 + 16);
        break;
      }
    }
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 16) = v5 + v4;
  *(void *)(a2 + 80) = *(void *)(v6 + 8);
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EE37ED98;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EE37ED98;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (!*(unsigned char *)(v3 + 24 * v2 + 16)
    || (uint64_t v4 = (unsigned __int8 **)(v3 + 24 * v2),
        uint64_t v5 = *v4,
        uint64_t v6 = v4[1] - *v4,
        uint64_t v7 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v7 < v6))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    return result;
  }
  if (v6 >= 1)
  {
    int v8 = *(unsigned __int8 **)(a2 + 16);
    uint64_t v9 = v6;
    do
    {
      int v11 = *v5++;
      int v10 = v11;
      int v12 = *v8++;
      if (v10 != v12) {
        goto LABEL_3;
      }
    }
    while (--v9);
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 16) = v7 + v6;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x192FF16B0);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  unsigned int v5 = v2 - 1;
  if (*(unsigned char *)(v3 + 24 * v5 + 16)
    && (uint64_t v6 = result,
        uint64_t v7 = v3 + 24 * v5,
        uint64_t result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (uint64_t result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v9 + v8;
    *(void *)(a2 + 80) = *((void *)v6 + 1);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  return result;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (!*(unsigned char *)(a1 + 169))
  {
    uint64_t v6 = (void *)(a1 + 40);
    unsigned int v5 = *(unsigned char **)(a1 + 48);
    unint64_t v16 = *(void *)(a1 + 56);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16) {
        goto LABEL_24;
      }
      char v17 = (unsigned char *)*v6;
      unint64_t v18 = (unint64_t)&v5[-*v6];
      unint64_t v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        unint64_t v20 = v16 - (void)v17;
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v21 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v21 = v19;
        }
        if (v21)
        {
          int v12 = operator new(v21);
          char v13 = &v12[v18];
          int v14 = &v12[v21];
          v12[v18] = v2;
          uint64_t v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        else
        {
          int v12 = 0;
          char v13 = &v5[-*v6];
          int v14 = 0;
          *(unsigned char *)unint64_t v18 = a2;
          uint64_t v15 = v18 + 1;
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            unint64_t v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v38 = (long long *)(v5 - 16);
            unint64_t v39 = &v12[v5 - 16 - v17];
            unint64_t v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v41 = *v38;
              *(v39 - E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = *(v38 - 1);
              *unint64_t v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28) {
              goto LABEL_86;
            }
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            unint64_t v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v42 = &v5[-v28 - 8];
          char v43 = &v12[v42 - v17];
          unint64_t v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v45 = *(void *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_86;
          }
        }
LABEL_80:
        unint64_t v56 = v13 - 1;
        do
        {
          char v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16) {
      goto LABEL_24;
    }
    uint64_t v23 = (unsigned char *)*v6;
    unint64_t v24 = (unint64_t)&v5[-*v6];
    unint64_t v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0) {
      goto LABEL_89;
    }
    unint64_t v26 = v16 - (void)v23;
    if (2 * v26 > v25) {
      unint64_t v25 = 2 * v26;
    }
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v27 = v25;
    }
    if (v27)
    {
      int v12 = operator new(v27);
      char v13 = &v12[v24];
      int v14 = &v12[v27];
      v12[v24] = v2;
      uint64_t v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(void *)(a1 + 40) = v13;
        *(void *)(a1 + 48) = v15;
        *(void *)(a1 + 56) = v14;
        if (!v5) {
          goto LABEL_88;
        }
        goto LABEL_87;
      }
    }
    else
    {
      int v12 = 0;
      char v13 = &v5[-*v6];
      int v14 = 0;
      *(unsigned char *)unint64_t v24 = a2;
      uint64_t v15 = v24 + 1;
      if (v5 == v23) {
        goto LABEL_49;
      }
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        unint64_t v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v46 = (long long *)(v5 - 16);
        unint64_t v47 = &v12[v5 - 16 - v23];
        unint64_t v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = *(v46 - 1);
          *unint64_t v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29) {
          goto LABEL_86;
        }
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        unint64_t v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v50 = &v5[-v29 - 8];
      unint64_t v51 = &v12[v50 - v23];
      unint64_t v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v53 = *(void *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_86;
      }
    }
LABEL_84:
    uint64_t v58 = v13 - 1;
    do
    {
      char v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  unsigned int v5 = *(unsigned char **)(a1 + 48);
  unint64_t v4 = *(void *)(a1 + 56);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *unsigned int v5 = v2;
    uint64_t v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  uint64_t v6 = (void *)(a1 + 40);
  uint64_t v7 = *(unsigned char **)(a1 + 40);
  unint64_t v8 = v5 - v7;
  uint64_t v9 = v5 - v7 + 1;
  if (v9 < 0) {
    goto LABEL_89;
  }
  unint64_t v10 = v4 - (void)v7;
  if (2 * v10 > v9) {
    uint64_t v9 = 2 * v10;
  }
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v11 = v9;
  }
  if (v11)
  {
    int v12 = operator new(v11);
    char v13 = &v12[v8];
    int v14 = &v12[v11];
    v12[v8] = v2;
    uint64_t v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  else
  {
    int v12 = 0;
    char v13 = (char *)(v5 - v7);
    int v14 = 0;
    *(unsigned char *)unint64_t v8 = v2;
    uint64_t v15 = v8 + 1;
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20) {
    goto LABEL_76;
  }
  if (v8 < 0x20)
  {
    unint64_t v22 = 0;
    goto LABEL_55;
  }
  unint64_t v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  uint64_t v30 = (long long *)(v5 - 16);
  uint64_t v31 = &v12[v5 - 16 - v7];
  unint64_t v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v33 = *v30;
    *(v31 - E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = *(v30 - 1);
    *uint64_t v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    BOOL v34 = &v5[-v22 - 8];
    BOOL v35 = &v12[v34 - v7];
    unint64_t v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v37 = *(void *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_86;
    }
LABEL_76:
    uint64_t v54 = v13 - 1;
    do
    {
      char v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  unsigned int v5 = (unsigned char *)*v6;
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = v15;
  *(void *)(a1 + 56) = v14;
  if (v5) {
LABEL_87:
  }
    operator delete(v5);
LABEL_88:
  *(void *)(a1 + 48) = v15;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(void *)(a1 + 8) = a3;
  size_t v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = a4;
  *(unsigned char *)(a1 + 169) = a5;
  *(unsigned char *)(a1 + 170) = a6;
  std::locale::locale(&v14, v11);
  std::locale::name(&v15, &v14);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v12 = v15.__r_.__value_.__l.__size_ != 1 || *v15.__r_.__value_.__l.__data_ != 67;
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v12 = SHIBYTE(v15.__r_.__value_.__r.__words[2]) != 1 || v15.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v14);
  *(unsigned char *)(a1 + 17E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = v12;
  return a1;
}

void sub_192432044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v9 + 136));
  std::string v15 = *(void **)(v9 + 112);
  if (v15)
  {
    *(void *)(v9 + 120) = v15;
    operator delete(v15);
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v12);
    unint64_t v16 = *(void **)(v9 + 64);
    if (!v16)
    {
LABEL_3:
      char v17 = *v13;
      if (!*v13) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v12);
    unint64_t v16 = *(void **)(v9 + 64);
    if (!v16) {
      goto LABEL_3;
    }
  }
  *(void *)(v9 + 72) = v16;
  operator delete(v16);
  char v17 = *v13;
  if (!*v13)
  {
LABEL_4:
    std::locale::~locale(v11);
    *(void *)uint64_t v9 = v10;
    uint64_t v18 = *(void *)(v9 + 8);
    if (!v18) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  *(void *)(v9 + 48) = v17;
  operator delete(v17);
  std::locale::~locale(v11);
  *(void *)uint64_t v9 = v10;
  uint64_t v18 = *(void *)(v9 + 8);
  if (!v18) {
LABEL_5:
  }
    _Unwind_Resume(a1);
LABEL_9:
  (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  _Unwind_Resume(a1);
}

void **std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](void **a1)
{
  char v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    unint64_t v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0) {
LABEL_9:
        }
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 6;
      if (v3 == v2)
      {
        unint64_t v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  char v2 = a2;
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    uint64_t v37 = 0;
    BOOL negate = this->__negate_;
    goto LABEL_215;
  }
  if (!this->__might_have_digraph_ || current + 1 == last) {
    goto LABEL_58;
  }
  char v6 = *current;
  LOBYTE(__src[0]) = *current;
  char v7 = current[1];
  BYTE1(__src[0]) = v7;
  if (this->__icase_)
  {
    LOBYTE(__src[0]) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    BYTE1(__src[0]) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  p_traits = &this->__traits_;
  std::regex_traits<char>::__lookup_collatename<char *>(__src, (uint64_t)&this->__traits_, (unsigned char *)__src + 2, (uint64_t)&__p);
  if ((v138 & 0x80000000) == 0)
  {
    if (v138) {
      goto LABEL_8;
    }
LABEL_58:
    BOOL negate = 0;
    uint64_t v37 = 1;
    unsigned __int8 v39 = *v2->__current_;
    unsigned __int8 v135 = v39;
    if (!this->__icase_) {
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  size_t v38 = __n;
  operator delete(__p);
  if (!v38) {
    goto LABEL_58;
  }
LABEL_8:
  std::vector<std::pair<char, char>>::pointer begin = this->__digraphs_.__begin_;
  uint64_t v10 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v10)
  {
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    p_second = &begin->second;
    while (LOBYTE(__src[0]) != *(p_second - 1) || BYTE1(__src[0]) != *p_second)
    {
      p_second += 2;
      if (!--v11) {
        goto LABEL_17;
      }
    }
    goto LABEL_212;
  }
LABEL_17:
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    BOOL negate = 0;
    goto LABEL_166;
  }
  std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, __src, (unsigned char *)__src + 2);
  std::vector<std::pair<std::string, std::string>>::pointer v14 = this->__ranges_.__begin_;
  char v15 = v138;
  int64_t v16 = (char *)this->__ranges_.__end_ - (char *)v14;
  if (v16)
  {
    uint64_t v17 = 0;
    unint64_t v18 = v16 / 48;
    char v124 = v138;
    if (v138 >= 0) {
      size_t v19 = v138;
    }
    else {
      size_t v19 = __n;
    }
    if (v138 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if (v18 <= 1) {
      uint64_t v21 = 1;
    }
    else {
      uint64_t v21 = v16 / 48;
    }
    BOOL v22 = 1;
    do
    {
      int v23 = SHIBYTE(v14->first.__r_.__value_.__r.__words[2]);
      if (v23 >= 0) {
        std::string::size_type size = HIBYTE(v14->first.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v14->first.__r_.__value_.__l.__size_;
      }
      if (v23 >= 0) {
        std::vector<std::pair<std::string, std::string>>::pointer v25 = v14;
      }
      else {
        std::vector<std::pair<std::string, std::string>>::pointer v25 = (std::vector<std::pair<std::string, std::string>>::pointer)v14->first.__r_.__value_.__r.__words[0];
      }
      if (size >= v19) {
        size_t v26 = v19;
      }
      else {
        size_t v26 = size;
      }
      int v27 = memcmp(p_p, v25, v26);
      BOOL v28 = v19 >= size;
      if (v27) {
        BOOL v28 = v27 >= 0;
      }
      if (v28)
      {
        int v29 = SHIBYTE(v14->second.__r_.__value_.__r.__words[2]);
        if (v29 >= 0) {
          std::string::size_type v30 = HIBYTE(v14->second.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v30 = v14->second.__r_.__value_.__l.__size_;
        }
        if (v29 >= 0) {
          data = &v14->second;
        }
        else {
          data = (std::string *)v14->second.__r_.__value_.__l.__data_;
        }
        if (v19 >= v30) {
          size_t v32 = v30;
        }
        else {
          size_t v32 = v19;
        }
        int v33 = memcmp(data, p_p, v32);
        BOOL v34 = v30 >= v19;
        if (v33) {
          BOOL v34 = v33 >= 0;
        }
        if (v34)
        {
          BOOL negate = 1;
          int v36 = 5;
          goto LABEL_161;
        }
      }
      BOOL v22 = ++v17 < v18;
      ++v14;
    }
    while (v21 != v17);
    int v36 = 0;
    BOOL negate = 0;
LABEL_161:
    p_traits = &this->__traits_;
    char v15 = v124;
  }
  else
  {
    BOOL v22 = 0;
    int v36 = 0;
    BOOL negate = 0;
  }
  if (v15 < 0) {
    operator delete(__p);
  }
  if (!v22)
  {
LABEL_166:
    if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
      goto LABEL_194;
    }
    BOOL v132 = negate;
    std::regex_traits<char>::__transform_primary<char *>(__src, (uint64_t)p_traits, (unsigned char *)__src + 2, (uint64_t)&__p);
    std::vector<std::string>::pointer v89 = this->__equivalences_.__begin_;
    int64_t v90 = (char *)this->__equivalences_.__end_ - (char *)v89;
    if (v90)
    {
      unint64_t v91 = v90 / 24;
      size_t v92 = __n;
      if (v138 >= 0) {
        size_t v93 = v138;
      }
      else {
        size_t v93 = __n;
      }
      if (v138 < 0)
      {
        int v129 = v138;
        uint64_t v109 = 0;
        v110 = __p;
        if (v91 <= 1) {
          uint64_t v111 = 1;
        }
        else {
          uint64_t v111 = v90 / 24;
        }
        BOOL v96 = 1;
        do
        {
          std::string::size_type v112 = HIBYTE(v89->__r_.__value_.__r.__words[2]);
          int v113 = (char)v112;
          if ((v112 & 0x80u) != 0) {
            std::string::size_type v112 = v89->__r_.__value_.__l.__size_;
          }
          if (v93 == v112)
          {
            std::vector<std::string>::pointer v114 = v113 >= 0 ? v89 : (std::vector<std::string>::pointer)v89->__r_.__value_.__r.__words[0];
            if (!memcmp(v110, v114, v92))
            {
              BOOL negate = 1;
              int v36 = 5;
              if ((v129 & 0x80000000) == 0) {
                goto LABEL_190;
              }
              goto LABEL_189;
            }
          }
          BOOL v96 = ++v109 < v91;
          ++v89;
        }
        while (v111 != v109);
        int v36 = 0;
        BOOL negate = v132;
        if ((v129 & 0x80000000) == 0) {
          goto LABEL_190;
        }
LABEL_189:
        operator delete(__p);
        goto LABEL_190;
      }
      if (!v138)
      {
        std::string::size_type v115 = HIBYTE(v89->__r_.__value_.__r.__words[2]);
        if ((v115 & 0x80u) != 0) {
          std::string::size_type v115 = v89->__r_.__value_.__l.__size_;
        }
        if (v115 == v138)
        {
          BOOL negate = 1;
          goto LABEL_214;
        }
        unint64_t v116 = 0;
        if (v91 <= 1) {
          uint64_t v117 = 1;
        }
        else {
          uint64_t v117 = v91;
        }
        uint64_t v118 = v117 - 1;
        v119 = &v89[1].__r_.__value_.__s.__data_[8];
        while (v118 != v116)
        {
          ++v116;
          uint64_t v120 = v119[15];
          uint64_t v122 = *(void *)v119;
          v119 += 24;
          uint64_t v121 = v122;
          if ((v120 & 0x80u) != 0) {
            uint64_t v120 = v121;
          }
          if (v93 == v120)
          {
            BOOL v96 = v116 < v91;
            BOOL negate = 1;
            int v36 = 5;
            goto LABEL_190;
          }
        }
        BOOL v96 = 0;
        int v36 = 0;
LABEL_190:
        if (v96) {
          goto LABEL_191;
        }
LABEL_194:
        if (SLOBYTE(__src[0]) < 0)
        {
          neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
        }
        else
        {
          std::regex_traits<char>::char_class_type mask = this->__mask_;
          tab = this->__traits_.__ct_->__tab_;
          std::ctype_base::mask v104 = tab[LOBYTE(__src[0])];
          if (((v104 & mask) != 0 || LOBYTE(__src[0]) == 95 && (mask & 0x80) != 0)
            && (SBYTE1(__src[0]) & 0x80000000) == 0
            && ((tab[BYTE1(__src[0])] & mask) != 0 || (mask & 0x80) != 0 && BYTE1(__src[0]) == 95))
          {
            goto LABEL_212;
          }
          neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
          if ((v104 & neg_mask) != 0 || LOBYTE(__src[0]) == 95 && (neg_mask & 0x80) != 0)
          {
LABEL_211:
            int v106 = negate;
LABEL_213:
            BOOL negate = v106;
            goto LABEL_214;
          }
        }
        if ((SBYTE1(__src[0]) & 0x80000000) == 0)
        {
          if ((this->__traits_.__ct_->__tab_[BYTE1(__src[0])] & neg_mask) == 0)
          {
            int v106 = 1;
            if (BYTE1(__src[0]) != 95 || (neg_mask & 0x80) == 0) {
              goto LABEL_213;
            }
          }
          goto LABEL_211;
        }
LABEL_212:
        int v106 = 1;
        goto LABEL_213;
      }
      uint64_t v94 = 0;
      if (v91 <= 1) {
        uint64_t v95 = 1;
      }
      else {
        uint64_t v95 = v90 / 24;
      }
      BOOL v96 = 1;
      do
      {
        float v97 = &v89[v94];
        std::string::size_type v98 = HIBYTE(v97->__r_.__value_.__r.__words[2]);
        int v99 = (char)v98;
        if ((v98 & 0x80u) != 0) {
          std::string::size_type v98 = v97->__r_.__value_.__l.__size_;
        }
        if (v93 == v98)
        {
          if (v99 < 0) {
            float v97 = (std::string *)v97->__r_.__value_.__r.__words[0];
          }
          uint64_t v100 = &__p;
          uint64_t v101 = v138;
          while (*(unsigned __int8 *)v100 == v97->__r_.__value_.__s.__data_[0])
          {
            uint64_t v100 = (void **)((char *)v100 + 1);
            float v97 = (std::string *)((char *)v97 + 1);
            if (!--v101)
            {
              BOOL negate = 1;
              int v36 = 5;
              if ((v138 & 0x80000000) == 0) {
                goto LABEL_190;
              }
              goto LABEL_189;
            }
          }
        }
        BOOL v96 = ++v94 < v91;
      }
      while (v94 != v95);
    }
    BOOL v96 = 0;
    int v36 = 0;
    if ((v138 & 0x80000000) == 0) {
      goto LABEL_190;
    }
    goto LABEL_189;
  }
LABEL_191:
  if (v36)
  {
LABEL_214:
    uint64_t v37 = 2;
    goto LABEL_215;
  }
  uint64_t v37 = 2;
  unsigned __int8 v39 = *v2->__current_;
  unsigned __int8 v135 = v39;
  if (this->__icase_)
  {
LABEL_59:
    unsigned __int8 v39 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v39);
    unsigned __int8 v135 = v39;
  }
LABEL_60:
  std::vector<char>::pointer v40 = this->__chars_.__begin_;
  unint64_t v41 = this->__chars_.__end_ - v40;
  if (v41)
  {
    if (v41 <= 1) {
      unint64_t v41 = 1;
    }
    while (1)
    {
      int v42 = *v40++;
      if (v42 == v39) {
        break;
      }
      if (!--v41) {
        goto LABEL_65;
      }
    }
LABEL_76:
    BOOL negate = 1;
    goto LABEL_215;
  }
LABEL_65:
  std::regex_traits<char>::char_class_type v43 = this->__neg_mask_;
  if (v43 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v39 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v39] & v43) == 0) {
      int v44 = (v39 == 95) & (v43 >> 7);
    }
    else {
      LOBYTE(v44) = 1;
    }
    std::vector<char>::pointer end = this->__neg_chars_.__end_;
    std::vector<char>::pointer v46 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v39, end - this->__neg_chars_.__begin_);
    unint64_t v47 = v46 ? v46 : end;
    if ((v44 & 1) == 0 && v47 == end) {
      goto LABEL_76;
    }
  }
  std::vector<std::pair<std::string, std::string>>::pointer v49 = this->__ranges_.__begin_;
  std::vector<std::pair<std::string, std::string>>::pointer v48 = this->__ranges_.__end_;
  if (v49 != v48)
  {
    if (this->__collate_)
    {
      char v138 = 1;
      LOWORD(__p) = v39;
      (*(void (**)(void **__return_ptr))(*(void *)this->__traits_.__col_ + 32))(__src);
      if (v138 < 0) {
        operator delete(__p);
      }
      std::vector<std::pair<std::string, std::string>>::pointer v49 = this->__ranges_.__begin_;
      uint64_t v50 = v134;
      int64_t v51 = (char *)this->__ranges_.__end_ - (char *)v49;
      if (v51)
      {
LABEL_82:
        v125 = v2;
        uint64_t v127 = v37;
        BOOL v130 = negate;
        uint64_t v52 = 0;
        unint64_t v53 = v51 / 48;
        char v123 = v50;
        if ((v50 & 0x80u) == 0) {
          uint64_t v54 = (void *)v50;
        }
        else {
          uint64_t v54 = __src[1];
        }
        if ((v50 & 0x80u) == 0) {
          char v55 = __src;
        }
        else {
          char v55 = (void **)__src[0];
        }
        if (v53 <= 1) {
          uint64_t v56 = 1;
        }
        else {
          uint64_t v56 = v51 / 48;
        }
        BOOL v57 = 1;
        do
        {
          int v58 = SHIBYTE(v49->first.__r_.__value_.__r.__words[2]);
          if (v58 >= 0) {
            size_t v59 = HIBYTE(v49->first.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v59 = v49->first.__r_.__value_.__l.__size_;
          }
          if (v58 >= 0) {
            std::vector<std::pair<std::string, std::string>>::pointer v60 = v49;
          }
          else {
            std::vector<std::pair<std::string, std::string>>::pointer v60 = (std::vector<std::pair<std::string, std::string>>::pointer)v49->first.__r_.__value_.__r.__words[0];
          }
          if (v59 >= (unint64_t)v54) {
            size_t v61 = (size_t)v54;
          }
          else {
            size_t v61 = v59;
          }
          int v62 = memcmp(v55, v60, v61);
          BOOL v63 = (unint64_t)v54 >= v59;
          if (v62) {
            BOOL v63 = v62 >= 0;
          }
          if (v63)
          {
            int v64 = SHIBYTE(v49->second.__r_.__value_.__r.__words[2]);
            if (v64 >= 0) {
              size_t v65 = HIBYTE(v49->second.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t v65 = v49->second.__r_.__value_.__l.__size_;
            }
            if (v64 >= 0) {
              uint64_t v66 = &v49->second;
            }
            else {
              uint64_t v66 = (std::string *)v49->second.__r_.__value_.__l.__data_;
            }
            if ((unint64_t)v54 >= v65) {
              size_t v67 = v65;
            }
            else {
              size_t v67 = (size_t)v54;
            }
            int v68 = memcmp(v66, v55, v67);
            BOOL v69 = v65 >= (unint64_t)v54;
            if (v68) {
              BOOL v69 = v68 >= 0;
            }
            if (v69)
            {
              BOOL negate = 1;
              char v2 = v125;
              uint64_t v37 = v127;
              if ((v123 & 0x80) == 0) {
                goto LABEL_122;
              }
              goto LABEL_121;
            }
          }
          BOOL v57 = ++v52 < v53;
          ++v49;
        }
        while (v56 != v52);
        char v2 = v125;
        uint64_t v37 = v127;
        BOOL negate = v130;
        if ((v123 & 0x80) == 0) {
          goto LABEL_122;
        }
        goto LABEL_121;
      }
    }
    else
    {
      unsigned __int8 v134 = 1;
      LOWORD(__src[0]) = v39;
      uint64_t v50 = 1;
      int64_t v51 = (char *)v48 - (char *)v49;
      if (v51) {
        goto LABEL_82;
      }
    }
    BOOL v57 = 0;
    if ((v50 & 0x80) == 0)
    {
LABEL_122:
      if (v57) {
        goto LABEL_215;
      }
      goto LABEL_123;
    }
LABEL_121:
    operator delete(__src[0]);
    goto LABEL_122;
  }
LABEL_123:
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
  {
LABEL_154:
    if ((v39 & 0x80) != 0) {
      goto LABEL_215;
    }
    std::regex_traits<char>::char_class_type v87 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v39] & v87) == 0)
    {
      int v88 = (v87 >> 7) & 1;
      if (v39 != 95) {
        int v88 = 0;
      }
      if (v88 != 1) {
        goto LABEL_215;
      }
    }
    goto LABEL_76;
  }
  std::regex_traits<char>::__transform_primary<char *>(&v135, (uint64_t)&this->__traits_, &__p, (uint64_t)&__p);
  std::vector<std::string>::pointer v70 = this->__equivalences_.__begin_;
  uint64_t v71 = v138;
  int64_t v72 = (char *)this->__equivalences_.__end_ - (char *)v70;
  if (v72)
  {
    uint64_t v128 = v37;
    BOOL v131 = negate;
    uint64_t v73 = 0;
    unint64_t v74 = v72 / 24;
    float v76 = __p;
    size_t v75 = __n;
    if (v138 >= 0) {
      size_t v77 = v138;
    }
    else {
      size_t v77 = __n;
    }
    if (v74 <= 1) {
      uint64_t v78 = 1;
    }
    else {
      uint64_t v78 = v72 / 24;
    }
    BOOL v79 = 1;
    while (1)
    {
      float v81 = &v70[v73];
      std::string::size_type v82 = HIBYTE(v81->__r_.__value_.__r.__words[2]);
      int v83 = (char)v82;
      if ((v82 & 0x80u) != 0) {
        std::string::size_type v82 = v81->__r_.__value_.__l.__size_;
      }
      if (v77 == v82)
      {
        if (v83 >= 0) {
          float v84 = &v70[v73];
        }
        else {
          float v84 = (std::string *)v81->__r_.__value_.__r.__words[0];
        }
        if ((v71 & 0x80) != 0)
        {
          v126 = v70;
          int v80 = memcmp(v76, v84, v75);
          std::vector<std::string>::pointer v70 = v126;
          if (!v80)
          {
            BOOL negate = 1;
            uint64_t v37 = v128;
            goto LABEL_151;
          }
        }
        else
        {
          if (!v71)
          {
            BOOL negate = 1;
            uint64_t v37 = v128;
            if (!v79) {
              goto LABEL_153;
            }
            goto LABEL_215;
          }
          float v85 = &__p;
          uint64_t v86 = v71;
          while (*(unsigned __int8 *)v85 == v84->__r_.__value_.__s.__data_[0])
          {
            float v85 = (void **)((char *)v85 + 1);
            float v84 = (std::string *)((char *)v84 + 1);
            if (!--v86)
            {
              BOOL negate = 1;
              uint64_t v37 = v128;
              if ((v71 & 0x80) == 0) {
                goto LABEL_152;
              }
              goto LABEL_151;
            }
          }
        }
      }
      BOOL v79 = ++v73 < v74;
      if (v73 == v78)
      {
        BOOL negate = v131;
        uint64_t v37 = v128;
        if ((v71 & 0x80) == 0) {
          goto LABEL_152;
        }
        goto LABEL_151;
      }
    }
  }
  BOOL v79 = 0;
  if (v138 < 0) {
LABEL_151:
  }
    operator delete(__p);
LABEL_152:
  if (!v79)
  {
LABEL_153:
    unsigned __int8 v39 = v135;
    goto LABEL_154;
  }
LABEL_215:
  if (negate == this->__negate_)
  {
    first = 0;
    int v108 = -993;
  }
  else
  {
    v2->__current_ += v37;
    first = this->__first_;
    int v108 = -995;
  }
  v2->__do_ = v108;
  v2->__node_ = first;
}

void sub_192432C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  locale = a1[17].__locale_;
  if (locale)
  {
    uint64_t v3 = a1[18].__locale_;
    unint64_t v4 = a1[17].__locale_;
    if (v3 != locale)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*((void **)v3 - 3));
        }
        uint64_t v3 = (std::locale::__imp *)((char *)v3 - 24);
      }
      while (v3 != locale);
      unint64_t v4 = a1[17].__locale_;
    }
    a1[18].__locale_ = locale;
    operator delete(v4);
  }
  unsigned int v5 = a1[14].__locale_;
  if (v5)
  {
    a1[15].__locale_ = v5;
    operator delete(v5);
  }
  char v6 = a1[11].__locale_;
  if (v6)
  {
    char v7 = a1[12].__locale_;
    unint64_t v8 = a1[11].__locale_;
    if (v7 == v6)
    {
LABEL_21:
      a1[12].__locale_ = v6;
      operator delete(v8);
      goto LABEL_22;
    }
    while (1)
    {
      if (*((char *)v7 - 1) < 0)
      {
        operator delete(*((void **)v7 - 3));
        if (*((char *)v7 - 25) < 0) {
LABEL_19:
        }
          operator delete(*((void **)v7 - 6));
      }
      else if (*((char *)v7 - 25) < 0)
      {
        goto LABEL_19;
      }
      char v7 = (std::locale::__imp *)((char *)v7 - 48);
      if (v7 == v6)
      {
        unint64_t v8 = a1[11].__locale_;
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v9 = a1[8].__locale_;
  if (v9)
  {
    a1[9].__locale_ = v9;
    operator delete(v9);
  }
  uint64_t v10 = a1[5].__locale_;
  if (v10)
  {
    a1[6].__locale_ = v10;
    operator delete(v10);
  }
  std::locale::~locale(a1 + 2);
  uint64_t v11 = a1[1].__locale_;
  if (v11) {
    (*(void (**)(std::locale::__imp *))(*(void *)v11 + 8))(v11);
  }
  return a1;
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, unsigned char *__src, unsigned char *a3)
{
  size_t v3 = a3 - __src;
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v3 <= 0x16)
  {
    HIBYTE(v14) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = (void **)&__dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(p_dst, __src, v3);
    p_dst = (void **)((char *)p_dst + v3);
    goto LABEL_9;
  }
  uint64_t v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v3 | 7) != 0x17) {
    uint64_t v8 = v3 | 7;
  }
  uint64_t v9 = v8 + 1;
  p_dst = (void **)operator new(v8 + 1);
  size_t v13 = v3;
  int64_t v14 = v9 | 0x8000000000000000;
  long long __dst = p_dst;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  *(unsigned char *)p_dst = 0;
  size_t v10 = HIBYTE(v14);
  if (v14 >= 0) {
    uint64_t v11 = (void **)&__dst;
  }
  else {
    uint64_t v11 = __dst;
  }
  if (v14 < 0) {
    size_t v10 = v13;
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v11, (char *)v11 + v10);
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst);
  }
}

void sub_192432F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__lookup_collatename<char *>(unsigned char *__src@<X1>, uint64_t a2@<X0>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5 = a3 - __src;
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 <= 0x16)
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = &__dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(p_dst, __src, v5);
    p_dst = (std::string *)((char *)p_dst + v5);
    goto LABEL_9;
  }
  uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v10 = v5 | 7;
  }
  uint64_t v11 = v10 + 1;
  p_dst = (std::string *)operator new(v10 + 1);
  __dst.__r_.__value_.__l.__size_ = v5;
  __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  p_dst->__r_.__value_.__s.__data_[0] = 0;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__dst.__r_.__value_.__l.__size_) {
      goto LABEL_17;
    }
    BOOL v12 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__dst.__r_.__value_.__s + 23)) {
      return;
    }
    BOOL v12 = &__dst;
  }
  std::__get_collation_name(&v17, (const char *)v12);
  *(_OWORD *)a4 = *(_OWORD *)&v17.__r_.__value_.__l.__data_;
  unint64_t v13 = v17.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v17.__r_.__value_.__l + 2);
  unint64_t v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0) {
    unint64_t v14 = *(void *)(a4 + 8);
  }
  if (v14) {
    goto LABEL_17;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__dst.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_17;
    }
  }
  else if (HIBYTE(__dst.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v17);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(std::string *)a4 = v17;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    int v15 = *(unsigned __int8 *)(a4 + 23);
    if (v15 != 12 && v15 != 1)
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
      goto LABEL_17;
    }
    goto LABEL_31;
  }
  uint64_t v16 = *(void *)(a4 + 8);
  if (v16 == 1 || v16 == 12)
  {
LABEL_31:
    std::string::operator=((std::string *)a4, &__dst);
    goto LABEL_17;
  }
  **(unsigned char **)a4 = 0;
  *(void *)(a4 + 8) = 0;
LABEL_17:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_192433138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<char *>(unsigned char *__src@<X1>, uint64_t a2@<X0>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5 = a3 - __src;
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 <= 0x16)
  {
    HIBYTE(v19) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = (void **)&__dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(p_dst, __src, v5);
    p_dst = (void **)((char *)p_dst + v5);
    goto LABEL_9;
  }
  uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v10 = v5 | 7;
  }
  uint64_t v11 = v10 + 1;
  p_dst = (void **)operator new(v10 + 1);
  size_t v18 = v5;
  int64_t v19 = v11 | 0x8000000000000000;
  std::string __dst = p_dst;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  *(unsigned char *)p_dst = 0;
  size_t v12 = HIBYTE(v19);
  if (v19 >= 0) {
    unint64_t v13 = (void **)&__dst;
  }
  else {
    unint64_t v13 = __dst;
  }
  if (v19 < 0) {
    size_t v12 = v18;
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v13, (char *)v13 + v12);
  uint64_t v14 = *(unsigned __int8 *)(a4 + 23);
  int v15 = (char)v14;
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = *(void *)(a4 + 8);
  }
  if (v14 == 1)
  {
LABEL_25:
    if ((SHIBYTE(v19) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_26;
  }
  if (v14 == 12)
  {
    if (v15 >= 0) {
      uint64_t v16 = (unsigned char *)a4;
    }
    else {
      uint64_t v16 = *(unsigned char **)a4;
    }
    v16[11] = v16[3];
    if (SHIBYTE(v19) < 0) {
      goto LABEL_26;
    }
    return;
  }
  if ((v15 & 0x80000000) == 0)
  {
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 23) = 0;
    goto LABEL_25;
  }
  **(unsigned char **)a4 = 0;
  *(void *)(a4 + 8) = 0;
  if (SHIBYTE(v19) < 0) {
LABEL_26:
  }
    operator delete(__dst);
}

void sub_192433310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FF0EF0](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_192433370(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  unint64_t v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  int v5 = *a2;
  if (v5 == 93) {
    return v4;
  }
  char v6 = (char *)a4;
  memset(&v33, 0, sizeof(v33));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_10:
    int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_11;
  }
  int v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 != 58)
    {
      if (v9 == 61)
      {
        char v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(a1, a2 + 2, a3, a4);
        char v10 = 0;
        if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_62;
        }
        goto LABEL_61;
      }
      goto LABEL_10;
    }
    int64_t v19 = a2 + 2;
    if (a3 - (v4 + 2) >= 2)
    {
      uint64_t v20 = 0;
      uint64_t v21 = (unsigned __int8 *)v4;
      if (v4[2] != 58) {
        goto LABEL_37;
      }
LABEL_36:
      if (v21[3] == 93)
      {
        int v27 = &v4[v20 + 2];
        if (v27 != a3)
        {
          int v28 = std::regex_traits<char>::__lookup_classname<char const*>(a1, v19, v27, *(_DWORD *)(a1 + 24) & 1);
          if (!v28) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
          }
          char v10 = 0;
          *((_DWORD *)v6 + 40) |= v28;
          char v6 = &v4[v20 + 4];
          if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_61;
          }
          goto LABEL_62;
        }
      }
      else
      {
LABEL_37:
        while (a3 - v4 - 4 != v20)
        {
          uint64_t v21 = (unsigned __int8 *)&v4[++v20];
          if (v4[v20 + 2] == 58) {
            goto LABEL_36;
          }
        }
      }
    }
LABEL_83:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  BOOL v22 = a2 + 2;
  if (a3 - (v4 + 2) < 2) {
    goto LABEL_83;
  }
  uint64_t v23 = a3 - v4 - 4;
  unint64_t v24 = v4 + 2;
  std::vector<std::pair<std::string, std::string>>::pointer v25 = v22 + 1;
  if (*v22 != 46) {
    goto LABEL_43;
  }
LABEL_42:
  if (*v25 != 93)
  {
LABEL_43:
    while (v23)
    {
      --v23;
      unint64_t v24 = v25;
      int v26 = *v25++;
      if (v26 == 46) {
        goto LABEL_42;
      }
    }
    goto LABEL_83;
  }
  if (v24 == a3) {
    goto LABEL_83;
  }
  std::regex_traits<char>::__lookup_collatename<char const*>(v22, a1, v24, (uint64_t)&v34);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  std::string v33 = v34;
  std::string::size_type size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v33.__r_.__value_.__l.__size_;
  }
  if (size - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  unint64_t v4 = v24 + 2;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  uint64_t v14 = v4;
  if (!size)
  {
LABEL_11:
    if ((v11 | 0x40) == 0x40)
    {
      int v12 = *v4;
      if (v12 == 92)
      {
        unint64_t v13 = v4 + 1;
        if (v11)
        {
          uint64_t v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v13, a3, &v33);
        }
        else
        {
          uint64_t v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v13, (unsigned __int8 *)a3, &v33, (uint64_t)v6);
          int v11 = 0;
        }
        goto LABEL_17;
      }
    }
    else
    {
      LOBYTE(v12) = *v4;
    }
    std::string::operator=(&v33, v12);
    uint64_t v14 = v4 + 1;
  }
LABEL_17:
  if (v14 == a3
    || (int v15 = *v14, v15 == 93)
    || (uint64_t v17 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v17 == 93)
  {
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v33.__r_.__value_.__l.__size_) {
        goto LABEL_60;
      }
      if (v33.__r_.__value_.__l.__size_ != 1)
      {
        uint64_t v16 = (std::string *)v33.__r_.__value_.__r.__words[0];
LABEL_59:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v6, v16->__r_.__value_.__s.__data_[0], v16->__r_.__value_.__s.__data_[1]);
LABEL_60:
        char v10 = 1;
        unint64_t v4 = v14;
        if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_62;
        }
        goto LABEL_61;
      }
      uint64_t v16 = (std::string *)v33.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (!*((unsigned char *)&v33.__r_.__value_.__s + 23)) {
        goto LABEL_60;
      }
      uint64_t v16 = &v33;
      if (HIBYTE(v33.__r_.__value_.__r.__words[2]) != 1) {
        goto LABEL_59;
      }
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, v16->__r_.__value_.__s.__data_[0]);
    goto LABEL_60;
  }
  memset(&v34, 0, sizeof(v34));
  unint64_t v4 = v14 + 2;
  if (v14 + 2 == a3 || *v17 != 91 || *v4 != 46)
  {
    if ((v11 | 0x40) == 0x40)
    {
      LODWORD(v17) = *v17;
      if (v17 == 92)
      {
        if (v11) {
          size_t v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v14 + 2, a3, &v34);
        }
        else {
          size_t v18 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v14 + 2, (unsigned __int8 *)a3, &v34, (uint64_t)v6);
        }
        goto LABEL_73;
      }
    }
    else
    {
      LOBYTE(v17) = *v17;
    }
    std::string::operator=(&v34, (std::string::value_type)v17);
    goto LABEL_74;
  }
  size_t v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v14 + 3, a3, (uint64_t)&v34);
LABEL_73:
  unint64_t v4 = v18;
LABEL_74:
  std::string v32 = v33;
  memset(&v33, 0, sizeof(v33));
  std::string __p = v34;
  memset(&v34, 0, sizeof(v34));
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]((uint64_t)v6, (char *)&v32, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_76:
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_77;
      }
LABEL_81:
      operator delete(v34.__r_.__value_.__l.__data_);
      char v10 = 1;
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_61;
      }
      goto LABEL_62;
    }
  }
  else if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_76;
  }
  operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_81;
  }
LABEL_77:
  char v10 = 1;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
LABEL_61:
  }
    operator delete(v33.__r_.__value_.__l.__data_);
LABEL_62:
  if (v10) {
    return v4;
  }
  return v6;
}

void sub_192433830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 - 49) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 - 49) & 0x80000000) == 0)
  {
LABEL_4:
    if ((a28 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(*(void **)(v28 - 72));
  if ((a28 & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(a23);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  if (a3 - __src < 2 || a3 - 1 == __src) {
    goto LABEL_39;
  }
  uint64_t v7 = 0;
  uint64_t v8 = __src;
  if (*__src != 61) {
    goto LABEL_5;
  }
LABEL_4:
  if (v8[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v7)
    {
      uint64_t v8 = &__src[++v7];
      if (__src[v7] == 61) {
        goto LABEL_4;
      }
    }
LABEL_39:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (&__src[v7] == a3) {
    goto LABEL_39;
  }
  std::regex_traits<char>::__lookup_collatename<char const*>(__src, a1, &__src[v7], (uint64_t)&__p);
  if (((char)v22 & 0x80000000) == 0)
  {
    uint64_t v9 = v22;
    if (v22)
    {
      p_p = (char *)&__p;
      goto LABEL_14;
    }
LABEL_40:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  uint64_t v9 = v21;
  if (!v21) {
    goto LABEL_40;
  }
  p_p = (char *)__p;
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, (uint64_t)p_p, &p_p[v9], (uint64_t)__s);
  int v11 = (std::string::value_type *)HIBYTE(v19);
  if (v19 < 0) {
    int v11 = __s[1];
  }
  if (v11)
  {
    unint64_t v12 = *(void *)(a4 + 144);
    if (v12 >= *(void *)(a4 + 152))
    {
      *(void *)(a4 + 144) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a4 + 136), (uint64_t)__s);
      if (SHIBYTE(v19) < 0) {
        goto LABEL_37;
      }
    }
    else
    {
      if (SHIBYTE(v19) < 0)
      {
        std::string::__init_copy_ctor_external(*(std::string **)(a4 + 144), __s[0], (std::string::size_type)__s[1]);
      }
      else
      {
        long long v13 = *(_OWORD *)__s;
        *(void *)(v12 + 16) = v19;
        *(_OWORD *)unint64_t v12 = v13;
      }
      *(void *)(a4 + 144) = v12 + 24;
      *(void *)(a4 + 144) = v12 + 24;
      if (SHIBYTE(v19) < 0) {
        goto LABEL_37;
      }
    }
  }
  else
  {
    uint64_t v14 = v22;
    if ((v22 & 0x80u) != 0) {
      uint64_t v14 = v21;
    }
    if (v14 == 2)
    {
      uint64_t v16 = (char *)&__p;
      if ((v22 & 0x80u) != 0) {
        uint64_t v16 = (char *)__p;
      }
      std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](a4, *v16, v16[1]);
    }
    else
    {
      if (v14 != 1) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
      }
      int v15 = (char *)&__p;
      if ((v22 & 0x80u) != 0) {
        int v15 = (char *)__p;
      }
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a4, *v15);
    }
    if (SHIBYTE(v19) < 0)
    {
LABEL_37:
      operator delete(__s[0]);
      if ((char)v22 < 0) {
        goto LABEL_38;
      }
      return &__src[v7 + 2];
    }
  }
  if ((char)v22 < 0) {
LABEL_38:
  }
    operator delete(__p);
  return &__src[v7 + 2];
}

void sub_192433AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  *(void *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  if (a3 - __src < 2 || a3 - 1 == __src) {
    goto LABEL_15;
  }
  uint64_t v6 = 0;
  uint64_t v7 = __src;
  if (*__src != 46) {
    goto LABEL_5;
  }
LABEL_4:
  if (v7[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v6)
    {
      uint64_t v7 = &__src[++v6];
      if (__src[v6] == 46) {
        goto LABEL_4;
      }
    }
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (&__src[v6] == a3) {
    goto LABEL_15;
  }
  std::regex_traits<char>::__lookup_collatename<char const*>(__src, a1, &__src[v6], (uint64_t)&v11);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v11;
  unint64_t v8 = v12;
  *(void *)(a4 + 16) = v12;
  unint64_t v9 = HIBYTE(v8);
  if ((v9 & 0x80u) != 0) {
    unint64_t v9 = *(void *)(a4 + 8);
  }
  if (v9 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return &__src[v6 + 2];
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, std::string *this, uint64_t a5)
{
  if (a2 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      uint64_t result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_6;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      uint64_t result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
      uint64_t result = a2 + 1;
      break;
    case 'b':
      std::string::operator=(this, 8);
      uint64_t result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      uint64_t result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      uint64_t result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
      uint64_t result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_6:
        uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, this);
      }
      else
      {
        std::string::operator=(this, 0);
        uint64_t result = a2 + 1;
      }
      break;
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  if (a2 == a3) {
LABEL_51:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  int v5 = *a2;
  switch(v5)
  {
    case '""':
    case '/':
    case '\\':
      if (this) {
        std::string::operator=(this, v5);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      }
      return a2 + 1;
    case 'a':
      if (this) {
        std::string::operator=(this, 7);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 7);
      }
      return a2 + 1;
    case 'b':
      if (this) {
        std::string::operator=(this, 8);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 8);
      }
      return a2 + 1;
    case 'f':
      if (this) {
        std::string::operator=(this, 12);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
      }
      return a2 + 1;
    case 'n':
      if (this) {
        std::string::operator=(this, 10);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
      }
      return a2 + 1;
    case 'r':
      if (this) {
        std::string::operator=(this, 13);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
      }
      return a2 + 1;
    case 't':
      if (this) {
        std::string::operator=(this, 9);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
      }
      return a2 + 1;
    case 'v':
      if (this) {
        std::string::operator=(this, 11);
      }
      else {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
      }
      return a2 + 1;
    default:
      if ((v5 & 0xFFFFFFF8) != 0x30) {
        goto LABEL_51;
      }
      uint64_t v7 = a2 + 1;
      if (a2 + 1 == a3)
      {
        uint64_t v7 = a3;
LABEL_40:
        std::string::value_type v12 = v5 - 48;
        if (this) {
          goto LABEL_41;
        }
        goto LABEL_50;
      }
      if ((*v7 & 0xF8) != 0x30) {
        goto LABEL_40;
      }
      std::string::value_type v8 = *v7 + 8 * (v5 - 48) - 48;
      if (a2 + 2 != a3)
      {
        char v9 = a2[2];
        int v10 = v9 & 0xF8;
        std::string::value_type v11 = v9 + 8 * v8 - 48;
        if (v10 == 48) {
          uint64_t v7 = a2 + 3;
        }
        else {
          uint64_t v7 = a2 + 2;
        }
        if (v10 == 48) {
          std::string::value_type v8 = v11;
        }
        std::string::value_type v12 = v8;
        if (!this) {
          goto LABEL_50;
        }
LABEL_41:
        std::string::operator=(this, v12);
        return v7;
      }
      uint64_t v7 = a3;
      std::string::value_type v12 = v8;
      if (this) {
        goto LABEL_41;
      }
LABEL_50:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v12);
      return v7;
  }
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = (uint64_t)a2;
  if (!*(unsigned char *)(a1 + 170))
  {
    uint64_t v16 = a2[23];
    if (a2[23] < 0)
    {
      if (*((void *)a2 + 1) != 1) {
        goto LABEL_74;
      }
    }
    else if (v16 != 1)
    {
LABEL_74:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    }
    if (*(char *)(a3 + 23) < 0)
    {
      if (*(void *)(a3 + 8) != 1) {
        goto LABEL_74;
      }
    }
    else if (*(unsigned char *)(a3 + 23) != 1)
    {
      goto LABEL_74;
    }
    if (!*(unsigned char *)(a1 + 169))
    {
LABEL_67:
      *(_OWORD *)std::string __p = *(_OWORD *)v4;
      uint64_t v49 = *(void *)(v4 + 16);
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      *(void *)uint64_t v4 = 0;
      *(_OWORD *)uint64_t v50 = *(_OWORD *)v3;
      uint64_t v51 = *(void *)(v3 + 16);
      *(void *)(v3 + 8) = 0;
      *(void *)(v3 + 16) = 0;
      *(void *)uint64_t v3 = 0;
      unint64_t v39 = *(void *)(a1 + 96);
      if (v39 < *(void *)(a1 + 104))
      {
        long long v40 = *(_OWORD *)__p;
        *(void *)(v39 + 16) = v49;
        *(_OWORD *)unint64_t v39 = v40;
        __p[1] = 0;
        uint64_t v49 = 0;
        __p[0] = 0;
        uint64_t v41 = v51;
        *(_OWORD *)(v39 + 24) = *(_OWORD *)v50;
        *(void *)(v39 + 40) = v41;
        v50[1] = 0;
        uint64_t v51 = 0;
        v50[0] = 0;
        *(void *)(a1 + 96) = v39 + 48;
        if (SHIBYTE(v49) < 0) {
          goto LABEL_69;
        }
        return;
      }
      int v42 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
      int v43 = SHIBYTE(v51);
      *(void *)(a1 + 96) = v42;
      if ((v43 & 0x80000000) == 0)
      {
        if (SHIBYTE(v49) < 0) {
          goto LABEL_69;
        }
        return;
      }
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0) {
        return;
      }
LABEL_69:
      operator delete(__p[0]);
      return;
    }
    std::string v34 = a2;
    if ((v16 & 0x80) != 0) {
      std::string v34 = *(char **)a2;
    }
    char v35 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v34);
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)uint64_t v4 = v35;
      int v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0) {
        goto LABEL_64;
      }
    }
    else
    {
      *(unsigned char *)uint64_t v4 = v35;
      int v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
      {
LABEL_64:
        char v37 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v36);
        size_t v38 = (unsigned char *)v3;
        if (*(char *)(v3 + 23) < 0) {
          size_t v38 = *(unsigned char **)v3;
        }
        *size_t v38 = v37;
        goto LABEL_67;
      }
    }
    int v36 = *(char **)v3;
    goto LABEL_64;
  }
  if (*(unsigned char *)(a1 + 169))
  {
    for (unint64_t i = 0; ; ++i)
    {
      unint64_t v7 = *(unsigned __int8 *)(v4 + 23);
      if (*(char *)(v4 + 23) < 0)
      {
        if (i >= *(void *)(v4 + 8))
        {
LABEL_13:
          for (unint64_t j = 0; ; ++j)
          {
            unint64_t v12 = *(unsigned __int8 *)(v3 + 23);
            if (*(char *)(v3 + 23) < 0)
            {
              if (j >= *(void *)(v3 + 8)) {
                goto LABEL_44;
              }
            }
            else if (j >= v12)
            {
              goto LABEL_44;
            }
            uint64_t v13 = v3;
            if ((v12 & 0x80) != 0) {
              uint64_t v13 = *(void *)v3;
            }
            char v14 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *(char *)(v13 + j));
            uint64_t v15 = v3;
            if (*(char *)(v3 + 23) < 0) {
              uint64_t v15 = *(void *)v3;
            }
            *(unsigned char *)(v15 + j) = v14;
          }
        }
      }
      else if (i >= v7)
      {
        goto LABEL_13;
      }
      uint64_t v8 = v4;
      if ((v7 & 0x80) != 0) {
        uint64_t v8 = *(void *)v4;
      }
      char v9 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *(char *)(v8 + i));
      uint64_t v10 = v4;
      if (*(char *)(v4 + 23) < 0) {
        uint64_t v10 = *(void *)v4;
      }
      *(unsigned char *)(v10 + i) = v9;
    }
  }
  for (unint64_t k = 0; ; ++k)
  {
    unint64_t v19 = a2[23];
    if (a2[23] < 0) {
      break;
    }
    if (k >= v19) {
      goto LABEL_35;
    }
LABEL_33:
    size_t v18 = a2;
    if ((v19 & 0x80) != 0)
    {
      size_t v18 = *(char **)a2;
      uint64_t v20 = *(char **)a2;
    }
    else
    {
      uint64_t v20 = a2;
    }
    v20[k] = v18[k];
  }
  if (k < *((void *)a2 + 1)) {
    goto LABEL_33;
  }
LABEL_35:
  for (unint64_t m = 0; ; ++m)
  {
    unint64_t v23 = *(unsigned __int8 *)(a3 + 23);
    if (*(char *)(a3 + 23) < 0) {
      break;
    }
    if (m >= v23) {
      goto LABEL_44;
    }
LABEL_42:
    uint64_t v22 = a3;
    if ((v23 & 0x80) != 0)
    {
      uint64_t v22 = *(void *)a3;
      uint64_t v24 = *(void *)a3;
    }
    else
    {
      uint64_t v24 = a3;
    }
    *(unsigned char *)(v24 + m) = *(unsigned char *)(v22 + m);
  }
  if (m < *(void *)(a3 + 8)) {
    goto LABEL_42;
  }
LABEL_44:
  if (*(char *)(v4 + 23) < 0)
  {
    uint64_t v26 = v4;
    uint64_t v4 = *(void *)v4;
    uint64_t v25 = *(void *)(v26 + 8);
  }
  else
  {
    uint64_t v25 = *(unsigned __int8 *)(v4 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v4, (char *)(v4 + v25));
  if (*(char *)(v3 + 23) < 0)
  {
    uint64_t v28 = v3;
    uint64_t v3 = *(void *)v3;
    uint64_t v27 = *(void *)(v28 + 8);
  }
  else
  {
    uint64_t v27 = *(unsigned __int8 *)(v3 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v3, (char *)(v3 + v27));
  *(_OWORD *)std::string __p = *(_OWORD *)v46;
  uint64_t v49 = v47;
  *(_OWORD *)uint64_t v50 = *(_OWORD *)v44;
  uint64_t v51 = v45;
  unint64_t v29 = *(void *)(a1 + 96);
  if (v29 >= *(void *)(a1 + 104))
  {
    std::string v32 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
    int v33 = SHIBYTE(v51);
    *(void *)(a1 + 96) = v32;
    if (v33 < 0)
    {
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0) {
        return;
      }
    }
    else if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
      return;
    }
    goto LABEL_69;
  }
  long long v30 = *(_OWORD *)__p;
  *(void *)(v29 + 16) = v49;
  *(_OWORD *)unint64_t v29 = v30;
  __p[1] = 0;
  uint64_t v49 = 0;
  __p[0] = 0;
  uint64_t v31 = v51;
  *(_OWORD *)(v29 + 24) = *(_OWORD *)v50;
  *(void *)(v29 + 40) = v31;
  v50[1] = 0;
  uint64_t v51 = 0;
  v50[0] = 0;
  *(void *)(a1 + 96) = v29 + 48;
  if (SHIBYTE(v49) < 0) {
    goto LABEL_69;
  }
}

void sub_192434804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::pair<std::string const,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192434818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FF0EF0](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_192434898(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::regex_traits<char>::__lookup_collatename<char const*>(unsigned char *__src@<X1>, uint64_t a2@<X0>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5 = a3 - __src;
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 <= 0x16)
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = &__dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(p_dst, __src, v5);
    p_dst = (std::string *)((char *)p_dst + v5);
    goto LABEL_9;
  }
  uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v10 = v5 | 7;
  }
  uint64_t v11 = v10 + 1;
  p_dst = (std::string *)operator new(v10 + 1);
  __dst.__r_.__value_.__l.__size_ = v5;
  __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  p_dst->__r_.__value_.__s.__data_[0] = 0;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__dst.__r_.__value_.__l.__size_) {
      goto LABEL_17;
    }
    unint64_t v12 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__dst.__r_.__value_.__s + 23)) {
      return;
    }
    unint64_t v12 = &__dst;
  }
  std::__get_collation_name(&v17, (const char *)v12);
  *(_OWORD *)a4 = *(_OWORD *)&v17.__r_.__value_.__l.__data_;
  unint64_t v13 = v17.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v17.__r_.__value_.__l + 2);
  unint64_t v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0) {
    unint64_t v14 = *(void *)(a4 + 8);
  }
  if (v14) {
    goto LABEL_17;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__dst.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_17;
    }
  }
  else if (HIBYTE(__dst.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v17);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(std::string *)a4 = v17;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    int v15 = *(unsigned __int8 *)(a4 + 23);
    if (v15 != 12 && v15 != 1)
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
      goto LABEL_17;
    }
    goto LABEL_31;
  }
  uint64_t v16 = *(void *)(a4 + 8);
  if (v16 == 1 || v16 == 12)
  {
LABEL_31:
    std::string::operator=((std::string *)a4, &__dst);
    goto LABEL_17;
  }
  **(unsigned char **)a4 = 0;
  *(void *)(a4 + 8) = 0;
LABEL_17:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_192434AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5 = (unint64_t)&a3[-a2];
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 > 0x16)
  {
    uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v16 = v5 | 7;
    }
    uint64_t v17 = v16 + 1;
    p_p = operator new(v16 + 1);
    unint64_t v25 = v5;
    int64_t v26 = v17 | 0x8000000000000000;
    std::string __p = p_p;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    uint64_t v10 = p_p;
    goto LABEL_16;
  }
  HIBYTE(v26) = (_BYTE)a3 - a2;
  p_p = &__p;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v5 < 0x20 || (unint64_t)p_p - a2 < 0x20)
  {
    uint64_t v10 = p_p;
    uint64_t v11 = (char *)a2;
  }
  else
  {
    uint64_t v10 = (char *)p_p + (v5 & 0xFFFFFFFFFFFFFFE0);
    uint64_t v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
    unint64_t v12 = (long long *)(a2 + 16);
    unint64_t v13 = p_p + 1;
    unint64_t v14 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v15 = *v12;
      *(v13 - E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = *(v12 - 1);
      *unint64_t v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v5 == (v5 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_16;
    }
  }
  do
  {
    char v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  *uint64_t v10 = 0;
  unint64_t v19 = HIBYTE(v26);
  if (v26 >= 0) {
    uint64_t v20 = (char *)&__p;
  }
  else {
    uint64_t v20 = (char *)__p;
  }
  if (v26 < 0) {
    unint64_t v19 = v25;
  }
  (*(void (**)(void, char *, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v20, &v20[v19]);
  uint64_t v21 = *(unsigned __int8 *)(a4 + 23);
  int v22 = (char)v21;
  if ((v21 & 0x80u) != 0) {
    uint64_t v21 = *(void *)(a4 + 8);
  }
  if (v21 == 1) {
    goto LABEL_32;
  }
  if (v21 != 12)
  {
    if (v22 < 0)
    {
      **(unsigned char **)a4 = 0;
      *(void *)(a4 + 8) = 0;
      if ((SHIBYTE(v26) & 0x80000000) == 0) {
        return;
      }
LABEL_35:
      operator delete(__p);
      return;
    }
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 23) = 0;
LABEL_32:
    if ((SHIBYTE(v26) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_35;
  }
  if (v22 >= 0) {
    unint64_t v23 = (unsigned char *)a4;
  }
  else {
    unint64_t v23 = *(unsigned char **)a4;
  }
  v23[11] = v23[3];
  if (SHIBYTE(v26) < 0) {
    goto LABEL_35;
  }
}

void sub_192434CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FF0EF0](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_192434D58(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_traits<char>::__lookup_classname<char const*>(uint64_t a1, unsigned char *__src, unsigned char *a3, BOOL a4)
{
  size_t v4 = a3 - __src;
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v4 <= 0x16)
  {
    HIBYTE(v19) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = (void **)&__dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(p_dst, __src, v4);
    p_dst = (void **)((char *)p_dst + v4);
    goto LABEL_9;
  }
  uint64_t v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17) {
    uint64_t v10 = v4 | 7;
  }
  uint64_t v11 = v10 + 1;
  p_dst = (void **)operator new(v10 + 1);
  size_t v18 = v4;
  int64_t v19 = v11 | 0x8000000000000000;
  std::string __dst = p_dst;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  *(unsigned char *)p_dst = 0;
  size_t v12 = HIBYTE(v19);
  if (v19 >= 0) {
    unint64_t v13 = (void **)&__dst;
  }
  else {
    unint64_t v13 = __dst;
  }
  if (v19 < 0) {
    size_t v12 = v18;
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v13, (char *)v13 + v12);
  if (v19 >= 0) {
    unint64_t v14 = (const char *)&__dst;
  }
  else {
    unint64_t v14 = (const char *)__dst;
  }
  uint64_t classname = std::__get_classname(v14, a4);
  if (SHIBYTE(v19) < 0) {
    operator delete(__dst);
  }
  return classname;
}

void sub_192434EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3)
{
  unint64_t v3 = (unint64_t)&a3[-a2];
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v3 > 0x16)
  {
    uint64_t v14 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v14 = v3 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_p = operator new(v14 + 1);
    unint64_t v20 = v3;
    int64_t v21 = v15 | 0x8000000000000000;
    std::string __p = p_p;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    uint64_t v8 = p_p;
    goto LABEL_16;
  }
  HIBYTE(v2E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = (_BYTE)a3 - a2;
  p_p = &__p;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v3 < 0x20 || (unint64_t)p_p - a2 < 0x20)
  {
    uint64_t v8 = p_p;
    char v9 = (char *)a2;
  }
  else
  {
    uint64_t v8 = (char *)p_p + (v3 & 0xFFFFFFFFFFFFFFE0);
    char v9 = (char *)(a2 + (v3 & 0xFFFFFFFFFFFFFFE0));
    uint64_t v10 = (long long *)(a2 + 16);
    uint64_t v11 = p_p + 1;
    unint64_t v12 = v3 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v13 = *v10;
      *(v11 - E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = *(v10 - 1);
      _OWORD *v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 32;
    }
    while (v12);
    if (v3 == (v3 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_16;
    }
  }
  do
  {
    char v16 = *v9++;
    *v8++ = v16;
  }
  while (v9 != a3);
LABEL_16:
  *uint64_t v8 = 0;
  unint64_t v17 = HIBYTE(v21);
  if (v21 >= 0) {
    size_t v18 = (char *)&__p;
  }
  else {
    size_t v18 = (char *)__p;
  }
  if (v21 < 0) {
    unint64_t v17 = v20;
  }
  (*(void (**)(void, char *, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v18, &v18[v17]);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
}

void sub_192435060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FF0EF0](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1924350C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v7 = (char *)operator new(48 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v8 = &v7[48 * v3];
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
  char v9 = &v7[48 * v6];
  long long v10 = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((void *)v8 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v11 = v8 + 48;
  unint64_t v12 = (char *)*a1;
  long long v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    if (!v13) {
      return v11;
    }
    goto LABEL_23;
  }
  do
  {
    long long v14 = *((_OWORD *)v13 - 3);
    *((void *)v8 - 4) = *((void *)v13 - 4);
    *((_OWORD *)v8 - 3) = v14;
    *((void *)v13 - 5) = 0;
    *((void *)v13 - 4) = 0;
    *((void *)v13 - 6) = 0;
    long long v15 = *(_OWORD *)(v13 - 24);
    *((void *)v8 - E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = *((void *)v13 - 1);
    *(_OWORD *)(v8 - 24) = v15;
    v8 -= 48;
    *((void *)v13 - 2) = 0;
    *((void *)v13 - E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = 0;
    *((void *)v13 - 3) = 0;
    v13 -= 48;
  }
  while (v13 != v12);
  char v16 = (char *)*a1;
  long long v13 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
  if (v13 != v16)
  {
    while (1)
    {
      if (*(v13 - 1) < 0)
      {
        operator delete(*((void **)v13 - 3));
        if (*(v13 - 25) < 0) {
LABEL_20:
        }
          operator delete(*((void **)v13 - 6));
      }
      else if (*(v13 - 25) < 0)
      {
        goto LABEL_20;
      }
      v13 -= 48;
      if (v13 == v16)
      {
        long long v13 = v16;
        break;
      }
    }
  }
  if (v13) {
LABEL_23:
  }
    operator delete(v13);
  return v11;
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
}

void sub_192435638(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FF0EF0](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1924356B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FF0EF0](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_19243570C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EE37ED10;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  unint64_t v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EE37ED10;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  unint64_t v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__loop<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 40);
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 != -991)
  {
    *unint64_t v4 = 0;
    if (!*(void *)(result + 32))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_28;
    }
    if (*(void *)(result + 24))
    {
      *(_DWORD *)a2 = -994;
      *(void *)(a2 + 80) = *(void *)(result + 8);
      *(void *)(v3 + 16 * v2 + 8) = *(void *)(a2 + 16);
      int v20 = *(_DWORD *)(result + 44);
      int v21 = *(_DWORD *)(result + 48);
      if (v20 == v21) {
        return result;
      }
      uint64_t v22 = (v21 - 1);
      uint64_t v23 = (v20 - 1);
      uint64_t v24 = *(void *)(a2 + 24);
      uint64_t v25 = *(void *)(a2 + 32);
      uint64_t v26 = v22 - v23;
      if ((unint64_t)(v22 - v23) >= 2)
      {
        uint64_t v27 = (v26 & 0xFFFFFFFFFFFFFFFELL) + v23;
        uint64_t v28 = v25 + 24 * v23 + 24;
        unint64_t v29 = v26 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(void *)(v28 - 24) = v24;
          *(void *)(v28 - 16) = v24;
          *(void *)uint64_t v28 = v24;
          *(void *)(v28 + 8) = v24;
          *(unsigned char *)(v28 - 8) = 0;
          *(unsigned char *)(v28 + 16) = 0;
          v28 += 48;
          v29 -= 2;
        }
        while (v29);
        if (v26 == (v26 & 0xFFFFFFFFFFFFFFFELL)) {
          return result;
        }
      }
      else
      {
        uint64_t v27 = v23;
      }
      uint64_t v30 = v22 - v27;
      uint64_t v31 = (unsigned char *)(v25 + 24 * v27 + 16);
      do
      {
        *((void *)v31 - 2) = v24;
        *((void *)v31 - E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = v24;
        *uint64_t v31 = 0;
        v31 += 24;
        --v30;
      }
      while (v30);
      return result;
    }
LABEL_26:
    *(_DWORD *)a2 = -992;
    return result;
  }
  unint64_t v5 = *v4 + 1;
  *unint64_t v4 = v5;
  unint64_t v6 = *(void *)(result + 24);
  unint64_t v7 = *(void *)(result + 32);
  BOOL v8 = v5 < v7;
  if (v5 < v7 && v5 >= v6) {
    BOOL v8 = v5 < v7 && *(void *)(v3 + 16 * v2 + 8) != *(void *)(a2 + 16);
  }
  if (v8 && v5 >= v6) {
    goto LABEL_26;
  }
  *(_DWORD *)a2 = -994;
  if (!v8)
  {
LABEL_28:
    *(void *)(a2 + 80) = *(void *)(result + 16);
    return result;
  }
  *(void *)(a2 + 80) = *(void *)(result + 8);
  *(void *)(v3 + 16 * v2 + 8) = *(void *)(a2 + 16);
  int v12 = *(_DWORD *)(result + 44);
  int v13 = *(_DWORD *)(result + 48);
  if (v12 == v13) {
    return result;
  }
  uint64_t v14 = (v13 - 1);
  uint64_t v15 = (v12 - 1);
  uint64_t v16 = *(void *)(a2 + 24);
  uint64_t v17 = *(void *)(a2 + 32);
  uint64_t v18 = v14 - v15;
  if ((unint64_t)(v14 - v15) < 2)
  {
    uint64_t v19 = v15;
LABEL_39:
    uint64_t v34 = v14 - v19;
    char v35 = (unsigned char *)(v17 + 24 * v19 + 16);
    do
    {
      *((void *)v35 - 2) = v16;
      *((void *)v35 - E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = v16;
      *char v35 = 0;
      v35 += 24;
      --v34;
    }
    while (v34);
    return result;
  }
  uint64_t v19 = (v18 & 0xFFFFFFFFFFFFFFFELL) + v15;
  uint64_t v32 = v17 + 24 * v15 + 24;
  unint64_t v33 = v18 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    *(void *)(v32 - 24) = v16;
    *(void *)(v32 - 16) = v16;
    *(void *)uint64_t v32 = v16;
    *(void *)(v32 + 8) = v16;
    *(unsigned char *)(v32 - 8) = 0;
    *(unsigned char *)(v32 + 16) = 0;
    v32 += 48;
    v33 -= 2;
  }
  while (v33);
  if (v18 != (v18 & 0xFFFFFFFFFFFFFFFELL)) {
    goto LABEL_39;
  }
  return result;
}

uint64_t std::__loop<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  if (*(unsigned __int8 *)(result + 52) == a2)
  {
    *(void *)(a3 + 80) = *(void *)(result + 16);
    return result;
  }
  *(void *)(a3 + 80) = *(void *)(result + 8);
  int v3 = *(_DWORD *)(result + 44);
  *(void *)(*(void *)(a3 + 56) + 16 * *(unsigned int *)(result + 40) + 8) = *(void *)(a3 + 16);
  int v4 = *(_DWORD *)(result + 48);
  if (v3 != v4)
  {
    uint64_t v5 = (v4 - 1);
    uint64_t v6 = (v3 - 1);
    uint64_t v7 = *(void *)(a3 + 24);
    uint64_t v8 = *(void *)(a3 + 32);
    uint64_t v9 = v5 - v6;
    if ((unint64_t)(v5 - v6) < 2)
    {
      uint64_t v10 = v6;
LABEL_9:
      uint64_t v13 = v5 - v10;
      uint64_t v14 = (unsigned char *)(v8 + 24 * v10 + 16);
      do
      {
        *((void *)v14 - 2) = v7;
        *((void *)v14 - E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = v7;
        *uint64_t v14 = 0;
        v14 += 24;
        --v13;
      }
      while (v13);
      return result;
    }
    uint64_t v10 = (v9 & 0xFFFFFFFFFFFFFFFELL) + v6;
    uint64_t v11 = v8 + 24 * v6 + 24;
    unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(void *)(v11 - 24) = v7;
      *(void *)(v11 - 16) = v7;
      *(void *)uint64_t v11 = v7;
      *(void *)(v11 + 8) = v7;
      *(unsigned char *)(v11 - 8) = 0;
      *(unsigned char *)(v11 + 16) = 0;
      v11 += 48;
      v12 -= 2;
    }
    while (v12);
    if (v9 != (v9 & 0xFFFFFFFFFFFFFFFELL)) {
      goto LABEL_9;
    }
  }
  return result;
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EE37ED10;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EE37ED10;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }

  JUMPOUT(0x192FF16B0);
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EE37ED10;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EE37ED10;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }

  JUMPOUT(0x192FF16B0);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 80) = *(void *)(result + v3);
  return result;
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FF0EF0](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_192435F30(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>((std::basic_regex<char> *)a1, a2, a3);
  uint64_t v7 = v6;
  if (v6 != a2 || v6 == a3) {
    return v7;
  }
  if (a2 + 1 == a3) {
    return a2;
  }
  if (*a2 != 92) {
    return a2;
  }
  int v8 = a2[1];
  if (v8 == 40)
  {
    uint64_t v9 = (std::basic_regex<char> *)(a2 + 2);
    if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
      operator new();
    }
    do
    {
      if (v9 == (std::basic_regex<char> *)a3) {
        goto LABEL_24;
      }
      uint64_t v11 = v9;
      unint64_t v12 = *(std::__owns_one_state<char> **)(a1 + 56);
      int v13 = *(_DWORD *)(a1 + 28);
      uint64_t v14 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, v11, a3);
      if (v14 == v11) {
        break;
      }
      uint64_t v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, v14, (std::basic_regex<char> *)a3, v12, (v13 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    while (v9 != v11);
    if ((unsigned __int8 *)((char *)&v11->__traits_.__loc_.__locale_ + 1) == a3
      || LOBYTE(v11->__traits_.__loc_.__locale_) != 92
      || BYTE1(v11->__traits_.__loc_.__locale_) != 41)
    {
LABEL_24:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    uint64_t v7 = (unsigned __int8 *)v11 + 2 * (BYTE1(v11->__traits_.__loc_.__locale_) == 41);
    if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
      operator new();
    }
    return v7;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8) {
    return a2;
  }
  if ((v8 - 48) > *(_DWORD *)(a1 + 28)) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v8 - 48);
  return a2 + 2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  uint64_t v6 = this;
  if (this == a3) {
    return v6;
  }
  int locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
    return (std::basic_regex<char> *)((char *)v6 + 1);
  }
  if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3
    || locale_low != 92
    || BYTE1(this->__traits_.__loc_.__locale_) != 123)
  {
    return v6;
  }
  uint64_t v9 = (std::basic_regex<char> *)((char *)this + 2 * (BYTE1(this->__traits_.__loc_.__locale_) == 123));
  if (v9 == a3) {
    goto LABEL_43;
  }
  int v10 = LOBYTE(v9->__traits_.__loc_.__locale_);
  if ((v10 & 0xF8) != 0x30 && (v10 & 0xFE) != 0x38) {
    goto LABEL_43;
  }
  int v11 = v10 - 48;
  unint64_t v12 = (std::basic_regex<char> *)((char *)&v9->__traits_.__loc_.__locale_ + 1);
  if ((std::basic_regex<char> *)((char *)&v9->__traits_.__loc_.__locale_ + 1) == a3)
  {
LABEL_16:
    unint64_t v12 = a3;
  }
  else
  {
    while (1)
    {
      int v13 = LOBYTE(v12->__traits_.__loc_.__locale_);
      if ((v13 & 0xF8) != 0x30 && (v13 & 0xFE) != 0x38) {
        break;
      }
      if (v11 >= 214748364) {
        goto LABEL_43;
      }
      int v11 = v13 + 10 * v11 - 48;
      unint64_t v12 = (std::basic_regex<char> *)((char *)v12 + 1);
      if (v12 == a3) {
        goto LABEL_16;
      }
    }
  }
  if (v12 == v9) {
    goto LABEL_43;
  }
  if (v12 == a3) {
    goto LABEL_41;
  }
  uint64_t v14 = (std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 1);
  int v15 = LOBYTE(v12->__traits_.__loc_.__locale_);
  if (v15 != 44)
  {
    if (v14 != a3 && v15 == 92 && LOBYTE(v14->__traits_.__loc_.__locale_) == 125)
    {
      uint64_t v19 = (unsigned __int8 *)&v12->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, v11, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v19;
    }
    goto LABEL_41;
  }
  if (v14 == a3) {
    goto LABEL_41;
  }
  int v16 = LOBYTE(v14->__traits_.__loc_.__locale_);
  if ((v16 & 0xF8) == 0x30 || (v16 & 0xFE) == 0x38)
  {
    uint64_t v14 = (std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 2);
    if ((std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 2) == a3) {
      goto LABEL_41;
    }
    int v17 = v16 - 48;
    while (1)
    {
      int v20 = LOBYTE(v14->__traits_.__loc_.__locale_);
      if ((v20 & 0xF8) != 0x30 && (v20 & 0xFE) != 0x38) {
        break;
      }
      if (v17 >= 214748364) {
        goto LABEL_43;
      }
      int v17 = v20 + 10 * v17 - 48;
      uint64_t v14 = (std::basic_regex<char> *)((char *)v14 + 1);
      if (v14 == a3) {
        goto LABEL_41;
      }
    }
  }
  else
  {
    int v17 = -1;
  }
  if (v14 == a3
    || (std::basic_regex<char> *)((char *)&v14->__traits_.__loc_.__locale_ + 1) == a3
    || LOBYTE(v14->__traits_.__loc_.__locale_) != 92
    || BYTE1(v14->__traits_.__loc_.__locale_) != 125)
  {
LABEL_41:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  }
  uint64_t v18 = (unsigned __int8 *)v14 + 2 * (BYTE1(v14->__traits_.__loc_.__locale_) == 125);
  if (v17 != -1)
  {
    if (v17 >= v11)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, v17, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v18;
    }
LABEL_43:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
  return (std::basic_regex<char> *)v18;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 != a3)
  {
    uint64_t v5 = a2 + 1;
    int v4 = *a2;
    if (a2 + 1 != a3 || v4 != 36)
    {
      if ((v4 - 46) > 0x2E || ((1 << (v4 - 46)) & 0x600000000001) == 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v4);
        return a2 + 1;
      }
      if (v5 != a3 && v4 == 92)
      {
        int v8 = (char)*v5;
        if ((v8 - 36) <= 0x3A && ((1 << (v8 - 36)) & 0x580000000000441) != 0)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v8);
          return a2 + 2;
        }
      }
      if (*a2 == 46) {
        operator new();
      }
    }
  }

  return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8) {
    return 0;
  }
  if (a2 - 48 > this->__marked_count_) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 28);
  int v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>((std::basic_regex<char> *)a1, a2, a3);
  if (v8 == a2
    && (int v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(a1, (char *)a2, (char *)a3), v8 == a2))
  {
    if (a2 != a3 && LOBYTE(a2->__traits_.__loc_.__locale_) == 46) {
      operator new();
    }
    int v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(a1, a2, a3);
    if (v8 != a2) {
      goto LABEL_22;
    }
  }
  else if (v8 != a2)
  {
    goto LABEL_22;
  }
  if (v8 != a3)
  {
    int locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
    if (locale_low == 36) {
      operator new();
    }
    if (locale_low != 40)
    {
      if (locale_low == 94) {
        operator new();
      }
      return a2;
    }
    if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
      operator new();
    }
    ++*(_DWORD *)(a1 + 36);
    int v10 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
    if (v10 == a3 || LOBYTE(v10->__traits_.__loc_.__locale_) != 41) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
      operator new();
    }
    --*(_DWORD *)(a1 + 36);
    int v8 = (std::basic_regex<char> *)((char *)&v10->__traits_.__loc_.__locale_ + 1);
  }
LABEL_22:
  if (v8 == a2) {
    return a2;
  }
  size_t v11 = (*(_DWORD *)(a1 + 28) + 1);

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v8, a3, v6, (v7 + 1), v11);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3) {
    return this;
  }
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
      return this;
    case ')':
      if (a1->__open_count_) {
        return this;
      }
      break;
    default:
      break;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92) {
    return v3;
  }
  std::basic_regex<char>::value_type v5 = *v4;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      v3 += 2;
      return v3;
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v4, a3, 0);
      }
      else
      {
        BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v5);
        uint64_t v8 = 2;
        if (!v7) {
          uint64_t v8 = 0;
        }
        uint64_t result = &v3[v8];
      }
      break;
  }
  return result;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, std::sub_match<const char *> *a2, std::sub_match<const char *> *a3, std::vector<std::csub_match> *this, int a5)
{
  if ((a5 & 0x80) != 0) {
    int v9 = a5 & 0xFFA;
  }
  else {
    int v9 = a5;
  }
  int v10 = *(_DWORD *)(a1 + 28);
  this[1].__begin_ = a3;
  size_t v11 = (const std::vector<std::csub_match>::value_type *)&this[1];
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  std::vector<std::sub_match<char const*>>::assign(this, (v10 + 1), (std::vector<std::csub_match>::const_reference)&this[1]);
  this[2].__begin_ = a2;
  this[2].__end_ = a2;
  LOBYTE(this[2].__end_cap_.__value_) = 0;
  *(std::pair<const char *, const char *> *)&this[3].__begin_ = v11->std::pair<const char *, const char *>;
  LOBYTE(this[3].__end_cap_.__value_) = this[1].__end_cap_.__value_;
  if ((v9 & 0x800) == 0) {
    this[4].__end_ = a2;
  }
  LOBYTE(this[4].__begin_) = 1;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
  {
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))goto LABEL_28; {
    goto LABEL_13;
    }
  }
  if (*(_DWORD *)(a1 + 28))
  {
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))goto LABEL_28; {
LABEL_13:
    }
    if (a2 != a3 && (v9 & 0x40) == 0)
    {
      int v12 = v9 | 0x80;
      for (unint64_t i = (char *)&a2->first + 1; i != (const char *)a3; ++i)
      {
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
        if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
        {
          if (*(_DWORD *)(a1 + 28))
          {
            if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28; {
          }
            }
          else if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)i, (uint64_t)a3, (uint64_t *)this, v12, 0))
          {
            goto LABEL_28;
          }
        }
        else if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0))
        {
          goto LABEL_28;
        }
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      }
      std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
      {
        if (*(_DWORD *)(a1 + 28))
        {
          if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28; {
        }
          }
        else if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a3, (uint64_t)a3, (uint64_t *)this, v12, 0))
        {
          goto LABEL_28;
        }
      }
      else if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0))
      {
        goto LABEL_28;
      }
    }
    uint64_t result = 0;
    this->__end_ = this->__begin_;
    return result;
  }
  if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0) & 1) == 0)goto LABEL_13; {
LABEL_28:
  }
  if (this->__end_ == this->__begin_) {
    std::vector<std::csub_match>::pointer begin = (std::vector<std::csub_match>::pointer)v11;
  }
  else {
    std::vector<std::csub_match>::pointer begin = this->__begin_;
  }
  first = (std::sub_match<const char *> *)begin->first;
  this[2].__end_ = (std::vector<std::csub_match>::pointer)begin->first;
  LOBYTE(this[2].__end_cap_.__value_) = this[2].__begin_ != first;
  second = (std::sub_match<const char *> *)begin->second;
  this[3].__begin_ = second;
  LOBYTE(this[3].__end_cap_.__value_) = second != this[3].__end_;
  return 1;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(std::vector<std::ssub_match> *this, uint64_t a2, std::sub_match<std::__wrap_iter<const char *>> *a3, uint64_t *a4, char a5)
{
  uint64_t v10 = a4[6];
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  std::vector<std::ssub_match>::pointer begin = this->__begin_;
  std::vector<char>::pointer end = this->__end_;
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  if (v11 <= v14)
  {
    if (v11 < v14)
    {
      std::vector<char>::pointer end = (std::vector<std::ssub_match>::pointer)((char *)begin + 8 * ((a4[1] - *a4) >> 3));
      this->__end_ = end;
    }
  }
  else
  {
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(this, v11 - v14);
    std::vector<std::ssub_match>::pointer begin = this->__begin_;
    std::vector<char>::pointer end = this->__end_;
  }
  if (end != begin)
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    uint64_t v18 = *a4;
    uint64_t v17 = a4[1];
    do
    {
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3);
      int v20 = (void *)(v18 + v15 * 24);
      if (v19 <= v16) {
        int v21 = a4 + 3;
      }
      else {
        int v21 = v20;
      }
      begin[v15].first.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *v21 - v10);
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v16) {
        uint64_t v22 = (uint64_t)(a4 + 3);
      }
      else {
        uint64_t v22 = *a4 + v15 * 24;
      }
      this->__begin_[v15].second.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *(void *)(v22 + 8) - v10);
      uint64_t v18 = *a4;
      uint64_t v17 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v17 - *a4) >> 3) <= v16) {
        uint64_t v23 = (uint64_t)(a4 + 3);
      }
      else {
        uint64_t v23 = *a4 + v15 * 24;
      }
      char v24 = *(unsigned char *)(v23 + 16);
      std::vector<std::ssub_match>::pointer begin = this->__begin_;
      std::vector<std::ssub_match>::pointer v25 = this->__end_;
      this->__begin_[v15].matched = v24;
      ++v16;
      ++v15;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)begin) >> 3));
  }
  this[1].__begin_ = a3;
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  uint64_t v26 = (std::sub_match<std::__wrap_iter<const char *>> *)(a2 + a4[6] - v10);
  this[2].__begin_ = v26;
  this[2].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[7] - v10);
  LOBYTE(this[2].__end_cap_.__value_) = *((unsigned char *)a4 + 64);
  this[3].__begin_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[9] - v10);
  this[3].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[10] - v10);
  LOBYTE(this[3].__end_cap_.__value_) = *((unsigned char *)a4 + 88);
  if ((a5 & 1) == 0) {
    this[4].__end_ = v26;
  }
  LOBYTE(this[4].__begin_) = *((unsigned char *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  long long v101 = 0u;
  long long v102 = 0u;
  long long v100 = 0u;
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6)
  {
LABEL_79:
    float v84 = (void **)*((void *)&v100 + 1);
    float v85 = (void **)v101;
    *((void *)&v102 + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = 0;
    unint64_t v86 = v101 - *((void *)&v100 + 1);
    if ((void)v101 - *((void *)&v100 + 1) < 0x11uLL) {
      goto LABEL_81;
    }
    do
    {
LABEL_80:
      operator delete(*v84);
      float v85 = (void **)v101;
      float v84 = (void **)(*((void *)&v100 + 1) + 8);
      *((void *)&v100 + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = v84;
      unint64_t v86 = v101 - (void)v84;
    }
    while ((void)v101 - (void)v84 > 0x10uLL);
    goto LABEL_81;
  }
  *(_DWORD *)float v97 = 0;
  memset(&v97[8], 0, 48);
  *(_OWORD *)std::string __p = 0uLL;
  memset(v99, 0, 21);
  std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v100);
  unint64_t v11 = *(void *)(*((void *)&v100 + 1) + 8 * ((*((void *)&v102 + 1) + (void)v102) / 0x2AuLL))
      + 96 * ((*((void *)&v102 + 1) + (void)v102) % 0x2AuLL);
  long long v12 = *(_OWORD *)&v97[16];
  *(_OWORD *)unint64_t v11 = *(_OWORD *)v97;
  *(_OWORD *)(v11 + 16) = v12;
  *(void *)(v11 + 40) = 0;
  *(void *)(v11 + 48) = 0;
  *(void *)(v11 + 32) = 0;
  memset(&v97[32], 0, 24);
  *(void *)(v11 + 56) = 0;
  *(void *)(v11 + 64) = 0;
  *(void *)(v11 + 72) = 0;
  __p[0] = 0;
  __p[1] = 0;
  v99[0] = 0;
  uint64_t v13 = v99[1];
  *(void *)(v11 + 85) = *(void *)((char *)&v99[1] + 5);
  *(void *)(v11 + 80) = v13;
  uint64_t v15 = *((void *)&v102 + 1);
  uint64_t v14 = v102;
  uint64_t v16 = ++*((void *)&v102 + 1);
  uint64_t v17 = *((void *)&v100 + 1);
  unint64_t v18 = *(unsigned int *)(a1 + 32);
  unint64_t v19 = v15 + v102;
  unint64_t v20 = 8 * (v19 / 0x2A);
  unint64_t v21 = 96 * (v19 % 0x2A);
  unint64_t v22 = *(void *)(*((void *)&v100 + 1) + v20) + v21;
  *(_DWORD *)unint64_t v22 = 0;
  *(void *)(v22 + 8) = a2;
  *(void *)(*(void *)(v17 + v20) + v21 + 16) = a2;
  *(void *)(*(void *)(v17 + v20) + v21 + 24) = a3;
  unint64_t v23 = *(void *)(v17 + v20) + v21;
  uint64_t v26 = *(void *)(v23 + 56);
  char v24 = (std::vector<std::pair<unsigned long, const char *>> *)(v23 + 56);
  uint64_t v25 = v26;
  unint64_t v27 = ((uint64_t)v24->__end_ - v26) >> 4;
  unint64_t v91 = a4;
  if (v18 <= v27)
  {
    if (v18 < v27) {
      v24->__end_ = (std::vector<std::pair<unsigned long, const char *>>::pointer)(v25 + 16 * v18);
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(v24, v18 - v27);
    uint64_t v16 = *((void *)&v102 + 1);
    uint64_t v14 = v102;
    uint64_t v17 = *((void *)&v100 + 1);
  }
  char v94 = 0;
  unsigned int v28 = 0;
  uint64_t v92 = a3;
  uint64_t v93 = 0;
  unint64_t v29 = v16 + v14 - 1;
  unint64_t v30 = 8 * (v29 / 0x2A);
  unint64_t v31 = 96 * (v29 % 0x2A);
  *(void *)(*(void *)(v17 + v30) + v31 + 80) = v6;
  uint64_t v32 = a3 - a2;
  unint64_t v33 = *(void *)(v17 + v30) + v31;
  *(_DWORD *)(v33 + 88) = a5;
  *(unsigned char *)(v33 + 92) = a6;
  while (2)
  {
    if ((++v28 & 0xFFF) == 0 && (int)(v28 >> 12) >= (int)v32) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    }
    unint64_t v35 = v16 + v102 - 1;
    uint64_t v36 = *(void *)(*((void *)&v100 + 1) + 8 * (v35 / 0x2A));
    unint64_t v37 = v35 % 0x2A;
    uint64_t v38 = v36 + 96 * (v35 % 0x2A);
    long long v40 = (void *)(v38 + 80);
    uint64_t v39 = *(void *)(v38 + 80);
    if (v39) {
      (*(void (**)(uint64_t, unint64_t))(*(void *)v39 + 16))(v39, v36 + 96 * v37);
    }
    switch(*(_DWORD *)v38)
    {
      case 0xFFFFFC18:
        uint64_t v41 = *(void *)(v36 + 96 * v37 + 16);
        if ((a5 & 0x20) != 0 && v41 == a2 || (a5 & 0x1000) != 0 && v41 != v92) {
          goto LABEL_21;
        }
        uint64_t v64 = v41 - *(void *)(v36 + 96 * v37 + 8);
        uint64_t v65 = v93;
        if ((v94 & (v93 >= v64)) == 0) {
          uint64_t v65 = v64;
        }
        if (v65 == v32)
        {
          uint64_t v66 = (void **)*((void *)&v100 + 1);
          uint64_t v67 = v101;
          if ((void)v101 == *((void *)&v100 + 1))
          {
            *((void *)&v102 + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = 0;
            unint64_t v81 = 0;
          }
          else
          {
            int v68 = (void *)(*((void *)&v100 + 1) + 8 * ((unint64_t)v102 / 0x2A));
            BOOL v69 = (void *)(*v68 + 96 * ((unint64_t)v102 % 0x2A));
            unint64_t v70 = *(void *)(*((void *)&v100 + 1) + 8 * ((*((void *)&v102 + 1) + (void)v102) / 0x2AuLL))
                + 96 * ((*((void *)&v102 + 1) + (void)v102) % 0x2AuLL);
            if (v69 != (void *)v70)
            {
              do
              {
                uint64_t v71 = (void *)v69[7];
                if (v71)
                {
                  v69[8] = v71;
                  operator delete(v71);
                }
                int64_t v72 = (void *)v69[4];
                if (v72)
                {
                  v69[5] = v72;
                  operator delete(v72);
                }
                v69 += 12;
                if ((void *)((char *)v69 - *v68) == (void *)4032)
                {
                  uint64_t v73 = (void *)v68[1];
                  ++v68;
                  BOOL v69 = v73;
                }
              }
              while (v69 != (void *)v70);
              uint64_t v66 = (void **)*((void *)&v100 + 1);
              uint64_t v67 = v101;
            }
            *((void *)&v102 + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = 0;
            unint64_t v81 = v67 - (void)v66;
            if (v81 >= 0x11)
            {
              do
              {
                operator delete(*v66);
                uint64_t v66 = (void **)(*((void *)&v100 + 1) + 8);
                *((void *)&v100 + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = v66;
                unint64_t v81 = v101 - (void)v66;
              }
              while ((void)v101 - (void)v66 > 0x10uLL);
            }
          }
          if (v81 >> 3 == 1)
          {
            uint64_t v82 = 21;
          }
          else
          {
            if (v81 >> 3 != 2)
            {
LABEL_76:
              char v94 = 1;
              uint64_t v93 = v32;
              goto LABEL_8;
            }
            uint64_t v82 = 42;
          }
          *(void *)&long long v102 = v82;
          goto LABEL_76;
        }
        uint64_t v93 = v65;
        unint64_t v74 = *((void *)&v102 + 1) + v102 - 1;
        uint64_t v75 = *(void *)(*((void *)&v100 + 1) + 8 * (v74 / 0x2A));
        unint64_t v76 = v74 % 0x2A;
        size_t v77 = *(void **)(v75 + 96 * (v74 % 0x2A) + 56);
        if (v77)
        {
          *(void *)(v75 + 96 * v76 + 64) = v77;
          operator delete(v77);
        }
        uint64_t v78 = *(void **)(v75 + 96 * v76 + 32);
        if (v78)
        {
          *(void *)(v75 + 96 * v76 + 40) = v78;
          operator delete(v78);
        }
        uint64_t v79 = 42 * ((uint64_t)(v101 - *((void *)&v100 + 1)) >> 3) - 1;
        long long v80 = v102;
        --*((void *)&v102 + 1);
        if ((void)v101 == *((void *)&v100 + 1)) {
          uint64_t v79 = 0;
        }
        if ((unint64_t)(v79 - (*((void *)&v80 + 1) + v80) + 1) >= 0x54)
        {
          operator delete(*(void **)(v101 - 8));
          *(void *)&long long v101 = v101 - 8;
        }
        char v94 = 1;
LABEL_8:
        uint64_t v16 = *((void *)&v102 + 1);
        if (*((void *)&v102 + 1)) {
          continue;
        }
        if (v94)
        {
          uint64_t v83 = *v91;
          *(void *)uint64_t v83 = a2;
          *(void *)(v83 + 8) = a2 + v93;
          uint64_t v6 = 1;
          *(unsigned char *)(v83 + 16) = 1;
          goto LABEL_79;
        }
        uint64_t v6 = 0;
        float v84 = (void **)*((void *)&v100 + 1);
        float v85 = (void **)v101;
        *((void *)&v102 + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = 0;
        unint64_t v86 = v101 - *((void *)&v100 + 1);
        if ((void)v101 - *((void *)&v100 + 1) >= 0x11uLL) {
          goto LABEL_80;
        }
LABEL_81:
        unint64_t v87 = v86 >> 3;
        if (v87 == 1)
        {
          uint64_t v88 = 21;
LABEL_85:
          *(void *)&long long v102 = v88;
        }
        else if (v87 == 2)
        {
          uint64_t v88 = 42;
          goto LABEL_85;
        }
        if (v84 != v85)
        {
          do
          {
            std::vector<std::string>::pointer v89 = *v84++;
            operator delete(v89);
          }
          while (v84 != v85);
          if ((void)v101 != *((void *)&v100 + 1)) {
            *(void *)&long long v101 = v101 + ((*((void *)&v100 + 1) - v101 + 7) & 0xFFFFFFFFFFFFFFF8);
          }
        }
        if ((void)v100) {
          operator delete((void *)v100);
        }
        return v6;
      case 0xFFFFFC19:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_8;
      case 0xFFFFFC1D:
        unint64_t v49 = v102;
        if (!(void)v102)
        {
          std::deque<std::__state<char>>::__add_front_capacity((uint64_t)&v100);
          unint64_t v49 = v102;
        }
        uint64_t v50 = (void *)(*((void *)&v100 + 1) + 8 * (v49 / 0x2A));
        uint64_t v51 = *v50 + 96 * (v49 % 0x2A);
        if ((void)v101 == *((void *)&v100 + 1)) {
          uint64_t v51 = 0;
        }
        if (v51 == *v50) {
          uint64_t v51 = *(v50 - 1) + 4032;
        }
        long long v52 = *(_OWORD *)(v38 + 16);
        *(_OWORD *)(v51 - 96) = *(_OWORD *)v38;
        *(_OWORD *)(v51 - 80) = v52;
        uint64_t v53 = v36 + 96 * v37;
        *(void *)(v51 - 56) = 0;
        *(void *)(v51 - 48) = 0;
        *(void *)(v51 - 64) = 0;
        *(_OWORD *)(v51 - 64) = *(_OWORD *)(v53 + 32);
        *(void *)(v51 - 48) = *(void *)(v53 + 48);
        *(void *)(v53 + 32) = 0;
        *(void *)(v53 + 40) = 0;
        *(void *)(v53 + 48) = 0;
        *(void *)(v51 - 40) = 0;
        *(void *)(v51 - 32) = 0;
        *(void *)(v51 - 24) = 0;
        *(_OWORD *)(v51 - 40) = *(_OWORD *)(v53 + 56);
        *(void *)(v51 - 24) = *(void *)(v53 + 72);
        *(void *)(v53 + 56) = 0;
        *(void *)(v53 + 64) = 0;
        *(void *)(v53 + 72) = 0;
        uint64_t v54 = *v40;
        *(void *)(v51 - 1E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = *(void *)(v38 + 85);
        *(void *)(v51 - 16) = v54;
        uint64_t v55 = *((void *)&v102 + 1);
        *(void *)&long long v102 = v102 - 1;
        ++*((void *)&v102 + 1);
        uint64_t v56 = v55 + v102;
        unint64_t v57 = (v55 + (uint64_t)v102) / 0x2AuLL;
        uint64_t v43 = *(void *)(*((void *)&v100 + 1) + 8 * v57);
        unint64_t v44 = v56 - 42 * v57;
        uint64_t v45 = *(void **)(v43 + 96 * v44 + 56);
        if (!v45) {
          goto LABEL_23;
        }
        goto LABEL_22;
      case 0xFFFFFC1F:
LABEL_21:
        unint64_t v42 = *((void *)&v102 + 1) + v102 - 1;
        uint64_t v43 = *(void *)(*((void *)&v100 + 1) + 8 * (v42 / 0x2A));
        unint64_t v44 = v42 % 0x2A;
        uint64_t v45 = *(void **)(v43 + 96 * (v42 % 0x2A) + 56);
        if (v45)
        {
LABEL_22:
          *(void *)(v43 + 96 * v44 + 64) = v45;
          operator delete(v45);
        }
LABEL_23:
        std::vector<char>::pointer v46 = *(void **)(v43 + 96 * v44 + 32);
        if (v46)
        {
          *(void *)(v43 + 96 * v44 + 40) = v46;
          operator delete(v46);
        }
        uint64_t v47 = 42 * ((uint64_t)(v101 - *((void *)&v100 + 1)) >> 3) - 1;
        long long v48 = v102;
        --*((void *)&v102 + 1);
        if ((void)v101 == *((void *)&v100 + 1)) {
          uint64_t v47 = 0;
        }
        if ((unint64_t)(v47 - (*((void *)&v48 + 1) + v48) + 1) >= 0x54)
        {
          operator delete(*(void **)(v101 - 8));
          *(void *)&long long v101 = v101 - 8;
        }
        goto LABEL_8;
      case 0xFFFFFC20:
        std::__state<char>::__state((uint64_t)v97, (long long *)(v36 + 96 * v37));
        (*(void (**)(void, uint64_t, unint64_t))(*(void *)*v40 + 24))(*v40, 1, v36 + 96 * v37);
        (*(void (**)(void, void, unsigned char *))(*(void *)v99[1] + 24))(v99[1], 0, v97);
        uint64_t v58 = *((void *)&v100 + 1);
        if ((void)v101 == *((void *)&v100 + 1)) {
          uint64_t v59 = 0;
        }
        else {
          uint64_t v59 = 42 * ((uint64_t)(v101 - *((void *)&v100 + 1)) >> 3) - 1;
        }
        unint64_t v60 = *((void *)&v102 + 1) + v102;
        if (v59 == *((void *)&v102 + 1) + (void)v102)
        {
          std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v100);
          uint64_t v58 = *((void *)&v100 + 1);
          unint64_t v60 = *((void *)&v102 + 1) + v102;
        }
        unint64_t v61 = *(void *)(v58 + 8 * (v60 / 0x2A)) + 96 * (v60 % 0x2A);
        long long v62 = *(_OWORD *)&v97[16];
        *(_OWORD *)unint64_t v61 = *(_OWORD *)v97;
        *(_OWORD *)(v61 + 16) = v62;
        *(void *)(v61 + 40) = 0;
        *(void *)(v61 + 48) = 0;
        *(void *)(v61 + 32) = 0;
        *(_OWORD *)(v61 + 32) = *(_OWORD *)&v97[32];
        *(void *)(v61 + 48) = *(void *)&v97[48];
        memset(&v97[32], 0, 24);
        *(void *)(v61 + 56) = 0;
        *(void *)(v61 + 64) = 0;
        *(void *)(v61 + 72) = 0;
        *(_OWORD *)(v61 + 56) = *(_OWORD *)__p;
        *(void *)(v61 + 72) = v99[0];
        __p[0] = 0;
        __p[1] = 0;
        v99[0] = 0;
        uint64_t v63 = v99[1];
        *(void *)(v61 + 85) = *(void *)((char *)&v99[1] + 5);
        *(void *)(v61 + 80) = v63;
        ++*((void *)&v102 + 1);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (*(void *)&v97[32])
        {
          *(void *)&v97[40] = *(void *)&v97[32];
          operator delete(*(void **)&v97[32]);
        }
        goto LABEL_8;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
  }
}

void sub_192437C2C(_Unwind_Exception *a1)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_192437C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__state<char>::~__state((uint64_t *)va);
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v9 - 144));
  _Unwind_Resume(a1);
}

void sub_192437C88(_Unwind_Exception *a1)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_192437C9C(_Unwind_Exception *a1)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  BOOL v69 = 0;
  unint64_t v70 = 0;
  unint64_t v71 = 0;
  *(_DWORD *)uint64_t v66 = 0;
  memset(&v66[8], 0, 32);
  long long v67 = 0u;
  memset(v68, 0, 37);
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6) {
    goto LABEL_63;
  }
  __x.first = a3;
  __x.second = a3;
  __x.matched = 0;
  *(_DWORD *)long long v62 = 0;
  memset(&v62[8], 0, 48);
  *(_OWORD *)std::string __p = 0uLL;
  memset(v64, 0, 21);
  unint64_t v70 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v69, (uint64_t)v62);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*(void *)&v62[32])
  {
    *(void *)&v62[40] = *(void *)&v62[32];
    operator delete(*(void **)&v62[32]);
  }
  uint64_t v13 = v70;
  *((_DWORD *)v70 - 24) = 0;
  *((void *)v13 - 1E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = a2;
  *((void *)v13 - 10) = a2;
  *((void *)v13 - 9) = a3;
  uint64_t v14 = *((void *)v13 - 8);
  unint64_t v15 = *(unsigned int *)(a1 + 28);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v13 - 7) - v14) >> 3);
  if (v15 <= v16)
  {
    if (v15 < v16) {
      *((void *)v13 - 7) = v14 + 24 * v15;
    }
  }
  else
  {
    std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v13 - 64), v15 - v16, &__x);
    uint64_t v13 = v70;
  }
  uint64_t v17 = *((void *)v13 - 5);
  unint64_t v18 = *(unsigned int *)(a1 + 32);
  unint64_t v19 = (*((void *)v13 - 4) - v17) >> 4;
  uint64_t v58 = a4;
  if (v18 <= v19)
  {
    if (v18 < v19) {
      *((void *)v13 - 4) = v17 + 16 * v18;
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v13 - 40), v18 - v19);
    uint64_t v13 = v70;
  }
  char v61 = 0;
  unsigned int v20 = 0;
  unint64_t v21 = (const char *)(a3 - a2);
  *((void *)v13 - 2) = v6;
  *((_DWORD *)v13 - 2) = a5;
  *(v13 - 4) = a6;
  unint64_t v60 = 0;
  uint64_t v59 = a3;
  do
  {
    BOOL v22 = (++v20 & 0xFFF) != 0 || (int)(v20 >> 12) < (int)v21;
    if (!v22) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    }
    char v24 = v13 - 16;
    uint64_t v23 = *((void *)v13 - 2);
    uint64_t v25 = v13 - 96;
    if (v23) {
      (*(void (**)(uint64_t, char *))(*(void *)v23 + 16))(v23, v13 - 96);
    }
    switch(*(_DWORD *)v25)
    {
      case 0xFFFFFC18:
        uint64_t v26 = (const char *)*((void *)v13 - 10);
        if ((a5 & 0x20) != 0 && v26 == a2 || (a5 & 0x1000) != 0 && v26 != v59) {
          goto LABEL_29;
        }
        unint64_t v33 = &v26[-*((void *)v13 - 11)];
        uint64_t v34 = v60;
        if ((v61 & ((uint64_t)v60 >= (uint64_t)v33)) == 0)
        {
          long long v35 = *(_OWORD *)v25;
          *(_OWORD *)&v66[16] = *((_OWORD *)v13 - 5);
          *(_OWORD *)uint64_t v66 = v35;
          if (v66 != v25)
          {
            std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>((char **)&v66[32], *((char **)v13 - 8), *((char **)v13 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v13 - 7) - *((void *)v13 - 8)) >> 3));
            std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((uint64_t)v68, *((const double **)v13 - 5), *((const double **)v13 - 4), (uint64_t)(*((void *)v13 - 4) - *((void *)v13 - 5)) >> 4);
          }
          uint64_t v36 = *(void **)v24;
          *(void **)((char *)&v68[3] + 5) = *(void **)(v13 - 11);
          v68[3] = v36;
          uint64_t v34 = v33;
        }
        unint64_t v37 = v70;
        if (v34 == v21)
        {
          uint64_t v38 = v69;
          while (v37 != v38)
          {
            uint64_t v39 = (void *)*((void *)v37 - 5);
            if (v39)
            {
              *((void *)v37 - 4) = v39;
              operator delete(v39);
            }
            long long v40 = (void *)*((void *)v37 - 8);
            if (v40)
            {
              *((void *)v37 - 7) = v40;
              operator delete(v40);
            }
            v37 -= 96;
          }
          unint64_t v70 = v38;
          char v61 = 1;
          unint64_t v60 = v21;
        }
        else
        {
          uint64_t v41 = v34;
          unint64_t v42 = (void *)*((void *)v70 - 5);
          if (v42)
          {
            *((void *)v70 - 4) = v42;
            operator delete(v42);
          }
          unint64_t v60 = v41;
          uint64_t v43 = (void *)*((void *)v37 - 8);
          if (v43)
          {
            *((void *)v37 - 7) = v43;
            operator delete(v43);
          }
          unint64_t v70 = v37 - 96;
          char v61 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_29:
        unint64_t v27 = v70;
        unsigned int v28 = (void *)*((void *)v70 - 5);
        if (v28)
        {
          *((void *)v70 - 4) = v28;
          operator delete(v28);
        }
        unint64_t v29 = (void *)*((void *)v27 - 8);
        if (v29)
        {
          *((void *)v27 - 7) = v29;
          operator delete(v29);
        }
        unint64_t v70 = v27 - 96;
        break;
      case 0xFFFFFC20:
        std::__state<char>::__state((uint64_t)v62, (long long *)v13 - 6);
        (*(void (**)(void, uint64_t, char *))(**(void **)v24 + 24))(*(void *)v24, 1, v13 - 96);
        (*(void (**)(void, void, unsigned char *))(*(void *)v64[1] + 24))(v64[1], 0, v62);
        unint64_t v30 = v70;
        if ((unint64_t)v70 >= v71)
        {
          unint64_t v70 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v69, (uint64_t)v62);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v31 = *(_OWORD *)&v62[16];
          *(_OWORD *)unint64_t v70 = *(_OWORD *)v62;
          *((_OWORD *)v30 + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = v31;
          *((void *)v30 + 4) = 0;
          *((void *)v30 + 5) = 0;
          *((void *)v30 + 6) = 0;
          *((void *)v30 + 7) = 0;
          *((_OWORD *)v30 + 2) = *(_OWORD *)&v62[32];
          *((void *)v30 + 6) = *(void *)&v62[48];
          memset(&v62[32], 0, 24);
          *((void *)v30 + 8) = 0;
          *((void *)v30 + 9) = 0;
          *(_OWORD *)(v30 + 56) = *(_OWORD *)__p;
          *((void *)v30 + 9) = v64[0];
          __p[0] = 0;
          __p[1] = 0;
          v64[0] = 0;
          uint64_t v32 = v64[1];
          *(void *)(v30 + 85) = *(void *)((char *)&v64[1] + 5);
          *((void *)v30 + 10) = v32;
          unint64_t v70 = v30 + 96;
        }
        if (*(void *)&v62[32])
        {
          *(void *)&v62[40] = *(void *)&v62[32];
          operator delete(*(void **)&v62[32]);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    uint64_t v13 = v70;
  }
  while (v69 != v70);
  if ((v61 & 1) == 0)
  {
LABEL_63:
    uint64_t v50 = 0;
    uint64_t v51 = v68[0];
    if (!v68[0]) {
      goto LABEL_65;
    }
    goto LABEL_64;
  }
  uint64_t v44 = *v58;
  *(void *)uint64_t v44 = a2;
  *(void *)(v44 + 8) = &v60[(void)a2];
  *(unsigned char *)(v44 + 16) = 1;
  if ((void)v67 != *(void *)&v66[32])
  {
    unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v67 - *(void *)&v66[32]) >> 3);
    std::vector<char>::pointer v46 = (unsigned char *)(*(void *)&v66[32] + 16);
    unsigned int v47 = 1;
    do
    {
      uint64_t v48 = v44 + 24 * v47;
      *(_OWORD *)uint64_t v48 = *((_OWORD *)v46 - 1);
      char v49 = *v46;
      v46 += 24;
      *(unsigned char *)(v48 + 16) = v49;
      BOOL v22 = v45 > v47++;
    }
    while (v22);
  }
  uint64_t v50 = 1;
  uint64_t v51 = v68[0];
  if (v68[0])
  {
LABEL_64:
    v68[1] = v51;
    operator delete(v51);
  }
LABEL_65:
  if (*(void *)&v66[32])
  {
    *(void *)&long long v67 = *(void *)&v66[32];
    operator delete(*(void **)&v66[32]);
  }
  long long v52 = v69;
  if (v69)
  {
    uint64_t v53 = v70;
    uint64_t v54 = v69;
    if (v70 != v69)
    {
      do
      {
        uint64_t v55 = (void *)*((void *)v53 - 5);
        if (v55)
        {
          *((void *)v53 - 4) = v55;
          operator delete(v55);
        }
        uint64_t v56 = (void *)*((void *)v53 - 8);
        if (v56)
        {
          *((void *)v53 - 7) = v56;
          operator delete(v56);
        }
        v53 -= 96;
      }
      while (v53 != v52);
      uint64_t v54 = v69;
    }
    unint64_t v70 = v52;
    operator delete(v54);
  }
  return v50;
}

void sub_1924382B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::__state<char>::~__state(&a33);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v33 - 120));
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::clear(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    unint64_t v11 = (char *)v3 - (char *)v2;
    if (v11 < 0x11) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  unint64_t v4 = a1[4];
  std::basic_regex<char>::value_type v5 = &v2[v4 / 0x2A];
  uint64_t v6 = (char *)*v5 + 96 * (v4 % 0x2A);
  unint64_t v7 = (unint64_t)v2[(a1[5] + v4) / 0x2A] + 96 * ((a1[5] + v4) % 0x2A);
  if (v6 != (char *)v7)
  {
    do
    {
      uint64_t v8 = (void *)*((void *)v6 + 7);
      if (v8)
      {
        *((void *)v6 + 8) = v8;
        operator delete(v8);
      }
      uint64_t v9 = (void *)*((void *)v6 + 4);
      if (v9)
      {
        *((void *)v6 + 5) = v9;
        operator delete(v9);
      }
      v6 += 96;
      if (v6 - (unsigned char *)*v5 == 4032)
      {
        uint64_t v10 = (char *)v5[1];
        ++v5;
        uint64_t v6 = v10;
      }
    }
    while (v6 != (char *)v7);
    uint64_t v2 = (void **)a1[1];
    uint64_t v3 = (void **)a1[2];
  }
  a1[5] = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if (v11 >= 0x11)
  {
    do
    {
LABEL_13:
      operator delete(*v2);
      uint64_t v12 = a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = v12 - (void)v2;
    }
    while (v11 > 0x10);
  }
LABEL_14:
  if (v11 >> 3 == 1)
  {
    uint64_t v13 = 21;
  }
  else
  {
    if (v11 >> 3 != 2) {
      return;
    }
    uint64_t v13 = 42;
  }
  a1[4] = v13;
}

void **std::deque<std::__state<char>>::~deque[abi:ne180100](void **a1)
{
  std::deque<std::__state<char>>::clear(a1);
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      unint64_t v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    uint64_t v6 = a1[1];
    std::basic_regex<char>::value_type v5 = a1[2];
    if (v5 != v6) {
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
  }
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::deque<std::__state<char>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    std::basic_regex<char>::value_type v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(void *)std::basic_regex<char>::value_type v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v31 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v31 = 1;
      }
      if (!(v31 >> 61))
      {
        unint64_t v32 = v31 >> 2;
        uint64_t v33 = 8 * v31;
        uint64_t v34 = (char *)operator new(8 * v31);
        long long v35 = &v34[8 * v32];
        uint64_t v36 = &v34[v33];
        int64_t v38 = v5 - v7;
        BOOL v37 = v5 == v7;
        std::basic_regex<char>::value_type v5 = v35;
        if (!v37)
        {
          std::basic_regex<char>::value_type v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            unint64_t v74 = &v34[8 * v32];
            long long v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              uint64_t v75 = (v39 >> 3) + 1;
              uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              long long v40 = &v35[v76];
              v7 += v76;
              size_t v77 = (long long *)(v6 + 3);
              uint64_t v78 = v74 + 16;
              uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v77;
                *(v78 - E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = *(v77 - 1);
                *uint64_t v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            long long v40 = &v34[8 * v32];
          }
          do
          {
            uint64_t v81 = *(void *)v7;
            v7 += 8;
            *(void *)long long v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_78;
      }
LABEL_89:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    unint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      unint64_t v7 = *(char **)(a1 + 8);
    }
    std::basic_regex<char>::value_type v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_80;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      unint64_t v91 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v91);
      return;
    }
    unint64_t v91 = operator new(0xFC0uLL);
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v91);
    uint64_t v41 = *(void **)(a1 + 8);
    std::basic_regex<char>::value_type v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v41 + 1);
    uint64_t v8 = *v41;
    *(void *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_80;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v42 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v42 = 1;
      }
      if (!(v42 >> 61))
      {
        unint64_t v43 = v42 >> 2;
        uint64_t v44 = 8 * v42;
        uint64_t v34 = (char *)operator new(8 * v42);
        long long v35 = &v34[8 * v43];
        uint64_t v36 = &v34[v44];
        int64_t v45 = v5 - v7;
        BOOL v37 = v5 == v7;
        std::basic_regex<char>::value_type v5 = v35;
        if (!v37)
        {
          std::basic_regex<char>::value_type v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            uint64_t v82 = &v34[8 * v43];
            unsigned int v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              uint64_t v83 = (v46 >> 3) + 1;
              uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              unsigned int v47 = &v35[v84];
              v7 += v84;
              float v85 = (long long *)(v41 + 3);
              unint64_t v86 = v82 + 16;
              uint64_t v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v88 = *v85;
                *(v86 - E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = *(v85 - 1);
                *unint64_t v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            unsigned int v47 = &v34[8 * v43];
          }
          do
          {
            uint64_t v89 = *(void *)v7;
            v7 += 8;
            *(void *)unsigned int v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_78:
        *(void *)a1 = v34;
        *(void *)(a1 + 8) = v35;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          std::basic_regex<char>::value_type v5 = *(char **)(a1 + 16);
        }
        goto LABEL_80;
      }
      goto LABEL_89;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_89;
  }
  uint64_t v25 = (char *)operator new(8 * v24);
  uint64_t v26 = operator new(0xFC0uLL);
  unint64_t v27 = &v25[8 * v21];
  unsigned int v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    int64_t v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v20 >> 2;
      }
      if (v48 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      char v49 = (char *)operator new(8 * v48);
      unint64_t v27 = &v49[8 * (v48 >> 2)];
      unsigned int v28 = &v49[8 * v48];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      uint64_t v25 = v49;
      *(void *)unint64_t v27 = v90;
      unint64_t v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v30 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v30 = v21 + 1;
      }
      v27 -= 8 * (v30 >> 1);
      *(void *)unint64_t v27 = v26;
      unint64_t v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    do
    {
LABEL_52:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27) {
            unint64_t v59 = 1;
          }
          else {
            unint64_t v59 = (v28 - v27) >> 2;
          }
          if (v59 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v60 = (char *)operator new(8 * v59);
          uint64_t v25 = v60;
          unint64_t v61 = (v59 + 3) >> 2;
          uint64_t v53 = &v60[8 * v61];
          int64_t v62 = v29 - v27;
          BOOL v37 = v29 == v27;
          unint64_t v29 = v53;
          if (!v37)
          {
            unint64_t v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v63 = v62 - 8;
            uint64_t v64 = &v60[8 * v61];
            uint64_t v65 = v27;
            if (v63 < 0x38) {
              goto LABEL_93;
            }
            uint64_t v66 = 8 * v61;
            uint64_t v64 = &v60[8 * v61];
            uint64_t v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20) {
              goto LABEL_93;
            }
            uint64_t v67 = (v63 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v64 = &v53[v68];
            uint64_t v65 = &v27[v68];
            BOOL v69 = (long long *)(v27 + 16);
            unint64_t v70 = &v60[v66 + 16];
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *v69;
              *((_OWORD *)v70 - E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = *(v69 - 1);
              *(_OWORD *)unint64_t v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              do
              {
                uint64_t v73 = *(void *)v65;
                v65 += 8;
                *(void *)uint64_t v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          unsigned int v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          uint64_t v55 = (v28 - v29) >> 3;
          if (v55 >= -1) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v55 + 2;
          }
          unint64_t v57 = &v29[8 * (v56 >> 1)];
          uint64_t v53 = &v57[-(v29 - v27)];
          size_t v58 = v29 - v27;
          BOOL v37 = v29 == v27;
          unint64_t v29 = v57;
          if (!v37) {
            memmove(v53, v27, v58);
          }
          uint64_t v25 = v27;
        }
      }
      else
      {
        uint64_t v53 = v27;
      }
      uint64_t v54 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v53 - E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = v54;
      uint64_t v51 = v53 - 8;
      unint64_t v27 = v51;
    }
    while (v18 != *(void *)(a1 + 8));
    goto LABEL_46;
  }
  *(void *)unint64_t v27 = v26;
  unint64_t v29 = v27 + 8;
  if (v18 != v19) {
    goto LABEL_52;
  }
LABEL_45:
  uint64_t v51 = v27;
LABEL_46:
  long long v52 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v51;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v52)
  {
    operator delete(v52);
  }
}

void sub_192438A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_192438A88(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_192438A9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_192438AB4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(char **a1, void *a2)
{
  unint64_t v4 = a1[2];
  if (v4 != a1[3]) {
    goto LABEL_22;
  }
  std::basic_regex<char>::value_type v5 = *a1;
  uint64_t v6 = a1[1];
  if (v6 > *a1)
  {
    uint64_t v7 = (v6 - *a1) >> 3;
    if (v7 >= -1) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = v7 + 2;
    }
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = -v9;
    uint64_t v11 = &v6[-8 * v9];
    int64_t v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      unint64_t v4 = a1[1];
    }
    uint64_t v13 = &v4[8 * v10];
    unint64_t v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  unint64_t v14 = (v4 - v5) >> 2;
  if (v4 == v5) {
    unint64_t v14 = 1;
  }
  if (v14 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unint64_t v15 = v14 >> 2;
  uint64_t v16 = 8 * v14;
  uint64_t v17 = (char *)operator new(8 * v14);
  uint64_t v18 = &v17[8 * v15];
  int64_t v20 = v4 - v6;
  BOOL v19 = v4 == v6;
  unint64_t v4 = v18;
  if (!v19)
  {
    unint64_t v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      uint64_t v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        uint64_t v31 = *(void *)v6;
        v6 += 8;
        *(void *)uint64_t v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    uint64_t v23 = &v17[8 * v15];
    uint64_t v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20) {
      goto LABEL_19;
    }
    uint64_t v24 = (v21 >> 3) + 1;
    uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v22 = &v18[v25];
    uint64_t v26 = &v6[v25];
    unint64_t v27 = (long long *)(v6 + 16);
    unsigned int v28 = v23 + 16;
    uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v30 = *v27;
      *(v28 - E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = *(v27 - 1);
      *unsigned int v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    uint64_t v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_19;
    }
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    unint64_t v4 = a1[2];
  }
LABEL_22:
  *(void *)unint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(void **a1, void *a2)
{
  unint64_t v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    uint64_t v7 = a1[2];
    uint64_t v6 = a1[3];
    if (v7 >= v6)
    {
      uint64_t v13 = v6 - v4;
      BOOL v12 = v13 == 0;
      unint64_t v14 = v13 >> 2;
      if (v12) {
        unint64_t v14 = 1;
      }
      if (v14 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v15 = (v14 + 3) >> 2;
      uint64_t v16 = 8 * v14;
      uint64_t v17 = (char *)operator new(8 * v14);
      std::basic_regex<char>::value_type v5 = &v17[8 * v15];
      uint64_t v18 = v5;
      uint64_t v19 = v7 - v4;
      if (v7 != v4)
      {
        uint64_t v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v20 = v19 - 8;
        unint64_t v21 = &v17[8 * v15];
        uint64_t v22 = v4;
        if (v20 < 0x38) {
          goto LABEL_27;
        }
        uint64_t v23 = &v17[8 * v15];
        unint64_t v21 = v23;
        uint64_t v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20) {
          goto LABEL_27;
        }
        uint64_t v24 = (v20 >> 3) + 1;
        uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v21 = &v5[v25];
        uint64_t v22 = &v4[v25];
        uint64_t v26 = (long long *)(v4 + 16);
        unint64_t v27 = v23 + 16;
        uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v29 = *v26;
          *(v27 - E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = *(v26 - 1);
          *unint64_t v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            uint64_t v30 = *(void *)v22;
            v22 += 8;
            *(void *)unint64_t v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        std::basic_regex<char>::value_type v5 = (char *)a1[1];
      }
    }
    else
    {
      uint64_t v8 = (v6 - v7) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v11 = &v7[8 * (v9 >> 1)];
      std::basic_regex<char>::value_type v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        unint64_t v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    std::basic_regex<char>::value_type v5 = (char *)a1[1];
  }
  *((void *)v5 - E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void std::deque<std::__state<char>>::__add_front_capacity(uint64_t a1)
{
  BOOL v3 = *(uint64_t **)(a1 + 8);
  unint64_t v2 = *(uint64_t **)(a1 + 16);
  unint64_t v4 = v2 - v3;
  if (v2 == v3) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 42 * v4 - 1;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if ((unint64_t)(v5 - (*(void *)(a1 + 40) + v6)) >= 0x2A)
  {
    *(void *)(a1 + 32) = v6 + 42;
    unint64_t v48 = (void *)*(v2 - 1);
    *(void *)(a1 + 16) = v2 - 1;
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v48);
    return;
  }
  uint64_t v7 = *(uint64_t **)(a1 + 24);
  uint64_t v8 = *(uint64_t **)a1;
  uint64_t v9 = (uint64_t)v7 - *(void *)a1;
  if (v4 < v9 >> 3)
  {
    if (v3 == v8)
    {
      unint64_t v48 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v48);
      uint64_t v18 = *(void *)(a1 + 16);
      unint64_t v48 = *(void **)(v18 - 8);
      *(void *)(a1 + 16) = v18 - 8;
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v48);
      if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8) {
        goto LABEL_9;
      }
    }
    else
    {
      unint64_t v48 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v48);
      if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8)
      {
LABEL_9:
        uint64_t v10 = 21;
LABEL_19:
        *(void *)(a1 + 32) = v10;
        return;
      }
    }
    uint64_t v10 = *(void *)(a1 + 32) + 42;
    goto LABEL_19;
  }
  if (v7 == v8) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = v9 >> 2;
  }
  if (v11 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  BOOL v12 = (char *)operator new(8 * v11);
  uint64_t v13 = operator new(0xFC0uLL);
  unint64_t v14 = v13;
  if (v11)
  {
    unint64_t v15 = &v12[8 * v11];
    *(void *)BOOL v12 = v13;
    uint64_t v16 = v12 + 8;
    uint64_t v17 = v12;
    if (v3 != v2) {
      goto LABEL_29;
    }
    goto LABEL_21;
  }
  uint64_t v19 = (char *)operator new(8uLL);
  unint64_t v15 = v19 + 8;
  operator delete(v12);
  BOOL v3 = *(uint64_t **)(a1 + 8);
  unint64_t v20 = *(uint64_t **)(a1 + 16);
  BOOL v12 = v19;
  *(void *)uint64_t v19 = v14;
  uint64_t v16 = v19 + 8;
  uint64_t v17 = v19;
  if (v3 != v20)
  {
    while (1)
    {
LABEL_29:
      if (v16 == v15)
      {
        if (v12 <= v17)
        {
          if (v16 == v17) {
            unint64_t v32 = 1;
          }
          else {
            unint64_t v32 = (v16 - v17) >> 2;
          }
          if (v32 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v33 = (char *)operator new(8 * v32);
          uint64_t v34 = v33;
          unint64_t v35 = v32 >> 2;
          unint64_t v21 = &v33[8 * (v32 >> 2)];
          uint64_t v24 = v21;
          int64_t v36 = v16 - v12;
          if (v16 != v12)
          {
            uint64_t v24 = &v21[v36 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v37 = v36 - 8;
            if (v37 < 0x38 || (uint64_t v38 = 8 * v35, (unint64_t)(&v33[8 * v35] - v12) < 0x20))
            {
              unint64_t v39 = &v33[8 * (v32 >> 2)];
              long long v40 = v12;
              goto LABEL_45;
            }
            uint64_t v42 = (v37 >> 3) + 1;
            uint64_t v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v39 = &v21[v43];
            long long v40 = &v12[v43];
            uint64_t v44 = (long long *)(v12 + 16);
            int64_t v45 = &v33[v38 + 16];
            uint64_t v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v47 = *v44;
              *((_OWORD *)v45 - E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = *(v44 - 1);
              *(_OWORD *)int64_t v45 = v47;
              v44 += 2;
              v45 += 32;
              v46 -= 4;
            }
            while (v46);
            if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_45:
                uint64_t v41 = *(void *)v40;
                v40 += 8;
                *(void *)unint64_t v39 = v41;
                v39 += 8;
              }
              while (v39 != v24);
            }
          }
          uint64_t v16 = &v33[8 * v32];
          if (v17) {
            operator delete(v17);
          }
          uint64_t v17 = v34;
          goto LABEL_28;
        }
        uint64_t v26 = (v12 - v17) >> 3;
        if (v26 >= -1) {
          uint64_t v27 = v26 + 1;
        }
        else {
          uint64_t v27 = v26 + 2;
        }
        uint64_t v28 = v27 >> 1;
        long long v29 = &v12[-8 * (v27 >> 1)];
        uint64_t v30 = v16;
        if (v16 != v12)
        {
          memmove(v29, v12, v16 - v12);
          uint64_t v30 = v12;
        }
        uint64_t v31 = -v28;
        uint64_t v24 = &v29[v16 - v12];
        unint64_t v21 = &v30[8 * v31];
      }
      else
      {
        unint64_t v21 = v12;
        uint64_t v24 = v16;
        uint64_t v16 = v15;
      }
LABEL_28:
      unint64_t v15 = v16;
      uint64_t v25 = *v3++;
      *(void *)uint64_t v24 = v25;
      uint64_t v22 = v24 + 8;
      uint64_t v16 = v22;
      BOOL v12 = v21;
      if (v3 == *(uint64_t **)(a1 + 16)) {
        goto LABEL_22;
      }
    }
  }
LABEL_21:
  unint64_t v21 = v12;
  uint64_t v22 = v16;
LABEL_22:
  uint64_t v23 = *(void **)a1;
  *(void *)a1 = v17;
  *(void *)(a1 + 8) = v21;
  *(void *)(a1 + 16) = v22;
  *(void *)(a1 + 24) = v15;
  if (v22 - v21 == 8)
  {
    *(void *)(a1 + 32) = 21;
    if (!v23) {
      return;
    }
  }
  else
  {
    *(void *)(a1 + 32) += 42;
    if (!v23) {
      return;
    }
  }

  operator delete(v23);
}

void sub_192439188(_Unwind_Exception *a1)
{
  operator delete(v1);
  operator delete(v2);
  _Unwind_Resume(a1);
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char **a1, char *a2, char *a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    uint64_t v18 = a1[1];
    uint64_t v17 = a1 + 1;
    unint64_t v14 = v18;
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result) >> 3);
    if (v19 >= __sz)
    {
      uint64_t v24 = result;
      if (a2 != a3)
      {
        uint64_t v25 = result;
        do
        {
          *(_OWORD *)uint64_t v25 = *(_OWORD *)v6;
          v25[16] = v6[16];
          v24 += 24;
          v6 += 24;
          v25 += 24;
        }
        while (v6 != a3);
      }
      int64_t v16 = v24 - result;
      unint64_t v14 = result;
    }
    else
    {
      unint64_t v20 = &a2[24 * v19];
      if (v14 != result)
      {
        do
        {
          *(_OWORD *)uint64_t result = *(_OWORD *)v6;
          result[16] = v6[16];
          v6 += 24;
          result += 24;
        }
        while (v6 != v20);
      }
      unint64_t v21 = v14;
      if (v20 != a3)
      {
        uint64_t v22 = v14;
        do
        {
          long long v23 = *(_OWORD *)v20;
          *((void *)v22 + 2) = *((void *)v20 + 2);
          *(_OWORD *)uint64_t v22 = v23;
          v22 += 24;
          v20 += 24;
          v21 += 24;
        }
        while (v20 != a3);
      }
      int64_t v16 = v21 - v14;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_26;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
LABEL_26:
    }
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    uint64_t v13 = 24 * v12;
    uint64_t result = (char *)operator new(24 * v12);
    unint64_t v14 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    unint64_t v15 = result;
    if (v6 != a3)
    {
      uint64_t result = (char *)memcpy(result, v6, 24 * ((a3 - v6 - 24) / 0x18uLL) + 24);
      unint64_t v15 = &v14[24 * ((a3 - v6 - 24) / 0x18uLL) + 24];
    }
    int64_t v16 = v15 - v14;
    uint64_t v17 = a1 + 1;
  }
  *uint64_t v17 = &v14[v16];
  return result;
}

double *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(uint64_t a1, const double *a2, const double *a3, size_t __sz)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t result = *(double **)a1;
  if (__sz > (v8 - (uint64_t)result) >> 4)
  {
    if (result)
    {
      *(void *)(a1 + 8) = result;
      operator delete(result);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz >> 60) {
      goto LABEL_62;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v37 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    if (!v37) {
      unint64_t v11 = v10;
    }
    if (v11 >> 60) {
LABEL_62:
    }
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    uint64_t v12 = 2 * v11;
    uint64_t result = (double *)operator new(16 * v11);
    uint64_t v13 = result;
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = &result[v12];
    unint64_t v14 = result;
    if (a2 != a3)
    {
      uint64_t result = (double *)memcpy(result, a2, (((char *)a3 - (char *)a2 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
      unint64_t v14 = (double *)((char *)v13 + (((char *)a3 - (char *)a2 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    int64_t v15 = (char *)v14 - (char *)v13;
    int64_t v16 = (void *)(a1 + 8);
    goto LABEL_29;
  }
  uint64_t v17 = *(double **)(a1 + 8);
  int64_t v16 = (void *)(a1 + 8);
  uint64_t v13 = v17;
  int64_t v18 = (char *)v17 - (char *)result;
  unint64_t v19 = ((char *)v17 - (char *)result) >> 4;
  if (v19 >= __sz)
  {
    if (a2 == a3)
    {
      uint64_t v30 = (char *)result;
    }
    else
    {
      unint64_t v29 = (char *)a3 - (char *)a2 - 16;
      if (v29 < 0xF0
        || ((unint64_t v47 = v29 & 0xFFFFFFFFFFFFFFF0 | 8,
             unint64_t v48 = (char *)result + v47,
             unint64_t v49 = (unint64_t)a2 + v47,
             unint64_t v50 = (v29 & 0xFFFFFFFFFFFFFFF0) + 16,
             result + 1 < (const double *)((char *)a2 + v50))
          ? (BOOL v51 = a2 + 1 >= (double *)((char *)result + v50))
          : (BOOL v51 = 1),
            v51 ? (char v52 = 0) : (char v52 = 1),
            v48 > (char *)a2 ? (BOOL v53 = (unint64_t)result >= v49) : (BOOL v53 = 1),
            !v53 || (v52 & 1) != 0))
      {
        uint64_t v30 = (char *)result;
        uint64_t v31 = a2;
      }
      else
      {
        uint64_t v54 = (v29 >> 4) + 1;
        uint64_t v55 = 2 * (v54 & 0x1FFFFFFFFFFFFFFCLL);
        uint64_t v30 = (char *)&result[v55];
        uint64_t v31 = &a2[v55];
        unint64_t v56 = a2 + 4;
        unint64_t v57 = result + 4;
        uint64_t v58 = v54 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          unint64_t v59 = v56 - 4;
          float64x2x2_t v62 = vld2q_f64(v59);
          float64x2x2_t v64 = vld2q_f64(v56);
          unint64_t v60 = v57 - 4;
          vst2q_f64(v60, v62);
          vst2q_f64(v57, v64);
          v56 += 8;
          v57 += 8;
          v58 -= 4;
        }
        while (v58);
        if (v54 == (v54 & 0x1FFFFFFFFFFFFFFCLL)) {
          goto LABEL_28;
        }
      }
      do
      {
        uint64_t v32 = *(void *)v31;
        uint64_t v33 = *((void *)v31 + 1);
        v31 += 2;
        *(void *)uint64_t v30 = v32;
        *((void *)v30 + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = v33;
        v30 += 16;
      }
      while (v31 != a3);
    }
LABEL_28:
    int64_t v15 = v30 - (char *)result;
    uint64_t v13 = result;
    goto LABEL_29;
  }
  unint64_t v20 = &a2[2 * v19];
  if (v13 != result)
  {
    unint64_t v21 = v18 - 16;
    if ((unint64_t)(v18 - 16) < 0xF0
      || ((unint64_t v34 = v18 & 0xFFFFFFFFFFFFFFF0,
           unint64_t v35 = (char *)result + v34 - 8,
           unint64_t v36 = (unint64_t)a2 + v34 - 8,
           result + 1 < (const double *)((char *)a2 + v34))
        ? (BOOL v37 = a2 + 1 >= (double *)((char *)result + v34))
        : (BOOL v37 = 1),
          v37 ? (char v38 = 0) : (char v38 = 1),
          v35 > (char *)a2 ? (BOOL v39 = (unint64_t)result >= v36) : (BOOL v39 = 1),
          !v39 || (v38 & 1) != 0))
    {
      uint64_t v22 = result;
      long long v23 = a2;
    }
    else
    {
      uint64_t v40 = (v21 >> 4) + 1;
      uint64_t v41 = 2 * (v40 & 0x1FFFFFFFFFFFFFFCLL);
      uint64_t v22 = &result[v41];
      long long v23 = &a2[v41];
      uint64_t v42 = a2 + 4;
      uint64_t v43 = result + 4;
      uint64_t v44 = v40 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        int64_t v45 = v42 - 4;
        float64x2x2_t v61 = vld2q_f64(v45);
        float64x2x2_t v63 = vld2q_f64(v42);
        uint64_t v46 = v43 - 4;
        vst2q_f64(v46, v61);
        vst2q_f64(v43, v63);
        v42 += 8;
        v43 += 8;
        v44 -= 4;
      }
      while (v44);
      if (v40 == (v40 & 0x1FFFFFFFFFFFFFFCLL)) {
        goto LABEL_18;
      }
    }
    do
    {
      uint64_t v24 = *(void *)v23;
      uint64_t v25 = *((void *)v23 + 1);
      v23 += 2;
      *(void *)uint64_t v22 = v24;
      *((void *)v22 + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = v25;
      v22 += 2;
    }
    while (v23 != v20);
  }
LABEL_18:
  uint64_t v26 = v13;
  if (v20 != a3)
  {
    uint64_t v27 = v13;
    do
    {
      long long v28 = *(_OWORD *)v20;
      v20 += 2;
      *(_OWORD *)uint64_t v27 = v28;
      v27 += 2;
      v26 += 2;
    }
    while (v20 != a3);
  }
  int64_t v15 = (char *)v26 - (char *)v13;
LABEL_29:
  *int64_t v16 = (char *)v13 + v15;
  return result;
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __n)
{
  std::vector<std::ssub_match>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      unint64_t v11 = &end[__n];
      std::vector<std::ssub_match>::size_type v12 = 24 * __n;
      do
      {
        end->first.__i_ = 0;
        end->second.__i_ = 0;
        end->matched = 0;
        ++end;
        v12 -= 24;
      }
      while (v12);
      std::vector<std::ssub_match>::pointer end = v11;
    }
    this->__end_ = end;
  }
  else
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    unint64_t v7 = v6 + __n;
    if (v6 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v10 = (char *)operator new(24 * v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v13 = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v6];
    std::vector<std::ssub_match>::size_type v14 = 24 * __n;
    int64_t v15 = &v13[__n];
    int64_t v16 = v13;
    do
    {
      v16->first.__i_ = 0;
      v16->second.__i_ = 0;
      v16->matched = 0;
      ++v16;
      v14 -= 24;
    }
    while (v14);
    std::vector<std::ssub_match>::pointer begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v18 = end[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
        *(void *)&v13[-1].matched = *(void *)&end[-1].matched;
        v13[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v18;
        --v13;
        --end;
      }
      while (end != begin);
      std::vector<std::ssub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v15;
    this->__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v9];
    if (end)
    {
      operator delete(end);
    }
  }
}

uint64_t sub_19243984C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

void E5RT::E5OperationBuilder::Create(int a1)
{
  switch(a1)
  {
    case 1:
      operator new();
    case 2:
      operator new();
    case 3:
      operator new();
    case 4:
      operator new();
    case 5:
      operator new();
    case 7:
      operator new();
    case 8:
      operator new();
    case 9:
      operator new();
    case 11:
      operator new();
    case 12:
      operator new();
    case 13:
      operator new();
    case 14:
      operator new();
    default:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v4, "Create");
      std::string::basic_string[abi:ne180100]<0>(v2, "Invalid OpCode.");
      E5RT::Status::Status(v3, 1, v2);
      E5RT::E5RTError::E5RTError(exception, v4, v3);
  }
}

void sub_19243A0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if (v23)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void sub_19243A138(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x10F3C40CE7A3A92);
  _Unwind_Resume(a1);
}

void E5RT::E5OperationBuilder::SetOperationAttributes<AneInferenceOpT>(const void *a1, uint64_t *a2)
{
  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "SetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v8, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v9, 2, v8);
    E5RT::E5RTError::E5RTError(exception, v10, v9);
  }
  uint64_t v4 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v6 = (std::__shared_weak_count *)*((void *)v3 + 7);
  *((void *)v3 + 6) = v4;
  *((void *)v3 + 7) = v5;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_19243A380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if (v23)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void E5RT::E5OperationBuilder::SetOperationAttributes<BnnsCpuInferenceOpT>(const void *a1, uint64_t *a2)
{
  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "SetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v8, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v9, 2, v8);
    E5RT::E5RTError::E5RTError(exception, v10, v9);
  }
  uint64_t v4 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v6 = (std::__shared_weak_count *)*((void *)v3 + 7);
  *((void *)v3 + 6) = v4;
  *((void *)v3 + 7) = v5;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_19243A5C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if (v23)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void E5RT::E5OperationBuilder::SetOperationAttributes<CpuInferenceOpT>(const void *a1, uint64_t *a2)
{
  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "SetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v8, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v9, 2, v8);
    E5RT::E5RTError::E5RTError(exception, v10, v9);
  }
  uint64_t v4 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v6 = (std::__shared_weak_count *)*((void *)v3 + 7);
  *((void *)v3 + 6) = v4;
  *((void *)v3 + 7) = v5;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_19243A808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if (v23)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void E5RT::E5OperationBuilder::SetOperationAttributes<CastOpT>(const void *a1, uint64_t *a2)
{
  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "SetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v8, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v9, 2, v8);
    E5RT::E5RTError::E5RTError(exception, v10, v9);
  }
  uint64_t v4 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v6 = (std::__shared_weak_count *)*((void *)v3 + 7);
  *((void *)v3 + 6) = v4;
  *((void *)v3 + 7) = v5;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_19243AA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if (v23)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void E5RT::E5OperationBuilder::SetOperationAttributes<QuantOpT>(const void *a1, uint64_t *a2)
{
  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "SetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v8, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v9, 2, v8);
    E5RT::E5RTError::E5RTError(exception, v10, v9);
  }
  uint64_t v4 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v6 = (std::__shared_weak_count *)*((void *)v3 + 7);
  *((void *)v3 + 6) = v4;
  *((void *)v3 + 7) = v5;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_19243AC90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if (v23)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void E5RT::E5OperationBuilder::SetOperationAttributes<DequantOpT>(const void *a1, uint64_t *a2)
{
  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "SetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v8, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v9, 2, v8);
    E5RT::E5RTError::E5RTError(exception, v10, v9);
  }
  uint64_t v4 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v6 = (std::__shared_weak_count *)*((void *)v3 + 7);
  *((void *)v3 + 6) = v4;
  *((void *)v3 + 7) = v5;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_19243AED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if (v23)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void E5RT::E5OperationBuilder::SetOperationAttributes<MlcCpuInferenceOpT>(const void *a1, uint64_t *a2)
{
  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "SetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v8, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v9, 2, v8);
    E5RT::E5RTError::E5RTError(exception, v10, v9);
  }
  uint64_t v4 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v6 = (std::__shared_weak_count *)*((void *)v3 + 7);
  *((void *)v3 + 6) = v4;
  *((void *)v3 + 7) = v5;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_19243B118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if (v23)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void E5RT::E5OperationBuilder::SetOperationAttributes<MpsGraphInferenceOpT>(const void *a1, uint64_t *a2)
{
  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "SetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v8, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v9, 2, v8);
    E5RT::E5RTError::E5RTError(exception, v10, v9);
  }
  uint64_t v4 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v6 = (std::__shared_weak_count *)*((void *)v3 + 7);
  *((void *)v3 + 6) = v4;
  *((void *)v3 + 7) = v5;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_19243B35C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if (v23)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void E5RT::E5OperationBuilder::SetOperationAttributes<EirInferenceOpT>(const void *a1, uint64_t *a2)
{
  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "SetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v8, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v9, 2, v8);
    E5RT::E5RTError::E5RTError(exception, v10, v9);
  }
  uint64_t v4 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v6 = (std::__shared_weak_count *)*((void *)v3 + 7);
  *((void *)v3 + 6) = v4;
  *((void *)v3 + 7) = v5;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_19243B5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if (v23)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void E5RT::E5OperationBuilder::SetOperationAttributes<JitCallOpT>(const void *a1, uint64_t *a2)
{
  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "SetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v8, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v9, 2, v8);
    E5RT::E5RTError::E5RTError(exception, v10, v9);
  }
  uint64_t v4 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v6 = (std::__shared_weak_count *)*((void *)v3 + 7);
  *((void *)v3 + 6) = v4;
  *((void *)v3 + 7) = v5;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_19243B7E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if (v23)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void E5RT::E5OperationBuilder::SetOperationAttributes<E5MinimalCpuOpT>(const void *a1, uint64_t *a2)
{
  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v10, "SetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v8, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v9, 2, v8);
    E5RT::E5RTError::E5RTError(exception, v10, v9);
  }
  uint64_t v4 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v6 = (std::__shared_weak_count *)*((void *)v3 + 7);
  *((void *)v3 + 6) = v4;
  *((void *)v3 + 7) = v5;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_19243BA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if (v23)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void *E5RT::E5OperationBuilder::Finish@<X0>(const void **a1@<X0>, void *a2@<X8>)
{
  BOOL v3 = *a1;
  *a1 = 0;
  if (!v3
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "Finish");
    std::string::basic_string[abi:ne180100]<0>(v7, "Invalid builder object in Finish call for E5Operation");
    E5RT::Status::Status(v8, 2, v7);
    E5RT::E5RTError::E5RTError(exception, v9, v8);
  }
  *a2 = result;
  return result;
}

void sub_19243BBAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::E5OperationImpl<BarrierOpT>::~E5OperationImpl(uint64_t a1)
{
  E5RT::E5OperationImpl<BarrierOpT>::~E5OperationImpl(a1);

  JUMPOUT(0x192FF16B0);
}

{
  void *v2;
  std::__shared_weak_count *v3;
  E5RT::AsyncEventImpl *v4;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE324C90;
  *(void *)(a1 + 8) = &unk_1EE324D20;
  unint64_t v2 = *(void **)(a1 + 376);
  if (v2)
  {
    *(void *)(a1 + 384) = v2;
    operator delete(v2);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 272));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 168));
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap((void **)(a1 + 64));
  BOOL v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    {
LABEL_6:
      uint64_t v4 = (E5RT::AsyncEventImpl *)a1;
      goto LABEL_8;
    }
  }
  else if ((*(char *)(a1 + 39) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 16));
  uint64_t v4 = (E5RT::AsyncEventImpl *)a1;

LABEL_8:
  E5RT::AsyncEventImpl::~AsyncEventImpl(v4);
}

uint64_t E5RT::E5OperationImpl<BarrierOpT>::GetOpcode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t E5RT::E5OperationImpl<BarrierOpT>::GetOpName(uint64_t a1)
{
  return a1 + 16;
}

uint64_t E5RT::E5OperationImpl<BarrierOpT>::GetInputs(uint64_t a1)
{
  return a1 + 64;
}

uint64_t E5RT::E5OperationImpl<BarrierOpT>::GetOutputs(uint64_t a1)
{
  return a1 + 168;
}

uint64_t E5RT::E5OperationImpl<BarrierOpT>::GetInOuts(uint64_t a1)
{
  return a1 + 272;
}

uint64_t E5RT::E5OperationImpl<BarrierOpT>::GetCompletionEvent(uint64_t a1)
{
  return a1 + 400;
}

uint64_t E5RT::E5OperationImpl<BarrierOpT>::GetDependentEvents(uint64_t a1)
{
  return a1 + 376;
}

uint64_t E5RT::E5OperationImpl<BarrierOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

std::string *E5RT::E5OperationImpl<BarrierOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 16), a2);
}

void E5RT::E5OperationImpl<BarrierOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 64, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void E5RT::E5OperationImpl<BarrierOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 168, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void E5RT::E5OperationImpl<BarrierOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 272, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t E5RT::E5OperationImpl<BarrierOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(void *)(result + 400) = a2;
  *(unsigned char *)(result + 408) = 1;
  return result;
}

void E5RT::E5OperationImpl<BarrierOpT>::AddDependentEvent(void *a1, uint64_t a2)
{
  uint64_t v5 = (char *)a1[48];
  unint64_t v4 = a1[49];
  uint64_t v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(void *)uint64_t v5 = a2;
    uint64_t v7 = (uint64_t)(v5 + 8);
    goto LABEL_22;
  }
  unint64_t v8 = (char *)a1[47];
  uint64_t v9 = (v5 - v8) >> 3;
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = v4 - (void)v8;
  if (v11 >> 2 > v10) {
    unint64_t v10 = v11 >> 2;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v13 = operator new(8 * v12);
    std::vector<std::ssub_match>::size_type v14 = &v13[8 * v9];
    int64_t v15 = &v13[8 * v12];
    *std::vector<std::ssub_match>::size_type v14 = a2;
    uint64_t v7 = (uint64_t)(v14 + 1);
    int64_t v16 = v5 - v8;
    if (v5 == v8) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }
  uint64_t v13 = 0;
  std::vector<std::ssub_match>::size_type v14 = (void *)(8 * v9);
  int64_t v15 = 0;
  *(void *)(8 * v9) = a2;
  uint64_t v7 = 8 * v9 + 8;
  int64_t v16 = v5 - v8;
  if (v5 != v8)
  {
LABEL_14:
    unint64_t v17 = v16 - 8;
    if (v17 < 0x58) {
      goto LABEL_27;
    }
    if ((unint64_t)(v8 - v13) < 0x20) {
      goto LABEL_27;
    }
    uint64_t v18 = (v17 >> 3) + 1;
    uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v6 = &v5[-v19];
    std::vector<std::ssub_match>::size_type v14 = (void *)((char *)v14 - v19);
    unint64_t v20 = &v13[8 * v9 - 16];
    unint64_t v21 = v5 - 16;
    uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *(_OWORD *)v21;
      *(v20 - E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = *((_OWORD *)v21 - 1);
      _OWORD *v20 = v23;
      v20 -= 2;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        uint64_t v24 = *((void *)v6 - 1);
        v6 -= 8;
        *--std::vector<std::ssub_match>::size_type v14 = v24;
      }
      while (v6 != v8);
    }
  }
LABEL_20:
  a1[47] = v14;
  a1[48] = v7;
  a1[49] = v15;
  if (v8) {
    operator delete(v8);
  }
LABEL_22:
  a1[48] = v7;
}

void non-virtual thunk to'E5RT::E5OperationImpl<BarrierOpT>::~E5OperationImpl(uint64_t a1)
{
}

{
  uint64_t vars8;

  E5RT::E5OperationImpl<BarrierOpT>::~E5OperationImpl(a1 - 8);

  JUMPOUT(0x192FF16B0);
}

uint64_t non-virtual thunk to'E5RT::E5OperationImpl<BarrierOpT>::SetOpCode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

std::string *non-virtual thunk to'E5RT::E5OperationImpl<BarrierOpT>::SetOpName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void non-virtual thunk to'E5RT::E5OperationImpl<BarrierOpT>::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 56, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<BarrierOpT>::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 160, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<BarrierOpT>::AddInOut(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 264, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *unint64_t v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void non-virtual thunk to'E5RT::E5OperationImpl<BarrierOpT>::AddDependentEvent(uint64_t a1, uint64_t a2)
{
}

uint64_t non-virtual thunk to'E5RT::E5OperationImpl<BarrierOpT>::AddCompletionEvent(uint64_t result, uint64_t a2)
{
  *(void *)(result + 392) = a2;
  *(unsigned char *)(result + 400) = 1;
  return result;
}

void E5Common::AutoSharedDataPtr::~AutoSharedDataPtr(std::__shared_weak_count **this)
{
  uint64_t v1 = (E5Common::AutoSharedDataPtr *)this;
  *this = (std::__shared_weak_count *)&unk_1EE3278D8;
  unint64_t v2 = this[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    this = (std::__shared_weak_count **)v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)this);
}

void E5Common::AutoSharedDataPtr::~AutoSharedDataPtr(E5Common::AutoSharedDataPtr *this)
{
  *(void *)this = &unk_1EE3278D8;
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl(this);

  JUMPOUT(0x192FF16B0);
}

void *E5Common::AutoSharedDataPtr::AutoSharedDataPtr(void *result, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  *uint64_t result = &unk_1EE3278D8;
  result[1] = v3;
  result[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t E5Common::AutoSharedDataPtr::GetLength(E5Common::AutoSharedDataPtr *this)
{
  return *(void *)(*((void *)this + 1) + 8);
}

uint64_t E5Common::AutoSharedDataPtr::GetSpan(E5Common::AutoSharedDataPtr *this)
{
  return **((void **)this + 1);
}

unint64_t E5Common::AutoSharedDataPtr::GetSpan(E5Common::AutoSharedDataPtr *this, unint64_t a2, uint64_t a3)
{
  if (!a3 || ((v3 = (void *)*((void *)this + 1), unint64_t v4 = v3[1], v4 > a2) ? (v5 = a3 + a2 > v4) : (v5 = 1), v5))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_1E5745140, MEMORY[0x1E4FBA1B8]);
  }
  return *v3 + a2;
}

void sub_19243C59C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

id E5Common::GetANEFAdaptedModel(void *a1, uint64_t a2)
{
  v45[2] = *MEMORY[0x1E4F143B8];
  id v35 = a1;
  unint64_t v36 = [v35 getCacheURLIdentifier];
  if (!v36)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "MILCompilerForANE error: ANEF returned cacheURLIdentifier as nil for base model.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL v37 = (void *)[MEMORY[0x1E4F1CBF0] mutableCopy];
  uint64_t v3 = *(uint64_t **)(a2 + 16);
  if (v3)
  {
    do
    {
      unint64_t v4 = (void *)[MEMORY[0x1E4F1CBF0] mutableCopy];
      char v38 = v3;
      for (unint64_t i = (uint64_t *)v3[7]; i; unint64_t i = (uint64_t *)*i)
      {
        uint64_t v6 = i + 2;
        if (*((char *)i + 39) < 0) {
          uint64_t v6 = (void *)*v6;
        }
        uint64_t v7 = (void *)MEMORY[0x1E4F4E0A8];
        unint64_t v8 = [NSString stringWithUTF8String:v6];
        uint64_t v9 = i + 5;
        if (*((char *)i + 63) < 0) {
          uint64_t v9 = (void *)*v9;
        }
        unint64_t v10 = (void *)MEMORY[0x1E4F1CB10];
        uint64_t v11 = [NSString stringWithUTF8String:v9];
        unint64_t v12 = [v10 fileURLWithPath:v11];
        uint64_t v13 = [v7 weightWithSymbolAndURL:v8 weightURL:v12];

        [v4 addObject:v13];
      }
      std::vector<std::ssub_match>::size_type v14 = v38 + 2;
      if (*((char *)v38 + 39) < 0) {
        std::vector<std::ssub_match>::size_type v14 = (void *)*v14;
      }
      int64_t v15 = (void *)MEMORY[0x1E4F4E078];
      int64_t v16 = [NSString stringWithUTF8String:v14];
      unint64_t v17 = [v15 procedureDataWithSymbol:v16 weightArray:v4];

      [v37 addObject:v17];
      uint64_t v3 = (uint64_t *)*v38;
    }
    while (*v38);
  }
  uint64_t v18 = [NSString stringWithFormat:@"Adapting ANE model."];
  uint64_t v19 = [MEMORY[0x1E4F4E068] withProcedureData:v18 procedureArray:v37];
  uint64_t v20 = *MEMORY[0x1E4F4E188];
  v44[0] = *MEMORY[0x1E4F4E0B8];
  v44[1] = v20;
  uint64_t v21 = *MEMORY[0x1E4F4E160];
  v45[0] = v36;
  v45[1] = v21;
  uint64_t v22 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v45 forKeys:v44 count:2];
  long long v23 = [MEMORY[0x1E4F29128] UUID];
  uint64_t v24 = [v23 UUIDString];

  uint64_t v25 = [NSString stringWithFormat:@"%@:%@", v36, v24];
  uint64_t v26 = [MEMORY[0x1E4F4E060] modelWithCacheURLIdentifier:v25];
  uint64_t v27 = [MEMORY[0x1E4F4E030] sharedConnection];
  id v43 = 0;
  uint64_t v28 = [v27 loadModelNewInstance:v26 options:v22 modelInstParams:v19 qos:21 error:&v43];
  id v29 = v43;

  if ((v28 & 1) == 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"ANE adapted model load failure: ", 32);
    if (v29)
    {
      uint64_t v28 = [v29 localizedDescription];
      uint64_t v31 = (const char *)[(id)v28 UTF8String];
    }
    else
    {
      uint64_t v31 = "unknown error";
    }
    size_t v32 = strlen(v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v31, v32);
    if (v29) {

    }
    uint64_t v33 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v41, "GetANEFAdaptedModel");
    std::stringbuf::str();
    E5RT::Status::Status(v40, 9, v39);
    E5RT::E5RTError::E5RTError(v33, v41, v40);
  }

  return v26;
}

void sub_19243CA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  _Unwind_Resume(a1);
}

void E5RT::GetDeviceBundleNamesCompatibleWithPlatform(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = xmmword_192DBBB10;
  v4[1] = unk_192DBBB20;
  uint64_t v2 = __p;
  if (a1 > 33039)
  {
    if (a1 == 33040)
    {
      uint64_t v3 = 0;
    }
    else
    {
      if (a1 != 33042) {
        goto LABEL_11;
      }
      uint64_t v3 = 1;
    }
  }
  else if (a1 == 24608)
  {
    uint64_t v3 = 2;
  }
  else
  {
    if (a1 != 24609) {
      goto LABEL_11;
    }
    uint64_t v3 = 3;
  }
  uint64_t v2 = (char *)v4 + 8 * v3;
LABEL_11:
  if (v2 - (char *)v4 == 32)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    char v6 = 16;
    strcpy(__p, "H14G.N301.bundle");
    std::vector<std::string>::vector[abi:ne180100](a2, (uint64_t)__p, 1uLL);
    if (v6 < 0) {
      operator delete(*(void **)__p);
    }
  }
}

void sub_19243CCD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::vector<std::string>::iterator std::vector<std::string>::insert(std::vector<std::string> *this, std::vector<std::string>::const_iterator __position, std::vector<std::string>::value_type *__x)
{
  std::vector<std::string>::pointer begin = this->__begin_;
  std::vector<std::ssub_match>::pointer end = this->__end_;
  int64_t v7 = __position.__i_ - this->__begin_;
  std::vector<std::string>::pointer first = &this->__begin_[v7];
  value = this->__end_cap_.__value_;
  if (end >= value)
  {
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3) + 1;
    if (v15 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x555555555555555) {
      unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v17 = v15;
    }
    v37.__end_cap_.__value_ = (std::allocator<std::string> *)&this->__end_cap_;
    if (v17)
    {
      if (v17 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v18 = (std::string *)operator new(24 * v17);
    }
    else
    {
      uint64_t v18 = 0;
    }
    v37.__first_ = v18;
    v37.__begin_ = &v18[v7];
    v37.__end_ = v37.__begin_;
    v37.__end_cap_.__value_ = &v18[v17];
    std::__split_buffer<std::string>::push_back(&v37, __x);
    std::__split_buffer<std::string>::pointer v20 = v37.__begin_;
    std::vector<std::string>::pointer v21 = this->__begin_;
    uint64_t v22 = v37.__begin_;
    if (this->__begin_ != first)
    {
      std::__split_buffer<std::string>::pointer v23 = v37.__begin_;
      uint64_t v24 = first;
      do
      {
        uint64_t v22 = v23 - 1;
        long long v25 = *(_OWORD *)&v24[-1].__r_.__value_.__l.__data_;
        v23[-1].__r_.__value_.__r.__words[2] = v24[-1].__r_.__value_.__r.__words[2];
        *(_OWORD *)&v23[-1].__r_.__value_.__l.__data_ = v25;
        v24[-1].__r_.__value_.__l.__size_ = 0;
        v24[-1].__r_.__value_.__r.__words[2] = 0;
        v24[-1].__r_.__value_.__r.__words[0] = 0;
        --v23;
        --v24;
      }
      while (v24 != v21);
    }
    v37.__begin_ = v22;
    std::vector<std::string>::pointer v26 = this->__end_;
    std::__split_buffer<std::string>::pointer v27 = v37.__end_;
    if (v26 != first)
    {
      do
      {
        long long v28 = *(_OWORD *)&first->__r_.__value_.__l.__data_;
        v27->__r_.__value_.__r.__words[2] = first->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
        ++v27;
        first->__r_.__value_.__l.__size_ = 0;
        first->__r_.__value_.__r.__words[2] = 0;
        first->__r_.__value_.__r.__words[0] = 0;
        ++first;
      }
      while (first != v26);
      uint64_t v22 = v37.__begin_;
      std::vector<std::string>::pointer first = this->__end_;
    }
    id v29 = this->__begin_;
    this->__begin_ = v22;
    this->__end_ = v27;
    uint64_t v30 = this->__end_cap_.__value_;
    this->__end_cap_.__value_ = v37.__end_cap_.__value_;
    v37.__end_ = first;
    v37.__end_cap_.__value_ = v30;
    v37.__first_ = v29;
    v37.__begin_ = v29;
    if (first == v29)
    {
      if (!first) {
        return (std::vector<std::string>::iterator)v20;
      }
    }
    else
    {
      do
      {
        std::__split_buffer<std::string>::pointer v31 = first - 1;
        v37.__end_ = first - 1;
        if (SHIBYTE(first[-1].__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v31->__r_.__value_.__l.__data_);
          std::__split_buffer<std::string>::pointer v31 = v37.__end_;
        }
        std::vector<std::string>::pointer first = v31;
      }
      while (v31 != v29);
      std::vector<std::string>::pointer first = v37.__first_;
      if (!v37.__first_) {
        return (std::vector<std::string>::iterator)v20;
      }
    }
    operator delete(first);
    return (std::vector<std::string>::iterator)v20;
  }
  if (first == end)
  {
    long long v19 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
    first->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
    *(_OWORD *)&first->__r_.__value_.__l.__data_ = v19;
    *(_OWORD *)&__x->__r_.__value_.__r.__words[1] = 0uLL;
    __x->__r_.__value_.__r.__words[0] = 0;
    this->__end_ = first + 1;
    return (std::vector<std::string>::iterator)first;
  }
  unint64_t v10 = first + 1;
  uint64_t v11 = end - 1;
  if ((unint64_t)end >= 0x18)
  {
    unint64_t v12 = end - 1;
    std::vector<std::string>::pointer v13 = this->__end_;
    do
    {
      long long v14 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v13->__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
      ++v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      ++v12;
    }
    while (v12 < end);
    this->__end_ = v13;
    if (end == v10) {
      goto LABEL_39;
    }
LABEL_35:
    uint64_t v32 = 8 * (((char *)end - (char *)v10) >> 3);
    do
    {
      if (SHIBYTE(v11->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v11->__r_.__value_.__l.__data_);
      }
      uint64_t v33 = (long long *)((char *)&first[-1] + v32);
      long long v34 = *v33;
      v11->__r_.__value_.__r.__words[2] = first->__r_.__value_.__r.__words[(unint64_t)v32 / 8 - 1];
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v34;
      --v11;
      first->__r_.__value_.__s.__data_[v32 - 1] = 0;
      *(unsigned char *)uint64_t v33 = 0;
      v32 -= 24;
    }
    while (v32);
    goto LABEL_39;
  }
  this->__end_ = end;
  if (end != v10) {
    goto LABEL_35;
  }
LABEL_39:
  if (SHIBYTE(first->__r_.__value_.__r.__words[2]) < 0) {
    operator delete(first->__r_.__value_.__l.__data_);
  }
  long long v35 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
  first->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
  *(_OWORD *)&first->__r_.__value_.__l.__data_ = v35;
  *((unsigned char *)&__x->__r_.__value_.__s + 23) = 0;
  __x->__r_.__value_.__s.__data_[0] = 0;
  return (std::vector<std::string>::iterator)first;
}

void sub_19243D008(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_19243D01C(std::string *a1, uint64_t a2, uint64_t a3)
{
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__p, ".bundle");
  E5Common::StringUtils::GetSubstringBeforeSuffix(a3, (uint64_t)&__p, v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v5 = (char)v22;
  if ((v22 & 0x80u) == 0) {
    size_t v6 = v22;
  }
  else {
    size_t v6 = (size_t)v21[1];
  }
  unint64_t v7 = v6 + 3;
  if (v6 + 3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v7 >= 0x17)
  {
    uint64_t v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v9 = v7 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v6 + 3;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v6 + 3;
    if (!v6) {
      goto LABEL_17;
    }
  }
  if (v5 >= 0) {
    uint64_t v11 = v21;
  }
  else {
    uint64_t v11 = (void **)v21[0];
  }
  memmove(p_dst, v11, v6);
LABEL_17:
  *(_DWORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v6) = 3499310;
  E5RT::PathWrapper::Append(a2, &__dst, &__p);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (!E5RT::PathWrapper::PathExists((const std::__fs::filesystem::path *)&__p))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__dst, "GetE5FileFromFolderPath");
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v15 = *(std::string *)a2;
    }
    std::vector<std::string>::pointer v13 = std::string::insert(&v15, 0, "Unable to find E5 file in folder ");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    std::string::size_type v17 = v13->__r_.__value_.__r.__words[2];
    long long v16 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    E5RT::Status::Status(v18, 8, &v16);
    E5RT::E5RTError::E5RTError(exception, &__dst, v18);
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    *a1 = __p;
    if (((char)v22 & 0x80000000) == 0) {
      return;
    }
    goto LABEL_25;
  }
  std::string::__init_copy_ctor_external(a1, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (((char)v22 & 0x80000000) == 0) {
      return;
    }
    goto LABEL_25;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((char)v22 < 0) {
LABEL_25:
  }
    operator delete(v21[0]);
}

void sub_19243D290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v35 - 65) < 0) {
    operator delete(*(void **)(v35 - 88));
  }
  _Unwind_Resume(exception_object);
}

void E5RT::GetPlatformsInCompositeBundle(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = (const std::__fs::filesystem::path *)E5RT::PathWrapper::PathWrapper(&v22, a1);
  char v21 = 7;
  strcpy((char *)&__p, ".bundle");
  BOOL HasExtension = E5RT::PathWrapper::HasExtension(v3, (uint64_t)&__p);
  if (v21 < 0) {
    operator delete(__p);
  }
  if (!HasExtension)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "GetPlatformsInCompositeBundle");
    std::string::basic_string[abi:ne180100]<0>(&v18, "Invalid E5 path specified.");
    E5RT::Status::Status(v16, 8, &v18);
    E5RT::E5RTError::E5RTError(exception, &__p, v16);
  }
  *((unsigned char *)&v18.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v18, ".bundle");
  E5RT::PathWrapper::FindFilesWithExtension((uint64_t)&v22, (uint64_t)&v18, 0, (uint64_t)&__p);
  if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    int v5 = (void **)__p;
    size_t v6 = v20;
    if (__p != v20) {
      goto LABEL_12;
    }
LABEL_6:
    if (v5) {
      goto LABEL_26;
    }
LABEL_7:
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_28;
    }
    return;
  }
  operator delete(v18.__r_.__value_.__l.__data_);
  int v5 = (void **)__p;
  size_t v6 = v20;
  if (__p == v20) {
    goto LABEL_6;
  }
  do
  {
LABEL_12:
    if (*((char *)v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v18, (const std::string::value_type *)*v5, (std::string::size_type)v5[1]);
    }
    else
    {
      long long v7 = *(_OWORD *)v5;
      v18.__r_.__value_.__r.__words[2] = (std::string::size_type)v5[2];
      *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v7;
    }
    char v15 = 7;
    strcpy((char *)v14, ".bundle");
    E5Common::StringUtils::GetSubstringBeforeSuffix((uint64_t)&v18, (uint64_t)v14, v16);
    unint64_t v8 = *(void *)(a2 + 8);
    if (v8 >= *(void *)(a2 + 16))
    {
      uint64_t v10 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a2, (uint64_t)v16);
      int v11 = SHIBYTE(v17);
      *(void *)(a2 + 8) = v10;
      if (v11 < 0)
      {
        operator delete(v16[0]);
        if (v15 < 0)
        {
LABEL_23:
          operator delete(v14[0]);
          if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_11;
          }
          goto LABEL_24;
        }
      }
      else if (v15 < 0)
      {
        goto LABEL_23;
      }
    }
    else
    {
      long long v9 = *(_OWORD *)v16;
      *(void *)(v8 + 16) = v17;
      *(_OWORD *)unint64_t v8 = v9;
      v16[1] = 0;
      uint64_t v17 = 0;
      v16[0] = 0;
      *(void *)(a2 + 8) = v8 + 24;
      if (v15 < 0) {
        goto LABEL_23;
      }
    }
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
LABEL_24:
    operator delete(v18.__r_.__value_.__l.__data_);
LABEL_11:
    v5 += 3;
  }
  while (v5 != v6);
  int v5 = (void **)__p;
  if (!__p) {
    goto LABEL_7;
  }
LABEL_26:
  unint64_t v12 = v20;
  if (v20 == v5)
  {
    std::__split_buffer<std::string>::pointer v20 = v5;
    operator delete(v5);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_28;
    }
  }
  else
  {
    do
    {
      if (*((char *)v12 - 1) < 0) {
        operator delete(*(v12 - 3));
      }
      v12 -= 3;
    }
    while (v12 != v5);
    std::__split_buffer<std::string>::pointer v20 = v5;
    operator delete(__p);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
LABEL_28:
    }
      operator delete(v22.__r_.__value_.__l.__data_);
  }
}

void sub_19243D67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v34 - 49) < 0) {
    operator delete(*(void **)(v34 - 72));
  }
  std::vector<std::string>::~vector[abi:ne180100](v33);
  _Unwind_Resume(a1);
}

void *std::vector<std::string>::vector<std::__wrap_iter<std::string_view *>,0>(void *a1, uint64_t a2, uint64_t a3)
{
  a1[2] = 0;
  int v4 = a1 + 16;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v5 = a3 - a2;
  if (a3 != a2)
  {
    if (v5 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v5 >> 4;
    long long v9 = operator new(24 * (v5 >> 4));
    *a1 = v9;
    a1[1] = v9;
    a1[2] = &v9[24 * v8];
    a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string_view *,std::string_view *,std::string*>(v4, a2, a3, v9);
  }
  return a1;
}

void sub_19243D854(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  if (*(void *)v1) {
    sub_19243DC1C((void **)(v1 + 8), *(void ***)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string_view *,std::string_view *,std::string*>(int a1, uint64_t a2, uint64_t a3, unsigned char *__dst)
{
  int v4 = __dst;
  std::vector<std::string>::pointer v13 = __dst;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    while (1)
    {
      size_t v7 = *(void *)(v6 + 8);
      if (v7 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      uint64_t v8 = *(const void **)v6;
      if (v7 >= 0x17) {
        break;
      }
      v4[23] = v7;
      if (v7) {
        goto LABEL_4;
      }
LABEL_5:
      v4[v7] = 0;
      int v4 = v13 + 24;
      v13 += 24;
      v6 += 16;
      if (v6 == a3) {
        return v4;
      }
    }
    uint64_t v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v9 = v7 | 7;
    }
    uint64_t v10 = v9 + 1;
    int v11 = operator new(v9 + 1);
    *((void *)v4 + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = v7;
    *((void *)v4 + 2) = v10 | 0x8000000000000000;
    *(void *)int v4 = v11;
    int v4 = v11;
LABEL_4:
    memmove(v4, v8, v7);
    goto LABEL_5;
  }
  return v4;
}

void sub_19243D980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19243D994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__split_buffer<std::string>::push_back(std::__split_buffer<std::string> *this, std::__split_buffer<std::string>::value_type *__x)
{
  std::__split_buffer<std::string>::pointer end = this->__end_;
  if (end == this->__end_cap_.__value_)
  {
    std::__split_buffer<std::string>::pointer first = this->__first_;
    std::__split_buffer<std::string>::pointer begin = this->__begin_;
    if (begin <= this->__first_)
    {
      unint64_t v14 = 0x5555555555555556 * (((char *)end - (char *)first) >> 3);
      if (end == first) {
        unint64_t v14 = 1;
      }
      if (v14 >= 0xAAAAAAAAAAAAAABLL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v15 = v14 >> 2;
      uint64_t v16 = v14;
      uint64_t v17 = (std::string *)operator new(24 * v14);
      std::string v18 = &v17[v15];
      long long v19 = &v17[v16];
      if (end == begin)
      {
        this->__first_ = v17;
        this->__begin_ = v18;
        this->__end_ = v18;
        this->__end_cap_.__value_ = v19;
      }
      else
      {
        uint64_t v20 = end - begin;
        char v21 = &v18[v20];
        uint64_t v22 = 24 * v20;
        uint64_t v23 = v15;
        do
        {
          uint64_t v24 = &v17[v23];
          long long v25 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
          v24->__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
          begin->__r_.__value_.__l.__size_ = 0;
          begin->__r_.__value_.__r.__words[2] = 0;
          begin->__r_.__value_.__r.__words[0] = 0;
          ++begin;
          ++v23;
          v22 -= 24;
        }
        while (v22);
        std::__split_buffer<std::string>::pointer first = this->__first_;
        std::__split_buffer<std::string>::pointer v26 = this->__begin_;
        std::__split_buffer<std::string>::pointer v27 = this->__end_;
        this->__first_ = v17;
        this->__begin_ = v18;
        this->__end_ = v21;
        this->__end_cap_.__value_ = v19;
        while (v27 != v26)
        {
          if (SHIBYTE(v27[-1].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v27[-1].__r_.__value_.__l.__data_);
          }
          --v27;
        }
      }
      if (first) {
        operator delete(first);
      }
      std::__split_buffer<std::string>::pointer end = this->__end_;
    }
    else
    {
      int64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)begin - (char *)this->__first_) >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      if (begin == end)
      {
        long long v28 = &begin[-v9];
      }
      else
      {
        uint64_t v11 = -24 * v9;
        do
        {
          std::vector<std::string>::pointer v13 = &begin[(unint64_t)v11 / 0x18];
          if (SHIBYTE(begin[(unint64_t)v11 / 0x18].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v13->__r_.__value_.__l.__data_);
          }
          long long v12 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
          v13->__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v12;
          *((unsigned char *)&begin->__r_.__value_.__s + 23) = 0;
          begin->__r_.__value_.__s.__data_[0] = 0;
          ++begin;
        }
        while (begin != end);
        std::__split_buffer<std::string>::pointer end = this->__begin_;
        long long v28 = &begin[v10];
      }
      this->__begin_ = &end[v10];
      this->__end_ = v28;
      std::__split_buffer<std::string>::pointer end = v28;
    }
  }
  long long v29 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
  end->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
  *(_OWORD *)&end->__r_.__value_.__l.__data_ = v29;
  __x->__r_.__value_.__l.__size_ = 0;
  __x->__r_.__value_.__r.__words[2] = 0;
  __x->__r_.__value_.__r.__words[0] = 0;
  ++this->__end_;
}

void sub_19243DC1C(void **a1, void **a2, void **a3)
{
  uint64_t v5 = (void **)*a1;
  uint64_t v6 = a2;
  if (v5 != a2)
  {
    do
    {
      if (*((char *)v5 - 1) < 0) {
        operator delete(*(v5 - 3));
      }
      v5 -= 3;
    }
    while (v5 != a2);
    uint64_t v6 = *a3;
  }
  *a1 = a2;

  operator delete(v6);
}

E5RT::E5ProgramImpl **std::unique_ptr<E5RT::E5ProgramImpl>::~unique_ptr[abi:ne180100](E5RT::E5ProgramImpl **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    E5RT::E5ProgramImpl::~E5ProgramImpl(v2);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

uint64_t sub_19243DCE0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

void E5RT::E5ProgramBuilder::Create(E5RT::E5ProgramBuilder *this)
{
}

void sub_19243DD68(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x10F3C403D776284);
  _Unwind_Resume(a1);
}

void *E5RT::E5ProgramBuilder::Finish@<X0>(const void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  if (!v3
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "Finish");
    std::string::basic_string[abi:ne180100]<0>(v7, "Invalid builder object in Finish call for E5Program");
    E5RT::Status::Status(v8, 2, v7);
    E5RT::E5RTError::E5RTError(exception, v9, v8);
  }
  *a2 = result;
  return result;
}

void sub_19243DE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

E5RT::E5ProgramImpl *E5RT::E5ProgramImpl::E5ProgramImpl(E5RT::E5ProgramImpl *this)
{
  uint64_t v2 = E5RT::E5Program::E5Program(this);
  E5RT::E5ProgramBuilder::E5ProgramBuilder(v2 + 1);
  *(void *)this = &unk_1EE324908;
  *((void *)this + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = &unk_1EE324980;
  *((_OWORD *)this + E5RT::E5BlockImpl::~E5BlockImpl(this - 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((void *)this + 12) = 0;
  return this;
}

void sub_19243DF7C(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

std::string *E5RT::E5ProgramImpl::SetE5PlatformBundleDir(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 80), a2);
}

void non-virtual thunk to'E5RT::E5ProgramImpl::~E5ProgramImpl(void **this)
{
}

{
  uint64_t vars8;

  E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1);

  JUMPOUT(0x192FF16B0);
}

void E5RT::E5ProgramImpl::GetPublicFunctionWithName(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3 = *(uint64_t **)(a1 + 16);
  int v4 = *(uint64_t **)(a1 + 24);
  if (v3 == v4) {
    goto LABEL_37;
  }
  do
  {
    uint64_t v8 = *v3;
    uint64_t v9 = (std::__shared_weak_count *)v3[1];
    v28[0] = *v3;
    v28[1] = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
    uint64_t v11 = v10[23];
    if ((v11 & 0x80u) == 0) {
      uint64_t v12 = v10[23];
    }
    else {
      uint64_t v12 = *((void *)v10 + 1);
    }
    uint64_t v13 = a2[23];
    int v14 = (char)v13;
    if ((v13 & 0x80u) != 0) {
      uint64_t v13 = *((void *)a2 + 1);
    }
    if (v12 == v13)
    {
      if (v14 >= 0) {
        unint64_t v15 = a2;
      }
      else {
        unint64_t v15 = *(unsigned __int8 **)a2;
      }
      if ((v11 & 0x80) != 0)
      {
        BOOL v23 = memcmp(*(const void **)v10, v15, *((void *)v10 + 1)) == 0;
      }
      else
      {
        if (!v10[23])
        {
          BOOL v23 = 1;
          if (!v9) {
            goto LABEL_28;
          }
          goto LABEL_26;
        }
        uint64_t v16 = v11 - 1;
        do
        {
          int v18 = *v10++;
          int v17 = v18;
          int v20 = *v15++;
          int v19 = v20;
          BOOL v22 = v16-- != 0;
          BOOL v23 = v17 == v19;
        }
        while (v17 == v19 && v22);
      }
      if (!v9) {
        goto LABEL_28;
      }
    }
    else
    {
      BOOL v23 = 0;
      if (!v9) {
        goto LABEL_28;
      }
    }
LABEL_26:
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
LABEL_28:
    if (v23) {
      goto LABEL_33;
    }
    v3 += 2;
  }
  while (v3 != v4);
  uint64_t v3 = v4;
LABEL_33:
  if (v3 == *(uint64_t **)(a1 + 24))
  {
LABEL_37:
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v28, "GetPublicFunctionWithName");
    std::string::basic_string[abi:ne180100]<0>(v26, "Given function name not found.");
    E5RT::Status::Status(v27, 1, v26);
    E5RT::E5RTError::E5RTError(exception, v28, v27);
  }
  *a3 = *v3;
  uint64_t v24 = v3[1];
  a3[1] = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_19243E20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

uint64_t E5RT::E5ProgramImpl::GetPrivateFunctionWithName@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = result;
  uint64_t v5 = *(void **)(result + 40);
  uint64_t v6 = *(void **)(result + 48);
  if (v5 == v6)
  {
LABEL_18:
    if (v5 == *(void **)(v3 + 48)) {
      goto LABEL_23;
    }
  }
  else
  {
    do
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)*v5 + 16))();
      uint64_t v8 = *(unsigned __int8 *)(result + 23);
      if ((v8 & 0x80u) == 0) {
        uint64_t v9 = *(unsigned __int8 *)(result + 23);
      }
      else {
        uint64_t v9 = *(void *)(result + 8);
      }
      uint64_t v10 = a2[23];
      int v11 = (char)v10;
      if ((v10 & 0x80u) != 0) {
        uint64_t v10 = *((void *)a2 + 1);
      }
      if (v9 == v10)
      {
        if (v11 >= 0) {
          uint64_t v12 = a2;
        }
        else {
          uint64_t v12 = *(unsigned __int8 **)a2;
        }
        if ((v8 & 0x80) != 0)
        {
          uint64_t result = memcmp(*(const void **)result, v12, *(void *)(result + 8));
          if (!result) {
            goto LABEL_18;
          }
        }
        else
        {
          if (!*(unsigned char *)(result + 23)) {
            goto LABEL_18;
          }
          while (*(unsigned __int8 *)result == *v12)
          {
            ++result;
            ++v12;
            if (!--v8) {
              goto LABEL_18;
            }
          }
        }
      }
      v5 += 2;
    }
    while (v5 != v6);
    uint64_t v5 = v6;
    if (v6 == *(void **)(v3 + 48))
    {
LABEL_23:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v17, "GetPrivateFunctionWithName");
      std::string::basic_string[abi:ne180100]<0>(v15, "Given function name not found.");
      E5RT::Status::Status(v16, 1, v15);
      E5RT::E5RTError::E5RTError(exception, v17, v16);
    }
  }
  *a3 = *v5;
  uint64_t v13 = v5[1];
  a3[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_19243E448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::E5ProgramImpl::GetBuildInfo@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 72);
  *a2 = *(void *)(this + 64);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

char *E5RT::E5ProgramImpl::AddPublicFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(_OWORD **)(a1 + 24);
  if ((unint64_t)v3 >= *(void *)(a1 + 32))
  {
    uint64_t result = std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>((char **)(a1 + 16), a2);
  }
  else
  {
    *uint64_t v3 = *(_OWORD *)a2;
    uint64_t result = (char *)(v3 + 1);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  *(void *)(a1 + 24) = result;
  return result;
}

char *non-virtual thunk to'E5RT::E5ProgramImpl::AddPublicFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(_OWORD **)(a1 + 16);
  if ((unint64_t)v3 >= *(void *)(a1 + 24))
  {
    uint64_t result = std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>((char **)(a1 + 8), a2);
  }
  else
  {
    *uint64_t v3 = *(_OWORD *)a2;
    uint64_t result = (char *)(v3 + 1);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  *(void *)(a1 + 16) = result;
  return result;
}

char *E5RT::E5ProgramImpl::AddPrivateFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(_OWORD **)(a1 + 48);
  if ((unint64_t)v3 >= *(void *)(a1 + 56))
  {
    uint64_t result = std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>((char **)(a1 + 40), a2);
  }
  else
  {
    *uint64_t v3 = *(_OWORD *)a2;
    uint64_t result = (char *)(v3 + 1);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  *(void *)(a1 + 48) = result;
  return result;
}

char *non-virtual thunk to'E5RT::E5ProgramImpl::AddPrivateFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(_OWORD **)(a1 + 40);
  if ((unint64_t)v3 >= *(void *)(a1 + 48))
  {
    uint64_t result = std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>((char **)(a1 + 32), a2);
  }
  else
  {
    *uint64_t v3 = *(_OWORD *)a2;
    uint64_t result = (char *)(v3 + 1);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  *(void *)(a1 + 40) = result;
  return result;
}

void E5RT::E5ProgramImpl::SetBuildInfo(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  *(_OWORD *)(a1 + 64) = v2;
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void non-virtual thunk to'E5RT::E5ProgramImpl::SetBuildInfo(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v2;
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

std::string *non-virtual thunk to'E5RT::E5ProgramImpl::SetE5PlatformBundleDir(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 3, a2);
}

void *std::function<std::unique_ptr<FunctionT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::~function(void *a1)
{
  long long v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void *std::function<std::unique_ptr<E5RT_FB::BuildInfoT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::~function(void *a1)
{
  long long v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void E5RT::E5ProgramImpl::SerializeToFile()
{
}

void sub_19243E908(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<E5RT::E5Serializer>::~unique_ptr[abi:ne180100]((E5RT::E5Serializer **)va);
  _Unwind_Resume(a1);
}

void sub_19243E91C(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x10E0C40919228BDLL);
  _Unwind_Resume(a1);
}

E5RT::E5Serializer **std::unique_ptr<E5RT::E5Serializer>::~unique_ptr[abi:ne180100](E5RT::E5Serializer **a1)
{
  long long v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    E5RT::E5Serializer::~E5Serializer(v2);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<std::string>>>>::~__hash_table(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void *)*v2;
      uint64_t v6 = (void **)v2[5];
      if (v6)
      {
        do
        {
          uint64_t v8 = (void **)*v6;
          if (*((char *)v6 + 39) < 0) {
            operator delete(v6[2]);
          }
          operator delete(v6);
          uint64_t v6 = v8;
        }
        while (v8);
      }
      int64_t v7 = (void *)v2[3];
      void v2[3] = 0;
      if (v7) {
        operator delete(v7);
      }
      operator delete(v2);
      long long v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void std::__shared_ptr_emplace<E5RT::E5FunctionImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3809D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::E5FunctionImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3809D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<E5RT::E5FunctionImpl>::__on_zero_shared(uint64_t a1)
{
}

void std::__function::__func<std::unique_ptr<FunctionT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<FunctionT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<FunctionT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::~__func()
{
}

void *std::__function::__func<std::unique_ptr<FunctionT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<FunctionT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<FunctionT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE377AF8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<FunctionT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<FunctionT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<FunctionT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE377AF8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<FunctionT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<FunctionT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<FunctionT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "PFNSt3__110unique_ptrI9FunctionTNS_14default_deleteIS1_EEEEPKvPKNS_8functionIFvPPvyEEEE") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"PFNSt3__110unique_ptrI9FunctionTNS_14default_deleteIS1_EEEEPKvPKNS_8functionIFvPPvyEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "PFNSt3__110unique_ptrI9FunctionTNS_14default_deleteIS1_EEEEPKvPKNS_8functionIFvPPvyEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFNSt3__110unique_ptrI9FunctionTNS_14default_deleteIS1_EEEEPKvPKNS_8functionIFvPPvyEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<std::unique_ptr<FunctionT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<FunctionT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<FunctionT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::target_type()
{
}

void std::__shared_ptr_emplace<E5RT::E5BlockImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380968;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::E5BlockImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380968;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<E5RT::E5BlockImpl>::__on_zero_shared(uint64_t a1)
{
}

void std::__function::__func<std::unique_ptr<E5RT_FB::BuildInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::BuildInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::BuildInfoT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::~__func()
{
}

void *std::__function::__func<std::unique_ptr<E5RT_FB::BuildInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::BuildInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::BuildInfoT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE377C00;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<E5RT_FB::BuildInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::BuildInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::BuildInfoT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE377C00;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<E5RT_FB::BuildInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::BuildInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::BuildInfoT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "PFNSt3__110unique_ptrIN7E5RT_FB10BuildInfoTENS_14default_deleteIS2_EEEEPKvPKNS_8functionIFvPPvyEEEE") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"PFNSt3__110unique_ptrIN7E5RT_FB10BuildInfoTENS_14default_deleteIS2_EEEEPKvPKNS_8functionIFvPPvyEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "PFNSt3__110unique_ptrIN7E5RT_FB10BuildInfoTENS_14default_deleteIS2_EEEEPKvPKNS_8functionIFvPPvyEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFNSt3__110unique_ptrIN7E5RT_FB10BuildInfoTENS_14default_deleteIS2_EEEEPKvPKNS_8functionIFvPPvyEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<std::unique_ptr<E5RT_FB::BuildInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::BuildInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::BuildInfoT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::target_type()
{
}

void std::__shared_ptr_emplace<E5RT::E5BuildInfoImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380A10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5RT::E5BuildInfoImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380A10;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void sub_19243EDA8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  int v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
  }
}

void std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void E5RT::E5Serializer::~E5Serializer(E5RT::E5Serializer *this)
{
  uint64_t v2 = (void **)*((void *)this + 14);
  if (v2)
  {
    do
    {
      uint64_t v9 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v9;
    }
    while (v9);
  }
  unint64_t v3 = (void *)*((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v3) {
    operator delete(v3);
  }
  int v4 = (void **)*((void *)this + 9);
  if (v4)
  {
    do
    {
      uint64_t v10 = (void **)*v4;
      if (*((char *)v4 + 39) < 0) {
        operator delete(v4[2]);
      }
      operator delete(v4);
      int v4 = v10;
    }
    while (v10);
  }
  uint64_t v5 = (void *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (void **)*((void *)this + 4);
  if (v6)
  {
    do
    {
      int v11 = (void **)*v6;
      if (*((char *)v6 + 63) < 0)
      {
        operator delete(v6[5]);
        if (*((char *)v6 + 39) < 0) {
LABEL_24:
        }
          operator delete(v6[2]);
      }
      else if (*((char *)v6 + 39) < 0)
      {
        goto LABEL_24;
      }
      operator delete(v6);
      uint64_t v6 = v11;
    }
    while (v11);
  }
  int64_t v7 = (void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
}

void E5RT::E5Serializer::E5Serializer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 1065353216;
  E5RT::ComputeProgramBuilder::CreateBuilder((E5RT::ComputeProgramBuilder *)a1);
}

void sub_19243F4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v17);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v16);
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v15 + 16);
  uint64_t v20 = *v18;
  *int v18 = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  _Unwind_Resume(a1);
}

void E5RT::E5Serializer::ResolveOperandPermissions(E5RT::E5Serializer *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)this + 16))(*(void *)this);
  int v4 = *(uint64_t **)v2;
  uint64_t v5 = *(uint64_t **)(v2 + 8);
  if (*(uint64_t **)v2 != v5)
  {
    do
    {
      uint64_t v6 = *v4;
      int64_t v7 = (std::__shared_weak_count *)v4[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_19243F700((uint64_t)this, v6);
      if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      v4 += 2;
    }
    while (v4 != v5);
  }
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(**(void **)this + 24))(*(void *)this, v3);
  uint64_t v9 = *(uint64_t **)v8;
  uint64_t v10 = *(uint64_t **)(v8 + 8);
  if (*(uint64_t **)v8 != v10)
  {
    do
    {
      uint64_t v11 = *v9;
      uint64_t v12 = (std::__shared_weak_count *)v9[1];
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_19243F700((uint64_t)this, v11);
      if (v12)
      {
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v9 += 2;
    }
    while (v9 != v10);
  }
}

void sub_19243F6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19243F6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19243F700(uint64_t a1, uint64_t a2)
{
  E5RT::E5Serializer::ResolveOperandPermissions<E5RT::E5Function>(a1, a2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  uint64_t v5 = *(uint64_t **)v4;
  uint64_t v6 = *(uint64_t **)(v4 + 8);
  if (*(uint64_t **)v4 != v6)
  {
    while (1)
    {
      uint64_t v8 = *v5;
      int64_t v7 = (std::__shared_weak_count *)v5[1];
      int v14 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      E5RT::E5Serializer::ResolveOperandPermissions<E5RT::E5Block>(a1, v8);
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
      uint64_t v10 = *(uint64_t **)v9;
      uint64_t v11 = *(uint64_t **)(v9 + 8);
      if (*(uint64_t **)v9 != v11) {
        break;
      }
      if (v7) {
        goto LABEL_16;
      }
LABEL_3:
      v5 += 2;
      if (v5 == v6) {
        return;
      }
    }
    do
    {
      uint64_t v12 = *v10;
      uint64_t v13 = (std::__shared_weak_count *)v10[1];
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      E5RT::E5Serializer::ResolveOperandPermissions<E5RT::E5Operation>(a1, v12);
      if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      v10 += 2;
    }
    while (v10 != v11);
    int64_t v7 = v14;
    if (!v14) {
      goto LABEL_3;
    }
LABEL_16:
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    goto LABEL_3;
  }
}

void sub_19243F8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19243F8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19243F8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t E5RT::E5Serializer::SerializeAliasSymbol(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  unsigned int v21 = a3;
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v17, "SerializeAliasSymbol");
    std::string::basic_string[abi:ne180100]<0>(&v24, "Alias name is empty.");
    E5RT::Status::Status(&v19, 1, &v24);
    E5RT::E5RTError::E5RTError(exception, &v17, &v19);
  }
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8)) <= a3)
  {
    uint64_t v13 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v17, "SerializeAliasSymbol");
    std::string::basic_string[abi:ne180100]<0>(&v24, "SymbolIndex is out of range.");
    E5RT::Status::Status(&v19, 1, &v24);
    E5RT::E5RTError::E5RTError(v13, &v17, &v19);
  }
  if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((void *)(a1 + 56), a4))
  {
    int v14 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v17, "SerializeAliasSymbol");
    std::operator+<char>();
    uint64_t v15 = std::string::append(&v19, " is missing.");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    std::string::size_type v25 = v15->__r_.__value_.__r.__words[2];
    long long v24 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    E5RT::Status::Status(v20, 5, &v24);
    E5RT::E5RTError::E5RTError(v14, &v17, v20);
  }
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), a2, a4, 5, 16);
  *(void *)&long long v24 = &unk_1EE39A508;
  *((void *)&v24 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = &v21;
  std::__split_buffer<std::string>::pointer v26 = &v24;
  uint64_t v9 = *(void *)(a1 + 8);
  int v23 = v22;
  v22[0] = &unk_1EE39A508;
  v22[1] = &v21;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v9 + 48))(v9, a2, a4, v22);
  if (v23 == v22)
  {
    (*(void (**)(void *))(v22[0] + 32))(v22);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_10:
      std::string v17 = *(std::string *)a2;
      goto LABEL_13;
    }
  }
  else
  {
    if (v23) {
      (*(void (**)(void))(*v23 + 40))();
    }
    if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
      goto LABEL_10;
    }
  }
  std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
LABEL_13:
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __p = *(std::string *)a4;
  }
  std::__hash_table<std::pair<std::string,std::string>,E5RT::SerializerUtils::StringPairHash,std::equal_to<std::pair<std::string,std::string>>,std::allocator<std::pair<std::string,std::string>>>::__emplace_unique_key_args<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a1 + 16, (unsigned __int8 *)&v17, (uint64_t)&v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_18:
      uint64_t v10 = v26;
      if (v26 != &v24) {
        goto LABEL_19;
      }
LABEL_23:
      (*(void (**)(long long *))(v24 + 32))(&v24);
      return v8;
    }
  }
  else if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_18;
  }
  operator delete(v17.__r_.__value_.__l.__data_);
  uint64_t v10 = v26;
  if (v26 == &v24) {
    goto LABEL_23;
  }
LABEL_19:
  if (v10) {
    (*(void (**)(long long *))(*(void *)v10 + 40))(v10);
  }
  return v8;
}

void sub_19243FD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::function<unsigned long long ()(flatbuffers::FlatBufferBuilder &)>::~function((void *)(v24 - 96));
    _Unwind_Resume(a1);
  }
  std::function<unsigned long long ()(flatbuffers::FlatBufferBuilder &)>::~function((void *)(v24 - 96));
  _Unwind_Resume(a1);
}

void sub_19243FDE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  E5RT::Status::~Status((E5RT::Status *)&a25);
  if (*(char *)(v27 - 73) < 0)
  {
    operator delete(*(void **)(v27 - 96));
    if (a24 < 0)
    {
LABEL_5:
      operator delete(__p);
      if ((a14 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
  }
  else if (a24 < 0)
  {
    goto LABEL_5;
  }
  if ((a14 & 0x80000000) == 0)
  {
LABEL_6:
    if (!v26) {
LABEL_10:
    }
      _Unwind_Resume(a1);
LABEL_11:
    __cxa_free_exception(v25);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(a9);
  if ((v26 & 1) == 0) {
    goto LABEL_10;
  }
  goto LABEL_11;
}

void *std::function<unsigned long long ()(flatbuffers::FlatBufferBuilder &)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t E5RT::E5Serializer::SerializeOperand(uint64_t a1, E5RT::SerializerUtils *this, uint64_t a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t OperandSymbolFlags = E5RT::SerializerUtils::GetOperandSymbolFlags(this, this);
  memset(&__p, 0, sizeof(__p));
  uint64_t v7 = (*(uint64_t (**)(E5RT::SerializerUtils *))(*(void *)this + 24))(this);
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,E5RT::Permissions>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,E5RT::Permissions>>>::find<std::string>((void *)(a1 + 96), v7);
  if (!v8) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  E5RT::SerializerUtils::GetOperandSectionDetails((uint64_t)this, v8[5], a3, (uint64_t)&v40);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = v40;
  uint64_t data_low = LODWORD(v41.__r_.__value_.__l.__data_);
  std::string::size_type size = v41.__r_.__value_.__l.__size_;
  int v11 = v41.__r_.__value_.__s.__data_[16];
  if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((void *)(a1 + 56), (uint64_t)&__p))
  {
    (*(void (**)(void, std::string *, uint64_t, std::string::size_type, BOOL))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), &__p, data_low, size, v11 != 0);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1 + 56, (uint64_t)&__p, (uint64_t)&__p);
  }
  uint64_t v12 = (*(uint64_t (**)(E5RT::SerializerUtils *))(*(void *)this + 24))(this);
  uint64_t v13 = v12;
  if (*(char *)(v12 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)v12, *(void *)(v12 + 8));
  }
  else
  {
    long long v14 = *(_OWORD *)v12;
    v40.__r_.__value_.__r.__words[2] = *(void *)(v12 + 16);
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v14;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v41, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v41 = __p;
  }
  uint64_t v15 = std::__hash_table<std::pair<std::string,std::string>,E5RT::SerializerUtils::StringPairHash,std::equal_to<std::pair<std::string,std::string>>,std::allocator<std::pair<std::string,std::string>>>::find<std::pair<std::string,std::string>>((void *)(a1 + 16), (unsigned __int8 *)&v40);
  if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_14;
    }
LABEL_20:
    operator delete(v40.__r_.__value_.__l.__data_);
    if (v15) {
      goto LABEL_15;
    }
    goto LABEL_21;
  }
  operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_20;
  }
LABEL_14:
  if (v15)
  {
LABEL_15:
    uint64_t v16 = (*(uint64_t (**)(void, uint64_t, std::string *))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8), v13, &__p);
    goto LABEL_16;
  }
LABEL_21:
  (*(void (**)(void **__return_ptr, E5RT::SerializerUtils *))(*(void *)this + 16))(&lpsrc, this);
  int v18 = operator new(0x20uLL);
  *int v18 = &unk_1EE39A588;
  v18[1] = a1;
  v18[2] = &lpsrc;
  v18[3] = v13;
  uint64_t v46 = v18;
  uint64_t v16 = (*(uint64_t (**)(void, uint64_t, std::string *, uint64_t, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), v13, &__p, 1, OperandSymbolFlags);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = (uint64_t)v46;
  if (!v46)
  {
LABEL_24:
    uint64_t v44 = (void *)v20;
    goto LABEL_26;
  }
  if (v46 != v45)
  {
    uint64_t v20 = (*(uint64_t (**)(void))(*v46 + 16))();
    goto LABEL_24;
  }
  uint64_t v44 = v43;
  (*(void (**)(void *, void *))(v45[0] + 24))(v45, v43);
LABEL_26:
  (*(void (**)(uint64_t, uint64_t, std::string *, void *))(*(void *)v19 + 48))(v19, v13, &__p, v43);
  if (v44 == v43)
  {
    (*(void (**)(void *))(v43[0] + 32))(v43);
    unsigned int v21 = lpsrc;
    if (!lpsrc)
    {
LABEL_37:
      if ((*(unsigned int (**)(E5RT::SerializerUtils *))(*(void *)this + 40))(this))
      {
        exception = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v40, "SerializeOperand");
        std::string::basic_string[abi:ne180100]<0>(v36, "Surface can only be an extern.");
        E5RT::Status::Status(v37, 5, v36);
        E5RT::E5RTError::E5RTError(exception, &v40, v37);
      }
      int v23 = 0;
      goto LABEL_39;
    }
  }
  else
  {
    if (v44) {
      (*(void (**)(void))(*v44 + 40))();
    }
    unsigned int v21 = lpsrc;
    if (!lpsrc) {
      goto LABEL_37;
    }
  }
  BOOL v22 = v39;
  if (v39)
  {
    int v23 = 1;
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    if (atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_39;
    }
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  int v23 = 1;
LABEL_39:
  int v24 = (*(uint64_t (**)(E5RT::SerializerUtils *))(*(void *)this + 40))(this);
  uint64_t v25 = 0;
  switch(v24)
  {
    case 0:
      if (v23
        && (int v26 = (E5RT::TensorDescriptorImpl **)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)lpsrc),
            E5RT::TensorDescriptor::HasKnownShape((E5RT::TensorDescriptor *)v26)))
      {
        uint64_t v25 = E5RT::TensorDescriptor::GetSize(v26);
      }
      else
      {
        uint64_t v25 = 0;
      }
      goto LABEL_45;
    case 1:
      uint64_t v27 = (E5RT::TensorDescriptorImpl **)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)lpsrc);
      uint64_t v28 = E5RT::TensorDescriptor::GetSize(v27);
      uint64_t v29 = *(void *)(a1 + 8);
      uint64_t v30 = (*(uint64_t (**)(E5RT::SerializerUtils *))(*(void *)this + 48))(this);
      (*(void (**)(uint64_t, uint64_t, std::string *, uint64_t, uint64_t))(*(void *)v29 + 72))(v29, v13, &__p, v30, v28);
      break;
    case 2:
LABEL_45:
      (*(void (**)(void, uint64_t, std::string *, uint64_t))(**(void **)(a1 + 8) + 64))(*(void *)(a1 + 8), v13, &__p, v25);
      break;
    case 3:
      uint64_t v35 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v40, "SerializeOperand");
      std::string::basic_string[abi:ne180100]<0>(v36, "Unsupported alloc type.");
      E5RT::Status::Status(v37, 2, v36);
      E5RT::E5RTError::E5RTError(v35, &v40, v37);
    default:
      break;
  }
  if (*(char *)(v13 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)v13, *(void *)(v13 + 8));
  }
  else
  {
    long long v31 = *(_OWORD *)v13;
    v40.__r_.__value_.__r.__words[2] = *(void *)(v13 + 16);
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v31;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v41, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v41 = __p;
  }
  std::__hash_table<std::pair<std::string,std::string>,E5RT::SerializerUtils::StringPairHash,std::equal_to<std::pair<std::string,std::string>>,std::allocator<std::pair<std::string,std::string>>>::__emplace_unique_key_args<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a1 + 16, (unsigned __int8 *)&v40, (uint64_t)&v40);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v41.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_54;
    }
LABEL_63:
    operator delete(v40.__r_.__value_.__l.__data_);
    goto LABEL_54;
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_63;
  }
LABEL_54:
  for (unint64_t i = (void *)((*(uint64_t (**)(E5RT::SerializerUtils *))(*(void *)this + 56))(this) + 16);
        ;
        E5RT::E5Serializer::SerializeAliasSymbol(a1, (uint64_t)(i + 2), v16, (uint64_t)&__p))
  {
    unint64_t i = (void *)*i;
    if (!i) {
      break;
    }
  }
  if (v46 == v45)
  {
    (*(void (**)(void *))(v45[0] + 32))(v45);
    uint64_t v33 = v39;
    if (!v39) {
      goto LABEL_16;
    }
    goto LABEL_65;
  }
  if (v46) {
    (*(void (**)(void))(*v46 + 40))();
  }
  uint64_t v33 = v39;
  if (v39)
  {
LABEL_65:
    if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
LABEL_16:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v16;
}

void sub_192440854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0)
  {
    operator delete(a21);
    if ((v37 & 1) == 0) {
      goto LABEL_9;
    }
  }
  else if (!v37)
  {
LABEL_9:
    std::function<unsigned long long ()(flatbuffers::FlatBufferBuilder &)>::~function((void *)(v38 - 104));
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
    if ((a35 & 0x80000000) == 0) {
      _Unwind_Resume(a1);
    }
    operator delete(a30);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v36);
  goto LABEL_9;
}

uint64_t E5RT::E5Serializer::SerializeOpArgFrame(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v148 = *MEMORY[0x1E4F143B8];
  int v6 = (*(uint64_t (**)(const void *))(*(void *)a2 + 16))(a2);
  uint64_t v118 = a2;
  uint64_t v7 = (*(uint64_t (**)(const void *))(*(void *)a2 + 24))(a2);
  int v8 = *(char *)(v7 + 23);
  if (v8 >= 0) {
    size_t v9 = *(unsigned __int8 *)(v7 + 23);
  }
  else {
    size_t v9 = *(void *)(v7 + 8);
  }
  unint64_t v10 = v9 + 11;
  if (v9 + 11 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v11 = (const void **)v7;
  int v117 = v6;
  if (v10 >= 0x17)
  {
    uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v13 = v10 | 7;
    }
    uint64_t v14 = v13 + 1;
    p_dst = (void **)operator new(v13 + 1);
    size_t v140 = v9 + 11;
    unint64_t v141 = v14 | 0x8000000000000000;
    std::string __dst = p_dst;
  }
  else
  {
    size_t v140 = 0;
    unint64_t v141 = 0;
    std::string __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v14E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v9 + 11;
    if (!v9) {
      goto LABEL_15;
    }
  }
  if (v8 >= 0) {
    uint64_t v15 = v11;
  }
  else {
    uint64_t v15 = *v11;
  }
  memmove(p_dst, v15, v9);
LABEL_15:
  unint64_t v116 = v11;
  strcpy((char *)p_dst + v9, "__arg_frame");
  char v138 = 8;
  v136 = 0;
  strcpy((char *)v137, "__text__");
  unsigned __int8 v134 = 0;
  unsigned __int8 v135 = 0;
  BOOL v131 = 0;
  BOOL v132 = 0;
  v133 = 0;
  std::string __p = 0;
  int v129 = 0;
  BOOL v130 = 0;
  uint64_t v127 = 0;
  unsigned int v142 = 0;
  uint64_t v16 = (void *)(*(uint64_t (**)(const void *))(*(void *)v118 + 32))(v118);
  uint64_t v17 = v16[1] - *v16;
  uint64_t v122 = a3;
  uint64_t v123 = a1;
  if (v17)
  {
    unint64_t v18 = 0;
    unint64_t v119 = 0xAAAAAAAAAAAAAAABLL * (v17 >> 3);
    while (1)
    {
      if (v18 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16[1] - *v16) >> 3))
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "iterator out of range");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
      }
      uint64_t v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v16 + 8, *v16 + 24 * v18);
      uint64_t v20 = v19;
      if (*((char *)v19 + 39) < 0) {
        std::string::__init_copy_ctor_external(&v145, (const std::string::value_type *)v19[2], v19[3]);
      }
      else {
        std::string v145 = *(std::string *)(v19 + 2);
      }
      unsigned int v21 = (E5RT::SerializerUtils *)v20[5];
      BOOL v22 = (std::__shared_weak_count *)v20[6];
      v146 = (std::string *)v21;
      v147 = v22;
      if (v22)
      {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
        unsigned int v21 = (E5RT::SerializerUtils *)v146;
      }
      unsigned int v23 = E5RT::E5Serializer::SerializeOperand(a1, v21, a3);
      uint64_t v24 = v23;
      uint64_t v25 = v135;
      if (v135 >= v136) {
        break;
      }
      *(void *)unsigned __int8 v135 = v23;
      unsigned __int8 v135 = v25 + 8;
      int v26 = v147;
      if (v147) {
        goto LABEL_51;
      }
LABEL_17:
      if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v145.__r_.__value_.__l.__data_);
        if (++v18 == v119) {
          goto LABEL_53;
        }
      }
      else if (++v18 == v119)
      {
        goto LABEL_53;
      }
    }
    uint64_t v27 = (char *)v134;
    int64_t v28 = v135 - (unsigned char *)v134;
    uint64_t v29 = (v135 - (unsigned char *)v134) >> 3;
    unint64_t v30 = v29 + 1;
    if ((unint64_t)(v29 + 1) >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v31 = v136 - (unsigned char *)v134;
    if ((v136 - (unsigned char *)v134) >> 2 > v30) {
      unint64_t v30 = v31 >> 2;
    }
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v32 = v30;
    }
    if (v32)
    {
      if (v32 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v33 = (char *)operator new(8 * v32);
      uint64_t v34 = &v33[8 * v29];
      *(void *)uint64_t v34 = v24;
      uint64_t v35 = (uint64_t)(v34 + 8);
      if (v25 == v27)
      {
LABEL_48:
        unsigned __int8 v134 = v34;
        unsigned __int8 v135 = (char *)v35;
        v136 = &v33[8 * v32];
        if (v27) {
          operator delete(v27);
        }
        a3 = v122;
        a1 = v123;
        unsigned __int8 v135 = (char *)v35;
        int v26 = v147;
        if (!v147) {
          goto LABEL_17;
        }
LABEL_51:
        if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v33 = 0;
      uint64_t v34 = (char *)(8 * v29);
      *(void *)(8 * v29) = v24;
      uint64_t v35 = 8 * v29 + 8;
      if (v25 == v27) {
        goto LABEL_48;
      }
    }
    unint64_t v36 = v25 - 8 - v27;
    if (v36 < 0x58) {
      goto LABEL_188;
    }
    if ((unint64_t)(v25 - &v33[v28]) < 0x20) {
      goto LABEL_188;
    }
    uint64_t v37 = (v36 >> 3) + 1;
    uint64_t v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
    BOOL v39 = &v25[-v38];
    v34 -= v38;
    std::string v40 = &v33[8 * v29 - 16];
    std::string v41 = v25 - 16;
    uint64_t v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v43 = *(_OWORD *)v41;
      *((_OWORD *)v40 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = *((_OWORD *)v41 - 1);
      *(_OWORD *)std::string v40 = v43;
      v40 -= 32;
      v41 -= 32;
      v42 -= 4;
    }
    while (v42);
    uint64_t v25 = v39;
    if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_188:
      do
      {
        uint64_t v44 = *((void *)v25 - 1);
        v25 -= 8;
        *((void *)v34 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v44;
        v34 -= 8;
      }
      while (v25 != v27);
    }
    goto LABEL_48;
  }
LABEL_53:
  int64_t v45 = (void *)(*(uint64_t (**)(const void *))(*(void *)v118 + 40))(v118);
  uint64_t v46 = v45[1] - *v45;
  if (v46)
  {
    unint64_t v47 = 0;
    unint64_t v120 = 0xAAAAAAAAAAAAAAABLL * (v46 >> 3);
    while (1)
    {
      if (v47 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45[1] - *v45) >> 3))
      {
        int v113 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v113, "iterator out of range");
        v113->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
        __cxa_throw(v113, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
      }
      unint64_t v48 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v45 + 8, *v45 + 24 * v47);
      unint64_t v49 = v48;
      if (*((char *)v48 + 39) < 0) {
        std::string::__init_copy_ctor_external(&v145, (const std::string::value_type *)v48[2], v48[3]);
      }
      else {
        std::string v145 = *(std::string *)(v48 + 2);
      }
      unint64_t v50 = (E5RT::SerializerUtils *)v49[5];
      BOOL v51 = (std::__shared_weak_count *)v49[6];
      v146 = (std::string *)v50;
      v147 = v51;
      if (v51)
      {
        atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        unint64_t v50 = (E5RT::SerializerUtils *)v146;
      }
      unsigned int v52 = E5RT::E5Serializer::SerializeOperand(a1, v50, a3);
      uint64_t v53 = v52;
      uint64_t v54 = v132;
      if (v132 >= v133) {
        break;
      }
      *(void *)BOOL v132 = v52;
      BOOL v132 = v54 + 8;
      uint64_t v55 = v147;
      if (v147) {
        goto LABEL_89;
      }
LABEL_55:
      if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v145.__r_.__value_.__l.__data_);
        if (++v47 == v120) {
          goto LABEL_91;
        }
      }
      else if (++v47 == v120)
      {
        goto LABEL_91;
      }
    }
    unint64_t v56 = (char *)v131;
    int64_t v57 = v132 - (unsigned char *)v131;
    uint64_t v58 = (v132 - (unsigned char *)v131) >> 3;
    unint64_t v59 = v58 + 1;
    if ((unint64_t)(v58 + 1) >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v60 = v133 - (unsigned char *)v131;
    if ((v133 - (unsigned char *)v131) >> 2 > v59) {
      unint64_t v59 = v60 >> 2;
    }
    if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v61 = v59;
    }
    if (v61)
    {
      if (v61 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      float64x2x2_t v62 = (char *)operator new(8 * v61);
      float64x2x2_t v63 = &v62[8 * v58];
      *(void *)float64x2x2_t v63 = v53;
      uint64_t v64 = (uint64_t)(v63 + 8);
      if (v54 == v56)
      {
LABEL_86:
        BOOL v131 = v63;
        BOOL v132 = (char *)v64;
        v133 = &v62[8 * v61];
        if (v56) {
          operator delete(v56);
        }
        a3 = v122;
        a1 = v123;
        BOOL v132 = (char *)v64;
        uint64_t v55 = v147;
        if (!v147) {
          goto LABEL_55;
        }
LABEL_89:
        if (!atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
        goto LABEL_55;
      }
    }
    else
    {
      float64x2x2_t v62 = 0;
      float64x2x2_t v63 = (char *)(8 * v58);
      *(void *)(8 * v58) = v53;
      uint64_t v64 = 8 * v58 + 8;
      if (v54 == v56) {
        goto LABEL_86;
      }
    }
    unint64_t v65 = v54 - 8 - v56;
    if (v65 < 0x58) {
      goto LABEL_189;
    }
    if ((unint64_t)(v54 - &v62[v57]) < 0x20) {
      goto LABEL_189;
    }
    uint64_t v66 = (v65 >> 3) + 1;
    uint64_t v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v68 = &v54[-v67];
    v63 -= v67;
    BOOL v69 = &v62[8 * v58 - 16];
    unint64_t v70 = v54 - 16;
    uint64_t v71 = v66 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v72 = *(_OWORD *)v70;
      *((_OWORD *)v69 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = *((_OWORD *)v70 - 1);
      *(_OWORD *)BOOL v69 = v72;
      v69 -= 32;
      v70 -= 32;
      v71 -= 4;
    }
    while (v71);
    uint64_t v54 = v68;
    if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_189:
      do
      {
        uint64_t v73 = *((void *)v54 - 1);
        v54 -= 8;
        *((void *)v63 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v73;
        v63 -= 8;
      }
      while (v54 != v56);
    }
    goto LABEL_86;
  }
LABEL_91:
  unint64_t v74 = (void *)(*(uint64_t (**)(const void *))(*(void *)v118 + 48))(v118);
  uint64_t v75 = v74[1] - *v74;
  if (v75)
  {
    unint64_t v76 = 0;
    unint64_t v121 = 0xAAAAAAAAAAAAAAABLL * (v75 >> 3);
    while (1)
    {
      if (v76 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v74[1] - *v74) >> 3))
      {
        std::vector<std::string>::pointer v114 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v114, "iterator out of range");
        v114->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
        __cxa_throw(v114, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
      }
      size_t v77 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v74 + 8, *v74 + 24 * v76);
      uint64_t v78 = v77;
      if (*((char *)v77 + 39) < 0) {
        std::string::__init_copy_ctor_external(&v145, (const std::string::value_type *)v77[2], v77[3]);
      }
      else {
        std::string v145 = *(std::string *)(v77 + 2);
      }
      uint64_t v79 = (E5RT::SerializerUtils *)v78[5];
      long long v80 = (std::__shared_weak_count *)v78[6];
      v146 = (std::string *)v79;
      v147 = v80;
      if (v80)
      {
        atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v79 = (E5RT::SerializerUtils *)v146;
      }
      unsigned int v81 = E5RT::E5Serializer::SerializeOperand(a1, v79, a3);
      uint64_t v82 = v81;
      uint64_t v83 = v129;
      if (v129 >= v130) {
        break;
      }
      *(void *)int v129 = v81;
      int v129 = v83 + 8;
      uint64_t v84 = v147;
      if (v147) {
        goto LABEL_127;
      }
LABEL_93:
      if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v145.__r_.__value_.__l.__data_);
        if (++v76 == v121) {
          goto LABEL_129;
        }
      }
      else if (++v76 == v121)
      {
        goto LABEL_129;
      }
    }
    float v85 = (char *)__p;
    int64_t v86 = v129 - (unsigned char *)__p;
    uint64_t v87 = (v129 - (unsigned char *)__p) >> 3;
    unint64_t v88 = v87 + 1;
    if ((unint64_t)(v87 + 1) >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v89 = v130 - (unsigned char *)__p;
    if ((v130 - (unsigned char *)__p) >> 2 > v88) {
      unint64_t v88 = v89 >> 2;
    }
    if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v90 = v88;
    }
    if (v90)
    {
      if (v90 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v91 = (char *)operator new(8 * v90);
      uint64_t v92 = &v91[8 * v87];
      *(void *)uint64_t v92 = v82;
      uint64_t v93 = (uint64_t)(v92 + 8);
      if (v83 == v85)
      {
LABEL_124:
        std::string __p = v92;
        int v129 = (char *)v93;
        BOOL v130 = &v91[8 * v90];
        if (v85) {
          operator delete(v85);
        }
        a3 = v122;
        a1 = v123;
        int v129 = (char *)v93;
        uint64_t v84 = v147;
        if (!v147) {
          goto LABEL_93;
        }
LABEL_127:
        if (!atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
        goto LABEL_93;
      }
    }
    else
    {
      unint64_t v91 = 0;
      uint64_t v92 = (char *)(8 * v87);
      *(void *)(8 * v87) = v82;
      uint64_t v93 = 8 * v87 + 8;
      if (v83 == v85) {
        goto LABEL_124;
      }
    }
    unint64_t v94 = v83 - 8 - v85;
    if (v94 < 0x58) {
      goto LABEL_190;
    }
    if ((unint64_t)(v83 - &v91[v86]) < 0x20) {
      goto LABEL_190;
    }
    uint64_t v95 = (v94 >> 3) + 1;
    uint64_t v96 = 8 * (v95 & 0x3FFFFFFFFFFFFFFCLL);
    float v97 = &v83[-v96];
    v92 -= v96;
    std::string::size_type v98 = &v91[8 * v87 - 16];
    int v99 = v83 - 16;
    uint64_t v100 = v95 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v101 = *(_OWORD *)v99;
      *((_OWORD *)v98 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = *((_OWORD *)v99 - 1);
      *(_OWORD *)std::string::size_type v98 = v101;
      v98 -= 32;
      v99 -= 32;
      v100 -= 4;
    }
    while (v100);
    uint64_t v83 = v97;
    if (v95 != (v95 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_190:
      do
      {
        uint64_t v102 = *((void *)v83 - 1);
        v83 -= 8;
        *((void *)v92 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v102;
        v92 -= 8;
      }
      while (v83 != v85);
    }
    goto LABEL_124;
  }
LABEL_129:
  switch(v117)
  {
    case 0:
    case 6:
      std::string::size_type v115 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v145, "SerializeOpArgFrame");
      std::string::basic_string[abi:ne180100]<0>(&v124, "Invalid component opcode type encountered while serializing operation attributes");
      E5RT::Status::Status(v126, 5, &v124);
      E5RT::E5RTError::E5RTError(v115, &v145, v126);
    case 1:
      E5RT::E5Operation::GetOperationAttributes<AneInferenceOpT>(v118, &v124);
      v145.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE39A608;
      v145.__r_.__value_.__l.__size_ = v124;
      v146 = &v145;
      unsigned int v103 = E5RT::E5Serializer::AddOpAttrsSymbolToComputeProgram(a1, v116, &v145);
      goto LABEL_142;
    case 2:
      E5RT::E5Operation::GetOperationAttributes<CpuInferenceOpT>(v118, &v124);
      v145.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE39A708;
      v145.__r_.__value_.__l.__size_ = v124;
      v146 = &v145;
      unsigned int v103 = E5RT::E5Serializer::AddOpAttrsSymbolToComputeProgram(a1, v116, &v145);
      goto LABEL_142;
    case 3:
      E5RT::E5Operation::GetOperationAttributes<CastOpT>(v118, &v124);
      v145.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE39A788;
      v145.__r_.__value_.__l.__size_ = v124;
      v146 = &v145;
      unsigned int v103 = E5RT::E5Serializer::AddOpAttrsSymbolToComputeProgram(a1, v116, &v145);
      goto LABEL_142;
    case 4:
      E5RT::E5Operation::GetOperationAttributes<QuantOpT>(v118, &v124);
      v145.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE39A808;
      v145.__r_.__value_.__l.__size_ = v124;
      v146 = &v145;
      unsigned int v103 = E5RT::E5Serializer::AddOpAttrsSymbolToComputeProgram(a1, v116, &v145);
      goto LABEL_142;
    case 5:
      E5RT::E5Operation::GetOperationAttributes<DequantOpT>(v118, &v124);
      v145.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE39A888;
      v145.__r_.__value_.__l.__size_ = v124;
      v146 = &v145;
      unsigned int v103 = E5RT::E5Serializer::AddOpAttrsSymbolToComputeProgram(a1, v116, &v145);
      goto LABEL_142;
    case 7:
      E5RT::E5Operation::GetOperationAttributes<MlcCpuInferenceOpT>(v118, &v124);
      v145.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE39A908;
      v145.__r_.__value_.__l.__size_ = v124;
      v146 = &v145;
      unsigned int v103 = E5RT::E5Serializer::AddOpAttrsSymbolToComputeProgram(a1, v116, &v145);
      goto LABEL_142;
    case 8:
      E5RT::E5Operation::GetOperationAttributes<MpsGraphInferenceOpT>(v118, &v124);
      v145.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE39A988;
      v145.__r_.__value_.__l.__size_ = v124;
      v146 = &v145;
      unsigned int v103 = E5RT::E5Serializer::AddOpAttrsSymbolToComputeProgram(a1, v116, &v145);
      goto LABEL_142;
    case 9:
      E5RT::E5Operation::GetOperationAttributes<BarrierOpT>(v118, &v124);
      v145.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE39AB08;
      v145.__r_.__value_.__l.__size_ = v124;
      v146 = &v145;
      unsigned int v103 = E5RT::E5Serializer::AddOpAttrsSymbolToComputeProgram(a1, v116, &v145);
      goto LABEL_142;
    case 11:
      E5RT::E5Operation::GetOperationAttributes<EirInferenceOpT>(v118, &v124);
      v145.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE39AA08;
      v145.__r_.__value_.__l.__size_ = v124;
      v146 = &v145;
      unsigned int v103 = E5RT::E5Serializer::AddOpAttrsSymbolToComputeProgram(a1, v116, &v145);
      goto LABEL_142;
    case 12:
      E5RT::E5Operation::GetOperationAttributes<BnnsCpuInferenceOpT>(v118, &v124);
      v145.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE39A688;
      v145.__r_.__value_.__l.__size_ = v124;
      v146 = &v145;
      unsigned int v103 = E5RT::E5Serializer::AddOpAttrsSymbolToComputeProgram(a1, v116, &v145);
      goto LABEL_142;
    case 13:
      E5RT::E5Operation::GetOperationAttributes<JitCallOpT>(v118, &v124);
      v145.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE39AA88;
      v145.__r_.__value_.__l.__size_ = v124;
      v146 = &v145;
      unsigned int v103 = E5RT::E5Serializer::AddOpAttrsSymbolToComputeProgram(a1, v116, &v145);
      goto LABEL_142;
    case 14:
      E5RT::E5Operation::GetOperationAttributes<E5MinimalCpuOpT>(v118, &v124);
      v145.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE39AB88;
      v145.__r_.__value_.__l.__size_ = v124;
      v146 = &v145;
      unsigned int v103 = E5RT::E5Serializer::AddOpAttrsSymbolToComputeProgram(a1, v116, &v145);
LABEL_142:
      unsigned int v104 = v103;
      if (v146 == &v145)
      {
        (*(void (**)(std::string *))(v145.__r_.__value_.__r.__words[0] + 32))(&v145);
        uint64_t v127 = v104;
        float v105 = v125;
        if (!v125) {
          goto LABEL_150;
        }
        goto LABEL_148;
      }
      if (v146) {
        (*(void (**)(void))(v146->__r_.__value_.__r.__words[0] + 40))();
      }
      uint64_t v127 = v104;
      float v105 = v125;
      if (v125)
      {
LABEL_148:
        if (!atomic_fetch_add(&v105->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
          std::__shared_weak_count::__release_weak(v105);
        }
      }
LABEL_150:
      int v106 = (std::string *)operator new(0x40uLL);
      v106->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE39AC08;
      v106->__r_.__value_.__l.__size_ = (std::string::size_type)&v134;
      v106->__r_.__value_.__r.__words[2] = (std::string::size_type)&v131;
      v106[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v106[1].__r_.__value_.__l.__size_ = (std::string::size_type)v118;
      v106[1].__r_.__value_.__r.__words[2] = a1;
      v106[2].__r_.__value_.__r.__words[0] = (std::string::size_type)&v127;
      v106[2].__r_.__value_.__l.__size_ = (std::string::size_type)&v142;
      v146 = v106;
      (*(void (**)(void, void ***, void **, uint64_t, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), &__dst, v137, 3, 17);
      uint64_t v107 = *(void *)(a1 + 8);
      uint64_t v108 = (uint64_t)v146;
      if (!v146)
      {
LABEL_153:
        v144 = (void *)v108;
        goto LABEL_155;
      }
      if (v146 != &v145)
      {
        uint64_t v108 = (*(uint64_t (**)(void))(v146->__r_.__value_.__r.__words[0] + 16))();
        goto LABEL_153;
      }
      v144 = v143;
      (*(void (**)(std::string *, void *))(v145.__r_.__value_.__r.__words[0] + 24))(&v145, v143);
LABEL_155:
      (*(void (**)(uint64_t, void ***, void **, void *))(*(void *)v107 + 56))(v107, &__dst, v137, v143);
      if (v144 == v143)
      {
        (*(void (**)(void *))(v143[0] + 32))(v143);
        uint64_t v109 = v146;
        if (v146 != &v145) {
          goto LABEL_159;
        }
      }
      else
      {
        if (v144) {
          (*(void (**)(void))(*v144 + 40))();
        }
        uint64_t v109 = v146;
        if (v146 != &v145)
        {
LABEL_159:
          if (v109) {
            (*(void (**)(std::string *))(v109->__r_.__value_.__r.__words[0] + 40))(v109);
          }
          v110 = (char *)__p;
          if (__p) {
            goto LABEL_162;
          }
          goto LABEL_163;
        }
      }
      (*(void (**)(std::string *))(v145.__r_.__value_.__r.__words[0] + 32))(&v145);
      v110 = (char *)__p;
      if (__p)
      {
LABEL_162:
        int v129 = v110;
        operator delete(v110);
      }
LABEL_163:
      if (v131)
      {
        BOOL v132 = (char *)v131;
        operator delete(v131);
      }
      if (v134)
      {
        unsigned __int8 v135 = (char *)v134;
        operator delete(v134);
      }
      if (v138 < 0)
      {
        operator delete(v137[0]);
        if ((SHIBYTE(v141) & 0x80000000) == 0) {
          return v142;
        }
LABEL_174:
        operator delete(__dst);
        return v142;
      }
      if (SHIBYTE(v141) < 0) {
        goto LABEL_174;
      }
      return v142;
    default:
      goto LABEL_150;
  }
}

void sub_192441C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  E5RT::Status::~Status((E5RT::Status *)&a22);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v46 - 121) < 0)
  {
    operator delete(*(void **)(v46 - 144));
    if ((v45 & 1) == 0)
    {
LABEL_8:
      if (a24)
      {
        a25 = (uint64_t)a24;
        operator delete(a24);
        unint64_t v48 = a27;
        if (!a27)
        {
LABEL_10:
          unint64_t v49 = a30;
          if (!a30) {
            goto LABEL_11;
          }
          goto LABEL_16;
        }
      }
      else
      {
        unint64_t v48 = a27;
        if (!a27) {
          goto LABEL_10;
        }
      }
      a28 = (uint64_t)v48;
      operator delete(v48);
      unint64_t v49 = a30;
      if (!a30)
      {
LABEL_11:
        if (a38 < 0) {
          goto LABEL_12;
        }
        goto LABEL_17;
      }
LABEL_16:
      a31 = (uint64_t)v49;
      operator delete(v49);
      if (a38 < 0)
      {
LABEL_12:
        operator delete(a33);
        if ((a44 & 0x80000000) == 0) {
          goto LABEL_13;
        }
        goto LABEL_18;
      }
LABEL_17:
      if ((a44 & 0x80000000) == 0) {
LABEL_13:
      }
        _Unwind_Resume(a1);
LABEL_18:
      operator delete(a39);
      _Unwind_Resume(a1);
    }
  }
  else if (!v45)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v44);
  goto LABEL_8;
}

void sub_192441F90()
{
}

void sub_192441F98()
{
}

uint64_t E5RT::E5Serializer::SerializeOperation(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  int v21 = (*(uint64_t (**)(const void *))(*(void *)a2 + 16))(a2);
  uint64_t v6 = (*(uint64_t (**)(const void *))(*(void *)a2 + 24))(a2);
  uint64_t v7 = v6;
  int v20 = 0;
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 8;
  strcpy((char *)&__p, "__text__");
  if ((*(char *)(v6 + 23) & 0x80000000) == 0)
  {
    long long v8 = *(_OWORD *)v6;
    v17.__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
LABEL_4:
    std::string v18 = __p;
    goto LABEL_5;
  }
  std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_4;
  }
  std::string::__init_copy_ctor_external(&v18, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
LABEL_5:
  uint64_t v9 = a1 + 16;
  unint64_t v10 = std::__hash_table<std::pair<std::string,std::string>,E5RT::SerializerUtils::StringPairHash,std::equal_to<std::pair<std::string,std::string>>,std::allocator<std::pair<std::string,std::string>>>::find<std::pair<std::string,std::string>>((void *)(a1 + 16), (unsigned __int8 *)&v17);
  if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_13:
    operator delete(v17.__r_.__value_.__l.__data_);
    if (v10) {
      goto LABEL_8;
    }
    goto LABEL_14;
  }
  operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_13;
  }
LABEL_7:
  if (v10)
  {
LABEL_8:
    uint64_t v11 = (*(uint64_t (**)(void, uint64_t, std::string *))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8), v7, &__p);
    goto LABEL_9;
  }
LABEL_14:
  int v20 = E5RT::E5Serializer::SerializeOpArgFrame(a1, a2, a3);
  v24[0] = &unk_1EE39AC88;
  v24[1] = &v21;
  v24[2] = &v20;
  uint64_t v25 = v24;
  uint64_t v11 = (*(uint64_t (**)(void, uint64_t, std::string *, uint64_t, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), v7, &__p, 2, 17);
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = (uint64_t)v25;
  if (!v25)
  {
LABEL_17:
    unsigned int v23 = (void *)v14;
    goto LABEL_20;
  }
  if (v25 != v24)
  {
    uint64_t v14 = (*(uint64_t (**)(void *))(*v25 + 16))(v25);
    goto LABEL_17;
  }
  unsigned int v23 = v22;
  (*(void (**)(void *, void *))(v24[0] + 24))(v24, v22);
LABEL_20:
  (*(void (**)(uint64_t, uint64_t, std::string *, void *))(*(void *)v13 + 56))(v13, v7, &__p, v22);
  if (v23 == v22)
  {
    (*(void (**)(void *))(v22[0] + 32))(v22);
    if ((*(char *)(v7 + 23) & 0x80000000) == 0)
    {
LABEL_24:
      long long v15 = *(_OWORD *)v7;
      v17.__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v15;
      goto LABEL_27;
    }
  }
  else
  {
    if (v23) {
      (*(void (**)(void))(*v23 + 40))();
    }
    if ((*(char *)(v7 + 23) & 0x80000000) == 0) {
      goto LABEL_24;
    }
  }
  std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
LABEL_27:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v18, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v18 = __p;
  }
  std::__hash_table<std::pair<std::string,std::string>,E5RT::SerializerUtils::StringPairHash,std::equal_to<std::pair<std::string,std::string>>,std::allocator<std::pair<std::string,std::string>>>::__emplace_unique_key_args<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(v9, (unsigned __int8 *)&v17, (uint64_t)&v17);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v18.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_32:
      uint64_t v16 = v25;
      if (v25 != v24) {
        goto LABEL_33;
      }
LABEL_37:
      (*(void (**)(void *))(v24[0] + 32))(v24);
      goto LABEL_9;
    }
  }
  else if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_32;
  }
  operator delete(v17.__r_.__value_.__l.__data_);
  uint64_t v16 = v25;
  if (v25 == v24) {
    goto LABEL_37;
  }
LABEL_33:
  if (v16) {
    (*(void (**)(void *))(*v16 + 40))(v16);
  }
LABEL_9:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v11;
}

void sub_19244244C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::function<unsigned long long ()(flatbuffers::FlatBufferBuilder &)>::~function((void *)(v26 - 88));
  if ((a24 & 0x80000000) == 0) {
    _Unwind_Resume(a1);
  }
  operator delete(a19);
  _Unwind_Resume(a1);
}

void sub_1924424F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    JUMPOUT(0x192442490);
  }
  JUMPOUT(0x1924424DCLL);
}

uint64_t E5RT::E5Serializer::SerializeBlock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v159 = *MEMORY[0x1E4F143B8];
  unsigned int v153 = 0;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  v147 = 0;
  uint64_t v148 = 0;
  v149 = 0;
  v144 = 0;
  std::string v145 = 0;
  v146 = 0;
  std::string __p = 0;
  unsigned int v142 = 0;
  v143 = 0;
  char v140 = 8;
  strcpy((char *)v139, "__text__");
  uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  uint64_t v7 = v6[1] - *v6;
  uint64_t v137 = a4;
  uint64_t v138 = a1;
  if (v7)
  {
    unint64_t v8 = 0;
    unint64_t v134 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
    while (1)
    {
      if (v8 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[1] - *v6) >> 3))
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "iterator out of range");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
      }
      uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v6 + 8, *v6 + 24 * v8);
      unint64_t v10 = v9;
      if (*((char *)v9 + 39) < 0) {
        std::string::__init_copy_ctor_external(&v156, (const std::string::value_type *)v9[2], v9[3]);
      }
      else {
        std::string v156 = *(std::string *)(v9 + 2);
      }
      uint64_t v11 = (E5RT::SerializerUtils *)v10[5];
      uint64_t v12 = (std::__shared_weak_count *)v10[6];
      v157 = (std::string *)v11;
      v158 = v12;
      if (v12)
      {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v11 = (E5RT::SerializerUtils *)v157;
      }
      unsigned int v13 = E5RT::E5Serializer::SerializeOperand(a1, v11, a4);
      uint64_t v14 = v13;
      long long v15 = v151;
      if (v151 >= v152) {
        break;
      }
      *(void *)v151 = v13;
      v151 = v15 + 8;
      uint64_t v16 = v158;
      if (v158) {
        goto LABEL_37;
      }
LABEL_3:
      if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v156.__r_.__value_.__l.__data_);
        if (++v8 == v134) {
          goto LABEL_39;
        }
      }
      else if (++v8 == v134)
      {
        goto LABEL_39;
      }
    }
    std::string v17 = (char *)v150;
    int64_t v18 = v151 - (unsigned char *)v150;
    uint64_t v19 = (v151 - (unsigned char *)v150) >> 3;
    unint64_t v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v21 = v152 - (unsigned char *)v150;
    if ((v152 - (unsigned char *)v150) >> 2 > v20) {
      unint64_t v20 = v21 >> 2;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v20;
    }
    if (v22)
    {
      if (v22 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unsigned int v23 = (char *)operator new(8 * v22);
      uint64_t v24 = &v23[8 * v19];
      *(void *)uint64_t v24 = v14;
      uint64_t v25 = (uint64_t)(v24 + 8);
      if (v15 != v17)
      {
LABEL_23:
        unint64_t v26 = v15 - 8 - v17;
        if (v26 >= 0x58)
        {
          unint64_t v27 = v15 - &v23[v18];
          a4 = v137;
          if (v27 >= 0x20)
          {
            uint64_t v28 = (v26 >> 3) + 1;
            uint64_t v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v30 = &v15[-v29];
            v24 -= v29;
            uint64_t v31 = &v23[8 * v19 - 16];
            unint64_t v32 = v15 - 16;
            uint64_t v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v34 = *(_OWORD *)v32;
              *((_OWORD *)v31 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = *((_OWORD *)v32 - 1);
              *(_OWORD *)uint64_t v31 = v34;
              v31 -= 32;
              v32 -= 32;
              v33 -= 4;
            }
            while (v33);
            long long v15 = v30;
            if (v28 == (v28 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_34:
              v150 = v24;
              v151 = (char *)v25;
              v152 = &v23[8 * v22];
              if (v17) {
                operator delete(v17);
              }
              a1 = v138;
              v151 = (char *)v25;
              uint64_t v16 = v158;
              if (!v158) {
                goto LABEL_3;
              }
LABEL_37:
              if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                std::__shared_weak_count::__release_weak(v16);
              }
              goto LABEL_3;
            }
          }
        }
        else
        {
          a4 = v137;
        }
        do
        {
          uint64_t v35 = *((void *)v15 - 1);
          v15 -= 8;
          *((void *)v24 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v35;
          v24 -= 8;
        }
        while (v15 != v17);
        goto LABEL_34;
      }
    }
    else
    {
      unsigned int v23 = 0;
      uint64_t v24 = (char *)(8 * v19);
      *(void *)(8 * v19) = v14;
      uint64_t v25 = 8 * v19 + 8;
      if (v15 != v17) {
        goto LABEL_23;
      }
    }
    a4 = v137;
    goto LABEL_34;
  }
LABEL_39:
  unint64_t v36 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  uint64_t v37 = v36[1] - *v36;
  if (v37)
  {
    unint64_t v38 = 0;
    unint64_t v135 = 0xAAAAAAAAAAAAAAABLL * (v37 >> 3);
    while (1)
    {
      if (v38 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36[1] - *v36) >> 3))
      {
        BOOL v130 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v130, "iterator out of range");
        v130->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
        __cxa_throw(v130, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
      }
      BOOL v39 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v36 + 8, *v36 + 24 * v38);
      std::string v40 = v39;
      if (*((char *)v39 + 39) < 0) {
        std::string::__init_copy_ctor_external(&v156, (const std::string::value_type *)v39[2], v39[3]);
      }
      else {
        std::string v156 = *(std::string *)(v39 + 2);
      }
      std::string v41 = (E5RT::SerializerUtils *)v40[5];
      uint64_t v42 = (std::__shared_weak_count *)v40[6];
      v157 = (std::string *)v41;
      v158 = v42;
      if (v42)
      {
        atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
        std::string v41 = (E5RT::SerializerUtils *)v157;
      }
      unsigned int v43 = E5RT::E5Serializer::SerializeOperand(a1, v41, a4);
      uint64_t v44 = v43;
      int v45 = v148;
      if (v148 >= v149) {
        break;
      }
      *(void *)uint64_t v148 = v43;
      uint64_t v148 = v45 + 8;
      uint64_t v46 = v158;
      if (v158) {
        goto LABEL_75;
      }
LABEL_41:
      if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v156.__r_.__value_.__l.__data_);
        if (++v38 == v135) {
          goto LABEL_77;
        }
      }
      else if (++v38 == v135)
      {
        goto LABEL_77;
      }
    }
    unint64_t v47 = (char *)v147;
    int64_t v48 = v148 - (unsigned char *)v147;
    uint64_t v49 = (v148 - (unsigned char *)v147) >> 3;
    unint64_t v50 = v49 + 1;
    if ((unint64_t)(v49 + 1) >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v51 = v149 - (unsigned char *)v147;
    if ((v149 - (unsigned char *)v147) >> 2 > v50) {
      unint64_t v50 = v51 >> 2;
    }
    if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v52 = v50;
    }
    if (v52)
    {
      if (v52 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v53 = (char *)operator new(8 * v52);
      uint64_t v54 = &v53[8 * v49];
      *(void *)uint64_t v54 = v44;
      uint64_t v55 = (uint64_t)(v54 + 8);
      if (v45 != v47)
      {
LABEL_61:
        unint64_t v56 = v45 - 8 - v47;
        if (v56 >= 0x58)
        {
          unint64_t v57 = v45 - &v53[v48];
          a4 = v137;
          if (v57 >= 0x20)
          {
            uint64_t v58 = (v56 >> 3) + 1;
            uint64_t v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v60 = &v45[-v59];
            v54 -= v59;
            unint64_t v61 = &v53[8 * v49 - 16];
            float64x2x2_t v62 = v45 - 16;
            uint64_t v63 = v58 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v64 = *(_OWORD *)v62;
              *((_OWORD *)v61 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = *((_OWORD *)v62 - 1);
              *(_OWORD *)unint64_t v61 = v64;
              v61 -= 32;
              v62 -= 32;
              v63 -= 4;
            }
            while (v63);
            int v45 = v60;
            if (v58 == (v58 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_72:
              v147 = v54;
              uint64_t v148 = (char *)v55;
              v149 = &v53[8 * v52];
              if (v47) {
                operator delete(v47);
              }
              a1 = v138;
              uint64_t v148 = (char *)v55;
              uint64_t v46 = v158;
              if (!v158) {
                goto LABEL_41;
              }
LABEL_75:
              if (!atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                std::__shared_weak_count::__release_weak(v46);
              }
              goto LABEL_41;
            }
          }
        }
        else
        {
          a4 = v137;
        }
        do
        {
          uint64_t v65 = *((void *)v45 - 1);
          v45 -= 8;
          *((void *)v54 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v65;
          v54 -= 8;
        }
        while (v45 != v47);
        goto LABEL_72;
      }
    }
    else
    {
      uint64_t v53 = 0;
      uint64_t v54 = (char *)(8 * v49);
      *(void *)(8 * v49) = v44;
      uint64_t v55 = 8 * v49 + 8;
      if (v45 != v47) {
        goto LABEL_61;
      }
    }
    a4 = v137;
    goto LABEL_72;
  }
LABEL_77:
  uint64_t v66 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  uint64_t v67 = v66[1] - *v66;
  if (v67)
  {
    unint64_t v68 = 0;
    unint64_t v136 = 0xAAAAAAAAAAAAAAABLL * (v67 >> 3);
    while (1)
    {
      if (v68 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66[1] - *v66) >> 3))
      {
        BOOL v131 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v131, "iterator out of range");
        v131->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
        __cxa_throw(v131, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
      }
      BOOL v69 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v66 + 8, *v66 + 24 * v68);
      unint64_t v70 = v69;
      if (*((char *)v69 + 39) < 0) {
        std::string::__init_copy_ctor_external(&v156, (const std::string::value_type *)v69[2], v69[3]);
      }
      else {
        std::string v156 = *(std::string *)(v69 + 2);
      }
      uint64_t v71 = (E5RT::SerializerUtils *)v70[5];
      long long v72 = (std::__shared_weak_count *)v70[6];
      v157 = (std::string *)v71;
      v158 = v72;
      if (v72)
      {
        atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v71 = (E5RT::SerializerUtils *)v157;
      }
      unsigned int v73 = E5RT::E5Serializer::SerializeOperand(a1, v71, a4);
      uint64_t v74 = v73;
      uint64_t v75 = v145;
      if (v145 >= v146) {
        break;
      }
      *(void *)std::string v145 = v73;
      std::string v145 = v75 + 8;
      unint64_t v76 = v158;
      if (v158) {
        goto LABEL_113;
      }
LABEL_79:
      if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v156.__r_.__value_.__l.__data_);
        if (++v68 == v136) {
          goto LABEL_115;
        }
      }
      else if (++v68 == v136)
      {
        goto LABEL_115;
      }
    }
    size_t v77 = (char *)v144;
    int64_t v78 = v145 - (unsigned char *)v144;
    uint64_t v79 = (v145 - (unsigned char *)v144) >> 3;
    unint64_t v80 = v79 + 1;
    if ((unint64_t)(v79 + 1) >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v81 = v146 - (unsigned char *)v144;
    if ((v146 - (unsigned char *)v144) >> 2 > v80) {
      unint64_t v80 = v81 >> 2;
    }
    if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v82 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v82 = v80;
    }
    if (v82)
    {
      if (v82 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v83 = (char *)operator new(8 * v82);
      uint64_t v84 = &v83[8 * v79];
      *(void *)uint64_t v84 = v74;
      uint64_t v85 = (uint64_t)(v84 + 8);
      if (v75 != v77)
      {
LABEL_99:
        unint64_t v86 = v75 - 8 - v77;
        if (v86 >= 0x58)
        {
          unint64_t v87 = v75 - &v83[v78];
          a4 = v137;
          if (v87 >= 0x20)
          {
            uint64_t v88 = (v86 >> 3) + 1;
            uint64_t v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v90 = &v75[-v89];
            v84 -= v89;
            unint64_t v91 = &v83[8 * v79 - 16];
            uint64_t v92 = v75 - 16;
            uint64_t v93 = v88 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v94 = *(_OWORD *)v92;
              *((_OWORD *)v91 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = *((_OWORD *)v92 - 1);
              *(_OWORD *)unint64_t v91 = v94;
              v91 -= 32;
              v92 -= 32;
              v93 -= 4;
            }
            while (v93);
            uint64_t v75 = v90;
            if (v88 == (v88 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_110:
              v144 = v84;
              std::string v145 = (char *)v85;
              v146 = &v83[8 * v82];
              if (v77) {
                operator delete(v77);
              }
              a1 = v138;
              std::string v145 = (char *)v85;
              unint64_t v76 = v158;
              if (!v158) {
                goto LABEL_79;
              }
LABEL_113:
              if (!atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
              goto LABEL_79;
            }
          }
        }
        else
        {
          a4 = v137;
        }
        do
        {
          uint64_t v95 = *((void *)v75 - 1);
          v75 -= 8;
          *((void *)v84 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v95;
          v84 -= 8;
        }
        while (v75 != v77);
        goto LABEL_110;
      }
    }
    else
    {
      uint64_t v83 = 0;
      uint64_t v84 = (char *)(8 * v79);
      *(void *)(8 * v79) = v74;
      uint64_t v85 = 8 * v79 + 8;
      if (v75 != v77) {
        goto LABEL_99;
      }
    }
    a4 = v137;
    goto LABEL_110;
  }
LABEL_115:
  std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
  std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
  std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
  uint64_t v96 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  uint64_t v97 = *v96;
  uint64_t v98 = v96[1];
  while (v97 != v98)
  {
    int v99 = *(const void **)v97;
    uint64_t v100 = *(std::__shared_weak_count **)(v97 + 8);
    v156.__r_.__value_.__r.__words[0] = *(void *)v97;
    v156.__r_.__value_.__l.__size_ = (std::string::size_type)v100;
    if (v100) {
      atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned int v101 = E5RT::E5Serializer::SerializeOperation(a1, v99, a4);
    uint64_t v102 = v101;
    unsigned int v103 = v142;
    if (v142 < v143)
    {
      *(void *)unsigned int v142 = v101;
      unsigned int v142 = v103 + 8;
      if (!v100) {
        goto LABEL_116;
      }
LABEL_144:
      if (!atomic_fetch_add(&v100->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
      goto LABEL_116;
    }
    unsigned int v104 = (char *)__p;
    int64_t v105 = v142 - (unsigned char *)__p;
    uint64_t v106 = (v142 - (unsigned char *)__p) >> 3;
    unint64_t v107 = v106 + 1;
    if ((unint64_t)(v106 + 1) >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v108 = v143 - (unsigned char *)__p;
    if ((v143 - (unsigned char *)__p) >> 2 > v107) {
      unint64_t v107 = v108 >> 2;
    }
    if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v109 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v109 = v107;
    }
    if (v109)
    {
      if (v109 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      v110 = (char *)operator new(8 * v109);
      uint64_t v111 = &v110[8 * v106];
      *(void *)uint64_t v111 = v102;
      uint64_t v112 = (uint64_t)(v111 + 8);
      if (v103 == v104)
      {
LABEL_135:
        a4 = v137;
        goto LABEL_141;
      }
    }
    else
    {
      v110 = 0;
      uint64_t v111 = (char *)(8 * v106);
      *(void *)(8 * v106) = v102;
      uint64_t v112 = 8 * v106 + 8;
      if (v103 == v104) {
        goto LABEL_135;
      }
    }
    unint64_t v113 = v103 - 8 - v104;
    if (v113 < 0x58)
    {
      a4 = v137;
      do
      {
LABEL_140:
        uint64_t v122 = *((void *)v103 - 1);
        v103 -= 8;
        *((void *)v111 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v122;
        v111 -= 8;
      }
      while (v103 != v104);
      goto LABEL_141;
    }
    unint64_t v114 = v103 - &v110[v105];
    a4 = v137;
    if (v114 < 0x20) {
      goto LABEL_140;
    }
    uint64_t v115 = (v113 >> 3) + 1;
    uint64_t v116 = 8 * (v115 & 0x3FFFFFFFFFFFFFFCLL);
    int v117 = &v103[-v116];
    v111 -= v116;
    uint64_t v118 = &v110[8 * v106 - 16];
    unint64_t v119 = v103 - 16;
    uint64_t v120 = v115 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v121 = *(_OWORD *)v119;
      *((_OWORD *)v118 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = *((_OWORD *)v119 - 1);
      *(_OWORD *)uint64_t v118 = v121;
      v118 -= 32;
      v119 -= 32;
      v120 -= 4;
    }
    while (v120);
    unsigned int v103 = v117;
    if (v115 != (v115 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_140;
    }
LABEL_141:
    std::string __p = v111;
    unsigned int v142 = (char *)v112;
    v143 = &v110[8 * v109];
    if (v104) {
      operator delete(v104);
    }
    a1 = v138;
    unsigned int v142 = (char *)v112;
    if (v100) {
      goto LABEL_144;
    }
LABEL_116:
    v97 += 16;
  }
  uint64_t v123 = (std::string *)operator new(0x30uLL);
  v123->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE39AD08;
  v123->__r_.__value_.__l.__size_ = (std::string::size_type)&v150;
  v123->__r_.__value_.__r.__words[2] = (std::string::size_type)&v147;
  v123[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v144;
  v123[1].__r_.__value_.__l.__size_ = (std::string::size_type)&__p;
  v123[1].__r_.__value_.__r.__words[2] = (std::string::size_type)&v153;
  v157 = v123;
  (*(void (**)(void, uint64_t, void **, uint64_t, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), a3, v139, 4, 17);
  uint64_t v124 = *(void *)(a1 + 8);
  uint64_t v125 = (uint64_t)v157;
  if (!v157) {
    goto LABEL_149;
  }
  if (v157 == &v156)
  {
    v155 = v154;
    (*(void (**)(std::string *, void *))(v156.__r_.__value_.__r.__words[0] + 24))(&v156, v154);
  }
  else
  {
    uint64_t v125 = (*(uint64_t (**)(void))(v157->__r_.__value_.__r.__words[0] + 16))();
LABEL_149:
    v155 = (void *)v125;
  }
  (*(void (**)(uint64_t, uint64_t, void **, void *))(*(void *)v124 + 56))(v124, a3, v139, v154);
  if (v155 == v154)
  {
    (*(void (**)(void *))(v154[0] + 32))(v154);
    v126 = v157;
    if (v157 != &v156) {
      goto LABEL_155;
    }
LABEL_168:
    (*(void (**)(std::string *))(v156.__r_.__value_.__r.__words[0] + 32))(&v156);
    if ((v140 & 0x80000000) == 0) {
      goto LABEL_158;
    }
    goto LABEL_169;
  }
  if (v155) {
    (*(void (**)(void))(*v155 + 40))();
  }
  v126 = v157;
  if (v157 == &v156) {
    goto LABEL_168;
  }
LABEL_155:
  if (v126) {
    (*(void (**)(std::string *))(v126->__r_.__value_.__r.__words[0] + 40))(v126);
  }
  if ((v140 & 0x80000000) == 0)
  {
LABEL_158:
    uint64_t v127 = (char *)__p;
    if (__p) {
      goto LABEL_159;
    }
    goto LABEL_160;
  }
LABEL_169:
  operator delete(v139[0]);
  uint64_t v127 = (char *)__p;
  if (__p)
  {
LABEL_159:
    unsigned int v142 = v127;
    operator delete(v127);
  }
LABEL_160:
  if (v144)
  {
    std::string v145 = (char *)v144;
    operator delete(v144);
  }
  if (v147)
  {
    uint64_t v148 = (char *)v147;
    operator delete(v147);
  }
  if (v150)
  {
    v151 = (char *)v150;
    operator delete(v150);
  }
  return v153;
}

void sub_1924433CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  std::function<unsigned long long ()(flatbuffers::FlatBufferBuilder &)>::~function(&a34);
  std::function<unsigned long long ()(flatbuffers::FlatBufferBuilder &)>::~function((void *)(v34 - 144));
  if (a20 < 0)
  {
    operator delete(__p);
    unint64_t v36 = a21;
    if (!a21)
    {
LABEL_3:
      uint64_t v37 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v36 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  operator delete(v36);
  uint64_t v37 = a24;
  if (!a24)
  {
LABEL_4:
    unint64_t v38 = a27;
    if (!a27) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(v37);
  unint64_t v38 = a27;
  if (!a27)
  {
LABEL_5:
    BOOL v39 = a30;
    if (!a30) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v38);
  BOOL v39 = a30;
  if (!a30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_11:
  operator delete(v39);
  _Unwind_Resume(a1);
}

void sub_192443510()
{
}

void sub_192443518()
{
}

void sub_192443520()
{
}

uint64_t E5RT::E5Serializer::SerializeFunction(E5RT::E5Serializer *this, const E5RT::E5Function *a2, int a3)
{
  uint64_t v185 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (void *)(*(uint64_t (**)(const E5RT::E5Function *))(*(void *)a2 + 40))(a2);
  uint64_t v159 = (void *)(*(uint64_t (**)(const E5RT::E5Function *))(*(void *)a2 + 48))(a2);
  v158 = (void *)(*(uint64_t (**)(const E5RT::E5Function *))(*(void *)a2 + 56))(a2);
  uint64_t v7 = (*(uint64_t (**)(const E5RT::E5Function *))(*(void *)a2 + 16))(a2);
  uint64_t v8 = v7;
  v178 = 0;
  v179 = 0;
  v180 = 0;
  v175 = 0;
  v176 = 0;
  v177 = 0;
  v172 = 0;
  v173 = 0;
  v174 = 0;
  v169 = 0;
  v170 = 0;
  v171 = 0;
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 8;
  strcpy((char *)&__p, "__text__");
  v161 = (char *)v7;
  int v156 = a3;
  if ((*(char *)(v7 + 23) & 0x80000000) == 0)
  {
    long long v9 = *(_OWORD *)v7;
    v166.__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
    *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v9;
LABEL_5:
    std::string v167 = __p;
    goto LABEL_6;
  }
  std::string::__init_copy_ctor_external(&v166, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    uint64_t v8 = (uint64_t)v161;
    goto LABEL_5;
  }
  std::string::__init_copy_ctor_external(&v167, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  uint64_t v8 = (uint64_t)v161;
LABEL_6:
  unint64_t v10 = std::__hash_table<std::pair<std::string,std::string>,E5RT::SerializerUtils::StringPairHash,std::equal_to<std::pair<std::string,std::string>>,std::allocator<std::pair<std::string,std::string>>>::find<std::pair<std::string,std::string>>((void *)this + 2, (unsigned __int8 *)&v166);
  if ((SHIBYTE(v167.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v166.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_8;
    }
LABEL_22:
    operator delete(v166.__r_.__value_.__l.__data_);
    if (v10) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  operator delete(v167.__r_.__value_.__l.__data_);
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_22;
  }
LABEL_8:
  if (v10)
  {
LABEL_9:
    uint64_t v11 = (*(uint64_t (**)(void, uint64_t, std::string *))(**((void **)this + 1) + 80))(*((void *)this + 1), v8, &__p);
    goto LABEL_10;
  }
LABEL_23:
  v154 = (char *)this + 16;
  v155 = a2;
  uint64_t v13 = v6[1] - *v6;
  v162 = this;
  if (v13)
  {
    unint64_t v14 = 0;
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (v13 >> 3);
    uint64_t v16 = v6 + 8;
    v157 = v6 + 8;
    while (1)
    {
      if (v14 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[1] - *v6) >> 3))
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "iterator out of range");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
      }
      std::string v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v16, *v6 + 24 * v14);
      int64_t v18 = v17;
      if (*((char *)v17 + 39) < 0) {
        std::string::__init_copy_ctor_external(&v166, (const std::string::value_type *)v17[2], v17[3]);
      }
      else {
        std::string v166 = *(std::string *)(v17 + 2);
      }
      uint64_t v19 = (E5RT::SerializerUtils *)v18[5];
      std::string::size_type v20 = v18[6];
      v167.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
      v167.__r_.__value_.__l.__size_ = v20;
      if (v20)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
        uint64_t v19 = (E5RT::SerializerUtils *)v167.__r_.__value_.__r.__words[0];
      }
      unsigned int v21 = E5RT::E5Serializer::SerializeOperand((uint64_t)this, v19, v8);
      uint64_t v22 = v21;
      unsigned int v23 = v179;
      if (v179 >= v180) {
        break;
      }
      *(void *)v179 = v21;
      this = v162;
      v179 = v23 + 8;
      std::string::size_type size = (std::__shared_weak_count *)v167.__r_.__value_.__l.__size_;
      if (v167.__r_.__value_.__l.__size_) {
        goto LABEL_59;
      }
LABEL_25:
      if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v166.__r_.__value_.__l.__data_);
        if (++v14 == v15) {
          goto LABEL_61;
        }
      }
      else if (++v14 == v15)
      {
        goto LABEL_61;
      }
    }
    uint64_t v25 = v6;
    unint64_t v26 = v178;
    uint64_t v27 = (v179 - v178) >> 3;
    unint64_t v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v29 = v15;
    uint64_t v30 = v180 - v178;
    if ((v180 - v178) >> 2 > v28) {
      unint64_t v28 = v30 >> 2;
    }
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v31 = v28;
    }
    if (v31)
    {
      if (v31 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v32 = operator new(8 * v31);
      uint64_t v33 = &v32[8 * v27];
      *(void *)uint64_t v33 = v22;
      uint64_t v34 = (uint64_t)(v33 + 8);
      if (v23 != v26) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v32 = 0;
      uint64_t v33 = (char *)(8 * v27);
      *(void *)(8 * v27) = v22;
      uint64_t v34 = 8 * v27 + 8;
      if (v23 != v26)
      {
LABEL_45:
        unint64_t v35 = v23 - 8 - v26;
        this = v162;
        if (v35 < 0x58) {
          goto LABEL_234;
        }
        if ((unint64_t)(v26 - v32) < 0x20) {
          goto LABEL_234;
        }
        uint64_t v36 = (v35 >> 3) + 1;
        uint64_t v37 = 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v38 = &v23[-v37];
        v33 -= v37;
        BOOL v39 = &v32[8 * v27 - 16];
        std::string v40 = v23 - 16;
        uint64_t v41 = v36 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v42 = *(_OWORD *)v40;
          *(v39 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = *((_OWORD *)v40 - 1);
          *BOOL v39 = v42;
          v39 -= 2;
          v40 -= 32;
          v41 -= 4;
        }
        while (v41);
        unsigned int v23 = v38;
        if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_234:
          do
          {
            uint64_t v43 = *((void *)v23 - 1);
            v23 -= 8;
            *((void *)v33 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v43;
            v33 -= 8;
          }
          while (v23 != v26);
        }
LABEL_56:
        v178 = v33;
        v179 = (char *)v34;
        v180 = &v32[8 * v31];
        if (v26) {
          operator delete(v26);
        }
        unint64_t v15 = v29;
        uint64_t v6 = v25;
        uint64_t v8 = (uint64_t)v161;
        uint64_t v16 = v157;
        v179 = (char *)v34;
        std::string::size_type size = (std::__shared_weak_count *)v167.__r_.__value_.__l.__size_;
        if (!v167.__r_.__value_.__l.__size_) {
          goto LABEL_25;
        }
LABEL_59:
        if (!atomic_fetch_add(&size->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
        goto LABEL_25;
      }
    }
    this = v162;
    goto LABEL_56;
  }
LABEL_61:
  uint64_t v44 = v159[1] - *v159;
  if (v44)
  {
    unint64_t v45 = 0;
    unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * (v44 >> 3);
    while (1)
    {
      if (v45 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v159[1] - *v159) >> 3))
      {
        v152 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v152, "iterator out of range");
        v152->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
        __cxa_throw(v152, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
      }
      unint64_t v47 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v159 + 8, *v159 + 24 * v45);
      int64_t v48 = v47;
      if (*((char *)v47 + 39) < 0) {
        std::string::__init_copy_ctor_external(&v166, (const std::string::value_type *)v47[2], v47[3]);
      }
      else {
        std::string v166 = *(std::string *)(v47 + 2);
      }
      uint64_t v49 = (E5RT::SerializerUtils *)v48[5];
      std::string::size_type v50 = v48[6];
      v167.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
      v167.__r_.__value_.__l.__size_ = v50;
      if (v50)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v50 + 8), 1uLL, memory_order_relaxed);
        uint64_t v49 = (E5RT::SerializerUtils *)v167.__r_.__value_.__r.__words[0];
      }
      unsigned int v51 = E5RT::E5Serializer::SerializeOperand((uint64_t)this, v49, v8);
      uint64_t v52 = v51;
      uint64_t v53 = v176;
      if (v176 >= v177) {
        break;
      }
      *(void *)v176 = v51;
      v176 = v53 + 8;
      uint64_t v54 = (std::__shared_weak_count *)v167.__r_.__value_.__l.__size_;
      if (v167.__r_.__value_.__l.__size_) {
        goto LABEL_97;
      }
LABEL_63:
      if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v166.__r_.__value_.__l.__data_);
        if (++v45 == v46) {
          goto LABEL_99;
        }
      }
      else if (++v45 == v46)
      {
        goto LABEL_99;
      }
    }
    uint64_t v55 = v175;
    uint64_t v56 = (v176 - v175) >> 3;
    unint64_t v57 = v56 + 1;
    if ((unint64_t)(v56 + 1) >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v58 = v177 - v175;
    if ((v177 - v175) >> 2 > v57) {
      unint64_t v57 = v58 >> 2;
    }
    if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v59 = v57;
    }
    if (v59)
    {
      if (v59 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v60 = v59;
      unint64_t v61 = operator new(8 * v59);
      unint64_t v59 = v60;
      float64x2x2_t v62 = &v61[8 * v56];
      *(void *)float64x2x2_t v62 = v52;
      uint64_t v63 = (uint64_t)(v62 + 8);
      if (v53 == v55)
      {
LABEL_94:
        v175 = v62;
        v176 = (char *)v63;
        v177 = &v61[8 * v59];
        if (v55) {
          operator delete(v55);
        }
        this = v162;
        v176 = (char *)v63;
        uint64_t v54 = (std::__shared_weak_count *)v167.__r_.__value_.__l.__size_;
        if (!v167.__r_.__value_.__l.__size_) {
          goto LABEL_63;
        }
LABEL_97:
        if (!atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
        goto LABEL_63;
      }
    }
    else
    {
      unint64_t v61 = 0;
      float64x2x2_t v62 = (char *)(8 * v56);
      *(void *)(8 * v56) = v52;
      uint64_t v63 = 8 * v56 + 8;
      if (v53 == v55) {
        goto LABEL_94;
      }
    }
    unint64_t v64 = v53 - 8 - v55;
    if (v64 < 0x58) {
      goto LABEL_235;
    }
    if ((unint64_t)(v55 - v61) < 0x20) {
      goto LABEL_235;
    }
    uint64_t v65 = (v64 >> 3) + 1;
    uint64_t v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v67 = &v53[-v66];
    v62 -= v66;
    unint64_t v68 = &v61[8 * v56 - 16];
    BOOL v69 = v53 - 16;
    uint64_t v70 = v65 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v71 = *(_OWORD *)v69;
      *(v68 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = *((_OWORD *)v69 - 1);
      *unint64_t v68 = v71;
      v68 -= 2;
      v69 -= 32;
      v70 -= 4;
    }
    while (v70);
    uint64_t v53 = v67;
    if (v65 != (v65 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_235:
      do
      {
        uint64_t v72 = *((void *)v53 - 1);
        v53 -= 8;
        *((void *)v62 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v72;
        v62 -= 8;
      }
      while (v53 != v55);
    }
    goto LABEL_94;
  }
LABEL_99:
  uint64_t v73 = v158[1] - *v158;
  if (v73)
  {
    unint64_t v74 = 0;
    unint64_t v75 = 0xAAAAAAAAAAAAAAABLL * (v73 >> 3);
    unint64_t v76 = v158 + 8;
    while (1)
    {
      if (v74 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v158[1] - *v158) >> 3))
      {
        unsigned int v153 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v153, "iterator out of range");
        v153->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
        __cxa_throw(v153, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
      }
      size_t v77 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v76, *v158 + 24 * v74);
      int64_t v78 = v77;
      if (*((char *)v77 + 39) < 0) {
        std::string::__init_copy_ctor_external(&v166, (const std::string::value_type *)v77[2], v77[3]);
      }
      else {
        std::string v166 = *(std::string *)(v77 + 2);
      }
      uint64_t v79 = (E5RT::SerializerUtils *)v78[5];
      std::string::size_type v80 = v78[6];
      v167.__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
      v167.__r_.__value_.__l.__size_ = v80;
      if (v80)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v80 + 8), 1uLL, memory_order_relaxed);
        uint64_t v79 = (E5RT::SerializerUtils *)v167.__r_.__value_.__r.__words[0];
      }
      unsigned int v81 = E5RT::E5Serializer::SerializeOperand((uint64_t)this, v79, v8);
      uint64_t v82 = v81;
      uint64_t v83 = v173;
      if (v173 >= v174) {
        break;
      }
      *(void *)v173 = v81;
      v173 = v83 + 8;
      uint64_t v84 = (std::__shared_weak_count *)v167.__r_.__value_.__l.__size_;
      if (v167.__r_.__value_.__l.__size_) {
        goto LABEL_135;
      }
LABEL_101:
      if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v166.__r_.__value_.__l.__data_);
        if (++v74 == v75) {
          goto LABEL_137;
        }
      }
      else if (++v74 == v75)
      {
        goto LABEL_137;
      }
    }
    uint64_t v85 = (char *)v172;
    int64_t v86 = v173 - (unsigned char *)v172;
    uint64_t v87 = (v173 - (unsigned char *)v172) >> 3;
    unint64_t v88 = v87 + 1;
    if ((unint64_t)(v87 + 1) >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v89 = v76;
    unint64_t v90 = v75;
    uint64_t v91 = v174 - (unsigned char *)v172;
    if ((v174 - (unsigned char *)v172) >> 2 > v88) {
      unint64_t v88 = v91 >> 2;
    }
    if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v92 = v88;
    }
    if (v92)
    {
      if (v92 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v93 = (char *)operator new(8 * v92);
      long long v94 = &v93[8 * v87];
      *(void *)long long v94 = v82;
      uint64_t v95 = (uint64_t)(v94 + 8);
      if (v83 != v85)
      {
LABEL_121:
        unint64_t v96 = v83 - 8 - v85;
        if (v96 >= 0x58)
        {
          unint64_t v97 = v83 - &v93[v86];
          this = v162;
          if (v97 >= 0x20)
          {
            uint64_t v98 = (v96 >> 3) + 1;
            uint64_t v99 = 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v100 = &v83[-v99];
            v94 -= v99;
            unsigned int v101 = &v93[8 * v87 - 16];
            uint64_t v102 = v83 - 16;
            uint64_t v103 = v98 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v104 = *(_OWORD *)v102;
              *((_OWORD *)v101 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = *((_OWORD *)v102 - 1);
              *(_OWORD *)unsigned int v101 = v104;
              v101 -= 32;
              v102 -= 32;
              v103 -= 4;
            }
            while (v103);
            uint64_t v83 = v100;
            if (v98 == (v98 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_132:
              v172 = v94;
              v173 = (char *)v95;
              v174 = &v93[8 * v92];
              if (v85) {
                operator delete(v85);
              }
              unint64_t v75 = v90;
              unint64_t v76 = v89;
              uint64_t v8 = (uint64_t)v161;
              v173 = (char *)v95;
              uint64_t v84 = (std::__shared_weak_count *)v167.__r_.__value_.__l.__size_;
              if (!v167.__r_.__value_.__l.__size_) {
                goto LABEL_101;
              }
LABEL_135:
              if (!atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                std::__shared_weak_count::__release_weak(v84);
              }
              goto LABEL_101;
            }
          }
        }
        else
        {
          this = v162;
        }
        do
        {
          uint64_t v105 = *((void *)v83 - 1);
          v83 -= 8;
          *((void *)v94 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v105;
          v94 -= 8;
        }
        while (v83 != v85);
        goto LABEL_132;
      }
    }
    else
    {
      uint64_t v93 = 0;
      long long v94 = (char *)(8 * v87);
      *(void *)(8 * v87) = v82;
      uint64_t v95 = 8 * v87 + 8;
      if (v83 != v85) {
        goto LABEL_121;
      }
    }
    this = v162;
    goto LABEL_132;
  }
LABEL_137:
  std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
  std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
  std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
  uint64_t v106 = (*(uint64_t (**)(const E5RT::E5Function *))(*(void *)v155 + 32))(v155);
  unint64_t v107 = *(uint64_t **)v106;
  v160 = *(uint64_t **)(v106 + 8);
  if (*(uint64_t **)v106 != v160)
  {
    int v108 = 0;
    do
    {
      uint64_t v110 = *v107;
      unint64_t v109 = (std::__shared_weak_count *)v107[1];
      uint64_t v164 = *v107;
      v165 = v109;
      if (v109) {
        atomic_fetch_add_explicit(&v109->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v111 = *(char *)(v8 + 23);
      if (v111 >= 0) {
        size_t v112 = *(unsigned __int8 *)(v8 + 23);
      }
      else {
        size_t v112 = *(void *)(v8 + 8);
      }
      unint64_t v113 = v112 + 8;
      if (v112 + 8 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v113 >= 0x17)
      {
        uint64_t v115 = (v113 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v113 | 7) != 0x17) {
          uint64_t v115 = v113 | 7;
        }
        uint64_t v116 = v115 + 1;
        p_dst = (std::string *)operator new(v115 + 1);
        __dst.__r_.__value_.__l.__size_ = v112 + 8;
        __dst.__r_.__value_.__r.__words[2] = v116 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        p_dst = &__dst;
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v112 + 8;
        if (!v112)
        {
          uint64_t v8 = (uint64_t)v161;
          goto LABEL_156;
        }
      }
      uint64_t v8 = (uint64_t)v161;
      if (v111 >= 0) {
        int v117 = v161;
      }
      else {
        int v117 = *(char **)v161;
      }
      memmove(p_dst, v117, v112);
LABEL_156:
      strcpy((char *)p_dst + v112, "__block_");
      std::to_string(&v163, v108);
      if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v118 = &v163;
      }
      else {
        uint64_t v118 = (std::string *)v163.__r_.__value_.__r.__words[0];
      }
      if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v119 = HIBYTE(v163.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v119 = v163.__r_.__value_.__l.__size_;
      }
      uint64_t v120 = std::string::append(&__dst, (const std::string::value_type *)v118, v119);
      long long v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
      v166.__r_.__value_.__r.__words[2] = v120->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v121;
      v120->__r_.__value_.__l.__size_ = 0;
      v120->__r_.__value_.__r.__words[2] = 0;
      v120->__r_.__value_.__r.__words[0] = 0;
      int v122 = E5RT::E5Serializer::SerializeBlock((uint64_t)this, v110, (uint64_t)&v166, v8);
      if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v166.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v163.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_164:
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_165;
          }
          goto LABEL_169;
        }
      }
      else if ((SHIBYTE(v163.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_164;
      }
      operator delete(v163.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_165:
        uint64_t v124 = v170;
        uint64_t v123 = v171;
        if (v170 >= v171) {
          goto LABEL_170;
        }
        goto LABEL_166;
      }
LABEL_169:
      operator delete(__dst.__r_.__value_.__l.__data_);
      uint64_t v124 = v170;
      uint64_t v123 = v171;
      if (v170 >= v171)
      {
LABEL_170:
        v126 = (char *)v169;
        int64_t v127 = v124 - (unsigned char *)v169;
        uint64_t v128 = (v124 - (unsigned char *)v169) >> 2;
        unint64_t v129 = v128 + 1;
        if ((unint64_t)(v128 + 1) >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v130 = v123 - (unsigned char *)v169;
        if (v130 >> 1 > v129) {
          unint64_t v129 = v130 >> 1;
        }
        if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v131 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v131 = v129;
        }
        if (v131)
        {
          if (v131 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          BOOL v132 = operator new(4 * v131);
          v133 = &v132[4 * v128];
          _DWORD *v133 = v122;
          uint64_t v125 = (uint64_t)(v133 + 1);
          if (v124 != v126)
          {
LABEL_179:
            unint64_t v134 = v124 - 4 - v126;
            if (v134 < 0x2C)
            {
              uint64_t v8 = (uint64_t)v161;
              goto LABEL_187;
            }
            unint64_t v135 = v124 - &v132[v127];
            uint64_t v8 = (uint64_t)v161;
            if (v135 < 0x20) {
              goto LABEL_236;
            }
            uint64_t v136 = (v134 >> 2) + 1;
            uint64_t v137 = 4 * (v136 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v138 = &v124[-v137];
            v133 = (_DWORD *)((char *)v133 - v137);
            v139 = &v132[4 * v128 - 16];
            char v140 = v124 - 16;
            uint64_t v141 = v136 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v142 = *(_OWORD *)v140;
              *(v139 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = *((_OWORD *)v140 - 1);
              _OWORD *v139 = v142;
              v139 -= 2;
              v140 -= 32;
              v141 -= 8;
            }
            while (v141);
            uint64_t v124 = v138;
            if (v136 != (v136 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_236:
              do
              {
LABEL_187:
                int v143 = *((_DWORD *)v124 - 1);
                v124 -= 4;
                *--v133 = v143;
              }
              while (v124 != v126);
            }
LABEL_188:
            v169 = v133;
            v170 = (char *)v125;
            v171 = &v132[4 * v131];
            if (v126) {
              operator delete(v126);
            }
            goto LABEL_190;
          }
        }
        else
        {
          BOOL v132 = 0;
          v133 = (_DWORD *)(4 * v128);
          *(_DWORD *)(4 * v128) = v122;
          uint64_t v125 = 4 * v128 + 4;
          if (v124 != v126) {
            goto LABEL_179;
          }
        }
        uint64_t v8 = (uint64_t)v161;
        goto LABEL_188;
      }
LABEL_166:
      *(_DWORD *)uint64_t v124 = v122;
      uint64_t v125 = (uint64_t)(v124 + 4);
LABEL_190:
      v170 = (char *)v125;
      if (v109 && !atomic_fetch_add(&v109->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
      ++v108;
      v107 += 2;
      this = v162;
    }
    while (v107 != v160);
  }
  v144 = (std::string *)operator new(0x30uLL);
  v144->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE39AD88;
  v144->__r_.__value_.__l.__size_ = (std::string::size_type)&v178;
  v144->__r_.__value_.__r.__words[2] = (std::string::size_type)&v175;
  v144[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v172;
  v144[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v169;
  v144[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v155;
  v184 = v144;
  if (v156) {
    uint64_t v145 = 9;
  }
  else {
    uint64_t v145 = 17;
  }
  uint64_t v11 = (*(uint64_t (**)(void, uint64_t, std::string *, void, uint64_t))(**((void **)this + 1) + 40))(*((void *)this + 1), v8, &__p, 0, v145);
  uint64_t v146 = *((void *)this + 1);
  uint64_t v147 = (uint64_t)v184;
  if (!v184) {
    goto LABEL_199;
  }
  if (v184 != &__dst)
  {
    uint64_t v147 = (*(uint64_t (**)(void))(v184->__r_.__value_.__r.__words[0] + 16))();
LABEL_199:
    v182 = (void *)v147;
    goto LABEL_202;
  }
  v182 = v181;
  (*(void (**)(std::string *, void *))(__dst.__r_.__value_.__r.__words[0] + 24))(&__dst, v181);
LABEL_202:
  (*(void (**)(uint64_t, char *, std::string *, void *))(*(void *)v146 + 56))(v146, v161, &__p, v181);
  if (v182 == v181)
  {
    (*(void (**)(void *))(v181[0] + 32))(v181);
    uint64_t v148 = v161;
    if ((v161[23] & 0x80000000) == 0)
    {
LABEL_206:
      long long v149 = *(_OWORD *)v148;
      v166.__r_.__value_.__r.__words[2] = *((void *)v148 + 2);
      *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v149;
      goto LABEL_209;
    }
  }
  else
  {
    uint64_t v148 = v161;
    if (v182) {
      (*(void (**)(void))(*v182 + 40))();
    }
    if ((v161[23] & 0x80000000) == 0) {
      goto LABEL_206;
    }
  }
  std::string::__init_copy_ctor_external(&v166, *(const std::string::value_type **)v148, *((void *)v148 + 1));
LABEL_209:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v167, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v167 = __p;
  }
  std::__hash_table<std::pair<std::string,std::string>,E5RT::SerializerUtils::StringPairHash,std::equal_to<std::pair<std::string,std::string>>,std::allocator<std::pair<std::string,std::string>>>::__emplace_unique_key_args<std::pair<std::string,std::string>,std::pair<std::string,std::string>>((uint64_t)v154, (unsigned __int8 *)&v166, (uint64_t)&v166);
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v167.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v166.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_214:
      v150 = v184;
      if (v184 != &__dst) {
        goto LABEL_215;
      }
LABEL_219:
      (*(void (**)(std::string *))(__dst.__r_.__value_.__r.__words[0] + 32))(&__dst);
      goto LABEL_10;
    }
  }
  else if ((SHIBYTE(v166.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_214;
  }
  operator delete(v166.__r_.__value_.__l.__data_);
  v150 = v184;
  if (v184 == &__dst) {
    goto LABEL_219;
  }
LABEL_215:
  if (v150) {
    (*(void (**)(std::string *))(v150->__r_.__value_.__r.__words[0] + 40))(v150);
  }
LABEL_10:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v169)
  {
    v170 = (char *)v169;
    operator delete(v169);
  }
  if (v172)
  {
    v173 = (char *)v172;
    operator delete(v172);
  }
  if (v175)
  {
    v176 = v175;
    operator delete(v175);
  }
  if (v178)
  {
    v179 = v178;
    operator delete(v178);
  }
  return v11;
}

void sub_192444758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  std::function<unsigned long long ()(flatbuffers::FlatBufferBuilder &)>::~function((void *)(v46 - 128));
  if (a41 < 0)
  {
    operator delete(a36);
    int64_t v48 = a42;
    if (!a42) {
      goto LABEL_10;
    }
  }
  else
  {
    int64_t v48 = a42;
    if (!a42)
    {
LABEL_10:
      uint64_t v49 = a45;
      if (!a45)
      {
LABEL_11:
        std::string::size_type v50 = *(void **)(v46 - 208);
        if (!v50)
        {
LABEL_12:
          unsigned int v51 = *(void **)(v46 - 184);
          if (!v51) {
LABEL_13:
          }
            _Unwind_Resume(a1);
LABEL_7:
          *(void *)(v46 - 176) = v51;
          operator delete(v51);
          _Unwind_Resume(a1);
        }
LABEL_6:
        *(void *)(v46 - 200) = v50;
        operator delete(v50);
        unsigned int v51 = *(void **)(v46 - 184);
        if (!v51) {
          goto LABEL_13;
        }
        goto LABEL_7;
      }
LABEL_5:
      operator delete(v49);
      std::string::size_type v50 = *(void **)(v46 - 208);
      if (!v50) {
        goto LABEL_12;
      }
      goto LABEL_6;
    }
  }
  operator delete(v48);
  uint64_t v49 = a45;
  if (!a45) {
    goto LABEL_11;
  }
  goto LABEL_5;
}

void sub_19244496C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    JUMPOUT(0x19244479CLL);
  }
  JUMPOUT(0x19244493CLL);
}

void E5RT::E5Serializer::SerializeBuildInfo(E5RT::E5Serializer *this, const E5RT::E5BuildInfo *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  v11[31] = 14;
  strcpy(&v11[7], "\n__build_info__");
  strcpy((char *)v10, "build_info");
  uint64_t v4 = (char *)this + 56;
  if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((void *)this + 7, (uint64_t)&v11[8]))
  {
    (*(void (**)(void, unsigned char *, uint64_t, void, uint64_t))(**((void **)this + 1) + 32))(*((void *)this + 1), &v11[8], 6, 0, 1);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v4, (uint64_t)&v11[8], (uint64_t)&v11[8]);
  }
  v14[0] = &unk_1EE39AE08;
  v14[1] = a2;
  unint64_t v15 = v14;
  (*(void (**)(void, void **, unsigned char *, uint64_t, uint64_t))(**((void **)this + 1) + 40))(*((void *)this + 1), v10, &v11[8], 4, 17);
  uint64_t v5 = *((void *)this + 1);
  uint64_t v6 = (uint64_t)v15;
  if (!v15) {
    goto LABEL_6;
  }
  if (v15 != v14)
  {
    uint64_t v6 = (*(uint64_t (**)(void *))(*v15 + 16))(v15);
LABEL_6:
    uint64_t v13 = (void *)v6;
    goto LABEL_8;
  }
  uint64_t v13 = v12;
  (*(void (**)(void *, void *))(v14[0] + 24))(v14, v12);
LABEL_8:
  (*(void (**)(uint64_t, void **, unsigned char *, void *))(*(void *)v5 + 56))(v5, v10, &v11[8], v12);
  if (v13 == v12)
  {
    (*(void (**)(void *))(v12[0] + 32))(v12);
    if ((v11[7] & 0x80000000) == 0)
    {
LABEL_12:
      *(_OWORD *)&v8.__r_.__value_.__l.__data_ = *(_OWORD *)v10;
      v8.__r_.__value_.__r.__words[2] = *(void *)v11;
      goto LABEL_15;
    }
  }
  else
  {
    if (v13) {
      (*(void (**)(void))(*v13 + 40))();
    }
    if ((v11[7] & 0x80000000) == 0) {
      goto LABEL_12;
    }
  }
  std::string::__init_copy_ctor_external(&v8, (const std::string::value_type *)v10[0], (std::string::size_type)v10[1]);
LABEL_15:
  if ((v11[31] & 0x80000000) != 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)&v11[8], *(std::string::size_type *)&v11[16]);
  }
  else {
    std::string __p = *(std::string *)&v11[8];
  }
  std::__hash_table<std::pair<std::string,std::string>,E5RT::SerializerUtils::StringPairHash,std::equal_to<std::pair<std::string,std::string>>,std::allocator<std::pair<std::string,std::string>>>::__emplace_unique_key_args<std::pair<std::string,std::string>,std::pair<std::string,std::string>>((uint64_t)this + 16, (unsigned __int8 *)&v8, (uint64_t)&v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_20:
      uint64_t v7 = v15;
      if (v15 != v14) {
        goto LABEL_21;
      }
LABEL_28:
      (*(void (**)(void *))(v14[0] + 32))(v14);
      if ((v11[7] & 0x80000000) == 0) {
        goto LABEL_24;
      }
      goto LABEL_29;
    }
  }
  else if ((SHIBYTE(v8.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_20;
  }
  operator delete(v8.__r_.__value_.__l.__data_);
  uint64_t v7 = v15;
  if (v15 == v14) {
    goto LABEL_28;
  }
LABEL_21:
  if (v7) {
    (*(void (**)(void *))(*v7 + 40))(v7);
  }
  if ((v11[7] & 0x80000000) == 0)
  {
LABEL_24:
    if ((v11[31] & 0x80000000) == 0) {
      return;
    }
LABEL_30:
    operator delete(*(void **)&v11[8]);
    return;
  }
LABEL_29:
  operator delete(v10[0]);
  if ((v11[31] & 0x80000000) != 0) {
    goto LABEL_30;
  }
}

void sub_192444D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::function<unsigned long long ()(flatbuffers::FlatBufferBuilder &)>::~function((void *)(v31 - 72));
  if (a24 < 0)
  {
    operator delete(a19);
    if ((a30 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else if ((a30 & 0x80000000) == 0)
  {
LABEL_5:
    _Unwind_Resume(a1);
  }
  operator delete(a25);
  _Unwind_Resume(a1);
}

uint64_t E5RT::E5Serializer::SerializeToFile(E5RT::E5Serializer *a1, uint64_t a2)
{
  E5RT::E5Serializer::ResolveOperandPermissions(a1);
  uint64_t v4 = (uint64_t *)(*(uint64_t (**)(void))(**(void **)a1 + 16))();
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (*v4 != v6)
  {
    do
    {
      uint64_t v7 = *(const E5RT::E5Function **)v5;
      uint64_t v16 = *(E5RT::E5BuildInfo **)v5;
      std::string v8 = *(std::__shared_weak_count **)(v5 + 8);
      std::string v17 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      E5RT::E5Serializer::SerializeFunction(a1, v7, 1);
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      v5 += 16;
    }
    while (v5 != v6);
  }
  long long v9 = (uint64_t *)(*(uint64_t (**)(void))(**(void **)a1 + 24))();
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  if (*v9 != v11)
  {
    do
    {
      uint64_t v12 = *(const E5RT::E5Function **)v10;
      uint64_t v16 = *(E5RT::E5BuildInfo **)v10;
      uint64_t v13 = *(std::__shared_weak_count **)(v10 + 8);
      std::string v17 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      E5RT::E5Serializer::SerializeFunction(a1, v12, 0);
      if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      v10 += 16;
    }
    while (v10 != v11);
  }
  (*(void (**)(E5RT::E5BuildInfo **__return_ptr))(**(void **)a1 + 48))(&v16);
  if (v16) {
    E5RT::E5Serializer::SerializeBuildInfo(a1, v16);
  }
  unint64_t v14 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  return (*(uint64_t (**)(void *, uint64_t))(**((void **)a1 + 1) + 16))(*((void **)a1 + 1), a2);
}

void sub_192445028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19244503C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_192445050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void E5RT::E5Serializer::ResolveOperandPermissions<E5RT::E5Function>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
  uint64_t v6 = v3[1] - *v3;
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = v6 / 24;
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 3))
    {
      uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v3 + 8, *v3 + v7);
      if (*((char *)v10 + 39) < 0) {
        std::string::__init_copy_ctor_external(&v26, (const std::string::value_type *)v10[2], v10[3]);
      }
      else {
        std::string v26 = *(std::string *)(v10 + 2);
      }
      uint64_t v27 = 0;
      uint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,E5RT::Permissions>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,E5RT::Permissions>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,E5RT::Permissions>>(a1 + 96, (uint64_t)&v26, (uint64_t)&v26);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      v11[5] |= 1uLL;
      ++v8;
      v7 += 24;
      if (v9 == v8) {
        goto LABEL_10;
      }
    }
LABEL_29:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "iterator out of range");
    __cxa_throw(exception, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
  }
LABEL_10:
  uint64_t v12 = v4[1] - *v4;
  if (v12)
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    uint64_t v15 = v12 / 24;
    while (v14 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[1] - *v4) >> 3))
    {
      uint64_t v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v4 + 8, *v4 + v13);
      if (*((char *)v16 + 39) < 0) {
        std::string::__init_copy_ctor_external(&v26, (const std::string::value_type *)v16[2], v16[3]);
      }
      else {
        std::string v26 = *(std::string *)(v16 + 2);
      }
      uint64_t v27 = 0;
      std::string v17 = std::__hash_table<std::__hash_value_type<std::string,E5RT::Permissions>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,E5RT::Permissions>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,E5RT::Permissions>>(a1 + 96, (uint64_t)&v26, (uint64_t)&v26);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      v17[5] |= 2uLL;
      ++v14;
      v13 += 24;
      if (v15 == v14) {
        goto LABEL_19;
      }
    }
    goto LABEL_29;
  }
LABEL_19:
  uint64_t v18 = v5[1] - *v5;
  if (v18)
  {
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    uint64_t v21 = v18 / 24;
    while (v20 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[1] - *v5) >> 3))
    {
      uint64_t v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v5 + 8, *v5 + v19);
      if (*((char *)v22 + 39) < 0) {
        std::string::__init_copy_ctor_external(&v26, (const std::string::value_type *)v22[2], v22[3]);
      }
      else {
        std::string v26 = *(std::string *)(v22 + 2);
      }
      uint64_t v27 = 0;
      unsigned int v23 = std::__hash_table<std::__hash_value_type<std::string,E5RT::Permissions>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,E5RT::Permissions>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,E5RT::Permissions>>(a1 + 96, (uint64_t)&v26, (uint64_t)&v26);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      v23[5] |= 2uLL;
      ++v20;
      v19 += 24;
      if (v21 == v20) {
        return;
      }
    }
    goto LABEL_29;
  }
}

void sub_192445438(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19244544C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192445460(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192445474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void E5RT::E5Serializer::ResolveOperandPermissions<E5RT::E5Block>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  uint64_t v6 = v3[1] - *v3;
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = v6 / 24;
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 3))
    {
      uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v3 + 8, *v3 + v7);
      if (*((char *)v10 + 39) < 0) {
        std::string::__init_copy_ctor_external(&v26, (const std::string::value_type *)v10[2], v10[3]);
      }
      else {
        std::string v26 = *(std::string *)(v10 + 2);
      }
      uint64_t v27 = 0;
      uint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,E5RT::Permissions>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,E5RT::Permissions>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,E5RT::Permissions>>(a1 + 96, (uint64_t)&v26, (uint64_t)&v26);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      v11[5] |= 1uLL;
      ++v8;
      v7 += 24;
      if (v9 == v8) {
        goto LABEL_10;
      }
    }
LABEL_29:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "iterator out of range");
    __cxa_throw(exception, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
  }
LABEL_10:
  uint64_t v12 = v4[1] - *v4;
  if (v12)
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    uint64_t v15 = v12 / 24;
    while (v14 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[1] - *v4) >> 3))
    {
      uint64_t v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v4 + 8, *v4 + v13);
      if (*((char *)v16 + 39) < 0) {
        std::string::__init_copy_ctor_external(&v26, (const std::string::value_type *)v16[2], v16[3]);
      }
      else {
        std::string v26 = *(std::string *)(v16 + 2);
      }
      uint64_t v27 = 0;
      std::string v17 = std::__hash_table<std::__hash_value_type<std::string,E5RT::Permissions>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,E5RT::Permissions>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,E5RT::Permissions>>(a1 + 96, (uint64_t)&v26, (uint64_t)&v26);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      v17[5] |= 2uLL;
      ++v14;
      v13 += 24;
      if (v15 == v14) {
        goto LABEL_19;
      }
    }
    goto LABEL_29;
  }
LABEL_19:
  uint64_t v18 = v5[1] - *v5;
  if (v18)
  {
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    uint64_t v21 = v18 / 24;
    while (v20 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[1] - *v5) >> 3))
    {
      uint64_t v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v5 + 8, *v5 + v19);
      if (*((char *)v22 + 39) < 0) {
        std::string::__init_copy_ctor_external(&v26, (const std::string::value_type *)v22[2], v22[3]);
      }
      else {
        std::string v26 = *(std::string *)(v22 + 2);
      }
      uint64_t v27 = 0;
      unsigned int v23 = std::__hash_table<std::__hash_value_type<std::string,E5RT::Permissions>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,E5RT::Permissions>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,E5RT::Permissions>>(a1 + 96, (uint64_t)&v26, (uint64_t)&v26);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      v23[5] |= 2uLL;
      ++v20;
      v19 += 24;
      if (v21 == v20) {
        return;
      }
    }
    goto LABEL_29;
  }
}

void sub_19244586C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192445880(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192445894(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1924458A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void E5RT::E5Serializer::ResolveOperandPermissions<E5RT::E5Operation>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
  uint64_t v6 = v3[1] - *v3;
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = v6 / 24;
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 3))
    {
      uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v3 + 8, *v3 + v7);
      if (*((char *)v10 + 39) < 0) {
        std::string::__init_copy_ctor_external(&v26, (const std::string::value_type *)v10[2], v10[3]);
      }
      else {
        std::string v26 = *(std::string *)(v10 + 2);
      }
      uint64_t v27 = 0;
      uint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,E5RT::Permissions>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,E5RT::Permissions>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,E5RT::Permissions>>(a1 + 96, (uint64_t)&v26, (uint64_t)&v26);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      v11[5] |= 1uLL;
      ++v8;
      v7 += 24;
      if (v9 == v8) {
        goto LABEL_10;
      }
    }
LABEL_29:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "iterator out of range");
    __cxa_throw(exception, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
  }
LABEL_10:
  uint64_t v12 = v4[1] - *v4;
  if (v12)
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    uint64_t v15 = v12 / 24;
    while (v14 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[1] - *v4) >> 3))
    {
      uint64_t v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v4 + 8, *v4 + v13);
      if (*((char *)v16 + 39) < 0) {
        std::string::__init_copy_ctor_external(&v26, (const std::string::value_type *)v16[2], v16[3]);
      }
      else {
        std::string v26 = *(std::string *)(v16 + 2);
      }
      uint64_t v27 = 0;
      std::string v17 = std::__hash_table<std::__hash_value_type<std::string,E5RT::Permissions>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,E5RT::Permissions>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,E5RT::Permissions>>(a1 + 96, (uint64_t)&v26, (uint64_t)&v26);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      v17[5] |= 2uLL;
      ++v14;
      v13 += 24;
      if (v15 == v14) {
        goto LABEL_19;
      }
    }
    goto LABEL_29;
  }
LABEL_19:
  uint64_t v18 = v5[1] - *v5;
  if (v18)
  {
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    uint64_t v21 = v18 / 24;
    while (v20 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[1] - *v5) >> 3))
    {
      uint64_t v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v5 + 8, *v5 + v19);
      if (*((char *)v22 + 39) < 0) {
        std::string::__init_copy_ctor_external(&v26, (const std::string::value_type *)v22[2], v22[3]);
      }
      else {
        std::string v26 = *(std::string *)(v22 + 2);
      }
      uint64_t v27 = 0;
      unsigned int v23 = std::__hash_table<std::__hash_value_type<std::string,E5RT::Permissions>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,E5RT::Permissions>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,E5RT::Permissions>>(a1 + 96, (uint64_t)&v26, (uint64_t)&v26);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      v23[5] |= 2uLL;
      ++v20;
      v19 += 24;
      if (v21 == v20) {
        return;
      }
    }
    goto LABEL_29;
  }
}

void sub_192445CA0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192445CB4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192445CC8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192445CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,E5RT::Permissions>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,E5RT::Permissions>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,E5RT::Permissions>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      unint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          uint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            unint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          unint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  uint64_t v25 = operator new(0x30uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *uint64_t v25 = 0;
  v25[1] = v10;
  std::string v26 = (std::string *)(v25 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v25[4] = *(void *)(a3 + 16);
  }
  v25[5] = *(void *)(a3 + 24);
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        unint64_t v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        uint64_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        unint64_t v29 = *(void **)(*(void *)a1 + 8 * v10);
        uint64_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      unint64_t v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      uint64_t v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *uint64_t v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  unint64_t v29 = *(void **)(*(void *)a1 + 8 * v3);
  uint64_t v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  *uint64_t v30 = *v29;
  *unint64_t v29 = v42[0];
LABEL_92:
  unint64_t v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_192446148(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19244615C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_192446178()
{
}

void *sub_19244618C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE39A508;
  result[1] = v3;
  return result;
}

uint64_t sub_1924461D4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE39A508;
  a2[1] = v2;
  return result;
}

uint64_t sub_192446200(uint64_t a1, flatbuffers::FlatBufferBuilder *this)
{
  if (*((unsigned char *)this + 78)) {
    sub_19244C6B0();
  }
  if (*((_DWORD *)this + 18)) {
    sub_19244C684();
  }
  uint64_t v3 = *(int **)(a1 + 8);
  int v4 = *((_DWORD *)this + 10);
  *((unsigned char *)this + 78) = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 4, *v3, 0);
  int v5 = flatbuffers::FlatBufferBuilder::EndTable(this, v4);
  flatbuffers::FlatBufferBuilder::Finish(this, v5, 0, 1);
  return (*((_DWORD *)this + 10) - v4);
}

uint64_t sub_192446284(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer20SerializeAliasSymbolERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allo"
                     "catorIcEEEEjS9_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer20SerializeAliasSymbolERKNSt3__112basic_stringIcNS1_11char_traitsIc"
                                "EENS1_9allocatorIcEEEEjS9_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer20SerializeAliasSymbolERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEjS9_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer20SerializeAliasSymbolERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEjS9_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1924462F4()
{
  return &unk_1EE39A568;
}

uint64_t flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(uint64_t this, uint64_t a2, int a3, int a4)
{
  uint64_t v6 = this;
  if (a3 != a4 || *(unsigned char *)(this + 88))
  {
    this = flatbuffers::FlatBufferBuilder::Align(this, 4uLL);
    unint64_t v7 = *(void *)(v6 + 56);
    unint64_t v8 = *(void *)(v6 + 64);
    BOOL v9 = v7 >= v8;
    unint64_t v10 = v7 - v8;
    if (!v9 || v8 < *(void *)(v6 + 48)) {
      sub_19244C6DC();
    }
    if (v10 <= 3) {
      this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v6, 4uLL);
    }
    unsigned int v11 = *(_DWORD *)(v6 + 40);
    if (v11 >= 0x7FFFFFFF) {
      sub_19244C708();
    }
    *(_DWORD *)(v6 + 40) = v11 + 4;
    unint64_t v12 = *(void *)(v6 + 56);
    unint64_t v13 = *(void *)(v6 + 64);
    *(_DWORD *)(v12 - 4) = a3;
    v12 -= 4;
    *(void *)(v6 + 56) = v12;
    BOOL v9 = v12 >= v13;
    unint64_t v14 = v12 - v13;
    if (!v9 || v13 < *(void *)(v6 + 48)) {
      sub_19244C6DC();
    }
    uint64_t v15 = *(unsigned int *)(v6 + 40);
    unsigned int v16 = *(_DWORD *)(v6 + 40);
    if (v14 <= 7)
    {
      this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v6, 8uLL);
      unsigned int v16 = *(_DWORD *)(v6 + 40);
    }
    if (v16 >= 0x7FFFFFFF) {
      sub_19244C708();
    }
    **(void **)(v6 + 64) = v15 | (a2 << 32);
    *(void *)(v6 + 64) += 8;
    ++*(_DWORD *)(v6 + 72);
    if (*(unsigned __int16 *)(v6 + 76) < a2) {
      *(_WORD *)(v6 + 76) = a2;
    }
  }
  return this;
}

uint64_t flatbuffers::vector_downward::reallocate(flatbuffers::vector_downward *this, unint64_t a2)
{
  unint64_t v3 = *((void *)this + 4);
  uint64_t v4 = *((unsigned int *)this + 10);
  uint64_t v5 = *((void *)this + 6);
  if (v3) {
    unint64_t v6 = v3 >> 1;
  }
  else {
    unint64_t v6 = *((void *)this + 2);
  }
  uint64_t v7 = *((void *)this + 8) - v5;
  if (v6 <= a2) {
    unint64_t v8 = a2;
  }
  else {
    unint64_t v8 = v6;
  }
  unint64_t v9 = (*((void *)this + 3) + v3 + v8 - 1) & -*((void *)this + 3);
  *((void *)this + 4) = v9;
  uint64_t v10 = *(void *)this;
  if (v5)
  {
    if (!v10)
    {
      unint64_t v13 = &unk_1EE323EA8;
      if (v9 > v3) {
        operator new[]();
      }
      sub_19244C734();
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, void))(*(void *)v10 + 32))(v10, v5, v3, v9, v4, v7);
  }
  else
  {
    if (!v10)
    {
      unint64_t v13 = &unk_1EE323EA8;
      operator new[]();
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v9);
  }
  uint64_t v12 = result + *((void *)this + 4) - v4;
  *((void *)this + 6) = result;
  *((void *)this + 7) = v12;
  *((void *)this + 8) = result + v7;
  return result;
}

char *flatbuffers::Allocator::reallocate_downward(flatbuffers::Allocator *this, unsigned __int8 *a2, unint64_t a3, unint64_t a4, size_t a5, size_t a6)
{
  if (a4 <= a3) {
    sub_19244C734();
  }
  uint64_t v12 = (char *)(*(uint64_t (**)(flatbuffers::Allocator *, unint64_t))(*(void *)this + 16))(this, a4);
  memcpy(&v12[a4 - a5], &a2[a3 - a5], a5);
  memcpy(v12, a2, a6);
  (*(void (**)(flatbuffers::Allocator *, unsigned __int8 *, unint64_t))(*(void *)this + 24))(this, a2, a3);
  return v12;
}

void flatbuffers::DefaultAllocator::~DefaultAllocator(flatbuffers::DefaultAllocator *this)
{
}

void flatbuffers::DefaultAllocator::allocate(flatbuffers::DefaultAllocator *this)
{
}

void flatbuffers::DefaultAllocator::deallocate(flatbuffers::DefaultAllocator *this, unsigned __int8 *a2)
{
  if (a2) {
    JUMPOUT(0x192FF1690);
  }
}

uint64_t flatbuffers::FlatBufferBuilder::Align(uint64_t this, unint64_t a2)
{
  uint64_t v2 = this;
  if (*(void *)(this + 80) < a2) {
    *(void *)(this + 80) = a2;
  }
  uint64_t v3 = *(unsigned int *)(this + 40);
  unint64_t v4 = (a2 - 1) & -v3;
  if (v4)
  {
    unint64_t v5 = *(void *)(this + 56);
    unint64_t v6 = *(void *)(this + 64);
    BOOL v7 = v5 >= v6;
    unint64_t v8 = v5 - v6;
    if (!v7 || v6 < *(void *)(this + 48)) {
      sub_19244C6DC();
    }
    if (v8 < v4)
    {
      this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)this, (a2 - 1) & -v3);
      LODWORD(v3) = *(_DWORD *)(v2 + 40);
    }
    if (v3 >= 0x7FFFFFFF) {
      sub_19244C708();
    }
    uint64_t v9 = 0;
    *(void *)(v2 + 56) -= v4;
    *(_DWORD *)(v2 + 40) = v3 + v4;
    do
      *(unsigned char *)(*(void *)(v2 + 56) + v9++) = 0;
    while (v4 != v9);
  }
  return this;
}

uint64_t flatbuffers::FlatBufferBuilder::PreAlign(uint64_t this, uint64_t a2, unint64_t a3)
{
  if (a2)
  {
    uint64_t v3 = this;
    if (*(void *)(this + 80) < a3) {
      *(void *)(this + 80) = a3;
    }
    uint64_t v4 = *(unsigned int *)(this + 40);
    unint64_t v5 = (a3 - 1) & (-a2 - v4);
    if (v5)
    {
      unint64_t v6 = *(void *)(this + 56);
      unint64_t v7 = *(void *)(this + 64);
      BOOL v8 = v6 >= v7;
      unint64_t v9 = v6 - v7;
      if (!v8 || v7 < *(void *)(this + 48)) {
        sub_19244C6DC();
      }
      if (v9 < v5)
      {
        this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)this, (a3 - 1) & (-a2 - v4));
        LODWORD(v4) = *(_DWORD *)(v3 + 40);
      }
      if (v4 >= 0x7FFFFFFF) {
        sub_19244C708();
      }
      uint64_t v10 = 0;
      *(void *)(v3 + 56) -= v5;
      *(_DWORD *)(v3 + 40) = v4 + v5;
      do
        *(unsigned char *)(*(void *)(v3 + 56) + v10++) = 0;
      while (v5 != v10);
    }
  }
  return this;
}

uint64_t flatbuffers::FlatBufferBuilder::EndTable(flatbuffers::FlatBufferBuilder *this, int a2)
{
  if (!*((unsigned char *)this + 78)) {
    sub_19244C7B8();
  }
  flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
  unint64_t v4 = *((void *)this + 7);
  unint64_t v5 = *((void *)this + 8);
  BOOL v6 = v4 >= v5;
  unint64_t v7 = v4 - v5;
  if (!v6 || v5 < *((void *)this + 6)) {
    sub_19244C6DC();
  }
  if (v7 <= 3) {
    flatbuffers::vector_downward::reallocate(this, 4uLL);
  }
  unsigned int v8 = *((_DWORD *)this + 10);
  if (v8 >= 0x7FFFFFFF) {
    sub_19244C708();
  }
  *((_DWORD *)this + 10) = v8 + 4;
  uint64_t v10 = *((void *)this + 7);
  unint64_t v9 = *((void *)this + 8);
  *(_DWORD *)(v10 - 4) = 0;
  unint64_t v11 = v10 - 4;
  *((void *)this + 7) = v11;
  if ((unsigned __int16)(*((_WORD *)this + 38) + 2) <= 4u) {
    unint64_t v12 = 4;
  }
  else {
    unint64_t v12 = (unsigned __int16)(*((_WORD *)this + 38) + 2);
  }
  uint64_t v13 = *((unsigned int *)this + 10);
  *((_WORD *)this + 38) = v12;
  BOOL v6 = v11 >= v9;
  unint64_t v14 = v11 - v9;
  if (!v6 || v9 < *((void *)this + 6)) {
    sub_19244C6DC();
  }
  unsigned int v15 = v13;
  if (v14 < v12)
  {
    flatbuffers::vector_downward::reallocate(this, v12);
    unsigned int v15 = *((_DWORD *)this + 10);
  }
  if (v15 >= 0x7FFFFFFF) {
    sub_19244C708();
  }
  unsigned int v16 = (void *)(*((void *)this + 7) - v12);
  *((void *)this + 7) = v16;
  *((_DWORD *)this + 10) = v15 + v12;
  bzero(v16, v12);
  unsigned __int16 v17 = v13 - a2;
  if ((v13 - a2) >= 0x10000) {
    sub_19244C7E4();
  }
  uint64_t v18 = (unsigned __int16 *)*((void *)this + 7);
  if (!v18) {
    sub_19244C810();
  }
  v18[1] = v17;
  *uint64_t v18 = *((_WORD *)this + 38);
  unint64_t v19 = *((void *)this + 8);
  if (!v19) {
    sub_19244C83C();
  }
  uint64_t v20 = *((unsigned int *)this + 18);
  unint64_t v21 = v19 - 8 * v20;
  if (v20)
  {
    uint64_t v22 = (int *)(v19 - 8 * v20);
    do
    {
      uint64_t v23 = *((unsigned __int16 *)v22 + 2);
      if (*(unsigned __int16 *)((char *)v18 + v23)) {
        sub_19244C894();
      }
      int v24 = *v22;
      v22 += 2;
      *(unsigned __int16 *)((char *)v18 + v23) = v13 - v24;
    }
    while ((unint64_t)v22 < v19);
  }
  *((void *)this + 8) = v21;
  *((_DWORD *)this + 18) = 0;
  *((_WORD *)this + 38) = 0;
  unsigned int v25 = *((_DWORD *)this + 10);
  if (!*((unsigned char *)this + 89))
  {
LABEL_33:
    unsigned int v30 = v25;
    unint64_t v31 = (unint64_t)v18 - v21;
    if ((unint64_t)v18 < v21) {
      goto LABEL_46;
    }
    goto LABEL_37;
  }
  std::string v26 = (unsigned int *)*((void *)this + 6);
  if (!v26) {
    sub_19244C868();
  }
  if ((unint64_t)v26 >= v21)
  {
    unsigned int v30 = *((_DWORD *)this + 10);
    goto LABEL_36;
  }
  size_t v27 = *v18;
  float v28 = (char *)v26 + *((void *)this + 4);
  while (1)
  {
    uint64_t v29 = *v26;
    if (v27 == *(unsigned __int16 *)&v28[-v29] && !memcmp(&v28[-v29], v18, v27)) {
      break;
    }
    if ((unint64_t)++v26 >= v21) {
      goto LABEL_33;
    }
  }
  uint64_t v18 = (unsigned __int16 *)((char *)v18 + v25 - v13);
  *((void *)this + 7) = v18;
  *((_DWORD *)this + 10) = v13;
  unsigned int v25 = v29;
  unsigned int v30 = v13;
  if (v29 == v13)
  {
LABEL_36:
    unint64_t v31 = (unint64_t)v18 - v21;
    if ((unint64_t)v18 < v21) {
      goto LABEL_46;
    }
LABEL_37:
    if (v21 >= *((void *)this + 6))
    {
      unsigned int v32 = v30;
      if (v31 <= 3)
      {
        flatbuffers::vector_downward::reallocate(this, 4uLL);
        unsigned int v32 = *((_DWORD *)this + 10);
      }
      if (v32 >= 0x7FFFFFFF) {
        sub_19244C708();
      }
      unint64_t v33 = (unsigned int *)*((void *)this + 8);
      *unint64_t v33 = v30;
      *((void *)this + 8) = v33 + 1;
      goto LABEL_42;
    }
LABEL_46:
    sub_19244C6DC();
  }
LABEL_42:
  *(_DWORD *)(*((void *)this + 6) + *((void *)this + 4) - v13) = v25 - v13;
  *((unsigned char *)this + 78) = 0;
  return v13;
}

char *std::__hash_table<std::pair<std::string,std::string>,E5RT::SerializerUtils::StringPairHash,std::equal_to<std::pair<std::string,std::string>>,std::allocator<std::pair<std::string,std::string>>>::__emplace_unique_key_args<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = E5RT::SerializerUtils::StringPairHash::operator()(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = (char *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = *((void *)v13 + 1);
            if (v15 == v9)
            {
              if (std::equal_to<std::pair<std::string,std::string>>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)v13 + 16, a2))return v13; {
            }
              }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint64_t v13 = *(char **)v13;
            if (!v13) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v9)
          {
            if (std::equal_to<std::pair<std::string,std::string>>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)v13 + 16, a2))return v13; {
          }
            }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  unsigned int v16 = (void *)(a1 + 16);
  uint64_t v13 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v9;
  *((_OWORD *)v13 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = *(_OWORD *)a3;
  *((void *)v13 + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_OWORD *)(v13 + 40) = *(_OWORD *)(a3 + 24);
  *((void *)v13 + 7) = *(void *)(a3 + 40);
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (v10 && (float)(v18 * (float)v10) >= v17)
  {
    uint64_t v19 = *(void *)a1;
    uint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
    if (v20)
    {
LABEL_26:
      *(void *)uint64_t v13 = *v20;
LABEL_61:
      void *v20 = v13;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v21 = 1;
    if (v10 >= 3) {
      BOOL v21 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v10);
    unint64_t v23 = vcvtps_u32_f32(v17 / v18);
    if (v22 <= v23) {
      size_t prime = v23;
    }
    else {
      size_t prime = v22;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v25 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v25) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v25)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v25 < 3uLL || (uint8x8_t v27 = (uint8x8_t)vcnt_s8(v25), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime < *(void *)&v25) {
LABEL_37:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v3 = v9 % v10;
        uint64_t v19 = *(void *)a1;
        uint64_t v20 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v20) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v9;
        uint64_t v19 = *(void *)a1;
        uint64_t v20 = *(void **)(*(void *)a1 + 8 * v9);
        if (v20) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v29 & v9;
      uint64_t v19 = *(void *)a1;
      uint64_t v20 = *(void **)(*(void *)a1 + 8 * (v29 & v9));
      if (v20) {
        goto LABEL_26;
      }
    }
  }
  *(void *)uint64_t v13 = *v16;
  *unsigned int v16 = v13;
  *(void *)(v19 + 8 * v3) = v16;
  if (*(void *)v13)
  {
    unint64_t v30 = *(void *)(*(void *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10) {
        v30 %= v10;
      }
    }
    else
    {
      v30 &= v10 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*v7;
  return v13;
}

void sub_192446ED8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::equal_to<std::pair<std::string,std::string>>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4 = a2[23];
  size_t v5 = *((void *)a2 + 1);
  if ((v4 & 0x80u) == 0) {
    uint64_t v6 = a2[23];
  }
  else {
    uint64_t v6 = *((void *)a2 + 1);
  }
  uint64_t v7 = a3[23];
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)a3 + 1);
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    unint64_t v10 = a3;
  }
  else {
    unint64_t v10 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v10, v5)) {
      return 0;
    }
  }
  else if (v4)
  {
    uint8x8_t v11 = a2;
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v4) {
        goto LABEL_19;
      }
    }
    return 0;
  }
LABEL_19:
  uint64_t v13 = a2[47];
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = a2[47];
  }
  else {
    uint64_t v14 = *((void *)a2 + 4);
  }
  uint64_t v15 = a3[47];
  int v16 = (char)v15;
  if ((v15 & 0x80u) != 0) {
    uint64_t v15 = *((void *)a3 + 4);
  }
  if (v14 != v15) {
    return 0;
  }
  float v17 = (const void **)(a2 + 24);
  uint64_t v20 = (unsigned __int8 *)*((void *)a3 + 3);
  uint64_t v19 = a3 + 24;
  float v18 = v20;
  if (v16 >= 0) {
    BOOL v21 = v19;
  }
  else {
    BOOL v21 = v18;
  }
  if ((v13 & 0x80) != 0) {
    return memcmp(*v17, v21, *((void *)a2 + 4)) == 0;
  }
  if (!a2[47]) {
    return 1;
  }
  uint64_t v22 = v13 - 1;
  do
  {
    int v24 = *(unsigned __int8 *)v17;
    float v17 = (const void **)((char *)v17 + 1);
    int v23 = v24;
    int v26 = *v21++;
    int v25 = v26;
    BOOL v28 = v22-- != 0;
    uint64_t result = v23 == v25;
  }
  while (v23 == v25 && v28);
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,E5RT::Permissions>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,E5RT::Permissions>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,E5RT::Permissions>>>::find<std::string>(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

unsigned __int8 *std::__hash_table<std::pair<std::string,std::string>,E5RT::SerializerUtils::StringPairHash,std::equal_to<std::pair<std::string,std::string>>,std::allocator<std::pair<std::string,std::string>>>::find<std::pair<std::string,std::string>>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = E5RT::SerializerUtils::StringPairHash::operator()((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v8 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v8 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v8);
  if (!v10) {
    return 0;
  }
  uint8x8_t v9 = *v10;
  if (*v10)
  {
    uint64_t v11 = (uint64_t)(a1 + 4);
    if (v7.u32[0] < 2uLL)
    {
      uint64_t v12 = *(void *)&v5 - 1;
      while (1)
      {
        uint64_t v14 = *((void *)v9 + 1);
        if (v14 == v6)
        {
          if (std::equal_to<std::pair<std::string,std::string>>::operator()[abi:ne180100](v11, v9 + 16, a2)) {
            return v9;
          }
        }
        else if ((v14 & v12) != v8)
        {
          return 0;
        }
        uint8x8_t v9 = *(unsigned __int8 **)v9;
        if (!v9) {
          return v9;
        }
      }
    }
    do
    {
      unint64_t v13 = *((void *)v9 + 1);
      if (v13 == v6)
      {
        if (std::equal_to<std::pair<std::string,std::string>>::operator()[abi:ne180100](v11, v9 + 16, a2)) {
          return v9;
        }
      }
      else
      {
        if (v13 >= *(void *)&v5) {
          v13 %= *(void *)&v5;
        }
        if (v13 != v8) {
          return 0;
        }
      }
      uint8x8_t v9 = *(unsigned __int8 **)v9;
    }
    while (v9);
  }
  return v9;
}

void sub_1924473B4()
{
}

__n128 sub_1924473C8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE39A588;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_19244741C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE39A588;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192447454(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 40);
  int8x8_t v5 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(**(void ***)(a1 + 16));
  unint64_t v6 = (flatbuffers::FlatBufferBuilder *)E5RT::OperandDescriptor::TryAsSurfaceDescriptor(**(void ***)(a1 + 16));
  if (v5)
  {
    int v8 = E5RT::SerializerUtils::SerializeTensorDescriptorToFlatbuffer((flatbuffers::FlatBufferBuilder *)a2, v5);
    int v9 = 1;
    if (!*(unsigned char *)(a2 + 78)) {
      goto LABEL_3;
    }
LABEL_12:
    sub_19244C6B0();
  }
  if (!v6)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    v20[23] = 10;
    strcpy(v20, "operator()");
    unint64_t v17 = (char *)operator new(0x28uLL);
    long long v18 = xmmword_192DBBFE0;
    strcpy(v17, "Unknown operand descriptor type.");
    E5RT::Status::Status(v19, 5, &v17);
    E5RT::E5RTError::E5RTError(exception, v20, v19);
  }
  int v8 = E5RT::SerializerUtils::SerializeSurfaceDescriptorToFlatbuffer((E5RT::SerializerUtils *)a2, v6, v7);
  int v9 = 2;
  if (*(unsigned char *)(a2 + 78)) {
    goto LABEL_12;
  }
LABEL_3:
  if (*(_DWORD *)(a2 + 72)) {
    sub_19244C684();
  }
  *(unsigned char *)(a2 + 78) = 1;
  int v10 = *(_DWORD *)(a2 + 40);
  if (v8)
  {
    flatbuffers::FlatBufferBuilder::Align(a2, 4uLL);
    unsigned int v11 = *(_DWORD *)(a2 + 40);
    if (v8 - 1 >= v11) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(a2, 6, v11 - v8 + 4, 0);
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a2, 4, v9, 0);
  unsigned int v12 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a2, v10);
  unint64_t v13 = (int *)(*(void *)(a2 + 48) + *(void *)(a2 + 32) - v12);
  uint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 < 7u || !v14[3]) {
    sub_19244C8C0();
  }
  flatbuffers::FlatBufferBuilder::Finish((flatbuffers::FlatBufferBuilder *)a2, v12, 0, 1);
  return (*(_DWORD *)(a2 + 40) - v4);
}

void sub_192447660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t sub_1924476BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer16SerializeOperandERKNS_9E5OperandERKNSt3__112basic_stringIcNS4_11char_traitsI"
                     "cEENS4_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer16SerializeOperandERKNS_9E5OperandERKNSt3__112basic_stringIcNS4_11c"
                                "har_traitsIcEENS4_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer16SerializeOperandERKNS_9E5OperandERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer16SerializeOperandERKNS_9E5OperandERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19244772C()
{
  return &unk_1EE39A5E8;
}

uint64_t flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(uint64_t this, uint64_t a2, int a3, int a4)
{
  char v4 = a3;
  uint64_t v6 = this;
  if (a3 != a4 || *(unsigned char *)(this + 88))
  {
    if (!*(void *)(this + 80)) {
      *(void *)(this + 80) = 1;
    }
    unint64_t v7 = *(void *)(this + 56);
    unint64_t v8 = *(void *)(this + 64);
    if (v7 < v8 || v8 < *(void *)(this + 48)) {
      sub_19244C6DC();
    }
    if (v7 == v8) {
      this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)this, 1uLL);
    }
    unsigned int v9 = *(_DWORD *)(v6 + 40);
    if (v9 >= 0x7FFFFFFF) {
      sub_19244C708();
    }
    int v10 = (unsigned char *)(*(void *)(v6 + 56) - 1);
    *(void *)(v6 + 56) = v10;
    *(_DWORD *)(v6 + 40) = v9 + 1;
    *int v10 = v4;
    unint64_t v11 = *(void *)(v6 + 56);
    unint64_t v12 = *(void *)(v6 + 64);
    BOOL v13 = v11 >= v12;
    unint64_t v14 = v11 - v12;
    if (!v13 || v12 < *(void *)(v6 + 48)) {
      sub_19244C6DC();
    }
    uint64_t v15 = *(unsigned int *)(v6 + 40);
    unsigned int v16 = *(_DWORD *)(v6 + 40);
    if (v14 <= 7)
    {
      this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v6, 8uLL);
      unsigned int v16 = *(_DWORD *)(v6 + 40);
    }
    if (v16 >= 0x7FFFFFFF) {
      sub_19244C708();
    }
    **(void **)(v6 + 64) = v15 | (a2 << 32);
    *(void *)(v6 + 64) += 8;
    ++*(_DWORD *)(v6 + 72);
    if (*(unsigned __int16 *)(v6 + 76) < a2) {
      *(_WORD *)(v6 + 76) = a2;
    }
  }
  return this;
}

void sub_192447868()
{
}

void *sub_19244787C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE39A608;
  result[1] = v3;
  return result;
}

uint64_t sub_1924478C4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE39A608;
  a2[1] = v2;
  return result;
}

uint64_t sub_1924478F0(uint64_t a1, flatbuffers::FlatBufferBuilder *this)
{
  int v4 = *((_DWORD *)this + 10);
  uint64_t v5 = *(void *)(a1 + 8);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    unint64_t v7 = *(const char **)(a1 + 8);
  }
  else {
    unint64_t v7 = *(const char **)v5;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    unint64_t v8 = *(void *)(v5 + 8);
  }
  int String = flatbuffers::FlatBufferBuilder::CreateString(this, v7, v8);
  uint64_t v10 = *(void *)(a1 + 8);
  BOOL v13 = *(const char **)(v10 + 24);
  uint64_t v11 = v10 + 24;
  unint64_t v12 = v13;
  int v14 = *(char *)(v11 + 23);
  if (v14 >= 0) {
    uint64_t v15 = (const char *)v11;
  }
  else {
    uint64_t v15 = v12;
  }
  if (v14 >= 0) {
    unint64_t v16 = *(unsigned __int8 *)(v11 + 23);
  }
  else {
    unint64_t v16 = *(void *)(v11 + 8);
  }
  int v17 = flatbuffers::FlatBufferBuilder::CreateString(this, v15, v16);
  int v18 = flatbuffers::FlatBufferBuilder::CreateVectorOfStrings<std::__wrap_iter<std::string const*>>(this, *(void *)(*(void *)(a1 + 8) + 56), *(void *)(*(void *)(a1 + 8) + 64));
  if (*((unsigned char *)this + 78)) {
    sub_19244C6B0();
  }
  if (*((_DWORD *)this + 18)) {
    sub_19244C684();
  }
  int v19 = v18;
  *((unsigned char *)this + 78) = 1;
  int v20 = *((_DWORD *)this + 10);
  if (String)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v21 = *((_DWORD *)this + 10);
    if (String - 1 >= v21) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 4, v21 - String + 4, 0);
  }
  if (v17)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v22 = *((_DWORD *)this + 10);
    if (v17 - 1 >= v22) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 6, v22 - v17 + 4, 0);
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 8, *(_DWORD *)(*(void *)(a1 + 8) + 48), 0);
  if (v19)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v23 = *((_DWORD *)this + 10);
    if (v19 - 1 >= v23) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 10, v23 - v19 + 4, 0);
  }
  int v24 = flatbuffers::FlatBufferBuilder::EndTable(this, v20);
  flatbuffers::FlatBufferBuilder::Finish(this, v24, 0, 1);
  return (*((_DWORD *)this + 10) - v4);
}

uint64_t sub_192447AB0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer16SerializeOpAttrsI15AneInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char"
                     "_traitsIcEENS6_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI15AneInferenceOpTEEjRKT_RKNSt3__112basic_stringI"
                                "cNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer16SerializeOpAttrsI15AneInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI15AneInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192447B20()
{
  return &unk_1EE39A668;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateString(flatbuffers::FlatBufferBuilder *this, const char *a2, unint64_t a3)
{
  if (*((unsigned char *)this + 78)) {
    sub_19244C6B0();
  }
  if (*((_DWORD *)this + 18)) {
    sub_19244C684();
  }
  flatbuffers::FlatBufferBuilder::PreAlign((uint64_t)this, a3 + 1, 4uLL);
  unint64_t v6 = *((void *)this + 7);
  unint64_t v7 = *((void *)this + 8);
  if (v6 < v7 || v7 < *((void *)this + 6)) {
    sub_19244C6DC();
  }
  if (v6 == v7) {
    flatbuffers::vector_downward::reallocate(this, 1uLL);
  }
  unsigned int v8 = *((_DWORD *)this + 10);
  if (v8 >= 0x7FFFFFFF) {
    sub_19244C708();
  }
  unsigned int v9 = (unsigned char *)(*((void *)this + 7) - 1);
  *((void *)this + 7) = v9;
  *((_DWORD *)this + 10) = v8 + 1;
  unsigned char *v9 = 0;
  if (a3)
  {
    unint64_t v10 = *((void *)this + 7);
    unint64_t v11 = *((void *)this + 8);
    BOOL v12 = v10 >= v11;
    unint64_t v13 = v10 - v11;
    if (!v12 || v11 < *((void *)this + 6)) {
      sub_19244C6DC();
    }
    if (v13 < a3) {
      flatbuffers::vector_downward::reallocate(this, a3);
    }
    unsigned int v14 = *((_DWORD *)this + 10);
    if (v14 >= 0x7FFFFFFF) {
      sub_19244C708();
    }
    uint64_t v15 = (void *)(*((void *)this + 7) - a3);
    *((void *)this + 7) = v15;
    *((_DWORD *)this + 10) = v14 + a3;
    memcpy(v15, a2, a3);
  }
  flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
  unint64_t v16 = *((void *)this + 7);
  unint64_t v17 = *((void *)this + 8);
  BOOL v12 = v16 >= v17;
  unint64_t v18 = v16 - v17;
  if (!v12 || v17 < *((void *)this + 6)) {
    sub_19244C6DC();
  }
  if (v18 <= 3) {
    flatbuffers::vector_downward::reallocate(this, 4uLL);
  }
  unsigned int v19 = *((_DWORD *)this + 10);
  if (v19 >= 0x7FFFFFFF) {
    sub_19244C708();
  }
  uint64_t v20 = *((void *)this + 7);
  *((_DWORD *)this + 10) = v19 + 4;
  *(_DWORD *)(v20 - 4) = a3;
  *((void *)this + 7) = v20 - 4;
  return *((unsigned int *)this + 10);
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVectorOfStrings<std::__wrap_iter<std::string const*>>(flatbuffers::FlatBufferBuilder *this, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *((void *)this + 7);
  unint64_t v4 = *((void *)this + 8);
  BOOL v5 = v3 >= v4;
  unint64_t v6 = v3 - v4;
  if (!v5 || v4 < *((void *)this + 6)) {
    sub_19244C6DC();
  }
  uint64_t v9 = a2;
  uint64_t v10 = a3 - a2;
  uint64_t v11 = (a3 - a2) / 24;
  if (v6 < 4 * v11) {
    flatbuffers::vector_downward::reallocate(this, 4 * v11);
  }
  if (*((_DWORD *)this + 10) > 0x7FFFFFFEu) {
    sub_19244C708();
  }
  for (; v9 != a3; v9 += 24)
  {
    int v12 = *(char *)(v9 + 23);
    if (v12 >= 0) {
      unint64_t v13 = (const char *)v9;
    }
    else {
      unint64_t v13 = *(const char **)v9;
    }
    if (v12 >= 0) {
      unint64_t v14 = *(unsigned __int8 *)(v9 + 23);
    }
    else {
      unint64_t v14 = *(void *)(v9 + 8);
    }
    int String = flatbuffers::FlatBufferBuilder::CreateString(this, v13, v14);
    unint64_t v16 = *((void *)this + 7);
    unint64_t v17 = *((void *)this + 8);
    BOOL v5 = v16 >= v17;
    unint64_t v18 = v16 - v17;
    if (!v5 || v17 < *((void *)this + 6)) {
      sub_19244C6DC();
    }
    int v19 = String;
    if (v18 <= 3) {
      flatbuffers::vector_downward::reallocate(this, 4uLL);
    }
    if (*((_DWORD *)this + 10) >= 0x7FFFFFFFu) {
      sub_19244C708();
    }
    uint64_t v20 = (_DWORD *)*((void *)this + 8);
    _DWORD *v20 = v19;
    *((void *)this + 8) = v20 + 1;
  }
  if (*((unsigned char *)this + 78)) {
    sub_19244C6B0();
  }
  if (*((_DWORD *)this + 18)) {
    sub_19244C684();
  }
  *((unsigned char *)this + 78) = 1;
  flatbuffers::FlatBufferBuilder::PreAlign((uint64_t)this, 4 * v11, 4uLL);
  flatbuffers::FlatBufferBuilder::PreAlign((uint64_t)this, 4 * v11, 4uLL);
  if (v10 >= 24)
  {
    if (v11 <= 1) {
      uint64_t v21 = 1;
    }
    else {
      uint64_t v21 = v11;
    }
    uint64_t v22 = 4 * v21;
    uint64_t v23 = -4;
    do
    {
      uint64_t v24 = *((void *)this + 8);
      if (!v24) {
        sub_19244C83C();
      }
      flatbuffers::FlatBufferBuilder::PushElement<flatbuffers::String>((uint64_t)this, *(_DWORD *)(v24 + v23));
      v23 -= 4;
    }
    while (v22 + v23 != -4);
  }
  *((void *)this + 8) -= 4 * v11;

  return flatbuffers::FlatBufferBuilder::EndVector(this, v11);
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<flatbuffers::String>(uint64_t a1, int a2)
{
  flatbuffers::FlatBufferBuilder::Align(a1, 4uLL);
  unsigned int v4 = *(_DWORD *)(a1 + 40);
  if (a2 - 1 >= v4) {
    sub_19244C760();
  }
  flatbuffers::FlatBufferBuilder::Align(a1, 4uLL);
  unint64_t v5 = *(void *)(a1 + 56);
  unint64_t v6 = *(void *)(a1 + 64);
  BOOL v7 = v5 >= v6;
  unint64_t v8 = v5 - v6;
  if (!v7 || v6 < *(void *)(a1 + 48)) {
    sub_19244C6DC();
  }
  if (v8 <= 3) {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 4uLL);
  }
  unsigned int v9 = *(_DWORD *)(a1 + 40);
  if (v9 >= 0x7FFFFFFF) {
    sub_19244C708();
  }
  uint64_t v10 = *(void *)(a1 + 56);
  *(_DWORD *)(a1 + 40) = v9 + 4;
  *(_DWORD *)(v10 - 4) = v4 - a2 + 4;
  *(void *)(a1 + 56) = v10 - 4;
  return *(unsigned int *)(a1 + 40);
}

uint64_t flatbuffers::FlatBufferBuilder::EndVector(flatbuffers::FlatBufferBuilder *this, int a2)
{
  if (!*((unsigned char *)this + 78)) {
    sub_19244C8EC();
  }
  *((unsigned char *)this + 78) = 0;
  flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
  unint64_t v4 = *((void *)this + 7);
  unint64_t v5 = *((void *)this + 8);
  BOOL v6 = v4 >= v5;
  unint64_t v7 = v4 - v5;
  if (!v6 || v5 < *((void *)this + 6)) {
    sub_19244C6DC();
  }
  if (v7 <= 3) {
    flatbuffers::vector_downward::reallocate(this, 4uLL);
  }
  unsigned int v8 = *((_DWORD *)this + 10);
  if (v8 >= 0x7FFFFFFF) {
    sub_19244C708();
  }
  uint64_t v9 = *((void *)this + 7);
  *((_DWORD *)this + 10) = v8 + 4;
  *(_DWORD *)(v9 - 4) = a2;
  *((void *)this + 7) = v9 - 4;
  return *((unsigned int *)this + 10);
}

void sub_192447FD4()
{
}

void *sub_192447FE8(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE39A688;
  result[1] = v3;
  return result;
}

uint64_t sub_192448030(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE39A688;
  a2[1] = v2;
  return result;
}

uint64_t sub_19244805C(uint64_t a1, flatbuffers::FlatBufferBuilder *this)
{
  int v4 = *((_DWORD *)this + 10);
  unint64_t v5 = *(unsigned __int8 **)(a1 + 8);
  int v6 = *v5;
  if (v6 == 2 || v6 == 1)
  {
    uint64_t v7 = *((void *)v5 + 1);
    int v8 = *(char *)(v7 + 23);
    if (v8 >= 0) {
      uint64_t v9 = (const char *)v7;
    }
    else {
      uint64_t v9 = *(const char **)v7;
    }
    if (v8 >= 0) {
      unint64_t v10 = *(unsigned __int8 *)(v7 + 23);
    }
    else {
      unint64_t v10 = *(void *)(v7 + 8);
    }
    int String = flatbuffers::FlatBufferBuilder::CreateString(this, v9, v10);
  }
  else
  {
    int String = 0;
  }
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v15 = *(const char **)(v12 + 16);
  uint64_t v13 = v12 + 16;
  unint64_t v14 = v15;
  int v16 = *(char *)(v13 + 23);
  if (v16 >= 0) {
    unint64_t v17 = (const char *)v13;
  }
  else {
    unint64_t v17 = v14;
  }
  if (v16 >= 0) {
    unint64_t v18 = *(unsigned __int8 *)(v13 + 23);
  }
  else {
    unint64_t v18 = *(void *)(v13 + 8);
  }
  int v19 = flatbuffers::FlatBufferBuilder::CreateString(this, v17, v18);
  int v20 = flatbuffers::FlatBufferBuilder::CreateVectorOfStrings<std::__wrap_iter<std::string const*>>(this, *(void *)(*(void *)(a1 + 8) + 48), *(void *)(*(void *)(a1 + 8) + 56));
  if (*((unsigned char *)this + 78)) {
    sub_19244C6B0();
  }
  if (*((_DWORD *)this + 18)) {
    sub_19244C684();
  }
  int v21 = v20;
  *((unsigned char *)this + 78) = 1;
  int v22 = *((_DWORD *)this + 10);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((uint64_t)this, 4, **(unsigned __int8 **)(a1 + 8), 0);
  if (String)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v23 = *((_DWORD *)this + 10);
    if (String - 1 >= v23) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 6, v23 - String + 4, 0);
  }
  if (v19)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v24 = *((_DWORD *)this + 10);
    if (v19 - 1 >= v24) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 8, v24 - v19 + 4, 0);
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((uint64_t)this, 10, *(unsigned __int8 *)(*(void *)(a1 + 8) + 40), 0);
  if (v21)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v25 = *((_DWORD *)this + 10);
    if (v21 - 1 >= v25) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 12, v25 - v21 + 4, 0);
  }
  int v26 = flatbuffers::FlatBufferBuilder::EndTable(this, v22);
  flatbuffers::FlatBufferBuilder::Finish(this, v26, 0, 1);
  return (*((_DWORD *)this + 10) - v4);
}

uint64_t sub_192448254(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer16SerializeOpAttrsI19BnnsCpuInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11"
                     "char_traitsIcEENS6_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI19BnnsCpuInferenceOpTEEjRKT_RKNSt3__112basic_str"
                                "ingIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer16SerializeOpAttrsI19BnnsCpuInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI19BnnsCpuInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1924482C4()
{
  return &unk_1EE39A6E8;
}

void sub_1924482D4()
{
}

void *sub_1924482E8(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE39A708;
  result[1] = v3;
  return result;
}

uint64_t sub_192448330(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE39A708;
  a2[1] = v2;
  return result;
}

uint64_t sub_19244835C(uint64_t a1, flatbuffers::FlatBufferBuilder *this)
{
  int v4 = *((_DWORD *)this + 10);
  uint64_t v5 = *(void *)(a1 + 8);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    uint64_t v7 = *(const char **)(a1 + 8);
  }
  else {
    uint64_t v7 = *(const char **)v5;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    unint64_t v8 = *(void *)(v5 + 8);
  }
  int String = flatbuffers::FlatBufferBuilder::CreateString(this, v7, v8);
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v13 = *(const char **)(v10 + 24);
  uint64_t v11 = v10 + 24;
  uint64_t v12 = v13;
  int v14 = *(char *)(v11 + 23);
  if (v14 >= 0) {
    uint64_t v15 = (const char *)v11;
  }
  else {
    uint64_t v15 = v12;
  }
  if (v14 >= 0) {
    unint64_t v16 = *(unsigned __int8 *)(v11 + 23);
  }
  else {
    unint64_t v16 = *(void *)(v11 + 8);
  }
  int v17 = flatbuffers::FlatBufferBuilder::CreateString(this, v15, v16);
  if (*((unsigned char *)this + 78)) {
    sub_19244C6B0();
  }
  if (*((_DWORD *)this + 18)) {
    sub_19244C684();
  }
  int v18 = v17;
  *((unsigned char *)this + 78) = 1;
  int v19 = *((_DWORD *)this + 10);
  if (String)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v20 = *((_DWORD *)this + 10);
    if (String - 1 >= v20) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 4, v20 - String + 4, 0);
  }
  if (v18)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v21 = *((_DWORD *)this + 10);
    if (v18 - 1 >= v21) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 6, v21 - v18 + 4, 0);
  }
  int v22 = flatbuffers::FlatBufferBuilder::EndTable(this, v19);
  flatbuffers::FlatBufferBuilder::Finish(this, v22, 0, 1);
  return (*((_DWORD *)this + 10) - v4);
}

uint64_t sub_1924484AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer16SerializeOpAttrsI15CpuInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char"
                     "_traitsIcEENS6_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI15CpuInferenceOpTEEjRKT_RKNSt3__112basic_stringI"
                                "cNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer16SerializeOpAttrsI15CpuInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI15CpuInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19244851C()
{
  return &unk_1EE39A768;
}

void sub_19244852C()
{
}

void *sub_192448540(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE39A788;
  result[1] = v3;
  return result;
}

uint64_t sub_192448588(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE39A788;
  a2[1] = v2;
  return result;
}

uint64_t sub_1924485B4(uint64_t a1, flatbuffers::FlatBufferBuilder *this)
{
  int v4 = *((_DWORD *)this + 10);
  uint64_t v5 = *(void *)(a1 + 8);
  int v6 = *(const void **)(v5 + 8);
  uint64_t v7 = *(void *)(v5 + 16) - (void)v6;
  if (v7) {
    unint64_t v8 = v6;
  }
  else {
    unint64_t v8 = &flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
  }
  int v9 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>(this, v8, v7 >> 3);
  if (*((unsigned char *)this + 78)) {
    sub_19244C6B0();
  }
  if (*((_DWORD *)this + 18)) {
    sub_19244C684();
  }
  int v10 = v9;
  *((unsigned char *)this + 78) = 1;
  int v11 = *((_DWORD *)this + 10);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 4, **(_DWORD **)(a1 + 8), 0);
  if (v10)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v12 = *((_DWORD *)this + 10);
    if (v10 - 1 >= v12) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 6, v12 - v10 + 4, 0);
  }
  int v13 = flatbuffers::FlatBufferBuilder::EndTable(this, v11);
  flatbuffers::FlatBufferBuilder::Finish(this, v13, 0, 1);
  return (*((_DWORD *)this + 10) - v4);
}

uint64_t sub_1924486B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer16SerializeOpAttrsI7CastOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIc"
                     "EENS6_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI7CastOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11ch"
                                "ar_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer16SerializeOpAttrsI7CastOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI7CastOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192448724()
{
  return &unk_1EE39A7E8;
}

void sub_192448734()
{
}

void *sub_192448748(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE39A808;
  result[1] = v3;
  return result;
}

uint64_t sub_192448790(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE39A808;
  a2[1] = v2;
  return result;
}

uint64_t sub_1924487BC(uint64_t a1, flatbuffers::FlatBufferBuilder *this)
{
  int v4 = *((_DWORD *)this + 10);
  uint64_t v5 = *(void *)(a1 + 8);
  int v6 = *(const void **)(v5 + 8);
  uint64_t v7 = *(void *)(v5 + 16) - (void)v6;
  if (v7) {
    unint64_t v8 = v6;
  }
  else {
    unint64_t v8 = &flatbuffers::data<float,std::allocator<float>>(std::vector<float> const&)::t;
  }
  int v9 = flatbuffers::FlatBufferBuilder::CreateVector<float>(this, v8, v7 >> 2);
  if (*((unsigned char *)this + 78)) {
    sub_19244C6B0();
  }
  if (*((_DWORD *)this + 18)) {
    sub_19244C684();
  }
  int v10 = v9;
  *((unsigned char *)this + 78) = 1;
  int v11 = *((_DWORD *)this + 10);
  if (v9)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v12 = *((_DWORD *)this + 10);
    if (v10 - 1 >= v12) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 6, v12 - v10 + 4, 0);
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 4, **(_DWORD **)(a1 + 8), 0);
  int v13 = flatbuffers::FlatBufferBuilder::EndTable(this, v11);
  flatbuffers::FlatBufferBuilder::Finish(this, v13, 0, 1);
  return (*((_DWORD *)this + 10) - v4);
}

uint64_t sub_1924488BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer16SerializeOpAttrsI8QuantOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsI"
                     "cEENS6_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI8QuantOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11c"
                                "har_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer16SerializeOpAttrsI8QuantOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI8QuantOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19244892C()
{
  return &unk_1EE39A868;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVector<float>(flatbuffers::FlatBufferBuilder *this, const void *a2, uint64_t a3)
{
  if (*((unsigned char *)this + 78)) {
    sub_19244C6B0();
  }
  if (*((_DWORD *)this + 18)) {
    sub_19244C684();
  }
  *((unsigned char *)this + 78) = 1;
  unint64_t v6 = 4 * a3;
  flatbuffers::FlatBufferBuilder::PreAlign((uint64_t)this, 4 * a3, 4uLL);
  flatbuffers::FlatBufferBuilder::PreAlign((uint64_t)this, v6, 4uLL);
  if (a3 && v6)
  {
    unint64_t v7 = *((void *)this + 7);
    unint64_t v8 = *((void *)this + 8);
    BOOL v9 = v7 >= v8;
    unint64_t v10 = v7 - v8;
    if (!v9 || v8 < *((void *)this + 6)) {
      sub_19244C6DC();
    }
    if (v10 < v6) {
      flatbuffers::vector_downward::reallocate(this, v6);
    }
    unsigned int v11 = *((_DWORD *)this + 10);
    if (v11 >= 0x7FFFFFFF) {
      sub_19244C708();
    }
    unsigned int v12 = (void *)(*((void *)this + 7) - v6);
    *((void *)this + 7) = v12;
    *((_DWORD *)this + 10) = v11 + v6;
    memcpy(v12, a2, v6);
  }

  return flatbuffers::FlatBufferBuilder::EndVector(this, a3);
}

void sub_192448A34()
{
}

void *sub_192448A48(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE39A888;
  result[1] = v3;
  return result;
}

uint64_t sub_192448A90(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE39A888;
  a2[1] = v2;
  return result;
}

uint64_t sub_192448ABC(uint64_t a1, flatbuffers::FlatBufferBuilder *this)
{
  int v4 = *((_DWORD *)this + 10);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(const void **)(v5 + 8);
  uint64_t v7 = *(void *)(v5 + 16) - (void)v6;
  if (v7) {
    unint64_t v8 = v6;
  }
  else {
    unint64_t v8 = &flatbuffers::data<float,std::allocator<float>>(std::vector<float> const&)::t;
  }
  int v9 = flatbuffers::FlatBufferBuilder::CreateVector<float>(this, v8, v7 >> 2);
  if (*((unsigned char *)this + 78)) {
    sub_19244C6B0();
  }
  if (*((_DWORD *)this + 18)) {
    sub_19244C684();
  }
  int v10 = v9;
  *((unsigned char *)this + 78) = 1;
  int v11 = *((_DWORD *)this + 10);
  if (v9)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v12 = *((_DWORD *)this + 10);
    if (v10 - 1 >= v12) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 6, v12 - v10 + 4, 0);
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 4, **(_DWORD **)(a1 + 8), 0);
  int v13 = flatbuffers::FlatBufferBuilder::EndTable(this, v11);
  flatbuffers::FlatBufferBuilder::Finish(this, v13, 0, 1);
  return (*((_DWORD *)this + 10) - v4);
}

uint64_t sub_192448BBC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer16SerializeOpAttrsI10DequantOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_trai"
                     "tsIcEENS6_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI10DequantOpTEEjRKT_RKNSt3__112basic_stringIcNS6_"
                                "11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer16SerializeOpAttrsI10DequantOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI10DequantOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192448C2C()
{
  return &unk_1EE39A8E8;
}

void sub_192448C3C()
{
}

void *sub_192448C50(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE39A908;
  result[1] = v3;
  return result;
}

uint64_t sub_192448C98(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE39A908;
  a2[1] = v2;
  return result;
}

uint64_t sub_192448CC4(uint64_t a1, flatbuffers::FlatBufferBuilder *this)
{
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *((_DWORD *)this + 10);
  int v5 = *(char *)(v3 + 23);
  if (v5 >= 0) {
    unint64_t v6 = *(const char **)(a1 + 8);
  }
  else {
    unint64_t v6 = *(const char **)v3;
  }
  if (v5 >= 0) {
    unint64_t v7 = *(unsigned __int8 *)(v3 + 23);
  }
  else {
    unint64_t v7 = *(void *)(v3 + 8);
  }
  int String = flatbuffers::FlatBufferBuilder::CreateString(this, v6, v7);
  if (*((unsigned char *)this + 78)) {
    sub_19244C6B0();
  }
  if (*((_DWORD *)this + 18)) {
    sub_19244C684();
  }
  int v9 = String;
  *((unsigned char *)this + 78) = 1;
  int v10 = *((_DWORD *)this + 10);
  if (String)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v11 = *((_DWORD *)this + 10);
    if (v9 - 1 >= v11) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 4, v11 - v9 + 4, 0);
  }
  int v12 = flatbuffers::FlatBufferBuilder::EndTable(this, v10);
  flatbuffers::FlatBufferBuilder::Finish(this, v12, 0, 1);
  return (*((_DWORD *)this + 10) - v4);
}

uint64_t sub_192448DA0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer16SerializeOpAttrsI18MlcCpuInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11c"
                     "har_traitsIcEENS6_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI18MlcCpuInferenceOpTEEjRKT_RKNSt3__112basic_stri"
                                "ngIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer16SerializeOpAttrsI18MlcCpuInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI18MlcCpuInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192448E10()
{
  return &unk_1EE39A968;
}

void sub_192448E20()
{
}

void *sub_192448E34(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE39A988;
  result[1] = v3;
  return result;
}

uint64_t sub_192448E7C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE39A988;
  a2[1] = v2;
  return result;
}

uint64_t sub_192448EA8(uint64_t a1, flatbuffers::FlatBufferBuilder *this)
{
  int v4 = *((_DWORD *)this + 10);
  uint64_t v5 = *(void *)(a1 + 8);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    unint64_t v7 = *(const char **)(a1 + 8);
  }
  else {
    unint64_t v7 = *(const char **)v5;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    unint64_t v8 = *(void *)(v5 + 8);
  }
  int String = flatbuffers::FlatBufferBuilder::CreateString(this, v7, v8);
  uint64_t v10 = *(void *)(a1 + 8);
  int v13 = *(const char **)(v10 + 24);
  uint64_t v11 = v10 + 24;
  int v12 = v13;
  int v14 = *(char *)(v11 + 23);
  if (v14 >= 0) {
    uint64_t v15 = (const char *)v11;
  }
  else {
    uint64_t v15 = v12;
  }
  if (v14 >= 0) {
    unint64_t v16 = *(unsigned __int8 *)(v11 + 23);
  }
  else {
    unint64_t v16 = *(void *)(v11 + 8);
  }
  int v17 = flatbuffers::FlatBufferBuilder::CreateString(this, v15, v16);
  int v18 = *(void **)(a1 + 8);
  uint64_t v19 = v18[6];
  int v20 = flatbuffers::FlatBufferBuilder::CreateVectorOfStrings<std::__wrap_iter<std::string const*>>(this, v18[8], v18[9]);
  if (*((unsigned char *)this + 78)) {
    sub_19244C6B0();
  }
  if (*((_DWORD *)this + 18)) {
    sub_19244C684();
  }
  int v21 = v20;
  *((unsigned char *)this + 78) = 1;
  int v22 = *((_DWORD *)this + 10);
  if (String)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v23 = *((_DWORD *)this + 10);
    if (String - 1 >= v23) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 4, v23 - String + 4, 0);
  }
  if (v17)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v24 = *((_DWORD *)this + 10);
    if (v17 - 1 >= v24) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 6, v24 - v17 + 4, 0);
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((uint64_t)this, 8, v19, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((uint64_t)this, 10, *(unsigned __int8 *)(*(void *)(a1 + 8) + 56), 0);
  if (v21)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v25 = *((_DWORD *)this + 10);
    if (v21 - 1 >= v25) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 12, v25 - v21 + 4, 0);
  }
  int v26 = flatbuffers::FlatBufferBuilder::EndTable(this, v22);
  flatbuffers::FlatBufferBuilder::Finish(this, v26, 0, 1);
  return (*((_DWORD *)this + 10) - v4);
}

uint64_t sub_192449080(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer16SerializeOpAttrsI20MpsGraphInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_1"
                     "1char_traitsIcEENS6_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI20MpsGraphInferenceOpTEEjRKT_RKNSt3__112basic_st"
                                "ringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer16SerializeOpAttrsI20MpsGraphInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI20MpsGraphInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1924490F0()
{
  return &unk_1EE39A9E8;
}

uint64_t flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = this;
  if (a3 != a4 || *(unsigned char *)(this + 88))
  {
    this = flatbuffers::FlatBufferBuilder::Align(this, 8uLL);
    unint64_t v7 = *(void *)(v6 + 56);
    unint64_t v8 = *(void *)(v6 + 64);
    BOOL v9 = v7 >= v8;
    unint64_t v10 = v7 - v8;
    if (!v9 || v8 < *(void *)(v6 + 48)) {
      sub_19244C6DC();
    }
    if (v10 <= 7) {
      this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v6, 8uLL);
    }
    uint64_t v11 = *(unsigned int *)(v6 + 40);
    if (v11 >= 0x7FFFFFFF) {
      sub_19244C708();
    }
    unint64_t v13 = *(void *)(v6 + 56);
    unint64_t v12 = *(void *)(v6 + 64);
    *(void *)(v13 - 8) = a3;
    v13 -= 8;
    *(void *)(v6 + 56) = v13;
    uint64_t v14 = v11 + 8;
    *(_DWORD *)(v6 + 40) = v11 + 8;
    unint64_t v15 = v13 - v12;
    if (v13 < v12 || v12 < *(void *)(v6 + 48)) {
      sub_19244C6DC();
    }
    unsigned int v16 = v14;
    if (v15 <= 7)
    {
      this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v6, 8uLL);
      unsigned int v16 = *(_DWORD *)(v6 + 40);
    }
    if (v16 >= 0x7FFFFFFF) {
      sub_19244C708();
    }
    **(void **)(v6 + 64) = v14 | (a2 << 32);
    *(void *)(v6 + 64) += 8;
    ++*(_DWORD *)(v6 + 72);
    if (*(unsigned __int16 *)(v6 + 76) < a2) {
      *(_WORD *)(v6 + 76) = a2;
    }
  }
  return this;
}

void sub_19244921C()
{
}

void *sub_192449230(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE39AA08;
  result[1] = v3;
  return result;
}

uint64_t sub_192449278(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE39AA08;
  a2[1] = v2;
  return result;
}

uint64_t sub_1924492A4(uint64_t a1, flatbuffers::FlatBufferBuilder *this)
{
  int v4 = *((_DWORD *)this + 10);
  uint64_t v5 = *(void *)(a1 + 8);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    unint64_t v7 = *(const char **)(a1 + 8);
  }
  else {
    unint64_t v7 = *(const char **)v5;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    unint64_t v8 = *(void *)(v5 + 8);
  }
  int String = flatbuffers::FlatBufferBuilder::CreateString(this, v7, v8);
  uint64_t v10 = *(void *)(a1 + 8);
  unint64_t v13 = *(const char **)(v10 + 32);
  uint64_t v11 = v10 + 32;
  unint64_t v12 = v13;
  int v14 = *(char *)(v11 + 23);
  if (v14 >= 0) {
    unint64_t v15 = (const char *)v11;
  }
  else {
    unint64_t v15 = v12;
  }
  if (v14 >= 0) {
    unint64_t v16 = *(unsigned __int8 *)(v11 + 23);
  }
  else {
    unint64_t v16 = *(void *)(v11 + 8);
  }
  int v17 = flatbuffers::FlatBufferBuilder::CreateString(this, v15, v16);
  uint64_t v18 = *(void *)(a1 + 8);
  uint64_t v19 = *(const void **)(v18 + 56);
  uint64_t v20 = *(void *)(v18 + 64) - (void)v19;
  if (v20) {
    int v21 = v19;
  }
  else {
    int v21 = &flatbuffers::data<Device,std::allocator<Device>>(std::vector<Device> const&)::t;
  }
  int v22 = flatbuffers::FlatBufferBuilder::CreateVector<float>(this, v21, v20 >> 2);
  if (*((unsigned char *)this + 78)) {
    sub_19244C6B0();
  }
  if (*((_DWORD *)this + 18)) {
    sub_19244C684();
  }
  int v23 = v22;
  *((unsigned char *)this + 78) = 1;
  int v24 = *((_DWORD *)this + 10);
  if (String)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v25 = *((_DWORD *)this + 10);
    if (String - 1 >= v25) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 4, v25 - String + 4, 0);
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 6, *(_DWORD *)(*(void *)(a1 + 8) + 24), 0);
  if (v17)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v26 = *((_DWORD *)this + 10);
    if (v17 - 1 >= v26) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 8, v26 - v17 + 4, 0);
  }
  if (v23)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v27 = *((_DWORD *)this + 10);
    if (v23 - 1 >= v27) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 10, v27 - v23 + 4, 0);
  }
  int v28 = flatbuffers::FlatBufferBuilder::EndTable(this, v24);
  flatbuffers::FlatBufferBuilder::Finish(this, v28, 0, 1);
  return (*((_DWORD *)this + 10) - v4);
}

uint64_t sub_192449478(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer16SerializeOpAttrsI15EirInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char"
                     "_traitsIcEENS6_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI15EirInferenceOpTEEjRKT_RKNSt3__112basic_stringI"
                                "cNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer16SerializeOpAttrsI15EirInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI15EirInferenceOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1924494E8()
{
  return &unk_1EE39AA68;
}

void sub_1924494F8()
{
}

void *sub_19244950C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE39AA88;
  result[1] = v3;
  return result;
}

uint64_t sub_192449554(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE39AA88;
  a2[1] = v2;
  return result;
}

uint64_t sub_192449580(uint64_t a1, flatbuffers::FlatBufferBuilder *this)
{
  int v4 = *((_DWORD *)this + 10);
  uint64_t v5 = *(void *)(a1 + 8);
  int v6 = *(char *)(v5 + 23);
  if (v6 >= 0) {
    unint64_t v7 = *(const char **)(a1 + 8);
  }
  else {
    unint64_t v7 = *(const char **)v5;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(v5 + 23);
  }
  else {
    unint64_t v8 = *(void *)(v5 + 8);
  }
  int String = flatbuffers::FlatBufferBuilder::CreateString(this, v7, v8);
  uint64_t v10 = *(void *)(a1 + 8);
  unint64_t v13 = *(const char **)(v10 + 24);
  uint64_t v11 = v10 + 24;
  unint64_t v12 = v13;
  int v14 = *(char *)(v11 + 23);
  if (v14 >= 0) {
    unint64_t v15 = (const char *)v11;
  }
  else {
    unint64_t v15 = v12;
  }
  if (v14 >= 0) {
    unint64_t v16 = *(unsigned __int8 *)(v11 + 23);
  }
  else {
    unint64_t v16 = *(void *)(v11 + 8);
  }
  int v17 = flatbuffers::FlatBufferBuilder::CreateString(this, v15, v16);
  int v18 = flatbuffers::FlatBufferBuilder::CreateVectorOfStrings<std::__wrap_iter<std::string const*>>(this, *(void *)(*(void *)(a1 + 8) + 72), *(void *)(*(void *)(a1 + 8) + 80));
  int v19 = flatbuffers::FlatBufferBuilder::CreateVectorOfStrings<std::__wrap_iter<std::string const*>>(this, *(void *)(*(void *)(a1 + 8) + 48), *(void *)(*(void *)(a1 + 8) + 56));
  if (*((unsigned char *)this + 78)) {
    sub_19244C6B0();
  }
  if (*((_DWORD *)this + 18)) {
    sub_19244C684();
  }
  int v20 = v19;
  *((unsigned char *)this + 78) = 1;
  int v21 = *((_DWORD *)this + 10);
  if (String)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v22 = *((_DWORD *)this + 10);
    if (String - 1 >= v22) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 4, v22 - String + 4, 0);
  }
  if (v17)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v23 = *((_DWORD *)this + 10);
    if (v17 - 1 >= v23) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 6, v23 - v17 + 4, 0);
  }
  if (v18)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v24 = *((_DWORD *)this + 10);
    if (v18 - 1 >= v24) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 10, v24 - v18 + 4, 0);
  }
  if (v20)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v25 = *((_DWORD *)this + 10);
    if (v20 - 1 >= v25) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 8, v25 - v20 + 4, 0);
  }
  int v26 = flatbuffers::FlatBufferBuilder::EndTable(this, v21);
  flatbuffers::FlatBufferBuilder::Finish(this, v26, 0, 1);
  return (*((_DWORD *)this + 10) - v4);
}

uint64_t sub_192449778(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer16SerializeOpAttrsI10JitCallOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_trai"
                     "tsIcEENS6_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI10JitCallOpTEEjRKT_RKNSt3__112basic_stringIcNS6_"
                                "11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer16SerializeOpAttrsI10JitCallOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI10JitCallOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1924497E8()
{
  return &unk_1EE39AAE8;
}

void sub_1924497F8()
{
}

void *sub_19244980C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE39AB08;
  result[1] = v3;
  return result;
}

uint64_t sub_192449854(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE39AB08;
  a2[1] = v2;
  return result;
}

uint64_t sub_192449880()
{
  return 0;
}

uint64_t sub_192449888(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer16SerializeOpAttrsI10BarrierOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_trai"
                     "tsIcEENS6_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI10BarrierOpTEEjRKT_RKNSt3__112basic_stringIcNS6_"
                                "11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer16SerializeOpAttrsI10BarrierOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI10BarrierOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1924498F8()
{
  return &unk_1EE39AB68;
}

void sub_192449908()
{
}

void *sub_19244991C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE39AB88;
  result[1] = v3;
  return result;
}

uint64_t sub_192449964(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE39AB88;
  a2[1] = v2;
  return result;
}

uint64_t sub_192449990(uint64_t a1, flatbuffers::FlatBufferBuilder *this)
{
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *((_DWORD *)this + 10);
  int v5 = *(char *)(v3 + 23);
  if (v5 >= 0) {
    int v6 = *(const char **)(a1 + 8);
  }
  else {
    int v6 = *(const char **)v3;
  }
  if (v5 >= 0) {
    unint64_t v7 = *(unsigned __int8 *)(v3 + 23);
  }
  else {
    unint64_t v7 = *(void *)(v3 + 8);
  }
  int String = flatbuffers::FlatBufferBuilder::CreateString(this, v6, v7);
  if (*((unsigned char *)this + 78)) {
    sub_19244C6B0();
  }
  if (*((_DWORD *)this + 18)) {
    sub_19244C684();
  }
  int v9 = String;
  *((unsigned char *)this + 78) = 1;
  int v10 = *((_DWORD *)this + 10);
  if (String)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v11 = *((_DWORD *)this + 10);
    if (v9 - 1 >= v11) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 4, v11 - v9 + 4, 0);
  }
  int v12 = flatbuffers::FlatBufferBuilder::EndTable(this, v10);
  flatbuffers::FlatBufferBuilder::Finish(this, v12, 0, 1);
  return (*((_DWORD *)this + 10) - v4);
}

uint64_t sub_192449A6C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer16SerializeOpAttrsI15E5MinimalCpuOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char"
                     "_traitsIcEENS6_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI15E5MinimalCpuOpTEEjRKT_RKNSt3__112basic_stringI"
                                "cNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer16SerializeOpAttrsI15E5MinimalCpuOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer16SerializeOpAttrsI15E5MinimalCpuOpTEEjRKT_RKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192449ADC()
{
  return &unk_1EE39ABE8;
}

void sub_192449AEC()
{
}

__n128 sub_192449B00(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_1EE39AC08;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 sub_192449B64(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE39AC08;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192449BAC(uint64_t a1, flatbuffers::FlatBufferBuilder *this)
{
  uint64_t v4 = *(void *)(a1 + 40);
  int v5 = *((_DWORD *)this + 10);
  int v6 = *(const void ***)(a1 + 8);
  unint64_t v7 = *v6;
  uint64_t v8 = (unsigned char *)v6[1] - (unsigned char *)*v6;
  if (v8) {
    int v9 = v7;
  }
  else {
    int v9 = &flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
  }
  int v10 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>(this, v9, v8 >> 3);
  unsigned int v11 = *(const void ***)(a1 + 16);
  int v12 = *v11;
  uint64_t v13 = (unsigned char *)v11[1] - (unsigned char *)*v11;
  if (v13) {
    int v14 = v12;
  }
  else {
    int v14 = &flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
  }
  int v15 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>(this, v14, v13 >> 3);
  unint64_t v16 = *(const void ***)(a1 + 24);
  int v17 = *v16;
  uint64_t v18 = (unsigned char *)v16[1] - (unsigned char *)*v16;
  if (v18) {
    int v19 = v17;
  }
  else {
    int v19 = &flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
  }
  int v20 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>(this, v19, v18 >> 3);
  int v21 = (const void **)(*(uint64_t (**)(void))(**(void **)(a1 + 32) + 64))(*(void *)(a1 + 32));
  uint64_t v22 = (unsigned char *)v21[1] - (unsigned char *)*v21;
  if (v22) {
    unsigned int v23 = (void *)*v21;
  }
  else {
    unsigned int v23 = &flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
  }
  int v24 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>(this, v23, v22 >> 3);
  if (*((unsigned char *)this + 78)) {
    sub_19244C6B0();
  }
  if (*((_DWORD *)this + 18)) {
    sub_19244C684();
  }
  *((unsigned char *)this + 78) = 1;
  int v25 = *((_DWORD *)this + 10);
  if (*(unsigned char *)(v4 + 136))
  {
    int v26 = v24;
    uint64_t v27 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 56))(*(void *)(a1 + 32));
    if (!*(unsigned char *)(v27 + 8))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      char v40 = 10;
      strcpy(v39, "operator()");
      (*(void (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
      std::operator+<char>();
      E5RT::Status::Status(v38, 2, v37);
      E5RT::E5RTError::E5RTError(exception, v39, v38);
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((uint64_t)this, 12, *(void *)v27, 0);
    int v28 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 32) + 64))(*(void *)(a1 + 32));
    if (*v28 == v28[1])
    {
      unint64_t v36 = __cxa_allocate_exception(0x18uLL);
      char v40 = 10;
      strcpy(v39, "operator()");
      (*(void (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
      std::operator+<char>();
      E5RT::Status::Status(v38, 2, v37);
      E5RT::E5RTError::E5RTError(v36, v39, v38);
    }
    if (v26)
    {
      flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
      unsigned int v29 = *((_DWORD *)this + 10);
      if (v26 - 1 >= v29) {
        sub_19244C760();
      }
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 10, v29 - v26 + 4, 0);
    }
  }
  if (v10)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v30 = *((_DWORD *)this + 10);
    if (v10 - 1 >= v30) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 6, v30 - v10 + 4, 0);
  }
  if (v15)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v31 = *((_DWORD *)this + 10);
    if (v15 - 1 >= v31) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 8, v31 - v15 + 4, 0);
  }
  if (v20)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v32 = *((_DWORD *)this + 10);
    if (v20 - 1 >= v32) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 14, v32 - v20 + 4, 0);
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((uint64_t)this, 4, **(void **)(a1 + 48), 0);
  int v33 = flatbuffers::FlatBufferBuilder::EndTable(this, v25);
  **(_DWORD **)(a1 + 56) = v33;
  flatbuffers::FlatBufferBuilder::Finish(this, v33, 0, 0);
  return (*((_DWORD *)this + 10) - v5);
}

void sub_192449FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if ((v23 & 1) == 0)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t sub_19244A08C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer19SerializeOpArgFrameERKNS_11E5OperationERKNSt3__112basic_stringIcNS4_11char_t"
                     "raitsIcEENS4_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer19SerializeOpArgFrameERKNS_11E5OperationERKNSt3__112basic_stringIcN"
                                "S4_11char_traitsIcEENS4_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer19SerializeOpArgFrameERKNS_11E5OperationERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer19SerializeOpArgFrameERKNS_11E5OperationERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19244A0FC()
{
  return &unk_1EE39AC68;
}

void sub_19244A10C()
{
}

__n128 sub_19244A120(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE39AC88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19244A16C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE39AC88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19244A19C(uint64_t a1, flatbuffers::FlatBufferBuilder *this)
{
  if (*((unsigned char *)this + 78)) {
    sub_19244C6B0();
  }
  if (*((_DWORD *)this + 18)) {
    sub_19244C684();
  }
  int v4 = *((_DWORD *)this + 10);
  *((unsigned char *)this + 78) = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 4, **(_DWORD **)(a1 + 8), 0);
  int v5 = **(_DWORD **)(a1 + 16);
  if (v5)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v6 = *((_DWORD *)this + 10);
    if (v5 - 1 >= v6) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 6, v6 - v5 + 4, 0);
  }
  int v7 = flatbuffers::FlatBufferBuilder::EndTable(this, v4);
  flatbuffers::FlatBufferBuilder::Finish(this, v7, 0, 1);
  return (*((_DWORD *)this + 10) - v4);
}

uint64_t sub_19244A270(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer18SerializeOperationERKNS_11E5OperationERKNSt3__112basic_stringIcNS4_11char_tr"
                     "aitsIcEENS4_9allocatorIcEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer18SerializeOperationERKNS_11E5OperationERKNSt3__112basic_stringIcNS"
                                "4_11char_traitsIcEENS4_9allocatorIcEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer18SerializeOperationERKNS_11E5OperationERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer18SerializeOperationERKNS_11E5OperationERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19244A2E0()
{
  return &unk_1EE39ACE8;
}

void sub_19244A2F0()
{
}

__n128 sub_19244A304(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1EE39AD08;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_19244A360(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE39AD08;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19244A3A0(uint64_t a1, flatbuffers::FlatBufferBuilder *this)
{
  int v4 = *((_DWORD *)this + 10);
  int v5 = *(const void ***)(a1 + 8);
  unsigned int v6 = *v5;
  uint64_t v7 = (unsigned char *)v5[1] - (unsigned char *)*v5;
  if (v7) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = &flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
  }
  int v9 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>(this, v8, v7 >> 3);
  int v10 = *(const void ***)(a1 + 16);
  unsigned int v11 = *v10;
  uint64_t v12 = (unsigned char *)v10[1] - (unsigned char *)*v10;
  if (v12) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = &flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
  }
  int v14 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>(this, v13, v12 >> 3);
  int v15 = *(const void ***)(a1 + 24);
  unint64_t v16 = *v15;
  uint64_t v17 = (unsigned char *)v15[1] - (unsigned char *)*v15;
  if (v17) {
    uint64_t v18 = v16;
  }
  else {
    uint64_t v18 = &flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
  }
  int v19 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>(this, v18, v17 >> 3);
  int v20 = *(const void ***)(a1 + 32);
  int v21 = *v20;
  uint64_t v22 = (unsigned char *)v20[1] - (unsigned char *)*v20;
  if (v22) {
    char v23 = v21;
  }
  else {
    char v23 = &flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
  }
  int v24 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>(this, v23, v22 >> 3);
  unsigned int v32 = this;
  if (*((unsigned char *)this + 78)) {
    sub_19244C6B0();
  }
  if (*((_DWORD *)this + 18)) {
    sub_19244C684();
  }
  int v25 = v24;
  *((unsigned char *)this + 78) = 1;
  int v33 = *((_DWORD *)this + 10);
  if (v9)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v26 = *((_DWORD *)this + 10);
    if (v9 - 1 >= v26) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 6, v26 - v9 + 4, 0);
  }
  if (v14)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v27 = *((_DWORD *)this + 10);
    if (v14 - 1 >= v27) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 8, v27 - v14 + 4, 0);
  }
  if (v19)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v28 = *((_DWORD *)this + 10);
    if (v19 - 1 >= v28) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 10, v28 - v19 + 4, 0);
  }
  if (v25)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v29 = *((_DWORD *)this + 10);
    if (v25 - 1 >= v29) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 4, v29 - v25 + 4, 0);
  }
  int v30 = BlockBuilder::Finish((BlockBuilder *)&v32);
  **(_DWORD **)(a1 + 40) = v30;
  flatbuffers::FlatBufferBuilder::Finish(this, v30, 0, 0);
  return (*((_DWORD *)this + 10) - v4);
}

uint64_t sub_19244A5B8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer14SerializeBlockERKNS_7E5BlockERKNSt3__112basic_stringIcNS4_11char_traitsIcEEN"
                     "S4_9allocatorIcEEEESC_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer14SerializeBlockERKNS_7E5BlockERKNSt3__112basic_stringIcNS4_11char_"
                                "traitsIcEENS4_9allocatorIcEEEESC_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer14SerializeBlockERKNS_7E5BlockERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESC_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer14SerializeBlockERKNS_7E5BlockERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESC_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19244A628()
{
  return &unk_1EE39AD68;
}

uint64_t BlockBuilder::Finish(BlockBuilder *this)
{
  uint64_t result = flatbuffers::FlatBufferBuilder::EndTable(*(flatbuffers::FlatBufferBuilder **)this, *((_DWORD *)this + 2));
  unint64_t v3 = (int *)(*(void *)(*(void *)this + 48) + *(void *)(*(void *)this + 32) - result);
  int v4 = (unsigned __int16 *)((char *)v3 - *v3);
  unsigned int v5 = *v4;
  if (v5 < 5 || !v4[2]) {
    sub_19244C8C0();
  }
  if (v5 < 7 || !v4[3]) {
    sub_19244C8C0();
  }
  if (v5 < 9 || !v4[4]) {
    sub_19244C8C0();
  }
  return result;
}

void sub_19244A6C0()
{
}

__n128 sub_19244A6D4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1EE39AD88;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_19244A730(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE39AD88;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_19244A770(uint64_t a1, flatbuffers::FlatBufferBuilder *this)
{
  int v4 = *((_DWORD *)this + 10);
  unsigned int v5 = *(const void ***)(a1 + 8);
  unsigned int v6 = *v5;
  uint64_t v7 = (unsigned char *)v5[1] - (unsigned char *)*v5;
  if (v7) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = &flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
  }
  int v9 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>(this, v8, v7 >> 3);
  int v10 = *(const void ***)(a1 + 16);
  unsigned int v11 = *v10;
  uint64_t v12 = (unsigned char *)v10[1] - (unsigned char *)*v10;
  if (v12) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = &flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
  }
  int v14 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>(this, v13, v12 >> 3);
  int v15 = *(const void ***)(a1 + 24);
  unint64_t v16 = *v15;
  uint64_t v17 = (unsigned char *)v15[1] - (unsigned char *)*v15;
  if (v17) {
    uint64_t v18 = v16;
  }
  else {
    uint64_t v18 = &flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
  }
  int v19 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>(this, v18, v17 >> 3);
  int v20 = *(void ***)(a1 + 32);
  int v21 = *v20;
  uint64_t v22 = (unsigned char *)v20[1] - (unsigned char *)*v20;
  if (v22) {
    char v23 = v21;
  }
  else {
    char v23 = &flatbuffers::data<flatbuffers::Offset<Block>,std::allocator<flatbuffers::Offset<Block>>>(std::vector<flatbuffers::Offset<Block>> const&)::t;
  }
  int v24 = flatbuffers::FlatBufferBuilder::CreateVector<Block>(this, (uint64_t)v23, v22 >> 2);
  uint64_t v25 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 72))(*(void *)(a1 + 40));
  int v26 = *(char *)(v25 + 23);
  if (v26 >= 0) {
    unsigned int v27 = (const char *)v25;
  }
  else {
    unsigned int v27 = *(const char **)v25;
  }
  if (v26 >= 0) {
    unint64_t v28 = *(unsigned __int8 *)(v25 + 23);
  }
  else {
    unint64_t v28 = *(void *)(v25 + 8);
  }
  int String = flatbuffers::FlatBufferBuilder::CreateString(this, v27, v28);
  if (*((unsigned char *)this + 78)) {
    sub_19244C6B0();
  }
  if (*((_DWORD *)this + 18)) {
    sub_19244C684();
  }
  int v30 = String;
  *((unsigned char *)this + 78) = 1;
  int v31 = *((_DWORD *)this + 10);
  if (v9)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v32 = *((_DWORD *)this + 10);
    if (v9 - 1 >= v32) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 4, v32 - v9 + 4, 0);
  }
  if (v14)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v33 = *((_DWORD *)this + 10);
    if (v14 - 1 >= v33) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 6, v33 - v14 + 4, 0);
  }
  if (v19)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v34 = *((_DWORD *)this + 10);
    if (v19 - 1 >= v34) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 12, v34 - v19 + 4, 0);
  }
  if (v24)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v35 = *((_DWORD *)this + 10);
    if (v24 - 1 >= v35) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 8, v35 - v24 + 4, 0);
  }
  if (v30)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v36 = *((_DWORD *)this + 10);
    if (v30 - 1 >= v36) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 10, v36 - v30 + 4, 0);
  }
  unsigned int v37 = flatbuffers::FlatBufferBuilder::EndTable(this, v31);
  uint64_t v38 = (int *)(*((void *)this + 6) + *((void *)this + 4) - v37);
  unint64_t v39 = (unsigned __int16 *)((char *)v38 - *v38);
  unsigned int v40 = *v39;
  if (v40 < 5 || !v39[2]) {
    sub_19244C8C0();
  }
  if (v40 < 7 || !v39[3]) {
    sub_19244C8C0();
  }
  flatbuffers::FlatBufferBuilder::Finish(this, v37, 0, 1);
  return (*((_DWORD *)this + 10) - v4);
}

uint64_t sub_19244AA48(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer17SerializeFunctionERKNS_10E5FunctionEbE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer17SerializeFunctionERKNS_10E5FunctionEbE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer17SerializeFunctionERKNS_10E5FunctionEbE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer17SerializeFunctionERKNS_10E5FunctionEbE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19244AAB8()
{
  return &unk_1EE39ADE8;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVector<Block>(flatbuffers::FlatBufferBuilder *this, uint64_t a2, uint64_t a3)
{
  if (*((unsigned char *)this + 78)) {
    sub_19244C6B0();
  }
  if (*((_DWORD *)this + 18)) {
    sub_19244C684();
  }
  *((unsigned char *)this + 78) = 1;
  uint64_t v6 = 4 * a3;
  flatbuffers::FlatBufferBuilder::PreAlign((uint64_t)this, 4 * a3, 4uLL);
  flatbuffers::FlatBufferBuilder::PreAlign((uint64_t)this, v6, 4uLL);
  if (a3)
  {
    uint64_t v7 = a2 - 4;
    uint64_t v8 = a3;
    do
    {
      uint64_t v9 = v8 - 1;
      flatbuffers::FlatBufferBuilder::PushElement<flatbuffers::String>((uint64_t)this, *(_DWORD *)(v7 + 4 * v8));
      uint64_t v8 = v9;
    }
    while (v9);
  }

  return flatbuffers::FlatBufferBuilder::EndVector(this, a3);
}

void sub_19244AB78()
{
}

void *sub_19244AB8C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1EE39AE08;
  result[1] = v3;
  return result;
}

uint64_t sub_19244ABD4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE39AE08;
  a2[1] = v2;
  return result;
}

uint64_t sub_19244AC00(uint64_t a1, uint64_t a2)
{
  int v54 = *(_DWORD *)(a2 + 40);
  std::string __p = 0;
  uint64_t v56 = 0;
  unint64_t v57 = 0;
  unint64_t v4 = *(void *)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8)) + 24);
  if (v4)
  {
    if (v4 >> 62) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    std::string __p = (char *)operator new(4 * v4);
    uint64_t v56 = __p;
    unint64_t v57 = &__p[4 * v4];
  }
  unsigned int v5 = *(uint64_t **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8)) + 16);
  if (v5)
  {
    while (1)
    {
      int v7 = *((char *)v5 + 39);
      if (v7 >= 0) {
        uint64_t v8 = (const char *)(v5 + 2);
      }
      else {
        uint64_t v8 = (const char *)v5[2];
      }
      if (v7 >= 0) {
        unint64_t v9 = *((unsigned __int8 *)v5 + 39);
      }
      else {
        unint64_t v9 = v5[3];
      }
      int String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a2, v8, v9);
      int v11 = *((char *)v5 + 63);
      if (v11 >= 0) {
        uint64_t v12 = (const char *)(v5 + 5);
      }
      else {
        uint64_t v12 = (const char *)v5[5];
      }
      if (v11 >= 0) {
        unint64_t v13 = *((unsigned __int8 *)v5 + 63);
      }
      else {
        unint64_t v13 = v5[6];
      }
      int v14 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a2, v12, v13);
      if (*(unsigned char *)(a2 + 78))
      {
        int v48 = 342;
        uint64_t v49 = "NotNested";
        std::string::size_type v50 = "!nested";
        goto LABEL_65;
      }
      if (*(_DWORD *)(a2 + 72))
      {
        int v48 = 344;
        std::string::size_type v50 = "!num_field_loc";
        uint64_t v49 = "NotNested";
LABEL_65:
        __assert_rtn(v49, "flatbuffer_builder.h", v48, v50);
      }
      int v15 = v14;
      *(unsigned char *)(a2 + 78) = 1;
      int v16 = *(_DWORD *)(a2 + 40);
      if (String)
      {
        flatbuffers::FlatBufferBuilder::Align(a2, 4uLL);
        unsigned int v17 = *(_DWORD *)(a2 + 40);
        if (String - 1 >= v17) {
          goto LABEL_62;
        }
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(a2, 4, v17 - String + 4, 0);
      }
      if (v15)
      {
        flatbuffers::FlatBufferBuilder::Align(a2, 4uLL);
        unsigned int v18 = *(_DWORD *)(a2 + 40);
        if (v15 - 1 >= v18)
        {
LABEL_62:
          int v48 = 329;
          uint64_t v49 = "ReferTo";
          std::string::size_type v50 = "off && off <= size";
          goto LABEL_65;
        }
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(a2, 6, v18 - v15 + 4, 0);
      }
      unsigned int v19 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a2, v16);
      unsigned int v20 = v19;
      int v21 = (int *)(*(void *)(a2 + 48) + *(void *)(a2 + 32) - v19);
      uint64_t v22 = (unsigned __int16 *)((char *)v21 - *v21);
      if (*v22 < 5u || !v22[2]) {
        __assert_rtn("Required", "flatbuffer_builder.h", 1219, "ok");
      }
      char v23 = v56;
      if (v56 >= v57) {
        break;
      }
      *(_DWORD *)uint64_t v56 = v19;
      uint64_t v6 = (uint64_t)(v56 + 4);
LABEL_7:
      uint64_t v56 = (char *)v6;
      unsigned int v5 = (uint64_t *)*v5;
      if (!v5) {
        goto LABEL_51;
      }
    }
    int v24 = __p;
    uint64_t v25 = (v56 - __p) >> 2;
    unint64_t v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 62) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v27 = v57 - __p;
    if ((v57 - __p) >> 1 > v26) {
      unint64_t v26 = v27 >> 1;
    }
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v28 = v26;
    }
    if (v28)
    {
      if (v28 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unsigned int v29 = operator new(4 * v28);
      int v30 = &v29[4 * v25];
      *(_DWORD *)int v30 = v20;
      uint64_t v6 = (uint64_t)(v30 + 4);
      if (v56 == __p) {
        goto LABEL_48;
      }
    }
    else
    {
      unsigned int v29 = 0;
      int v30 = (char *)(4 * v25);
      *(_DWORD *)(4 * v25) = v20;
      uint64_t v6 = 4 * v25 + 4;
      if (v56 == __p)
      {
LABEL_48:
        std::string __p = v30;
        unint64_t v57 = &v29[4 * v28];
        if (v24) {
          operator delete(v24);
        }
        goto LABEL_7;
      }
    }
    unint64_t v31 = v56 - 4 - __p;
    if (v31 < 0x2C) {
      goto LABEL_76;
    }
    if ((unint64_t)(__p - v29) < 0x20) {
      goto LABEL_76;
    }
    uint64_t v32 = (v31 >> 2) + 1;
    uint64_t v33 = 4 * (v32 & 0x7FFFFFFFFFFFFFF8);
    unsigned int v34 = &v56[-v33];
    v30 -= v33;
    unsigned int v35 = &v29[4 * v25 - 16];
    unsigned int v36 = v56 - 16;
    uint64_t v37 = v32 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v38 = *(_OWORD *)v36;
      *(v35 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = *((_OWORD *)v36 - 1);
      *unsigned int v35 = v38;
      v35 -= 2;
      v36 -= 32;
      v37 -= 8;
    }
    while (v37);
    char v23 = v34;
    if (v32 != (v32 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_76:
      do
      {
        int v39 = *((_DWORD *)v23 - 1);
        v23 -= 4;
        *((_DWORD *)v30 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v39;
        v30 -= 4;
      }
      while (v23 != __p);
    }
    goto LABEL_48;
  }
  uint64_t v6 = (uint64_t)v56;
LABEL_51:
  if ((char *)v6 == __p) {
    unsigned int v40 = (unsigned int *)&flatbuffers::data<flatbuffers::Offset<E5RT_FB::KeyValuePair>,std::allocator<flatbuffers::Offset<E5RT_FB::KeyValuePair>>>(std::vector<flatbuffers::Offset<E5RT_FB::KeyValuePair>> &)::t;
  }
  else {
    unsigned int v40 = (unsigned int *)__p;
  }
  int v41 = flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<E5RT_FB::KeyValuePair>((flatbuffers::FlatBufferBuilder *)a2, v40, (v6 - (uint64_t)__p) >> 2);
  if (*(unsigned char *)(a2 + 78))
  {
    unsigned int v51 = "!nested";
    int v52 = 342;
    uint64_t v53 = "NotNested";
    goto LABEL_69;
  }
  if (*(_DWORD *)(a2 + 72))
  {
    unsigned int v51 = "!num_field_loc";
    int v52 = 344;
    uint64_t v53 = "NotNested";
    goto LABEL_69;
  }
  int v42 = v41;
  *(unsigned char *)(a2 + 78) = 1;
  int v43 = *(_DWORD *)(a2 + 40);
  if (!v41) {
    goto LABEL_59;
  }
  flatbuffers::FlatBufferBuilder::Align(a2, 4uLL);
  unsigned int v44 = *(_DWORD *)(a2 + 40);
  if (v42 - 1 >= v44)
  {
    unsigned int v51 = "off && off <= size";
    int v52 = 329;
    uint64_t v53 = "ReferTo";
LABEL_69:
    __assert_rtn(v53, "flatbuffer_builder.h", v52, v51);
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(a2, 4, v44 - v42 + 4, 0);
LABEL_59:
  int v45 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a2, v43);
  flatbuffers::FlatBufferBuilder::Finish((flatbuffers::FlatBufferBuilder *)a2, v45, 0, 1);
  int v46 = *(_DWORD *)(a2 + 40);
  if (__p) {
    operator delete(__p);
  }
  return (v46 - v54);
}

void sub_19244B0D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19244B118(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT12E5Serializer18SerializeBuildInfoERKNS_11E5BuildInfoEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN4E5RT12E5Serializer18SerializeBuildInfoERKNS_11E5BuildInfoEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT12E5Serializer18SerializeBuildInfoERKNS_11E5BuildInfoEE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT12E5Serializer18SerializeBuildInfoERKNS_11E5BuildInfoEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19244B188()
{
  return &unk_1EE39AE68;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVectorOfSortedTables<E5RT_FB::KeyValuePair>(flatbuffers::FlatBufferBuilder *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = &a2[a3];
  unint64_t v13 = a1;
  if (a3 < 129)
  {
LABEL_5:
    int v11 = 0;
    unint64_t v8 = 0;
  }
  else
  {
    int v7 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    unint64_t v8 = a3;
    while (1)
    {
      unint64_t v9 = (unsigned int *)operator new(4 * v8, v7);
      if (v9) {
        break;
      }
      BOOL v10 = v8 > 1;
      v8 >>= 1;
      if (!v10) {
        goto LABEL_5;
      }
    }
    int v11 = v9;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>(a2, v6, (uint64_t *)&v13, a3, v11, v8);
  if (v11) {
    operator delete(v11);
  }
  return flatbuffers::FlatBufferBuilder::CreateVector<Block>(a1, (uint64_t)a2, a3);
}

void sub_19244B260(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>(unsigned int *a1, unsigned int *a2, uint64_t *a3, unint64_t a4, unsigned int *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    unint64_t v8 = a1;
    if (a4 == 2)
    {
      uint64_t v9 = *(a2 - 1);
      uint64_t v10 = *(void *)(*a3 + 48) + *(void *)(*a3 + 32);
      uint64_t v11 = *a1;
      uint64_t v12 = (unsigned int *)(v10 - v9 + *(unsigned __int16 *)(v10 - v9 - *(int *)(v10 - v9) + 4));
      unint64_t v13 = (unsigned int *)((char *)v12 + *v12);
      int v14 = (unsigned int *)(v10 - v11 + *(unsigned __int16 *)(v10 - v11 - *(int *)(v10 - v11) + 4));
      uint64_t v15 = *v14;
      unsigned int v18 = *v13;
      int v16 = v13 + 1;
      unsigned int v17 = v18;
      unsigned int v19 = *(unsigned int *)((char *)v14 + v15);
      if (v19 >= v18) {
        size_t v20 = v17;
      }
      else {
        size_t v20 = v19;
      }
      int v21 = memcmp(v16, (char *)v14 + v15 + 4, v20);
      BOOL v22 = v17 < v19;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (v22)
      {
        *unint64_t v8 = v9;
        *(a2 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v11;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      uint64_t v24 = a4 >> 1;
      uint64_t v25 = &a1[a4 >> 1];
      unint64_t v26 = a4 - (a4 >> 1);
      if ((uint64_t)a4 <= a6)
      {
        unint64_t v27 = a4 >> 1;
        std::__stable_sort_move<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>(a1, v25, (uint64_t)a3, a4 >> 1, a5);
        unint64_t v72 = v27;
        unint64_t v28 = &a5[v27];
        std::__stable_sort_move<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>(v25, a2, (uint64_t)a3, v26, v28);
        uint64_t v73 = *a3;
        unsigned int v29 = v8;
        int v30 = v28;
        unint64_t v31 = a5;
        uint64_t v32 = &a5[a4];
        do
        {
          if (v30 == v32)
          {
            if (v31 == v28) {
              return;
            }
            unint64_t v62 = (char *)&a5[v72] - (char *)v31 - 4;
            if (v62 >= 0x1C && (unint64_t)((char *)v29 - (char *)v31) >= 0x20)
            {
              uint64_t v66 = 0;
              uint64_t v67 = (v62 >> 2) + 1;
              uint64_t v68 = v67 & 0x7FFFFFFFFFFFFFF8;
              uint64_t v63 = &v8[v68];
              unint64_t v64 = &v31[v68];
              uint64_t v69 = v67 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                uint64_t v70 = &v8[v66];
                long long v71 = *(_OWORD *)&v31[v66 + 4];
                *(_OWORD *)uint64_t v70 = *(_OWORD *)&v31[v66];
                *((_OWORD *)v70 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v71;
                v66 += 8;
                v69 -= 8;
              }
              while (v69);
              if (v67 == (v67 & 0x7FFFFFFFFFFFFFF8)) {
                return;
              }
            }
            else
            {
              uint64_t v63 = v8;
              unint64_t v64 = v31;
            }
            do
            {
              unsigned int v65 = *v64++;
              *v63++ = v65;
            }
            while (v64 != v28);
            return;
          }
          uint64_t v33 = v30;
          uint64_t v34 = *v30;
          uint64_t v35 = *(void *)(v73 + 48) + *(void *)(v73 + 32);
          uint64_t v36 = *v31;
          uint64_t v37 = (unsigned int *)(v35 - v34 + *(unsigned __int16 *)(v35 - v34 - *(int *)(v35 - v34) + 4));
          long long v38 = (unsigned int *)((char *)v37 + *v37);
          int v39 = (unsigned int *)(v35 - v36 + *(unsigned __int16 *)(v35 - v36 - *(int *)(v35 - v36) + 4));
          uint64_t v40 = *v39;
          unsigned int v43 = *v38;
          int v41 = v38 + 1;
          unsigned int v42 = v43;
          unsigned int v44 = *(unsigned int *)((char *)v39 + v40);
          if (v44 >= v43) {
            size_t v45 = v42;
          }
          else {
            size_t v45 = v44;
          }
          int v46 = memcmp(v41, (char *)v39 + v40 + 4, v45);
          BOOL v47 = v46 < 0;
          if (!v46) {
            BOOL v47 = v42 < v44;
          }
          if (v47) {
            unsigned int v48 = v34;
          }
          else {
            unsigned int v48 = v36;
          }
          v31 += !v47;
          int v30 = &v33[v47];
          *v8++ = v48;
          ++v29;
        }
        while (v31 != v28);
        if (v30 != v32)
        {
          uint64_t v49 = -4;
          if (!v47) {
            uint64_t v49 = 0;
          }
          unint64_t v50 = (char *)&a5[a4] - (char *)v33 + v49 - 4;
          if (v50 < 0x3C) {
            goto LABEL_54;
          }
          BOOL v51 = !v47;
          uint64_t v52 = 4;
          if (v51) {
            uint64_t v52 = 0;
          }
          if ((unint64_t)((char *)v29 - (char *)v33 - v52) < 0x20) {
            goto LABEL_54;
          }
          uint64_t v53 = 0;
          uint64_t v54 = (v50 >> 2) + 1;
          uint64_t v55 = v54 & 0x7FFFFFFFFFFFFFF8;
          uint64_t v56 = &v8[v55];
          unint64_t v57 = &v30[v55];
          uint64_t v58 = v54 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            unint64_t v59 = &v8[v53];
            long long v60 = *(_OWORD *)&v30[v53 + 4];
            *(_OWORD *)unint64_t v59 = *(_OWORD *)&v30[v53];
            *((_OWORD *)v59 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v60;
            v53 += 8;
            v58 -= 8;
          }
          while (v58);
          unint64_t v8 = v56;
          int v30 = v57;
          if (v54 != (v54 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_54:
            do
            {
              unsigned int v61 = *v30++;
              *v8++ = v61;
            }
            while (v30 != v32);
          }
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>(a1, v25, a3, a4 >> 1, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>(v25, a2, a3, v26, a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>((uint64_t)v8, v25, a2, a3, v24, v26, (char *)a5, a6);
      }
    }
    else
    {
      std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>(a1, a2, (uint64_t)a3);
    }
  }
}

unsigned int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  if (result != a2)
  {
    unint64_t v3 = a2;
    unint64_t v4 = result;
    unsigned int v5 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v6 = 0;
      uint64_t v7 = *(void *)(*(void *)a3 + 48) + *(void *)(*(void *)a3 + 32);
      unint64_t v8 = result;
      do
      {
        uint64_t v11 = *v8;
        uint64_t v10 = v8[1];
        unint64_t v8 = v5;
        uint64_t v12 = (unsigned int *)(v7 - v10 + *(unsigned __int16 *)(v7 - v10 - *(int *)(v7 - v10) + 4));
        unint64_t v13 = (unsigned int *)((char *)v12 + *v12);
        int v14 = (unsigned int *)(v7 - v11 + *(unsigned __int16 *)(v7 - v11 - *(int *)(v7 - v11) + 4));
        uint64_t v15 = *v14;
        unsigned int v18 = *v13;
        int v16 = v13 + 1;
        unsigned int v17 = v18;
        unsigned int v19 = *(unsigned int *)((char *)v14 + v15);
        if (v19 >= v18) {
          size_t v20 = v17;
        }
        else {
          size_t v20 = v19;
        }
        __n128 result = (unsigned int *)memcmp(v16, (char *)v14 + v15 + 4, v20);
        BOOL v21 = v17 < v19;
        if (result) {
          BOOL v21 = (int)result < 0;
        }
        if (v21)
        {
          uint64_t v22 = v6;
          do
          {
            *(unsigned int *)((char *)v4 + v22 + 4) = v11;
            if (!v22)
            {
              uint64_t v9 = v4;
              goto LABEL_5;
            }
            uint64_t v11 = *(unsigned int *)((char *)v4 + v22 - 4);
            char v23 = (unsigned int *)(v7 - v10 + *(unsigned __int16 *)(v7 - v10 - *(int *)(v7 - v10) + 4));
            uint64_t v24 = (unsigned int *)((char *)v23 + *v23);
            uint64_t v25 = (unsigned int *)(v7 - v11 + *(unsigned __int16 *)(v7 - v11 - *(int *)(v7 - v11) + 4));
            uint64_t v26 = *v25;
            unsigned int v29 = *v24;
            unint64_t v27 = v24 + 1;
            unsigned int v28 = v29;
            unsigned int v30 = *(unsigned int *)((char *)v25 + v26);
            if (v30 >= v29) {
              size_t v31 = v28;
            }
            else {
              size_t v31 = v30;
            }
            __n128 result = (unsigned int *)memcmp(v27, (char *)v25 + v26 + 4, v31);
            BOOL v32 = v28 < v30;
            if (result) {
              BOOL v32 = (int)result < 0;
            }
            v22 -= 4;
          }
          while (v32);
          uint64_t v9 = (unsigned int *)((char *)v4 + v22 + 4);
LABEL_5:
          unint64_t v3 = a2;
          unsigned int *v9 = v10;
        }
        unsigned int v5 = v8 + 1;
        v6 += 4;
      }
      while (v8 + 1 != v3);
    }
  }
  return result;
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>(unsigned int *a1, unsigned int *a2, uint64_t a3, unint64_t a4, unsigned int *a5)
{
  if (a4)
  {
    unsigned int v5 = a5;
    unint64_t v8 = a2;
    if (a4 == 2)
    {
      uint64_t v10 = *(a2 - 1);
      uint64_t v11 = *(void *)(*(void *)a3 + 48) + *(void *)(*(void *)a3 + 32);
      uint64_t v12 = *a1;
      unint64_t v13 = (unsigned int *)(v11 - v10 + *(unsigned __int16 *)(v11 - v10 - *(int *)(v11 - v10) + 4));
      int v14 = (unsigned int *)((char *)v13 + *v13);
      uint64_t v15 = (unsigned int *)(v11 - v12 + *(unsigned __int16 *)(v11 - v12 - *(int *)(v11 - v12) + 4));
      uint64_t v16 = *v15;
      unsigned int v19 = *v14;
      unsigned int v17 = v14 + 1;
      unsigned int v18 = v19;
      unsigned int v20 = *(unsigned int *)((char *)v15 + v16);
      if (v20 >= v19) {
        size_t v21 = v18;
      }
      else {
        size_t v21 = v20;
      }
      int v22 = memcmp(v17, (char *)v15 + v16 + 4, v21);
      BOOL v24 = v18 < v20;
      if (v22) {
        BOOL v24 = v22 < 0;
      }
      if (v24)
      {
        *unsigned int v5 = v10;
        unsigned int v25 = *a1;
      }
      else
      {
        *unsigned int v5 = v12;
        unsigned int v25 = *(v8 - 1);
      }
      v5[1] = v25;
    }
    else
    {
      if (a4 == 1)
      {
        *a5 = *a1;
        return result;
      }
      if ((uint64_t)a4 > 8)
      {
        unint64_t v26 = a4 >> 1;
        uint64_t v27 = a4 >> 1;
        unsigned int v28 = &a1[v27];
        std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>(a1, &a1[v27], a3, a4 >> 1, a5, a4 >> 1);
        unint64_t v74 = a4 >> 1;
        std::__stable_sort<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>(&a1[v27], v8, a3, a4 - v26, &v5[v27], a4 - v26);
        unint64_t v75 = a1;
        uint64_t v76 = *(void *)a3;
        unsigned int v29 = v5;
        unsigned int v30 = a1;
        size_t v31 = &a1[v27];
        do
        {
          if (v31 == v8)
          {
            if (v30 == v28) {
              return result;
            }
            unint64_t v64 = (char *)&v75[v74] - (char *)v30 - 4;
            if (v64 >= 0x1C && (unint64_t)((char *)v29 - (char *)v30) >= 0x20)
            {
              uint64_t v68 = 0;
              uint64_t v69 = (v64 >> 2) + 1;
              uint64_t v70 = v69 & 0x7FFFFFFFFFFFFFF8;
              unsigned int v65 = &v5[v70];
              uint64_t v66 = &v30[v70];
              uint64_t v71 = v69 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                unint64_t v72 = &v5[v68];
                __n128 result = *(__n128 *)&v30[v68];
                long long v73 = *(_OWORD *)&v30[v68 + 4];
                *(__n128 *)unint64_t v72 = result;
                *((_OWORD *)v72 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v73;
                v68 += 8;
                v71 -= 8;
              }
              while (v71);
              if (v69 == (v69 & 0x7FFFFFFFFFFFFFF8)) {
                return result;
              }
            }
            else
            {
              unsigned int v65 = v5;
              uint64_t v66 = v30;
            }
            do
            {
              unsigned int v67 = *v66++;
              *v65++ = v67;
            }
            while (v66 != v28);
            return result;
          }
          BOOL v32 = v31;
          uint64_t v33 = *v31;
          uint64_t v34 = *(void *)(v76 + 48) + *(void *)(v76 + 32);
          uint64_t v35 = *v30;
          uint64_t v36 = (unsigned int *)(v34 - v33 + *(unsigned __int16 *)(v34 - v33 - *(int *)(v34 - v33) + 4));
          uint64_t v37 = (unsigned int *)((char *)v36 + *v36);
          long long v38 = (unsigned int *)(v34 - v35 + *(unsigned __int16 *)(v34 - v35 - *(int *)(v34 - v35) + 4));
          uint64_t v39 = *v38;
          unsigned int v42 = *v37;
          uint64_t v40 = v37 + 1;
          unsigned int v41 = v42;
          unsigned int v43 = v8;
          unsigned int v44 = *(unsigned int *)((char *)v38 + v39);
          if (v44 >= v42) {
            size_t v45 = v41;
          }
          else {
            size_t v45 = v44;
          }
          int v46 = memcmp(v40, (char *)v38 + v39 + 4, v45);
          BOOL v47 = v41 >= v44;
          unint64_t v8 = v43;
          int v48 = !v47;
          BOOL v49 = v46 < 0;
          if (!v46) {
            BOOL v49 = v48;
          }
          if (v49) {
            unsigned int v50 = v33;
          }
          else {
            unsigned int v50 = v35;
          }
          size_t v31 = &v32[v49];
          v30 += !v49;
          *v5++ = v50;
          ++v29;
        }
        while (v30 != v28);
        if (v31 != v43)
        {
          uint64_t v51 = -4;
          if (!v49) {
            uint64_t v51 = 0;
          }
          unint64_t v52 = (char *)v43 - (char *)v32 + v51 - 4;
          if (v52 < 0x3C) {
            goto LABEL_57;
          }
          BOOL v53 = !v49;
          uint64_t v54 = 4;
          if (v53) {
            uint64_t v54 = 0;
          }
          if ((unint64_t)((char *)v29 - (char *)v32 - v54) < 0x20) {
            goto LABEL_57;
          }
          uint64_t v55 = 0;
          uint64_t v56 = (v52 >> 2) + 1;
          uint64_t v57 = v56 & 0x7FFFFFFFFFFFFFF8;
          uint64_t v58 = &v5[v57];
          unint64_t v59 = &v31[v57];
          uint64_t v60 = v56 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            unsigned int v61 = &v5[v55];
            __n128 result = *(__n128 *)&v31[v55];
            long long v62 = *(_OWORD *)&v31[v55 + 4];
            *(__n128 *)unsigned int v61 = result;
            *((_OWORD *)v61 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v62;
            v55 += 8;
            v60 -= 8;
          }
          while (v60);
          unsigned int v5 = v58;
          size_t v31 = v59;
          if (v56 != (v56 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_57:
            do
            {
              unsigned int v63 = *v31++;
              *v5++ = v63;
            }
            while (v31 != v43);
          }
        }
      }
      else
      {
        std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>(a1, a2, a5, a3);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>(uint64_t result, unsigned int *a2, unsigned int *a3, uint64_t *a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v90 = a6;
  if (!a6) {
    return result;
  }
  uint64_t v11 = (unsigned int *)result;
  while (v90 > a8 && a5 > a8)
  {
    if (!a5) {
      return result;
    }
    uint64_t v12 = *a2;
    uint64_t v13 = *(void *)(*a4 + 48) + *(void *)(*a4 + 32);
    int v14 = (unsigned int *)(v13 - v12 + *(unsigned __int16 *)(v13 - v12 - *(int *)(v13 - v12) + 4));
    uint64_t v15 = *v14;
    uint64_t v16 = (char *)v14 + v15 + 4;
    unsigned int v17 = *(unsigned int *)((char *)v14 + v15);
    while (1)
    {
      uint64_t v18 = *v11;
      unsigned int v19 = (unsigned int *)(v13 - v18 + *(unsigned __int16 *)(v13 - v18 - *(int *)(v13 - v18) + 4));
      uint64_t v20 = *v19;
      unsigned int v21 = *(unsigned int *)((char *)v19 + v20);
      if (v21 >= v17) {
        size_t v22 = v17;
      }
      else {
        size_t v22 = v21;
      }
      __n128 result = memcmp(v16, (char *)v19 + v20 + 4, v22);
      BOOL v23 = v17 < v21;
      if (result) {
        BOOL v23 = (int)result < 0;
      }
      if (v23) {
        break;
      }
      ++v11;
      if (!--a5) {
        return result;
      }
    }
    uint64_t v24 = v90;
    uint64_t v87 = a4;
    if (a5 >= v90)
    {
      if (a5 == 1)
      {
        unsigned int *v11 = v12;
        *a2 = v18;
        return result;
      }
      if (a5 >= 0) {
        uint64_t v45 = a5;
      }
      else {
        uint64_t v45 = a5 + 1;
      }
      uint64_t v84 = v45 >> 1;
      unint64_t v26 = &v11[v45 >> 1];
      unsigned int v25 = a3;
      if (a3 != a2)
      {
        unint64_t v46 = a3 - a2;
        BOOL v47 = (unsigned int *)(v13 - *v26 + *(unsigned __int16 *)(v13 - *v26 - *(int *)(v13 - *v26) + 4));
        int v48 = (unsigned int *)((char *)v47 + *v47);
        unsigned int v49 = *v48;
        __s1a = v48 + 1;
        unsigned int v25 = a2;
        do
        {
          unsigned int v50 = &v25[v46 >> 1];
          unsigned int v52 = *v50;
          uint64_t v51 = v50 + 1;
          BOOL v53 = (unsigned int *)(v13 - v52 + *(unsigned __int16 *)(v13 - v52 - *(int *)(v13 - v52) + 4));
          uint64_t v54 = *v53;
          unsigned int v55 = *(unsigned int *)((char *)v53 + v54);
          if (v49 >= v55) {
            size_t v56 = v55;
          }
          else {
            size_t v56 = v49;
          }
          int v57 = memcmp((char *)v53 + v54 + 4, __s1a, v56);
          BOOL v58 = v55 < v49;
          if (v57) {
            BOOL v58 = v57 < 0;
          }
          if (v58) {
            v46 += ~(v46 >> 1);
          }
          else {
            v46 >>= 1;
          }
          if (v58) {
            unsigned int v25 = v51;
          }
        }
        while (v46);
      }
      uint64_t v42 = v90;
      unsigned int v41 = a2;
      uint64_t v43 = v25 - a2;
      a4 = v87;
      uint64_t v40 = v84;
      unsigned int v44 = v25;
      if (v26 == a2) {
        goto LABEL_66;
      }
    }
    else
    {
      if (v90 < 0) {
        uint64_t v24 = v90 + 1;
      }
      uint64_t v83 = v24 >> 1;
      unsigned int v25 = &a2[v24 >> 1];
      unint64_t v26 = a2;
      if (v11 != a2)
      {
        unint64_t v27 = a2 - v11;
        unsigned int v28 = (unsigned int *)(v13 - *v25 + *(unsigned __int16 *)(v13 - *v25 - *(int *)(v13 - *v25) + 4));
        unsigned int v29 = (unsigned int *)((char *)v28 + *v28);
        unsigned int v30 = *v29;
        __s1 = v29 + 1;
        unint64_t v26 = v11;
        do
        {
          size_t v31 = &v26[v27 >> 1];
          unsigned int v33 = *v31;
          BOOL v32 = v31 + 1;
          uint64_t v34 = (unsigned int *)(v13 - v33 + *(unsigned __int16 *)(v13 - v33 - *(int *)(v13 - v33) + 4));
          uint64_t v35 = *v34;
          unsigned int v36 = *(unsigned int *)((char *)v34 + v35);
          if (v36 >= v30) {
            size_t v37 = v30;
          }
          else {
            size_t v37 = v36;
          }
          int v38 = memcmp(__s1, (char *)v34 + v35 + 4, v37);
          BOOL v39 = v30 < v36;
          if (v38) {
            BOOL v39 = v38 < 0;
          }
          if (v39)
          {
            v27 >>= 1;
          }
          else
          {
            unint64_t v26 = v32;
            v27 += ~(v27 >> 1);
          }
        }
        while (v27);
      }
      uint64_t v40 = v26 - v11;
      a4 = v87;
      uint64_t v42 = v90;
      unsigned int v41 = a2;
      uint64_t v43 = v83;
      unsigned int v44 = v25;
      if (v26 == a2) {
        goto LABEL_66;
      }
    }
    unsigned int v44 = v26;
    if (v41 == v25) {
      goto LABEL_66;
    }
    if (v26 + 1 == v41)
    {
      uint64_t v85 = v40;
      unsigned int v67 = *v26;
      int64_t v68 = (char *)v25 - (char *)v41;
      memmove(v26, v41, (char *)v25 - (char *)v41);
      unsigned int v44 = (unsigned int *)((char *)v26 + v68);
      *unsigned int v44 = v67;
      uint64_t v40 = v85;
      a5 -= v85;
      uint64_t v66 = v42 - v43;
      if (v85 + v43 >= a5 + v66) {
        goto LABEL_79;
      }
LABEL_67:
      __n128 result = std::__inplace_merge<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>(v11, v26, v44, a4, v40, v43, a7, a8);
      uint64_t v11 = v44;
      uint64_t v90 = v66;
      a2 = v25;
      if (!v66) {
        return result;
      }
    }
    else
    {
      if (v41 + 1 != v25)
      {
        uint64_t v59 = v41 - v26;
        uint64_t v60 = v25 - v41;
        if (v59 == v60)
        {
          uint64_t v61 = 0;
          do
          {
            unsigned int v62 = v26[v61];
            v26[v61] = v41[v61];
            uint64_t v63 = (uint64_t)&v26[v61 + 1];
            v41[v61] = v62;
            uint64_t v64 = (uint64_t)&v41[++v61];
          }
          while ((unsigned int *)v63 != v41 && v64 != (void)v25);
          unsigned int v44 = v41;
          a5 -= v40;
          uint64_t v66 = v42 - v43;
          if (v40 + v43 < a5 + v66) {
            goto LABEL_67;
          }
        }
        else
        {
          uint64_t v70 = v25 - v41;
          uint64_t v71 = v41 - v26;
          do
          {
            uint64_t v72 = v71;
            uint64_t v71 = v70;
            uint64_t v70 = v72 % v70;
          }
          while (v70);
          if (v71)
          {
            long long v73 = &v26[v71];
            do
            {
              unsigned int v75 = *--v73;
              unsigned int v74 = v75;
              uint64_t v76 = &v73[v59];
              size_t v77 = v73;
              do
              {
                int64_t v78 = v77;
                size_t v77 = v76;
                *int64_t v78 = *v76;
                uint64_t v79 = v25 - v76;
                BOOL v80 = __OFSUB__(v59, v79);
                uint64_t v82 = v59 - v79;
                char v81 = (v82 < 0) ^ v80;
                uint64_t v76 = &v26[v82];
                if (v81) {
                  uint64_t v76 = &v77[v59];
                }
              }
              while (v76 != v73);
              *size_t v77 = v74;
            }
            while (v73 != v26);
          }
          unsigned int v44 = &v26[v60];
          a5 -= v40;
          uint64_t v66 = v42 - v43;
          if (v40 + v43 < a5 + v66) {
            goto LABEL_67;
          }
        }
        goto LABEL_79;
      }
      uint64_t v86 = v40;
      unsigned int v69 = *(v25 - 1);
      unsigned int v44 = v26 + 1;
      if (v25 - 1 != v26) {
        memmove(v26 + 1, v26, (char *)(v25 - 1) - (char *)v26);
      }
      *unint64_t v26 = v69;
      uint64_t v40 = v86;
LABEL_66:
      a5 -= v40;
      uint64_t v66 = v42 - v43;
      if (v40 + v43 < a5 + v66) {
        goto LABEL_67;
      }
LABEL_79:
      __n128 result = std::__inplace_merge<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>(v44, v25, a3, a4, a5, v66, a7, a8);
      a5 = v40;
      a3 = v44;
      uint64_t v90 = v43;
      a2 = v26;
      if (!v43) {
        return result;
      }
    }
  }

  return std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>((uint64_t)v11, a2, a3, a4, a5, v90, a7);
}

unsigned int *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>(unsigned int *result, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  if (result != a2)
  {
    unsigned int v5 = result + 1;
    *a3 = *result;
    if (result + 1 != a2)
    {
      uint64_t v6 = 0;
      uint64_t v7 = *(void *)(*(void *)a4 + 48) + *(void *)(*(void *)a4 + 32);
      unint64_t v8 = a3;
      uint64_t v9 = a3;
      do
      {
        while (1)
        {
          unsigned int v11 = *v9++;
          unsigned int v10 = v11;
          uint64_t v12 = *v5;
          uint64_t v13 = (unsigned int *)(v7 - v12 + *(unsigned __int16 *)(v7 - v12 - *(int *)(v7 - v12) + 4));
          int v14 = (unsigned int *)((char *)v13 + *v13);
          uint64_t v15 = (unsigned int *)(v7 - v11 + *(unsigned __int16 *)(v7 - v11 - *(int *)(v7 - v11) + 4));
          uint64_t v16 = *v15;
          unsigned int v19 = *v14;
          unsigned int v17 = v14 + 1;
          unsigned int v18 = v19;
          unsigned int v20 = *(unsigned int *)((char *)v15 + v16);
          if (v20 >= v19) {
            size_t v21 = v18;
          }
          else {
            size_t v21 = v20;
          }
          __n128 result = (unsigned int *)memcmp(v17, (char *)v15 + v16 + 4, v21);
          BOOL v22 = v18 < v20;
          if (result) {
            BOOL v22 = (int)result < 0;
          }
          if (v22) {
            break;
          }
          unsigned int *v9 = v12;
          ++v5;
          v6 += 4;
          unint64_t v8 = v9;
          if (v5 == a2) {
            return result;
          }
        }
        v8[1] = v10;
        BOOL v23 = a3;
        if (v8 != a3)
        {
          uint64_t v24 = v6;
          while (1)
          {
            BOOL v23 = (unsigned int *)((char *)a3 + v24);
            uint64_t v25 = *(unsigned int *)((char *)a3 + v24 - 4);
            unint64_t v26 = (unsigned int *)(v7 - *v5 + *(unsigned __int16 *)(v7 - *v5 - *(int *)(v7 - *v5) + 4));
            unint64_t v27 = (unsigned int *)((char *)v26 + *v26);
            unsigned int v28 = (unsigned int *)(v7 - v25 + *(unsigned __int16 *)(v7 - v25 - *(int *)(v7 - v25) + 4));
            uint64_t v29 = *v28;
            unsigned int v32 = *v27;
            unsigned int v30 = v27 + 1;
            unsigned int v31 = v32;
            unsigned int v33 = *(unsigned int *)((char *)v28 + v29);
            size_t v34 = v33 >= v32 ? v31 : v33;
            __n128 result = (unsigned int *)memcmp(v30, (char *)v28 + v29 + 4, v34);
            BOOL v35 = v31 < v33;
            if (result) {
              BOOL v35 = (int)result < 0;
            }
            if (!v35) {
              break;
            }
            *BOOL v23 = v25;
            v24 -= 4;
            if (!v24)
            {
              BOOL v23 = a3;
              break;
            }
          }
        }
        unsigned int v36 = *v5++;
        *BOOL v23 = v36;
        v6 += 4;
        unint64_t v8 = v9;
      }
      while (v5 != a2);
    }
  }
  return result;
}

uint64_t std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,flatbuffers::FlatBufferBuilder::TableKeyComparator<E5RT_FB::KeyValuePair> &,flatbuffers::Offset<E5RT_FB::KeyValuePair> *>(uint64_t __dst, unsigned int *a2, unsigned int *a3, uint64_t *a4, uint64_t a5, uint64_t a6, char *__src)
{
  uint64_t v7 = __src;
  unint64_t v8 = a3;
  uint64_t v9 = a2;
  unsigned int v10 = (unsigned int *)__dst;
  if (a5 <= a6)
  {
    if ((unsigned int *)__dst != a2)
    {
      unint64_t v39 = (unint64_t)a2 - __dst - 4;
      uint64_t v40 = __src;
      unsigned int v41 = (unsigned int *)__dst;
      if (v39 < 0x1C) {
        goto LABEL_62;
      }
      uint64_t v40 = __src;
      unsigned int v41 = (unsigned int *)__dst;
      if ((unint64_t)&__src[-__dst] < 0x20) {
        goto LABEL_62;
      }
      uint64_t v42 = (v39 >> 2) + 1;
      uint64_t v43 = 4 * (v42 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v40 = &__src[v43];
      unsigned int v41 = (unsigned int *)(__dst + v43);
      unsigned int v44 = (long long *)(__dst + 16);
      uint64_t v45 = __src + 16;
      uint64_t v46 = v42 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v47 = *v44;
        *(v45 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = *(v44 - 1);
        *uint64_t v45 = v47;
        v44 += 2;
        v45 += 2;
        v46 -= 8;
      }
      while (v46);
      if (v42 != (v42 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_62:
        do
        {
          int v48 = *v41++;
          *(_DWORD *)uint64_t v40 = v48;
          v40 += 4;
        }
        while (v41 != a2);
      }
      if (v40 != __src)
      {
        uint64_t v49 = *a4;
        while (v9 != v8)
        {
          uint64_t v50 = *v9;
          uint64_t v51 = *(void *)(v49 + 48) + *(void *)(v49 + 32);
          uint64_t v52 = *(unsigned int *)v7;
          BOOL v53 = (unsigned int *)(v51 - v50 + *(unsigned __int16 *)(v51 - v50 - *(int *)(v51 - v50) + 4));
          uint64_t v54 = (unsigned int *)((char *)v53 + *v53);
          unsigned int v55 = (unsigned int *)(v51 - v52 + *(unsigned __int16 *)(v51 - v52 - *(int *)(v51 - v52) + 4));
          uint64_t v56 = *v55;
          unsigned int v59 = *v54;
          int v57 = v54 + 1;
          unsigned int v58 = v59;
          unsigned int v60 = *(unsigned int *)((char *)v55 + v56);
          if (v60 >= v59) {
            size_t v61 = v58;
          }
          else {
            size_t v61 = v60;
          }
          std::string __dst = memcmp(v57, (char *)v55 + v56 + 4, v61);
          BOOL v62 = v58 < v60;
          if (__dst) {
            BOOL v62 = (int)__dst < 0;
          }
          if (v62) {
            unsigned int v63 = v50;
          }
          else {
            unsigned int v63 = v52;
          }
          v7 += 4 * !v62;
          v9 += v62;
          *v10++ = v63;
          if (v7 == v40) {
            return __dst;
          }
        }
        return (uint64_t)memmove(v10, v7, v40 - v7);
      }
    }
  }
  else if (a2 != a3)
  {
    unint64_t v11 = (char *)a3 - (char *)a2 - 4;
    uint64_t v12 = __src;
    uint64_t v13 = a2;
    if (v11 < 0x1C) {
      goto LABEL_63;
    }
    uint64_t v12 = __src;
    uint64_t v13 = a2;
    if ((unint64_t)(__src - (char *)a2) < 0x20) {
      goto LABEL_63;
    }
    uint64_t v14 = (v11 >> 2) + 1;
    uint64_t v15 = v14 & 0x7FFFFFFFFFFFFFF8;
    uint64_t v12 = &__src[v15 * 4];
    uint64_t v13 = &a2[v15];
    uint64_t v16 = (long long *)(a2 + 4);
    unsigned int v17 = __src + 16;
    uint64_t v18 = v14 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v19 = *v16;
      *(v17 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = *(v16 - 1);
      *unsigned int v17 = v19;
      v16 += 2;
      v17 += 2;
      v18 -= 8;
    }
    while (v18);
    if (v14 != (v14 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_63:
      do
      {
        int v20 = *v13++;
        *(_DWORD *)uint64_t v12 = v20;
        v12 += 4;
      }
      while (v13 != a3);
    }
    if (v12 != __src)
    {
      size_t v21 = a3;
      while (v9 != v10)
      {
        uint64_t v77 = *((unsigned int *)v12 - 1);
        uint64_t v22 = *(void *)(*a4 + 48) + *(void *)(*a4 + 32);
        uint64_t v76 = *(v9 - 1);
        BOOL v23 = (unsigned int *)(v22 - v77 + *(unsigned __int16 *)(v22 - v77 - *(int *)(v22 - v77) + 4));
        uint64_t v24 = (unsigned int *)((char *)v23 + *v23);
        uint64_t v25 = (unsigned int *)(v22 - v76 + *(unsigned __int16 *)(v22 - v76 - *(int *)(v22 - v76) + 4));
        uint64_t v26 = *v25;
        unint64_t v27 = v10;
        unsigned int v30 = *v24;
        unsigned int v28 = v24 + 1;
        unsigned int v29 = v30;
        unsigned int v31 = v8;
        unsigned int v32 = v7;
        unsigned int v33 = *(unsigned int *)((char *)v25 + v26);
        if (v33 >= v30) {
          size_t v34 = v29;
        }
        else {
          size_t v34 = v33;
        }
        std::string __dst = memcmp(v28, (char *)v25 + v26 + 4, v34);
        BOOL v35 = v29 >= v33;
        unsigned int v10 = v27;
        uint64_t v7 = v32;
        BOOL v36 = !v35;
        if (__dst) {
          BOOL v36 = (int)__dst < 0;
        }
        BOOL v37 = !v36;
        if (v36) {
          unsigned int v38 = v76;
        }
        else {
          unsigned int v38 = v77;
        }
        if (v37) {
          v12 -= 4;
        }
        else {
          --v9;
        }
        *(v31 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v38;
        unint64_t v8 = v31 - 1;
        --v21;
        if (v12 == v7) {
          return __dst;
        }
      }
      unint64_t v64 = v12 - v7 - 4;
      if (v64 < 0x2C || (unint64_t)(v12 - (char *)v21) < 0x20)
      {
        unsigned int v65 = (unsigned int *)v12;
        uint64_t v66 = v8;
LABEL_51:
        unsigned int v67 = v66 - 1;
        do
        {
          unsigned int v68 = *--v65;
          *v67-- = v68;
        }
        while (v65 != (unsigned int *)v7);
        return __dst;
      }
      uint64_t v69 = 0;
      uint64_t v70 = (v64 >> 2) + 1;
      uint64_t v71 = 4 * (v70 & 0x7FFFFFFFFFFFFFF8);
      unsigned int v65 = (unsigned int *)&v12[-v71];
      uint64_t v66 = &v8[v71 / 0xFFFFFFFFFFFFFFFCLL];
      uint64_t v72 = v70 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v73 = *(_OWORD *)&v12[v69 * 4 - 16];
        unsigned int v74 = &v8[v69];
        *((_OWORD *)v74 - 2) = *(_OWORD *)&v12[v69 * 4 - 32];
        *((_OWORD *)v74 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v73;
        v69 -= 8;
        v72 -= 8;
      }
      while (v72);
      if (v70 != (v70 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_51;
      }
    }
  }
  return __dst;
}

void sub_19244C684()
{
}

void sub_19244C6B0()
{
}

void sub_19244C6DC()
{
  __assert_rtn("ensure_space", "vector_downward.h", 138, "cur_ >= scratch_ && scratch_ >= buf_");
}

void sub_19244C708()
{
}

void sub_19244C734()
{
}

void sub_19244C760()
{
  __assert_rtn("ReferTo", "flatbuffer_builder.h", 329, "off && off <= size");
}

void sub_19244C78C()
{
  __assert_rtn("Finish", "flatbuffer_builder.h", 1133, "strlen(file_identifier) == kFileIdentifierLength");
}

void sub_19244C7B8()
{
}

void sub_19244C7E4()
{
}

void sub_19244C810()
{
}

void sub_19244C83C()
{
}

void sub_19244C868()
{
}

void sub_19244C894()
{
}

void sub_19244C8C0()
{
}

void sub_19244C8EC()
{
}

unint64_t E5RT::SerializerUtils::StringPairHash::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v13 = 0;
  unint64_t v3 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v4 = v3;
  }
  unint64_t v13 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v14, (uint64_t *)a2, v4);
  uint64_t v7 = *(uint64_t **)(v2 + 24);
  uint64_t v6 = v2 + 24;
  unsigned int v5 = v7;
  int v8 = *(char *)(v6 + 23);
  if (v8 >= 0) {
    uint64_t v9 = (uint64_t *)v6;
  }
  else {
    uint64_t v9 = v5;
  }
  if (v8 >= 0) {
    unint64_t v10 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    unint64_t v10 = *(void *)(v6 + 8);
  }
  unint64_t v11 = (unint64_t *)std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v15, v9, v10);
  E5Common::HashCombine(&v13, v11);
  return v13;
}

uint64_t E5RT::SerializerUtils::GetOperandSymbolFlags(E5RT::SerializerUtils *this, const E5RT::E5Operand *a2)
{
  switch((*(unsigned int (**)(E5RT::SerializerUtils *, const E5RT::E5Operand *))(*(void *)this + 40))(this, a2))
  {
    case 0u:
      uint64_t result = 10;
      break;
    case 1u:
      uint64_t result = 17;
      break;
    case 2u:
      uint64_t result = 18;
      break;
    case 3u:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v6, "GetOperandSymbolFlags");
      std::string::basic_string[abi:ne180100]<0>(v4, "Unsupported allocation type for operand.");
      E5RT::Status::Status(v5, 1, v4);
      E5RT::E5RTError::E5RTError(exception, v6, v5);
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

void sub_19244CAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::SerializerUtils::GetOperandSectionDetails(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  unint64_t v32 = 0;
  switch((*(unsigned int (**)(uint64_t))(*(void *)a1 + 40))(a1))
  {
    case 0u:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 6;
      strcpy((char *)&__p, "extern");
      uint64_t v12 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string>(&v30, (uint64_t)&__p);
      unsigned int v31 = v12;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        uint64_t v12 = v31;
        if ((a2 & 1) == 0) {
          goto LABEL_31;
        }
      }
      else if ((a2 & 1) == 0)
      {
        goto LABEL_31;
      }
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 2;
      strcpy((char *)&__p, "in");
      if ((unint64_t)v12 >= v32)
      {
        uint64_t v12 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string>(&v30, (uint64_t)&__p);
        unsigned int v31 = v12;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          uint64_t v12 = v31;
        }
      }
      else
      {
        long long v13 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v12->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
        unsigned int v31 = ++v12;
      }
LABEL_31:
      if ((a2 & 2) != 0)
      {
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 3;
        LODWORD(__p.__r_.__value_.__l.__data_) = 7632239;
        if ((unint64_t)v12 >= v32)
        {
          uint64_t v12 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string>(&v30, (uint64_t)&__p);
          unsigned int v31 = v12;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            uint64_t v12 = v31;
          }
        }
        else
        {
          long long v17 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v12->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v17;
          unsigned int v31 = ++v12;
        }
      }
      if ((unint64_t)v12 >= v32)
      {
        uint64_t v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v30, a3);
      }
      else
      {
        if (*(char *)(a3 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
        }
        else
        {
          long long v18 = *(_OWORD *)a3;
          v12->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
          *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v18;
        }
        uint64_t v7 = v12 + 1;
      }
      unsigned int v31 = v7;
      int v8 = 4;
      goto LABEL_43;
    case 1u:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&__p, "data");
      char v14 = std::vector<std::string>::__push_back_slow_path<std::string>(&v30, (uint64_t)&__p);
      char v15 = (std::string *)v14;
      unsigned int v31 = (std::string *)v14;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        char v15 = v31;
        if ((unint64_t)v31 < v32)
        {
LABEL_19:
          if (*(char *)(a3 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
          }
          else
          {
            long long v16 = *(_OWORD *)a3;
            v15->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
            *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
          }
          uint64_t v7 = v15 + 1;
LABEL_27:
          unsigned int v31 = v7;
          a2 = 3;
          int v8 = 3;
          goto LABEL_43;
        }
      }
      else if ((unint64_t)v14 < v32)
      {
        goto LABEL_19;
      }
      uint64_t v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v30, a3);
      goto LABEL_27;
    case 2u:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&__p, "dynamic");
      uint64_t v9 = std::vector<std::string>::__push_back_slow_path<std::string>(&v30, (uint64_t)&__p);
      unint64_t v10 = (std::string *)v9;
      unsigned int v31 = (std::string *)v9;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if ((unint64_t)v9 < v32) {
          goto LABEL_10;
        }
LABEL_4:
        uint64_t v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v30, a3);
        goto LABEL_25;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      unint64_t v10 = v31;
      if ((unint64_t)v31 >= v32) {
        goto LABEL_4;
      }
LABEL_10:
      if (*(char *)(a3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
      }
      else
      {
        long long v11 = *(_OWORD *)a3;
        v10->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
      }
      uint64_t v7 = v10 + 1;
LABEL_25:
      unsigned int v31 = v7;
      a2 = 1;
      int v8 = 1;
LABEL_43:
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 1;
      LOWORD(__p.__r_.__value_.__l.__data_) = 95;
      long long v19 = (std::string *)v30;
      if (v30 != v7)
      {
        do
        {
          std::string::append(&__p, "_");
          int v20 = SHIBYTE(v19->__r_.__value_.__r.__words[2]);
          if (v20 >= 0) {
            size_t v21 = (const std::string::value_type *)v19;
          }
          else {
            size_t v21 = (const std::string::value_type *)v19->__r_.__value_.__r.__words[0];
          }
          if (v20 >= 0) {
            std::string::size_type size = HIBYTE(v19->__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v19->__r_.__value_.__l.__size_;
          }
          std::string::append(&__p, v21, size);
          ++v19;
        }
        while (v19 != v7);
      }
      std::string::append(&__p, "__");
      *(std::string *)a4 = __p;
      *(_DWORD *)(a4 + 24) = v8;
      *(void *)(a4 + 32) = a2;
      *(unsigned char *)(a4 + 40) = 0;
      int v23 = (std::string *)v30;
      if (v30)
      {
        uint64_t v24 = v31;
        uint64_t v25 = v30;
        if (v31 != v30)
        {
          do
          {
            if (SHIBYTE(v24[-1].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v24[-1].__r_.__value_.__l.__data_);
            }
            --v24;
          }
          while (v24 != v23);
          uint64_t v25 = v30;
        }
        unsigned int v31 = v23;
        operator delete(v25);
      }
      return;
    case 3u:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&__p, "GetOperandSectionDetails");
      std::string::basic_string[abi:ne180100]<0>(v27, "Unsupported allocation type for operand.");
      E5RT::Status::Status(v28, 1, v27);
      E5RT::E5RTError::E5RTError(exception, &__p, v28);
    default:
      a2 = 0;
      int v8 = 0;
      uint64_t v7 = v31;
      goto LABEL_43;
  }
}

void sub_19244D0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23)
{
  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v24 & 1) == 0)
    {
LABEL_8:
      std::vector<std::string>::~vector[abi:ne180100](&a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  std::vector<std::string>::~vector[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

uint64_t E5RT::SerializerUtils::SerializeTensorDataTypeToFlatbuffer(uint64_t a1, E5RT::TensorDataType *this)
{
  if (*(unsigned char *)(a1 + 78)) {
    sub_19244C6B0();
  }
  if (*(_DWORD *)(a1 + 72)) {
    sub_19244C684();
  }
  *(unsigned char *)(a1 + 78) = 1;
  int v4 = *(_DWORD *)(a1 + 40);
  unsigned int ComponentDataType = E5RT::TensorDataType::GetComponentDataType(this);
  if (ComponentDataType >= 5)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "SerializeTensorDataTypeToFlatbuffer");
    std::operator+<char>();
    E5RT::Status::Status(v17, 5, v19);
    E5RT::E5RTError::E5RTError(exception, __p, v17);
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(a1, 4, ComponentDataType, 0);
  Componentsize_t Size = E5RT::TensorDataType::GetComponentSize((E5RT::TensorDataType::Impl **)this);
  char NumComponents = E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)this);
  std::operator+<char>();
  switch(ComponentSize)
  {
    case 4:
      char v8 = NumComponents - 1;
      if ((NumComponents - 1) >= 8u || ((0x8Bu >> v8) & 1) == 0)
      {
        char v14 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v19, "SerializeTensorDataTypeToFlatbuffer");
        E5RT::Status::Status(v17, 5, __p);
        E5RT::E5RTError::E5RTError(v14, v19, v17);
      }
      uint64_t v9 = &unk_192DBD8C0;
      break;
    case 2:
      char v8 = NumComponents - 1;
      if ((NumComponents - 1) >= 8u || ((0x8Bu >> v8) & 1) == 0)
      {
        long long v13 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v19, "SerializeTensorDataTypeToFlatbuffer");
        E5RT::Status::Status(v17, 5, __p);
        E5RT::E5RTError::E5RTError(v13, v19, v17);
      }
      uint64_t v9 = &unk_192DBD8A0;
      break;
    case 1:
      char v8 = NumComponents - 1;
      if ((NumComponents - 1) >= 8u || ((0x8Bu >> v8) & 1) == 0)
      {
        char v15 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v19, "SerializeTensorDataTypeToFlatbuffer");
        E5RT::Status::Status(v17, 5, __p);
        E5RT::E5RTError::E5RTError(v15, v19, v17);
      }
      uint64_t v9 = &unk_192DBD880;
      break;
    default:
      long long v16 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v19, "SerializeTensorDataTypeToFlatbuffer");
      std::operator+<char>();
      E5RT::Status::Status(v18, 5, v17);
      E5RT::E5RTError::E5RTError(v16, v19, v18);
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(a1, 6, v9[v8], 0);
  uint64_t v10 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v4);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  return v10;
}

void sub_19244D598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v28 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v28)
  {
LABEL_8:
    if (a27 < 0) {
      operator delete(a22);
    }
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t E5RT::SerializerUtils::SerializeTensorDescriptorToFlatbuffer(flatbuffers::FlatBufferBuilder *a1, E5RT::TensorDescriptor *this)
{
  unint64_t v107 = 0;
  uint64_t v108 = 0;
  unint64_t v109 = 0;
  long long v104 = 0;
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  std::string __p = 0;
  uint64_t v102 = 0;
  uint64_t v103 = 0;
  uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  unsigned int v5 = *(uint64_t **)TensorShape;
  int v4 = *(uint64_t **)(TensorShape + 8);
  uint64_t v95 = a1;
  if (*(uint64_t **)TensorShape != v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    char v8 = 0;
    uint64_t v9 = v108;
    while (1)
    {
      while (1)
      {
        uint64_t v10 = *v5;
        if (v6 >= v7) {
          break;
        }
        *(void *)uint64_t v6 = v10;
        v6 += 8;
        uint64_t v9 = (uint64_t)v6;
        if (++v5 == v4) {
          goto LABEL_33;
        }
      }
      uint64_t v11 = (v6 - v8) >> 3;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
      {
        uint64_t v108 = v9;
        unint64_t v109 = v7;
        unint64_t v107 = v8;
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if ((v7 - v8) >> 2 > v12) {
        unint64_t v12 = (v7 - v8) >> 2;
      }
      if ((unint64_t)(v7 - v8) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13)
      {
        if (v13 >> 61)
        {
          uint64_t v108 = v9;
          unint64_t v109 = v7;
          unint64_t v107 = v8;
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v14 = operator new(8 * v13);
        char v15 = &v14[8 * v11];
        *(void *)char v15 = v10;
        uint64_t v9 = (uint64_t)(v15 + 8);
        if (v6 == v8) {
          goto LABEL_19;
        }
      }
      else
      {
        char v14 = 0;
        char v15 = (char *)(8 * v11);
        *(void *)(8 * v1E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v10;
        uint64_t v9 = 8 * v11 + 8;
        if (v6 == v8) {
          goto LABEL_19;
        }
      }
      unint64_t v16 = v6 - 8 - v8;
      if (v16 >= 0x168)
      {
        if (&v14[v6 - v8 - 8 - (v16 & 0xFFFFFFFFFFFFFFF8)] > &v14[v6 - v8 - 8])
        {
          long long v17 = v6;
        }
        else if (&v6[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] > v6 - 8)
        {
          long long v17 = v6;
        }
        else if ((unint64_t)(v8 - v14) >= 0x20)
        {
          uint64_t v20 = (v16 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          long long v17 = &v6[-v21];
          v15 -= v21;
          uint64_t v22 = &v14[8 * v11 - 16];
          int v23 = v6 - 16;
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *(_OWORD *)v23;
            *(v22 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = *((_OWORD *)v23 - 1);
            *uint64_t v22 = v25;
            v22 -= 2;
            v23 -= 32;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_19;
          }
        }
        else
        {
          long long v17 = v6;
        }
      }
      else
      {
        long long v17 = v6;
      }
      do
      {
        uint64_t v18 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v15 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v18;
        v15 -= 8;
      }
      while (v17 != v8);
LABEL_19:
      uint64_t v7 = &v14[8 * v13];
      if (v8)
      {
        uint64_t v19 = v9;
        operator delete(v8);
        uint64_t v9 = v19;
      }
      char v8 = v15;
      ++v5;
      uint64_t v6 = (char *)v9;
      if (v5 == v4)
      {
LABEL_33:
        uint64_t v93 = v9;
        uint64_t v108 = v9;
        unint64_t v109 = v7;
        goto LABEL_35;
      }
    }
  }
  uint64_t v93 = 0;
  char v8 = 0;
LABEL_35:
  unint64_t v107 = v8;
  uint64_t TensorStrides = E5RT::TensorDescriptor::GetTensorStrides(this);
  int v28 = *(uint64_t **)TensorStrides;
  unint64_t v27 = *(uint64_t **)(TensorStrides + 8);
  if (*(uint64_t **)TensorStrides == v27)
  {
    unsigned int v31 = 0;
    goto LABEL_69;
  }
  unsigned int v29 = 0;
  unsigned int v30 = 0;
  unsigned int v31 = 0;
  uint64_t v32 = (uint64_t)v105;
  unint64_t v96 = *(uint64_t **)(TensorStrides + 8);
  do
  {
    while (1)
    {
      uint64_t v33 = *v28;
      if (v29 >= v30) {
        break;
      }
      *(void *)unsigned int v29 = v33;
      v29 += 8;
      uint64_t v32 = (uint64_t)v29;
      if (++v28 == v27) {
        goto LABEL_67;
      }
    }
    uint64_t v34 = (v29 - v31) >> 3;
    unint64_t v35 = v34 + 1;
    if ((unint64_t)(v34 + 1) >> 61)
    {
      uint64_t v105 = (unsigned char *)v32;
      uint64_t v106 = v30;
      long long v104 = v31;
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    if ((v30 - v31) >> 2 > v35) {
      unint64_t v35 = (v30 - v31) >> 2;
    }
    if ((unint64_t)(v30 - v31) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v36 = v35;
    }
    if (v36)
    {
      if (v36 >> 61)
      {
        uint64_t v105 = (unsigned char *)v32;
        uint64_t v106 = v30;
        long long v104 = v31;
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      BOOL v37 = operator new(8 * v36);
      unsigned int v38 = &v37[8 * v34];
      *(void *)unsigned int v38 = v33;
      uint64_t v32 = (uint64_t)(v38 + 8);
      if (v29 == v31) {
        goto LABEL_53;
      }
    }
    else
    {
      BOOL v37 = 0;
      unsigned int v38 = (char *)(8 * v34);
      *(void *)(8 * v34) = v33;
      uint64_t v32 = 8 * v34 + 8;
      if (v29 == v31) {
        goto LABEL_53;
      }
    }
    unint64_t v39 = v29 - 8 - v31;
    if (v39 < 0x168)
    {
      uint64_t v40 = v29;
      goto LABEL_52;
    }
    if (&v37[v29 - v31 - 8 - (v39 & 0xFFFFFFFFFFFFFFF8)] > &v37[v29 - v31 - 8])
    {
      uint64_t v40 = v29;
      do
      {
LABEL_52:
        uint64_t v41 = *((void *)v40 - 1);
        v40 -= 8;
        *((void *)v38 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v41;
        v38 -= 8;
      }
      while (v40 != v31);
      goto LABEL_53;
    }
    if (&v29[-(v39 & 0xFFFFFFFFFFFFFFF8) - 8] > v29 - 8)
    {
      uint64_t v40 = v29;
      goto LABEL_52;
    }
    if ((unint64_t)(v31 - v37) < 0x20)
    {
      uint64_t v40 = v29;
      goto LABEL_52;
    }
    uint64_t v42 = (v39 >> 3) + 1;
    uint64_t v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v40 = &v29[-v43];
    v38 -= v43;
    unsigned int v44 = &v37[8 * v34 - 16];
    uint64_t v45 = v29 - 16;
    uint64_t v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v47 = *(_OWORD *)v45;
      *(v44 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = *((_OWORD *)v45 - 1);
      *unsigned int v44 = v47;
      v44 -= 2;
      v45 -= 32;
      v46 -= 4;
    }
    while (v46);
    if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_52;
    }
LABEL_53:
    unsigned int v30 = &v37[8 * v36];
    if (v31) {
      operator delete(v31);
    }
    unsigned int v31 = v38;
    unint64_t v27 = v96;
    ++v28;
    unsigned int v29 = (char *)v32;
  }
  while (v28 != v96);
LABEL_67:
  uint64_t v105 = (unsigned char *)v32;
  uint64_t v106 = v30;
LABEL_69:
  long long v104 = v31;
  E5RT::TensorDescriptor::TryGetDefaultTensorShape((uint64_t)this, &v99);
  uint64_t v48 = (uint64_t)v95;
  uint64_t v49 = v93;
  if (!v99 || (uint64_t v50 = *v99, v51 = v99[1], *v99 == v51))
  {
    uint64_t v54 = 0;
    goto LABEL_104;
  }
  uint64_t v52 = 0;
  BOOL v53 = 0;
  uint64_t v54 = 0;
  while (2)
  {
    while (1)
    {
      uint64_t v55 = *v50;
      if (v54 >= v53) {
        break;
      }
      *(void *)uint64_t v54 = v55;
      v54 += 8;
      uint64_t v102 = v54;
      if (++v50 == v51) {
        goto LABEL_103;
      }
    }
    uint64_t v56 = (v54 - v52) >> 3;
    unint64_t v57 = v56 + 1;
    if ((unint64_t)(v56 + 1) >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    if ((v53 - v52) >> 2 > v57) {
      unint64_t v57 = (v53 - v52) >> 2;
    }
    if ((unint64_t)(v53 - v52) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v58 = v57;
    }
    if (!v58)
    {
      unsigned int v59 = 0;
      unsigned int v60 = (void *)(8 * v56);
      *(void *)(8 * v56) = v55;
      uint64_t v61 = 8 * v56 + 8;
      if (v54 == v52) {
        goto LABEL_88;
      }
LABEL_85:
      unint64_t v62 = v54 - 8 - v52;
      if (v62 >= 0x168)
      {
        if (&v59[v54 - v52 - 8 - (v62 & 0xFFFFFFFFFFFFFFF8)] > &v59[v54 - v52 - 8])
        {
          unsigned int v63 = v54;
        }
        else if (&v54[-(v62 & 0xFFFFFFFFFFFFFFF8) - 8] > v54 - 8)
        {
          unsigned int v63 = v54;
        }
        else if ((unint64_t)(v52 - v59) >= 0x20)
        {
          uint64_t v65 = (v62 >> 3) + 1;
          uint64_t v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
          unsigned int v63 = &v54[-v66];
          unsigned int v60 = (void *)((char *)v60 - v66);
          unsigned int v67 = &v59[8 * v56 - 16];
          unsigned int v68 = v54 - 16;
          uint64_t v69 = v65 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v70 = *(_OWORD *)v68;
            *(v67 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = *((_OWORD *)v68 - 1);
            *unsigned int v67 = v70;
            v67 -= 2;
            v68 -= 32;
            v69 -= 4;
          }
          while (v69);
          if (v65 == (v65 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_88;
          }
        }
        else
        {
          unsigned int v63 = v54;
        }
      }
      else
      {
        unsigned int v63 = v54;
      }
      do
      {
        uint64_t v64 = *((void *)v63 - 1);
        v63 -= 8;
        *--unsigned int v60 = v64;
      }
      while (v63 != v52);
      goto LABEL_88;
    }
    if (v58 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unsigned int v59 = operator new(8 * v58);
    unsigned int v60 = &v59[8 * v56];
    *unsigned int v60 = v55;
    uint64_t v61 = (uint64_t)(v60 + 1);
    if (v54 != v52) {
      goto LABEL_85;
    }
LABEL_88:
    BOOL v53 = &v59[8 * v58];
    std::string __p = v60;
    uint64_t v102 = (char *)v61;
    uint64_t v103 = v53;
    if (v52) {
      operator delete(v52);
    }
    uint64_t v52 = (char *)v60;
    uint64_t v54 = (char *)v61;
    uint64_t v48 = (uint64_t)v95;
    uint64_t v102 = (char *)v61;
    if (++v50 != v51) {
      continue;
    }
    break;
  }
LABEL_103:
  uint64_t v49 = v108;
LABEL_104:
  uint64_t v71 = v49 - (void)v107;
  if (v71) {
    uint64_t v72 = v107;
  }
  else {
    uint64_t v72 = (char *)&flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
  }
  int v73 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>((flatbuffers::FlatBufferBuilder *)v48, v72, v71 >> 3);
  if (v105 == v104) {
    unsigned int v74 = &flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
  }
  else {
    unsigned int v74 = v104;
  }
  int v75 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>((flatbuffers::FlatBufferBuilder *)v48, v74, (v105 - (unsigned char *)v104) >> 3);
  if (v54 == __p) {
    uint64_t v76 = &flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
  }
  else {
    uint64_t v76 = __p;
  }
  int v77 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>((flatbuffers::FlatBufferBuilder *)v48, v76, (v54 - (unsigned char *)__p) >> 3);
  uint64_t TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  int v79 = E5RT::SerializerUtils::SerializeTensorDataTypeToFlatbuffer(v48, TensorDataTypeRef);
  uint64_t v97 = v48;
  if (*(unsigned char *)(v48 + 78))
  {
    uint64_t v90 = "!nested";
    int v91 = 342;
LABEL_143:
    unint64_t v92 = "NotNested";
    goto LABEL_144;
  }
  if (*(_DWORD *)(v48 + 72))
  {
    uint64_t v90 = "!num_field_loc";
    int v91 = 344;
    goto LABEL_143;
  }
  int v80 = v79;
  *(unsigned char *)(v48 + 78) = 1;
  int v98 = *(_DWORD *)(v48 + 40);
  if (!v73) {
    goto LABEL_118;
  }
  flatbuffers::FlatBufferBuilder::Align(v48, 4uLL);
  unsigned int v81 = *(_DWORD *)(v48 + 40);
  if (v73 - 1 >= v81) {
    goto LABEL_140;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v48, 6, v81 - v73 + 4, 0);
LABEL_118:
  if (v75)
  {
    flatbuffers::FlatBufferBuilder::Align(v48, 4uLL);
    unsigned int v82 = *(_DWORD *)(v48 + 40);
    if (v75 - 1 < v82)
    {
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v48, 8, v82 - v75 + 4, 0);
      goto LABEL_121;
    }
LABEL_140:
    uint64_t v90 = "off && off <= size";
    int v91 = 329;
    unint64_t v92 = "ReferTo";
LABEL_144:
    __assert_rtn(v92, "flatbuffer_builder.h", v91, v90);
  }
LABEL_121:
  uint64_t ComponentAxis = E5RT::TensorDescriptor::GetComponentAxis(this);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v48, 12, ComponentAxis, 0);
  if (v80)
  {
    flatbuffers::FlatBufferBuilder::Align(v48, 4uLL);
    unsigned int v84 = *(_DWORD *)(v48 + 40);
    if (v80 - 1 >= v84) {
      goto LABEL_140;
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v48, 4, v84 - v80 + 4, 0);
  }
  if (v77)
  {
    flatbuffers::FlatBufferBuilder::Align(v48, 4uLL);
    unsigned int v85 = *(_DWORD *)(v48 + 40);
    if (v77 - 1 >= v85) {
      goto LABEL_140;
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v48, 14, v85 - v77 + 4, 0);
  }
  if (E5RT::TensorDescriptor::HasKnownShape(this)) {
    uint64_t Size = E5RT::TensorDescriptor::GetSize((E5RT::TensorDescriptorImpl **)this);
  }
  else {
    uint64_t Size = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v48, 10, Size, 0);
  uint64_t v87 = BlockBuilder::Finish((BlockBuilder *)&v97);
  unint64_t v88 = v100;
  if (v100 && !atomic_fetch_add(&v100->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
    std::__shared_weak_count::__release_weak(v88);
  }
  if (__p) {
    operator delete(__p);
  }
  if (v104) {
    operator delete(v104);
  }
  if (v107) {
    operator delete(v107);
  }
  return v87;
}

void sub_19244DFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    long long v25 = a21;
    if (!a21)
    {
LABEL_3:
      uint64_t v26 = *(void **)(v23 - 104);
      if (!v26) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    long long v25 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v25;
  operator delete(v25);
  uint64_t v26 = *(void **)(v23 - 104);
  if (!v26) {
LABEL_4:
  }
    _Unwind_Resume(a1);
LABEL_7:
  *(void *)(v23 - 96) = v26;
  operator delete(v26);
  _Unwind_Resume(a1);
}

uint64_t E5RT::SerializerUtils::SerializeSurfaceDescriptorToFlatbuffer(E5RT::SerializerUtils *this, flatbuffers::FlatBufferBuilder *a2, const E5RT::SurfaceDescriptor *a3)
{
  unint64_t v3 = a2;
  uint64_t CustomRowStrides = E5RT::SurfaceDescriptor::TryGetCustomRowStrides(a2);
  uint64_t v7 = *(uint64_t **)CustomRowStrides;
  uint64_t v6 = *(uint64_t **)(CustomRowStrides + 8);
  if (*(uint64_t **)CustomRowStrides != v6)
  {
    uint64_t v41 = v3;
    char v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v42 = *(uint64_t **)(CustomRowStrides + 8);
    while (1)
    {
      while (1)
      {
        uint64_t v12 = *v7;
        if (v8 >= v9) {
          break;
        }
        *(void *)char v8 = v12;
        v8 += 8;
        uint64_t v11 = (uint64_t)v8;
        if (++v7 == v6) {
          goto LABEL_33;
        }
      }
      uint64_t v13 = (v8 - v10) >> 3;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if ((v9 - v10) >> 2 > v14) {
        unint64_t v14 = (v9 - v10) >> 2;
      }
      if ((unint64_t)(v9 - v10) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15)
      {
        if (v15 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v16 = operator new(8 * v15);
        long long v17 = &v16[8 * v13];
        *(void *)long long v17 = v12;
        uint64_t v11 = (uint64_t)(v17 + 8);
        if (v8 == v10) {
          goto LABEL_19;
        }
      }
      else
      {
        unint64_t v16 = 0;
        long long v17 = (char *)(8 * v13);
        *(void *)(8 * v13) = v12;
        uint64_t v11 = 8 * v13 + 8;
        if (v8 == v10) {
          goto LABEL_19;
        }
      }
      unint64_t v18 = v8 - 8 - v10;
      if (v18 >= 0x168)
      {
        if (&v16[v8 - v10 - 8 - (v18 & 0xFFFFFFFFFFFFFFF8)] > &v16[v8 - v10 - 8])
        {
          uint64_t v19 = v8;
        }
        else if (&v8[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] > v8 - 8)
        {
          uint64_t v19 = v8;
        }
        else if ((unint64_t)(v10 - v16) >= 0x20)
        {
          uint64_t v21 = (v18 >> 3) + 1;
          uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v19 = &v8[-v22];
          v17 -= v22;
          uint64_t v23 = &v16[8 * v13 - 16];
          uint64_t v24 = v8 - 16;
          uint64_t v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v26 = *(_OWORD *)v24;
            *(v23 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = *((_OWORD *)v24 - 1);
            *uint64_t v23 = v26;
            v23 -= 2;
            v24 -= 32;
            v25 -= 4;
          }
          while (v25);
          if (v21 == (v21 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_19;
          }
        }
        else
        {
          uint64_t v19 = v8;
        }
      }
      else
      {
        uint64_t v19 = v8;
      }
      do
      {
        uint64_t v20 = *((void *)v19 - 1);
        v19 -= 8;
        *((void *)v17 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v20;
        v17 -= 8;
      }
      while (v19 != v10);
LABEL_19:
      uint64_t v9 = &v16[8 * v15];
      if (v10) {
        operator delete(v10);
      }
      uint64_t v10 = v17;
      uint64_t v6 = v42;
      ++v7;
      char v8 = (char *)v11;
      if (v7 == v42)
      {
LABEL_33:
        unint64_t v3 = v41;
        goto LABEL_35;
      }
    }
  }
  uint64_t v11 = 0;
  uint64_t v10 = 0;
LABEL_35:
  std::string __p = v10;
  if ((char *)v11 == v10) {
    unint64_t v27 = (char *)&flatbuffers::data<unsigned long long,std::allocator<unsigned long long>>(std::vector<unsigned long long> const&)::t;
  }
  else {
    unint64_t v27 = v10;
  }
  int v28 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>(this, v27, (v11 - (uint64_t)v10) >> 3);
  if (*((unsigned char *)this + 78))
  {
    unsigned int v38 = "!nested";
    int v39 = 342;
    uint64_t v40 = "NotNested";
    goto LABEL_49;
  }
  if (*((_DWORD *)this + 18))
  {
    unsigned int v38 = "!num_field_loc";
    int v39 = 344;
    uint64_t v40 = "NotNested";
    goto LABEL_49;
  }
  int v29 = v28;
  *((unsigned char *)this + 78) = 1;
  int v30 = *((_DWORD *)this + 10);
  uint64_t SurfaceWidth = E5RT::SurfaceDescriptor::GetSurfaceWidth(v3);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((uint64_t)this, 6, SurfaceWidth, 0);
  uint64_t SurfaceHeight = E5RT::SurfaceDescriptor::GetSurfaceHeight(v3);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((uint64_t)this, 8, SurfaceHeight, 0);
  int SurfaceFormat = E5RT::SurfaceDescriptor::GetSurfaceFormat(v3);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 4, SurfaceFormat, 0);
  if (!v29) {
    goto LABEL_43;
  }
  flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
  unsigned int v34 = *((_DWORD *)this + 10);
  if (v29 - 1 >= v34)
  {
    unsigned int v38 = "off && off <= size";
    int v39 = 329;
    uint64_t v40 = "ReferTo";
LABEL_49:
    __assert_rtn(v40, "flatbuffer_builder.h", v39, v38);
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 10, v34 - v29 + 4, 0);
LABEL_43:
  uint64_t SurfaceSliceCount = E5RT::SurfaceDescriptor::GetSurfaceSliceCount(v3);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((uint64_t)this, 12, SurfaceSliceCount, 1);
  uint64_t v36 = flatbuffers::FlatBufferBuilder::EndTable(this, v30);
  if (__p) {
    operator delete(__p);
  }
  return v36;
}

void sub_19244E420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void E5Common::MinimalCpu::Matcher::TensorShape(const MIL::IRValueType *a1@<X1>, uint64_t a2@<X8>)
{
  if (!a1 || (uint64_t v4 = (*(uint64_t (**)(const MIL::IRValueType *))(*(void *)a1 + 24))(a1)) == 0)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
    return;
  }
  unsigned int v5 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 96))(v4);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (*v5 != v7)
  {
    char v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    while (1)
    {
      while (1)
      {
        uint64_t v12 = (*(uint64_t (**)(void))(**(void **)v6 + 16))();
        if (!v12)
        {
          *(unsigned char *)a2 = 0;
          *(unsigned char *)(a2 + 24) = 0;
          if (v8) {
            operator delete(v8);
          }
          return;
        }
        uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 48))(v12);
        uint64_t v14 = v13;
        if (v10 >= v9) {
          break;
        }
        *v10++ = v13;
        uint64_t v11 = (uint64_t)v10;
        v6 += 8;
        if (v6 == v7) {
          goto LABEL_38;
        }
      }
      uint64_t v15 = v10 - v8;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if (((char *)v9 - (char *)v8) >> 2 > v16) {
        unint64_t v16 = ((char *)v9 - (char *)v8) >> 2;
      }
      if ((unint64_t)((char *)v9 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v16;
      }
      if (v17)
      {
        if (v17 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v18 = operator new(8 * v17);
        uint64_t v19 = (uint64_t *)&v18[8 * v15];
        *uint64_t v19 = v14;
        uint64_t v11 = (uint64_t)(v19 + 1);
        if (v10 == v8) {
          goto LABEL_22;
        }
      }
      else
      {
        unint64_t v18 = 0;
        uint64_t v19 = (uint64_t *)(8 * v15);
        *(void *)(8 * v15) = v14;
        uint64_t v11 = 8 * v15 + 8;
        if (v10 == v8) {
          goto LABEL_22;
        }
      }
      unint64_t v20 = (char *)(v10 - 1) - (char *)v8;
      if (v20 < 0x168)
      {
        uint64_t v21 = v10;
        goto LABEL_21;
      }
      if (&v18[(char *)v10 - (char *)v8 - 8 - (v20 & 0xFFFFFFFFFFFFFFF8)] > &v18[(char *)v10 - (char *)v8 - 8]) {
        break;
      }
      if ((uint64_t *)((char *)v10 - (v20 & 0xFFFFFFFFFFFFFFF8) - 8) > v10 - 1)
      {
        uint64_t v21 = v10;
        goto LABEL_21;
      }
      if ((unint64_t)((char *)v8 - v18) < 0x20)
      {
        uint64_t v21 = v10;
        goto LABEL_21;
      }
      uint64_t v23 = (v20 >> 3) + 1;
      uint64_t v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v21 = &v10[v24 / 0xFFFFFFFFFFFFFFF8];
      uint64_t v19 = (uint64_t *)((char *)v19 - v24);
      uint64_t v25 = &v18[8 * v15 - 16];
      long long v26 = v10 - 2;
      uint64_t v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v28 = *(_OWORD *)v26;
        *(v25 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = *((_OWORD *)v26 - 1);
        *uint64_t v25 = v28;
        v25 -= 2;
        v26 -= 4;
        v27 -= 4;
      }
      while (v27);
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_21;
      }
LABEL_22:
      uint64_t v9 = (uint64_t *)&v18[8 * v17];
      if (v8) {
        operator delete(v8);
      }
      char v8 = v19;
      v6 += 8;
      uint64_t v10 = (uint64_t *)v11;
      if (v6 == v7) {
        goto LABEL_38;
      }
    }
    uint64_t v21 = v10;
    do
    {
LABEL_21:
      uint64_t v22 = *--v21;
      *--uint64_t v19 = v22;
    }
    while (v21 != v8);
    goto LABEL_22;
  }
  uint64_t v9 = 0;
  uint64_t v11 = 0;
  char v8 = 0;
LABEL_38:
  *(void *)a2 = v8;
  *(void *)(a2 + 8) = v11;
  *(void *)(a2 + 16) = v9;
  *(unsigned char *)(a2 + 24) = 1;
}

void sub_19244E75C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void E5Common::MinimalCpu::Matcher::TensorBufferInterleaveFactors(const MIL::IRValueType *a1@<X1>, uint64_t a2@<X8>)
{
  if (!a1
    || (uint64_t v4 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::TryCastAsMemoryLayoutType(a1)) == 0
    || (unsigned int v5 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::TryAsTensorBufferType(v4)) == 0)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
    return;
  }
  uint64_t InterleaveFactors = MIL::IRTensorBufferValueType::GetInterleaveFactors(v5);
  std::string __p = 0;
  unint64_t v35 = 0;
  uint64_t v7 = *(MIL::IRProperty ***)InterleaveFactors;
  char v8 = *(MIL::IRProperty ***)(InterleaveFactors + 8);
  if (*(MIL::IRProperty ***)InterleaveFactors != v8)
  {
    uint64_t v9 = 0;
    while (1)
    {
      while (1)
      {
        uint64_t v10 = (MIL::IRConstantProperty *)MIL::IRProperty::TryAsConstant(*v7);
        if (!v10)
        {
          *(unsigned char *)a2 = 0;
          *(unsigned char *)(a2 + 24) = 0;
          if (__p) {
            operator delete(__p);
          }
          return;
        }
        char UInt8ScalarValue = MIL::IRConstantProperty::GetUInt8ScalarValue(v10);
        char v12 = UInt8ScalarValue;
        if (v9 >= v35) {
          break;
        }
        *v9++ = UInt8ScalarValue;
        if (++v7 == v8) {
          goto LABEL_47;
        }
      }
      unint64_t v13 = v9 - __p;
      uint64_t v14 = v9 - __p + 1;
      if (v14 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = v35 - __p;
      if (2 * (v35 - __p) > (unint64_t)v14) {
        uint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v16 = v14;
      }
      if (v16)
      {
        unint64_t v17 = (char *)operator new(v16);
        unint64_t v18 = &v17[v13];
        v17[v13] = v12;
        uint64_t v19 = (uint64_t)&v17[v13 + 1];
        if (v9 != __p) {
          goto LABEL_17;
        }
      }
      else
      {
        unint64_t v17 = 0;
        unint64_t v18 = (char *)(v9 - __p);
        *(unsigned char *)unint64_t v13 = v12;
        uint64_t v19 = v13 + 1;
        if (v9 != __p)
        {
LABEL_17:
          if (v13 < 8 || v17 > &v17[v9 - __p - 1] || __p > v9 - 1 || (unint64_t)(__p - v17) < 0x20)
          {
            unint64_t v20 = v9;
          }
          else if (v13 >= 0x20)
          {
            unint64_t v23 = v13 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v24 = &v17[v13 - 16];
            uint64_t v25 = (long long *)(v9 - 16);
            unint64_t v26 = v13 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v27 = *v25;
              *((_OWORD *)v24 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = *(v25 - 1);
              *(_OWORD *)uint64_t v24 = v27;
              v24 -= 32;
              v25 -= 2;
              v26 -= 32;
            }
            while (v26);
            if (v13 == v23) {
              goto LABEL_21;
            }
            if ((v13 & 0x18) != 0) {
              goto LABEL_37;
            }
            v18 -= v23;
            unint64_t v20 = &v9[-v23];
          }
          else
          {
            unint64_t v23 = 0;
LABEL_37:
            unint64_t v20 = &v9[-(v13 & 0xFFFFFFFFFFFFFFF8)];
            v18 -= v13 & 0xFFFFFFFFFFFFFFF8;
            long long v28 = &v17[&v9[-v23] - __p - 8];
            int v29 = (uint64_t *)&v9[-v23 - 8];
            unint64_t v30 = v23 - (v13 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint64_t v31 = *v29--;
              *(void *)long long v28 = v31;
              v28 -= 8;
              v30 += 8;
            }
            while (v30);
            if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8))
            {
LABEL_21:
              uint64_t v9 = __p;
              std::string __p = v17;
              unint64_t v35 = &v17[v16];
              if (!v9) {
                goto LABEL_26;
              }
LABEL_25:
              operator delete(v9);
              goto LABEL_26;
            }
          }
          uint64_t v21 = v18 - 1;
          do
          {
            char v22 = *--v20;
            *v21-- = v22;
          }
          while (v20 != __p);
          goto LABEL_21;
        }
      }
      std::string __p = v18;
      unint64_t v35 = &v17[v16];
      if (v9) {
        goto LABEL_25;
      }
LABEL_26:
      uint64_t v9 = (char *)v19;
      if (++v7 == v8)
      {
LABEL_47:
        uint64_t v33 = __p;
        uint64_t v32 = v35;
        goto LABEL_48;
      }
    }
  }
  uint64_t v32 = 0;
  uint64_t v9 = 0;
  uint64_t v33 = 0;
LABEL_48:
  *(void *)a2 = v33;
  *(void *)(a2 + 8) = v9;
  *(void *)(a2 + 16) = v32;
  *(unsigned char *)(a2 + 24) = 1;
}

void sub_19244EA38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void E5Common::MinimalCpu::Matcher::~Matcher(E5Common::MinimalCpu::Matcher *this)
{
  uint64_t v2 = (void **)*((void *)this + 4);
  if (v2)
  {
    do
    {
      uint64_t v4 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v4;
    }
    while (v4);
  }
  unint64_t v3 = (void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    operator delete(v3);
  }
}

char *std::vector<E5Common::MinimalCpu::Match>::__push_back_slow_path<E5Common::MinimalCpu::Match>(void **a1, uint64_t a2)
{
  uint64_t v3 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v5 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v5 >> 4 > v4) {
    unint64_t v4 = v5 >> 4;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v4;
  }
  if (v7 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v9 = 32 * v7;
  uint64_t v10 = (char *)operator new(32 * v7);
  uint64_t v11 = &v10[32 * v3];
  char v12 = &v10[v9];
  *(_DWORD *)uint64_t v11 = *(_DWORD *)a2;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *((void *)v11 + 3) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  unint64_t v13 = v11 + 32;
  uint64_t v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    if (!v15) {
      return v13;
    }
    goto LABEL_17;
  }
  uint64_t v16 = 0;
  do
  {
    unint64_t v17 = &v11[v16];
    unint64_t v18 = &v15[v16];
    *((_DWORD *)v17 - 8) = *(_DWORD *)&v15[v16 - 32];
    *(_OWORD *)(v17 - 24) = *(_OWORD *)&v15[v16 - 24];
    *((void *)v17 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = *(void *)&v15[v16 - 8];
    *((void *)v18 - 3) = 0;
    *((void *)v18 - 2) = 0;
    *((void *)v18 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = 0;
    v16 -= 32;
  }
  while (&v15[v16] != v14);
  uint64_t v19 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  *a1 = &v11[v16];
  a1[1] = v13;
  a1[2] = v12;
  if (v15 != v19)
  {
    do
    {
      unint64_t v20 = (void *)*((void *)v15 - 3);
      if (v20)
      {
        *((void *)v15 - 2) = v20;
        operator delete(v20);
      }
      v15 -= 32;
    }
    while (v15 != v19);
    unint64_t v15 = v19;
  }
  if (v15) {
LABEL_17:
  }
    operator delete(v15);
  return v13;
}

uint64_t std::__split_buffer<E5Common::MinimalCpu::Match>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v4 = v2 - 32;
        *(void *)(a1 + 16) = v2 - 32;
        uint64_t v5 = *(void **)(v2 - 24);
        if (!v5) {
          break;
        }
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 32;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<E5Common::MinimalCpu::Match>,E5Common::MinimalCpu::Match*,E5Common::MinimalCpu::Match*,E5Common::MinimalCpu::Match*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(_DWORD *)a4 = *(_DWORD *)v6;
      *(void *)(a4 + 16) = 0;
      *(void *)(a4 + 24) = 0;
      *(void *)(a4 + 8) = 0;
      uint64_t v9 = *(unsigned char **)(v6 + 8);
      char v8 = *(unsigned char **)(v6 + 16);
      int64_t v10 = v8 - v9;
      if (v8 != v9)
      {
        if (v10 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v11 = (char *)operator new(v8 - v9);
        *(void *)(a4 + 8) = v11;
        *(void *)(a4 + 16) = v11;
        unint64_t v7 = &v11[8 * (v10 >> 3)];
        *(void *)(a4 + 24) = v7;
        memcpy(v11, v9, v10);
        *(void *)(a4 + 16) = v7;
      }
      a4 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_19244ED68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void **)(v9 + 8);
  if (v11)
  {
    *(void *)(v9 + 16) = v11;
    operator delete(v11);
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<E5Common::MinimalCpu::Match>,E5Common::MinimalCpu::Match*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<E5Common::MinimalCpu::Match>,E5Common::MinimalCpu::Match*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(void *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 32;
    }
  }
  return a1;
}

void E5RT::ComputeProgramBuilder::CreateBuilder(E5RT::ComputeProgramBuilder *this)
{
}

void sub_19244EEE8(_Unwind_Exception *a1)
{
  uint64_t v4 = (void **)v1[13];
  if (v4) {
    Espresso::AOT::E5RTGroupMatcher::TagStateOpsGroupsInBlockWithShrinking(v4);
  }
  uint64_t v5 = (void *)v1[11];
  v1[11] = 0;
  if (v5)
  {
    operator delete(v5);
    sub_19244F05C(v1 + 8);
    uint64_t v6 = (void *)v1[5];
    if (!v6)
    {
LABEL_5:
      unint64_t v7 = (void *)v1[2];
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_21;
    }
  }
  else
  {
    sub_19244F05C(v1 + 8);
    uint64_t v6 = (void *)v1[5];
    if (!v6) {
      goto LABEL_5;
    }
  }
  uint64_t v9 = (void *)v1[6];
  int64_t v10 = v6;
  if (v9 != v6)
  {
    do
    {
      uint64_t v11 = (void **)*(v9 - 3);
      if (v11)
      {
        do
        {
          uint64_t v14 = (void **)*v11;
          if (*((char *)v11 + 39) < 0) {
            operator delete(v11[2]);
          }
          operator delete(v11);
          uint64_t v11 = v14;
        }
        while (v14);
      }
      unint64_t v13 = (void *)*(v9 - 5);
      v9 -= 5;
      char v12 = v13;
      void *v9 = 0;
      if (v13) {
        operator delete(v12);
      }
    }
    while (v9 != v6);
    int64_t v10 = (void *)v1[5];
  }
  v1[6] = v6;
  operator delete(v10);
  unint64_t v7 = (void *)v1[2];
  if (!v7)
  {
LABEL_6:
    char v8 = *v2;
    char *v2 = 0;
    if (!v8) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_21:
  unint64_t v15 = (void *)v1[3];
  uint64_t v16 = v7;
  if (v15 != v7)
  {
    do
    {
      uint64_t v18 = *--v15;
      uint64_t v17 = v18;
      *unint64_t v15 = 0;
      if (v18)
      {
        if (*(char *)(v17 + 23) < 0) {
          operator delete(*(void **)v17);
        }
        MEMORY[0x192FF16B0](v17, 0x1012C4004DB1A28);
      }
    }
    while (v15 != v7);
    uint64_t v16 = (void *)v1[2];
  }
  v1[3] = v7;
  operator delete(v16);
  char v8 = *v2;
  char *v2 = 0;
  if (!v8)
  {
LABEL_8:
    MEMORY[0x192FF16B0](v1, 0x10A1C40642D8541);
    _Unwind_Resume(a1);
  }
LABEL_7:
  E5RT_FB::ProgramT::~ProgramT(v8);
  MEMORY[0x192FF16B0]();
  goto LABEL_8;
}

void *sub_19244F05C(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = (void *)*a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = (uint64_t *)*--v3;
        uint64_t v5 = v6;
        *uint64_t v3 = 0;
        if (v6)
        {
          flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)(v5 + 1));
          uint64_t v7 = *v5;
          *uint64_t v5 = 0;
          if (v7)
          {
            if (*(char *)(v7 + 23) < 0) {
              operator delete(*(void **)v7);
            }
            MEMORY[0x192FF16B0](v7, 0x1012C4016A3B764);
          }
          MEMORY[0x192FF16B0](v5, 0x1030C40EF383451);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void *sub_19244F124(void *a1)
{
  *a1 = &unk_1EE39AE88;
  uint64_t v2 = (void **)a1[13];
  if (v2)
  {
    do
    {
      uint64_t v7 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v7;
    }
    while (v7);
  }
  uint64_t v3 = (void *)a1[11];
  a1[11] = 0;
  if (v3) {
    operator delete(v3);
  }
  sub_19244F05C(a1 + 8);
  uint64_t v4 = (void *)a1[5];
  if (v4)
  {
    uint64_t v5 = (void *)a1[6];
    uint64_t v6 = (void *)a1[5];
    if (v5 != v4)
    {
      do
      {
        char v8 = (void **)*(v5 - 3);
        if (v8)
        {
          do
          {
            uint64_t v11 = (void **)*v8;
            if (*((char *)v8 + 39) < 0) {
              operator delete(v8[2]);
            }
            operator delete(v8);
            char v8 = v11;
          }
          while (v11);
        }
        int64_t v10 = (void *)*(v5 - 5);
        v5 -= 5;
        uint64_t v9 = v10;
        *uint64_t v5 = 0;
        if (v10) {
          operator delete(v9);
        }
      }
      while (v5 != v4);
      uint64_t v6 = (void *)a1[5];
    }
    a1[6] = v4;
    operator delete(v6);
  }
  char v12 = (void *)a1[2];
  if (v12)
  {
    unint64_t v13 = (void *)a1[3];
    uint64_t v14 = (void *)a1[2];
    if (v13 != v12)
    {
      do
      {
        uint64_t v16 = *--v13;
        uint64_t v15 = v16;
        *unint64_t v13 = 0;
        if (v16)
        {
          if (*(char *)(v15 + 23) < 0) {
            operator delete(*(void **)v15);
          }
          MEMORY[0x192FF16B0](v15, 0x1012C4004DB1A28);
        }
      }
      while (v13 != v12);
      uint64_t v14 = (void *)a1[2];
    }
    a1[3] = v12;
    operator delete(v14);
  }
  uint64_t v17 = (E5RT_FB::ProgramT *)a1[1];
  a1[1] = 0;
  if (v17)
  {
    E5RT_FB::ProgramT::~ProgramT(v17);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

void sub_19244F2BC(void *a1)
{
  sub_19244F124(a1);

  JUMPOUT(0x192FF16B0);
}

void sub_19244F2F4(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1[16];
  if (v1 != -1)
  {
    uint64_t v3 = (uint64_t **)a1[8];
    uint64_t v4 = (uint64_t **)a1[9];
    if (v3 != v4)
    {
      do
      {
        uint64_t v7 = *v3;
        uint64_t v8 = **v3;
        if (*(unsigned char *)(v8 + 52))
        {
          size_t v9 = *((unsigned int *)v7 + 12);
          *(void *)(v8 + 40) = v9;
          if (v9)
          {
            int64_t v10 = operator new(v9);
            bzero(v10, v9);
            if (*(void *)(v8 + 40))
            {
              uint64_t v11 = (const void *)v7[8];
              if (!v11) {
                __assert_rtn("data", "vector_downward.h", 167, "cur_");
              }
              memcpy(v10, v11, v9);
            }
          }
          operator new();
        }
        char v12 = (void *)a1[1];
        unint64_t v13 = (uint64_t *)v12[2];
        if ((unint64_t)v13 < v12[3])
        {
          uint64_t v5 = *v7;
          uint64_t *v7 = 0;
          *unint64_t v13 = v5;
          uint64_t v6 = v13 + 1;
        }
        else
        {
          uint64_t v6 = std::vector<std::unique_ptr<E5RT_FB::SectionT>>::__push_back_slow_path<std::unique_ptr<E5RT_FB::SectionT>>(v12 + 1, v7);
        }
        v12[2] = v6;
        ++v3;
      }
      while (v3 != v4);
      LODWORD(vE5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = *((_DWORD *)a1 + 32);
    }
    if (*(_DWORD *)(*(void *)(*(void *)(a1[1] + 8) + 8 * v1) + 24) == 5) {
      operator new();
    }
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__dst, "Serialize");
    std::string::basic_string[abi:ne180100]<0>(&v17, "Sym desc section does not have expected type information.");
    E5RT::Status::Status(&v16, 2, &v17);
    E5RT::E5RTError::E5RTError(exception, &__dst, &v16);
  }
  uint64_t v14 = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(&__dst, "Serialize");
  std::string::basic_string[abi:ne180100]<0>(&v17, "SymDesc section not yet added.");
  E5RT::Status::Status(&v16, 2, &v17);
  E5RT::E5RTError::E5RTError(v14, &__dst, &v16);
}

void sub_19244FC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&a29);
  _Unwind_Resume(a1);
}

void sub_19244FDE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  E5RT::Status::~Status((E5RT::Status *)&a17);
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a41 < 0)
  {
    operator delete(a36);
    if ((v43 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v43)
  {
LABEL_8:
    uint64_t v45 = (void *)*v41;
    if (*v41)
    {
      uint64_t v46 = (void *)v41[1];
      long long v47 = (void *)*v41;
      if (v46 != v45)
      {
        do
        {
          uint64_t v49 = *--v46;
          uint64_t v48 = v49;
          *uint64_t v46 = 0;
          if (v49)
          {
            if (*(char *)(v48 + 23) < 0) {
              operator delete(*(void **)v48);
            }
            MEMORY[0x192FF16B0](v48, 0x1012C4004DB1A28);
          }
        }
        while (v46 != v45);
        long long v47 = (void *)*v41;
      }
      v41[1] = v45;
      operator delete(v47);
    }
    MEMORY[0x192FF16B0](v41, 0x20C40960023A9);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v42);
  goto LABEL_8;
}

void sub_19244FE5C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  __cxa_free_exception(v38);
  JUMPOUT(0x19244FE9CLL);
}

void sub_19244FE8C()
{
}

void sub_19244FF24()
{
}

void sub_19244FFD4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char a5)
{
  if (!std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>((void *)(a1 + 88), a2))
  {
    if (a3 == 5)
    {
      if (*(void *)(a1 + 128) != -1)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "AddSection");
        std::string::basic_string[abi:ne180100]<0>(v12, "Cannot add a second SymDesc section.");
        E5RT::Status::Status(&v13, 1, v12);
        E5RT::E5RTError::E5RTError(exception, __p, &v13);
      }
      if ((a5 & 1) == 0)
      {
        int64_t v10 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "AddSection");
        std::string::basic_string[abi:ne180100]<0>(v12, "SymDesc section must have file data.");
        E5RT::Status::Status(&v13, 1, v12);
        E5RT::E5RTError::E5RTError(v10, __p, &v13);
      }
    }
    operator new();
  }
  uint64_t v8 = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(__p, "AddSection");
  std::string::basic_string[abi:ne180100]<0>(v12, "Duplicate section names not allowed.");
  E5RT::Status::Status(&v13, 1, v12);
  E5RT::E5RTError::E5RTError(v8, __p, &v13);
}

void sub_1924505C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17)
{
}

void sub_1924505E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<E5RT_FB::SectionT>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1924505FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<E5RT_FB::SectionT>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_192450610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_19245178C((uint64_t **)va1);
  std::unique_ptr<E5RT_FB::SectionT>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19245062C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  E5RT::Status::~Status((E5RT::Status *)&a23);
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v24 & 1) == 0) {
LABEL_7:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_7;
  }
  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

void sub_192450708(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v6 = a1 + 88;
  if (std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>((void *)(a1 + 88), (uint64_t)a3))
  {
    v12[0] = a3;
    uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (uint64_t)a3, (uint64_t)&std::piecewise_construct, v12);
    if (!std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>((void *)(*(void *)(a1 + 40) + 40 * *((unsigned int *)v7 + 10)), a2))operator new(); {
    exception = __cxa_allocate_exception(0x18uLL);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "AddSymbol");
    std::string::basic_string[abi:ne180100]<0>(v10, "Duplicate symbol names within section not allowed.");
    E5RT::Status::Status(v11, 1, v10);
    E5RT::E5RTError::E5RTError(exception, v12, v11);
  }
  uint64_t v8 = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v12, "AddSymbol");
  std::string::basic_string[abi:ne180100]<0>(v10, "Unknown section name.");
  E5RT::Status::Status(v11, 1, v10);
  E5RT::E5RTError::E5RTError(v8, v12, v11);
}

void sub_1924509C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<E5RT_FB::SymbolT>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1924509D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if (v23) {
      goto LABEL_8;
    }
  }
  else if (v23)
  {
LABEL_8:
    __cxa_free_exception(v22);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_192450AA4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1[16] == -1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v18, "SetDescriptionForSymbol");
    std::string::basic_string[abi:ne180100]<0>(v16, "SymDesc section not yet added.");
    E5RT::Status::Status(v17, 2, v16);
    E5RT::E5RTError::E5RTError(exception, v18, v17);
  }
  unsigned int v6 = (*(uint64_t (**)(void *))(*a1 + 80))(a1);
  uint64_t v7 = a1[2];
  if (*(void *)(*(void *)(v7 + 8 * v6) + 48))
  {
    uint64_t v14 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v18, "SetDescriptionForSymbol");
    std::string::basic_string[abi:ne180100]<0>(v16, "Symbol description already added.");
    E5RT::Status::Status(v17, 2, v16);
    E5RT::E5RTError::E5RTError(v14, v18, v17);
  }
  unsigned int v8 = v6;
  uint64_t v9 = *(void *)(a4 + 24);
  if (!v9) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v10 = *(void *)(a1[8] + 8 * *((unsigned int *)a1 + 32));
  uint64_t v11 = *(unsigned int *)(v10 + 48);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 48))(v9, v10 + 8);
  if (result + v11 != *(_DWORD *)(v10 + 48))
  {
    uint64_t v15 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v18, "SetDescriptionForSymbol");
    std::string::basic_string[abi:ne180100]<0>(v16, "FlatBufferBuilder size mismatch while serializing sym desc information.");
    E5RT::Status::Status(v17, 2, v16);
    E5RT::E5RTError::E5RTError(v15, v18, v17);
  }
  *(void *)(*(void *)(v7 + 8 * v8) + 48) = result + v11;
  return result;
}

void sub_192450CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if ((v23 & 1) == 0)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t sub_192450DB0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6 = (*(uint64_t (**)(void *))(*a1 + 80))(a1);
  uint64_t v7 = a1[2];
  unsigned int v8 = *(unsigned int **)(a1[8] + 8 * *(unsigned int *)(*(void *)(v7 + 8 * v6) + 28));
  if (!*(unsigned char *)(*(void *)v8 + 52))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v17, "SetProgramDataForSymbol");
    std::string::basic_string[abi:ne180100]<0>(v15, "Section does not have file data enabled.");
    E5RT::Status::Status(v16, 2, v15);
    E5RT::E5RTError::E5RTError(exception, v17, v16);
  }
  unsigned int v9 = v6;
  uint64_t v10 = *(void *)(a4 + 24);
  if (!v10) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v11 = v8[12];
  uint64_t result = (*(uint64_t (**)(uint64_t, unsigned int *))(*(void *)v10 + 48))(v10, v8 + 2);
  if (result + v11 != v8[12])
  {
    uint64_t v14 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v17, "SetProgramDataForSymbol");
    std::string::basic_string[abi:ne180100]<0>(v15, "FlatBufferBuilder size mismatch while serializing symbol data information.");
    E5RT::Status::Status(v16, 2, v15);
    E5RT::E5RTError::E5RTError(v14, v17, v16);
  }
  *(void *)(*(void *)(v7 + 8 * v9) + 40) = result + v11;
  return result;
}

void sub_192450F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if ((v23 & 1) == 0)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t sub_192451020(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 80))(a1);
  uint64_t v7 = *(void *)(a1[2] + 8 * result);
  uint64_t v8 = **(void **)(a1[8] + 8 * *(unsigned int *)(v7 + 28));
  if (*(unsigned char *)(v8 + 52))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v13, "SetDataInfoForSymbol");
    std::string::basic_string[abi:ne180100]<0>(v11, "Section has file data enabled.");
    E5RT::Status::Status(v12, 2, v11);
    E5RT::E5RTError::E5RTError(exception, v13, v12);
  }
  uint64_t v9 = *(void *)(v8 + 40);
  *(void *)(v7 + 40) = v9;
  *(void *)(v8 + 40) = v9 + a4;
  return result;
}

void sub_192451120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t sub_192451194(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 80))(a1);
  uint64_t v9 = *(void *)(a1[2] + 8 * result);
  uint64_t v10 = **(void **)(a1[8] + 8 * *(unsigned int *)(v9 + 28));
  if (*(unsigned char *)(v10 + 52))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "SetDataInfoForSymbol");
    std::string::basic_string[abi:ne180100]<0>(v12, "Section has file data enabled.");
    E5RT::Status::Status(v13, 2, v12);
    E5RT::E5RTError::E5RTError(exception, v14, v13);
  }
  *(void *)(v9 + 40) = a4;
  *(void *)(v10 + 40) += (a5 + a4 - *(void *)(v10 + 40)) & ~((a5 + a4 - *(void *)(v10 + 40)) >> 63);
  return result;
}

void sub_1924512A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t sub_192451318(uint64_t a1, long long *a2, long long *a3)
{
  uint64_t v6 = a1 + 88;
  if (!std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>((void *)(a1 + 88), (uint64_t)a3))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v13, "GetSymbolIndex");
    std::string::basic_string[abi:ne180100]<0>(v11, "Unknown section name.");
    E5RT::Status::Status(v12, 1, v11);
    E5RT::E5RTError::E5RTError(exception, v13, v12);
  }
  v13[0] = a3;
  uint64_t v7 = (void *)(*(void *)(a1 + 40)
                + 40
                * *((unsigned int *)std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (uint64_t)a3, (uint64_t)&std::piecewise_construct, v13)+ 10));
  if (!std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(v7, (uint64_t)a2))
  {
    uint64_t v10 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v13, "GetSymbolIndex");
    std::string::basic_string[abi:ne180100]<0>(v11, "Unknown symbol name.");
    E5RT::Status::Status(v12, 1, v11);
    E5RT::E5RTError::E5RTError(v10, v13, v12);
  }
  v13[0] = a2;
  return *((unsigned int *)std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v7, (uint64_t)a2, (uint64_t)&std::piecewise_construct, v13)+ 10);
}

void sub_1924514B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if ((v23 & 1) == 0)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t sub_192451568(void *a1)
{
  uint64_t v2 = *(void *)(a1[2] + 8 * (*(unsigned int (**)(void *))(*a1 + 80))(a1));
  if (*(unsigned char *)(**(void **)(a1[8] + 8 * *(unsigned int *)(v2 + 28)) + 52))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v7, "GetSymbolDataOffset");
    std::string::basic_string[abi:ne180100]<0>(v5, "Section has file data enabled.");
    E5RT::Status::Status(v6, 2, v5);
    E5RT::E5RTError::E5RTError(exception, v7, v6);
  }
  return *(void *)(v2 + 40);
}

void sub_192451658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t sub_1924516CC(uint64_t a1)
{
  return (*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3;
}

uint64_t *std::unique_ptr<E5RT_FB::SectionDataT>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x192FF16B0](v2, 0x10C402FEFCB83);
  }
  return a1;
}

uint64_t *std::unique_ptr<E5RT_FB::SectionT>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x192FF16B0](v2, 0x1012C4016A3B764);
  }
  return a1;
}

uint64_t **sub_19245178C(uint64_t **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)(v2 + 1));
    uint64_t v3 = *v2;
    uint64_t *v2 = 0;
    if (v3)
    {
      if (*(char *)(v3 + 23) < 0) {
        operator delete(*(void **)v3);
      }
      MEMORY[0x192FF16B0](v3, 0x1012C4016A3B764);
    }
    MEMORY[0x192FF16B0](v2, 0x1030C40EF383451);
  }
  return a1;
}

void flatbuffers::FlatBufferBuilder::~FlatBufferBuilder(flatbuffers::FlatBufferBuilder *this)
{
  uint64_t v2 = *((void *)this + 12);
  if (v2)
  {
    std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(*((void *)this + 12), *(void **)(v2 + 8));
    MEMORY[0x192FF16B0](v2, 0x1060C40C2B13FB5);
  }
  uint64_t v3 = *((void *)this + 6);
  if (!v3)
  {
LABEL_6:
    *((void *)this + 6) = 0;
    if (!*((unsigned char *)this + 8)) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  if (*(void *)this)
  {
    (*(void (**)(void))(**(void **)this + 24))(*(void *)this);
    goto LABEL_6;
  }
  MEMORY[0x192FF1690](v3, 0x1000C8077774924);
  *((void *)this + 6) = 0;
  if (!*((unsigned char *)this + 8)) {
    goto LABEL_9;
  }
LABEL_7:
  if (*(void *)this) {
    (*(void (**)(void))(**(void **)this + 8))(*(void *)this);
  }
LABEL_9:
  *(void *)this = 0;
  *((unsigned char *)this + 8) = 0;
}

uint64_t *std::unique_ptr<E5RT_FB::SymbolT>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x192FF16B0](v2, 0x1012C4004DB1A28);
  }
  return a1;
}

void *std::vector<std::unique_ptr<E5RT_FB::SectionDataT>>::__push_back_slow_path<std::unique_ptr<E5RT_FB::SectionDataT>>(void *a1, uint64_t *a2)
{
  uint64_t v3 = a1[1] - *a1;
  uint64_t v4 = v3 >> 3;
  unint64_t v5 = (v3 >> 3) + 1;
  if (v5 >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 2 > v5) {
    unint64_t v5 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v9 = (char *)operator new(8 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = &v9[8 * v4];
  uint64_t v11 = &v9[8 * v8];
  uint64_t v12 = *a2;
  *a2 = 0;
  *(void *)uint64_t v10 = v12;
  uint64_t v13 = v10 + 8;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v15) {
      return v13;
    }
    goto LABEL_28;
  }
  unint64_t v16 = (unint64_t)&v15[-*a1 - 8];
  if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v3 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15) {
    goto LABEL_36;
  }
  uint64_t v17 = (v16 >> 3) + 1;
  uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  v10 -= v18;
  uint64_t v19 = &v15[-v18];
  unint64_t v20 = v15 - 16;
  uint64_t v21 = &v9[8 * v4 - 16];
  uint64_t v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v24 = *((_OWORD *)v20 - 1);
    long long v23 = *(_OWORD *)v20;
    *((_OWORD *)v20 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = 0uLL;
    *(_OWORD *)unint64_t v20 = 0uLL;
    *((_OWORD *)v21 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v24;
    *(_OWORD *)uint64_t v21 = v23;
    v20 -= 32;
    v21 -= 32;
    v22 -= 4;
  }
  while (v22);
  uint64_t v15 = v19;
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_36:
    do
    {
      uint64_t v25 = *((void *)v15 - 1);
      v15 -= 8;
      *(void *)uint64_t v15 = 0;
      *((void *)v10 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v25;
      v10 -= 8;
    }
    while (v15 != v14);
  }
  unint64_t v26 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  if (v15 != v26)
  {
    do
    {
      uint64_t v28 = *((void *)v15 - 1);
      v15 -= 8;
      uint64_t v27 = v28;
      *(void *)uint64_t v15 = 0;
      if (v28)
      {
        int v29 = *(void **)v27;
        if (*(void *)v27)
        {
          *(void *)(v27 + 8) = v29;
          operator delete(v29);
        }
        MEMORY[0x192FF16B0](v27, 0x10C402FEFCB83);
      }
    }
    while (v15 != v26);
    uint64_t v15 = v26;
  }
  if (v15) {
LABEL_28:
  }
    operator delete(v15);
  return v13;
}

void *std::vector<std::unique_ptr<E5RT_FB::SectionT>>::__push_back_slow_path<std::unique_ptr<E5RT_FB::SectionT>>(void *a1, uint64_t *a2)
{
  uint64_t v3 = a1[1] - *a1;
  uint64_t v4 = v3 >> 3;
  unint64_t v5 = (v3 >> 3) + 1;
  if (v5 >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 2 > v5) {
    unint64_t v5 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v9 = (char *)operator new(8 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = &v9[8 * v4];
  uint64_t v11 = &v9[8 * v8];
  uint64_t v12 = *a2;
  *a2 = 0;
  *(void *)uint64_t v10 = v12;
  uint64_t v13 = v10 + 8;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v15) {
      return v13;
    }
    goto LABEL_28;
  }
  unint64_t v16 = (unint64_t)&v15[-*a1 - 8];
  if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v3 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15) {
    goto LABEL_36;
  }
  uint64_t v17 = (v16 >> 3) + 1;
  uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  v10 -= v18;
  uint64_t v19 = &v15[-v18];
  unint64_t v20 = v15 - 16;
  uint64_t v21 = &v9[8 * v4 - 16];
  uint64_t v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v24 = *((_OWORD *)v20 - 1);
    long long v23 = *(_OWORD *)v20;
    *((_OWORD *)v20 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = 0uLL;
    *(_OWORD *)unint64_t v20 = 0uLL;
    *((_OWORD *)v21 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v24;
    *(_OWORD *)uint64_t v21 = v23;
    v20 -= 32;
    v21 -= 32;
    v22 -= 4;
  }
  while (v22);
  uint64_t v15 = v19;
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_36:
    do
    {
      uint64_t v25 = *((void *)v15 - 1);
      v15 -= 8;
      *(void *)uint64_t v15 = 0;
      *((void *)v10 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v25;
      v10 -= 8;
    }
    while (v15 != v14);
  }
  unint64_t v26 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  if (v15 != v26)
  {
    do
    {
      uint64_t v28 = *((void *)v15 - 1);
      v15 -= 8;
      uint64_t v27 = v28;
      *(void *)uint64_t v15 = 0;
      if (v28)
      {
        if (*(char *)(v27 + 23) < 0) {
          operator delete(*(void **)v27);
        }
        MEMORY[0x192FF16B0](v27, 0x1012C4016A3B764);
      }
    }
    while (v15 != v26);
    uint64_t v15 = v26;
  }
  if (v15) {
LABEL_28:
  }
    operator delete(v15);
  return v13;
}

void *std::vector<std::unique_ptr<E5RT_FB::SymbolT>>::__push_back_slow_path<std::unique_ptr<E5RT_FB::SymbolT>>(void *a1, uint64_t *a2)
{
  uint64_t v3 = a1[1] - *a1;
  uint64_t v4 = v3 >> 3;
  unint64_t v5 = (v3 >> 3) + 1;
  if (v5 >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 2 > v5) {
    unint64_t v5 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v9 = (char *)operator new(8 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = &v9[8 * v4];
  uint64_t v11 = &v9[8 * v8];
  uint64_t v12 = *a2;
  *a2 = 0;
  *(void *)uint64_t v10 = v12;
  uint64_t v13 = v10 + 8;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v15) {
      return v13;
    }
    goto LABEL_28;
  }
  unint64_t v16 = (unint64_t)&v15[-*a1 - 8];
  if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v3 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15) {
    goto LABEL_36;
  }
  uint64_t v17 = (v16 >> 3) + 1;
  uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  v10 -= v18;
  uint64_t v19 = &v15[-v18];
  unint64_t v20 = v15 - 16;
  uint64_t v21 = &v9[8 * v4 - 16];
  uint64_t v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v24 = *((_OWORD *)v20 - 1);
    long long v23 = *(_OWORD *)v20;
    *((_OWORD *)v20 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = 0uLL;
    *(_OWORD *)unint64_t v20 = 0uLL;
    *((_OWORD *)v21 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v24;
    *(_OWORD *)uint64_t v21 = v23;
    v20 -= 32;
    v21 -= 32;
    v22 -= 4;
  }
  while (v22);
  uint64_t v15 = v19;
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_36:
    do
    {
      uint64_t v25 = *((void *)v15 - 1);
      v15 -= 8;
      *(void *)uint64_t v15 = 0;
      *((void *)v10 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v25;
      v10 -= 8;
    }
    while (v15 != v14);
  }
  unint64_t v26 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  if (v15 != v26)
  {
    do
    {
      uint64_t v28 = *((void *)v15 - 1);
      v15 -= 8;
      uint64_t v27 = v28;
      *(void *)uint64_t v15 = 0;
      if (v28)
      {
        if (*(char *)(v27 + 23) < 0) {
          operator delete(*(void **)v27);
        }
        MEMORY[0x192FF16B0](v27, 0x1012C4004DB1A28);
      }
    }
    while (v15 != v26);
    uint64_t v15 = v26;
  }
  if (v15) {
LABEL_28:
  }
    operator delete(v15);
  return v13;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVector<flatbuffers::Offset<E5RT_FB::Section>,E5RT_FB::CreateProgram(flatbuffers::FlatBufferBuilder&,E5RT_FB::ProgramT const*,std::function<unsigned long long ()(void *)> const*)::{lambda(unsigned long,E5RT_FB::CreateProgram(flatbuffers::FlatBufferBuilder&,E5RT_FB::ProgramT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs *)#1},E5RT_FB::CreateProgram(flatbuffers::FlatBufferBuilder&,E5RT_FB::ProgramT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs>(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, uint64_t a3)
{
  if (a2)
  {
    if (a2 >> 62) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = 4 * a2;
    uint64_t v7 = (char *)operator new(4 * a2);
    bzero(v7, 4 * a2);
    uint64_t v8 = 0;
    uint64_t v9 = &v7[v6];
    while (1)
    {
      uint64_t v10 = *(void *)(*(void *)(*(void *)(a3 + 8) + 8) + 8 * v8);
      char v11 = *(unsigned char *)(v10 + 23);
      if (v11 < 0)
      {
        uint64_t v12 = *(flatbuffers::FlatBufferBuilder **)a3;
        if (*(void *)(v10 + 8))
        {
LABEL_6:
          if (v11 >= 0) {
            uint64_t v13 = *(const char **)(*(void *)(*(void *)(a3 + 8) + 8) + 8 * v8);
          }
          else {
            uint64_t v13 = *(const char **)v10;
          }
          if (v11 >= 0) {
            unint64_t v14 = *(unsigned __int8 *)(v10 + 23);
          }
          else {
            unint64_t v14 = *(void *)(v10 + 8);
          }
          int String = flatbuffers::FlatBufferBuilder::CreateString(v12, v13, v14);
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t v12 = *(flatbuffers::FlatBufferBuilder **)a3;
        if (*(unsigned char *)(v10 + 23)) {
          goto LABEL_6;
        }
      }
      int String = 0;
LABEL_15:
      *(_DWORD *)&v7[4 * v8++] = E5RT_FB::CreateSection(v12, String, *(_DWORD *)(v10 + 24), *(void *)(v10 + 32), *(void *)(v10 + 40), *(_DWORD *)(v10 + 48), *(unsigned __int8 *)(v10 + 52));
      if (a2 == v8) {
        goto LABEL_18;
      }
    }
  }
  uint64_t v7 = 0;
  uint64_t v9 = 0;
LABEL_18:
  if (v9 == v7) {
    unint64_t v16 = &flatbuffers::data<flatbuffers::Offset<E5RT_FB::Section>,std::allocator<flatbuffers::Offset<E5RT_FB::Section>>>(std::vector<flatbuffers::Offset<E5RT_FB::Section>> const&)::t;
  }
  else {
    unint64_t v16 = v7;
  }
  uint64_t v17 = flatbuffers::FlatBufferBuilder::CreateVector<Block>(a1, (uint64_t)v16, (v9 - v7) >> 2);
  if (v7) {
    operator delete(v7);
  }
  return v17;
}

void sub_19245204C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (v11) {
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t E5RT_FB::CreateSymtab(uint64_t a1, void *a2, uint64_t a3)
{
  v9[0] = a1;
  v9[1] = a2;
  v9[2] = a3;
  uint64_t v4 = a2[1] - *a2;
  if (v4)
  {
    int v5 = flatbuffers::FlatBufferBuilder::CreateVector<flatbuffers::Offset<E5RT_FB::Symbol>,E5RT_FB::CreateSymtab(flatbuffers::FlatBufferBuilder&,E5RT_FB::SymtabT const*,std::function<unsigned long long ()(void *)> const*)::{lambda(unsigned long,E5RT_FB::CreateSymtab(flatbuffers::FlatBufferBuilder&,E5RT_FB::SymtabT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs *)#1},E5RT_FB::CreateSymtab(flatbuffers::FlatBufferBuilder&,E5RT_FB::SymtabT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs>((flatbuffers::FlatBufferBuilder *)a1, v4 >> 3, (uint64_t)v9);
    if (!*(unsigned char *)(a1 + 78)) {
      goto LABEL_3;
    }
LABEL_9:
    sub_19244C6B0();
  }
  int v5 = 0;
  if (*(unsigned char *)(a1 + 78)) {
    goto LABEL_9;
  }
LABEL_3:
  if (*(_DWORD *)(a1 + 72)) {
    sub_19244C684();
  }
  *(unsigned char *)(a1 + 78) = 1;
  int v6 = *(_DWORD *)(a1 + 40);
  if (v5)
  {
    flatbuffers::FlatBufferBuilder::Align(a1, 4uLL);
    unsigned int v7 = *(_DWORD *)(a1 + 40);
    if (v5 - 1 >= v7) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(a1, 4, v7 - v5 + 4, 0);
  }
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v6);
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVector<flatbuffers::Offset<E5RT_FB::SectionData>,E5RT_FB::CreateProgram(flatbuffers::FlatBufferBuilder&,E5RT_FB::ProgramT const*,std::function<unsigned long long ()(void *)> const*)::{lambda(unsigned long,E5RT_FB::CreateProgram(flatbuffers::FlatBufferBuilder&,E5RT_FB::ProgramT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs *)#2},E5RT_FB::CreateProgram(flatbuffers::FlatBufferBuilder&,E5RT_FB::ProgramT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs>(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, uint64_t a3)
{
  if (a2)
  {
    if (a2 >> 62) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = 4 * a2;
    unsigned int v7 = (char *)operator new(4 * a2);
    bzero(v7, 4 * a2);
    uint64_t v8 = 0;
    uint64_t v9 = &v7[v6];
    do
    {
      *(_DWORD *)&v7[4 * v8] = E5RT_FB::CreateSectionData(*(flatbuffers::FlatBufferBuilder **)a3, *(void *)(*(void *)(*(void *)(a3 + 8) + 40) + 8 * v8));
      ++v8;
    }
    while (a2 != v8);
  }
  else
  {
    unsigned int v7 = 0;
    uint64_t v9 = 0;
  }
  if (v9 == v7) {
    uint64_t v10 = &flatbuffers::data<flatbuffers::Offset<E5RT_FB::SectionData>,std::allocator<flatbuffers::Offset<E5RT_FB::SectionData>>>(std::vector<flatbuffers::Offset<E5RT_FB::SectionData>> const&)::t;
  }
  else {
    uint64_t v10 = v7;
  }
  uint64_t v11 = flatbuffers::FlatBufferBuilder::CreateVector<Block>(a1, (uint64_t)v10, (v9 - v7) >> 2);
  if (v7) {
    operator delete(v7);
  }
  return v11;
}

void sub_192452230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (v11) {
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t E5RT_FB::CreateProgram(flatbuffers::FlatBufferBuilder *this, int a2, int a3, int a4, int a5)
{
  if (*((unsigned char *)this + 78)) {
    sub_19244C6B0();
  }
  if (*((_DWORD *)this + 18)) {
    sub_19244C684();
  }
  *((unsigned char *)this + 78) = 1;
  int v10 = *((_DWORD *)this + 10);
  if (a5)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v11 = *((_DWORD *)this + 10);
    if (a5 - 1 >= v11) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 10, v11 - a5 + 4, 0);
  }
  if (a4)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v12 = *((_DWORD *)this + 10);
    if (a4 - 1 >= v12) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 8, v12 - a4 + 4, 0);
  }
  if (a3)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v13 = *((_DWORD *)this + 10);
    if (a3 - 1 >= v13) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 6, v13 - a3 + 4, 0);
  }
  if (a2)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v14 = *((_DWORD *)this + 10);
    if (a2 - 1 >= v14) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 4, v14 - a2 + 4, 0);
  }
  uint64_t result = flatbuffers::FlatBufferBuilder::EndTable(this, v10);
  unint64_t v16 = (int *)(*((void *)this + 6) + *((void *)this + 4) - result);
  uint64_t v17 = (unsigned __int16 *)((char *)v16 - *v16);
  unsigned int v18 = *v17;
  if (v18 < 5 || !v17[2]) {
    sub_19244C8C0();
  }
  if (v18 < 7 || !v17[3]) {
    sub_19244C8C0();
  }
  return result;
}

uint64_t E5RT_FB::CreateProgramHeader(flatbuffers::FlatBufferBuilder *this, int a2, int a3, int a4, uint64_t a5)
{
  if (*((unsigned char *)this + 78)) {
    sub_19244C6B0();
  }
  if (*((_DWORD *)this + 18)) {
    sub_19244C684();
  }
  *((unsigned char *)this + 78) = 1;
  int v9 = *((_DWORD *)this + 10);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((uint64_t)this, 10, a5, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((uint64_t)this, 8, a4, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((uint64_t)this, 6, a3, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((uint64_t)this, 4, a2, 0);

  return flatbuffers::FlatBufferBuilder::EndTable(this, v9);
}

uint64_t flatbuffers::FlatBufferBuilder::AddElement<unsigned short>(uint64_t this, uint64_t a2, int a3, int a4)
{
  __int16 v4 = a3;
  uint64_t v6 = this;
  if (a3 != a4 || *(unsigned char *)(this + 88))
  {
    this = flatbuffers::FlatBufferBuilder::Align(this, 2uLL);
    unint64_t v7 = *(void *)(v6 + 56);
    unint64_t v8 = *(void *)(v6 + 64);
    BOOL v9 = v7 >= v8;
    unint64_t v10 = v7 - v8;
    if (!v9 || v8 < *(void *)(v6 + 48)) {
      sub_19244C6DC();
    }
    if (v10 <= 1) {
      this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v6, 2uLL);
    }
    uint64_t v11 = *(unsigned int *)(v6 + 40);
    if (v11 >= 0x7FFFFFFF) {
      sub_19244C708();
    }
    unint64_t v13 = *(void *)(v6 + 56);
    unint64_t v12 = *(void *)(v6 + 64);
    *(_WORD *)(v13 - 2) = v4;
    v13 -= 2;
    *(void *)(v6 + 56) = v13;
    uint64_t v14 = v11 + 2;
    *(_DWORD *)(v6 + 40) = v11 + 2;
    unint64_t v15 = v13 - v12;
    if (v13 < v12 || v12 < *(void *)(v6 + 48)) {
      sub_19244C6DC();
    }
    unsigned int v16 = v14;
    if (v15 <= 7)
    {
      this = flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v6, 8uLL);
      unsigned int v16 = *(_DWORD *)(v6 + 40);
    }
    if (v16 >= 0x7FFFFFFF) {
      sub_19244C708();
    }
    **(void **)(v6 + 64) = v14 | (a2 << 32);
    *(void *)(v6 + 64) += 8;
    ++*(_DWORD *)(v6 + 72);
    if (*(unsigned __int16 *)(v6 + 76) < a2) {
      *(_WORD *)(v6 + 76) = a2;
    }
  }
  return this;
}

uint64_t E5RT_FB::CreateSection(flatbuffers::FlatBufferBuilder *this, int a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  if (*((unsigned char *)this + 78)) {
    sub_19244C6B0();
  }
  if (*((_DWORD *)this + 18)) {
    sub_19244C684();
  }
  *((unsigned char *)this + 78) = 1;
  int v13 = *((_DWORD *)this + 10);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((uint64_t)this, 10, a5, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((uint64_t)this, 8, a4, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 12, a6, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 6, a3, 0);
  if (a2)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v14 = *((_DWORD *)this + 10);
    if (a2 - 1 >= v14) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 4, v14 - a2 + 4, 0);
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((uint64_t)this, 14, a7, 0);

  return flatbuffers::FlatBufferBuilder::EndTable(this, v13);
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVector<flatbuffers::Offset<E5RT_FB::Symbol>,E5RT_FB::CreateSymtab(flatbuffers::FlatBufferBuilder&,E5RT_FB::SymtabT const*,std::function<unsigned long long ()(void *)> const*)::{lambda(unsigned long,E5RT_FB::CreateSymtab(flatbuffers::FlatBufferBuilder&,E5RT_FB::SymtabT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs *)#1},E5RT_FB::CreateSymtab(flatbuffers::FlatBufferBuilder&,E5RT_FB::SymtabT const*,std::function<unsigned long long ()(void *)> const*)::_VectorArgs>(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, uint64_t a3)
{
  if (a2)
  {
    if (a2 >> 62) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = 4 * a2;
    unint64_t v7 = (char *)operator new(4 * a2);
    bzero(v7, 4 * a2);
    uint64_t v8 = 0;
    BOOL v9 = &v7[v6];
    while (1)
    {
      uint64_t v10 = *(void *)(**(void **)(a3 + 8) + 8 * v8);
      char v11 = *(unsigned char *)(v10 + 23);
      if (v11 < 0)
      {
        unint64_t v12 = *(flatbuffers::FlatBufferBuilder **)a3;
        if (*(void *)(v10 + 8))
        {
LABEL_6:
          if (v11 >= 0) {
            int v13 = *(const char **)(**(void **)(a3 + 8) + 8 * v8);
          }
          else {
            int v13 = *(const char **)v10;
          }
          if (v11 >= 0) {
            unint64_t v14 = *(unsigned __int8 *)(v10 + 23);
          }
          else {
            unint64_t v14 = *(void *)(v10 + 8);
          }
          int String = flatbuffers::FlatBufferBuilder::CreateString(v12, v13, v14);
          goto LABEL_15;
        }
      }
      else
      {
        unint64_t v12 = *(flatbuffers::FlatBufferBuilder **)a3;
        if (*(unsigned char *)(v10 + 23)) {
          goto LABEL_6;
        }
      }
      int String = 0;
LABEL_15:
      *(_DWORD *)&v7[4 * v8++] = E5RT_FB::CreateSymbol(v12, String, *(_DWORD *)(v10 + 24), *(_DWORD *)(v10 + 28), *(void *)(v10 + 32), *(void *)(v10 + 40), *(void *)(v10 + 48));
      if (a2 == v8) {
        goto LABEL_18;
      }
    }
  }
  unint64_t v7 = 0;
  BOOL v9 = 0;
LABEL_18:
  if (v9 == v7) {
    unsigned int v16 = &flatbuffers::data<flatbuffers::Offset<E5RT_FB::Symbol>,std::allocator<flatbuffers::Offset<E5RT_FB::Symbol>>>(std::vector<flatbuffers::Offset<E5RT_FB::Symbol>> const&)::t;
  }
  else {
    unsigned int v16 = v7;
  }
  uint64_t v17 = flatbuffers::FlatBufferBuilder::CreateVector<Block>(a1, (uint64_t)v16, (v9 - v7) >> 2);
  if (v7) {
    operator delete(v7);
  }
  return v17;
}

void sub_192452854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (v11) {
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t E5RT_FB::CreateSymbol(flatbuffers::FlatBufferBuilder *this, int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (*((unsigned char *)this + 78)) {
    sub_19244C6B0();
  }
  if (*((_DWORD *)this + 18)) {
    sub_19244C684();
  }
  *((unsigned char *)this + 78) = 1;
  int v13 = *((_DWORD *)this + 10);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((uint64_t)this, 14, a7, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((uint64_t)this, 12, a6, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((uint64_t)this, 10, a5, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 8, a4, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 6, a3, 0);
  if (a2)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v14 = *((_DWORD *)this + 10);
    if (a2 - 1 >= v14) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 4, v14 - a2 + 4, 0);
  }

  return flatbuffers::FlatBufferBuilder::EndTable(this, v13);
}

uint64_t E5RT_FB::CreateSectionData(flatbuffers::FlatBufferBuilder *this, uint64_t a2)
{
  uint64_t v3 = *(unsigned char **)a2;
  __int16 v4 = *(unsigned char **)(a2 + 8);
  if (v4 != v3)
  {
    int v6 = flatbuffers::FlatBufferBuilder::CreateVector<unsigned char>(this, v3, v4 - v3);
    if (!*((unsigned char *)this + 78)) {
      goto LABEL_3;
    }
LABEL_11:
    sub_19244C6B0();
  }
  int v6 = 0;
  if (*((unsigned char *)this + 78)) {
    goto LABEL_11;
  }
LABEL_3:
  if (*((_DWORD *)this + 18)) {
    sub_19244C684();
  }
  *((unsigned char *)this + 78) = 1;
  int v7 = *((_DWORD *)this + 10);
  if (v6)
  {
    flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unsigned int v8 = *((_DWORD *)this + 10);
    if (v6 - 1 >= v8) {
      sub_19244C760();
    }
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((uint64_t)this, 4, v8 - v6 + 4, 0);
  }

  return flatbuffers::FlatBufferBuilder::EndTable(this, v7);
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVector<unsigned char>(flatbuffers::FlatBufferBuilder *this, const void *a2, unint64_t a3)
{
  if (*((unsigned char *)this + 78)) {
    sub_19244C6B0();
  }
  if (*((_DWORD *)this + 18)) {
    sub_19244C684();
  }
  *((unsigned char *)this + 78) = 1;
  flatbuffers::FlatBufferBuilder::PreAlign((uint64_t)this, a3, 4uLL);
  if (a3)
  {
    if (!*((void *)this + 10)) {
      *((void *)this + 10) = 1;
    }
    unint64_t v6 = *((void *)this + 7);
    unint64_t v7 = *((void *)this + 8);
    BOOL v8 = v6 >= v7;
    unint64_t v9 = v6 - v7;
    if (!v8 || v7 < *((void *)this + 6)) {
      sub_19244C6DC();
    }
    if (v9 < a3) {
      flatbuffers::vector_downward::reallocate(this, a3);
    }
    unsigned int v10 = *((_DWORD *)this + 10);
    if (v10 >= 0x7FFFFFFF) {
      sub_19244C708();
    }
    char v11 = (void *)(*((void *)this + 7) - a3);
    *((void *)this + 7) = v11;
    *((_DWORD *)this + 10) = v10 + a3;
    memcpy(v11, a2, a3);
  }

  return flatbuffers::FlatBufferBuilder::EndVector(this, a3);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    int v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          int v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        int v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    char v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          unint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  unint64_t v26 = (char *)operator new(0x30uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  *(void *)unint64_t v26 = 0;
  *((void *)v26 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v11;
  uint64_t v27 = (std::string *)(v26 + 16);
  uint64_t v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    *((void *)v26 + 4) = *((void *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  *((_DWORD *)v26 + 10) = 0;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        uint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * v11);
        uint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      uint64_t v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *uint64_t v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  uint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  *uint64_t v33 = *v32;
  *uint64_t v32 = v45[0];
LABEL_92:
  uint64_t v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_1924531DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1924531F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *std::vector<std::unordered_map<std::string,unsigned int>>::__push_back_slow_path<std::unordered_map<std::string,unsigned int>>(char **a1, uint64_t *a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
    unint64_t v6 = 0x666666666666666;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x666666666666666) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v7 = (char *)operator new(40 * v6);
  }
  else
  {
    int8x8_t v7 = 0;
  }
  unint64_t v8 = &v7[40 * v3];
  uint64_t v9 = *a2;
  unint64_t v10 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  *(void *)unint64_t v8 = v9;
  *((void *)v8 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v10;
  uint64_t v11 = a2[2];
  *((void *)v8 + 2) = v11;
  uint64_t v12 = a2[3];
  *((void *)v8 + 3) = v12;
  *((_DWORD *)v8 + 8) = *((_DWORD *)a2 + 8);
  if (v12)
  {
    unint64_t v13 = *(void *)(v11 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      BOOL v15 = v13 >= v10;
      unint64_t v14 = v13 % v10;
      if (!v15) {
        unint64_t v14 = v13;
      }
    }
    else
    {
      unint64_t v14 = v13 & (v10 - 1);
    }
    *(void *)(v9 + 8 * v14) = v8 + 16;
    a2[2] = 0;
    a2[3] = 0;
  }
  char v16 = &v7[40 * v6];
  uint64_t v17 = v8 + 40;
  unint64_t v18 = *a1;
  uint64_t v19 = a1[1];
  if (v19 == *a1)
  {
    *a1 = v8;
    a1[1] = v17;
    a1[2] = v16;
    if (!v19) {
      return v17;
    }
    goto LABEL_37;
  }
  uint64_t v20 = 0;
  do
  {
    uint64_t v22 = &v8[v20];
    uint64_t v23 = &v19[v20];
    uint64_t v24 = *(void *)&v19[v20 - 40];
    *((void *)v23 - 5) = 0;
    *((void *)v22 - 5) = v24;
    *((void *)v22 - 4) = *(void *)&v19[v20 - 32];
    *((void *)v23 - 4) = 0;
    uint64_t v25 = *(void *)&v19[v20 - 24];
    *(void *)&v8[v20 - 24] = v25;
    uint64_t v26 = *(void *)&v19[v20 - 16];
    *((void *)v22 - 2) = v26;
    *((_DWORD *)v22 - 2) = *(_DWORD *)&v19[v20 - 8];
    if (v26)
    {
      unint64_t v21 = *(void *)(v25 + 8);
      unint64_t v27 = *((void *)v22 - 4);
      if ((v27 & (v27 - 1)) != 0)
      {
        if (v21 >= v27) {
          v21 %= v27;
        }
      }
      else
      {
        v21 &= v27 - 1;
      }
      *(void *)(v24 + 8 * v2E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = &v8[v20 - 24];
      *(void *)&v19[v20 - 24] = 0;
      *(void *)&v19[v20 - 16] = 0;
    }
    v20 -= 40;
  }
  while (&v19[v20] != v18);
  uint64_t v28 = *a1;
  uint64_t v19 = a1[1];
  *a1 = &v8[v20];
  a1[1] = v17;
  a1[2] = v16;
  if (v19 != v28)
  {
    do
    {
      long long v29 = (void **)*((void *)v19 - 3);
      if (v29)
      {
        do
        {
          uint64_t v32 = (void **)*v29;
          if (*((char *)v29 + 39) < 0) {
            operator delete(v29[2]);
          }
          operator delete(v29);
          long long v29 = v32;
        }
        while (v32);
      }
      float v31 = (void *)*((void *)v19 - 5);
      v19 -= 40;
      float v30 = v31;
      *(void *)uint64_t v19 = 0;
      if (v31) {
        operator delete(v30);
      }
    }
    while (v19 != v28);
    uint64_t v19 = v28;
  }
  if (v19) {
LABEL_37:
  }
    operator delete(v19);
  return v17;
}

void sub_192453454(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  char v6 = 4;
  strcpy(__p, "e5rt");
  uint64_t v2 = E5RT::GetE5RTLog((uint64_t)__p);
  if (v6 < 0)
  {
    operator delete(*(void **)__p);
    os_signpost_id_t v3 = *(void *)(a1 + 32);
    if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_9;
    }
  }
  else
  {
    os_signpost_id_t v3 = *(void *)(a1 + 32);
    if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_9;
    }
  }
  if (os_signpost_enabled(v2))
  {
    unint64_t v4 = *(uint64_t ***)(a1 + 40);
    if (*((char *)v4 + 23) < 0) {
      unint64_t v4 = (uint64_t **)*v4;
    }
    *(_DWORD *)std::string __p = 136315138;
    *(void *)&__p[4] = v4;
    _os_signpost_emit_with_name_impl(&dword_1920CB000, v2, OS_SIGNPOST_INTERVAL_END, v3, "ComputeProgamLoad", "BundlePath=%{signpost.description:attribute}s", __p, 0xCu);
  }
LABEL_9:
}

void sub_192453570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19245358C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    unint64_t v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      unint64_t v4 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

E5RT_FB::ProgramT **std::unique_ptr<E5RT_FB::ProgramT>::~unique_ptr[abi:ne180100](E5RT_FB::ProgramT **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    E5RT_FB::ProgramT::~ProgramT(v2);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

void sub_192453688(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    unint64_t v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      unint64_t v4 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v2;
    operator delete(v4);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t sub_19245375C(uint64_t a1)
{
  return a1 + 8;
}

void sub_192453764(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE39AF58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_192453784(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE39AF58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void sub_1924537D8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t sub_192453858(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_1924538D4(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t sub_192453960(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_192453968(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 24);
}

uint64_t sub_192453974(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 28);
}

uint64_t sub_192453980(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 32);
}

uint64_t sub_19245398C(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t sub_192453998(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

void std::__shared_ptr_pointer<E5RT_FB::SymbolT  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<E5RT_FB::SymbolT  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN7E5RT_FB7SymbolTEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN7E5RT_FB7SymbolTEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN7E5RT_FB7SymbolTEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN7E5RT_FB7SymbolTEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void sub_192453A50(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE39B010;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_192453A70(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE39B010;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t sub_192453AC4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  *(void *)(result + 32) = 0;
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    JUMPOUT(0x192FF16B0);
  }
  return result;
}

uint64_t sub_192453B30(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x192FF16B0](v2, 0x1012C4016A3B764);
  }
  return a1;
}

void sub_192453B88(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    MEMORY[0x192FF16B0](v1, 0x1012C4016A3B764);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t sub_192453C00(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_192453C08(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 24);
}

uint64_t sub_192453C14(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 32);
}

uint64_t sub_192453C20(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_192453C28(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

void *sub_192453C34(void *a1)
{
  uint64_t v2 = a1[11];
  a1[11] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = (E5RT_FB::ProgramT *)a1[10];
  a1[10] = 0;
  if (v3)
  {
    E5RT_FB::ProgramT::~ProgramT(v3);
    MEMORY[0x192FF16B0]();
  }
  uint64_t v4 = a1[7];
  if (v4)
  {
    uint64_t v5 = a1[8];
    char v6 = (void *)a1[7];
    if (v5 != v4)
    {
      do
      {
        uint64_t v7 = *(std::__shared_weak_count **)(v5 - 8);
        if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        v5 -= 16;
      }
      while (v5 != v4);
      char v6 = (void *)a1[7];
    }
    a1[8] = v4;
    operator delete(v6);
  }
  uint64_t v8 = a1[3];
  if (v8)
  {
    uint64_t v9 = a1[4];
    unint64_t v10 = (void *)a1[3];
    if (v9 != v8)
    {
      do
      {
        uint64_t v11 = *(std::__shared_weak_count **)(v9 - 8);
        if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        v9 -= 16;
      }
      while (v9 != v8);
      unint64_t v10 = (void *)a1[3];
    }
    a1[4] = v8;
    operator delete(v10);
  }
  E5RT::ComputeProgramHeaderPriv::~ComputeProgramHeaderPriv((E5RT::ComputeProgramHeaderPriv *)(a1 + 1));
  return a1;
}

void sub_192453DC4(void *a1)
{
  sub_192453C34(a1);

  JUMPOUT(0x192FF16B0);
}

BOOL sub_192453DFC(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  return !(*(unsigned int (**)(uint64_t))(*(void *)(a1 + 8) + 24))(a1 + 8)
      && (*(unsigned int (**)(uint64_t))(*(void *)v1 + 32))(v1) < 2;
}

uint64_t sub_192453E88(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_192453E90(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_192453E98(uint64_t a1)
{
  return a1 + 48;
}

_OWORD *sub_192453EA0@<X0>(_OWORD *result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v4 = *((void *)result + 3);
  for (uint64_t i = *((void *)result + 4); v4 != i; v4 += 16)
  {
    uint64_t result = (_OWORD *)(*(uint64_t (**)(void))(**(void **)v4 + 24))();
    if (result == a2)
    {
      uint64_t result = (_OWORD *)(*(uint64_t (**)(void))(**(void **)v4 + 32))();
      if (result == a3)
      {
        uint64_t v9 = (void *)a4[1];
        if ((unint64_t)v9 >= a4[2])
        {
          uint64_t result = std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__push_back_slow_path<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions> const&>((uint64_t)a4, (long long *)v4);
        }
        else
        {
          uint64_t v10 = *(void *)(v4 + 8);
          void *v9 = *(void *)v4;
          v9[1] = v10;
          if (v10) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t result = v9 + 2;
        }
        a4[1] = result;
      }
    }
  }
  return result;
}

void sub_192453F98(_Unwind_Exception *a1)
{
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_192453FAC(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  unint64_t v50 = 0;
  unint64_t v3 = (long long *)a1[3];
  uint64_t v4 = (long long *)a1[4];
  if (v3 == v4) {
    goto LABEL_94;
  }
  do
  {
    if ((*(unsigned int (**)(void))(**(void **)v3 + 24))(*(void *)v3) == 5
      && (*(uint64_t (**)(void))(**(void **)v3 + 32))(*(void *)v3) == 1)
    {
      uint64_t v7 = v49;
      if ((unint64_t)v49 >= v50)
      {
        char v6 = std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__push_back_slow_path<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions> const&>((uint64_t)&v48, v3);
      }
      else
      {
        *uint64_t v49 = *(void *)v3;
        uint64_t v8 = *((void *)v3 + 1);
        v7[1] = v8;
        if (v8) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
        }
        char v6 = v7 + 2;
      }
      uint64_t v49 = v6;
    }
    ++v3;
  }
  while (v3 != v4);
  if (v49 == v48)
  {
LABEL_94:
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v55, "GetAliasSymbols");
    std::string::basic_string[abi:ne180100]<0>(v52, "Invalid compute program. No symbol desc section.");
    E5RT::Status::Status(&__p, 8, v52);
    E5RT::E5RTError::E5RTError(exception, &v55, &__p);
  }
  uint64_t v9 = *(void *)v48;
  uint64_t v10 = (std::__shared_weak_count *)*((void *)v48 + 1);
  long long v47 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v46 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9);
  uint64_t v11 = (void *)a1[7];
  uint64_t v12 = (void *)a1[8];
  if (v11 != v12)
  {
    unint64_t v13 = a1 + 1;
    while ((*(unsigned int (**)(void))(*(void *)*v11 + 24))(*v11) != 5)
    {
LABEL_19:
      v11 += 2;
      if (v11 == v12)
      {
        uint64_t v10 = v47;
        goto LABEL_78;
      }
    }
    uint64_t v14 = (*(uint64_t (**)(void))(*(void *)*v11 + 16))(*v11);
    uint64_t v15 = (*(uint64_t (**)(void))(*(void *)*v11 + 56))(*v11);
    if (!(*(unsigned int (**)(void *))(*v13 + 24))(a1 + 1)
      && (*(unsigned int (**)(void *))(*v13 + 32))(a1 + 1) <= 1)
    {
      operator new();
    }
    v55.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE377EC0;
    v55.__r_.__value_.__l.__size_ = (std::string::size_type)E5RT_FB::VerifySizePrefixedAliasDescBuffer;
    uint64_t v56 = &v55;
    v52[0] = &unk_1EE377BA8;
    v52[1] = E5RT_FB::UnPackSizePrefixedAliasDesc;
    *((void *)&v53 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v52;
    E5RT_FB::VerifyAndUnPackSizePrefixedE5RTBuffer<E5RT_FB::AliasDescT>((unsigned int *)(v46 + v15), (uint64_t)&v55, (uint64_t)v52);
    char v16 = (unsigned int *)__p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (*((void ***)&v53 + 1) == v52)
    {
      (*((void (**)(void **))v52[0] + 4))(v52);
      uint64_t v17 = v56;
      if (v56 != &v55)
      {
LABEL_28:
        if (v17) {
          (*(void (**)(void *))(*(void *)v17 + 40))(v17);
        }
        goto LABEL_32;
      }
    }
    else
    {
      if (*((void *)&v53 + 1)) {
        (*(void (**)(void))(**((void **)&v53 + 1) + 40))(*((void *)&v53 + 1));
      }
      uint64_t v17 = v56;
      if (v56 != &v55) {
        goto LABEL_28;
      }
    }
    (*(void (**)(std::string *))(v55.__r_.__value_.__r.__words[0] + 32))(&v55);
LABEL_32:
    unint64_t v18 = *v16;
    uint64_t v19 = a1[7];
    if (v18 >= (a1[8] - v19) >> 4)
    {
      unint64_t v42 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v55, "GetAliasSymbols");
      std::string::basic_string[abi:ne180100]<0>(v52, "Alias is referring to a symbol index that is out of range.");
      E5RT::Status::Status(&__p, 8, v52);
      E5RT::E5RTError::E5RTError(v42, &v55, &__p);
    }
    if ((*(unsigned int (**)(void))(**(void **)(v19 + 16 * v18) + 24))(*(void *)(v19 + 16 * v18)) != 1)
    {
      unint64_t v43 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v55, "GetAliasSymbols");
      std::string::basic_string[abi:ne180100]<0>(v52, "Aliases are only supported for Operand symbols.");
      E5RT::Status::Status(&__p, 8, v52);
      E5RT::E5RTError::E5RTError(v43, &v55, &__p);
    }
    int8x8_t v20 = *(int8x8_t *)(a2 + 8);
    if (v20)
    {
      uint8x8_t v21 = (uint8x8_t)vcnt_s8(v20);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] > 1uLL)
      {
        unint64_t v22 = v18;
        if (*(void *)&v20 <= v18) {
          unint64_t v22 = v18 % *(void *)&v20;
        }
      }
      else
      {
        unint64_t v22 = (v20.i32[0] - 1) & v18;
      }
      uint64_t v23 = *(uint64_t ***)(*(void *)a2 + 8 * v22);
      if (v23)
      {
        uint64_t v24 = *v23;
        if (v24)
        {
          if (v21.u32[0] < 2uLL)
          {
            uint64_t v25 = *(void *)&v20 - 1;
            while (1)
            {
              uint64_t v27 = v24[1];
              if (v27 == v18)
              {
                if (*((_DWORD *)v24 + 4) == v18) {
                  goto LABEL_71;
                }
              }
              else if ((v27 & v25) != v22)
              {
                goto LABEL_54;
              }
              uint64_t v24 = (uint64_t *)*v24;
              if (!v24) {
                goto LABEL_54;
              }
            }
          }
          do
          {
            unint64_t v26 = v24[1];
            if (v26 == v18)
            {
              if (*((_DWORD *)v24 + 4) == v18)
              {
LABEL_71:
                uint64_t v36 = (uint64_t)(v24 + 3);
                if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v24 + 3, v14))
                {
                  unsigned int v44 = __cxa_allocate_exception(0x18uLL);
                  std::string::basic_string[abi:ne180100]<0>(&v55, "GetAliasSymbols");
                  std::string::basic_string[abi:ne180100]<0>(v52, "Found aliases with the same name.");
                  E5RT::Status::Status(&__p, 8, v52);
                  E5RT::E5RTError::E5RTError(v44, &v55, &__p);
                }
                if (*(char *)(v14 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)v14, *(void *)(v14 + 8));
                }
                else
                {
                  long long v37 = *(_OWORD *)v14;
                  v55.__r_.__value_.__r.__words[2] = *(void *)(v14 + 16);
                  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v37;
                }
                std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v36, (uint64_t)&v55, (uint64_t)&v55);
                if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
                {
                  uint64_t v33 = (void *)v55.__r_.__value_.__r.__words[0];
LABEL_17:
                  operator delete(v33);
                }
                goto LABEL_18;
              }
            }
            else
            {
              if (v26 >= *(void *)&v20) {
                v26 %= *(void *)&v20;
              }
              if (v26 != v22) {
                break;
              }
            }
            uint64_t v24 = (uint64_t *)*v24;
          }
          while (v24);
        }
      }
    }
LABEL_54:
    if (*(char *)(v14 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v14, *(void *)(v14 + 8));
    }
    else
    {
      long long v28 = *(_OWORD *)v14;
      __p.__r_.__value_.__r.__words[2] = *(void *)(v14 + 16);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v28;
    }
    *(_OWORD *)uint64_t v52 = 0u;
    long long v53 = 0u;
    int v54 = 1065353216;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v52, (uint64_t)&__p, (uint64_t)&__p);
    LODWORD(v55.__r_.__value_.__l.__data_) = v18;
    std::unordered_set<std::string>::unordered_set((uint64_t)&v55.__r_.__value_.__l.__size_, (uint64_t)v52);
    std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<std::string>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::unordered_set<std::string>>>(a2, (unsigned int *)&v55, (uint64_t)&v55);
    long long v29 = (void **)v56;
    if (v56)
    {
      do
      {
        BOOL v34 = (void **)*v29;
        if (*((char *)v29 + 39) < 0) {
          operator delete(v29[2]);
        }
        operator delete(v29);
        long long v29 = v34;
      }
      while (v34);
    }
    std::string::size_type size = (void *)v55.__r_.__value_.__l.__size_;
    v55.__r_.__value_.__l.__size_ = 0;
    if (size) {
      operator delete(size);
    }
    float v31 = (void **)v53;
    if ((void)v53)
    {
      do
      {
        unint64_t v35 = (void **)*v31;
        if (*((char *)v31 + 39) < 0) {
          operator delete(v31[2]);
        }
        operator delete(v31);
        float v31 = v35;
      }
      while (v35);
    }
    uint64_t v32 = v52[0];
    v52[0] = 0;
    if (v32) {
      operator delete(v32);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v33 = (void *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_17;
    }
LABEL_18:
    MEMORY[0x192FF16B0](v16, 0x1000C4052888210);
    goto LABEL_19;
  }
LABEL_78:
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  int8x8_t v38 = v48;
  if (v48)
  {
    unint64_t v39 = v49;
    uint8x8_t v40 = v48;
    if (v49 != v48)
    {
      do
      {
        uint64_t v41 = (std::__shared_weak_count *)*(v39 - 1);
        if (v41)
        {
          if (!atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        v39 -= 2;
      }
      while (v39 != v38);
      uint8x8_t v40 = v48;
    }
    uint64_t v49 = v38;
    operator delete(v40);
  }
}

void sub_192454944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  E5RT::Status::~Status((E5RT::Status *)&a17);
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a38 < 0)
  {
    operator delete(a33);
    uint64_t v41 = a9;
    if ((v39 & 1) == 0)
    {
LABEL_8:
      std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100](&a14);
      std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<std::string>>>>::~__hash_table(v41);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v41 = a9;
    if (!v39) {
      goto LABEL_8;
    }
  }
  __cxa_free_exception(v38);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100](&a14);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<std::string>>>>::~__hash_table(v41);
  _Unwind_Resume(a1);
}

void *std::function<std::unique_ptr<E5RT_FB::AliasDescT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t std::pair<unsigned int const,std::unordered_set<std::string>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 24);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  unint64_t v3 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void std::__function::__func<std::unique_ptr<E5RT_FB::AliasDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::AliasDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::AliasDescT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::~__func()
{
}

void *std::__function::__func<std::unique_ptr<E5RT_FB::AliasDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::AliasDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::AliasDescT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE377BA8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<E5RT_FB::AliasDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::AliasDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::AliasDescT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE377BA8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<E5RT_FB::AliasDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::AliasDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::AliasDescT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "PFNSt3__110unique_ptrIN7E5RT_FB10AliasDescTENS_14default_deleteIS2_EEEEPKvPKNS_8functionIFvPPvyEEEE") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"PFNSt3__110unique_ptrIN7E5RT_FB10AliasDescTENS_14default_deleteIS2_EEEEPKvPKNS_8functionIFvPPvyEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "PFNSt3__110unique_ptrIN7E5RT_FB10AliasDescTENS_14default_deleteIS2_EEEEPKvPKNS_8functionIFvPPvyEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFNSt3__110unique_ptrIN7E5RT_FB10AliasDescTENS_14default_deleteIS2_EEEEPKvPKNS_8functionIFvPPvyEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *std::__function::__func<std::unique_ptr<E5RT_FB::AliasDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::AliasDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::AliasDescT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::target_type()
{
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      unint64_t v3 = (void **)v2[5];
      if (v3)
      {
        do
        {
          char v6 = (void **)*v3;
          if (*((char *)v3 + 39) < 0) {
            operator delete(v3[2]);
          }
          operator delete(v3);
          unint64_t v3 = v6;
        }
        while (v6);
      }
      uint64_t v4 = (void *)v2[3];
      void v2[3] = 0;
      if (v4) {
        operator delete(v4);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void Espresso::AOT::MILCompilerForBnns::Run(std::__shared_weak_count *a1, uint64_t a2, int a3, uint64_t a4)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
  *(void *)a4 = a2;
  *(_DWORD *)(a4 + 8) = a3;
}

void sub_192454EF0(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v3 = 134218240;
  uint64_t v4 = a1;
  __int16 v5 = 2048;
  uint64_t v6 = a2;
  _os_log_error_impl(&dword_1920CB000, log, OS_LOG_TYPE_ERROR, "Cannot load E5 compiled for platforunint64_t m = 0x%llx on platforunint64_t m = 0x%llx.", (uint8_t *)&v3, 0x16u);
}

void sub_192454F78(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  __int16 v5 = a2;
  if (v4 != a2)
  {
    do
    {
      uint64_t v7 = *--v4;
      uint64_t v6 = v7;
      *uint64_t v4 = 0;
      if (v7)
      {
        if (*(char *)(v6 + 23) < 0) {
          operator delete(*(void **)v6);
        }
        MEMORY[0x192FF16B0](v6, 0x1012C4004DB1A28);
      }
    }
    while (v4 != a2);
    __int16 v5 = *(void **)a1;
  }
  *(void *)(a1 + 8) = a2;

  operator delete(v5);
}

void std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::vector(void **a1, char *a2, void **a3)
{
  __int16 v5 = (char *)*a1;
  uint64_t v6 = a2;
  if (v5 != a2)
  {
    do
    {
      uint64_t v8 = (std::__shared_weak_count *)*((void *)v5 - 1);
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      v5 -= 16;
    }
    while (v5 != a2);
    uint64_t v6 = *a3;
  }
  *a1 = a2;

  operator delete(v6);
}

size_t E5RT::LogErrorMessage(uint64_t *a1, uint64_t *a2)
{
  char v9 = 4;
  strcpy((char *)__p, "e5rt");
  E5RTLog = E5RT::GetE5RTLog((uint64_t)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (os_log_type_enabled(E5RTLog, OS_LOG_TYPE_ERROR)) {
    sub_192455394(a1, a2, E5RTLog);
  }
  __int16 v5 = (char *)off_1EC24F268();
  return strlcpy(v5, v6, 0x400uLL);
}

void sub_192455174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::HandleE5RTException(E5RT *this, const E5RT::E5RTError *a2)
{
  Status = (E5RT::Status *)E5RT::E5RTError::GetStatus(this);
  ErrorMessage = (uint64_t *)E5RT::Status::GetErrorMessage(Status);
  Location = (uint64_t *)E5RT::E5RTError::GetLocation(this);
  E5RT::LogErrorMessage(ErrorMessage, Location);

  return E5RT::Status::GetErrorCode(Status);
}

uint64_t E5RT::HandleMemoryAllocationException(E5RT *this, const std::bad_alloc *a2)
{
  char v8 = 4;
  strcpy((char *)__p, "e5rt");
  E5RTLog = E5RT::GetE5RTLog((uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (os_log_type_enabled(E5RTLog, OS_LOG_TYPE_ERROR)) {
    sub_19245543C((unint64_t)this, (uint64_t)E5RTLog, (unint64_t *)__p);
  }
  (*(void (**)(E5RT *))(*(void *)this + 16))(this);
  uint64_t v4 = (char *)off_1EC24F268();
  strlcpy(v4, v5, 0x400uLL);
  return 3;
}

void sub_1924552BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::HandleUnknownException(E5RT *this)
{
  char v4 = 4;
  strcpy((char *)__p, "e5rt");
  E5RTLog = E5RT::GetE5RTLog((uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (os_log_type_enabled(E5RTLog, OS_LOG_TYPE_ERROR)) {
    sub_19245558C(E5RTLog);
  }
  strcpy((char *)off_1EC24F268(), "E5RT encountered an unknown exception.");
  return 11;
}

void sub_192455378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_192455394(uint64_t *a1, uint64_t *a2, os_log_t log)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (*((char *)a1 + 23) >= 0) {
    int v3 = a1;
  }
  else {
    int v3 = (uint64_t *)*a1;
  }
  if (*((char *)a2 + 23) >= 0) {
    char v4 = a2;
  }
  else {
    char v4 = (uint64_t *)*a2;
  }
  int v5 = 136315394;
  uint64_t v6 = v3;
  __int16 v7 = 2080;
  char v8 = v4;
  _os_log_error_impl(&dword_1920CB000, log, OS_LOG_TYPE_ERROR, "%s @ %s", (uint8_t *)&v5, 0x16u);
}

void sub_19245543C(unint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v3 = *(void *)a1;
  *a3 = a1 & 0xFFFFFFFFFFFFLL | 0xA6BC000000000000;
  (*(void (**)(void))(v3 + 16))();
  OUTLINED_FUNCTION_1(&dword_1920CB000, v4, v5, "E5RT encountered a memory allocation exception. msg = %s.", v6, v7, v8, v9, 2u);
}

void sub_1924554E4(unint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v3 = *(void *)a1;
  *a3 = a1 & 0xFFFFFFFFFFFFLL | 0xA6BC000000000000;
  (*(void (**)(void))(v3 + 16))();
  OUTLINED_FUNCTION_1(&dword_1920CB000, v4, v5, "E5RT encountered an STL exception. msg = %s.", v6, v7, v8, v9, 2u);
}

void sub_19245558C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_1920CB000, log, OS_LOG_TYPE_ERROR, "E5RT encountered unknown exception.", v1, 2u);
}

uint64_t *std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v6 = v2;
    uint64_t v3 = a1[4];
    if (!v3) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, &v6);
  }
  uint64_t v4 = (uint64_t *)a1[4];
  if (v4 == a1 + 1)
  {
    (*(void (**)(uint64_t *))(a1[1] + 32))(a1 + 1);
    return a1;
  }
  else
  {
    if (v4) {
      (*(void (**)(uint64_t *))(*v4 + 40))(v4);
    }
    return a1;
  }
}

unint64_t E5Common::AutoMmapPtr::GetSpan(E5Common::AutoMmapPtr *this, unint64_t a2, uint64_t a3)
{
  if (!a3 || ((v3 = *((void *)this + 7), v3 > a2) ? (BOOL v4 = a3 + a2 > v3) : (BOOL v4 = 1), v4))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_1E5745140, MEMORY[0x1E4FBA1B8]);
  }
  return *((void *)this + 6) + a2;
}

void sub_192455738(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192455750()
{
}

void *sub_192455764(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE39B128;
  result[1] = v3;
  return result;
}

uint64_t sub_1924557AC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE39B128;
  a2[1] = v2;
  return result;
}

uint64_t sub_1924557D8(uint64_t a1, void **a2)
{
  return munmap(*a2, *(void *)(a1 + 8));
}

uint64_t sub_1924557E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN8E5Common11AutoMmapPtrC1ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS0_11"
                     "ProtectionsENS0_7MapTypeExE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN8E5Common11AutoMmapPtrC1ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorI"
                                "cEEEENS0_11ProtectionsENS0_7MapTypeExE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN8E5Common11AutoMmapPtrC1ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS0_11ProtectionsENS0_7MapTypeExE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN8E5Common11AutoMmapPtrC1ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS0_11ProtectionsENS0_7MapTypeExE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192455858()
{
  return &unk_1EE39B188;
}

void E5RT::E5RTError::Impl::~Impl(void **this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

{
  E5RT::Status::~Status((E5RT::Status *)(this + 3));
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

std::string *E5RT::E5RTError::Impl::Impl(std::string *this, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  E5RT::Status::Status(&this[1], a3);
  return this;
}

{
  long long v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  E5RT::Status::Status(&this[1], a3);
  return this;
}

void sub_19245595C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1924559D8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::E5RTError::Impl::GetStatus(E5RT::E5RTError::Impl *this)
{
  return (uint64_t)this + 24;
}

uint64_t *std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::E5RTError::Impl>>::~propagate_const(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    E5RT::Status::~Status((E5RT::Status *)(v2 + 24));
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x192FF16B0](v2, 0x1032C402ED93987);
  }
  return a1;
}

uint64_t E5RT::E5RTError::GetStatus(E5RT::E5RTError *this)
{
  return *((void *)this + 2) + 24;
}

uint64_t E5RT::E5RTError::GetLocation(E5RT::E5RTError *this)
{
  return *((void *)this + 2);
}

const char *E5RT::GetErrorCodeString(int a1)
{
  if ((a1 - 1) > 0xC) {
    return "OK";
  }
  else {
    return off_1E57463A0[a1 - 1];
  }
}

os_log_t sub_192455BC8(uint64_t a1)
{
  uint64_t v1 = *(const char **)(a1 + 32);
  if (v1[23] < 0) {
    uint64_t v1 = *(const char **)v1;
  }
  os_log_t result = os_log_create("com.apple.e5rt", v1);
  qword_1E9303A08 = (uint64_t)result;
  return result;
}

void E5RT::MarkAllFilesAsAPFSPurgeable(const std::__fs::filesystem::path *this, const std::__fs::filesystem::path *a2)
{
  std::__fs::filesystem::__status(this, 0);
  if (p.__r_.__value_.__s.__data_[0] != 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&p, "MarkAllFilesAsAPFSPurgeable");
    std::string::basic_string[abi:ne180100]<0>(&v31, "Expect directory path as input.");
    E5RT::Status::Status(&v30, 1, &v31);
    E5RT::E5RTError::E5RTError(exception, &p, &v30);
  }
  MEMORY[0x192FF13F0](&v25, this, 0, 0);
  BOOL v4 = v25;
  unint64_t v3 = v26;
  if (!v26)
  {
    v24.__imp_.__ptr_ = v25;
    v24.__imp_.__cntrl_ = 0;
    v24.__rec_ = v27;
    goto LABEL_7;
  }
  atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v5 = v26;
  v24.__imp_.__ptr_ = v4;
  v24.__imp_.__cntrl_ = v3;
  v24.__rec_ = v27;
  if (!v26)
  {
LABEL_7:
    uint64_t v23 = 0;
    goto LABEL_10;
  }
  atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v23 = 0;
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_10:
  while (v24.__imp_.__ptr_)
  {
    uint64_t v6 = std::__fs::filesystem::recursive_directory_iterator::__dereference(&v24);
    std::__fs::filesystem::__status(&v6->__p_, 0);
    if (p.__r_.__value_.__s.__data_[0] != 2)
    {
      if (SHIBYTE(v6->__p_.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&p, v6->__p_.__pn_.__r_.__value_.__l.__data_, v6->__p_.__pn_.__r_.__value_.__l.__size_);
      }
      else {
        std::string p = (std::string)v6->__p_;
      }
      if ((p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_std::string p = &p;
      }
      else {
        p_std::string p = (std::string *)p.__r_.__value_.__r.__words[0];
      }
      int v8 = open((const char *)p_p, 0, v23);
      if (SHIBYTE(p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(p.__r_.__value_.__l.__data_);
      }
      if (v8 < 0)
      {
        unint64_t v13 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&p, "operator()");
        if (SHIBYTE(v6->__p_.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v29, v6->__p_.__pn_.__r_.__value_.__l.__data_, v6->__p_.__pn_.__r_.__value_.__l.__size_);
        }
        else {
          std::string v29 = (std::string)v6->__p_;
        }
        uint64_t v14 = std::string::insert(&v29, 0, "Unable to open file at ");
        long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v30.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        char v16 = std::string::append(&v30, " before marking as APFS purgeable.");
        long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        std::string::size_type v32 = v16->__r_.__value_.__r.__words[2];
        long long v31 = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        E5RT::Status::Status(&v33, 2, &v31);
        E5RT::E5RTError::E5RTError(v13, &p, &v33);
      }
      uint64_t v33 = 67589;
      int v9 = ffsctl(v8, 0xC0084A44uLL, &v33, 0);
      close(v8);
      if (v9)
      {
        uint64_t v10 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&p, "operator()");
        if (SHIBYTE(v6->__p_.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v29, v6->__p_.__pn_.__r_.__value_.__l.__data_, v6->__p_.__pn_.__r_.__value_.__l.__size_);
        }
        else {
          std::string v29 = (std::string)v6->__p_;
        }
        unint64_t v18 = std::string::insert(&v29, 0, "Failed to mark file at ");
        long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        v30.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        int8x8_t v20 = std::string::append(&v30, " as APFS purgeable.");
        long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        std::string::size_type v32 = v20->__r_.__value_.__r.__words[2];
        long long v31 = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        E5RT::Status::Status(v28, 2, &v31);
        E5RT::E5RTError::E5RTError(v10, &p, v28);
      }
    }
    std::__fs::filesystem::recursive_directory_iterator::__increment(&v24, 0);
  }
  cntrl = v24.__imp_.__cntrl_;
  if (v24.__imp_.__cntrl_ && !atomic_fetch_add(&v24.__imp_.__cntrl_->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
    std::__shared_weak_count::__release_weak(cntrl);
  }
  uint64_t v12 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

void sub_1924560E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (*(char *)(v31 - 73) < 0) {
    operator delete(*(void **)(v31 - 96));
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t E5RT::ReadAneCacheUrlIdentifier@<X0>(const std::__fs::filesystem::path *this@<X0>, void *a2@<X8>)
{
  v15[19] = *MEMORY[0x1E4F143B8];
  std::__fs::filesystem::path::__string_view v4 = std::__fs::filesystem::path::__extension(this);
  if (v4.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v4.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v6 = (v4.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v6 = v4.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v7 = v6 + 1;
    long long v5 = (std::string *)operator new(v6 + 1);
    __dst[0].__r_.__value_.__l.__size_ = v4.__size_;
    __dst[0].__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst[0].__r_.__value_.__s + 23) = v4.__size_;
  long long v5 = __dst;
  if (v4.__size_) {
LABEL_8:
  }
    memmove(v5, v4.__data_, v4.__size_);
  v5->__r_.__value_.__s.__data_[v4.__size_] = 0;
  std::__fs::filesystem::path v13 = (std::__fs::filesystem::path)__dst[0];
  memset(__dst, 0, 24);
  std::string::append[abi:ne180100]<char const*,0>(__dst, (std::string *)".anehash", (std::string *)"");
  if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v8.__data_ = (const std::string_view::value_type *)__dst;
  }
  else {
    v8.__data_ = (const std::string_view::value_type *)__dst[0].__r_.__value_.__r.__words[0];
  }
  if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v8.__size_ = HIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
  }
  else {
    v8.__size_ = __dst[0].__r_.__value_.__l.__size_;
  }
  int v9 = std::__fs::filesystem::path::__compare(&v13, v8);
  if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst[0].__r_.__value_.__l.__data_);
    if ((SHIBYTE(v13.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_17:
      if (!v9) {
        goto LABEL_18;
      }
LABEL_22:
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__dst, "ReadAneCacheUrlIdentifier");
      std::string::basic_string[abi:ne180100]<0>(&v13, "Invalid file type passed to ReadAneCacheUrlIdentifier");
      E5RT::Status::Status(v12, 1, &v13);
      E5RT::E5RTError::E5RTError(exception, __dst, v12);
    }
  }
  else if ((SHIBYTE(v13.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(v13.__pn_.__r_.__value_.__l.__data_);
  if (v9) {
    goto LABEL_22;
  }
LABEL_18:
  std::ifstream::basic_ifstream((uint64_t *)__dst);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)__dst, (uint64_t)a2);
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)__dst + *(void *)(__dst[0].__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&__dst[1].__r_.__value_.__r.__words[1]+ *(void *)(__dst[0].__r_.__value_.__r.__words[0] - 24)) | 4);
  }
  __dst[0].__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA3F8];
  *(std::string::size_type *)((char *)__dst[0].__r_.__value_.__r.__words
                            + *(void *)(__dst[0].__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x192FF1040](&__dst[0].__r_.__value_.__r.__words[2]);
  std::istream::~istream();
  return MEMORY[0x192FF15B0](v15);
}

void sub_1924565D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_192456680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v19);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

uint64_t *std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t *a1, uint64_t a2)
{
  MEMORY[0x192FF1080](&v20, a1, 0);
  if (!v20) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v4 = *(void *)(*a1 - 24);
  uint64_t v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  std::basic_string_view<_CharT, _Traits>::size_type v7 = std::locale::use_facet(&v19, MEMORY[0x1E4FBA258]);
  std::locale::~locale(&v19);
  uint64_t v8 = 0;
  int v9 = a1 + 5;
  if (v5 >= 1) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = 0x7FFFFFFFFFFFFFF7;
  }
  while (1)
  {
    uint64_t v11 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    uint64_t v12 = (unsigned char *)v11[3];
    if (v12 == (unsigned char *)v11[4]) {
      break;
    }
    LOBYTE(v13) = *v12;
LABEL_16:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      int v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    uint64_t v14 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    uint64_t v15 = v14[3];
    if (v15 == v14[4]) {
      (*(void (**)(void *))(*v14 + 80))(v14);
    }
    else {
      void v14[3] = v15 + 1;
    }
    if (v10 == ++v8)
    {
      int v16 = 0;
      uint64_t v8 = 1;
      goto LABEL_23;
    }
  }
  int v13 = (*(uint64_t (**)(void *))(*v11 + 72))(v11);
  if (v13 != -1) {
    goto LABEL_16;
  }
  int v16 = 2;
LABEL_23:
  uint64_t v17 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 24) = 0;
  if (!v8) {
    v16 |= 4u;
  }
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(void *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_1924568DC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  uint64_t v11 = *v9;
  *(_DWORD *)((char *)v9 + *(void *)(*v9 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v9 + *(void *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x192456898);
  }
  __cxa_rethrow();
}

void sub_192456978(_Unwind_Exception *a1)
{
}

void *std::ifstream::~ifstream(void *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA3F8];
  uint64_t v3 = *MEMORY[0x1E4FBA3F8];
  *a1 = *MEMORY[0x1E4FBA3F8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x192FF1040](a1 + 2);
  std::istream::~istream();
  MEMORY[0x192FF15B0](a1 + 53);
  return a1;
}

uint64_t E5RT::IsFileEIR(std::string *this, const std::__fs::filesystem::path *a2)
{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v6, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  }
  else {
    std::string v6 = *this;
  }
  char v5 = 13;
  strcpy((char *)__p, ".espresso.net");
  uint64_t v2 = E5Common::StringUtils::StringEndsWithSuffix((uint64_t *)&v6, (unsigned __int8 *)__p);
  if (v5 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v2;
    }
  }
  else if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    return v2;
  }
  operator delete(v6.__r_.__value_.__l.__data_);
  return v2;
}

void sub_192456B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void *std::function<BOOL ()(MIL::IROperation const&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void sub_192456BE8()
{
}

void *sub_192456BFC(uint64_t a1)
{
  os_log_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *os_log_t result = &unk_1EE39B1A8;
  result[1] = v3;
  return result;
}

uint64_t sub_192456C44(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE39B1A8;
  a2[1] = v2;
  return result;
}

uint64_t sub_192456C70(uint64_t a1, MIL::IRObject *a2)
{
  uint64_t v4 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a2 + 64))(a2);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 104))(v4))
  {
    for (uint64_t i = *(uint64_t ***)(MIL::IRObject::GetAttributes(a2) + 16); i; uint64_t i = (uint64_t **)*i)
    {
      uint64_t v6 = (*(uint64_t (**)(uint64_t *))(*i[5] + 40))(i[5]);
      if (!v6) {
        continue;
      }
      uint64_t v7 = v6;
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v6 + 80))(v6)) {
        continue;
      }
      uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 88))(v7);
      uint64_t v9 = *(void *)(a1 + 8);
      char v56 = 4;
      strcpy((char *)v55, "path");
      if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v8, (uint64_t)v55))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found"); {
      MIL::IRValue::GetScalar<std::string>();
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(v9, (uint64_t)__p, (uint64_t)__p);
      if (SBYTE7(v53) < 0)
      {
        operator delete(__p[0]);
        if (v56 < 0) {
          goto LABEL_11;
        }
      }
      else if (v56 < 0)
      {
LABEL_11:
        operator delete(v55[0]);
      }
    }
  }
  uint64_t v10 = (void *)(*(uint64_t (**)(MIL::IRObject *))(*(void *)a2 + 160))(a2);
  uint64_t v11 = (void *)*v10;
  uint64_t v49 = v10 + 1;
  if ((void *)*v10 != v10 + 1)
  {
    do
    {
      int v13 = (MIL::IRArgument **)v11[7];
      uint64_t v12 = (MIL::IRArgument **)v11[8];
      while (v13 != v12)
      {
        if (!(*(unsigned int (**)(void))(*(void *)*v13 + 24))()) {
          goto LABEL_16;
        }
        uint64_t Value = MIL::IRArgument::GetValue(*v13);
        uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)Value + 40))(Value);
        if (!v15) {
          goto LABEL_16;
        }
        uint64_t v16 = v15;
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v15 + 80))(v15)) {
          goto LABEL_16;
        }
        uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 88))(v16);
        uint64_t v18 = v17;
        *(_OWORD *)std::string __p = 0u;
        long long v53 = 0u;
        float v54 = *(float *)(v17 + 32);
        size_t prime = *(void *)(v17 + 8);
        if (prime == 1)
        {
          size_t prime = 2;
          goto LABEL_39;
        }
        if ((prime & (prime - 1)) != 0)
        {
          size_t prime = std::__next_prime(*(void *)(v17 + 8));
          char v20 = __p[1];
          BOOL v21 = (void *)prime >= __p[1];
          if ((void *)prime > __p[1]) {
            goto LABEL_38;
          }
        }
        else
        {
          char v20 = 0;
          BOOL v21 = 1;
          if (prime) {
            goto LABEL_38;
          }
        }
        if (v21) {
          goto LABEL_63;
        }
        unint64_t v22 = vcvtps_u32_f32((float)*((unint64_t *)&v53 + 1) / v54);
        if ((unint64_t)v20 < 3
          || (uint8x8_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)v20), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
        {
          unint64_t v22 = std::__next_prime(v22);
        }
        else
        {
          uint64_t v24 = 1 << -(char)__clz(v22 - 1);
          if (v22 >= 2) {
            unint64_t v22 = v24;
          }
        }
        if (prime <= v22) {
          size_t prime = v22;
        }
        if (prime >= (unint64_t)v20) {
          goto LABEL_63;
        }
        if (prime)
        {
LABEL_38:
          if (prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
LABEL_39:
          uint64_t v25 = operator new(8 * prime);
          unint64_t v26 = __p[0];
          __p[0] = v25;
          if (v26) {
            operator delete(v26);
          }
          uint64_t v27 = 0;
          __p[1] = (void *)prime;
          do
            *((void *)__p[0] + v27++) = 0;
          while (prime != v27);
          long long v28 = (void **)v53;
          if (!(void)v53) {
            goto LABEL_63;
          }
          size_t v29 = *(void *)(v53 + 8);
          size_t v30 = prime - 1;
          if ((prime & (prime - 1)) == 0)
          {
            size_t v31 = v29 & v30;
            *((void *)__p[0] + v3E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = &v53;
            while (1)
            {
              std::string::size_type v32 = *v28;
              if (!*v28) {
                break;
              }
              size_t v33 = v32[1] & v30;
              if (v33 == v31)
              {
                long long v28 = (void **)*v28;
              }
              else if (*((void *)__p[0] + v33))
              {
                *long long v28 = (void *)*v32;
                uint64_t v34 = 8 * v33;
                *std::string::size_type v32 = **(void **)((char *)__p[0] + v34);
                **(void **)((char *)__p[0] + v34) = v32;
              }
              else
              {
                *((void *)__p[0] + v33) = v28;
                long long v28 = (void **)v32;
                size_t v31 = v33;
              }
            }
            goto LABEL_63;
          }
          if (v29 >= prime) {
            v29 %= prime;
          }
          *((void *)__p[0] + v29) = &v53;
          unint64_t v35 = *v28;
          if (!*v28)
          {
LABEL_63:
            int8x8_t v38 = *(void **)(v18 + 16);
            if (!v38) {
              goto LABEL_65;
            }
            do
            {
LABEL_64:
              std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRValue const>> const&>((uint64_t)__p, (uint64_t)(v38 + 2), (uint64_t)(v38 + 2));
              int8x8_t v38 = (void *)*v38;
            }
            while (v38);
            goto LABEL_65;
          }
          while (1)
          {
LABEL_58:
            size_t v37 = v35[1];
            if (v37 >= prime) {
              v37 %= prime;
            }
            if (v37 == v29) {
              goto LABEL_57;
            }
            if (*((void *)__p[0] + v37)) {
              break;
            }
            *((void *)__p[0] + v37) = v28;
            long long v28 = (void **)v35;
            unint64_t v35 = (void *)*v35;
            size_t v29 = v37;
            if (!v35) {
              goto LABEL_63;
            }
          }
          *long long v28 = (void *)*v35;
          uint64_t v36 = 8 * v37;
          *unint64_t v35 = **(void **)((char *)__p[0] + v36);
          **(void **)((char *)__p[0] + v36) = v35;
          unint64_t v35 = v28;
LABEL_57:
          long long v28 = (void **)v35;
          unint64_t v35 = (void *)*v35;
          if (!v35) {
            goto LABEL_63;
          }
          goto LABEL_58;
        }
        unsigned int v44 = __p[0];
        __p[0] = 0;
        if (v44) {
          operator delete(v44);
        }
        __p[1] = 0;
        int8x8_t v38 = *(void **)(v18 + 16);
        if (v38) {
          goto LABEL_64;
        }
LABEL_65:
        uint64_t v39 = *(void *)(a1 + 8);
        char v51 = 4;
        strcpy((char *)v50, "path");
        if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(__p, (uint64_t)v50))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found"); {
        MIL::IRValue::GetScalar<std::string>();
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(v39, (uint64_t)v55, (uint64_t)v55);
        if (v56 < 0)
        {
          operator delete(v55[0]);
          if ((v51 & 0x80000000) == 0)
          {
LABEL_68:
            uint8x8_t v40 = (void **)v53;
            if ((void)v53)
            {
              do
              {
                while (1)
                {
LABEL_75:
                  uint64_t v41 = (void **)*v40;
                  unint64_t v42 = (std::__shared_weak_count *)v40[6];
                  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                    std::__shared_weak_count::__release_weak(v42);
                  }
                  if (*((char *)v40 + 39) < 0) {
                    break;
                  }
                  operator delete(v40);
                  uint8x8_t v40 = v41;
                  if (!v41) {
                    goto LABEL_79;
                  }
                }
                operator delete(v40[2]);
                operator delete(v40);
                uint8x8_t v40 = v41;
              }
              while (v41);
            }
            goto LABEL_79;
          }
        }
        else if ((v51 & 0x80000000) == 0)
        {
          goto LABEL_68;
        }
        operator delete(v50[0]);
        uint8x8_t v40 = (void **)v53;
        if ((void)v53) {
          goto LABEL_75;
        }
LABEL_79:
        unint64_t v43 = __p[0];
        __p[0] = 0;
        if (v43) {
          operator delete(v43);
        }
LABEL_16:
        v13 += 2;
      }
      uint64_t v45 = (void *)v11[1];
      if (v45)
      {
        do
        {
          uint64_t v46 = v45;
          uint64_t v45 = (void *)*v45;
        }
        while (v45);
      }
      else
      {
        do
        {
          uint64_t v46 = (void *)v11[2];
          BOOL v47 = *v46 == (void)v11;
          uint64_t v11 = v46;
        }
        while (!v47);
      }
      uint64_t v11 = v46;
    }
    while (v46 != v49);
  }
  return 1;
}

void sub_192457318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1924574E0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5RT20GetPathsToMILWeightsIN3MIL9IRProgramEEENSt3__113unordered_setINS3_12basic_stringIcNS3_11ch"
                     "ar_traitsIcEENS3_9allocatorIcEEEENS3_4hashISA_EENS3_8equal_toISA_EENS8_ISA_EEEERKT_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5RT20GetPathsToMILWeightsIN3MIL9IRProgramEEENSt3__113unordered_setINS3_12basic_strin"
                                "gIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_4hashISA_EENS3_8equal_toISA_EENS8_ISA_EEEERKT_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5RT20GetPathsToMILWeightsIN3MIL9IRProgramEEENSt3__113unordered_setINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_4hashISA_EENS3_8equal_toISA_EENS8_ISA_EEEERKT_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5RT20GetPathsToMILWeightsIN3MIL9IRProgramEEENSt3__113unordered_setINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_4hashISA_EENS3_8equal_toISA_EENS8_ISA_EEEERKT_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192457550()
{
  return &unk_1EE39B208;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRValue const>> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v43, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    int v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          char v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  uint64_t v25 = operator new(0x38uLL);
  v43[0] = v25;
  v43[1] = a1 + 16;
  char v44 = 0;
  *uint64_t v25 = 0;
  v25[1] = v10;
  unint64_t v26 = (std::string *)(v25 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v25[4] = *(void *)(a3 + 16);
  }
  uint64_t v27 = *(void *)(a3 + 32);
  v25[5] = *(void *)(a3 + 24);
  v25[6] = v27;
  if (v27) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
  }
  char v44 = 1;
  float v28 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v29 = *(float *)(a1 + 32);
  if (!v11 || (float)(v29 * (float)v11) < v28)
  {
    BOOL v32 = 1;
    if (v11 >= 3) {
      BOOL v32 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v33 = v32 | (2 * v11);
    unint64_t v34 = vcvtps_u32_f32(v28 / v29);
    if (v33 <= v34) {
      size_t prime = v34;
    }
    else {
      size_t prime = v33;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v36 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v36) {
      goto LABEL_70;
    }
    if (prime < *(void *)&v36)
    {
      unint64_t v37 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v36 < 3uLL || (uint8x8_t v38 = (uint8x8_t)vcnt_s8(v36), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        unint64_t v37 = std::__next_prime(v37);
      }
      else
      {
        uint64_t v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2) {
          unint64_t v37 = v39;
        }
      }
      if (prime <= v37) {
        size_t prime = v37;
      }
      if (prime < *(void *)&v36) {
LABEL_70:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v40 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        size_t v30 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        size_t v31 = (void *)v43[0];
        if (v30) {
          goto LABEL_59;
        }
      }
      else
      {
        unint64_t v3 = v10;
        size_t v30 = *(void **)(*(void *)a1 + 8 * v10);
        size_t v31 = (void *)v43[0];
        if (v30) {
          goto LABEL_59;
        }
      }
    }
    else
    {
      unint64_t v3 = v40 & v10;
      size_t v30 = *(void **)(*(void *)a1 + 8 * (v40 & v10));
      size_t v31 = (void *)v43[0];
      if (v30) {
        goto LABEL_59;
      }
    }
LABEL_83:
    *size_t v31 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v43[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v43[0])
    {
      unint64_t v41 = *(void *)(*(void *)v43[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v41 >= v11) {
          v41 %= v11;
        }
      }
      else
      {
        v41 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v4E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v43[0];
    }
    goto LABEL_94;
  }
  size_t v30 = *(void **)(*(void *)a1 + 8 * v3);
  size_t v31 = (void *)v43[0];
  if (!v30) {
    goto LABEL_83;
  }
LABEL_59:
  *size_t v31 = *v30;
  *size_t v30 = v43[0];
LABEL_94:
  uint64_t v14 = (uint64_t *)v43[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1924579B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1924579C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_192457C10(uint64_t *a1, int *a2, os_log_t log)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (*((char *)a1 + 23) >= 0) {
    unint64_t v3 = a1;
  }
  else {
    unint64_t v3 = (uint64_t *)*a1;
  }
  int v4 = *a2;
  int v5 = 136315394;
  uint64_t v6 = v3;
  __int16 v7 = 1024;
  int v8 = v4;
  _os_log_error_impl(&dword_1920CB000, log, OS_LOG_TYPE_ERROR, "remove_all() of path = %s failed with error code = %d\n", (uint8_t *)&v5, 0x12u);
}

uint64_t E5RT::Status::Impl::Impl(uint64_t this)
{
  *(unsigned char *)(this + 23) = 0;
  *(unsigned char *)this = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(unsigned char *)(this + 23) = 0;
  *(unsigned char *)this = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

std::string *E5RT::Status::Impl::Impl(std::string *this, int a2, long long *a3)
{
  int v4 = this;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
    LODWORD(v4[1].__r_.__value_.__l.__data_) = a2;
    return v4;
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
    LODWORD(this[1].__r_.__value_.__l.__data_) = a2;
  }
  return this;
}

{
  std::string *v4;
  long long v5;

  int v4 = this;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
    LODWORD(v4[1].__r_.__value_.__l.__data_) = a2;
    return v4;
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
    LODWORD(this[1].__r_.__value_.__l.__data_) = a2;
  }
  return this;
}

void E5RT::Status::Impl::~Impl(void **this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

std::string *E5RT::Status::Impl::Impl(std::string *this, const E5RT::Status::Impl *a2)
{
  unint64_t v3 = this;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    LODWORD(v3[1].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 6);
    return v3;
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    LODWORD(this[1].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 6);
  }
  return this;
}

{
  std::string *v3;
  long long v4;

  unint64_t v3 = this;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    LODWORD(v3[1].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 6);
    return v3;
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    LODWORD(this[1].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 6);
  }
  return this;
}

__n128 E5RT::Status::Impl::Impl(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  a1[1].n128_u32[2] = a2[1].n128_u32[2];
  return result;
}

{
  __n128 result;

  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  a1[1].n128_u32[2] = a2[1].n128_u32[2];
  return result;
}

uint64_t E5RT::Status::Impl::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t E5RT::Status::Impl::operator=(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  return a1;
}

uint64_t E5RT::Status::Impl::GetErrorCode(E5RT::Status::Impl *this)
{
  return *((unsigned int *)this + 6);
}

BOOL E5RT::Status::Impl::Success(E5RT::Status::Impl *this)
{
  return *((_DWORD *)this + 6) == 0;
}

void sub_192458064(_Unwind_Exception *a1)
{
  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Status::Impl>>::~propagate_const(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Status::Impl>>::~propagate_const(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x192FF16B0](v2, 0x1012C405C87E9CELL);
  }
  return a1;
}

void E5RT::Status::Status(E5RT::Status *this, const E5RT::Status *a2)
{
  *(void *)this = 0;
  operator new();
}

void sub_192458184(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v2, 0x1012C405C87E9CELL);
  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Status::Impl>>::~propagate_const(v1);
  _Unwind_Resume(a1);
}

void sub_1924581B0(_Unwind_Exception *a1)
{
  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Status::Impl>>::~propagate_const(v1);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Status::GetErrorCode(E5RT::Status *this)
{
  return *(unsigned int *)(*(void *)this + 24);
}

void E5RT::Status::operator=()
{
}

{
  operator new();
}

void sub_1924582DC(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x1012C405C87E9CELL);
  _Unwind_Resume(a1);
}

void sub_1924583B0(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x1012C405C87E9CELL);
  _Unwind_Resume(a1);
}

void sub_1924583D4(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }

  JUMPOUT(0x192FF16B0);
}

void *E5DB::CopySurface(E5DB *this, const E5RT::SurfaceDescriptor *a2, const E5RT::SurfaceObject *a3, const E5RT::SurfaceDescriptor *a4, E5RT::SurfaceObject *a5)
{
  if (E5RT::SurfaceDescriptor::operator!=((uint64_t)this, (uint64_t)a3))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Found surface ports with different descriptors.");
    goto LABEL_11;
  }
  __int16 v7 = E5RT::MemoryObject::Surface(a2);
  int v8 = (__IOSurface *)E5RT::SurfaceObject::GetHandle<__IOSurface *>((uint64_t)v7);
  uint64_t v9 = E5RT::MemoryObject::Surface(a4);
  unint64_t v10 = (__IOSurface *)E5RT::SurfaceObject::GetHandle<__IOSurface *>(v9);
  BaseAddress = IOSurfaceGetBaseAddress(v8);
  uint8x8_t v12 = IOSurfaceGetBaseAddress(v10);
  if (!BaseAddress || (int v13 = v12) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Found a null pointer to IOSurface base address.");
    goto LABEL_11;
  }
  Allocuint64_t Size = IOSurfaceGetAllocSize(v8);
  if (AllocSize != IOSurfaceGetAllocSize(v10))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Found mismatching sizes of two surface buffers.");
LABEL_11:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }

  return memcpy(v13, BaseAddress, AllocSize);
}

void sub_192458548(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19245855C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192458570(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void E5DB::CopyTensor(E5DB *this, const E5RT::TensorDescriptor *a2, const E5RT::BufferObject *a3, const E5RT::TensorDescriptor *a4, E5RT::BufferObject *a5)
{
  E5RT::TensorDescriptor::GetTensorDataType(this, (E5RT::TensorDataType *)v12);
  E5RT::TensorDescriptor::GetTensorDataType(a3, (E5RT::TensorDataType *)v11);
  if ((E5RT::TensorDataType::GetNumComponents(v12) > 1
     || E5RT::TensorDataType::GetNumComponents(v11) >= 2)
    && E5RT::operator!=((uint64_t)v12, (uint64_t)v11))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Copying tensors with more than one components is only supported between equivalent tensor types.");
    goto LABEL_64;
  }
  if (E5RT::operator==((uint64_t)v12, (uint64_t)v11))
  {
    E5RT::CopyTensorFromSrcToDest(this, a2, a3, a4, v9);
    goto LABEL_6;
  }
  if (E5RT::TensorDataType::IsType<float>((uint64_t)v11))
  {
    if (_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)v12))
    {
      _ZN4E5RT10TensorCastIfDF16_EEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(a3, a4, this, a2);
    }
    else if (E5RT::TensorDataType::IsType<unsigned int>((uint64_t)v12))
    {
      E5RT::TensorCast<float,unsigned int>(a3, a4, this, a2);
    }
    else if (E5RT::TensorDataType::IsType<int>((uint64_t)v12))
    {
      E5RT::TensorCast<float,int>(a3, a4, this, a2);
    }
    else if (E5RT::TensorDataType::IsType<unsigned short>((uint64_t)v12))
    {
      E5RT::TensorCast<float,unsigned short>(a3, a4, this, a2);
    }
    else if (E5RT::TensorDataType::IsType<short>((uint64_t)v12))
    {
      E5RT::TensorCast<float,short>(a3, a4, this, a2);
    }
    else if (E5RT::TensorDataType::IsType<unsigned char>((uint64_t)v12))
    {
      E5RT::TensorCast<float,unsigned char>(a3, a4, this, a2);
    }
    else if (E5RT::TensorDataType::IsType<signed char>((uint64_t)v12))
    {
      E5RT::TensorCast<float,signed char>(a3, a4, this, a2);
    }
    goto LABEL_6;
  }
  if (E5RT::TensorDataType::IsType<float>((uint64_t)v12))
  {
    if (_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)v11))
    {
      _ZN4E5RT10TensorCastIDF16_fEEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(a3, a4, this, a2);
    }
    else if (E5RT::TensorDataType::IsType<unsigned int>((uint64_t)v11))
    {
      E5RT::TensorCast<unsigned int,float>(a3, a4, this, a2);
    }
    else if (E5RT::TensorDataType::IsType<int>((uint64_t)v11))
    {
      E5RT::TensorCast<int,float>(a3, a4, this, a2);
    }
    else if (E5RT::TensorDataType::IsType<unsigned short>((uint64_t)v11))
    {
      E5RT::TensorCast<unsigned short,float>(a3, a4, this, a2);
    }
    else if (E5RT::TensorDataType::IsType<short>((uint64_t)v11))
    {
      E5RT::TensorCast<short,float>(a3, a4, this, a2);
    }
    else if (E5RT::TensorDataType::IsType<unsigned char>((uint64_t)v11))
    {
      E5RT::TensorCast<unsigned char,float>(a3, a4, this, a2);
    }
    else if (E5RT::TensorDataType::IsType<signed char>((uint64_t)v11))
    {
      E5RT::TensorCast<signed char,float>(a3, a4, this, a2);
    }
    goto LABEL_6;
  }
  if (_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)v11))
  {
    if (E5RT::TensorDataType::IsType<unsigned int>((uint64_t)v12))
    {
      _ZN4E5RT10TensorCastIDF16_jEEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(a3, a4, this, a2);
    }
    else if (E5RT::TensorDataType::IsType<int>((uint64_t)v12))
    {
      _ZN4E5RT10TensorCastIDF16_iEEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(a3, a4, this, a2);
    }
    else if (E5RT::TensorDataType::IsType<unsigned short>((uint64_t)v12))
    {
      _ZN4E5RT10TensorCastIDF16_tEEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(a3, a4, this, a2);
    }
    else if (E5RT::TensorDataType::IsType<short>((uint64_t)v12))
    {
      _ZN4E5RT10TensorCastIDF16_sEEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(a3, a4, this, a2);
    }
    else if (E5RT::TensorDataType::IsType<unsigned char>((uint64_t)v12))
    {
      _ZN4E5RT10TensorCastIDF16_hEEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(a3, a4, this, a2);
    }
    else if (E5RT::TensorDataType::IsType<signed char>((uint64_t)v12))
    {
      _ZN4E5RT10TensorCastIDF16_aEEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(a3, a4, this, a2);
    }
    goto LABEL_6;
  }
  if (!_ZNK4E5RT14TensorDataType6IsTypeIDF16_EEbv((uint64_t)v12))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Found unsupported tensor cast.");
LABEL_64:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (E5RT::TensorDataType::IsType<unsigned int>((uint64_t)v11))
  {
    _ZN4E5RT10TensorCastIjDF16_EEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(a3, a4, this, a2);
  }
  else if (E5RT::TensorDataType::IsType<int>((uint64_t)v11))
  {
    _ZN4E5RT10TensorCastIiDF16_EEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(a3, a4, this, a2);
  }
  else if (E5RT::TensorDataType::IsType<unsigned short>((uint64_t)v11))
  {
    _ZN4E5RT10TensorCastItDF16_EEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(a3, a4, this, a2);
  }
  else if (E5RT::TensorDataType::IsType<short>((uint64_t)v11))
  {
    _ZN4E5RT10TensorCastIsDF16_EEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(a3, a4, this, a2);
  }
  else if (E5RT::TensorDataType::IsType<unsigned char>((uint64_t)v11))
  {
    _ZN4E5RT10TensorCastIhDF16_EEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(a3, a4, this, a2);
  }
  else if (E5RT::TensorDataType::IsType<signed char>((uint64_t)v11))
  {
    _ZN4E5RT10TensorCastIaDF16_EEvRKNS_16TensorDescriptorERNS_12BufferObjectES3_RKS4_(a3, a4, this, a2);
  }
LABEL_6:
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v11);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v12);
}

void sub_192458A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  __cxa_free_exception(v11);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a9);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a11);
  _Unwind_Resume(a1);
}

void sub_192458A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)va);
  _Unwind_Resume(a1);
}

void sub_192458AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void E5DB::CopyPort(E5DB *this, const E5RT::IOPort *a2, E5RT::IOPort *a3)
{
  E5RT::IOPort::GetPortDescriptor(this, &v24);
  long long v5 = (E5DB *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v24);
  uint64_t v6 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  E5RT::IOPort::GetPortDescriptor(a2, &v24);
  __int16 v7 = (const E5RT::BufferObject *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v24);
  int v8 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  E5RT::IOPort::GetPortDescriptor(this, &v24);
  uint64_t v9 = (E5DB *)E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v24);
  unint64_t v10 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  E5RT::IOPort::GetPortDescriptor(a2, &v24);
  unint64_t v11 = (const E5RT::SurfaceObject *)E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v24);
  uint8x8_t v12 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (!v5)
    {
LABEL_16:
      if ((unint64_t)v5 | (unint64_t)v7)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Found a tensor port and a non-tensor port.");
      }
      else
      {
        if (v9 && v11)
        {
          E5RT::IOPort::GetMemoryObject(this, &v24);
          uint64_t v16 = (const E5RT::SurfaceDescriptor *)E5RT::MemoryObject::Surface(v24);
          E5RT::IOPort::GetMemoryObject(a2, &v22);
          unint64_t v17 = (const E5RT::SurfaceDescriptor *)E5RT::MemoryObject::Surface(v22);
          E5DB::CopySurface(v9, v16, v11, v17, v18);
          goto LABEL_20;
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Found unsupported type of ports.");
      }
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else if (!v5)
  {
    goto LABEL_16;
  }
  if (!v7) {
    goto LABEL_16;
  }
  E5RT::IOPort::GetMemoryObject(this, &v24);
  int v13 = (const E5RT::TensorDescriptor *)E5RT::MemoryObject::Buffer(v24);
  E5RT::IOPort::GetMemoryObject(a2, &v22);
  uint64_t v14 = (const E5RT::TensorDescriptor *)E5RT::MemoryObject::Buffer(v22);
  E5DB::CopyTensor(v5, v13, v7, v14, v15);
LABEL_20:
  uint64_t v19 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v20 = v25;
  if (v25)
  {
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_192458E04(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192458E18(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192458E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192458E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192458E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192458E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192458E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_192458E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192458EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192458EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192458ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void E5DB::MakeCandidateSurfacePort(uint64_t a1, uint64_t *a2)
{
  long long v4 = (E5RT::SurfaceDescriptor *)sub_19245908C(a1, (void *)*a2);
  long long v5 = (void *)*a2;
  if (0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3) >= 2)
  {
    unint64_t v6 = 1;
    uint64_t v7 = 5;
    do
    {
      int v8 = sub_19245908C(a1, &v5[v7]);
      if (E5RT::SurfaceDescriptor::operator!=((uint64_t)v8, (uint64_t)v4))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Found unequal Surface descriptors. It is expected to have identical Surface descriptors for all platforms.");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      ++v6;
      long long v5 = (void *)*a2;
      v7 += 5;
    }
    while (v6 < 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3));
  }
  uint64_t SurfaceFormat = E5RT::SurfaceDescriptor::GetSurfaceFormat(v4);
  uint64_t SurfaceWidth = E5RT::SurfaceDescriptor::GetSurfaceWidth(v4);
  uint64_t SurfaceHeight = E5RT::SurfaceDescriptor::GetSurfaceHeight(v4);
  E5RT::CreateBoundPortForSurface(SurfaceFormat, SurfaceWidth, SurfaceHeight);
}

void sub_192459048(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19245905C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_192459078(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_19245908C(uint64_t a1, void *a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(a2, a1);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Port not found.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)v2[5], &v9);
  if (!v9)
  {
    uint64_t v7 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v7, "Found a null pointer to a port descriptor.");
    __cxa_throw(v7, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  __n128 result = E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v9);
  long long v4 = result;
  if (!result)
  {
    int v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v8, "Found a non-surface port while expecting a surface port.");
    __cxa_throw(v8, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  long long v5 = v10;
  if (v10)
  {
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      return v4;
    }
  }
  return result;
}

void sub_1924591F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_free_exception(v9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_192459228(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19245923C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void E5DB::MakeCandidateTensorPort(uint64_t a1, void **a2)
{
  long long v4 = (E5RT::TensorDescriptor *)sub_192459638(a1, *a2);
  E5RT::TensorDescriptor::GetTensorDataType(v4, (E5RT::TensorDataType *)v11);
  if (E5RT::TensorDataType::GetNumComponents(v11) < 2)
  {
    E5RT::TensorDataType::GetComponentPack((E5RT::TensorDataType *)v11);
    if (0xCCCCCCCCCCCCCCCDLL * (a2[1] - *a2) >= 2)
    {
      long long v5 = (E5RT::TensorDescriptor *)sub_192459638(a1, *a2 + 5);
      E5RT::TensorDescriptor::GetTensorDataType(v5, (E5RT::TensorDataType *)&__p);
      if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)&__p) >= 2)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Found more than one component in a tensor data type, which is not supported.");
      }
      else
      {
        int ComponentDataType = E5RT::TensorDataType::GetComponentDataType((E5RT::TensorDataType *)&__p);
        if (ComponentDataType == E5RT::TensorDataType::GetComponentDataType((E5RT::TensorDataType *)v11))
        {
          E5RT::TensorDataType::GetComponentDataType((E5RT::TensorDataType *)v11);
          E5RT::TensorDataType::TensorDataType(v10);
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Found mismatching component data types.");
      }
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    E5RT::TensorDescriptor::GetTensorShape(v4);
    E5RT::TensorDataType::GetComponentDataType((E5RT::TensorDataType *)v11);
    E5RT::TensorDataType::TensorDataType(v10);
  }
  int v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(v8, "Found more than one component in a tensor data type, which is not supported.");
  __cxa_throw(v8, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1924594F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](a2);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)va);
  _Unwind_Resume(a1);
}

void sub_19245950C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  __cxa_free_exception(v15);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](a9);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a15);
  _Unwind_Resume(a1);
}

void sub_192459530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  __cxa_free_exception(v15);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a15);
  _Unwind_Resume(a1);
}

void sub_19245954C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a13);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a15);
  _Unwind_Resume(a1);
}

void sub_192459578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)va);
  _Unwind_Resume(a1);
}

void sub_19245958C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)va);
  _Unwind_Resume(a1);
}

void sub_1924595A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)va);
  _Unwind_Resume(a1);
}

void sub_1924595B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  __cxa_free_exception(v15);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a10);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a15);
  _Unwind_Resume(a1);
}

void sub_1924595DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)va);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)va1);
  _Unwind_Resume(a1);
}

void *sub_192459638(uint64_t a1, void *a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(a2, a1);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Port not found.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)v2[5], &v9);
  if (!v9)
  {
    uint64_t v7 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v7, "Found a null pointer to a port descriptor.");
    __cxa_throw(v7, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  __n128 result = E5RT::OperandDescriptor::TryAsTensorDescriptor(v9);
  long long v4 = result;
  if (!result)
  {
    uint64_t v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v8, "Found a non-tensor port while expecting a tensor port.");
    __cxa_throw(v8, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v5 = v10;
  if (v10)
  {
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      return v4;
    }
  }
  return result;
}

void sub_1924597A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_free_exception(v9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1924597D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1924597E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double E5DB::MakeCandidateBoundPorts@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3) <= 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Found less than two platforms.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v5 = v3[2];
  if (v5)
  {
    long long v11 = 0uLL;
    E5RT::IOPort::GetPortDescriptor(*(E5RT::IOPort **)(v5 + 40), &v10);
    if (v10)
    {
      if (E5RT::OperandDescriptor::TryAsTensorDescriptor(v10)) {
        E5DB::MakeCandidateTensorPort(v5 + 16, (void **)a1);
      }
      if (E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v10)) {
        E5DB::MakeCandidateSurfacePort(v5 + 16, (uint64_t *)a1);
      }
      uint64_t v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v8, "Found a descriptor type that is not tensor or surface.");
    }
    else
    {
      uint64_t v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v8, "Found a null pointer to a port descriptor.");
    }
    __cxa_throw(v8, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v3[3])
  {
    uint64_t v7 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v7, "Failed in creating all the necessary candidate ports.");
    __cxa_throw(v7, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_192459BBC(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_192459BD0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_192459BEC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192459C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  __cxa_free_exception(v18);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v17);
  _Unwind_Resume(a1);
}

void E5DB::MakeFloatPort(E5DB *this, const E5RT::IOPort *a2)
{
  E5RT::IOPort::GetPortDescriptor(this, &v9);
  if (v9)
  {
    uint64_t v2 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v9);
    uint64_t v3 = v2;
    if (v2)
    {
      E5RT::TensorDescriptor::GetTensorDataType(v2, (E5RT::TensorDataType *)v8);
      if (E5RT::TensorDataType::IsType<float>((uint64_t)v8))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Port is of type float.");
      }
      else
      {
        if (E5RT::TensorDataType::GetNumComponents(v8) < 2)
        {
          E5RT::TensorDescriptor::GetTensorShape(v3);
          E5RT::TensorDataType::TensorDataType(&v7);
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Found more than one components in a tensor data type, which is not supported.");
      }
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v5 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v5, "Found a non-tensor port.");
    __cxa_throw(v5, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  long long v4 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(v4, "Found a null pointer to a port descriptor.");
  __cxa_throw(v4, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_192459EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  __cxa_free_exception(v16);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v15);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a15);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v17 - 48);
  _Unwind_Resume(a1);
}

void sub_192459FA0(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void E5DB::InitializePortRandomlyForPsnr(E5DB *this, E5RT::IOPort *a2)
{
  E5RT::IOPort::GetPortDescriptor(this, &v8);
  uint64_t v3 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v8);
  long long v4 = v3;
  uint64_t v5 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (v4) {
      goto LABEL_4;
    }
LABEL_11:
    uint64_t v6 = 255;
    goto LABEL_12;
  }
  if (!v3) {
    goto LABEL_11;
  }
LABEL_4:
  E5RT::TensorDescriptor::GetTensorDataType(v4, (E5RT::TensorDataType *)&v8);
  if (E5RT::TensorDataType::GetComponentDataType((E5RT::TensorDataType *)&v8) == 4)
  {
    uint64_t v6 = 1;
  }
  else
  {
    if (E5RT::TensorDataType::GetComponentDataType((E5RT::TensorDataType *)&v8) != 1
      && E5RT::TensorDataType::GetComponentDataType((E5RT::TensorDataType *)&v8))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Found unsupported tensor data type.");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v6 = 127;
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&v8);
LABEL_12:
  E5RT::InitializePortRandomly(this, 0, v6);
}

void sub_19245A104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_free_exception(v9);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a9);
  _Unwind_Resume(a1);
}

void sub_19245A120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19245A134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void E5DB::MakeRefPortsFromParser(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  for (uint64_t i = *(uint64_t **)(a3 + 16); i; uint64_t i = (uint64_t *)*i)
  {
    E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)i[5], &__p);
    unint64_t v8 = (unint64_t)E5RT::OperandDescriptor::TryAsTensorDescriptor(__p.__r_.__value_.__l.__data_);
    std::string::size_type size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)i[5], &__p);
    unint64_t v10 = (unint64_t)E5RT::OperandDescriptor::TryAsSurfaceDescriptor(__p.__r_.__value_.__l.__data_);
    long long v11 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    if (!(v8 | v10))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Found a non-tensor or non-surface descriptor type, which is not supported.");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unint64_t v35 = 0;
    int8x8_t v36 = 0;
    long long v34 = 0uLL;
    if (!v8)
    {
      E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)i[5], &__p);
      uint64_t v15 = (std::__shared_weak_count *)operator new(0x28uLL);
      v15->__shared_owners_ = 0;
      v15->__shared_weak_owners_ = 0;
      v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380930;
      std::allocator<E5RT::IOPortPriv>::construct[abi:ne180100]<E5RT::IOPortPriv,std::shared_ptr<E5RT::OperandDescriptor const>>((uint64_t)&v33, (uint64_t)&v15[1], (long long *)&__p);
      unint64_t v35 = (E5RT::IOPort *)&v15[1];
      int8x8_t v36 = v15;
      uint64_t v16 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_
        && !atomic_fetch_add((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      E5RT::IOPort::GetPortDescriptor(v35, &__p);
      uint64_t v17 = (E5RT::SurfaceDescriptor *)E5RT::OperandDescriptor::SurfaceDescriptor((E5RT::OperandDescriptor *)__p.__r_.__value_.__l.__data_);
      uint64_t v18 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_
        && !atomic_fetch_add((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      E5DB::RegressionTestConfigParser::GetInputDescriptor(a1, (uint64_t)(i + 2), &__p);
      E5DB::RegressionTestConfigParser::GetData((uint64_t)a1, (uint64_t)(i + 2), a2, &v33);
      E5DB::RegressionTestConfigParser::GetTransformedPixelData((uint64_t)a1, (void **)&__p.__r_.__value_.__l.__data_, (void **)&v33, v17);
    }
    E5DB::RegressionTestConfigParser::GetInputDescriptor(a1, (uint64_t)(i + 2), &__p);
    E5DB::RegressionTestConfigParser::GetData((uint64_t)a1, (uint64_t)(i + 2), a2, &v33);
    long long v12 = v33;
    long long v33 = 0uLL;
    int v13 = (std::__shared_weak_count *)*((void *)&v34 + 1);
    long long v34 = v12;
    if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      uint64_t v14 = (std::__shared_weak_count *)*((void *)&v33 + 1);
      if (!*((void *)&v33 + 1)) {
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v14 = (std::__shared_weak_count *)*((void *)&v33 + 1);
      if (!*((void *)&v33 + 1)) {
        goto LABEL_25;
      }
    }
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
LABEL_25:
    uint64_t v19 = (std::__shared_weak_count *)operator new(0x28uLL);
    v19->__shared_owners_ = 0;
    v19->__shared_weak_owners_ = 0;
    v19->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380930;
    std::allocator<E5RT::IOPortPriv>::construct[abi:ne180100]<E5RT::IOPortPriv,std::shared_ptr<E5RT::OperandDescriptor> const&>((uint64_t)&v33, (uint64_t)&v19[1], (uint64_t *)&__p);
    uint64_t v20 = v36;
    unint64_t v35 = (E5RT::IOPort *)&v19[1];
    int8x8_t v36 = v19;
    if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    uint64_t v21 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      uint64_t v23 = *((void *)&v34 + 1);
      uint64_t v22 = v35;
      long long v32 = v34;
      if (!*((void *)&v34 + 1)) {
        goto LABEL_32;
      }
LABEL_31:
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
      goto LABEL_32;
    }
    uint64_t v23 = *((void *)&v34 + 1);
    uint64_t v22 = v35;
    long long v32 = v34;
    if (*((void *)&v34 + 1)) {
      goto LABEL_31;
    }
LABEL_32:
    E5RT::IOPort::BindMemoryObject((uint64_t)v22, (uint64_t)&v32);
    uint64_t v24 = (std::__shared_weak_count *)*((void *)&v32 + 1);
    if (*((void *)&v32 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v32 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
      if ((*((char *)i + 39) & 0x80000000) == 0)
      {
LABEL_35:
        std::string __p = *(std::string *)(i + 2);
        goto LABEL_40;
      }
    }
    else if ((*((char *)i + 39) & 0x80000000) == 0)
    {
      goto LABEL_35;
    }
    std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)i[2], i[3]);
LABEL_40:
    size_t v30 = v35;
    size_t v31 = v36;
    if (v36) {
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>>(a4, (uint64_t)&__p, (uint64_t)&__p);
    uint64_t v25 = v31;
    if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_45:
        unint64_t v26 = (std::__shared_weak_count *)*((void *)&v34 + 1);
        if (!*((void *)&v34 + 1)) {
          goto LABEL_50;
        }
        goto LABEL_49;
      }
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_45;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    unint64_t v26 = (std::__shared_weak_count *)*((void *)&v34 + 1);
    if (!*((void *)&v34 + 1)) {
      goto LABEL_50;
    }
LABEL_49:
    if (atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_50:
      uint64_t v27 = v36;
      if (v36) {
        goto LABEL_51;
      }
      continue;
    }
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    uint64_t v27 = v36;
    if (v36)
    {
LABEL_51:
      if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
}

void sub_19245A884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  uint64_t v23 = a16;
  a16 = 0;
  if (v23) {
    sub_1922EC2D8(v23);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v21);
  _Unwind_Resume(a1);
}

void sub_19245A994(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19245A9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void E5DB::ReshapeIfNeeded(E5RT::ExecutionStreamOperationInternal **a1, uint64_t a2)
{
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)uint64_t v27 = 0u;
  int v28 = 1065353216;
  InputPorts = (void *)E5RT::ExecutionStreamOperation::GetInputPorts(a1);
  uint64_t v5 = E5RT::ExecutionStreamOperation::GetInOutPorts(a1);
  uint64_t v6 = *(uint64_t ***)(a2 + 16);
  if (v6)
  {
    uint64_t v7 = (void *)v5;
    do
    {
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, (uint64_t)(v6 + 2)))
      {
        unint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, (uint64_t)(v6 + 2));
      }
      else
      {
        unint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v7, (uint64_t)(v6 + 2));
      }
      if (!v8) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      if (!v6[5] || (uint64_t v9 = (E5RT::IOPort *)v8[5]) == 0)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Found null pointer to input/inout ports.");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      E5RT::IOPort::GetPortDescriptor(v9, &v24);
      unint64_t v10 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(v24);
      long long v11 = v10;
      long long v12 = v25;
      if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
        if (v11)
        {
LABEL_13:
          E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)v6[5], &v24);
          int v13 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v24);
          uint64_t v14 = v25;
          if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
          uint64_t TensorShape = E5RT::TensorDescriptor::GetTensorShape(v13);
          uint64_t v16 = E5RT::TensorDescriptor::GetTensorShape(v11);
          size_t v17 = *(void *)(TensorShape + 8) - *(void *)TensorShape;
          if (v17 == *(void *)(v16 + 8) - *(void *)v16) {
            memcmp(*(const void **)TensorShape, *(const void **)v16, v17);
          }
          int v18 = E5RT::TensorDescriptor::GetTensorShape(v13);
          E5RT::TensorDescriptor::GetTensorDataType(v11, (E5RT::TensorDataType *)&v24);
          E5RT::TensorDescriptor::CreateTensorDesc(v18, &v24);
        }
      }
      else if (v10)
      {
        goto LABEL_13;
      }
      uint64_t v6 = (uint64_t **)*v6;
    }
    while (v6);
  }
  uint64_t v19 = (char *)v27[0];
  if (v27[0])
  {
    do
    {
      uint64_t v21 = *(char **)v19;
      uint64_t v22 = *((void *)v19 + 5);
      *((void *)v19 + 5) = 0;
      if (v22) {
        (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
      }
      if (v19[39] < 0) {
        operator delete(*((void **)v19 + 2));
      }
      operator delete(v19);
      uint64_t v19 = v21;
    }
    while (v21);
  }
  uint64_t v20 = __p[0];
  __p[0] = 0;
  if (v20) {
    operator delete(v20);
  }
}

void sub_19245AD94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  __cxa_free_exception(v13);
  std::unordered_map<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>::~unordered_map[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_19245AE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::unordered_map<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19245AEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::unordered_map<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19245AEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::unordered_map<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19245AED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::unordered_map<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = *(char **)v2;
      uint64_t v6 = *((void *)v2 + 5);
      *((void *)v2 + 5) = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t E5DB::PrepareEsOpInputAndInOutPorts(E5RT::ExecutionStreamOperationInternal **a1, void *a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(E5RT::ExecutionStreamOperation::GetInputPorts(a1) + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 48);
    uint64_t v16 = *(E5RT::IOPort **)(v6 + 40);
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(a2, v6 + 16);
    if (v8)
    {
      if (v8[5])
      {
        if (v16) {
          E5RT::AllocateAndBindMemory(v16, a3);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Found null pointer to input/inout ports.");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t result = E5RT::ExecutionStreamOperation::GetInOutPorts(a1);
  uint64_t v10 = *(void *)(result + 16);
  if (v10)
  {
    uint64_t v11 = *(void *)(v10 + 48);
    uint64_t v15 = *(E5RT::IOPort **)(v10 + 40);
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    long long v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(a2, v10 + 16);
    if (v12)
    {
      if (v12[5] && v15) {
        E5RT::AllocateAndBindMemory(v15, a3);
      }
      uint64_t v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v14, "Found null pointer to input/inout ports.");
      __cxa_throw(v14, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return result;
}

void sub_19245B1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  __cxa_free_exception(v11);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19245B22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void E5DB::GetOperandDescriptorsFromShapesArray(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  memset(v70, 0, sizeof(v70));
  obunint64_t j = v4;
  if ([obj countByEnumeratingWithState:v70 objects:v74 count:16])
  {
    id v5 = **((id **)&v70[0] + 1);
    __s = (char *)[v5 UTF8String];
    id v63 = v5;
    uint64_t v6 = (const char *)[v63 UTF8String];
    size_t v7 = strlen(v6);
    if (v7 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v8 = v7;
    if (v7 >= 0x17)
    {
      uint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17) {
        uint64_t v11 = v7 | 7;
      }
      uint64_t v12 = v11 + 1;
      uint64_t v9 = (std::string *)operator new(v11 + 1);
      __dst[0].__r_.__value_.__l.__size_ = v8;
      __dst[0].__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
      __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
      uint64_t v10 = a1;
    }
    else
    {
      *((unsigned char *)&__dst[0].__r_.__value_.__s + 23) = v7;
      uint64_t v9 = __dst;
      uint64_t v10 = a1;
      if (!v7)
      {
LABEL_10:
        v9->__r_.__value_.__s.__data_[v8] = 0;
        int v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v10, (uint64_t)__dst);
        if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst[0].__r_.__value_.__l.__data_);
        }
        if (!v13)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::string::basic_string[abi:ne180100]<0>(v71, (char *)[v63 UTF8String]);
          char v51 = std::string::append((std::string *)v71, " does not exist in esOP.");
          long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
          __dst[0].__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_ = v52;
          v51->__r_.__value_.__l.__size_ = 0;
          v51->__r_.__value_.__r.__words[2] = 0;
          v51->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, __dst);
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        size_t v14 = strlen(__s);
        if (v14 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        std::string::size_type v15 = v14;
        if (v14 >= 0x17)
        {
          uint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v14 | 7) != 0x17) {
            uint64_t v17 = v14 | 7;
          }
          uint64_t v18 = v17 + 1;
          uint64_t v16 = (std::string *)operator new(v17 + 1);
          __dst[0].__r_.__value_.__l.__size_ = v15;
          __dst[0].__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
        }
        else
        {
          *((unsigned char *)&__dst[0].__r_.__value_.__s + 23) = v14;
          uint64_t v16 = __dst;
          if (!v14)
          {
LABEL_21:
            v16->__r_.__value_.__s.__data_[v15] = 0;
            uint64_t v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v10, (uint64_t)__dst);
            if (v19)
            {
              if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__dst[0].__r_.__value_.__l.__data_);
              }
              E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)v19[5], __dst);
              uint64_t v20 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(__dst[0].__r_.__value_.__l.__data_);
              std::string::size_type size = (std::__shared_weak_count *)__dst[0].__r_.__value_.__l.__size_;
              if (__dst[0].__r_.__value_.__l.__size_
                && !atomic_fetch_add((atomic_ullong *volatile)(__dst[0].__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
              }
              if (v20)
              {
                uint64_t v22 = [obj objectForKeyedSubscript:v63];
                unsigned int v59 = [v22 objectForKeyedSubscript:@"shape"];
                unint64_t v58 = v20;

                if (v59)
                {
                  id v23 = v59;
                  unint64_t v24 = [v23 count];
                  unint64_t v25 = v24;
                  unsigned int v67 = 0;
                  unsigned int v68 = 0;
                  uint64_t v69 = 0;
                  if (v24)
                  {
                    if (v24 >> 61) {
                      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v26 = 8 * v24;
                    uint64_t v27 = (char *)operator new(8 * v24);
                    unsigned int v67 = v27;
                    uint64_t v69 = &v27[8 * v25];
                    bzero(v27, 8 * v25);
                    unsigned int v68 = &v27[v26];
                  }
                  else
                  {
                    uint64_t v27 = 0;
                  }
                  long long v72 = 0u;
                  long long v73 = 0u;
                  memset(v71, 0, sizeof(v71));
                  id v28 = v23;
                  uint64_t v29 = [v28 countByEnumeratingWithState:v71 objects:__dst count:16];
                  if (v29)
                  {
                    int v30 = 0;
                    uint64_t v31 = **(void **)&v71[16];
                    do
                    {
                      uint64_t v32 = 0;
                      int v33 = v30;
                      long long v34 = &v27[8 * v30];
                      do
                      {
                        if (**(void **)&v71[16] != v31) {
                          objc_enumerationMutation(v28);
                        }
                        id v35 = *(id *)(*(void *)&v71[8] + 8 * v32);
                        *(void *)&v34[8 * v32] = [v35 unsignedIntValue];

                        ++v32;
                      }
                      while (v29 != v32);
                      uint64_t v29 = [v28 countByEnumeratingWithState:v71 objects:__dst count:16];
                      int v30 = v33 + v32;
                    }
                    while (v29);
                  }

                  int8x8_t v36 = [obj objectForKeyedSubscript:v63];
                  uint64_t v61 = [v36 objectForKeyedSubscript:@"stride"];

                  if (v61)
                  {
                    id v37 = v61;
                    unint64_t v38 = [v37 count];
                    unint64_t v39 = v38;
                    std::string __p = 0;
                    uint64_t v65 = 0;
                    uint64_t v66 = 0;
                    if (v38)
                    {
                      if (v38 >> 61) {
                        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                      }
                      uint64_t v40 = 8 * v38;
                      unint64_t v41 = (char *)operator new(8 * v38);
                      std::string __p = v41;
                      uint64_t v66 = &v41[8 * v39];
                      bzero(v41, 8 * v39);
                      uint64_t v65 = &v41[v40];
                    }
                    else
                    {
                      unint64_t v41 = 0;
                    }
                    long long v72 = 0u;
                    long long v73 = 0u;
                    memset(v71, 0, sizeof(v71));
                    id v42 = v37;
                    uint64_t v43 = [v42 countByEnumeratingWithState:v71 objects:__dst count:16];
                    if (v43)
                    {
                      int v44 = 0;
                      uint64_t v45 = **(void **)&v71[16];
                      do
                      {
                        uint64_t v46 = 0;
                        int v47 = v44;
                        uint64_t v48 = &v41[8 * v44];
                        do
                        {
                          if (**(void **)&v71[16] != v45) {
                            objc_enumerationMutation(v42);
                          }
                          id v49 = *(id *)(*(void *)&v71[8] + 8 * v46);
                          *(void *)&v48[8 * v46] = [v49 unsignedIntValue];

                          ++v46;
                        }
                        while (v43 != v46);
                        uint64_t v43 = [v42 countByEnumeratingWithState:v71 objects:__dst count:16];
                        int v44 = v47 + v46;
                      }
                      while (v43);
                    }

                    E5RT::TensorDescriptor::GetTensorDataType(v58, (E5RT::TensorDataType *)v71);
                    E5RT::TensorDescriptor::CreateTensorDescriptorWithStrides(&v67, &__p, (E5RT::TensorDataType::Impl **)v71);
                  }
                  E5RT::TensorDescriptor::GetTensorDataType(v20, (E5RT::TensorDataType *)v71);
                  E5RT::TensorDescriptor::CreateTensorDesc((int)&v67, (E5RT::TensorDataType::Impl **)v71);
                }
                float v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::string::basic_string[abi:ne180100]<0>(v71, (char *)[v63 UTF8String]);
                std::string v55 = std::string::append((std::string *)v71, " does not have a shape key");
                long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
                __dst[0].__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_ = v56;
                v55->__r_.__value_.__l.__size_ = 0;
                v55->__r_.__value_.__r.__words[2] = 0;
                v55->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v54, __dst);
                __cxa_throw(v54, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              long long v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v53, "Reshape operation is only supported on Tensor Descriptors.");
              __cxa_throw(v53, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
        }
        memmove(v16, __s, v15);
        goto LABEL_21;
      }
    }
    memmove(v9, v6, v8);
    goto LABEL_10;
  }
}

void sub_19245BC54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  std::unordered_map<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>::~unordered_map[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

void E5DB::NSDictionaryToMap(E5DB *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v4 = this;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v5 = v4;
  uint64_t v6 = [(E5DB *)v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v16;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(v5);
        }
        id v9 = *(id *)(*((void *)&v15 + 1) + 8 * v8);
        uint64_t v10 = [(E5DB *)v5 objectForKeyedSubscript:v9];
        id v11 = v9;
        size_t v14 = (const char *)[v11 UTF8String];
        id v12 = v10;
        int v13 = (const char *)[v12 UTF8String];
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_impl<char const*,char const*>((void *)a2, &v14, &v13);

        ++v8;
      }
      while (v6 != v8);
      uint64_t v6 = [(E5DB *)v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v6);
  }
}

void sub_19245C130(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

id E5DB::GetValueFromDictionary(void *a1, uint64_t *a2)
{
  id v3 = a1;
  if (*((char *)a2 + 23) >= 0) {
    id v4 = a2;
  }
  else {
    id v4 = (uint64_t *)*a2;
  }
  id v5 = [NSString stringWithUTF8String:v4];
  uint64_t v6 = [v3 valueForKey:v5];

  if (!v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    id v9 = std::string::append(&v11, " in dictionary");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v12.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v12);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }

  return v6;
}

void sub_19245C2AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);

  _Unwind_Resume(a1);
}

id E5DB::GetJSONFromFile(std::__fs::filesystem::path *this, const std::__fs::filesystem::path *a2)
{
  std::__fs::filesystem::__status(this, 0);
  if (__dst.__r_.__value_.__s.__data_[0] == 255 || __dst.__r_.__value_.__s.__data_[0] == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v35.__pn_, this->__pn_.__r_.__value_.__l.__data_, this->__pn_.__r_.__value_.__l.__size_);
    }
    else {
      std::__fs::filesystem::path v35 = *this;
    }
    uint64_t v22 = std::string::insert(&v35.__pn_, 0, "Expected JSON file does not exist:");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &__dst);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  std::__fs::filesystem::path::__string_view v4 = std::__fs::filesystem::path::__extension(this);
  if (v4.__size_ > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v4.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v6 = (v4.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v6 = v4.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v7 = v6 + 1;
    p_dst = (std::string *)operator new(v6 + 1);
    __dst.__r_.__value_.__l.__size_ = v4.__size_;
    __dst.__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_12;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4.__size_;
  p_dst = &__dst;
  if (v4.__size_) {
LABEL_12:
  }
    memmove(p_dst, v4.__data_, v4.__size_);
  p_dst->__r_.__value_.__s.__data_[v4.__size_] = 0;
  v35.__pn_ = __dst;
  memset(&__p, 0, sizeof(__p));
  std::string::append[abi:ne180100]<char const*,0>(&__p, (std::string *)".json", (std::string *)"");
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v8.__data_ = (const std::string_view::value_type *)&__p;
  }
  else {
    v8.__data_ = (const std::string_view::value_type *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v8.__size_ = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    v8.__size_ = __p.__r_.__value_.__l.__size_;
  }
  if (!std::__fs::filesystem::path::__compare(&v35, v8))
  {
    BOOL v11 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_25;
  }
  std::__fs::filesystem::path::__string_view v9 = std::__fs::filesystem::path::__extension(this);
  if (v9.__size_ > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v9.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v13 = (v9.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v13 = v9.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v14 = v13 + 1;
    long long v10 = (std::string *)operator new(v13 + 1);
    __dst.__r_.__value_.__l.__size_ = v9.__size_;
    __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
    goto LABEL_32;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v9.__size_;
  long long v10 = &__dst;
  if (v9.__size_) {
LABEL_32:
  }
    memmove(v10, v9.__data_, v9.__size_);
  v10->__r_.__value_.__s.__data_[v9.__size_] = 0;
  v33.__pn_ = __dst;
  memset(&__dst, 0, sizeof(__dst));
  std::string::append[abi:ne180100]<char const*,0>(&__dst, (std::string *)".JSON", (std::string *)"");
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v15.__data_ = (const std::string_view::value_type *)&__dst;
  }
  else {
    v15.__data_ = (const std::string_view::value_type *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v15.__size_ = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    v15.__size_ = __dst.__r_.__value_.__l.__size_;
  }
  BOOL v11 = std::__fs::filesystem::path::__compare(&v33, v15) != 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v33.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_41:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_42;
      }
LABEL_25:
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v35.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_43;
      }
LABEL_26:
      operator delete(v35.__pn_.__r_.__value_.__l.__data_);
      if (!v11) {
        goto LABEL_44;
      }
LABEL_27:
      std::string v12 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::__fs::filesystem::path::extension[abi:ne180100](this, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v35.__pn_, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        v35.__pn_ = __p;
      }
      int v30 = std::string::insert(&v35.__pn_, 0, "Invalid extension for a json file:");
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      std::logic_error::logic_error(v12, &__dst);
      v12->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
      __cxa_throw(v12, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
    }
  }
  else if ((SHIBYTE(v33.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_41;
  }
  operator delete(v33.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_25;
  }
LABEL_42:
  if (SHIBYTE(v35.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_26;
  }
LABEL_43:
  if (v11) {
    goto LABEL_27;
  }
LABEL_44:
  if ((this->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v16 = this;
  }
  else {
    long long v16 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
  }
  long long v17 = [NSString stringWithUTF8String:v16];
  long long v18 = [MEMORY[0x1E4F1C9B8] dataWithContentsOfFile:v17];
  if (!v18)
  {
    unint64_t v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v35.__pn_, this->__pn_.__r_.__value_.__l.__data_, this->__pn_.__r_.__value_.__l.__size_);
    }
    else {
      std::__fs::filesystem::path v35 = *this;
    }
    uint64_t v26 = std::string::insert(&v35.__pn_, 0, "Unable to load file to NSData: ");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v24, &__dst);
    __cxa_throw(v24, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  id v32 = 0;
  uint64_t v19 = [MEMORY[0x1E4F28D90] JSONObjectWithData:v18 options:0 error:&v32];
  if (v32 || !v19)
  {
    unint64_t v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v35.__pn_, this->__pn_.__r_.__value_.__l.__data_, this->__pn_.__r_.__value_.__l.__size_);
    }
    else {
      std::__fs::filesystem::path v35 = *this;
    }
    id v28 = std::string::insert(&v35.__pn_, 0, "Unable to load file data as valid json: ");
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v25, &__dst);
    __cxa_throw(v25, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }

  return v19;
}

void sub_19245C8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v28);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v28);
  _Unwind_Resume(a1);
}

void sub_19245CAFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if ((a19 & 0x80000000) == 0) {
    JUMPOUT(0x19245CB0CLL);
  }
  JUMPOUT(0x19245CA58);
}

double std::__fs::filesystem::path::extension[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__extension(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v9;
  return result;
}

void std::allocator<E5RT::IOPortPriv>::construct[abi:ne180100]<E5RT::IOPortPriv,std::shared_ptr<E5RT::OperandDescriptor> const&>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__fs::filesystem::path::__string_view v3 = (std::__shared_weak_count *)a3[1];
  uint64_t v5 = *a3;
  std::basic_string_view<_CharT, _Traits>::size_type v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  E5RT::IOPortPriv::IOPortPriv(a2, &v5);
  std::__fs::filesystem::path::__string_view v4 = v6;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_19245CCE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v9 - 32);
  _Unwind_Resume(a1);
}

void std::allocator<E5RT::IOPortPriv>::construct[abi:ne180100]<E5RT::IOPortPriv,std::shared_ptr<E5RT::OperandDescriptor const>>(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = 0;
  E5RT::IOPortPriv::IOPortPriv(a2, &v4);
  std::__fs::filesystem::path::__string_view v3 = (std::__shared_weak_count *)*((void *)&v4 + 1);
  if (*((void *)&v4 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v4 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_19245CDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v9 - 32);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<E5RT::MemoryObject  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<E5RT::MemoryObject  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::MemoryObject  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DBE17BLL) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DBE17BLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DBE17BLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DBE17BLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  std::basic_string_view<_CharT, _Traits>::size_type v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      std::__fs::filesystem::path::__string_view v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          std::basic_string_view<_CharT, _Traits>::size_type v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            std::__fs::filesystem::path::__string_view v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          std::__fs::filesystem::path::__string_view v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  uint64_t v26 = operator new(0x30uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  *uint64_t v26 = 0;
  v26[1] = v11;
  long long v27 = (std::string *)(v26 + 2);
  id v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    v26[4] = *((void *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  v26[5] = 0;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        id v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        std::__fs::filesystem::path v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        id v32 = *(void **)(*(void *)a1 + 8 * v11);
        std::__fs::filesystem::path v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      id v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      std::__fs::filesystem::path v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *std::__fs::filesystem::path v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  id v32 = *(void **)(*(void *)a1 + 8 * v4);
  std::__fs::filesystem::path v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  *std::__fs::filesystem::path v33 = *v32;
  *id v32 = v45[0];
LABEL_92:
  std::__fs::filesystem::path::__string_view v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_19245D33C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19245D350(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void *)(v2 + 40);
      *(void *)(v2 + 40) = 0;
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      }
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  std::basic_string_view<_CharT, _Traits>::size_type v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v44, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      std::__fs::filesystem::path::__string_view v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          std::basic_string_view<_CharT, _Traits>::size_type v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = *((void *)v15 + 1);
            if (v22 == v11)
            {
              uint64_t v23 = v15[39];
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = v15[39];
              }
              else {
                uint64_t v24 = *((void *)v15 + 3);
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v15 + 2), v6, *((void *)v15 + 3))) {
                    return v15;
                  }
                }
                else
                {
                  if (!v15[39]) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (v15[v25 + 16] == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            std::__fs::filesystem::path::__string_view v15 = *(unsigned __int8 **)v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = *((void *)v15 + 1);
          if (v18 == v11)
          {
            uint64_t v19 = v15[39];
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = v15[39];
            }
            else {
              uint64_t v20 = *((void *)v15 + 3);
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v6, *((void *)v15 + 3))) {
                  return v15;
                }
              }
              else
              {
                if (!v15[39]) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (v15[v21 + 16] == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          std::__fs::filesystem::path::__string_view v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  uint64_t v26 = (void *)(a1 + 16);
  std::__fs::filesystem::path::__string_view v15 = (unsigned __int8 *)operator new(0x30uLL);
  v44[0] = v15;
  v44[1] = a1 + 16;
  *(void *)std::__fs::filesystem::path::__string_view v15 = 0;
  *((void *)v15 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v11;
  long long v27 = *a4;
  long long v28 = **a4;
  *((void *)v15 + 4) = *((void *)*a4 + 2);
  *((_OWORD *)v15 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v28;
  *((void *)v27 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = 0;
  *((void *)v27 + 2) = 0;
  *(void *)long long v27 = 0;
  *((void *)v15 + 5) = 0;
  char v45 = 1;
  float v29 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v30 = *(float *)(a1 + 32);
  if (v12 && (float)(v30 * (float)v12) >= v29)
  {
    uint64_t v31 = *(void *)a1;
    id v32 = *(void **)(*(void *)a1 + 8 * v4);
    if (v32)
    {
LABEL_54:
      *(void *)std::__fs::filesystem::path::__string_view v15 = *v32;
LABEL_89:
      *id v32 = v15;
      goto LABEL_90;
    }
  }
  else
  {
    BOOL v33 = 1;
    if (v12 >= 3) {
      BOOL v33 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v34 = v33 | (2 * v12);
    unint64_t v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35) {
      size_t prime = v35;
    }
    else {
      size_t prime = v34;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v37) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v37)
    {
      unint64_t v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v37 < 3uLL || (uint8x8_t v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        unint64_t v38 = std::__next_prime(v38);
      }
      else
      {
        uint64_t v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2) {
          unint64_t v38 = v40;
        }
      }
      if (prime <= v38) {
        size_t prime = v38;
      }
      if (prime < *(void *)&v37) {
LABEL_65:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v41 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v31 = *(void *)a1;
        id v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        if (v32) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v31 = *(void *)a1;
        id v32 = *(void **)(*(void *)a1 + 8 * v11);
        if (v32) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v4 = v41 & v11;
      uint64_t v31 = *(void *)a1;
      id v32 = *(void **)(*(void *)a1 + 8 * (v41 & v11));
      if (v32) {
        goto LABEL_54;
      }
    }
  }
  *(void *)std::__fs::filesystem::path::__string_view v15 = *v26;
  *uint64_t v26 = v15;
  *(void *)(v31 + 8 * v4) = v26;
  if (*(void *)v15)
  {
    unint64_t v42 = *(void *)(*(void *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v42 >= v12) {
        v42 %= v12;
      }
    }
    else
    {
      v42 &= v12 - 1;
    }
    id v32 = (void *)(*(void *)a1 + 8 * v42);
    goto LABEL_89;
  }
LABEL_90:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_19245D7FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_impl<char const*,char const*>(void *a1, const char **a2, const char **a3)
{
  std::basic_string_view<_CharT, _Traits>::size_type v6 = (char *)operator new(0x40uLL);
  *(void *)std::basic_string_view<_CharT, _Traits>::size_type v6 = 0;
  *((void *)v6 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = 0;
  uint64_t v7 = std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>((uint64_t)(v6 + 16), a2, a3);
  int v8 = v6[39];
  if (v8 >= 0) {
    unint64_t v9 = (uint64_t *)v7;
  }
  else {
    unint64_t v9 = (uint64_t *)*((void *)v6 + 2);
  }
  if (v8 >= 0) {
    unint64_t v10 = v6[39];
  }
  else {
    unint64_t v10 = *((void *)v6 + 3);
  }
  *((void *)v6 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v14, v9, v10);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_unique(a1, (uint64_t)v6);
  if ((v12 & 1) == 0 && v6)
  {
    if (v6[63] < 0)
    {
      operator delete(*((void **)v6 + 5));
      if ((v6[39] & 0x80000000) == 0) {
        goto LABEL_11;
      }
    }
    else if ((v6[39] & 0x80000000) == 0)
    {
LABEL_11:
      operator delete(v6);
      return inserted;
    }
    operator delete(*((void **)v6 + 2));
    goto LABEL_11;
  }
  return inserted;
}

void sub_19245D914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19245D92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_unique(void *a1, uint64_t a2)
{
  unint64_t v4 = (unsigned __int8 **)(a2 + 16);
  unint64_t v5 = *(unsigned __int8 *)(a2 + 39);
  unint64_t v6 = *(void *)(a2 + 24);
  if ((v5 & 0x80u) == 0) {
    uint64_t v7 = (uint64_t *)(a2 + 16);
  }
  else {
    uint64_t v7 = *(uint64_t **)(a2 + 16);
  }
  if ((v5 & 0x80u) == 0) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = v6;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v16, v7, v8);
  *(void *)(a2 + 8) = v9;
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v9, v4);
  if (!result)
  {
    int8x8_t v11 = (int8x8_t)a1[1];
    unint64_t v12 = *(void *)(a2 + 8);
    uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      if (v12 >= *(void *)&v11) {
        v12 %= *(void *)&v11;
      }
    }
    else
    {
      v12 &= *(void *)&v11 - 1;
    }
    char v14 = *(void **)(*a1 + 8 * v12);
    if (v14)
    {
      *(void *)a2 = *v14;
    }
    else
    {
      *(void *)a2 = a1[2];
      a1[2] = a2;
      *(void *)(*a1 + 8 * v12) = a1 + 2;
      if (!*(void *)a2)
      {
LABEL_21:
        ++a1[3];
        return (uint64_t *)a2;
      }
      unint64_t v15 = *(void *)(*(void *)a2 + 8);
      if (v13.u32[0] > 1uLL)
      {
        if (v15 >= *(void *)&v11) {
          v15 %= *(void *)&v11;
        }
      }
      else
      {
        v15 &= *(void *)&v11 - 1;
      }
      char v14 = (void *)(*a1 + 8 * v15);
    }
    *char v14 = a2;
    goto LABEL_21;
  }
  return result;
}

uint64_t std::pair<std::string const,std::string>::pair[abi:ne180100]<char const*,char const*,0>(uint64_t a1, const char **a2, const char **a3)
{
  unint64_t v5 = *a2;
  size_t v6 = strlen(*a2);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    unint64_t v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  unint64_t v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, v5, v7);
  *((unsigned char *)v8 + v7) = 0;
  int8x8_t v11 = (void *)(a1 + 24);
  unint64_t v12 = *a3;
  size_t v13 = strlen(*a3);
  if (v13 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v14 = v13;
  if (v13 >= 0x17)
  {
    uint64_t v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v15 = v13 | 7;
    }
    uint64_t v16 = v15 + 1;
    int8x8_t v11 = operator new(v15 + 1);
    *(void *)(a1 + 32) = v14;
    *(void *)(a1 + 40) = v16 | 0x8000000000000000;
    *(void *)(a1 + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v13;
    if (!v13) {
      goto LABEL_17;
    }
  }
  memmove(v11, v12, v14);
LABEL_17:
  *((unsigned char *)v11 + v14) = 0;
  return a1;
}

void sub_19245DBD0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

E5DB::CommandFactory *E5DB::CommandFactory::CommandFactory(E5DB::CommandFactory *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  E5DB::CommandFactory::PopulateCommandRegistry(this);
  return this;
}

{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  E5DB::CommandFactory::PopulateCommandRegistry(this);
  return this;
}

void sub_19245DC24(_Unwind_Exception *a1)
{
  std::unordered_map<std::string_view,std::shared_ptr<E5DB::Command>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void E5DB::CommandFactory::PopulateCommandRegistry(E5DB::CommandFactory *this)
{
  uint64_t v2 = &off_1E5746428;
  do
  {
    uint64_t v3 = *v2;
    unint64_t v4 = v2[1];
    if (v4 == (char *)3)
    {
      int v7 = *(unsigned __int16 *)v3;
      int v8 = v3[2];
      if (v7 == 30066 && v8 == 110)
      {
        unint64_t v5 = operator new(0x20uLL);
        v5[1] = 0;
        v5[2] = 0;
        *unint64_t v5 = &unk_1EE3807E0;
        size_t v6 = v5 + 3;
        E5DB::RunCommand::RunCommand(v5 + 3);
        goto LABEL_21;
      }
      goto LABEL_20;
    }
    if (v4 == (char *)10)
    {
      uint64_t v10 = *(void *)v3;
      int v11 = *((unsigned __int16 *)v3 + 4);
      if (v10 != 0x6568635F726E7370 || v11 != 27491) {
        goto LABEL_20;
      }
      unint64_t v5 = operator new(0x20uLL);
      v5[1] = 0;
      v5[2] = 0;
      *unint64_t v5 = &unk_1EE3808F8;
      size_t v6 = v5 + 3;
      E5DB::PsnrCheckCommand::PsnrCheckCommand(v5 + 3);
    }
    else
    {
      if (v4 != (char *)4) {
        goto LABEL_20;
      }
      switch(*(_DWORD *)v3)
      {
        case 0x706D7564:
          unint64_t v5 = operator new(0x20uLL);
          v5[1] = 0;
          v5[2] = 0;
          *unint64_t v5 = &unk_1EE380818;
          size_t v6 = v5 + 3;
          E5DB::DumpCommand::DumpCommand(v5 + 3);
          break;
        case 0x74697865:
          unint64_t v5 = operator new(0x20uLL);
          v5[1] = 0;
          v5[2] = 0;
          *unint64_t v5 = &unk_1EE380850;
          size_t v6 = v5 + 3;
          E5DB::ExitCommand::ExitCommand(v5 + 3);
          break;
        case 0x64616F6C:
          unint64_t v5 = operator new(0x20uLL);
          v5[1] = 0;
          v5[2] = 0;
          *unint64_t v5 = &unk_1EE3808C0;
          size_t v6 = v5 + 3;
          E5DB::LoadCommand::LoadCommand(v5 + 3);
          break;
        default:
LABEL_20:
          unint64_t v5 = operator new(0x20uLL);
          v5[1] = 0;
          v5[2] = 0;
          *unint64_t v5 = &unk_1EE380888;
          size_t v6 = v5 + 3;
          E5DB::HelpCommand::HelpCommand(v5 + 3);
          break;
      }
    }
LABEL_21:
    uint64_t v15 = v2;
    size_t v13 = std::__hash_table<std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>((uint64_t)this, (uint64_t)v2, (uint64_t)&std::piecewise_construct, (_OWORD **)&v15);
    size_t v14 = (std::__shared_weak_count *)*((void *)v13 + 5);
    *((void *)v13 + 4) = v6;
    *((void *)v13 + 5) = v5;
    if (v14)
    {
      if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v2 += 2;
  }
  while (v2 != (char **)&unk_1E5746488);
}

void sub_19245DF6C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_19245DF84(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_19245DF9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_19245DFB4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_19245DFCC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_19245DFE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_19245DFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::unordered_map<std::string_view,std::shared_ptr<E5DB::Command>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  while (v2)
  {
    uint64_t v3 = v2;
    uint64_t v2 = (void *)*v2;
    unint64_t v4 = (std::__shared_weak_count *)v3[5];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete(v3);
  }
  unint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void sub_19245E0F8(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void ***)(v1 + 16);
  if (v3) {
    sub_19245EE58(v3);
  }
  std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>::unordered_map((void **)v1);
  _Unwind_Resume(a1);
}

void E5DB::CommandFactory::~CommandFactory(E5DB::CommandFactory *this)
{
  uint64_t v2 = (void *)*((void *)this + 2);
  while (v2)
  {
    uint64_t v3 = v2;
    uint64_t v2 = (void *)*v2;
    unint64_t v4 = (std::__shared_weak_count *)v3[5];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete(v3);
  }
  unint64_t v5 = *(void **)this;
  *(void *)this = 0;
  if (v5) {
    operator delete(v5);
  }
}

{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  void *v5;

  uint64_t v2 = (void *)*((void *)this + 2);
  while (v2)
  {
    uint64_t v3 = v2;
    uint64_t v2 = (void *)*v2;
    unint64_t v4 = (std::__shared_weak_count *)v3[5];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete(v3);
  }
  unint64_t v5 = *(void **)this;
  *(void *)this = 0;
  if (v5) {
    operator delete(v5);
  }
}

uint64_t **E5DB::CommandFactory::GetCommand@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  v10[0] = a2;
  v10[1] = a3;
  if (E5DB::CommandFactory::IsValidCommandName((uint64_t)a1, a2, a3))
  {
    size_t v6 = v10;
  }
  else
  {
    v9[0] = "help";
    v9[1] = 4;
    size_t v6 = v9;
  }
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>>>::find<std::string_view>(a1, (uint64_t)v6);
  if (!result) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  int v8 = result[5];
  *a4 = result[4];
  a4[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(v8 + 1, 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t E5DB::CommandFactory::IsValidCommandName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 == 3)
  {
    if (*(_WORD *)a2 == 30066 && *(unsigned char *)(a2 + 2) == 110) {
      return (char *)&off_1E5746478 - (char *)&off_1E5746428 != 96;
    }
    return &unk_1E5746488 - (_UNKNOWN *)&off_1E5746428 != 96;
  }
  if (a3 == 10)
  {
    if (*(void *)a2 == 0x6568635F726E7370 && *(_WORD *)(a2 + 8) == 27491) {
      return (char *)&off_1E5746468 - (char *)&off_1E5746428 != 96;
    }
    return &unk_1E5746488 - (_UNKNOWN *)&off_1E5746428 != 96;
  }
  if (a3 != 4) {
    return &unk_1E5746488 - (_UNKNOWN *)&off_1E5746428 != 96;
  }
  if (*(_DWORD *)a2 == 1886221668) {
    return 1;
  }
  if (*(_DWORD *)a2 == 1953069157) {
    return (char *)&off_1E5746438 - (char *)&off_1E5746428 != 96;
  }
  if (*(_DWORD *)a2 != 1886152040)
  {
    if (*(_DWORD *)a2 == 1684107116) {
      return (char *)&off_1E5746458 - (char *)&off_1E5746428 != 96;
    }
    return &unk_1E5746488 - (_UNKNOWN *)&off_1E5746428 != 96;
  }
  return (char *)&off_1E5746448 - (char *)&off_1E5746428 != 96;
}

char **E5DB::CommandFactory::GetCommandNames(E5DB::CommandFactory *this)
{
  return &off_1E5746428;
}

uint64_t E5DB::CommandFactory::GetCommandFactory(E5DB::CommandFactory *this)
{
  if (qword_1E9303A20 != -1) {
    dispatch_once(&qword_1E9303A20, &unk_1EE39B218);
  }
  return qword_1E9303A18;
}

void sub_19245E4B8()
{
}

void sub_19245E50C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void ***)(v1 + 16);
  if (v3) {
    sub_19245EE58(v3);
  }
  std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>::unordered_map((void **)v1);
  MEMORY[0x192FF16B0](v1, 0x10A0C408EF24B1CLL);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<E5DB::DumpCommand>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380818;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5DB::DumpCommand>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380818;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<E5DB::DumpCommand>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<E5DB::ExitCommand>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380850;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5DB::ExitCommand>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380850;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<E5DB::ExitCommand>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<E5DB::LoadCommand>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3808C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5DB::LoadCommand>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3808C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<E5DB::LoadCommand>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<E5DB::RunCommand>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3807E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5DB::RunCommand>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3807E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<E5DB::RunCommand>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<E5DB::PsnrCheckCommand>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3808F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5DB::PsnrCheckCommand>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3808F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<E5DB::PsnrCheckCommand>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<E5DB::HelpCommand>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380888;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<E5DB::HelpCommand>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380888;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<E5DB::HelpCommand>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::__hash_table<std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v8 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v34, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v10) {
        unint64_t v4 = v8 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }
    unint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      size_t v13 = *v12;
      if (*v12)
      {
        uint64_t v16 = a2;
        uint64_t v15 = *(uint64_t **)a2;
        size_t v14 = *(void *)(v16 + 8);
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v18 = *((void *)v13 + 1);
            if (v18 == v9)
            {
              if (*((void *)v13 + 3) == v14 && !memcmp(*((const void **)v13 + 2), v15, v14)) {
                return v13;
              }
            }
            else if ((v18 & (v10 - 1)) != v4)
            {
              goto LABEL_25;
            }
            size_t v13 = *(void **)v13;
            if (!v13) {
              goto LABEL_25;
            }
          }
        }
        do
        {
          unint64_t v17 = *((void *)v13 + 1);
          if (v17 == v9)
          {
            if (*((void *)v13 + 3) == v14 && !memcmp(*((const void **)v13 + 2), v15, v14)) {
              return v13;
            }
          }
          else
          {
            if (v17 >= v10) {
              v17 %= v10;
            }
            if (v17 != v4) {
              break;
            }
          }
          size_t v13 = *(void **)v13;
        }
        while (v13);
      }
    }
  }
LABEL_25:
  uint64_t v19 = (void *)(a1 + 16);
  size_t v13 = operator new(0x30uLL);
  v34[0] = v13;
  v34[1] = a1 + 16;
  *(void *)size_t v13 = 0;
  *((void *)v13 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v9;
  *((_OWORD *)v13 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = **a4;
  *((void *)v13 + 4) = 0;
  *((void *)v13 + 5) = 0;
  char v35 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
    if (v23)
    {
LABEL_28:
      *(void *)size_t v13 = *v23;
LABEL_63:
      *uint64_t v23 = v13;
      goto LABEL_64;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v10 >= 3) {
      BOOL v24 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v10);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_39;
    }
    if (prime < v10)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v10) {
LABEL_39:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v31 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v4 = v9 % v10;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v23) {
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v4 = v9;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * v9);
        if (v23) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      unint64_t v4 = v31 & v9;
      uint64_t v22 = *(void *)a1;
      uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v31 & v9));
      if (v23) {
        goto LABEL_28;
      }
    }
  }
  *(void *)size_t v13 = *v19;
  *uint64_t v19 = v13;
  *(void *)(v22 + 8 * v4) = v19;
  if (*(void *)v13)
  {
    unint64_t v32 = *(void *)(*(void *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v32 >= v10) {
        v32 %= v10;
      }
    }
    else
    {
      v32 &= v10 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_63;
  }
LABEL_64:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_19245EC54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (std::__shared_weak_count *)v2[5];
      if (v3)
      {
        if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t **std::__hash_table<std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::shared_ptr<E5DB::Command>>>>::find<std::string_view>(void *a1, uint64_t a2)
{
  unint64_t v4 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v18, *(uint64_t **)a2, *(void *)(a2 + 8));
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v8 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v8 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v9 = *(uint64_t ****)(*a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  unint64_t v10 = *v9;
  if (*v9)
  {
    uint64_t v13 = a2;
    unint64_t v12 = *(uint64_t **)a2;
    size_t v11 = *(void *)(v13 + 8);
    if (v7.u32[0] < 2uLL)
    {
      uint64_t v14 = *(void *)&v5 - 1;
      while (1)
      {
        uint64_t v16 = v10[1];
        if (v16 == (uint64_t *)v6)
        {
          if (v10[3] == (uint64_t *)v11 && !memcmp(v10[2], v12, v11)) {
            return v10;
          }
        }
        else if (((unint64_t)v16 & v14) != v8)
        {
          return 0;
        }
        unint64_t v10 = (uint64_t **)*v10;
        if (!v10) {
          return v10;
        }
      }
    }
    do
    {
      unint64_t v15 = (unint64_t)v10[1];
      if (v15 == v6)
      {
        if (v10[3] == (uint64_t *)v11 && !memcmp(v10[2], v12, v11)) {
          return v10;
        }
      }
      else
      {
        if (v15 >= *(void *)&v5) {
          v15 %= *(void *)&v5;
        }
        if (v15 != v8) {
          return 0;
        }
      }
      unint64_t v10 = (uint64_t **)*v10;
    }
    while (v10);
  }
  return v10;
}

void sub_19245EE58(void **__p)
{
  do
  {
    uint64_t v2 = __p;
    std::string __p = (void **)*__p;
    uint64_t v3 = (std::__shared_weak_count *)v2[5];
    if (v3)
    {
      if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    operator delete(v2);
  }
  while (__p);
}

void E5DB::DumpCommand::GetName(char *a1@<X8>)
{
  a1[23] = 4;
  strcpy(a1, "dump");
}

double E5DB::DumpCommand::GetDescription@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (char *)operator new(0x38uLL);
  *(void *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_192DA90D0;
  strcpy(v3, "Dump the loaded E5 bundle in a human-readable format.");
  return *(double *)"uman-readable format.";
}

void *E5DB::DumpCommand::DumpCommand(void *this)
{
  *this = &unk_1EE324480;
  return this;
}

void E5DB::DumpCommand::~DumpCommand(E5DB::DumpCommand *this)
{
}

uint64_t E5DB::DumpCommand::GetHelp(E5DB::DumpCommand *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v31);
  (*(void (**)(void **__return_ptr, E5DB::DumpCommand *))(*(void *)this + 24))(__p, this);
  if ((v30 & 0x80u) == 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  if ((v30 & 0x80u) == 0) {
    uint64_t v3 = v30;
  }
  else {
    uint64_t v3 = (uint64_t)__p[1];
  }
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v2, v3);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  int8x8_t v5 = std::locale::use_facet(&v35, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v35);
  std::ostream::put();
  std::ostream::flush();
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v6 = std::locale::use_facet(&v35, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v35);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v30 < 0) {
    operator delete(__p[0]);
  }
  uint8x8_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"dump [options]", 14);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
  unint64_t v8 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Without any additional options, dump command will dump information about all functions from all platforms compiled within the E5 bundle.", 136);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
  unint64_t v10 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  size_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Options:", 8);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  unint64_t v12 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"-l | --list-platforms         : Only list the platforms compiled within the E5 bundle.", 86);
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
  uint64_t v14 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  unint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"-p | --platform [platform]    : Dump information only for given platform.", 73);
  std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
  uint64_t v16 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  unint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Use -l to retrieve available platforms within E5 bundle.", 56);
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  char v18 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"-f | --function [function]    : Dump information only for given function. ", 74);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
  float v20 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  float v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"-o | --outfile  [file]        : Dump output to file. Default = stdout", 69);
  std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
  uint64_t v22 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"-t | --format   [format type] : Output format among [json, dot]. Default = json", 79);
  std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24)));
  BOOL v24 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  unint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"-i | --intermediates          : Include information about intermediate tensors in function.", 91);
  std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
  unint64_t v26 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  v31[0] = *MEMORY[0x1E4FBA408];
  uint64_t v27 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v31 + *(void *)(v31[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v32[0] = v27;
  v32[1] = MEMORY[0x1E4FBA470] + 16;
  if (v33 < 0) {
    operator delete((void *)v32[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x192FF15B0](&v34);
}

void sub_19245F7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t E5DB::DumpCommand::GetHelpCSV(E5DB::DumpCommand *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v31);
  uint64_t v2 = operator new(0xE0uLL);
  *((_OWORD *)v2 + 10) = xmmword_1E5746548;
  *((_OWORD *)v2 + 1E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = unk_1E5746558;
  *((_OWORD *)v2 + 12) = xmmword_1E5746568;
  *((_OWORD *)v2 + 13) = unk_1E5746578;
  *((_OWORD *)v2 + 6) = xmmword_1E5746508;
  *((_OWORD *)v2 + 7) = unk_1E5746518;
  *((_OWORD *)v2 + 8) = xmmword_1E5746528;
  *((_OWORD *)v2 + 9) = unk_1E5746538;
  *((_OWORD *)v2 + 2) = xmmword_1E57464C8;
  *((_OWORD *)v2 + 3) = unk_1E57464D8;
  *((_OWORD *)v2 + 4) = xmmword_1E57464E8;
  *((_OWORD *)v2 + 5) = unk_1E57464F8;
  *(_OWORD *)uint64_t v2 = xmmword_1E57464A8;
  *((_OWORD *)v2 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = *(_OWORD *)algn_1E57464B8;
  (*(void (**)(void **__return_ptr, E5DB::DumpCommand *))(*(void *)this + 16))(__p, this);
  if ((v30 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v30 & 0x80u) == 0) {
    uint64_t v4 = v30;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  int8x8_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"=[", 2);
  if ((char)v30 < 0)
  {
    operator delete(__p[0]);
    unint64_t v6 = *(const char **)v2;
    if (!*(void *)v2) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  unint64_t v6 = *(const char **)v2;
  if (*(void *)v2)
  {
LABEL_11:
    size_t v7 = strlen(v6);
    unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v6, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)",", 1);
  }
LABEL_12:
  uint64_t v9 = *((void *)v2 + 4);
  if (v9)
  {
    size_t v10 = strlen(*((const char **)v2 + 4));
    size_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v9, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)",", 1);
  }
  uint64_t v12 = *((void *)v2 + 8);
  if (v12)
  {
    size_t v13 = strlen(*((const char **)v2 + 8));
    uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)",", 1);
  }
  uint64_t v15 = *((void *)v2 + 12);
  if (v15)
  {
    size_t v16 = strlen(*((const char **)v2 + 12));
    unint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v15, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)",", 1);
  }
  uint64_t v18 = *((void *)v2 + 16);
  if (v18)
  {
    size_t v19 = strlen(*((const char **)v2 + 16));
    float v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v18, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)",", 1);
  }
  uint64_t v21 = *((void *)v2 + 20);
  if (v21)
  {
    size_t v22 = strlen(*((const char **)v2 + 20));
    uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v21, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)",", 1);
  }
  uint64_t v24 = *((void *)v2 + 24);
  if (v24)
  {
    size_t v25 = strlen(*((const char **)v2 + 24));
    unint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v24, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)",", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"]", 1);
  std::stringbuf::str();
  operator delete(v2);
  v31[0] = *MEMORY[0x1E4FBA408];
  uint64_t v27 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v31 + *(void *)(v31[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v32[0] = v27;
  v32[1] = MEMORY[0x1E4FBA470] + 16;
  if (v33 < 0) {
    operator delete((void *)v32[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x192FF15B0](&v34);
}

void sub_19245FC14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  operator delete(v15);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t E5DB::DumpCommand::Execute(E5Common::E5PlatformManager *a1, void **a2, uint64_t a3)
{
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  if (*((char *)a2 + 39) < 0)
  {
    if (a2[3])
    {
LABEL_3:
      char v109 = 0;
      v107[0] = 0;
      char v108 = 0;
      LOBYTE(v104[0]) = 0;
      char v106 = 0;
      char v103 = 0;
      LOBYTE(v100[0]) = 0;
      char v102 = 0;
      char v99 = 4;
      strcpy((char *)&v97, "json");
      uint64_t v6 = E5Common::E5PlatformManager::Instance(a1);
      size_t v7 = operator new(0x40uLL);
      void *v7 = &unk_1EE39B248;
      v7[1] = a3;
      v7[2] = &v109;
      void v7[3] = v107;
      v7[4] = v104;
      v7[5] = &v103;
      v7[6] = v100;
      v7[7] = &v97;
      uint64_t v124 = v7;
      (*(void (**)(std::locale *__return_ptr, E5Common::E5PlatformManager *))(*(void *)a1 + 16))(&v119, a1);
      int v8 = E5DB::SafeExecute((uint64_t)v123);
      if ((char)v121 < 0)
      {
        operator delete(v119.__locale_);
        uint64_t v9 = v124;
        if (v124 != v123)
        {
LABEL_5:
          if (v9) {
            (*(void (**)(void *))(*v9 + 40))(v9);
          }
          if (v8) {
            goto LABEL_8;
          }
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v9 = v124;
        if (v124 != v123) {
          goto LABEL_5;
        }
      }
      (*(void (**)(void *))(v123[0] + 32))(v123);
      if (v8)
      {
LABEL_8:
        size_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2[1], (uint64_t)"Dump Command: Error in parsing arguments.", 41);
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
        size_t v11 = std::locale::use_facet(&v119, MEMORY[0x1E4FBA258]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v119);
        std::ostream::put();
        std::ostream::flush();
        uint64_t v12 = *a2;
        (*(void (**)(std::locale *__return_ptr, E5Common::E5PlatformManager *))(*(void *)a1 + 32))(&v119, a1);
        if ((v121 & 0x80u) == 0) {
          locale = &v119;
        }
        else {
          locale = v119.__locale_;
        }
        if ((v121 & 0x80u) == 0) {
          uint64_t v14 = v121;
        }
        else {
          uint64_t v14 = v120;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)locale, v14);
        if ((char)v121 < 0) {
          operator delete(v119.__locale_);
        }
        uint64_t v15 = 0x100000000;
        goto LABEL_139;
      }
LABEL_29:
      E5RT::GetPlatformsInCompositeBundle((uint64_t)(a2 + 2), (uint64_t)&v95);
      if (v109)
      {
        uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"Compiled platforms in bundle: ", 30);
        char v112 = 2;
        strcpy((char *)&__p, ", ");
        E5Common::StringUtils::Join((uint64_t)&__p, (uint64_t *)&v95);
        if ((v121 & 0x80u) == 0) {
          size_t v22 = &v119;
        }
        else {
          size_t v22 = v119.__locale_;
        }
        if ((v121 & 0x80u) == 0) {
          uint64_t v23 = v121;
        }
        else {
          uint64_t v23 = v120;
        }
        uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
        std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24)));
        size_t v25 = std::locale::use_facet(&v88, MEMORY[0x1E4FBA258]);
        ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
        std::locale::~locale(&v88);
        std::ostream::put();
        std::ostream::flush();
        if ((char)v121 < 0)
        {
          operator delete(v119.__locale_);
          if ((v112 & 0x80000000) == 0)
          {
LABEL_38:
            uint64_t v15 = 0;
            unint64_t v26 = (void **)v95;
            if (!v95) {
              goto LABEL_139;
            }
            goto LABEL_132;
          }
        }
        else if ((v112 & 0x80000000) == 0)
        {
          goto LABEL_38;
        }
        operator delete(__p);
        uint64_t v15 = 0;
        unint64_t v26 = (void **)v95;
        if (!v95) {
          goto LABEL_139;
        }
        goto LABEL_132;
      }
      long long v94 = *a2;
      uint64_t v27 = MEMORY[0x1E4FBA468] + 64;
      v122[0] = MEMORY[0x1E4FBA468] + 64;
      unint64_t v28 = (std::locale *)MEMORY[0x1E4FBA400];
      uint8x8_t v29 = *(std::locale::__imp **)(MEMORY[0x1E4FBA400] + 16);
      v119.__locale_ = *(std::locale::__imp **)(MEMORY[0x1E4FBA400] + 8);
      *(std::locale::__imp **)((char *)&v119.__locale_ + *((void *)v119.__locale_ - E5RT::Status::~Status((E5RT::Status *)(this + 3)) = v29;
      unsigned __int8 v30 = (std::ios_base *)((char *)&v119 + *((void *)v119.__locale_ - 3));
      std::ios_base::init(v30, &v120);
      unint64_t v31 = (std::locale::__imp *)(MEMORY[0x1E4FBA468] + 24);
      v30[1].__vftable = 0;
      v30[1].__fmtflags_ = -1;
      v119.__locale_ = v31;
      v122[0] = v27;
      MEMORY[0x192FF1030](&v120);
      uint64_t v118 = 0;
      unint64_t v32 = operator new(0x50uLL);
      *unint64_t v32 = &unk_1EE39B348;
      v32[1] = &v94;
      v32[2] = &v119;
      v32[3] = a2;
      v32[4] = &v97;
      v32[5] = v100;
      v32[6] = v104;
      v32[7] = v107;
      v32[8] = &v95;
      v32[9] = v6;
      uint64_t v118 = v32;
      (*(void (**)(void **__return_ptr, E5Common::E5PlatformManager *))(*(void *)a1 + 16))(&__p, a1);
      int v33 = E5DB::SafeExecute((uint64_t)v117);
      if (v112 < 0) {
        operator delete(__p);
      }
      if (v118 == v117)
      {
        (*(void (**)(void *))(v117[0] + 32))(v117);
        if (v33)
        {
LABEL_46:
          uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2[1], (uint64_t)"Dump Command: Error in processing arguments.", 44);
          std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(void *)(*v34 - 24)));
          std::locale v35 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x1E4FBA258]);
          ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
          std::locale::~locale((std::locale *)&__p);
          std::ostream::put();
          std::ostream::flush();
          unint64_t v36 = *a2;
          (*(void (**)(void **__return_ptr, E5Common::E5PlatformManager *))(*(void *)a1 + 32))(&__p, a1);
          if (v112 >= 0) {
            p_std::string p = &__p;
          }
          else {
            p_std::string p = __p;
          }
          if (v112 >= 0) {
            uint64_t v38 = v112;
          }
          else {
            uint64_t v38 = v111;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)p_p, v38);
          if (v112 < 0) {
            operator delete(__p);
          }
          uint64_t v15 = 0x100000000;
LABEL_131:
          v119.__locale_ = v28->__locale_;
          *(std::locale *)((char *)&v119 + *((void *)v119.__locale_ - E5RT::Status::~Status((E5RT::Status *)(this + 3)) = v28[3];
          MEMORY[0x192FF1040](&v120);
          std::ostream::~ostream();
          MEMORY[0x192FF15B0](v122);
          unint64_t v26 = (void **)v95;
          if (!v95)
          {
LABEL_139:
            if (v99 < 0) {
              operator delete(v97);
            }
            if (v102 && (char)v101 < 0) {
              operator delete(v100[0]);
            }
            if (v106 && v105 < 0) {
              operator delete(v104[0]);
            }
            if (v108) {
              E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v107);
            }
            return v15 & 0x100000000;
          }
LABEL_132:
          int v75 = v96;
          uint64_t v76 = v26;
          if (v96 != v26)
          {
            do
            {
              if (*((char *)v75 - 1) < 0) {
                operator delete(*(v75 - 3));
              }
              v75 -= 3;
            }
            while (v75 != v26);
            uint64_t v76 = v95;
          }
          unint64_t v96 = v26;
          operator delete(v76);
          goto LABEL_139;
        }
      }
      else
      {
        if (v118) {
          (*(void (**)(void))(*v118 + 40))();
        }
        if (v33) {
          goto LABEL_46;
        }
      }
      uint64_t v93 = [MEMORY[0x1E4F1CA60] dictionary];
      v88.__locale_ = (std::locale::__imp *)&v93;
      uint64_t v89 = v104;
      uint64_t v90 = a2;
      uint64_t v91 = v6;
      char v92 = v103;
      uint64_t v116 = 0;
      uint8x8_t v39 = operator new(0x28uLL);
      *uint8x8_t v39 = &unk_1EE39B3C8;
      v39[1] = v107;
      v39[2] = &v95;
      void v39[3] = &v88;
      v39[4] = v6;
      uint64_t v116 = v39;
      (*(void (**)(void **__return_ptr, E5Common::E5PlatformManager *))(*(void *)a1 + 16))(&__p, a1);
      int v40 = E5DB::SafeExecute((uint64_t)v115);
      if (v112 < 0) {
        operator delete(__p);
      }
      if (v116 == v115)
      {
        (*(void (**)(void *))(v115[0] + 32))(v115);
        if (v40)
        {
LABEL_65:
          unint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2[1], (uint64_t)"Dump Command: Error in getting E5 dump information.", 51);
          std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(void *)(*v41 - 24)));
          unint64_t v42 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x1E4FBA258]);
          ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
          std::locale::~locale((std::locale *)&__p);
          std::ostream::put();
          std::ostream::flush();
          unint64_t v43 = *a2;
          (*(void (**)(void **__return_ptr, E5Common::E5PlatformManager *))(*(void *)a1 + 32))(&__p, a1);
          if (v112 >= 0) {
            int v44 = &__p;
          }
          else {
            int v44 = __p;
          }
          if (v112 >= 0) {
            uint64_t v45 = v112;
          }
          else {
            uint64_t v45 = v111;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v44, v45);
          if (v112 < 0) {
            operator delete(__p);
          }
          uint64_t v15 = 0x100000000;
LABEL_130:

          goto LABEL_131;
        }
      }
      else
      {
        if (v116) {
          (*(void (**)(void))(*v116 + 40))();
        }
        if (v40) {
          goto LABEL_65;
        }
      }
      if (v99 < 0)
      {
        if (v98 != 3)
        {
          if (v98 != 4 || *(_DWORD *)v97 != 1852797802) {
            goto LABEL_120;
          }
LABEL_119:
          id v70 = [MEMORY[0x1E4F28D90] dataWithJSONObject:v93 options:3 error:0];
          [v70 bytes];
          [v70 length];
          std::ostream::write();

LABEL_120:
          if (v94 != *a2)
          {
            uint64_t v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"Wrote E5 dump information to ", 29);
            if (!v102) {
              std::__throw_bad_optional_access[abi:ne180100]();
            }
            if ((v101 & 0x80u) == 0) {
              long long v72 = v100;
            }
            else {
              long long v72 = (void **)v100[0];
            }
            if ((v101 & 0x80u) == 0) {
              uint64_t v73 = v101;
            }
            else {
              uint64_t v73 = (uint64_t)v100[1];
            }
            unsigned int v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)v72, v73);
            std::endl[abi:ne180100]<char,std::char_traits<char>>(v74);
          }
          uint64_t v15 = 0;
          goto LABEL_130;
        }
        char v46 = (unsigned __int16 *)v97;
      }
      else
      {
        if (v99 != 3)
        {
          if (v99 != 4 || v97 != 1852797802) {
            goto LABEL_120;
          }
          goto LABEL_119;
        }
        char v46 = (unsigned __int16 *)&v97;
      }
      int v47 = *v46;
      int v48 = *((unsigned __int8 *)v46 + 2);
      if (v47 == 28516 && v48 == 116)
      {
        E5DB::GenerateDigraphs(v93, (uint64_t)v86);
        if (*((char *)a2 + 39) >= 0) {
          unint64_t v50 = a2 + 2;
        }
        else {
          unint64_t v50 = (void **)a2[2];
        }
        char v51 = [NSString stringWithUTF8String:v50];
        uint64_t v83 = [v51 lastPathComponent];

        long long v52 = v87;
        if (v87)
        {
          unsigned int v82 = v28->__locale_;
          unsigned int v81 = v28[3].__locale_;
          do
          {
            if (!v102) {
              std::__throw_bad_optional_access[abi:ne180100]();
            }
            long long v53 = v100;
            if ((v101 & 0x80u) != 0) {
              long long v53 = (void **)v100[0];
            }
            if (*((char *)v52 + 39) < 0) {
              uint64_t v54 = (uint64_t)v52[2];
            }
            else {
              uint64_t v54 = (uint64_t)(v52 + 2);
            }
            id v55 = [NSString stringWithFormat:@"%s/%@-%s.dot", v53, v83, v54];
            [v55 UTF8String];
            std::ofstream::basic_ofstream((uint64_t *)&__p);
            if (*(_DWORD *)&v113[*((void *)__p - 3)])
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::string::basic_string[abi:ne180100]<0>(&v84, (char *)[v55 UTF8String]);
              int v79 = std::string::insert(&v84, 0, "Unable to open file for writing at ");
              long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
              v85.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v80;
              v79->__r_.__value_.__l.__size_ = 0;
              v79->__r_.__value_.__r.__words[2] = 0;
              v79->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(exception, &v85);
              __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            int v56 = *((char *)v52 + 63);
            if (v56 >= 0) {
              uint64_t v57 = (uint64_t)(v52 + 5);
            }
            else {
              uint64_t v57 = (uint64_t)v52[5];
            }
            if (v56 >= 0) {
              uint64_t v58 = *((unsigned __int8 *)v52 + 63);
            }
            else {
              uint64_t v58 = (uint64_t)v52[6];
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, v57, v58);
            if (!std::filebuf::close()) {
              std::ios_base::clear((std::ios_base *)((char *)&__p + *((void *)__p - 3)), *(_DWORD *)&v113[*((void *)__p - 3)] | 4);
            }
            unsigned int v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"Wrote dot file for ", 19);
            int v60 = *((char *)v52 + 39);
            if (v60 >= 0) {
              uint64_t v61 = (uint64_t)(v52 + 2);
            }
            else {
              uint64_t v61 = (uint64_t)v52[2];
            }
            if (v60 >= 0) {
              uint64_t v62 = *((unsigned __int8 *)v52 + 39);
            }
            else {
              uint64_t v62 = (uint64_t)v52[3];
            }
            id v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, v61, v62);
            uint64_t v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)" at ", 4);
            id v65 = v55;
            uint64_t v66 = (const char *)[v65 UTF8String];
            size_t v67 = strlen(v66);
            unsigned int v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)v66, v67);
            std::ios_base::getloc((const std::ios_base *)((char *)v68 + *(void *)(*v68 - 24)));
            uint64_t v69 = std::locale::use_facet((const std::locale *)&v85, MEMORY[0x1E4FBA258]);
            ((void (*)(const std::locale::facet *, uint64_t))v69->__vftable[2].~facet_0)(v69, 10);
            std::locale::~locale((std::locale *)&v85);
            std::ostream::put();
            std::ostream::flush();
            std::string __p = v82;
            *(void **)((char *)&__p + *((void *)v82 - E5RT::Status::~Status((E5RT::Status *)(this + 3)) = v81;
            MEMORY[0x192FF1040](&v111);
            std::ostream::~ostream();
            MEMORY[0x192FF15B0](&v114);

            long long v52 = (uint64_t **)*v52;
          }
          while (v52);
        }

        std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)v86);
      }
      goto LABEL_120;
    }
  }
  else if (*((unsigned char *)a2 + 39))
  {
    goto LABEL_3;
  }
  size_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2[1], (uint64_t)"E5 bundle path not specified.", 29);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
  unint64_t v17 = std::locale::use_facet(&v119, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v119);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v18 = *a2;
  (*(void (**)(std::locale *__return_ptr, E5Common::E5PlatformManager *))(*(void *)a1 + 32))(&v119, a1);
  if ((v121 & 0x80u) == 0) {
    size_t v19 = &v119;
  }
  else {
    size_t v19 = v119.__locale_;
  }
  if ((v121 & 0x80u) == 0) {
    uint64_t v20 = v121;
  }
  else {
    uint64_t v20 = v120;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
  if ((char)v121 < 0) {
    operator delete(v119.__locale_);
  }
  uint64_t v15 = 0x100000000;
  return v15 & 0x100000000;
}

void sub_192460CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,std::locale a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::locale a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,char a61,int a62,__int16 a63)
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a26);
  std::ofstream::~ofstream(&STACK[0x3F8]);
  std::vector<std::string>::~vector[abi:ne180100](&a38);
  if (a46 < 0)
  {
    operator delete(__p);
    if (!a53) {
      goto LABEL_8;
    }
  }
  else if (!a53)
  {
    goto LABEL_8;
  }
  if (a52 < 0) {
    operator delete(a47);
  }
LABEL_8:
  if (a61 && a60 < 0) {
    operator delete(a55);
  }
  if (a65)
  {
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&a63);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_192461058()
{
}

__n128 sub_19246106C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_1EE39B248;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 sub_1924610D0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE39B248;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_192461118(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(char ***)(a1 + 8);
  long long v7 = *(_OWORD *)(a1 + 16);
  long long v8 = *(_OWORD *)(a1 + 32);
  long long v6 = *(_OWORD *)(a1 + 48);
  uint64_t v2 = operator new(0xE0uLL);
  size_t v13 = v2 + 14;
  v2[10] = xmmword_1E5746548;
  v2[11] = unk_1E5746558;
  v2[12] = xmmword_1E5746568;
  v2[13] = unk_1E5746578;
  v2[6] = xmmword_1E5746508;
  v2[7] = unk_1E5746518;
  v2[8] = xmmword_1E5746528;
  v2[9] = unk_1E5746538;
  v2[2] = xmmword_1E57464C8;
  void v2[3] = unk_1E57464D8;
  v2[4] = xmmword_1E57464E8;
  v2[5] = unk_1E57464F8;
  _OWORD *v2 = xmmword_1E57464A8;
  v2[1] = *(_OWORD *)algn_1E57464B8;
  std::string __p = v2;
  uint64_t v12 = v2 + 14;
  uint64_t v3 = E5Common::E5PlatformManager::Instance((E5Common::E5PlatformManager *)v2);
  char v10 = 10;
  strcpy((char *)v9, "lp:f:io:t:");
  long long v4 = (char *)operator new(0x40uLL);
  *(void *)long long v4 = &unk_1EE39B2B8;
  *(_OWORD *)(v4 + 8) = v7;
  *((void *)v4 + 3) = v3;
  *((_OWORD *)v4 + 2) = v6;
  *((_OWORD *)v4 + 3) = v8;
  uint64_t v15 = v4;
  E5DB::ParseOptions(v1, (uint64_t)v9, (const option **)&__p, (uint64_t)v14);
  if (v15 == v14)
  {
    (*(void (**)(void *))(v14[0] + 32))(v14);
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else
  {
    if (v15) {
      (*(void (**)(void *))(*v15 + 40))(v15);
    }
    if ((v10 & 0x80000000) == 0)
    {
LABEL_5:
      int8x8_t v5 = __p;
      if (!__p) {
        return;
      }
      goto LABEL_6;
    }
  }
  operator delete(v9[0]);
  int8x8_t v5 = __p;
  if (!__p) {
    return;
  }
LABEL_6:
  uint64_t v12 = v5;
  operator delete(v5);
}

void sub_1924612F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23)
{
  uint64_t v26 = *(void *)(v24 - 48);
  if (v26 == v23) {
    sub_1924623A8(v24 - 72);
  }
  else {
    sub_1924623E0(v26);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (!a22) {
    _Unwind_Resume(a1);
  }
  operator delete(a22);
  _Unwind_Resume(a1);
}

uint64_t sub_192461358(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5DB11DumpCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_11char_trait"
                     "sIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5DB11DumpCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_1"
                                "1char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5DB11DumpCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5DB11DumpCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1924613C8()
{
  return &unk_1EE39B328;
}

void sub_1924613D8()
{
}

__n128 sub_1924613EC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_1EE39B2B8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 sub_192461450(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE39B2B8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_192461498(void *a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 'f':
      long long v3 = (unsigned char *)a1[6];
      long long v4 = (const char *)*MEMORY[0x1E4F149E8];
      if (v3[24]) {
        goto LABEL_17;
      }
      goto LABEL_9;
    case 'i':
      int8x8_t v5 = (unsigned char *)a1[7];
      goto LABEL_6;
    case 'l':
      int8x8_t v5 = (unsigned char *)a1[1];
LABEL_6:
      *int8x8_t v5 = 1;
      return;
    case 'o':
      long long v3 = (unsigned char *)a1[4];
      long long v4 = (const char *)*MEMORY[0x1E4F149E8];
      if (v3[24]) {
        goto LABEL_17;
      }
LABEL_9:
      size_t v6 = strlen(v4);
      if (v6 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v7 = v6;
      if (v6 >= 0x17)
      {
        uint64_t v18 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v6 | 7) != 0x17) {
          uint64_t v18 = v6 | 7;
        }
        uint64_t v19 = v18 + 1;
        long long v8 = operator new(v18 + 1);
        *((void *)v3 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v7;
        *((void *)v3 + 2) = v19 | 0x8000000000000000;
        *(void *)long long v3 = v8;
      }
      else
      {
        v3[23] = v6;
        long long v8 = v3;
        if (!v6) {
          goto LABEL_31;
        }
      }
      memmove(v8, v4, v7);
LABEL_31:
      *((unsigned char *)v8 + v7) = 0;
      v3[24] = 1;
      return;
    case 'p':
      uint64_t v9 = a1[3];
      char v10 = (const void *)*MEMORY[0x1E4F149E8];
      size_t v11 = strlen((const char *)*MEMORY[0x1E4F149E8]);
      if (v11 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      uint64_t v12 = (void *)v11;
      if (v11 >= 0x17)
      {
        uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17) {
          uint64_t v14 = v11 | 7;
        }
        uint64_t v15 = v14 + 1;
        size_t v13 = (void **)operator new(v14 + 1);
        __dst[1] = v12;
        unint64_t v21 = v15 | 0x8000000000000000;
        __dst[0] = v13;
      }
      else
      {
        HIBYTE(v2E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v11;
        size_t v13 = __dst;
        if (!v11) {
          goto LABEL_24;
        }
      }
      memmove(v13, v10, (size_t)v12);
LABEL_24:
      *((unsigned char *)v12 + (void)v13) = 0;
      (*(void (**)(long long *__return_ptr, uint64_t, void **))(*(void *)v9 + 40))(&v22, v9, __dst);
      uint64_t v16 = a1[2];
      if (*(unsigned char *)(v16 + 16))
      {
        uint64_t v17 = v22;
        *(_DWORD *)(v16 + 8) = DWORD2(v22);
        *(void *)uint64_t v16 = v17;
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v22);
        if ((SHIBYTE(v21) & 0x80000000) == 0) {
          return;
        }
      }
      else
      {
        *(_OWORD *)uint64_t v16 = v22;
        *(unsigned char *)(v16 + 16) = 1;
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v22);
        if ((SHIBYTE(v21) & 0x80000000) == 0) {
          return;
        }
      }
      operator delete(__dst[0]);
      return;
    case 't':
LABEL_17:
      JUMPOUT(0x192FF0F50);
    default:
      return;
  }
}

void sub_192461758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1924617B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN12_GLOBAL__N_114ParseArgumentsERKNSt3__16vectorINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9all"
                     "ocatorIcEEEENS5_IS7_EEEERbRNS0_8optionalIN8E5Common18PlatformIdentifierEEERNSD_IS7_EESC_SJ_RS7_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN12_GLOBAL__N_114ParseArgumentsERKNSt3__16vectorINS0_12basic_stringIcNS0_11char_traitsI"
                                "cEENS0_9allocatorIcEEEENS5_IS7_EEEERbRNS0_8optionalIN8E5Common18PlatformIdentifierEEERNS"
                                "D_IS7_EESC_SJ_RS7_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12_GLOBAL__N_114ParseArgumentsERKNSt3__16vectorINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS5_IS7_EEEERbRNS0_8optionalIN8E5Common18PlatformIdentifierEEERNSD_IS7_EESC_SJ_RS7_E3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12_GLOBAL__N_114ParseArgumentsERKNSt3__16vectorINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS5_IS7_EEEERbRNS0_8optionalIN8E5Common18PlatformIdentifierEEERNSD_IS7_EESC_SJ_RS7_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192461820()
{
  return &unk_1EE39B318;
}

void sub_192461830()
{
}

__n128 sub_192461844(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x50uLL);
  *(void *)uint64_t v2 = &unk_1EE39B348;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((void *)v2 + 9) = *(void *)(a1 + 72);
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1924618B0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE39B348;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  long long v3 = *(_OWORD *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 72) = *(void *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_192461900(uint64_t a1)
{
  uint64_t v2 = *(_DWORD **)(a1 + 32);
  if (*((char *)v2 + 23) < 0)
  {
    uint64_t v4 = *((void *)v2 + 1);
    if (v4 != 3)
    {
      if (v4 != 4 || **(_DWORD **)v2 != 1852797802) {
        goto LABEL_59;
      }
      goto LABEL_20;
    }
    uint64_t v2 = *(_DWORD **)v2;
  }
  else
  {
    int v3 = *((unsigned __int8 *)v2 + 23);
    if (v3 != 3)
    {
      if (v3 != 4 || *v2 != 1852797802) {
        goto LABEL_59;
      }
      goto LABEL_20;
    }
  }
  if (*(_WORD *)v2 != 28516 || *((unsigned char *)v2 + 2) != 116)
  {
LABEL_59:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &__p);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v6 = *(unsigned __int16 *)v2;
  int v7 = *((unsigned __int8 *)v2 + 2);
  if (v6 != 28516 || v7 != 116)
  {
LABEL_20:
    if (!*(unsigned char *)(*(void *)(a1 + 40) + 24)) {
      goto LABEL_23;
    }
    std::ofstream::open();
    uint64_t v9 = *(void **)(a1 + 16);
    if ((*((unsigned char *)v9 + *(void *)(*v9 - 24) + 32) & 5) == 0)
    {
      **(void **)(a1 + 8) = v9;
      goto LABEL_23;
    }
    uint64_t v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v27, "Unable to open output file.");
LABEL_62:
    __cxa_throw(v27, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v21 = *(void *)(a1 + 40);
  if (!*(unsigned char *)(v21 + 24))
  {
    uint64_t v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v27, "For dot format output, an output directory must be specified.");
    goto LABEL_62;
  }
  memset(&__p, 0, sizeof(__p));
  char v22 = *(unsigned char *)(v21 + 23);
  if (v22 >= 0) {
    uint64_t v23 = (std::string *)v21;
  }
  else {
    uint64_t v23 = *(std::string **)v21;
  }
  if (v22 >= 0) {
    uint64_t v24 = *(unsigned __int8 *)(v21 + 23);
  }
  else {
    uint64_t v24 = *(void *)(v21 + 8);
  }
  std::string::append[abi:ne180100]<char const*,0>(&__p, v23, (std::string *)((char *)v23 + v24));
  std::__fs::filesystem::__create_directories((const std::__fs::filesystem::path *)&__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_23:
  if (!*(unsigned char *)(*(void *)(a1 + 56) + 16)) {
    return;
  }
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 24))(*(void *)(a1 + 72));
  if ((*(char *)(v10 + 23) & 0x80000000) == 0)
  {
    long long v11 = *(_OWORD *)v10;
    __p.__r_.__value_.__r.__words[2] = *(void *)(v10 + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
    uint64_t v12 = *(uint64_t **)(a1 + 64);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    if (*v12 == v14) {
      goto LABEL_45;
    }
LABEL_28:
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string p = &__p;
    }
    else {
      p_std::string p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    while (1)
    {
      uint64_t v18 = *(unsigned __int8 *)(v13 + 23);
      if ((v18 & 0x80u) == 0) {
        uint64_t v19 = *(unsigned __int8 *)(v13 + 23);
      }
      else {
        uint64_t v19 = *(void *)(v13 + 8);
      }
      if (v19 == size)
      {
        if ((v18 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v13, p_p, *(void *)(v13 + 8))) {
            goto LABEL_45;
          }
        }
        else
        {
          if (!*(unsigned char *)(v13 + 23)) {
            goto LABEL_45;
          }
          uint64_t v20 = 0;
          while (*(unsigned __int8 *)(v13 + v20) == p_p->__r_.__value_.__s.__data_[v20])
          {
            if (v18 == ++v20) {
              goto LABEL_45;
            }
          }
        }
      }
      v13 += 24;
      if (v13 == v14) {
        goto LABEL_58;
      }
    }
  }
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v10, *(void *)(v10 + 8));
  uint64_t v15 = *(uint64_t **)(a1 + 64);
  uint64_t v13 = *v15;
  uint64_t v14 = v15[1];
  if (*v15 != v14) {
    goto LABEL_28;
  }
LABEL_45:
  if (v13 == v14)
  {
LABEL_58:
    size_t v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v25, "Given platform override is not found in E5 bundle.");
    __cxa_throw(v25, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_192461C94(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192461CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_192461D2C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5DB11DumpCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_11char_trait"
                     "sIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5DB11DumpCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_1"
                                "1char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5DB11DumpCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5DB11DumpCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192461D9C()
{
  return &unk_1EE39B3A8;
}

void sub_192461DAC()
{
}

__n128 sub_192461DC0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EE39B3C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_192461E14(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE39B3C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_192461E4C(uint64_t a1)
{
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v2 + 16))
  {
    std::vector<E5Common::PlatformIdentifier>::push_back[abi:ne180100](&v12, (_OWORD *)v2);
  }
  else
  {
    long long v8 = *(uint64_t **)(a1 + 16);
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    if (*v8 != v10)
    {
      do
      {
        (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 32) + 40))(&v15);
        std::vector<E5Common::PlatformIdentifier>::push_back[abi:ne180100](&v12, &v15);
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v15);
        v9 += 24;
      }
      while (v9 != v10);
    }
  }
  unint64_t v3 = v12;
  if (v12 != v13)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    long long v11 = *(_OWORD *)v12;
    uint64_t v5 = *(void *)(v4 + 16) + 16;
    long long v16 = v11;
    char v17 = 1;
    E5RT::E5Program::LoadProgram(v5, (uint64_t)&v16);
  }
  if (v12)
  {
    int v6 = v13;
    int v7 = v12;
    if (v13 != v12)
    {
      do
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v6 - 16));
      while (v6 != v3);
      int v7 = v12;
    }
    uint64_t v13 = v3;
    operator delete(v7);
  }
}

void sub_1924620F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *__p, char *a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (__p)
  {
    char v22 = a13;
    uint64_t v23 = __p;
    if (a13 != __p)
    {
      do
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v22 - 16));
      while (v22 != __p);
      uint64_t v23 = __p;
    }
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

void sub_1924621C4()
{
}

void sub_1924621CC()
{
}

void sub_1924621D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  if (a21) {
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&a19);
  }
  JUMPOUT(0x19246217CLL);
}

uint64_t sub_1924621EC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5DB11DumpCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_11char_trait"
                     "sIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_3")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5DB11DumpCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_1"
                                "1char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_3" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5DB11DumpCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_3"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5DB11DumpCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19246225C()
{
  return &unk_1EE39B428;
}

void std::vector<E5Common::PlatformIdentifier>::push_back[abi:ne180100](char **a1, _OWORD *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *(_OWORD *)uint64_t v5 = *a2;
    int v6 = v5 + 16;
LABEL_3:
    a1[1] = v6;
    return;
  }
  int v7 = *a1;
  uint64_t v8 = (v5 - *a1) >> 4;
  unint64_t v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) >> 60) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v10 = v4 - (void)v7;
  if (v10 >> 3 > v9) {
    unint64_t v9 = v10 >> 3;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v9;
  }
  if (v11)
  {
    if (v11 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v12 = (char *)operator new(16 * v11);
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v13 = &v12[16 * v8];
  uint64_t v14 = &v12[16 * v11];
  *(_OWORD *)uint64_t v13 = *a2;
  int v6 = v13 + 16;
  if (v5 == v7)
  {
    *a1 = v13;
    a1[1] = v6;
    a1[2] = v14;
    if (!v5) {
      goto LABEL_3;
    }
  }
  else
  {
    do
    {
      *((_OWORD *)v13 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = *((_OWORD *)v5 - 1);
      v13 -= 16;
      v5 -= 16;
    }
    while (v5 != v7);
    uint64_t v5 = *a1;
    std::string v15 = a1[1];
    *a1 = v13;
    a1[1] = v6;
    a1[2] = v14;
    while (v15 != v5)
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v15 - 16));
    if (!v5) {
      goto LABEL_3;
    }
  }
  operator delete(v5);
  a1[1] = v6;
}

uint64_t sub_1924623A8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
}

uint64_t sub_1924623E0(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

id E5DB::GetPortInformation(E5DB *this, const E5RT::E5Operand *a2)
{
  (*(void (**)(E5RT **__return_ptr))(*(void *)this + 16))(&v12);
  E5RT::GetOperandDescriptorInformation(v12, (uint64_t)&v14);
  unint64_t v3 = v13;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  for (uint64_t i = *(uint64_t **)((*(uint64_t (**)(E5DB *))(*(void *)this + 56))(this) + 16); i; uint64_t i = (uint64_t *)*i)
  {
    int v6 = i + 2;
    if (*((char *)i + 39) < 0) {
      int v6 = (void *)*v6;
    }
    int v7 = [NSString stringWithUTF8String:v6];
    [v4 addObject:v7];
  }
  id v8 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  unint64_t v9 = v8;
  if (v15) {
    uint64_t v10 = @"Tensor";
  }
  else {
    uint64_t v10 = @"Surface";
  }
  [v8 setObject:v10 forKey:@"PortType"];
  [v9 setObject:v14 forKey:@"Description"];
  if ([v4 count]) {
    [v9 setObject:v4 forKey:@"Aliases"];
  }

  return v9;
}

void sub_1924625D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1924625EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_192462604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_192462618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19246262C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_19246264C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

id E5DB::GetE5FunctionInformation(uint64_t a1, uint64_t a2, int a3)
{
  v173 = [MEMORY[0x1E4F1CA60] dictionary];
  uint64_t v168 = a1;
  id v4 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v5 = v4[1] - *v4;
  if (v5)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v8 = v5 / 24;
    do
    {
      if (v7 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[1] - *v4) >> 3))
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "iterator out of range");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
      }
      unint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v4 + 8, *v4 + v6);
      unint64_t v11 = E5DB::GetPortInformation((E5DB *)v9[5], v10);
      uint64_t v14 = v9[2];
      uint64_t v13 = v9 + 2;
      uint64_t v12 = v14;
      if (*((char *)v13 + 23) >= 0) {
        char v15 = v13;
      }
      else {
        char v15 = (uint64_t *)v12;
      }
      long long v16 = [NSString stringWithUTF8String:v15];
      [v173 setValue:v11 forKey:v16];

      ++v7;
      v6 += 24;
    }
    while (v8 != v7);
  }
  v172 = [MEMORY[0x1E4F1CA60] dictionary];
  char v17 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  uint64_t v18 = v17[1] - *v17;
  v182 = v17;
  if (v18)
  {
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    uint64_t v21 = v18 / 24;
    char v22 = v17 + 8;
    do
    {
      if (v20 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17[1] - *v17) >> 3))
      {
        uint64_t v164 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v164, "iterator out of range");
        v164->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
        __cxa_throw(v164, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
      }
      uint64_t v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v22, *v17 + v19);
      size_t v25 = E5DB::GetPortInformation((E5DB *)v23[5], v24);
      uint64_t v28 = v23[2];
      uint64_t v27 = v23 + 2;
      uint64_t v26 = v28;
      if (*((char *)v27 + 23) >= 0) {
        uint8x8_t v29 = v27;
      }
      else {
        uint8x8_t v29 = (uint64_t *)v26;
      }
      unsigned __int8 v30 = [NSString stringWithUTF8String:v29];
      [v172 setValue:v25 forKey:v30];

      ++v20;
      v19 += 24;
      char v17 = v182;
    }
    while (v21 != v20);
  }
  v171 = [MEMORY[0x1E4F1CA60] dictionary];
  unint64_t v31 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v168 + 56))(v168);
  uint64_t v32 = v31[1] - *v31;
  v177 = v31;
  if (v32)
  {
    uint64_t v33 = 0;
    unint64_t v34 = 0;
    uint64_t v35 = v32 / 24;
    unint64_t v36 = v31 + 8;
    do
    {
      if (v34 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31[1] - *v31) >> 3))
      {
        v165 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v165, "iterator out of range");
        v165->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
        __cxa_throw(v165, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
      }
      int8x8_t v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v36, *v31 + v33);
      uint8x8_t v39 = E5DB::GetPortInformation((E5DB *)v37[5], v38);
      uint64_t v42 = v37[2];
      unint64_t v41 = v37 + 2;
      uint64_t v40 = v42;
      if (*((char *)v41 + 23) >= 0) {
        unint64_t v43 = v41;
      }
      else {
        unint64_t v43 = (uint64_t *)v40;
      }
      int v44 = [NSString stringWithUTF8String:v43];
      [v171 setValue:v39 forKey:v44];

      ++v34;
      v33 += 24;
      unint64_t v31 = v177;
    }
    while (v35 != v34);
  }
  v178 = [MEMORY[0x1E4F1CA60] dictionary];
  v170 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v45 = (void **)(*(uint64_t (**)(uint64_t))(*(void *)v168 + 32))(v168);
  uint64_t v46 = (*(uint64_t (**)(void))(*(void *)**v45 + 16))(**v45);
  int v47 = *(const void ***)v46;
  v169 = *(const void ***)(v46 + 8);
  if (*(const void ***)v46 != v169)
  {
    v184 = v182 + 3;
    uint64_t v185 = v4 + 3;
    v183 = v177 + 3;
    while (2)
    {
      v174 = v47;
      int v48 = *v47;
      v176 = [MEMORY[0x1E4F1CA60] dictionary];
      uint64_t v49 = (*(uint64_t (**)(const void *))(*(void *)v48 + 24))(v48);
      if (*(char *)(v49 + 23) >= 0) {
        uint64_t v50 = v49;
      }
      else {
        uint64_t v50 = *(void *)v49;
      }
      char v51 = [NSString stringWithUTF8String:v50];
      [v176 setValue:v51 forKey:@"Op Name"];

      v181 = [MEMORY[0x1E4F1CA48] array];
      v175 = v48;
      long long v52 = (void *)(*(uint64_t (**)(const void *))(*(void *)v48 + 32))(v48);
      uint64_t v53 = v52[1] - *v52;
      if (v53)
      {
        uint64_t v54 = 0;
        unint64_t v55 = 0;
        uint64_t v56 = v53 / 24;
        do
        {
          if (v55 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52[1] - *v52) >> 3))
          {
            v160 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v160, "iterator out of range");
            v160->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
            __cxa_throw(v160, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
          }
          uint64_t v57 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v52 + 8, *v52 + v54);
          uint64_t v58 = (uint64_t)(v57 + 2);
          if (*((char *)v57 + 39) >= 0) {
            unsigned int v59 = v57 + 2;
          }
          else {
            unsigned int v59 = (uint64_t *)v57[2];
          }
          int v60 = [NSString stringWithUTF8String:v59];
          [v181 addObject:v60];

          uint64_t v61 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v185, v58);
          if (!v61 || v61[5] == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[1] - *v4) >> 3))
          {
            uint64_t v62 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v184, v58);
            if (!v62 || v62[5] == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v182[1] - *v182) >> 3))
            {
              id v63 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v183, v58);
              if (!v63 || v63[5] == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v177[1] - *v177) >> 3))
              {
                id v65 = E5DB::GetPortInformation((E5DB *)v57[5], v64);
                if (*((char *)v57 + 39) >= 0) {
                  uint64_t v66 = v57 + 2;
                }
                else {
                  uint64_t v66 = (uint64_t *)v57[2];
                }
                size_t v67 = [NSString stringWithUTF8String:v66];
                [v178 setValue:v65 forKey:v67];
              }
            }
          }
          ++v55;
          v54 += 24;
        }
        while (v56 != v55);
      }
      v180 = [MEMORY[0x1E4F1CA48] array];
      unsigned int v68 = (void *)(*(uint64_t (**)(const void *))(*(void *)v175 + 40))(v175);
      uint64_t v69 = v68[1] - *v68;
      if (v69)
      {
        uint64_t v70 = 0;
        unint64_t v71 = 0;
        uint64_t v72 = v69 / 24;
        do
        {
          if (v71 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68[1] - *v68) >> 3))
          {
            v161 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v161, "iterator out of range");
            v161->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
            __cxa_throw(v161, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
          }
          uint64_t v73 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v68 + 8, *v68 + v70);
          uint64_t v74 = (uint64_t)(v73 + 2);
          if (*((char *)v73 + 39) >= 0) {
            int v75 = v73 + 2;
          }
          else {
            int v75 = (uint64_t *)v73[2];
          }
          uint64_t v76 = [NSString stringWithUTF8String:v75];
          [v180 addObject:v76];

          int v77 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v185, v74);
          if (!v77 || v77[5] == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[1] - *v4) >> 3))
          {
            int64_t v78 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v184, v74);
            if (!v78 || v78[5] == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v182[1] - *v182) >> 3))
            {
              int v79 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v183, v74);
              if (!v79 || v79[5] == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v177[1] - *v177) >> 3))
              {
                unsigned int v81 = E5DB::GetPortInformation((E5DB *)v73[5], v80);
                if (*((char *)v73 + 39) >= 0) {
                  unsigned int v82 = v73 + 2;
                }
                else {
                  unsigned int v82 = (uint64_t *)v73[2];
                }
                uint64_t v83 = [NSString stringWithUTF8String:v82];
                [v178 setValue:v81 forKey:v83];
              }
            }
          }
          ++v71;
          v70 += 24;
        }
        while (v72 != v71);
      }
      v179 = [MEMORY[0x1E4F1CA48] array];
      std::string v84 = (void *)(*(uint64_t (**)(const void *))(*(void *)v175 + 48))(v175);
      uint64_t v85 = v84[1] - *v84;
      if (v85)
      {
        uint64_t v86 = 0;
        unint64_t v87 = 0;
        uint64_t v88 = v85 / 24;
        do
        {
          if (v87 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v84[1] - *v84) >> 3))
          {
            v162 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v162, "iterator out of range");
            v162->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
            __cxa_throw(v162, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
          }
          uint64_t v89 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v84 + 8, *v84 + v86);
          uint64_t v90 = (uint64_t)(v89 + 2);
          if (*((char *)v89 + 39) >= 0) {
            uint64_t v91 = v89 + 2;
          }
          else {
            uint64_t v91 = (uint64_t *)v89[2];
          }
          char v92 = [NSString stringWithUTF8String:v91];
          [v179 addObject:v92];

          uint64_t v93 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v185, v90);
          if (!v93 || v93[5] == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[1] - *v4) >> 3))
          {
            long long v94 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v184, v90);
            if (!v94 || v94[5] == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v182[1] - *v182) >> 3))
            {
              uint64_t v95 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v183, v90);
              if (!v95 || v95[5] == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v177[1] - *v177) >> 3))
              {
                uint64_t v97 = E5DB::GetPortInformation((E5DB *)v89[5], v96);
                if (*((char *)v89 + 39) >= 0) {
                  uint64_t v98 = v89 + 2;
                }
                else {
                  uint64_t v98 = (uint64_t *)v89[2];
                }
                char v99 = [NSString stringWithUTF8String:v98];
                [v178 setValue:v97 forKey:v99];
              }
            }
          }
          ++v87;
          v86 += 24;
        }
        while (v88 != v87);
      }
      uint64_t v100 = [MEMORY[0x1E4F1CA60] dictionary];
      switch((*(unsigned int (**)(const void *))(*(void *)v175 + 16))(v175))
      {
        case 1u:
          E5RT::E5Operation::GetOperationAttributes<AneInferenceOpT>(v175, &v190);
          [v100 setValue:@"ANE" forKey:@"Type"];
          if (*(char *)(v190 + 47) >= 0) {
            uint64_t v101 = v190 + 24;
          }
          else {
            uint64_t v101 = *(void *)(v190 + 24);
          }
          char v102 = [NSString stringWithUTF8String:v101];
          [v100 setValue:v102 forKey:@"Procedure Name"];

          memset(&v189, 0, sizeof(v189));
          uint64_t v103 = *(unsigned __int8 *)(a2 + 23);
          if ((v103 & 0x80u) == 0) {
            long long v104 = (std::string *)a2;
          }
          else {
            long long v104 = *(std::string **)a2;
          }
          if ((v103 & 0x80u) != 0) {
            uint64_t v103 = *(void *)(a2 + 8);
          }
          std::string::append[abi:ne180100]<char const*,0>(&v189.__pn_, v104, (std::string *)((char *)v104 + v103));
          memset(&v187, 0, sizeof(v187));
          char v105 = *(unsigned char *)(v190 + 23);
          if (v105 >= 0) {
            char v106 = (std::string *)v190;
          }
          else {
            char v106 = *(std::string **)v190;
          }
          if (v105 >= 0) {
            uint64_t v107 = *(unsigned __int8 *)(v190 + 23);
          }
          else {
            uint64_t v107 = *(void *)(v190 + 8);
          }
          std::string::append[abi:ne180100]<char const*,0>(&v187, v106, (std::string *)((char *)v106 + v107));
          std::__fs::filesystem::path::__string_view v108 = std::__fs::filesystem::path::__parent_path(&v189);
          if (v108.__size_ >= 0x7FFFFFFFFFFFFFF8) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v108.__size_ >= 0x17)
          {
            std::basic_string_view<_CharT, _Traits>::size_type v129 = (v108.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v108.__size_ | 7) != 0x17) {
              std::basic_string_view<_CharT, _Traits>::size_type v129 = v108.__size_ | 7;
            }
            std::basic_string_view<_CharT, _Traits>::size_type v130 = v129 + 1;
            p_dst = operator new(v129 + 1);
            __dst.__r_.__value_.__l.__size_ = v108.__size_;
            __dst.__r_.__value_.__r.__words[2] = v130 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          }
          else
          {
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v108.__size_;
            p_dst = &__dst;
            if (!v108.__size_) {
              goto LABEL_139;
            }
          }
          memmove(p_dst, v108.__data_, v108.__size_);
LABEL_139:
          *((unsigned char *)p_dst + v108.__size_) = 0;
          __p.__pn_ = __dst;
          std::__fs::filesystem::relative[abi:ne180100]((const std::__fs::filesystem::path *)&v187, &__p, &v188);
          if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__pn_.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v187.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_141:
              if ((SHIBYTE(v188.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_142;
              }
              goto LABEL_145;
            }
          }
          else if ((SHIBYTE(v187.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_141;
          }
          operator delete(v187.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v188.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_142:
            std::string __dst = v188.__pn_;
            goto LABEL_146;
          }
LABEL_145:
          std::string::__init_copy_ctor_external(&__dst, v188.__pn_.__r_.__value_.__l.__data_, v188.__pn_.__r_.__value_.__l.__size_);
LABEL_146:
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v131 = &__dst;
          }
          else {
            unint64_t v131 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          BOOL v132 = [NSString stringWithUTF8String:v131];
          [v100 setValue:v132 forKey:@"Program URL"];

          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v188.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_151:
              if ((SHIBYTE(v189.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_152;
              }
              goto LABEL_156;
            }
          }
          else if ((SHIBYTE(v188.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_151;
          }
          operator delete(v188.__pn_.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v189.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_152:
            std::string::size_type size = v191;
            if (v191) {
              goto LABEL_168;
            }
            goto LABEL_170;
          }
LABEL_156:
          operator delete(v189.__pn_.__r_.__value_.__l.__data_);
          std::string::size_type size = v191;
          if (v191) {
            goto LABEL_168;
          }
LABEL_170:
          v139 = [v181 sortedArrayUsingSelector:sel_localizedCaseInsensitiveCompare_];
          [v176 setValue:v139 forKey:@"Op Inputs"];

          char v140 = [v180 sortedArrayUsingSelector:sel_localizedCaseInsensitiveCompare_];
          [v176 setValue:v140 forKey:@"Op Outputs"];

          uint64_t v141 = [v179 sortedArrayUsingSelector:sel_localizedCaseInsensitiveCompare_];
          [v176 setValue:v141 forKey:@"Op InOuts"];

          [v176 setValue:v100 forKey:@"Op Details"];
          [v170 addObject:v176];

          int v47 = v174 + 2;
          if (v174 + 2 == v169) {
            break;
          }
          continue;
        case 2u:
          [v100 setValue:@"ClassicCPU" forKey:@"Type"];
          E5RT::E5Operation::GetOperationAttributes<CpuInferenceOpT>(v175, &__dst);
          uint64_t v115 = NSString;
          if (*(char *)(__dst.__r_.__value_.__r.__words[0] + 47) >= 0) {
            std::string::size_type v116 = __dst.__r_.__value_.__r.__words[0] + 24;
          }
          else {
            std::string::size_type v116 = *(void *)(__dst.__r_.__value_.__r.__words[0] + 24);
          }
          goto LABEL_106;
        case 3u:
          [v100 setValue:@"E5Cast" forKey:@"Type"];
          E5RT::E5Operation::GetOperationAttributes<CastOpT>(v175, &v189);
          std::locale v119 = sub_192469C1C(*(_DWORD *)v189.__pn_.__r_.__value_.__l.__data_);
          [v100 setValue:v119 forKey:@"Execution Device"];

          E5Common::StringUtils::IntsVectorToString<unsigned long long>((std::string *)(v189.__pn_.__r_.__value_.__r.__words[0] + 8), &__dst);
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v120 = &__dst;
          }
          else {
            uint64_t v120 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          unsigned __int8 v121 = [NSString stringWithUTF8String:v120];
          [v100 setValue:v121 forKey:@"Output Alignments"];
          goto LABEL_127;
        case 8u:
          [v100 setValue:@"MPSGraph" forKey:@"Type"];
          E5RT::E5Operation::GetOperationAttributes<MpsGraphInferenceOpT>(v175, &v189);
          if (*(char *)(v189.__pn_.__r_.__value_.__r.__words[0] + 47) >= 0) {
            std::string::size_type v122 = v189.__pn_.__r_.__value_.__r.__words[0] + 24;
          }
          else {
            std::string::size_type v122 = *(void *)(v189.__pn_.__r_.__value_.__r.__words[0] + 24);
          }
          uint64_t v123 = [NSString stringWithUTF8String:v122];
          [v100 setValue:v123 forKey:@"Function Name"];

          std::to_string(&__dst, *(void *)(v189.__pn_.__r_.__value_.__r.__words[0] + 48));
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v124 = &__dst;
          }
          else {
            uint64_t v124 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          uint64_t v125 = [NSString stringWithUTF8String:v124];
          [v100 setValue:v125 forKey:@"Registry ID"];

          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          std::to_string(&__dst, *(unsigned __int8 *)(v189.__pn_.__r_.__value_.__r.__words[0] + 56));
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v126 = &__dst;
          }
          else {
            v126 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          unsigned __int8 v121 = [NSString stringWithUTF8String:v126];
          [v100 setValue:v121 forKey:@"Enable Shader Profiling"];
LABEL_127:

          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            std::string::size_type size = (std::__shared_weak_count *)v189.__pn_.__r_.__value_.__l.__size_;
            if (v189.__pn_.__r_.__value_.__l.__size_) {
              goto LABEL_168;
            }
          }
          else
          {
            std::string::size_type size = (std::__shared_weak_count *)v189.__pn_.__r_.__value_.__l.__size_;
            if (v189.__pn_.__r_.__value_.__l.__size_) {
              goto LABEL_168;
            }
          }
          goto LABEL_170;
        case 0xBu:
          E5RT::E5Operation::GetOperationAttributes<EirInferenceOpT>(v175, &__dst);
          uint64_t v128 = sub_192469C1C(*(_DWORD *)(__dst.__r_.__value_.__r.__words[0] + 24));
          [v100 setValue:v128 forKey:@"Backend Requested"];

          uint64_t v115 = NSString;
          if (*(char *)(__dst.__r_.__value_.__r.__words[0] + 55) >= 0) {
            std::string::size_type v116 = __dst.__r_.__value_.__r.__words[0] + 32;
          }
          else {
            std::string::size_type v116 = *(void *)(__dst.__r_.__value_.__r.__words[0] + 32);
          }
LABEL_106:
          int v117 = [v115 stringWithUTF8String:v116];
          [v100 setValue:v117 forKey:@"configuration"];
          goto LABEL_167;
        case 0xCu:
          [v100 setValue:@"BNNS" forKey:@"Type"];
          E5RT::E5Operation::GetOperationAttributes<BnnsCpuInferenceOpT>(v175, &__dst);
          std::string::size_type v110 = __dst.__r_.__value_.__r.__words[0];
          int v111 = *__dst.__r_.__value_.__l.__data_;
          if (v111 == 1)
          {
            v133 = *(uint64_t **)(__dst.__r_.__value_.__r.__words[0] + 8);
            if (*((char *)v133 + 23) >= 0) {
              uint64_t v134 = *(void *)(__dst.__r_.__value_.__r.__words[0] + 8);
            }
            else {
              uint64_t v134 = *v133;
            }
            uint64_t v114 = [NSString stringWithUTF8String:v134];
            [v100 setValue:v114 forKey:@"MIL Program URL"];
          }
          else
          {
            if (v111 != 2) {
              goto LABEL_163;
            }
            char v112 = *(uint64_t **)(__dst.__r_.__value_.__r.__words[0] + 8);
            if (*((char *)v112 + 23) >= 0) {
              uint64_t v113 = *(void *)(__dst.__r_.__value_.__r.__words[0] + 8);
            }
            else {
              uint64_t v113 = *v112;
            }
            uint64_t v114 = [NSString stringWithUTF8String:v113];
            [v100 setValue:v114 forKey:@"BNNSIR URL"];
          }

          std::string::size_type v110 = __dst.__r_.__value_.__r.__words[0];
LABEL_163:
          std::string::size_type v137 = *(void *)(v110 + 16);
          std::string::size_type v135 = v110 + 16;
          std::string::size_type v136 = v137;
          if (*(char *)(v135 + 23) >= 0) {
            std::string::size_type v138 = v135;
          }
          else {
            std::string::size_type v138 = v136;
          }
          int v117 = [NSString stringWithUTF8String:v138];
          [v100 setValue:v117 forKey:@"Function Name"];
LABEL_167:

          std::string::size_type size = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
          if (__dst.__r_.__value_.__l.__size_)
          {
LABEL_168:
            if (!atomic_fetch_add(&size->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
          goto LABEL_170;
        case 0xEu:
          [v100 setValue:@"E5MinimalCPU" forKey:@"Type"];
          E5RT::E5Operation::GetOperationAttributes<E5MinimalCpuOpT>(v175, &__dst);
          if (*(char *)(__dst.__r_.__value_.__r.__words[0] + 23) >= 0) {
            std::string::size_type v118 = __dst.__r_.__value_.__r.__words[0];
          }
          else {
            std::string::size_type v118 = *(void *)__dst.__r_.__value_.__l.__data_;
          }
          int v117 = [NSString stringWithUTF8String:v118];
          [v100 setValue:v117 forKey:@"Model Assets URL"];
          goto LABEL_167;
        default:
          goto LABEL_170;
      }
      break;
    }
  }
  long long v142 = [MEMORY[0x1E4F1CA60] dictionary];
  uint64_t v143 = (*(uint64_t (**)(uint64_t))(*(void *)v168 + 16))(v168);
  if (*(char *)(v143 + 23) >= 0) {
    uint64_t v144 = v143;
  }
  else {
    uint64_t v144 = *(void *)v143;
  }
  uint64_t v145 = [NSString stringWithUTF8String:v144];
  [v142 setValue:v145 forKey:@"Function Name"];

  [v142 setValue:v173 forKey:@"Function Inputs"];
  [v142 setValue:v172 forKey:@"Function Outputs"];
  [v142 setValue:v171 forKey:@"Function InOuts"];
  if (a3) {
    [v142 setValue:v178 forKey:@"Function Intermediates"];
  }
  [v142 setValue:v170 forKey:@"Function Operations"];
  id v146 = v173;
  id v147 = v172;
  id v148 = v171;
  id v149 = v178;
  v150 = [MEMORY[0x1E4F1CA60] dictionary];
  unint64_t v151 = sub_192469E64(v146);
  unint64_t v152 = sub_192469E64(v147);
  unint64_t v153 = sub_192469E64(v148);
  unint64_t v154 = sub_192469E64(v149);
  v155 = sub_192465744(v151);
  [v150 setValue:v155 forKey:@"Inputs"];

  int v156 = sub_192465744(v152);
  [v150 setValue:v156 forKey:@"Outputs"];

  v157 = sub_192465744(v153);
  [v150 setValue:v157 forKey:@"InOuts"];

  v158 = sub_192465744(v154);
  [v150 setValue:v158 forKey:@"Intermediates"];

  [v142 setValue:v150 forKey:@"Memory Usage"];

  return v142;
}

void sub_192463C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,void *a23,void *a24,void *a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v44 - 112);
  _Unwind_Resume(a1);
}

id E5DB::GetE5ProgramInformation(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = [MEMORY[0x1E4F1CA60] dictionary];
  std::__fs::filesystem::path __p = 0;
  uint64_t v38 = 0;
  unint64_t v39 = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 32))(&v36, a1, a2);
    unint64_t v7 = v38;
    if ((unint64_t)v38 >= v39)
    {
      unint64_t v9 = std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>((char **)&__p, (uint64_t)&v36);
      uint64_t v10 = (std::__shared_weak_count *)*((void *)&v36 + 1);
      uint64_t v38 = v9;
      if (*((void *)&v36 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v36 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    else
    {
      *(_OWORD *)uint64_t v38 = v36;
      uint64_t v38 = v7 + 16;
    }
  }
  else
  {
    uint64_t v8 = (void **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    if (&__p != v8) {
      std::vector<std::shared_ptr<E5RT::E5Function const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<E5RT::E5Function const>*,std::shared_ptr<E5RT::E5Function const>*>((uint64_t)&__p, *v8, v8[1], ((unsigned char *)v8[1] - (unsigned char *)*v8) >> 4);
    }
  }
  unint64_t v11 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v12 = (uint64_t *)__p;
  uint64_t v13 = v38;
  if (__p != v38)
  {
    do
    {
      uint64_t v14 = (*(uint64_t (**)(void))(*(void *)*v12 + 16))();
      if (*(char *)(v14 + 23) >= 0) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = *(void *)v14;
      }
      long long v16 = [NSString stringWithUTF8String:v15];
      [v11 addObject:v16];

      uint64_t v17 = *v12;
      uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
      uint64_t v19 = E5DB::GetE5FunctionInformation(v17, v18, a3);
      if (*(char *)(v14 + 23) >= 0) {
        uint64_t v20 = v14;
      }
      else {
        uint64_t v20 = *(void *)v14;
      }
      uint64_t v21 = [NSString stringWithUTF8String:v20];
      [v6 setObject:v19 forKeyedSubscript:v21];

      v12 += 2;
    }
    while (v12 != (uint64_t *)v13);
  }
  char v22 = [v11 sortedArrayUsingSelector:sel_localizedCaseInsensitiveCompare_];
  [v6 setValue:v22 forKey:@"Public Functions"];

  (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 48))(&v36, a1);
  if ((void)v36)
  {
    uint64_t v23 = [MEMORY[0x1E4F1CA60] dictionary];
    for (uint64_t i = *(uint64_t ***)((*(uint64_t (**)(void))(*(void *)v36 + 16))(v36) + 16); i; uint64_t i = (uint64_t **)*i)
    {
      if (*((char *)i + 63) >= 0) {
        uint64_t v25 = (uint64_t)(i + 5);
      }
      else {
        uint64_t v25 = (uint64_t)i[5];
      }
      uint64_t v26 = [NSString stringWithUTF8String:v25];
      if (*((char *)i + 39) >= 0) {
        uint64_t v27 = (uint64_t)(i + 2);
      }
      else {
        uint64_t v27 = (uint64_t)i[2];
      }
      uint64_t v28 = [NSString stringWithUTF8String:v27];
      [v23 setObject:v26 forKeyedSubscript:v28];
    }
    [v6 setValue:v23 forKey:@"Build Information"];
  }
  id v29 = v6;
  unsigned __int8 v30 = (std::__shared_weak_count *)*((void *)&v36 + 1);
  if (*((void *)&v36 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v36 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }

  unint64_t v31 = (char *)__p;
  if (__p)
  {
    uint64_t v32 = v38;
    uint64_t v33 = __p;
    if (v38 != __p)
    {
      do
      {
        unint64_t v34 = (std::__shared_weak_count *)*((void *)v32 - 1);
        if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
        v32 -= 16;
      }
      while (v32 != v31);
      uint64_t v33 = __p;
    }
    uint64_t v38 = v31;
    operator delete(v33);
  }

  return v29;
}

void sub_192464680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100](&a12);

  _Unwind_Resume(a1);
}

void sub_1924646A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100](&a12);

  _Unwind_Resume(a1);
}

void sub_192464764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);

  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void E5DB::GetAOTSegmentationAnalytics(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  char v3 = 1;
  E5RT::E5Program::LoadProgram(a1, (uint64_t)&v2);
}

void sub_1924648CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<E5RT::ProgramLibraryPriv>::~unique_ptr[abi:ne180100]((E5RT::ProgramLibraryPriv **)va);
  uint64_t v4 = *(void *)(v2 - 32);
  *(void *)(v2 - 32) = 0;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

E5RT::ProgramLibraryPriv **std::unique_ptr<E5RT::ProgramLibraryPriv>::~unique_ptr[abi:ne180100](E5RT::ProgramLibraryPriv **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    E5RT::ProgramLibraryPriv::~ProgramLibraryPriv(v2);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

uint64_t DG::Tab(DG *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v4);
  for (; this; this = (DG *)((char *)this - 1))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"    ", 4);
  std::stringbuf::str();
  v4[0] = *MEMORY[0x1E4FBA408];
  uint64_t v2 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v5[0] = v2;
  v5[1] = MEMORY[0x1E4FBA470] + 16;
  if (v6 < 0) {
    operator delete((void *)v5[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x192FF15B0](&v7);
}

void sub_192464B40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192464B54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t DG::NL(DG *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  if (this)
  {
    uint64_t v2 = (std::locale::id *)MEMORY[0x1E4FBA258];
    do
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(v7[0] - 24)));
      char v3 = std::locale::use_facet(&v10, v2);
      ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
      std::locale::~locale(&v10);
      std::ostream::put();
      std::ostream::flush();
      this = (DG *)((char *)this - 1);
    }
    while (this);
  }
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x1E4FBA470] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x192FF15B0](&v9);
}

void sub_192464D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_192464D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::locale::~locale((std::locale *)(v9 - 72));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_192464D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void DG::Qt(DG *this@<X0>, std::string *a2@<X8>)
{
  *((unsigned char *)&v21.__r_.__value_.__s + 23) = 1;
  LOWORD(v21.__r_.__value_.__l.__data_) = 34;
  uint64_t v4 = this;
  uint64_t v5 = (const char *)[(DG *)v4 UTF8String];
  size_t v6 = strlen(v5);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (void **)operator new(v9 + 1);
    size_t v19 = v7;
    int64_t v20 = v10 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v20) = v6;
  p_dst = (void **)&__dst;
  if (v6) {
LABEL_8:
  }
    memmove(p_dst, v5, v7);
  *((unsigned char *)p_dst + v7) = 0;
  if (v20 >= 0) {
    unint64_t v11 = (const std::string::value_type *)&__dst;
  }
  else {
    unint64_t v11 = (const std::string::value_type *)__dst;
  }
  if (v20 >= 0) {
    std::string::size_type v12 = HIBYTE(v20);
  }
  else {
    std::string::size_type v12 = v19;
  }
  uint64_t v13 = std::string::append(&v21, v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  char v17 = 1;
  strcpy(__s, "\"");
  uint64_t v15 = std::string::append(&v22, __s, 1uLL);
  *a2 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (v17 < 0)
  {
    operator delete(*(void **)__s);
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v20) & 0x80000000) == 0) {
        goto LABEL_18;
      }
LABEL_22:
      operator delete(__dst);
      if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_19;
      }
LABEL_23:
      operator delete(v21.__r_.__value_.__l.__data_);
      goto LABEL_19;
    }
  }
  else if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20) < 0) {
    goto LABEL_22;
  }
LABEL_18:
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_23;
  }
LABEL_19:
}

void sub_192464F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a28);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a16);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_5:

    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(a22);

  _Unwind_Resume(a1);
}

void DG::AddOpNodeLabel(uint64_t a1, DG *a2, void *a3, void *a4)
{
  id v7 = a3;
  char v8 = [a4 objectForKey:@"Type"];
  uint64_t v9 = [NSString stringWithFormat:@"\"%@\ntype=%@\"", v7, v8];
  DG::Tab(a2);
  if ((v23 & 0x80u) == 0) {
    uint64_t v10 = v22;
  }
  else {
    uint64_t v10 = (void **)v22[0];
  }
  if ((v23 & 0x80u) == 0) {
    uint64_t v11 = v23;
  }
  else {
    uint64_t v11 = (uint64_t)v22[1];
  }
  std::string::size_type v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 16), (uint64_t)v10, v11);
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"label=", 6);
  id v14 = v9;
  uint64_t v15 = (const char *)[v14 UTF8String];
  size_t v16 = strlen(v15);
  char v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v15, v16);
  DG::NL((DG *)1);
  if ((v21 & 0x80u) == 0) {
    uint64_t v18 = __p;
  }
  else {
    uint64_t v18 = (void **)__p[0];
  }
  if ((v21 & 0x80u) == 0) {
    uint64_t v19 = v21;
  }
  else {
    uint64_t v19 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
  if ((char)v21 < 0)
  {
    operator delete(__p[0]);
    if (((char)v23 & 0x80000000) == 0) {
      goto LABEL_15;
    }
LABEL_17:
    operator delete(v22[0]);
    goto LABEL_15;
  }
  if ((char)v23 < 0) {
    goto LABEL_17;
  }
LABEL_15:
}

void sub_19246513C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }

  _Unwind_Resume(a1);
}

void DG::AddOpNode(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  DG::Tab((DG *)a2);
  if ((v47 & 0x80u) == 0) {
    uint64_t v9 = &v45;
  }
  else {
    uint64_t v9 = v45;
  }
  if ((v47 & 0x80u) == 0) {
    uint64_t v10 = v47;
  }
  else {
    uint64_t v10 = v46;
  }
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 16), (uint64_t)v9, v10);
  DG::Qt(v7, &v44);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v12 = &v44;
  }
  else {
    std::string::size_type v12 = (std::string *)v44.__r_.__value_.__r.__words[0];
  }
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v44.__r_.__value_.__l.__size_;
  }
  id v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, size);
  uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" [", 2);
  DG::NL((DG *)1);
  if ((v43 & 0x80u) == 0) {
    size_t v16 = __p;
  }
  else {
    size_t v16 = (void **)__p[0];
  }
  if ((v43 & 0x80u) == 0) {
    uint64_t v17 = v43;
  }
  else {
    uint64_t v17 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
  if (((char)v43 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_21;
    }
LABEL_80:
    operator delete(v44.__r_.__value_.__l.__data_);
    if (((char)v47 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_81;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_80;
  }
LABEL_21:
  if (((char)v47 & 0x80000000) == 0) {
    goto LABEL_22;
  }
LABEL_81:
  operator delete(v45);
LABEL_22:
  DG::Tab((DG *)(a2 + 1));
  if ((v47 & 0x80u) == 0) {
    uint64_t v18 = &v45;
  }
  else {
    uint64_t v18 = v45;
  }
  if ((v47 & 0x80u) == 0) {
    uint64_t v19 = v47;
  }
  else {
    uint64_t v19 = v46;
  }
  int64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 16), (uint64_t)v18, v19);
  unsigned __int8 v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"shape=box", 9);
  DG::NL((DG *)1);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v22 = &v44;
  }
  else {
    std::string v22 = (std::string *)v44.__r_.__value_.__r.__words[0];
  }
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v23 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v23 = v44.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v44.__r_.__value_.__l.__data_);
    if (((char)v47 & 0x80000000) == 0) {
      goto LABEL_36;
    }
  }
  else if (((char)v47 & 0x80000000) == 0)
  {
    goto LABEL_36;
  }
  operator delete(v45);
LABEL_36:
  DG::Tab((DG *)(a2 + 1));
  if ((v47 & 0x80u) == 0) {
    uint64_t v24 = &v45;
  }
  else {
    uint64_t v24 = v45;
  }
  if ((v47 & 0x80u) == 0) {
    uint64_t v25 = v47;
  }
  else {
    uint64_t v25 = v46;
  }
  uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 16), (uint64_t)v24, v25);
  uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"color=\"lightblue3\"", 18);
  DG::NL((DG *)1);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v28 = &v44;
  }
  else {
    uint64_t v28 = (std::string *)v44.__r_.__value_.__r.__words[0];
  }
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v29 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v29 = v44.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v44.__r_.__value_.__l.__data_);
    if (((char)v47 & 0x80000000) == 0) {
      goto LABEL_50;
    }
  }
  else if (((char)v47 & 0x80000000) == 0)
  {
    goto LABEL_50;
  }
  operator delete(v45);
LABEL_50:
  DG::Tab((DG *)(a2 + 1));
  if ((v47 & 0x80u) == 0) {
    unsigned __int8 v30 = &v45;
  }
  else {
    unsigned __int8 v30 = v45;
  }
  if ((v47 & 0x80u) == 0) {
    uint64_t v31 = v47;
  }
  else {
    uint64_t v31 = v46;
  }
  uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 16), (uint64_t)v30, v31);
  uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"style=filled", 12);
  DG::NL((DG *)1);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v34 = &v44;
  }
  else {
    unint64_t v34 = (std::string *)v44.__r_.__value_.__r.__words[0];
  }
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v35 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v35 = v44.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v44.__r_.__value_.__l.__data_);
    if (((char)v47 & 0x80000000) == 0) {
      goto LABEL_64;
    }
  }
  else if (((char)v47 & 0x80000000) == 0)
  {
    goto LABEL_64;
  }
  operator delete(v45);
LABEL_64:
  DG::AddOpNodeLabel(a1, (DG *)(a2 + 1), v7, v8);
  DG::Tab((DG *)a2);
  if ((v47 & 0x80u) == 0) {
    long long v36 = &v45;
  }
  else {
    long long v36 = v45;
  }
  if ((v47 & 0x80u) == 0) {
    uint64_t v37 = v47;
  }
  else {
    uint64_t v37 = v46;
  }
  uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 16), (uint64_t)v36, v37);
  unint64_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"]", 1);
  DG::NL((DG *)1);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v40 = &v44;
  }
  else {
    uint64_t v40 = (std::string *)v44.__r_.__value_.__r.__words[0];
  }
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v41 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v41 = v44.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, v41);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v44.__r_.__value_.__l.__data_);
    if (((char)v47 & 0x80000000) == 0) {
      goto LABEL_78;
    }
LABEL_89:
    operator delete(v45);
    goto LABEL_78;
  }
  if ((char)v47 < 0) {
    goto LABEL_89;
  }
LABEL_78:
}

void sub_1924655A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if (a27 < 0)
    {
LABEL_6:
      operator delete(a22);

      _Unwind_Resume(a1);
    }
  }
  else if (a27 < 0)
  {
    goto LABEL_6;
  }

  _Unwind_Resume(a1);
}

id sub_192465744(unint64_t a1)
{
  uint64_t v2 = [NSNumber numberWithUnsignedLong:a1];
  char v3 = [v2 stringValue];
  uint64_t v4 = [v3 stringByAppendingString:@"B"];

  if (a1 <= 0x100000)
  {
    if (a1 < 0x401) {
      goto LABEL_7;
    }
    uint64_t v5 = [NSNumber numberWithUnsignedLong:a1 >> 10];
    size_t v6 = [v5 stringValue];
    uint64_t v7 = [v6 stringByAppendingString:@"KB"];
  }
  else
  {
    uint64_t v5 = [NSNumber numberWithUnsignedLong:a1 >> 20];
    size_t v6 = [v5 stringValue];
    uint64_t v7 = [v6 stringByAppendingString:@"MB"];
  }
  id v8 = (void *)v7;

  if (v8)
  {
    id v9 = [NSString stringWithFormat:@"%@ (%@)", v4, v8];

    goto LABEL_8;
  }
LABEL_7:
  id v9 = v4;
LABEL_8:

  return v9;
}

void sub_192465888(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1924658A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1924658B4(_Unwind_Exception *a1)
{
  char v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1924658CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1924658E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1924658F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_192465908(_Unwind_Exception *a1)
{
  char v3 = v1;

  _Unwind_Resume(a1);
}

void sub_192465924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void DG::AddImageLabel(uint64_t a1, DG *a2, void *a3, void *a4)
{
  id v24 = a3;
  id v7 = a4;
  id v8 = [v7 objectForKey:@"Height"];
  id v9 = [v7 objectForKey:@"Width"];
  uint64_t v10 = [NSString stringWithFormat:@"%@x%@", v8, v9];
  uint64_t v11 = [v7 objectForKey:@"Slices"];
  std::string::size_type v12 = [v7 objectForKey:@"Format"];
  uint64_t v13 = [NSString stringWithFormat:@"\"%@\nshape={%@}\nformat=%@\nslices=%@\"", v24, v10, v12, v11];
  DG::Tab(a2);
  if ((v28 & 0x80u) == 0) {
    id v14 = v27;
  }
  else {
    id v14 = (void **)v27[0];
  }
  if ((v28 & 0x80u) == 0) {
    uint64_t v15 = v28;
  }
  else {
    uint64_t v15 = (uint64_t)v27[1];
  }
  size_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 16), (uint64_t)v14, v15);
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"label=", 6);
  id v18 = v13;
  uint64_t v19 = (const char *)[v18 UTF8String];
  size_t v20 = strlen(v19);
  unsigned __int8 v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v19, v20);
  DG::NL((DG *)1);
  if ((v26 & 0x80u) == 0) {
    std::string v22 = __p;
  }
  else {
    std::string v22 = (void **)__p[0];
  }
  if ((v26 & 0x80u) == 0) {
    uint64_t v23 = v26;
  }
  else {
    uint64_t v23 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
  if ((char)v26 < 0)
  {
    operator delete(__p[0]);
    if (((char)v28 & 0x80000000) == 0) {
      goto LABEL_15;
    }
LABEL_17:
    operator delete(v27[0]);
    goto LABEL_15;
  }
  if ((char)v28 < 0) {
    goto LABEL_17;
  }
LABEL_15:
}

void sub_192465B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }

  _Unwind_Resume(a1);
}

void DG::AddPortLabel(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v12 = a3;
  id v7 = a4;
  id v8 = [v7 objectForKey:@"PortType"];
  id v9 = [v7 objectForKey:@"Description"];
  int v10 = [v8 isEqual:@"Tensor"];
  uint64_t v11 = (DG *)(a2 + 1);
  if (v10) {
    DG::AddTensorLabel(a1, v11, v12, v9);
  }
  else {
    DG::AddImageLabel(a1, v11, v12, v9);
  }
}

void sub_192465CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_192465CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_192465CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void DG::AddIONode(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v13 = a3;
  id v14 = a4;
  id v91 = a5;
  id v90 = a6;
  id v89 = a7;
  DG::Tab((DG *)a2);
  if ((v97 & 0x80u) == 0) {
    uint64_t v15 = &v95;
  }
  else {
    uint64_t v15 = v95;
  }
  if ((v97 & 0x80u) == 0) {
    uint64_t v16 = v97;
  }
  else {
    uint64_t v16 = v96;
  }
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 16), (uint64_t)v15, v16);
  DG::Qt(v13, &v94);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    id v18 = &v94;
  }
  else {
    id v18 = (std::string *)v94.__r_.__value_.__r.__words[0];
  }
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v94.__r_.__value_.__l.__size_;
  }
  size_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, size);
  unsigned __int8 v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" [", 2);
  DG::NL((DG *)1);
  if ((v93 & 0x80u) == 0) {
    std::string v22 = __p;
  }
  else {
    std::string v22 = (void **)__p[0];
  }
  if ((v93 & 0x80u) == 0) {
    uint64_t v23 = v93;
  }
  else {
    uint64_t v23 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
  if (((char)v93 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_21;
    }
LABEL_67:
    operator delete(v94.__r_.__value_.__l.__data_);
    if (((char)v97 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_68;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_67;
  }
LABEL_21:
  if (((char)v97 & 0x80000000) == 0) {
    goto LABEL_22;
  }
LABEL_68:
  operator delete(v95);
LABEL_22:
  DG::Tab((DG *)(a2 + 1));
  if ((v97 & 0x80u) == 0) {
    id v24 = &v95;
  }
  else {
    id v24 = v95;
  }
  if ((v97 & 0x80u) == 0) {
    uint64_t v25 = v97;
  }
  else {
    uint64_t v25 = v96;
  }
  unsigned __int8 v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 16), (uint64_t)v24, v25);
  uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"shape=oval", 10);
  DG::NL((DG *)1);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned __int8 v28 = &v94;
  }
  else {
    unsigned __int8 v28 = (std::string *)v94.__r_.__value_.__r.__words[0];
  }
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v29 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v29 = v94.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v94.__r_.__value_.__l.__data_);
    if (((char)v97 & 0x80000000) == 0) {
      goto LABEL_36;
    }
  }
  else if (((char)v97 & 0x80000000) == 0)
  {
    goto LABEL_36;
  }
  operator delete(v95);
LABEL_36:
  unsigned __int8 v30 = [v14 objectForKeyedSubscript:v13];
  if (v30)
  {
    DG::Tab((DG *)(a2 + 1));
    if ((v97 & 0x80u) == 0) {
      uint64_t v31 = &v95;
    }
    else {
      uint64_t v31 = v95;
    }
    if ((v97 & 0x80u) == 0) {
      uint64_t v32 = v97;
    }
    else {
      uint64_t v32 = v96;
    }
    uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 16), (uint64_t)v31, v32);
    unint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"color=\"chocolate1\"", 18);
    DG::NL((DG *)1);
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v35 = &v94;
    }
    else {
      std::string::size_type v35 = (std::string *)v94.__r_.__value_.__r.__words[0];
    }
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v36 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v36 = v94.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v35, v36);
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v94.__r_.__value_.__l.__data_);
      if (((char)v97 & 0x80000000) == 0) {
        goto LABEL_51;
      }
    }
    else if (((char)v97 & 0x80000000) == 0)
    {
      goto LABEL_51;
    }
    operator delete(v95);
LABEL_51:
    DG::Tab((DG *)(a2 + 1));
    if ((v97 & 0x80u) == 0) {
      uint64_t v37 = &v95;
    }
    else {
      uint64_t v37 = v95;
    }
    if ((v97 & 0x80u) == 0) {
      uint64_t v38 = v97;
    }
    else {
      uint64_t v38 = v96;
    }
    unint64_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 16), (uint64_t)v37, v38);
    uint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"style=filled", 12);
    DG::NL((DG *)1);
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v41 = &v94;
    }
    else {
      std::string::size_type v41 = (std::string *)v94.__r_.__value_.__r.__words[0];
    }
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v42 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v42 = v94.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v41, v42);
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v94.__r_.__value_.__l.__data_);
      if (((char)v97 & 0x80000000) == 0) {
        goto LABEL_65;
      }
    }
    else if (((char)v97 & 0x80000000) == 0)
    {
LABEL_65:
      DG::AddPortLabel(a1, a2 + 1, v13, v30);
      goto LABEL_141;
    }
    operator delete(v95);
    goto LABEL_65;
  }
  unsigned __int8 v43 = [v91 objectForKeyedSubscript:v13];
  if (!v43)
  {
    uint64_t v88 = [v90 objectForKeyedSubscript:v13];
    if (v88)
    {
      DG::Tab((DG *)(a2 + 1));
      if ((v97 & 0x80u) == 0) {
        uint64_t v56 = &v95;
      }
      else {
        uint64_t v56 = v95;
      }
      if ((v97 & 0x80u) == 0) {
        uint64_t v57 = v97;
      }
      else {
        uint64_t v57 = v96;
      }
      uint64_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 16), (uint64_t)v56, v57);
      unsigned int v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"color=\"gold\"", 12);
      DG::NL((DG *)1);
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v60 = &v94;
      }
      else {
        int v60 = (std::string *)v94.__r_.__value_.__r.__words[0];
      }
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v61 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v61 = v94.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v60, v61);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v94.__r_.__value_.__l.__data_);
      }
      if ((char)v97 < 0) {
        operator delete(v95);
      }
      DG::Tab((DG *)(a2 + 1));
      if ((v97 & 0x80u) == 0) {
        uint64_t v62 = &v95;
      }
      else {
        uint64_t v62 = v95;
      }
      if ((v97 & 0x80u) == 0) {
        uint64_t v63 = v97;
      }
      else {
        uint64_t v63 = v96;
      }
      uint64_t v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 16), (uint64_t)v62, v63);
      id v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"style=filled", 12);
      DG::NL((DG *)1);
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v66 = &v94;
      }
      else {
        uint64_t v66 = (std::string *)v94.__r_.__value_.__r.__words[0];
      }
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v67 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v67 = v94.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)v66, v67);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v94.__r_.__value_.__l.__data_);
      }
      if ((char)v97 < 0) {
        operator delete(v95);
      }
      DG::AddPortLabel(a1, a2 + 1, v13, v88);
    }
    else if (v89)
    {
      uint64_t v74 = [v89 objectForKeyedSubscript:v13];

      if (v74)
      {
        DG::Tab((DG *)(a2 + 1));
        if ((v97 & 0x80u) == 0) {
          int v75 = &v95;
        }
        else {
          int v75 = v95;
        }
        if ((v97 & 0x80u) == 0) {
          uint64_t v76 = v97;
        }
        else {
          uint64_t v76 = v96;
        }
        int v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 16), (uint64_t)v75, v76);
        int64_t v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"color=\"cyan2\"", 13);
        DG::NL((DG *)1);
        if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v79 = &v94;
        }
        else {
          int v79 = (std::string *)v94.__r_.__value_.__r.__words[0];
        }
        if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v80 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v80 = v94.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)v79, v80);
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v94.__r_.__value_.__l.__data_);
        }
        if ((char)v97 < 0) {
          operator delete(v95);
        }
        DG::Tab((DG *)(a2 + 1));
        if ((v97 & 0x80u) == 0) {
          unsigned int v81 = &v95;
        }
        else {
          unsigned int v81 = v95;
        }
        if ((v97 & 0x80u) == 0) {
          uint64_t v82 = v97;
        }
        else {
          uint64_t v82 = v96;
        }
        uint64_t v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 16), (uint64_t)v81, v82);
        std::string v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"style=filled", 12);
        DG::NL((DG *)1);
        if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v85 = &v94;
        }
        else {
          uint64_t v85 = (std::string *)v94.__r_.__value_.__r.__words[0];
        }
        if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v86 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v86 = v94.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)v85, v86);
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v94.__r_.__value_.__l.__data_);
        }
        if ((char)v97 < 0) {
          operator delete(v95);
        }
        unint64_t v87 = [v89 objectForKeyedSubscript:v13];
        DG::AddPortLabel(a1, a2 + 1, v13, v87);
      }
    }

    goto LABEL_140;
  }
  DG::Tab((DG *)(a2 + 1));
  if ((v97 & 0x80u) == 0) {
    std::string v44 = &v95;
  }
  else {
    std::string v44 = v95;
  }
  if ((v97 & 0x80u) == 0) {
    uint64_t v45 = v97;
  }
  else {
    uint64_t v45 = v96;
  }
  uint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 16), (uint64_t)v44, v45);
  unsigned __int8 v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"color=\"darkolivegreen1\"", 23);
  DG::NL((DG *)1);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v48 = &v94;
  }
  else {
    int v48 = (std::string *)v94.__r_.__value_.__r.__words[0];
  }
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v49 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v49 = v94.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)v48, v49);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v94.__r_.__value_.__l.__data_);
    if (((char)v97 & 0x80000000) == 0) {
      goto LABEL_86;
    }
  }
  else if (((char)v97 & 0x80000000) == 0)
  {
    goto LABEL_86;
  }
  operator delete(v95);
LABEL_86:
  DG::Tab((DG *)(a2 + 1));
  if ((v97 & 0x80u) == 0) {
    uint64_t v50 = &v95;
  }
  else {
    uint64_t v50 = v95;
  }
  if ((v97 & 0x80u) == 0) {
    uint64_t v51 = v97;
  }
  else {
    uint64_t v51 = v96;
  }
  long long v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 16), (uint64_t)v50, v51);
  uint64_t v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"style=filled", 12);
  DG::NL((DG *)1);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v54 = &v94;
  }
  else {
    uint64_t v54 = (std::string *)v94.__r_.__value_.__r.__words[0];
  }
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v55 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v55 = v94.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v54, v55);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v94.__r_.__value_.__l.__data_);
    if (((char)v97 & 0x80000000) == 0) {
      goto LABEL_100;
    }
LABEL_161:
    operator delete(v95);
    goto LABEL_100;
  }
  if ((char)v97 < 0) {
    goto LABEL_161;
  }
LABEL_100:
  DG::AddPortLabel(a1, a2 + 1, v13, v43);
LABEL_140:

LABEL_141:
  DG::Tab((DG *)a2);
  if ((v97 & 0x80u) == 0) {
    unsigned int v68 = &v95;
  }
  else {
    unsigned int v68 = v95;
  }
  if ((v97 & 0x80u) == 0) {
    uint64_t v69 = v97;
  }
  else {
    uint64_t v69 = v96;
  }
  uint64_t v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 16), (uint64_t)v68, v69);
  unint64_t v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"]", 1);
  DG::NL((DG *)1);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v72 = &v94;
  }
  else {
    uint64_t v72 = (std::string *)v94.__r_.__value_.__r.__words[0];
  }
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v73 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v73 = v94.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)v72, v73);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v94.__r_.__value_.__l.__data_);
    if (((char)v97 & 0x80000000) == 0) {
      goto LABEL_155;
    }
LABEL_157:
    operator delete(v95);
    goto LABEL_155;
  }
  if ((char)v97 < 0) {
    goto LABEL_157;
  }
LABEL_155:
}

void sub_1924665A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  _Unwind_Resume(a1);
}

void DG::AddOpsOrdering(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if ([v5 count] != 1)
  {
    DG::Tab((DG *)a2);
    size_t v6 = (void *)(a1 + 16);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string p = &__p;
    }
    else {
      p_std::string p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    for (unint64_t i = 0; i < [v5 count]; ++i)
    {
      int v10 = [v5 objectAtIndexedSubscript:i];
      DG::Qt(v10, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v11 = &__p;
      }
      else {
        uint64_t v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v12 = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v11, v12);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (i < [v5 count] - 1)
      {
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 4;
        strcpy((char *)&__p, " -> ");
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&__p, 4);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" [", 2);
    DG::NL((DG *)1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      id v14 = &__p;
    }
    else {
      id v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    DG::Tab((DG *)(a2 + 1));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v16 = &__p;
    }
    else {
      uint64_t v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v17 = __p.__r_.__value_.__l.__size_;
    }
    id v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v16, v17);
    uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"style=\"dotted\"", 14);
    DG::NL((DG *)1);
    if ((v30 & 0x80u) == 0) {
      size_t v20 = &v28;
    }
    else {
      size_t v20 = v28;
    }
    if ((v30 & 0x80u) == 0) {
      uint64_t v21 = v30;
    }
    else {
      uint64_t v21 = v29;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
    if ((char)v30 < 0)
    {
      operator delete(v28);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_46;
      }
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_46:
    DG::Tab((DG *)a2);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v22 = &__p;
    }
    else {
      std::string v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v23 = __p.__r_.__value_.__l.__size_;
    }
    id v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v22, v23);
    uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"]", 1);
    DG::NL((DG *)1);
    if ((v30 & 0x80u) == 0) {
      unsigned __int8 v26 = &v28;
    }
    else {
      unsigned __int8 v26 = v28;
    }
    if ((v30 & 0x80u) == 0) {
      uint64_t v27 = v30;
    }
    else {
      uint64_t v27 = v29;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
    if ((char)v30 < 0)
    {
      operator delete(v28);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_60;
      }
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_60;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_60:
}

void sub_192466AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);

  _Unwind_Resume(a1);
}

void sub_192466BD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_192466BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_192466C20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_192466C30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void DG::AddLegend(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  DG::Tab((DG *)a2);
  id v9 = (void *)(a1 + 16);
  if ((v103 & 0x80u) == 0) {
    int v10 = &v101;
  }
  else {
    int v10 = v101;
  }
  if ((v103 & 0x80u) == 0) {
    uint64_t v11 = v103;
  }
  else {
    uint64_t v11 = v102;
  }
  std::string::size_type v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Legend [shape=none, margin=0, label=<", 37);
  DG::NL((DG *)1);
  if ((v100 & 0x80u) == 0) {
    p_std::string p = &__p;
  }
  else {
    p_std::string p = __p;
  }
  if ((v100 & 0x80u) == 0) {
    uint64_t v15 = v100;
  }
  else {
    uint64_t v15 = v99;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)p_p, v15);
  if ((char)v100 < 0)
  {
    operator delete(__p);
    if (((char)v103 & 0x80000000) == 0) {
      goto LABEL_15;
    }
  }
  else if (((char)v103 & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v101);
LABEL_15:
  DG::Tab((DG *)(a2 + 1));
  if ((v103 & 0x80u) == 0) {
    uint64_t v16 = &v101;
  }
  else {
    uint64_t v16 = v101;
  }
  if ((v103 & 0x80u) == 0) {
    uint64_t v17 = v103;
  }
  else {
    uint64_t v17 = v102;
  }
  id v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v16, v17);
  uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"<TABLE BORDER=\"0\" CELLBORDER=\"1\" CELLSPACING=\"0\" CELLPADDING=\"8\">", 65);
  DG::NL((DG *)1);
  if ((v100 & 0x80u) == 0) {
    size_t v20 = &__p;
  }
  else {
    size_t v20 = __p;
  }
  if ((v100 & 0x80u) == 0) {
    uint64_t v21 = v100;
  }
  else {
    uint64_t v21 = v99;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
  if ((char)v100 < 0)
  {
    operator delete(__p);
    if (((char)v103 & 0x80000000) == 0) {
      goto LABEL_29;
    }
  }
  else if (((char)v103 & 0x80000000) == 0)
  {
    goto LABEL_29;
  }
  operator delete(v101);
LABEL_29:
  DG::Tab((DG *)(a2 + 2));
  if ((v103 & 0x80u) == 0) {
    std::string v22 = &v101;
  }
  else {
    std::string v22 = v101;
  }
  if ((v103 & 0x80u) == 0) {
    uint64_t v23 = v103;
  }
  else {
    uint64_t v23 = v102;
  }
  id v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v22, v23);
  uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"<TR> <TD COLSPAN=\"2\"><B>Legend</B></TD> </TR>", 45);
  DG::NL((DG *)1);
  if ((v100 & 0x80u) == 0) {
    unsigned __int8 v26 = &__p;
  }
  else {
    unsigned __int8 v26 = __p;
  }
  if ((v100 & 0x80u) == 0) {
    uint64_t v27 = v100;
  }
  else {
    uint64_t v27 = v99;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
  if ((char)v100 < 0)
  {
    operator delete(__p);
    if (((char)v103 & 0x80000000) == 0) {
      goto LABEL_43;
    }
  }
  else if (((char)v103 & 0x80000000) == 0)
  {
    goto LABEL_43;
  }
  operator delete(v101);
LABEL_43:
  DG::Tab((DG *)(a2 + 2));
  if ((v103 & 0x80u) == 0) {
    unsigned __int8 v28 = &v101;
  }
  else {
    unsigned __int8 v28 = v101;
  }
  if ((v103 & 0x80u) == 0) {
    uint64_t v29 = v103;
  }
  else {
    uint64_t v29 = v102;
  }
  unsigned __int8 v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v28, v29);
  uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"<TR> <TD>Platform</TD> <TD>", 27);
  id v32 = v8;
  uint64_t v33 = (const char *)[v32 UTF8String];
  size_t v34 = strlen(v33);
  std::string::size_type v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v33, v34);
  std::string::size_type v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"</TD> </TR>", 11);
  DG::NL((DG *)1);
  if ((v100 & 0x80u) == 0) {
    uint64_t v37 = &__p;
  }
  else {
    uint64_t v37 = __p;
  }
  if ((v100 & 0x80u) == 0) {
    uint64_t v38 = v100;
  }
  else {
    uint64_t v38 = v99;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
  if ((char)v100 < 0)
  {
    operator delete(__p);
    if (((char)v103 & 0x80000000) == 0) {
      goto LABEL_57;
    }
  }
  else if (((char)v103 & 0x80000000) == 0)
  {
    goto LABEL_57;
  }
  operator delete(v101);
LABEL_57:
  DG::Tab((DG *)(a2 + 2));
  if ((v103 & 0x80u) == 0) {
    unint64_t v39 = &v101;
  }
  else {
    unint64_t v39 = v101;
  }
  if ((v103 & 0x80u) == 0) {
    uint64_t v40 = v103;
  }
  else {
    uint64_t v40 = v102;
  }
  std::string::size_type v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v39, v40);
  std::string::size_type v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"<TR> <TD>Function Name</TD> <TD>", 32);
  id v43 = v7;
  std::string v44 = (const char *)[v43 UTF8String];
  size_t v45 = strlen(v44);
  uint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v44, v45);
  unsigned __int8 v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"</TD> </TR>", 11);
  DG::NL((DG *)1);
  if ((v100 & 0x80u) == 0) {
    int v48 = &__p;
  }
  else {
    int v48 = __p;
  }
  if ((v100 & 0x80u) == 0) {
    uint64_t v49 = v100;
  }
  else {
    uint64_t v49 = v99;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)v48, v49);
  if ((char)v100 < 0)
  {
    operator delete(__p);
    if (((char)v103 & 0x80000000) == 0) {
      goto LABEL_71;
    }
  }
  else if (((char)v103 & 0x80000000) == 0)
  {
    goto LABEL_71;
  }
  operator delete(v101);
LABEL_71:
  DG::Tab((DG *)(a2 + 2));
  if ((v103 & 0x80u) == 0) {
    uint64_t v50 = &v101;
  }
  else {
    uint64_t v50 = v101;
  }
  if ((v103 & 0x80u) == 0) {
    uint64_t v51 = v103;
  }
  else {
    uint64_t v51 = v102;
  }
  long long v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v50, v51);
  uint64_t v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"<TR> <TD>Inputs</TD> <TD BGCOLOR=\"chocolate1\"></TD> </TR>", 57);
  DG::NL((DG *)1);
  if ((v100 & 0x80u) == 0) {
    uint64_t v54 = &__p;
  }
  else {
    uint64_t v54 = __p;
  }
  if ((v100 & 0x80u) == 0) {
    uint64_t v55 = v100;
  }
  else {
    uint64_t v55 = v99;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v54, v55);
  if ((char)v100 < 0)
  {
    operator delete(__p);
    if (((char)v103 & 0x80000000) == 0) {
      goto LABEL_85;
    }
  }
  else if (((char)v103 & 0x80000000) == 0)
  {
    goto LABEL_85;
  }
  operator delete(v101);
LABEL_85:
  DG::Tab((DG *)(a2 + 2));
  if ((v103 & 0x80u) == 0) {
    uint64_t v56 = &v101;
  }
  else {
    uint64_t v56 = v101;
  }
  if ((v103 & 0x80u) == 0) {
    uint64_t v57 = v103;
  }
  else {
    uint64_t v57 = v102;
  }
  uint64_t v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v56, v57);
  unsigned int v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"<TR> <TD>InOuts</TD> <TD BGCOLOR=\"gold\"></TD> </TR>", 51);
  DG::NL((DG *)1);
  if ((v100 & 0x80u) == 0) {
    int v60 = &__p;
  }
  else {
    int v60 = __p;
  }
  if ((v100 & 0x80u) == 0) {
    uint64_t v61 = v100;
  }
  else {
    uint64_t v61 = v99;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v60, v61);
  if ((char)v100 < 0)
  {
    operator delete(__p);
    if (((char)v103 & 0x80000000) == 0) {
      goto LABEL_99;
    }
  }
  else if (((char)v103 & 0x80000000) == 0)
  {
    goto LABEL_99;
  }
  operator delete(v101);
LABEL_99:
  DG::Tab((DG *)(a2 + 2));
  if ((v103 & 0x80u) == 0) {
    uint64_t v62 = &v101;
  }
  else {
    uint64_t v62 = v101;
  }
  if ((v103 & 0x80u) == 0) {
    uint64_t v63 = v103;
  }
  else {
    uint64_t v63 = v102;
  }
  uint64_t v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v62, v63);
  id v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"<TR> <TD>Outputs</TD> <TD BGCOLOR=\"darkolivegreen1\"></TD> </TR>", 63);
  DG::NL((DG *)1);
  if ((v100 & 0x80u) == 0) {
    uint64_t v66 = &__p;
  }
  else {
    uint64_t v66 = __p;
  }
  if ((v100 & 0x80u) == 0) {
    uint64_t v67 = v100;
  }
  else {
    uint64_t v67 = v99;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)v66, v67);
  if ((char)v100 < 0)
  {
    operator delete(__p);
    if (((char)v103 & 0x80000000) == 0) {
      goto LABEL_113;
    }
  }
  else if (((char)v103 & 0x80000000) == 0)
  {
    goto LABEL_113;
  }
  operator delete(v101);
LABEL_113:
  DG::Tab((DG *)(a2 + 2));
  if ((v103 & 0x80u) == 0) {
    unsigned int v68 = &v101;
  }
  else {
    unsigned int v68 = v101;
  }
  if ((v103 & 0x80u) == 0) {
    uint64_t v69 = v103;
  }
  else {
    uint64_t v69 = v102;
  }
  uint64_t v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v68, v69);
  unint64_t v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"<TR> <TD>Operations</TD> <TD BGCOLOR=\"lightblue3\"></TD> </TR>", 61);
  DG::NL((DG *)1);
  if ((v100 & 0x80u) == 0) {
    uint64_t v72 = &__p;
  }
  else {
    uint64_t v72 = __p;
  }
  if ((v100 & 0x80u) == 0) {
    uint64_t v73 = v100;
  }
  else {
    uint64_t v73 = v99;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)v72, v73);
  if ((char)v100 < 0)
  {
    operator delete(__p);
    if (((char)v103 & 0x80000000) == 0) {
      goto LABEL_127;
    }
  }
  else if (((char)v103 & 0x80000000) == 0)
  {
    goto LABEL_127;
  }
  operator delete(v101);
LABEL_127:
  DG::Tab((DG *)(a2 + 2));
  if ((v103 & 0x80u) == 0) {
    uint64_t v74 = &v101;
  }
  else {
    uint64_t v74 = v101;
  }
  if ((v103 & 0x80u) == 0) {
    uint64_t v75 = v103;
  }
  else {
    uint64_t v75 = v102;
  }
  uint64_t v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v74, v75);
  int v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"<TR> <TD>Intermediates</TD> <TD BGCOLOR=\"cyan2\"></TD> </TR>", 59);
  DG::NL((DG *)1);
  if ((v100 & 0x80u) == 0) {
    int64_t v78 = &__p;
  }
  else {
    int64_t v78 = __p;
  }
  if ((v100 & 0x80u) == 0) {
    uint64_t v79 = v100;
  }
  else {
    uint64_t v79 = v99;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)v78, v79);
  if ((char)v100 < 0)
  {
    operator delete(__p);
    if (((char)v103 & 0x80000000) == 0) {
      goto LABEL_141;
    }
  }
  else if (((char)v103 & 0x80000000) == 0)
  {
    goto LABEL_141;
  }
  operator delete(v101);
LABEL_141:
  DG::Tab((DG *)(a2 + 2));
  if ((v103 & 0x80u) == 0) {
    std::string::size_type v80 = &v101;
  }
  else {
    std::string::size_type v80 = v101;
  }
  if ((v103 & 0x80u) == 0) {
    uint64_t v81 = v103;
  }
  else {
    uint64_t v81 = v102;
  }
  uint64_t v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v80, v81);
  uint64_t v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"<TR> <TD>Dotted Lines</TD> <TD>Order of Execution</TD> </TR>", 60);
  DG::NL((DG *)1);
  if ((v100 & 0x80u) == 0) {
    std::string v84 = &__p;
  }
  else {
    std::string v84 = __p;
  }
  if ((v100 & 0x80u) == 0) {
    uint64_t v85 = v100;
  }
  else {
    uint64_t v85 = v99;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)v84, v85);
  if ((char)v100 < 0)
  {
    operator delete(__p);
    if (((char)v103 & 0x80000000) == 0) {
      goto LABEL_155;
    }
  }
  else if (((char)v103 & 0x80000000) == 0)
  {
    goto LABEL_155;
  }
  operator delete(v101);
LABEL_155:
  DG::Tab((DG *)(a2 + 1));
  if ((v103 & 0x80u) == 0) {
    std::string::size_type v86 = &v101;
  }
  else {
    std::string::size_type v86 = v101;
  }
  if ((v103 & 0x80u) == 0) {
    uint64_t v87 = v103;
  }
  else {
    uint64_t v87 = v102;
  }
  uint64_t v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v86, v87);
  id v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"</TABLE>", 8);
  DG::NL((DG *)1);
  if ((v100 & 0x80u) == 0) {
    id v90 = &__p;
  }
  else {
    id v90 = __p;
  }
  if ((v100 & 0x80u) == 0) {
    uint64_t v91 = v100;
  }
  else {
    uint64_t v91 = v99;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)v90, v91);
  if ((char)v100 < 0)
  {
    operator delete(__p);
    if (((char)v103 & 0x80000000) == 0) {
      goto LABEL_169;
    }
  }
  else if (((char)v103 & 0x80000000) == 0)
  {
    goto LABEL_169;
  }
  operator delete(v101);
LABEL_169:
  DG::Tab((DG *)a2);
  if ((v103 & 0x80u) == 0) {
    char v92 = &v101;
  }
  else {
    char v92 = v101;
  }
  if ((v103 & 0x80u) == 0) {
    uint64_t v93 = v103;
  }
  else {
    uint64_t v93 = v102;
  }
  std::string v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v92, v93);
  uint64_t v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)">]", 2);
  DG::NL((DG *)1);
  if ((v100 & 0x80u) == 0) {
    uint64_t v96 = &__p;
  }
  else {
    uint64_t v96 = __p;
  }
  if ((v100 & 0x80u) == 0) {
    uint64_t v97 = v100;
  }
  else {
    uint64_t v97 = v99;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)v96, v97);
  if ((char)v100 < 0)
  {
    operator delete(__p);
    if (((char)v103 & 0x80000000) == 0) {
      goto LABEL_183;
    }
LABEL_209:
    operator delete(v101);
    goto LABEL_183;
  }
  if ((char)v103 < 0) {
    goto LABEL_209;
  }
LABEL_183:
}

void sub_19246754C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:

      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);

  _Unwind_Resume(a1);
}

void DG::GenerateFunctionDigraph(DG *this@<X0>, NSDictionary *a2@<X1>, NSString *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v91 = a4;
  uint64_t v167 = *MEMORY[0x1E4F143B8];
  id v7 = this;
  uint64_t v93 = a2;
  std::string v94 = a3;
  std::string::size_type v122 = v7;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v153);
  id v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, (uint64_t)"digraph G {", 11);
  DG::NL((DG *)1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_std::string p = &__p;
  }
  else {
    p_std::string p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  DG::Tab((DG *)1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v11 = &__p;
  }
  else {
    uint64_t v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v12 = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, (uint64_t)v11, v12);
  id v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"graph []", 8);
  DG::NL((DG *)1);
  if ((v152 & 0x80u) == 0) {
    uint64_t v15 = &v150;
  }
  else {
    uint64_t v15 = v150;
  }
  if ((v152 & 0x80u) == 0) {
    uint64_t v16 = v152;
  }
  else {
    uint64_t v16 = v151;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  if ((char)v152 < 0)
  {
    operator delete(v150);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_23;
    }
LABEL_174:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_23;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_174;
  }
LABEL_23:
  DG::AddLegend((uint64_t)v153, 2, v93, v94);
  v126 = [(DG *)v7 objectForKey:@"Function Inputs"];
  uint64_t v125 = [(DG *)v7 objectForKey:@"Function Outputs"];
  uint64_t v124 = [(DG *)v7 objectForKey:@"Function InOuts"];
  uint64_t v123 = [(DG *)v7 objectForKey:@"Function Intermediates"];
  char v92 = [(DG *)v7 objectForKey:@"Function Operations"];
  uint64_t v98 = [MEMORY[0x1E4F1CA48] array];
  long long v148 = 0u;
  long long v149 = 0u;
  long long v146 = 0u;
  long long v147 = 0u;
  obunint64_t j = v92;
  uint64_t v17 = [obj countByEnumeratingWithState:&v146 objects:v166 count:16];
  if (!v17) {
    goto LABEL_162;
  }
  uint64_t v96 = *(void *)v147;
  id v18 = &__p.__r_.__value_.__r.__words[2];
  uint64_t v19 = &v158;
  std::string::size_type v120 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  std::string::size_type v121 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  std::string::size_type v118 = *(void *)(MEMORY[0x1E4FBA408] + 40);
  std::string::size_type v119 = *(void *)(MEMORY[0x1E4FBA408] + 32);
  std::string::size_type v116 = *(void *)(MEMORY[0x1E4FBA408] + 8);
  std::string::size_type v117 = *(void *)(MEMORY[0x1E4FBA408] + 48);
  std::string::size_type v113 = *MEMORY[0x1E4FBA408];
  std::string::size_type v114 = *(void *)(MEMORY[0x1E4FBA408] + 64);
  std::string::size_type v115 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  do
  {
    uint64_t v103 = 0;
    uint64_t v97 = v17;
    do
    {
      if (*(void *)v147 != v96) {
        objc_enumerationMutation(obj);
      }
      size_t v20 = *(void **)(*((void *)&v146 + 1) + 8 * v103);
      objc_msgSend(v20, "objectForKey:", @"Op Name", v91);
      int64_t v127 = (DG *)objc_claimAutoreleasedReturnValue();
      uint64_t v99 = [v20 objectForKey:@"Op Details"];
      DG::AddOpNode((uint64_t)v153, 1, v127, v99);
      [v98 addObject:v127];
      uint64_t v102 = [v20 objectForKey:@"Op Inputs"];
      uint64_t v101 = [v20 objectForKey:@"Op Outputs"];
      unsigned __int8 v100 = [v20 objectForKey:@"Op InOuts"];
      long long v144 = 0u;
      long long v145 = 0u;
      long long v142 = 0u;
      long long v143 = 0u;
      id v106 = v102;
      uint64_t v21 = [v106 countByEnumeratingWithState:&v142 objects:v165 count:16];
      if (v21)
      {
        uint64_t v107 = *(void *)v143;
        do
        {
          uint64_t v22 = 0;
          uint64_t v110 = v21;
          do
          {
            if (*(void *)v143 != v107) {
              objc_enumerationMutation(v106);
            }
            uint64_t v23 = *(void **)(*((void *)&v142 + 1) + 8 * v22);
            DG::AddIONode((uint64_t)v153, 1, v23, v126, v125, v124, v123);
            uint64_t v24 = MEMORY[0x1E4FBA488] + 104;
            v162[0] = MEMORY[0x1E4FBA488] + 104;
            uint64_t v25 = MEMORY[0x1E4FBA488] + 64;
            __p.__r_.__value_.__r.__words[2] = MEMORY[0x1E4FBA488] + 64;
            __p.__r_.__value_.__r.__words[0] = v121;
            *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(void *)(v121 - 24)) = v120;
            __p.__r_.__value_.__l.__size_ = 0;
            unsigned __int8 v26 = (std::ios_base *)((char *)&__p + *(void *)(__p.__r_.__value_.__r.__words[0] - 24));
            std::ios_base::init(v26, v19);
            uint64_t v27 = MEMORY[0x1E4FBA488] + 24;
            v26[1].__vftable = 0;
            v26[1].__fmtflags_ = -1;
            __p.__r_.__value_.__r.__words[2] = v119;
            *(std::string::size_type *)((char *)v18 + *(void *)(v119 - 24)) = v118;
            __p.__r_.__value_.__r.__words[0] = v116;
            *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(void *)(v116 - 24)) = v117;
            v162[0] = v24;
            __p.__r_.__value_.__r.__words[0] = v27;
            __p.__r_.__value_.__r.__words[2] = v25;
            std::streambuf::basic_streambuf();
            uint64_t v28 = MEMORY[0x1E4FBA470] + 16;
            uint64_t v158 = MEMORY[0x1E4FBA470] + 16;
            long long v159 = 0u;
            long long v160 = 0u;
            int v161 = 24;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"    ", 4);
            std::stringbuf::str();
            __p.__r_.__value_.__r.__words[0] = v113;
            *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(void *)(v113 - 24)) = v114;
            __p.__r_.__value_.__r.__words[2] = v115;
            uint64_t v158 = v28;
            if (SBYTE7(v160) < 0) {
              operator delete((void *)v159);
            }
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x192FF15B0](v162);
            if ((v152 & 0x80u) == 0) {
              uint64_t v29 = &v150;
            }
            else {
              uint64_t v29 = v150;
            }
            if ((v152 & 0x80u) == 0) {
              uint64_t v30 = v152;
            }
            else {
              uint64_t v30 = v151;
            }
            id v7 = v122;
            uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, (uint64_t)v29, v30);
            DG::Qt((DG *)v23, &__p);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              id v32 = &__p;
            }
            else {
              id v32 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v33 = __p.__r_.__value_.__l.__size_;
            }
            size_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
            char v141 = 4;
            strcpy((char *)v140, " -> ");
            std::string::size_type v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v140, 4);
            DG::Qt(v127, &v139);
            if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v36 = &v139;
            }
            else {
              std::string::size_type v36 = (std::string *)v139.__r_.__value_.__r.__words[0];
            }
            if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v37 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v37 = v139.__r_.__value_.__l.__size_;
            }
            uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v36, v37);
            DG::NL((DG *)1);
            if ((v138 & 0x80u) == 0) {
              unint64_t v39 = &v136;
            }
            else {
              unint64_t v39 = v136;
            }
            if ((v138 & 0x80u) == 0) {
              uint64_t v40 = v138;
            }
            else {
              uint64_t v40 = v137;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v39, v40);
            if ((char)v138 < 0)
            {
              operator delete(v136);
              uint64_t v41 = v110;
              if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_62:
                if ((v141 & 0x80000000) == 0) {
                  goto LABEL_63;
                }
                goto LABEL_68;
              }
            }
            else
            {
              uint64_t v41 = v110;
              if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_62;
              }
            }
            operator delete(v139.__r_.__value_.__l.__data_);
            if ((v141 & 0x80000000) == 0)
            {
LABEL_63:
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                goto LABEL_69;
              }
              goto LABEL_64;
            }
LABEL_68:
            operator delete(v140[0]);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
LABEL_69:
              operator delete(__p.__r_.__value_.__l.__data_);
              if (((char)v152 & 0x80000000) == 0) {
                goto LABEL_31;
              }
              goto LABEL_70;
            }
LABEL_64:
            if (((char)v152 & 0x80000000) == 0) {
              goto LABEL_31;
            }
LABEL_70:
            operator delete(v150);
LABEL_31:
            ++v22;
          }
          while (v41 != v22);
          uint64_t v21 = [v106 countByEnumeratingWithState:&v142 objects:v165 count:16];
        }
        while (v21);
      }

      long long v134 = 0u;
      long long v135 = 0u;
      long long v132 = 0u;
      long long v133 = 0u;
      id v105 = v101;
      uint64_t v42 = [v105 countByEnumeratingWithState:&v132 objects:v164 count:16];
      if (!v42) {
        goto LABEL_116;
      }
      uint64_t v108 = *(void *)v133;
      do
      {
        uint64_t v43 = 0;
        uint64_t v111 = v42;
        do
        {
          if (*(void *)v133 != v108) {
            objc_enumerationMutation(v105);
          }
          std::string v44 = *(void **)(*((void *)&v132 + 1) + 8 * v43);
          DG::AddIONode((uint64_t)v153, 1, v44, v126, v125, v124, v123);
          uint64_t v45 = MEMORY[0x1E4FBA488] + 104;
          v162[0] = MEMORY[0x1E4FBA488] + 104;
          uint64_t v46 = v18;
          uint64_t v47 = MEMORY[0x1E4FBA488] + 64;
          __p.__r_.__value_.__r.__words[2] = MEMORY[0x1E4FBA488] + 64;
          __p.__r_.__value_.__r.__words[0] = v121;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(void *)(v121 - 24)) = v120;
          __p.__r_.__value_.__l.__size_ = 0;
          int v48 = (std::ios_base *)((char *)&__p + *(void *)(__p.__r_.__value_.__r.__words[0] - 24));
          std::ios_base::init(v48, v19);
          uint64_t v49 = MEMORY[0x1E4FBA488] + 24;
          v48[1].__vftable = 0;
          v48[1].__fmtflags_ = -1;
          __p.__r_.__value_.__r.__words[2] = v119;
          *(std::string::size_type *)((char *)v46 + *(void *)(v119 - 24)) = v118;
          __p.__r_.__value_.__r.__words[0] = v116;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(void *)(v116 - 24)) = v117;
          v162[0] = v45;
          __p.__r_.__value_.__r.__words[0] = v49;
          __p.__r_.__value_.__r.__words[2] = v47;
          std::streambuf::basic_streambuf();
          uint64_t v50 = MEMORY[0x1E4FBA470] + 16;
          uint64_t v158 = MEMORY[0x1E4FBA470] + 16;
          long long v159 = 0u;
          long long v160 = 0u;
          int v161 = 24;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"    ", 4);
          id v18 = v46;
          std::stringbuf::str();
          __p.__r_.__value_.__r.__words[0] = v113;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(void *)(v113 - 24)) = v114;
          __p.__r_.__value_.__r.__words[2] = v115;
          uint64_t v158 = v50;
          if (SBYTE7(v160) < 0) {
            operator delete((void *)v159);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x192FF15B0](v162);
          if ((v152 & 0x80u) == 0) {
            uint64_t v51 = &v150;
          }
          else {
            uint64_t v51 = v150;
          }
          if ((v152 & 0x80u) == 0) {
            uint64_t v52 = v152;
          }
          else {
            uint64_t v52 = v151;
          }
          id v7 = v122;
          uint64_t v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, (uint64_t)v51, v52);
          DG::Qt(v127, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v54 = &__p;
          }
          else {
            uint64_t v54 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v55 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v55 = __p.__r_.__value_.__l.__size_;
          }
          uint64_t v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v54, v55);
          char v141 = 4;
          strcpy((char *)v140, " -> ");
          uint64_t v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)v140, 4);
          DG::Qt((DG *)v44, &v139);
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v58 = &v139;
          }
          else {
            uint64_t v58 = (std::string *)v139.__r_.__value_.__r.__words[0];
          }
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v59 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v59 = v139.__r_.__value_.__l.__size_;
          }
          int v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)v58, v59);
          DG::NL((DG *)1);
          if ((v138 & 0x80u) == 0) {
            uint64_t v61 = &v136;
          }
          else {
            uint64_t v61 = v136;
          }
          if ((v138 & 0x80u) == 0) {
            uint64_t v62 = v138;
          }
          else {
            uint64_t v62 = v137;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)v61, v62);
          if ((char)v138 < 0)
          {
            operator delete(v136);
            uint64_t v63 = v111;
            if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_106:
              if ((v141 & 0x80000000) == 0) {
                goto LABEL_107;
              }
              goto LABEL_112;
            }
          }
          else
          {
            uint64_t v63 = v111;
            if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_106;
            }
          }
          operator delete(v139.__r_.__value_.__l.__data_);
          if ((v141 & 0x80000000) == 0)
          {
LABEL_107:
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_113;
            }
            goto LABEL_108;
          }
LABEL_112:
          operator delete(v140[0]);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_113:
            operator delete(__p.__r_.__value_.__l.__data_);
            if (((char)v152 & 0x80000000) == 0) {
              goto LABEL_75;
            }
            goto LABEL_114;
          }
LABEL_108:
          if (((char)v152 & 0x80000000) == 0) {
            goto LABEL_75;
          }
LABEL_114:
          operator delete(v150);
LABEL_75:
          ++v43;
        }
        while (v63 != v43);
        uint64_t v42 = [v105 countByEnumeratingWithState:&v132 objects:v164 count:16];
      }
      while (v42);
LABEL_116:

      long long v130 = 0u;
      long long v131 = 0u;
      long long v128 = 0u;
      long long v129 = 0u;
      id v104 = v100;
      uint64_t v64 = [v104 countByEnumeratingWithState:&v128 objects:v163 count:16];
      if (!v64) {
        goto LABEL_160;
      }
      uint64_t v109 = *(void *)v129;
      while (2)
      {
        uint64_t v65 = 0;
        uint64_t v112 = v64;
        while (2)
        {
          if (*(void *)v129 != v109) {
            objc_enumerationMutation(v104);
          }
          uint64_t v66 = *(void **)(*((void *)&v128 + 1) + 8 * v65);
          DG::AddIONode((uint64_t)v153, 1, v66, v126, v125, v124, v123);
          uint64_t v67 = MEMORY[0x1E4FBA488] + 104;
          v162[0] = MEMORY[0x1E4FBA488] + 104;
          unsigned int v68 = v19;
          uint64_t v69 = MEMORY[0x1E4FBA488] + 64;
          __p.__r_.__value_.__r.__words[2] = MEMORY[0x1E4FBA488] + 64;
          __p.__r_.__value_.__r.__words[0] = v121;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(void *)(v121 - 24)) = v120;
          __p.__r_.__value_.__l.__size_ = 0;
          uint64_t v70 = (std::ios_base *)((char *)&__p + *(void *)(__p.__r_.__value_.__r.__words[0] - 24));
          std::ios_base::init(v70, v68);
          uint64_t v71 = MEMORY[0x1E4FBA488] + 24;
          v70[1].__vftable = 0;
          v70[1].__fmtflags_ = -1;
          __p.__r_.__value_.__r.__words[2] = v119;
          *(std::string::size_type *)((char *)v18 + *(void *)(v119 - 24)) = v118;
          __p.__r_.__value_.__r.__words[0] = v116;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(void *)(v116 - 24)) = v117;
          v162[0] = v67;
          __p.__r_.__value_.__r.__words[0] = v71;
          __p.__r_.__value_.__r.__words[2] = v69;
          std::streambuf::basic_streambuf();
          uint64_t v72 = MEMORY[0x1E4FBA470] + 16;
          uint64_t v158 = MEMORY[0x1E4FBA470] + 16;
          long long v159 = 0u;
          long long v160 = 0u;
          int v161 = 24;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"    ", 4);
          uint64_t v19 = v68;
          std::stringbuf::str();
          __p.__r_.__value_.__r.__words[0] = v113;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(void *)(v113 - 24)) = v114;
          __p.__r_.__value_.__r.__words[2] = v115;
          uint64_t v158 = v72;
          if (SBYTE7(v160) < 0) {
            operator delete((void *)v159);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x192FF15B0](v162);
          if ((v152 & 0x80u) == 0) {
            uint64_t v73 = &v150;
          }
          else {
            uint64_t v73 = v150;
          }
          if ((v152 & 0x80u) == 0) {
            uint64_t v74 = v152;
          }
          else {
            uint64_t v74 = v151;
          }
          id v7 = v122;
          uint64_t v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, (uint64_t)v73, v74);
          DG::Qt((DG *)v66, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v76 = &__p;
          }
          else {
            uint64_t v76 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v77 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v77 = __p.__r_.__value_.__l.__size_;
          }
          int64_t v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)v76, v77);
          char v141 = 4;
          strcpy((char *)v140, " -> ");
          uint64_t v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)v140, 4);
          DG::Qt(v127, &v139);
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v80 = &v139;
          }
          else {
            std::string::size_type v80 = (std::string *)v139.__r_.__value_.__r.__words[0];
          }
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v81 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v81 = v139.__r_.__value_.__l.__size_;
          }
          uint64_t v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)v80, v81);
          uint64_t v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"[dir=both]", 10);
          DG::NL((DG *)1);
          if ((v138 & 0x80u) == 0) {
            std::string v84 = &v136;
          }
          else {
            std::string v84 = v136;
          }
          if ((v138 & 0x80u) == 0) {
            uint64_t v85 = v138;
          }
          else {
            uint64_t v85 = v137;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)v84, v85);
          if ((char)v138 < 0)
          {
            operator delete(v136);
            uint64_t v86 = v112;
            if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_155;
            }
LABEL_150:
            if ((v141 & 0x80000000) == 0) {
              goto LABEL_151;
            }
LABEL_156:
            operator delete(v140[0]);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_157;
            }
LABEL_152:
            if ((char)v152 < 0) {
LABEL_158:
            }
              operator delete(v150);
          }
          else
          {
            uint64_t v86 = v112;
            if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_150;
            }
LABEL_155:
            operator delete(v139.__r_.__value_.__l.__data_);
            if (v141 < 0) {
              goto LABEL_156;
            }
LABEL_151:
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_152;
            }
LABEL_157:
            operator delete(__p.__r_.__value_.__l.__data_);
            if ((char)v152 < 0) {
              goto LABEL_158;
            }
          }
          if (v86 != ++v65) {
            continue;
          }
          break;
        }
        uint64_t v64 = [v104 countByEnumeratingWithState:&v128 objects:v163 count:16];
        if (v64) {
          continue;
        }
        break;
      }
LABEL_160:

      ++v103;
    }
    while (v103 != v97);
    uint64_t v17 = [obj countByEnumeratingWithState:&v146 objects:v166 count:16];
  }
  while (v17);
LABEL_162:

  DG::AddOpsOrdering((uint64_t)v153, 1, v98);
  uint64_t v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, (uint64_t)"}", 1);
  DG::NL((DG *)1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v88 = &__p;
  }
  else {
    uint64_t v88 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v89 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v89 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)v88, v89);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str();

  v153[0] = *MEMORY[0x1E4FBA408];
  uint64_t v90 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v153 + *(void *)(v153[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v154[0] = v90;
  v154[1] = MEMORY[0x1E4FBA470] + 16;
  if (v155 < 0) {
    operator delete((void *)v154[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x192FF15B0](&v156);
}

void sub_192468EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,void *a38,void *a39,void *a40,void *a41)
{
  if (SLOBYTE(STACK[0x3BF]) < 0) {
    operator delete((void *)STACK[0x3A8]);
  }

  uint64_t v42 = MEMORY[0x1E4FBA408];
  uint64_t v43 = *MEMORY[0x1E4FBA408];
  STACK[0x290] = *MEMORY[0x1E4FBA408];
  unint64_t v44 = *(void *)(v42 + 72);
  *(unint64_t *)((char *)&STACK[0x290] + *(void *)(v43 - 24)) = *(void *)(v42 + 64);
  STACK[0x2A0] = v44;
  STACK[0x2A8] = MEMORY[0x1E4FBA470] + 16;
  if (SLOBYTE(STACK[0x2FF]) < 0) {
    operator delete((void *)STACK[0x2E8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x192FF15B0](&STACK[0x310]);

  _Unwind_Resume(a1);
}

void E5DB::GenerateDigraphs(E5DB *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = this;
  id v5 = v4;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v31 = a2;
  *(_DWORD *)(a2 + 32) = 1065353216;
  if (v4)
  {
    long long v46 = 0uLL;
    long long v47 = 0uLL;
    long long v44 = 0uLL;
    long long v45 = 0uLL;
    obunint64_t j = v4;
    uint64_t v6 = [(E5DB *)obj countByEnumeratingWithState:&v44 objects:v50 count:16];
    if (!v6) {
      goto LABEL_34;
    }
    uint64_t v27 = *(void *)v45;
    while (1)
    {
      uint64_t v29 = 0;
      while (2)
      {
        if (*(void *)v45 != v27) {
          objc_enumerationMutation(obj);
        }
        id v7 = *(void **)(*((void *)&v44 + 1) + 8 * v29);
        if ([v7 isEqual:@"SegmentationAnalytics"]) {
          goto LABEL_6;
        }
        id v8 = [(E5DB *)obj objectForKey:v7];
        id v9 = v8;
        if (!v8) {
          goto LABEL_5;
        }
        int v10 = [v8 objectForKey:@"Public Functions"];
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        id v30 = v10;
        uint64_t v11 = [v30 countByEnumeratingWithState:&v40 objects:v49 count:16];
        if (!v11) {
          goto LABEL_32;
        }
        id v32 = v9;
        uint64_t v33 = *(void *)v41;
        do
        {
          uint64_t v12 = 0;
          uint64_t v34 = v11;
          do
          {
            if (*(void *)v41 != v33) {
              objc_enumerationMutation(v30);
            }
            uint64_t v13 = *(NSDictionary **)(*((void *)&v40 + 1) + 8 * v12);
            id v14 = [v9 objectForKey:v13];
            id v35 = [NSString stringWithFormat:@"%@-%@", v7, v13];
            DG::GenerateFunctionDigraph(v14, v13, (NSString *)v7, (uint64_t)__p);
            id v15 = v35;
            uint64_t v16 = v7;
            uint64_t v17 = v6;
            id v18 = v5;
            uint64_t v19 = (const char *)[v15 UTF8String];
            size_t v20 = strlen(v19);
            if (v20 >= 0x7FFFFFFFFFFFFFF8) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            uint64_t v21 = (void *)v20;
            if (v20 >= 0x17)
            {
              uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v20 | 7) != 0x17) {
                uint64_t v23 = v20 | 7;
              }
              uint64_t v24 = v23 + 1;
              uint64_t v22 = (void **)operator new(v23 + 1);
              __dst[1] = v21;
              unint64_t v37 = v24 | 0x8000000000000000;
              __dst[0] = v22;
LABEL_23:
              memmove(v22, v19, (size_t)v21);
              goto LABEL_24;
            }
            HIBYTE(v37) = v20;
            uint64_t v22 = __dst;
            if (v20) {
              goto LABEL_23;
            }
LABEL_24:
            *((unsigned char *)v21 + (void)v22) = 0;
            int v48 = __dst;
            uint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v31, (uint64_t)__dst, (uint64_t)&std::piecewise_construct, (long long **)&v48);
            unsigned __int8 v26 = v25 + 40;
            if ((char)v25[63] < 0) {
              operator delete(*(void **)v26);
            }
            *(_OWORD *)unsigned __int8 v26 = *(_OWORD *)__p;
            *((void *)v26 + 2) = v39;
            HIBYTE(v39) = 0;
            LOBYTE(__p[0]) = 0;
            id v5 = v18;
            uint64_t v6 = v17;
            id v7 = v16;
            if (SHIBYTE(v37) < 0)
            {
              operator delete(__dst[0]);
              id v9 = v32;
              if (SHIBYTE(v39) < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              id v9 = v32;
            }

            ++v12;
          }
          while (v34 != v12);
          uint64_t v11 = [v30 countByEnumeratingWithState:&v40 objects:v49 count:16];
        }
        while (v11);
LABEL_32:

LABEL_5:
LABEL_6:
        if (++v29 != v6) {
          continue;
        }
        break;
      }
      uint64_t v6 = [(E5DB *)obj countByEnumeratingWithState:&v44 objects:v50 count:16];
      if (!v6)
      {
LABEL_34:

        break;
      }
    }
  }
}

void sub_192469B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](a16);
  _Unwind_Resume(a1);
}

id sub_192469C1C(int a1)
{
  if (a1 == 1)
  {
    char v5 = 3;
    LODWORD(__p[0]) = 5591107;
    uint64_t v1 = [NSString stringWithUTF8String:__p];
  }
  else if (a1 == 2)
  {
    char v5 = 3;
    LODWORD(__p[0]) = 5591111;
    uint64_t v1 = [NSString stringWithUTF8String:__p];
  }
  else
  {
    if (a1 == 3)
    {
      char v5 = 3;
      LODWORD(__p[0]) = 4542017;
    }
    else
    {
      char v5 = 7;
      strcpy((char *)__p, "Invalid");
    }
    uint64_t v1 = [NSString stringWithUTF8String:__p];
  }
  uint64_t v2 = v1;
  if (v5 < 0)
  {
    operator delete(__p[0]);
    uint64_t v1 = v2;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return v1;
}

void sub_192469D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__fs::filesystem::relative[abi:ne180100](const std::__fs::filesystem::path *a1@<X0>, const std::__fs::filesystem::path *a2@<X1>, std::__fs::filesystem::path *a3@<X8>)
{
  std::__fs::filesystem::__weakly_canonical(&v6, a1, 0);
  std::__fs::filesystem::__weakly_canonical(&__p, a2, 0);
  std::__fs::filesystem::path::lexically_relative(a3, &v6, &__p);
  if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_5:
    operator delete(v6.__pn_.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_5;
  }
}

void sub_192469E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_192469E64(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v1 = a1;
  uint64_t v2 = 0;
  uint64_t v3 = [v1 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v12;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v12 != v4) {
          objc_enumerationMutation(v1);
        }
        std::__fs::filesystem::path v6 = objc_msgSend(v1, "objectForKey:", *(void *)(*((void *)&v11 + 1) + 8 * v5), (void)v11);
        id v7 = [v6 objectForKey:@"Description"];
        id v8 = [v7 objectForKey:@"Size"];
        id v9 = v8;
        if (v8) {
          v2 += [v8 unsignedLongLongValue];
        }

        ++v5;
      }
      while (v3 != v5);
      uint64_t v3 = [v1 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v3);
  }

  return v2;
}

void sub_192469FC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<E5RT::E5Function const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<E5RT::E5Function const>*,std::shared_ptr<E5RT::E5Function const>*>(uint64_t a1, void *a2, void *a3, size_t __sz)
{
  std::__fs::filesystem::path v6 = a2;
  uint64_t v8 = *(void *)(a1 + 16);
  id v9 = *(char **)a1;
  if (__sz > (v8 - *(void *)a1) >> 4)
  {
    if (v9)
    {
      int v10 = *(char **)(a1 + 8);
      long long v11 = *(char **)a1;
      if (v10 != v9)
      {
        do
        {
          long long v12 = (std::__shared_weak_count *)*((void *)v10 - 1);
          if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
          v10 -= 16;
        }
        while (v10 != v9);
        long long v11 = *(char **)a1;
      }
      *(void *)(a1 + 8) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz >> 60) {
      goto LABEL_56;
    }
    uint64_t v23 = v8 >> 3;
    if (v8 >> 3 <= __sz) {
      uint64_t v23 = __sz;
    }
    BOOL v24 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
    if (!v24) {
      unint64_t v25 = v23;
    }
    if (v25 >> 60) {
LABEL_56:
    }
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    uint64_t v26 = 2 * v25;
    uint64_t v27 = operator new(16 * v25);
    *(void *)a1 = v27;
    *(void *)(a1 + 8) = v27;
    for (*(void *)(a1 + 16) = &v27[v26]; v6 != a3; v6 += 2)
    {
      uint64_t v28 = v6[1];
      *uint64_t v27 = *v6;
      v27[1] = v28;
      if (v28) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
      }
      v27 += 2;
    }
    *(void *)(a1 + 8) = v27;
    return;
  }
  long long v13 = *(char **)(a1 + 8);
  unint64_t v14 = (v13 - v9) >> 4;
  if (v14 >= __sz)
  {
    if (a2 == a3)
    {
      uint64_t v19 = *(char **)a1;
      if (v13 == v9)
      {
LABEL_55:
        *(void *)(a1 + 8) = v19;
        return;
      }
    }
    else
    {
      uint64_t v19 = *(char **)a1;
      do
      {
        uint64_t v21 = *v6;
        uint64_t v20 = v6[1];
        if (v20) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v22 = (std::__shared_weak_count *)*((void *)v9 + 1);
        *(void *)id v9 = v21;
        *((void *)v9 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v20;
        if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
        v19 += 16;
        v6 += 2;
        v9 += 16;
      }
      while (v6 != a3);
      long long v13 = *(char **)(a1 + 8);
      if (v13 == v19) {
        goto LABEL_55;
      }
    }
    do
    {
      id v32 = (std::__shared_weak_count *)*((void *)v13 - 1);
      if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
      v13 -= 16;
    }
    while (v13 != v19);
    goto LABEL_55;
  }
  id v15 = &a2[2 * v14];
  if (v13 != v9)
  {
    do
    {
      uint64_t v17 = *v6;
      uint64_t v16 = v6[1];
      if (v16) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
      }
      id v18 = (std::__shared_weak_count *)*((void *)v9 + 1);
      *(void *)id v9 = v17;
      *((void *)v9 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v16;
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      v6 += 2;
      v9 += 16;
    }
    while (v6 != v15);
    id v9 = *(char **)(a1 + 8);
  }
  uint64_t v29 = v9;
  if (v15 != a3)
  {
    uint64_t v29 = v9;
    id v30 = v9;
    do
    {
      uint64_t v31 = v15[1];
      *(void *)id v30 = *v15;
      *((void *)v30 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v31;
      if (v31) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
      }
      v29 += 16;
      v15 += 2;
      v30 += 16;
    }
    while (v15 != a3);
  }
  *(void *)(a1 + 8) = v29;
}

void E5DB::ExitCommand::GetName(char *a1@<X8>)
{
  a1[23] = 4;
  strcpy(a1, "exit");
}

void E5DB::ExitCommand::GetDescription(char *a1@<X8>)
{
  a1[23] = 17;
  strcpy(a1, "Exit E5 debugger.");
}

void *E5DB::ExitCommand::ExitCommand(void *this)
{
  *this = &unk_1EE3244C8;
  return this;
}

void E5DB::ExitCommand::~ExitCommand(E5DB::ExitCommand *this)
{
}

uint64_t E5DB::ExitCommand::GetHelp(E5DB::ExitCommand *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v10);
  (*(void (**)(void **__return_ptr, E5DB::ExitCommand *))(*(void *)this + 24))(__p, this);
  if ((v9 & 0x80u) == 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    uint64_t v3 = v9;
  }
  else {
    uint64_t v3 = (uint64_t)__p[1];
  }
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v2, v3);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v14, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v14);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v11[0] = v6;
  v11[1] = MEMORY[0x1E4FBA470] + 16;
  if (v12 < 0) {
    operator delete((void *)v11[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x192FF15B0](&v13);
}

void sub_19246A658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19246A670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::locale::~locale((std::locale *)(v16 - 56));
  if (a15 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t E5DB::ExitCommand::GetHelpCSV(E5DB::ExitCommand *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
  (*(void (**)(void **__return_ptr, E5DB::ExitCommand *))(*(void *)this + 16))(__p, this);
  if ((v8 & 0x80u) == 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = v8;
  }
  else {
    uint64_t v3 = (uint64_t)__p[1];
  }
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"=[", 2);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E4FBA408];
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v9 + *(void *)(v9[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v10[0] = v5;
  v10[1] = MEMORY[0x1E4FBA470] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x192FF15B0](&v12);
}

void sub_19246A890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19246A8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t E5DB::ExitCommand::Execute()
{
  return 1;
}

void E5DB::HelpCommand::GetName(char *a1@<X8>)
{
  a1[23] = 4;
  strcpy(a1, "help");
}

char *E5DB::HelpCommand::GetDescription@<X0>(uint64_t a1@<X8>)
{
  __n128 result = (char *)operator new(0x28uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_192DB3C40;
  strcpy(result, "Show a list of debugger commands.");
  return result;
}

void *E5DB::HelpCommand::HelpCommand(void *this)
{
  *this = &unk_1EE324510;
  return this;
}

void E5DB::HelpCommand::~HelpCommand(E5DB::HelpCommand *this)
{
}

uint64_t E5DB::HelpCommand::GetHelp(E5DB::HelpCommand *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v19);
  (*(void (**)(void **__return_ptr, E5DB::HelpCommand *))(*(void *)this + 24))(__p, this);
  if ((v18 & 0x80u) == 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  if ((v18 & 0x80u) == 0) {
    uint64_t v3 = v18;
  }
  else {
    uint64_t v3 = (uint64_t)__p[1];
  }
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v2, v3);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v23, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v23);
  std::ostream::put();
  std::ostream::flush();
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v6 = std::locale::use_facet(&v23, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v23);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v18 < 0) {
    operator delete(__p[0]);
  }
  id v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"help [<cmd-name> / --all] [options]", 35);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
  unsigned __int8 v8 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  unsigned __int8 v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Options:", 8);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
  int v10 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  char v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"--all  : Print help for all commands", 36);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  uint64_t v12 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"--csv  : Print options as a comma separated list", 48);
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
  std::locale v14 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  v19[0] = *MEMORY[0x1E4FBA408];
  uint64_t v15 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v19 + *(void *)(v19[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v20[0] = v15;
  v20[1] = MEMORY[0x1E4FBA470] + 16;
  if (v21 < 0) {
    operator delete((void *)v20[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x192FF15B0](&v22);
}

void sub_19246AE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t E5DB::HelpCommand::GetHelpCSV(E5DB::HelpCommand *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
  (*(void (**)(void **__return_ptr, E5DB::HelpCommand *))(*(void *)this + 16))(__p, this);
  if ((v8 & 0x80u) == 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = v8;
  }
  else {
    uint64_t v3 = (uint64_t)__p[1];
  }
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"=[", 2);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E4FBA408];
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v9 + *(void *)(v9[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v10[0] = v5;
  v10[1] = MEMORY[0x1E4FBA470] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x192FF15B0](&v12);
}

void sub_19246B0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19246B0F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t E5DB::HelpCommand::Execute(E5DB::CommandFactory *a1, void **a2, void *a3)
{
  CommandFactory = (E5DB::CommandFactory *)E5DB::CommandFactory::GetCommandFactory(a1);
  CommandNames = E5DB::CommandFactory::GetCommandNames(CommandFactory);
  unsigned __int8 v8 = (uint64_t *)CommandNames;
  uint64_t v10 = v9;
  uint64_t v11 = *a3;
  uint64_t v12 = a3[1] - *a3;
  if (0xAAAAAAAAAAAAAAABLL * (v12 >> 3) < 3)
  {
    if (v12 == 48)
    {
      BOOL v15 = 0;
      int v16 = *(char *)(v11 + 47);
      if (v16 < 0) {
        goto LABEL_65;
      }
LABEL_7:
      uint64_t v17 = v11 + 24;
      uint64_t v18 = v16;
      if (v16 != 5) {
        goto LABEL_71;
      }
      if (*(_DWORD *)v17 != 1818307885 || *(unsigned char *)(v11 + 28) != 108) {
        goto LABEL_71;
      }
      goto LABEL_86;
    }
    uint64_t v20 = *a2;
    (*(void (**)(void **__return_ptr, E5DB::CommandFactory *))(*(void *)a1 + 32))(&__p, a1);
    if ((v88 & 0x80u) == 0) {
      p_std::string p = &__p;
    }
    else {
      p_std::string p = __p;
    }
    if ((v88 & 0x80u) == 0) {
      uint64_t v22 = v88;
    }
    else {
      uint64_t v22 = v87;
    }
    std::locale v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)p_p, v22);
    std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24)));
    BOOL v24 = std::locale::use_facet(&v81, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
    std::locale::~locale(&v81);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v88 < 0) {
      operator delete(__p);
    }
    unint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a2, (uint64_t)"Debugger commands:", 18);
    std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
    uint64_t v26 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put();
    std::ostream::flush();
    if (!v10) {
      return 0;
    }
    uint64_t v27 = &v8[2 * v10];
    uint64_t v28 = (std::locale::id *)MEMORY[0x1E4FBA258];
    while (1)
    {
      E5DB::CommandFactory::GetCommand(CommandFactory, *v8, v8[1], &v84);
      uint64_t v29 = *a2;
      (*(void (**)(void **__return_ptr))(*(void *)v84.__locale_ + 16))(&__p);
      if ((v88 & 0x80u) == 0) {
        id v30 = &__p;
      }
      else {
        id v30 = __p;
      }
      if ((v88 & 0x80u) == 0) {
        uint64_t v31 = v88;
      }
      else {
        uint64_t v31 = v87;
      }
      id v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
      uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" -- ", 4);
      (*(void (**)(std::locale *__return_ptr))(*(void *)v84.__locale_ + 24))(&v81);
      if ((v83 & 0x80u) == 0) {
        locale = &v81;
      }
      else {
        locale = v81.__locale_;
      }
      if ((v83 & 0x80u) == 0) {
        uint64_t v35 = v83;
      }
      else {
        uint64_t v35 = (uint64_t)v82;
      }
      std::string::size_type v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)locale, v35);
      std::ios_base::getloc((const std::ios_base *)((char *)v36 + *(void *)(*v36 - 24)));
      unint64_t v37 = std::locale::use_facet(&v89, v28);
      ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
      std::locale::~locale(&v89);
      std::ostream::put();
      std::ostream::flush();
      if ((char)v83 < 0)
      {
        operator delete(v81.__locale_);
        if (((char)v88 & 0x80000000) == 0)
        {
LABEL_39:
          uint64_t v38 = v85;
          if (v85) {
            goto LABEL_43;
          }
          goto LABEL_24;
        }
      }
      else if (((char)v88 & 0x80000000) == 0)
      {
        goto LABEL_39;
      }
      operator delete(__p);
      uint64_t v38 = v85;
      if (v85)
      {
LABEL_43:
        if (!atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
LABEL_24:
      v8 += 2;
      if (v8 == v27) {
        return 0;
      }
    }
  }
  uint64_t v13 = (uint64_t *)(v11 + 48);
  int v14 = *(char *)(v11 + 71);
  if (v14 < 0)
  {
    if (*(void *)(v11 + 56) != 5)
    {
LABEL_51:
      long long v40 = *a2;
      (*(void (**)(void **__return_ptr, E5DB::CommandFactory *))(*(void *)a1 + 32))(&__p, a1);
      if ((v88 & 0x80u) == 0) {
        long long v41 = &__p;
      }
      else {
        long long v41 = __p;
      }
      if ((v88 & 0x80u) == 0) {
        uint64_t v42 = v88;
      }
      else {
        uint64_t v42 = v87;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v41, v42);
LABEL_82:
      if ((char)v88 < 0) {
        operator delete(__p);
      }
      return 0;
    }
    uint64_t v13 = (uint64_t *)*v13;
  }
  else if (v14 != 5)
  {
    goto LABEL_51;
  }
  if (*(_DWORD *)v13 != 1935879469 || *((unsigned char *)v13 + 4) != 118) {
    goto LABEL_51;
  }
  int v43 = *(_DWORD *)v13;
  int v44 = *((unsigned __int8 *)v13 + 4);
  BOOL v15 = v43 == 1935879469 && v44 == 118;
  int v16 = *(char *)(v11 + 47);
  if ((v16 & 0x80000000) == 0) {
    goto LABEL_7;
  }
LABEL_65:
  uint64_t v17 = *(void *)(v11 + 24);
  uint64_t v18 = *(void *)(v11 + 32);
  if (v18 == 5)
  {
    if (*(_DWORD *)v17 != 1818307885 || *(unsigned char *)(v17 + 4) != 108)
    {
      uint64_t v18 = 5;
      goto LABEL_71;
    }
LABEL_86:
    if (v10)
    {
      uint64_t v57 = (uint64_t *)&CommandNames[2 * v10];
      if (v15)
      {
        uint64_t v58 = (std::locale::id *)MEMORY[0x1E4FBA258];
        do
        {
          E5DB::CommandFactory::GetCommand(CommandFactory, *v8, v8[1], &v81);
          std::string::size_type v59 = *a2;
          (*(void (**)(void **__return_ptr))(*(void *)v81.__locale_ + 40))(&__p);
          if ((v88 & 0x80u) == 0) {
            int v60 = &__p;
          }
          else {
            int v60 = __p;
          }
          if ((v88 & 0x80u) == 0) {
            uint64_t v61 = v88;
          }
          else {
            uint64_t v61 = v87;
          }
          uint64_t v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v60, v61);
          std::ios_base::getloc((const std::ios_base *)((char *)v62 + *(void *)(*v62 - 24)));
          uint64_t v63 = std::locale::use_facet(&v84, v58);
          ((void (*)(const std::locale::facet *, uint64_t))v63->__vftable[2].~facet_0)(v63, 10);
          std::locale::~locale(&v84);
          std::ostream::put();
          std::ostream::flush();
          if ((char)v88 < 0) {
            operator delete(__p);
          }
          uint64_t v64 = v82;
          if (v82 && !atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
          v8 += 2;
        }
        while (v8 != v57);
      }
      else
      {
        uint64_t v69 = (std::locale::id *)MEMORY[0x1E4FBA258];
        do
        {
          E5DB::CommandFactory::GetCommand(CommandFactory, *v8, v8[1], &v81);
          uint64_t v70 = *a2;
          (*(void (**)(void **__return_ptr))(*(void *)v81.__locale_ + 16))(&__p);
          if ((v88 & 0x80u) == 0) {
            uint64_t v71 = &__p;
          }
          else {
            uint64_t v71 = __p;
          }
          if ((v88 & 0x80u) == 0) {
            uint64_t v72 = v88;
          }
          else {
            uint64_t v72 = v87;
          }
          uint64_t v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)v71, v72);
          std::ios_base::getloc((const std::ios_base *)((char *)v73 + *(void *)(*v73 - 24)));
          uint64_t v74 = std::locale::use_facet(&v84, v69);
          ((void (*)(const std::locale::facet *, uint64_t))v74->__vftable[2].~facet_0)(v74, 10);
          std::locale::~locale(&v84);
          std::ostream::put();
          std::ostream::flush();
          if ((char)v88 < 0) {
            operator delete(__p);
          }
          uint64_t v75 = *a2;
          (*(void (**)(void **__return_ptr))(*(void *)v81.__locale_ + 32))(&__p);
          if ((v88 & 0x80u) == 0) {
            uint64_t v76 = &__p;
          }
          else {
            uint64_t v76 = __p;
          }
          if ((v88 & 0x80u) == 0) {
            uint64_t v77 = v88;
          }
          else {
            uint64_t v77 = v87;
          }
          int64_t v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)v76, v77);
          std::ios_base::getloc((const std::ios_base *)((char *)v78 + *(void *)(*v78 - 24)));
          uint64_t v79 = std::locale::use_facet(&v84, v69);
          ((void (*)(const std::locale::facet *, uint64_t))v79->__vftable[2].~facet_0)(v79, 10);
          std::locale::~locale(&v84);
          std::ostream::put();
          std::ostream::flush();
          if ((char)v88 < 0) {
            operator delete(__p);
          }
          std::string::size_type v80 = v82;
          if (v82 && !atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
          v8 += 2;
        }
        while (v8 != v57);
      }
    }
    return 0;
  }
LABEL_71:
  int IsValidCommandName = E5DB::CommandFactory::IsValidCommandName((uint64_t)CommandFactory, v17, v18);
  int v48 = *a2;
  if (!IsValidCommandName)
  {
    (*(void (**)(void **__return_ptr, E5DB::CommandFactory *))(*(void *)a1 + 32))(&__p, a1);
    if ((v88 & 0x80u) == 0) {
      uint64_t v52 = &__p;
    }
    else {
      uint64_t v52 = __p;
    }
    if ((v88 & 0x80u) == 0) {
      uint64_t v53 = v88;
    }
    else {
      uint64_t v53 = v87;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v52, v53);
    goto LABEL_82;
  }
  if (v15)
  {
    uint64_t v49 = *a3;
    if (*(char *)(*a3 + 47) < 0)
    {
      uint64_t v50 = *(void *)(v49 + 24);
      uint64_t v51 = *(void *)(v49 + 32);
    }
    else
    {
      uint64_t v50 = v49 + 24;
      uint64_t v51 = *(unsigned __int8 *)(*a3 + 47);
    }
    E5DB::CommandFactory::GetCommand(CommandFactory, v50, v51, &v81);
    (*(void (**)(void **__return_ptr))(*(void *)v81.__locale_ + 40))(&__p);
    if ((v88 & 0x80u) == 0) {
      uint64_t v65 = &__p;
    }
    else {
      uint64_t v65 = __p;
    }
    if ((v88 & 0x80u) == 0) {
      uint64_t v66 = v88;
    }
    else {
      uint64_t v66 = v87;
    }
  }
  else
  {
    uint64_t v54 = *a3;
    if (*(char *)(*a3 + 47) < 0)
    {
      uint64_t v55 = *(void *)(v54 + 24);
      uint64_t v56 = *(void *)(v54 + 32);
    }
    else
    {
      uint64_t v55 = v54 + 24;
      uint64_t v56 = *(unsigned __int8 *)(*a3 + 47);
    }
    E5DB::CommandFactory::GetCommand(CommandFactory, v55, v56, &v81);
    (*(void (**)(void **__return_ptr))(*(void *)v81.__locale_ + 32))(&__p);
    if ((v88 & 0x80u) == 0) {
      uint64_t v65 = &__p;
    }
    else {
      uint64_t v65 = __p;
    }
    if ((v88 & 0x80u) == 0) {
      uint64_t v66 = v88;
    }
    else {
      uint64_t v66 = v87;
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v65, v66);
  if ((char)v88 < 0) {
    operator delete(__p);
  }
  uint64_t v67 = v82;
  if (v82 && !atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
    std::__shared_weak_count::__release_weak(v67);
  }
  return 0;
}

void sub_19246BB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, std::locale a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_19246BC70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::locale a24)
{
  if ((a23 & 0x80000000) == 0)
  {
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void E5DB::LoadCommand::GetName(char *a1@<X8>)
{
  a1[23] = 4;
  strcpy(a1, "load");
}

double E5DB::LoadCommand::GetDescription@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (char *)operator new(0x30uLL);
  *(void *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_192DA88D0;
  strcpy(v3, "Load the provided E5 bundle for debugging.");
  return *(double *)"e for debugging.";
}

void *E5DB::LoadCommand::LoadCommand(void *this)
{
  *this = &unk_1EE324558;
  return this;
}

void E5DB::LoadCommand::~LoadCommand(E5DB::LoadCommand *this)
{
}

uint64_t E5DB::LoadCommand::GetHelp(E5DB::LoadCommand *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v15);
  (*(void (**)(void **__return_ptr, E5DB::LoadCommand *))(*(void *)this + 24))(__p, this);
  if ((v14 & 0x80u) == 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  if ((v14 & 0x80u) == 0) {
    uint64_t v3 = v14;
  }
  else {
    uint64_t v3 = (uint64_t)__p[1];
  }
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v2, v3);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v19, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v19);
  std::ostream::put();
  std::ostream::flush();
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v6 = std::locale::use_facet(&v19, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v19);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v14 < 0) {
    operator delete(__p[0]);
  }
  id v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"load <path-to-e5>", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
  unsigned __int8 v8 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Return non-zero code if E5 cannot be loaded on current platform.", 64);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
  uint64_t v10 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  v15[0] = *MEMORY[0x1E4FBA408];
  uint64_t v11 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v15 + *(void *)(v15[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v16[0] = v11;
  v16[1] = MEMORY[0x1E4FBA470] + 16;
  if (v17 < 0) {
    operator delete((void *)v16[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x192FF15B0](&v18);
}

void sub_19246C184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t E5DB::LoadCommand::GetHelpCSV(E5DB::LoadCommand *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
  (*(void (**)(void **__return_ptr, E5DB::LoadCommand *))(*(void *)this + 16))(__p, this);
  if ((v8 & 0x80u) == 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = v8;
  }
  else {
    uint64_t v3 = (uint64_t)__p[1];
  }
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"=[", 2);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"path-to-e5", 10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E4FBA408];
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v9 + *(void *)(v9[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v10[0] = v5;
  v10[1] = MEMORY[0x1E4FBA470] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x192FF15B0](&v12);
}

void sub_19246C3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t E5DB::LoadCommand::Execute(uint64_t a1, double *a2, uint64_t *a3)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (a3[1] - *a3 == 48)
  {
    getpid();
    proc_reset_footprint_interval();
    pid_t v6 = getpid();
    proc_pid_rusage(v6, 6, buffer);
    unint64_t v7 = v50;
    long long v45 = 0;
    uint64_t v8 = *a3;
    if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) <= 1) {
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    }
    if (*(char *)(v8 + 47) < 0) {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v8 + 24), *(void *)(v8 + 32));
    }
    else {
      std::string __str = *(std::string *)(v8 + 24);
    }
    std::string::operator=((std::string *)(a2 + 2), &__str);
    v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v46[0] = &unk_1EE39B448;
    v46[1] = &__str;
    v46[2] = &v45;
    long long v47 = v46;
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 16))(__p, a1);
    int v16 = E5DB::SafeExecute((uint64_t)v46);
    if (v43 < 0)
    {
      operator delete(__p[0]);
      char v17 = v47;
      if (v47 != v46)
      {
LABEL_17:
        if (v17) {
          (*(void (**)(void *))(*v17 + 40))(v17);
        }
        goto LABEL_21;
      }
    }
    else
    {
      char v17 = v47;
      if (v47 != v46) {
        goto LABEL_17;
      }
    }
    (*(void (**)(void *))(v46[0] + 32))(v46);
LABEL_21:
    v18.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    pid_t v19 = getpid();
    proc_pid_rusage(v19, 6, buffer);
    if (v16)
    {
      uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)a2, (uint64_t)"Failed to load E5 bundle @ ", 27);
      int v21 = *((char *)a2 + 39);
      if (v21 >= 0) {
        uint64_t v22 = (uint64_t)(a2 + 2);
      }
      else {
        uint64_t v22 = *((void *)a2 + 2);
      }
      if (v21 >= 0) {
        uint64_t v23 = *((unsigned __int8 *)a2 + 39);
      }
      else {
        uint64_t v23 = *((void *)a2 + 3);
      }
      BOOL v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
    }
    else
    {
      double v25 = (double)v7;
      double v26 = (double)v51;
      double v27 = (double)v50;
      uint64_t v28 = v45;
      long long v45 = 0;
      uint64_t v29 = (void *)*((void *)a2 + 5);
      *((void *)a2 + 5) = v28;
      if (v29) {
        (*(void (**)(void *))(*v29 + 8))(v29);
      }
      a2[6] = v26 - v25;
      a2[7] = v27 - v25;
      a2[8] = (double)((v18.__d_.__rep_ - v15.__d_.__rep_) / 1000);
      id v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)a2, (uint64_t)"Loaded E5 bundle @ ", 19);
      int v31 = *((char *)a2 + 39);
      if (v31 >= 0) {
        uint64_t v32 = (uint64_t)(a2 + 2);
      }
      else {
        uint64_t v32 = *((void *)a2 + 2);
      }
      if (v31 >= 0) {
        uint64_t v33 = *((unsigned __int8 *)a2 + 39);
      }
      else {
        uint64_t v33 = *((void *)a2 + 3);
      }
      uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v32, v33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" in ", 4);
      uint64_t v35 = (void *)std::ostream::operator<<();
      std::string::size_type v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"ms.", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" Incremental peak memory usage during Load: ", 44);
      unint64_t v37 = (void *)std::ostream::operator<<();
      uint64_t v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"KB.", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" Incremental memory usage post Load: ", 37);
      uint64_t v39 = (void *)std::ostream::operator<<();
      BOOL v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"KB.", 3);
    }
    std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24)));
    long long v40 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v40->__vftable[2].~facet_0)(v40, 10);
    std::locale::~locale((std::locale *)__p);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    long long v41 = v45;
    long long v45 = 0;
    if (v41) {
      (*(void (**)(void *))(*v41 + 8))(v41);
    }
    if (v16) {
      return 0x100000000;
    }
    else {
      return 0;
    }
  }
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"LoadCommand: Invalid number of arguments specified.", 51);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
  uint64_t v10 = std::locale::use_facet((const std::locale *)buffer, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale((std::locale *)buffer);
  std::ostream::put();
  std::ostream::flush();
  char v11 = *(void **)a2;
  (*(void (**)(rusage_info_t *__return_ptr, uint64_t))(*(void *)a1 + 32))(buffer, a1);
  if ((v49 & 0x80u) == 0) {
    uint64_t v12 = buffer;
  }
  else {
    uint64_t v12 = (rusage_info_t *)buffer[0];
  }
  if ((v49 & 0x80u) == 0) {
    uint64_t v13 = v49;
  }
  else {
    uint64_t v13 = (uint64_t)buffer[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
  if ((char)v49 < 0) {
    operator delete(buffer[0]);
  }
  return 0x100000000;
}

void sub_19246C990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_19246CA60()
{
}

__n128 sub_19246CA74(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EE39B448;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_19246CAC0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE39B448;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_19246CAF0(uint64_t a1)
{
}

uint64_t sub_19246CB90(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5DB11LoadCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_11char_trait"
                     "sIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5DB11LoadCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_1"
                                "1char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5DB11LoadCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5DB11LoadCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19246CC00()
{
  return &unk_1EE39B4A8;
}

E5DB::E5PortTraceParser *E5DB::E5PortTraceParser::E5PortTraceParser(E5DB::E5PortTraceParser *a1, std::string *a2)
{
  *(void *)a1 = 0;
  *((void *)a1 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = 0;
  *((void *)a1 + 2) = 0;
  memset(&__p, 0, sizeof(__p));
  std::string::size_type v3 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  std::string::size_type size = a2->__r_.__value_.__l.__size_;
  if ((v3 & 0x80u) != 0)
  {
    a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
    std::string::size_type v3 = size;
  }
  std::string::append[abi:ne180100]<char const*,0>(&__p, a2, (std::string *)((char *)a2 + v3));
  E5DB::E5PortTraceParser::Parse(a1, (std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_19246CC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::vector<std::unordered_map<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>::~vector[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void E5DB::E5PortTraceParser::Parse(E5DB::E5PortTraceParser *this, std::__fs::filesystem::path *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v22 = E5DB::GetJSONFromFile(a2, a2);
  BYTE7(v27) = 6;
  strcpy((char *)__p, "frames");
  uint64_t v4 = E5DB::GetValueFromDictionary(v22, (uint64_t *)__p);
  if (SBYTE7(v27) < 0) {
    operator delete(__p[0]);
  }
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  obunint64_t j = v4;
  uint64_t v5 = [obj countByEnumeratingWithState:&v29 objects:v36 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v30;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v30 != v6) {
          objc_enumerationMutation(obj);
        }
        uint64_t v8 = *(void **)(*((void *)&v29 + 1) + 8 * i);
        std::__fs::filesystem::path::__string_view v9 = std::__fs::filesystem::path::__parent_path(a2);
        if (v9.__size_ >= 0x7FFFFFFFFFFFFFF8) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v9.__size_ >= 0x17)
        {
          std::basic_string_view<_CharT, _Traits>::size_type v11 = (v9.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v9.__size_ | 7) != 0x17) {
            std::basic_string_view<_CharT, _Traits>::size_type v11 = v9.__size_ | 7;
          }
          std::basic_string_view<_CharT, _Traits>::size_type v12 = v11 + 1;
          p_dst = (long long *)operator new(v11 + 1);
          *((void *)&__dst + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v9.__size_;
          unint64_t v34 = v12 | 0x8000000000000000;
          *(void *)&long long __dst = p_dst;
LABEL_16:
          memmove(p_dst, v9.__data_, v9.__size_);
          goto LABEL_17;
        }
        HIBYTE(v34) = v9.__size_;
        p_dst = &__dst;
        if (v9.__size_) {
          goto LABEL_16;
        }
LABEL_17:
        *((unsigned char *)p_dst + v9.__size_) = 0;
        *(_OWORD *)BOOL v24 = __dst;
        unint64_t v25 = v34;
        id v13 = v8;
        *(_OWORD *)std::string __p = 0u;
        long long v27 = 0u;
        int v28 = 1065353216;
        *(void *)&long long __dst = &v35;
        *((void *)&__dst + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = __p;
        unint64_t v34 = (unint64_t)v24;
        id v35 = v13;
        sub_19246D1F4((uint64_t)&__dst, "inputPorts");
        sub_19246D1F4((uint64_t)&__dst, "inOutPorts");
        sub_19246D1F4((uint64_t)&__dst, "outputPorts");

        if (SHIBYTE(v25) < 0)
        {
          operator delete(v24[0]);
          unint64_t v14 = *((void *)this + 1);
          if (v14 >= *((void *)this + 2))
          {
LABEL_23:
            uint64_t v20 = std::vector<std::unordered_map<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>::__push_back_slow_path<std::unordered_map<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>((void **)this, (uint64_t *)__p);
            goto LABEL_28;
          }
        }
        else
        {
          unint64_t v14 = *((void *)this + 1);
          if (v14 >= *((void *)this + 2)) {
            goto LABEL_23;
          }
        }
        std::chrono::steady_clock::time_point v15 = __p[0];
        __p[0] = 0;
        *(void *)unint64_t v14 = v15;
        *(void **)(v14 + 8) = __p[1];
        __p[1] = 0;
        uint64_t v16 = v27;
        *(void *)(v14 + 16) = v27;
        uint64_t v17 = *((void *)&v27 + 1);
        *(void *)(v14 + 24) = *((void *)&v27 + 1);
        *(_DWORD *)(v14 + 32) = v28;
        if (v17)
        {
          unint64_t v18 = *(void *)(v16 + 8);
          unint64_t v19 = *(void *)(v14 + 8);
          if ((v19 & (v19 - 1)) != 0)
          {
            if (v18 >= v19) {
              v18 %= v19;
            }
          }
          else
          {
            v18 &= v19 - 1;
          }
          v15[v18] = v14 + 16;
          long long v27 = 0uLL;
        }
        uint64_t v20 = (char *)(v14 + 40);
LABEL_28:
        *((void *)this + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v20;
        std::__hash_table<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>>::__deallocate_node((int)__p, (char *)v27);
        int v21 = __p[0];
        __p[0] = 0;
        if (v21) {
          operator delete(v21);
        }
      }
      uint64_t v5 = [obj countByEnumeratingWithState:&v29 objects:v36 count:16];
    }
    while (v5);
  }
}

void sub_19246D000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  _Unwind_Resume(a1);
}

void **std::vector<std::unordered_map<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (char **)*a1;
  if (*a1)
  {
    std::string::size_type v3 = (char **)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 5;
      do
      {
        std::__hash_table<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>>::__deallocate_node((int)v5, v5[2]);
        unint64_t v7 = *v5;
        *uint64_t v5 = 0;
        if (v7) {
          operator delete(v7);
        }
        BOOL v6 = v5 == v2;
        v5 -= 5;
      }
      while (!v6);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t std::unordered_map<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

uint64_t *E5DB::E5PortTraceParser::GetPortData@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a3) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  __n128 result = std::__hash_table<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>>::find<std::string>((void *)(*a1 + 40 * a3), a2);
  if (!result) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v6 = result[6];
  *a4 = result[5];
  a4[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = result[8];
  a4[2] = result[7];
  a4[3] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_19246D1F4(uint64_t a1, char *__s)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  std::string::size_type v3 = **(void ***)a1;
  size_t v4 = strlen(__s);
  if (v4 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = (void **)operator new(v7 + 1);
    __dst[1] = v5;
    unint64_t v26 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_8;
  }
  HIBYTE(v26) = v4;
  uint64_t v6 = __dst;
  if (v4) {
LABEL_8:
  }
    memcpy(v6, __s, (size_t)v5);
  *((unsigned char *)v5 + (void)v6) = 0;
  std::__fs::filesystem::path::__string_view v9 = E5DB::GetValueFromDictionary(v3, (uint64_t *)__dst);
  if (SHIBYTE(v26) < 0) {
    operator delete(__dst[0]);
  }
  memset(v27, 0, sizeof(v27));
  obunint64_t j = v9;
  if ([obj countByEnumeratingWithState:v27 objects:v32 count:16])
  {
    uint64_t v10 = *(void *)(a1 + 16);
    id v11 = [obj valueForKey:**((void **)&v27[0] + 1)];
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 4;
    strcpy((char *)&__p, "File");
    E5DB::GetValueFromDictionary(v11, (uint64_t *)&__p);
    id v22 = (id)objc_claimAutoreleasedReturnValue();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 6;
    strcpy((char *)&__p, "Offset");
    std::basic_string_view<_CharT, _Traits>::size_type v12 = E5DB::GetValueFromDictionary(v11, (uint64_t *)&__p);
    [v12 unsignedIntegerValue];

    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    id v13 = (std::string *)[v22 UTF8String];
    memset(&__p, 0, sizeof(__p));
    unint64_t v14 = (std::string *)((char *)v13 - 1);
    do
    {
      int v15 = v14->__r_.__value_.__s.__data_[1];
      unint64_t v14 = (std::string *)((char *)v14 + 1);
    }
    while (v15);
    std::string::append[abi:ne180100]<char const*,0>(&__p, v13, v14);
    std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, v10, &v29);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 8;
    strcpy((char *)&__p, "PortType");
    uint64_t v16 = E5DB::GetValueFromDictionary(v11, (uint64_t *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 11;
    strcpy((char *)&__p, "Description");
    E5DB::GetValueFromDictionary(v11, (uint64_t *)&__p);
    BOOL v24 = (E5RT *)objc_claimAutoreleasedReturnValue();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ([v16 isEqual:@"Tensor"]) {
      E5RT::GetTensorDescriptor(v24, (uint64_t)&v30);
    }
    if ([v16 isEqual:@"Surface"]) {
      E5RT::GetSurfaceDescriptor(v24, v17);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v28, (char *)[v16 UTF8String]);
    unint64_t v19 = std::string::insert(&v28, 0, "Invalid PortType in port info dict: ");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &__p);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
}

void sub_19246DC2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    std::string::size_type v3 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v3) {
      return a1;
    }
  }
  else
  {
    std::string::size_type v3 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v3) {
      return a1;
    }
  }
  if (atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v44, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    unint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      int v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          uint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = *((void *)v15 + 1);
            if (v22 == v11)
            {
              uint64_t v23 = v15[39];
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = v15[39];
              }
              else {
                uint64_t v24 = *((void *)v15 + 3);
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v15 + 2), v6, *((void *)v15 + 3))) {
                    return v15;
                  }
                }
                else
                {
                  if (!v15[39]) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (v15[v25 + 16] == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            int v15 = *(unsigned __int8 **)v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = *((void *)v15 + 1);
          if (v18 == v11)
          {
            uint64_t v19 = v15[39];
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = v15[39];
            }
            else {
              uint64_t v20 = *((void *)v15 + 3);
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v6, *((void *)v15 + 3))) {
                  return v15;
                }
              }
              else
              {
                if (!v15[39]) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (v15[v21 + 16] == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          int v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  unint64_t v26 = (void *)(a1 + 16);
  int v15 = (unsigned __int8 *)operator new(0x48uLL);
  uint64_t v45 = a1 + 16;
  *(void *)int v15 = 0;
  *((void *)v15 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v11;
  long long v27 = *a4;
  long long v28 = **a4;
  *((void *)v15 + 4) = *((void *)*a4 + 2);
  *((_OWORD *)v15 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v28;
  *((void *)v27 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = 0;
  *((void *)v27 + 2) = 0;
  *(void *)long long v27 = 0;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  char v46 = 1;
  float v29 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v30 = *(float *)(a1 + 32);
  if (v12 && (float)(v30 * (float)v12) >= v29)
  {
    uint64_t v31 = *(void *)a1;
    long long v32 = *(void **)(*(void *)a1 + 8 * v4);
    if (v32)
    {
LABEL_54:
      *(void *)int v15 = *v32;
LABEL_89:
      *long long v32 = v15;
      goto LABEL_90;
    }
  }
  else
  {
    BOOL v33 = 1;
    if (v12 >= 3) {
      BOOL v33 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v34 = v33 | (2 * v12);
    unint64_t v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35) {
      size_t prime = v35;
    }
    else {
      size_t prime = v34;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v37) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v37)
    {
      unint64_t v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v37 < 3uLL || (uint8x8_t v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        unint64_t v38 = std::__next_prime(v38);
      }
      else
      {
        uint64_t v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2) {
          unint64_t v38 = v40;
        }
      }
      if (prime <= v38) {
        size_t prime = v38;
      }
      if (prime < *(void *)&v37) {
LABEL_65:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v41 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v31 = *(void *)a1;
        long long v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        if (v32) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v31 = *(void *)a1;
        long long v32 = *(void **)(*(void *)a1 + 8 * v11);
        if (v32) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v4 = v41 & v11;
      uint64_t v31 = *(void *)a1;
      long long v32 = *(void **)(*(void *)a1 + 8 * (v41 & v11));
      if (v32) {
        goto LABEL_54;
      }
    }
  }
  *(void *)int v15 = *v26;
  *unint64_t v26 = v15;
  *(void *)(v31 + 8 * v4) = v26;
  if (*(void *)v15)
  {
    unint64_t v42 = *(void *)(*(void *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v42 >= v12) {
        v42 %= v12;
      }
    }
    else
    {
      v42 &= v12 - 1;
    }
    long long v32 = (void *)(*(void *)a1 + 8 * v42);
    goto LABEL_89;
  }
LABEL_90:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_19246E454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, char *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    std::string::size_type v3 = (std::__shared_weak_count *)*((void *)__p + 8);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    unint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 6);
    if (!v4 || atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      if ((__p[39] & 0x80000000) == 0) {
        goto LABEL_8;
      }
LABEL_14:
      operator delete(*((void **)__p + 2));
      uint64_t v5 = __p;
      goto LABEL_10;
    }
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (__p[39] < 0) {
      goto LABEL_14;
    }
LABEL_8:
    uint64_t v5 = __p;
LABEL_10:
    operator delete(v5);
    return;
  }
  if (__p) {
    goto LABEL_8;
  }
}

char *std::vector<std::unordered_map<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>::__push_back_slow_path<std::unordered_map<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>(void **a1, uint64_t *a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x333333333333333) {
    unint64_t v6 = 0x666666666666666;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x666666666666666) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(40 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  unint64_t v8 = &v7[40 * v3];
  uint64_t v9 = *a2;
  unint64_t v10 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  *(void *)unint64_t v8 = v9;
  *((void *)v8 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v10;
  uint64_t v11 = a2[2];
  *((void *)v8 + 2) = v11;
  uint64_t v12 = a2[3];
  *((void *)v8 + 3) = v12;
  *((_DWORD *)v8 + 8) = *((_DWORD *)a2 + 8);
  if (v12)
  {
    unint64_t v13 = *(void *)(v11 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      BOOL v15 = v13 >= v10;
      unint64_t v14 = v13 % v10;
      if (!v15) {
        unint64_t v14 = v13;
      }
    }
    else
    {
      unint64_t v14 = v13 & (v10 - 1);
    }
    *(void *)(v9 + 8 * v14) = v8 + 16;
    a2[2] = 0;
    a2[3] = 0;
  }
  char v16 = &v7[40 * v6];
  uint64_t v17 = v8 + 40;
  unint64_t v18 = (char *)*a1;
  uint64_t v19 = (char **)a1[1];
  if (v19 == *a1)
  {
    *a1 = v8;
    a1[1] = v17;
    a1[2] = v16;
  }
  else
  {
    uint64_t v20 = 0;
    do
    {
      uint64_t v22 = &v8[v20 * 8];
      uint64_t v23 = (char *)&v19[v20];
      uint64_t v24 = v19[v20 - 5];
      *((void *)v23 - 5) = 0;
      *((void *)v22 - 5) = v24;
      *((void *)v22 - 4) = v19[v20 - 4];
      *((void *)v23 - 4) = 0;
      uint64_t v25 = v19[v20 - 3];
      *(void *)&v8[v20 * 8 - 24] = v25;
      unint64_t v26 = v19[v20 - 2];
      *((void *)v22 - 2) = v26;
      *((_DWORD *)v22 - 2) = v19[v20 - 1];
      if (v26)
      {
        unint64_t v21 = *((void *)v25 + 1);
        unint64_t v27 = *((void *)v22 - 4);
        if ((v27 & (v27 - 1)) != 0)
        {
          if (v21 >= v27) {
            v21 %= v27;
          }
        }
        else
        {
          v21 &= v27 - 1;
        }
        *(void *)&v24[8 * v21] = &v8[v20 * 8 - 24];
        v19[v20 - 3] = 0;
        v19[v20 - 2] = 0;
      }
      v20 -= 5;
    }
    while (&v19[v20] != (char **)v18);
    uint64_t v19 = (char **)*a1;
    long long v28 = (char *)a1[1];
    *a1 = &v8[v20 * 8];
    a1[1] = v17;
    a1[2] = v16;
    if (v28 == (char *)v19)
    {
      uint64_t v19 = (char **)v28;
      if (!v28) {
        return v17;
      }
      goto LABEL_33;
    }
    float v29 = (char **)(v28 - 40);
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>>::__deallocate_node((int)v29, v29[2]);
      uint64_t v31 = *v29;
      *float v29 = 0;
      if (v31) {
        operator delete(v31);
      }
      BOOL v30 = v29 == v19;
      v29 -= 5;
    }
    while (!v30);
  }
  if (v19) {
LABEL_33:
  }
    operator delete(v19);
  return v17;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>>::find<std::string>(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    unint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          __n128 result = 0;
          unint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        __n128 result = 0;
        unint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

void E5DB::ParseOptions(char **a1, uint64_t a2, const option **a3, uint64_t a4)
{
  uint64_t v4 = a4;
  unint64_t v5 = a3;
  std::string __p = 0;
  unint64_t v38 = 0;
  int8x8_t v7 = *a1;
  unint64_t v8 = (uint64_t *)a1[1];
  if (*a1 == (char *)v8)
  {
    float v29 = 0;
    long long v28 = *a1;
    goto LABEL_35;
  }
  uint8x8_t v9 = 0;
  do
  {
    uint64_t v11 = v7;
    if (v7[23] < 0)
    {
      uint64_t v11 = *(char **)v7;
      uint64_t v12 = v38;
      if (v9 < v38)
      {
LABEL_3:
        *(void *)uint8x8_t v9 = v11;
        uint64_t v10 = (uint64_t)(v9 + 8);
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v12 = v38;
      if (v9 < v38) {
        goto LABEL_3;
      }
    }
    uint64_t v13 = (v9 - __p) >> 3;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v12 - __p;
    if (v15 >> 2 > v14) {
      unint64_t v14 = v15 >> 2;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v17 = operator new(8 * v16);
      uint64_t v18 = &v17[8 * v13];
      *(void *)uint64_t v18 = v11;
      uint64_t v10 = (uint64_t)(v18 + 8);
      if (v9 == __p)
      {
LABEL_24:
        std::string __p = v18;
        unint64_t v38 = &v17[8 * v16];
        if (!v9) {
          goto LABEL_4;
        }
LABEL_25:
        operator delete(v9);
        goto LABEL_4;
      }
    }
    else
    {
      unint64_t v17 = 0;
      uint64_t v18 = (char *)(8 * v13);
      *(void *)(8 * v13) = v11;
      uint64_t v10 = 8 * v13 + 8;
      if (v9 == __p) {
        goto LABEL_24;
      }
    }
    unint64_t v19 = v9 - 8 - __p;
    if (v19 < 0x168
      || &v17[v9 - __p - 8 - (v19 & 0xFFFFFFFFFFFFFFF8)] > &v17[v9 - __p - 8]
      || &v9[-(v19 & 0xFFFFFFFFFFFFFFF8) - 8] > v9 - 8
      || (unint64_t)(__p - v17) < 0x20)
    {
      uint64_t v20 = v9;
      do
      {
LABEL_20:
        uint64_t v21 = *((void *)v20 - 1);
        v20 -= 8;
        *((void *)v18 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v21;
        v18 -= 8;
      }
      while (v20 != __p);
      goto LABEL_21;
    }
    uint64_t v22 = (v19 >> 3) + 1;
    uint64_t v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v20 = &v9[-v23];
    v18 -= v23;
    uint64_t v24 = &v17[8 * v13 - 16];
    char v25 = v9 - 16;
    uint64_t v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v27 = *(_OWORD *)v25;
      *(v24 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = *((_OWORD *)v25 - 1);
      *uint64_t v24 = v27;
      v24 -= 2;
      v25 -= 32;
      v26 -= 4;
    }
    while (v26);
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_20;
    }
LABEL_21:
    uint8x8_t v9 = __p;
    std::string __p = v18;
    unint64_t v38 = &v17[8 * v16];
    if (v9) {
      goto LABEL_25;
    }
LABEL_4:
    v7 += 24;
    uint8x8_t v9 = (char *)v10;
  }
  while (v7 != (char *)v8);
  uint64_t v4 = a4;
  int8x8_t v7 = *a1;
  long long v28 = a1[1];
  float v29 = (char **)__p;
  unint64_t v5 = a3;
LABEL_35:
  int v30 = -1431655765 * ((unint64_t)(v28 - v7) >> 3);
  while (1)
  {
    uint64_t v31 = *(char *)(a2 + 23) >= 0 ? (const char *)a2 : *(const char **)a2;
    int v32 = getopt_long(v30, v29, v31, *v5, 0);
    if (v32 == -1) {
      break;
    }
    int v39 = v32;
    uint64_t v33 = *(void *)(v4 + 24);
    if (!v33) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, int *))(*(void *)v33 + 48))(v33, &v39);
  }
  *MEMORY[0x1E4F149F8] = 0;
  if (v29) {
    operator delete(v29);
  }
}

void sub_19246ECCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (v14) {
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void E5DB::PsnrCheckCommand::GetName(char *a1@<X8>)
{
  a1[23] = 10;
  strcpy(a1, "psnr_check");
}

char *E5DB::PsnrCheckCommand::GetDescription@<X0>(uint64_t a1@<X8>)
{
  __n128 result = (char *)operator new(0x58uLL);
  *(void *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_192DBEA70;
  strcpy(result, "Compute the PSNR of output tensors for the loaded E5 bundle on current platform.");
  return result;
}

void *E5DB::PsnrCheckCommand::PsnrCheckCommand(void *this)
{
  *this = &unk_1EE3245A0;
  return this;
}

void E5DB::PsnrCheckCommand::~PsnrCheckCommand(E5DB::PsnrCheckCommand *this)
{
}

uint64_t E5DB::PsnrCheckCommand::GetHelp(E5DB::PsnrCheckCommand *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v29);
  (*(void (**)(void **__return_ptr, E5DB::PsnrCheckCommand *))(*(void *)this + 24))(__p, this);
  if ((v28 & 0x80u) == 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  if ((v28 & 0x80u) == 0) {
    uint64_t v3 = v28;
  }
  else {
    uint64_t v3 = (uint64_t)__p[1];
  }
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v2, v3);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v33, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v33);
  std::ostream::put();
  std::ostream::flush();
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v6 = std::locale::use_facet(&v33, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v33);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v28 < 0) {
    operator delete(__p[0]);
  }
  int8x8_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"psnr_check [options]", 20);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
  unint64_t v8 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint8x8_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"This command will run PSNR check for a function (if specified).\nBy default, it runs the PSNR check for all public functions on the current platform.", 148);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
  uint64_t v10 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Options:", 8);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  uint64_t v12 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"-f | --function [function]   : PSNR check for function. Default = * (all)", 73);
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
  unint64_t v14 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"-o | --outfile [output file] : Dump PSNR output to file. Default = stdout", 73);
  std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
  unint64_t v16 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  unint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"-t | --format [format type]  : Output format among [json]. Default = json", 73);
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  uint64_t v18 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  unint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"-i | --intermediate          : PSNR check for intermediate values. Default = false", 82);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
  uint64_t v20 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"-m | --model [mil model]     : Path to mil model. Used to compute reference values. Required if -i is set.", 106);
  std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
  uint64_t v22 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"-r | --reference-vectors-config [reference vectors config file] : Config file for regression test vectors. If omitted, then random inputs are used.", 147);
  std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24)));
  uint64_t v24 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  v29[0] = *MEMORY[0x1E4FBA408];
  uint64_t v25 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v29 + *(void *)(v29[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v30[0] = v25;
  v30[1] = MEMORY[0x1E4FBA470] + 16;
  if (v31 < 0) {
    operator delete((void *)v30[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x192FF15B0](&v32);
}

void sub_19246F584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t E5DB::PsnrCheckCommand::GetHelpCSV(E5DB::PsnrCheckCommand *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v31);
  uint64_t v2 = operator new(0xE0uLL);
  *((_OWORD *)v2 + 10) = xmmword_1E5746628;
  *((_OWORD *)v2 + 1E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = unk_1E5746638;
  *((_OWORD *)v2 + 12) = xmmword_1E5746648;
  *((_OWORD *)v2 + 13) = unk_1E5746658;
  *((_OWORD *)v2 + 6) = xmmword_1E57465E8;
  *((_OWORD *)v2 + 7) = unk_1E57465F8;
  *((_OWORD *)v2 + 8) = xmmword_1E5746608;
  *((_OWORD *)v2 + 9) = unk_1E5746618;
  *((_OWORD *)v2 + 2) = xmmword_1E57465A8;
  *((_OWORD *)v2 + 3) = unk_1E57465B8;
  *((_OWORD *)v2 + 4) = xmmword_1E57465C8;
  *((_OWORD *)v2 + 5) = unk_1E57465D8;
  *(_OWORD *)uint64_t v2 = xmmword_1E5746588;
  *((_OWORD *)v2 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = *(_OWORD *)algn_1E5746598;
  (*(void (**)(void **__return_ptr, E5DB::PsnrCheckCommand *))(*(void *)this + 16))(__p, this);
  if ((v30 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v30 & 0x80u) == 0) {
    uint64_t v4 = v30;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"=[", 2);
  if ((char)v30 < 0)
  {
    operator delete(__p[0]);
    unint64_t v6 = *(const char **)v2;
    if (!*(void *)v2) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  unint64_t v6 = *(const char **)v2;
  if (*(void *)v2)
  {
LABEL_11:
    size_t v7 = strlen(v6);
    unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v6, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)",", 1);
  }
LABEL_12:
  uint64_t v9 = *((void *)v2 + 4);
  if (v9)
  {
    size_t v10 = strlen(*((const char **)v2 + 4));
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v9, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)",", 1);
  }
  uint64_t v12 = *((void *)v2 + 8);
  if (v12)
  {
    size_t v13 = strlen(*((const char **)v2 + 8));
    unint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)",", 1);
  }
  uint64_t v15 = *((void *)v2 + 12);
  if (v15)
  {
    size_t v16 = strlen(*((const char **)v2 + 12));
    unint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v15, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)",", 1);
  }
  uint64_t v18 = *((void *)v2 + 16);
  if (v18)
  {
    size_t v19 = strlen(*((const char **)v2 + 16));
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v18, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)",", 1);
  }
  uint64_t v21 = *((void *)v2 + 20);
  if (v21)
  {
    size_t v22 = strlen(*((const char **)v2 + 20));
    uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v21, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)",", 1);
  }
  uint64_t v24 = *((void *)v2 + 24);
  if (v24)
  {
    size_t v25 = strlen(*((const char **)v2 + 24));
    uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v24, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)",", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"]", 1);
  std::stringbuf::str();
  operator delete(v2);
  v31[0] = *MEMORY[0x1E4FBA408];
  uint64_t v27 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v31 + *(void *)(v31[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v32[0] = v27;
  v32[1] = MEMORY[0x1E4FBA470] + 16;
  if (v33 < 0) {
    operator delete((void *)v32[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x192FF15B0](&v34);
}

void sub_19246F9AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  operator delete(v15);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void E5DB::PsnrCheckCommand::ExecutePriv(uint64_t a1, uint64_t a2, char **a3)
{
  v116[19] = *MEMORY[0x1E4F143B8];
  if ((*(char *)(a2 + 39) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a2 + 39)) {
      goto LABEL_3;
    }
LABEL_11:
    size_t v7 = *(void ***)a2;
    (*(void (**)(void **__return_ptr))(*(void *)a1 + 32))(&__p);
    if ((v113 & 0x80u) == 0) {
      p_std::string p = &__p;
    }
    else {
      p_std::string p = __p;
    }
    if ((v113 & 0x80u) == 0) {
      uint64_t v9 = v113;
    }
    else {
      uint64_t v9 = v112;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)p_p, v9);
    if ((char)v113 < 0) {
      operator delete(__p);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "E5 bundle path not specified.");
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  if (!*(void *)(a2 + 24)) {
    goto LABEL_11;
  }
LABEL_3:
  if (!*(void *)(a2 + 40))
  {
    uint64_t v67 = *(void ***)a2;
    (*(void (**)(void **__return_ptr))(*(void *)a1 + 32))(&__p);
    if ((v113 & 0x80u) == 0) {
      unsigned int v68 = &__p;
    }
    else {
      unsigned int v68 = __p;
    }
    if ((v113 & 0x80u) == 0) {
      uint64_t v69 = v113;
    }
    else {
      uint64_t v69 = v112;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v68, v69);
    if ((char)v113 < 0) {
      operator delete(__p);
    }
    uint64_t v70 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v70, "E5 bundle not loaded. Cannot check PSNR.");
    __cxa_throw(v70, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  char v103 = 1;
  LOWORD(v102[0]) = 42;
  LOBYTE(v99) = 0;
  char v101 = 0;
  char v98 = 4;
  strcpy((char *)v97, "json");
  LOBYTE(v94[0]) = 0;
  unsigned __int8 v96 = 0;
  LOBYTE(v91[0]) = 0;
  char v93 = 0;
  unsigned __int8 v90 = 0;
  unint64_t v5 = operator new(0xE0uLL);
  *(void *)&v106[16] = v5 + 14;
  v5[10] = xmmword_1E5746628;
  void v5[11] = unk_1E5746638;
  v5[12] = xmmword_1E5746648;
  v5[13] = unk_1E5746658;
  v5[6] = xmmword_1E57465E8;
  v5[7] = unk_1E57465F8;
  unsigned char v5[8] = xmmword_1E5746608;
  v5[9] = unk_1E5746618;
  v5[2] = xmmword_1E57465A8;
  void v5[3] = unk_1E57465B8;
  v5[4] = xmmword_1E57465C8;
  v5[5] = unk_1E57465D8;
  *unint64_t v5 = xmmword_1E5746588;
  v5[1] = *(_OWORD *)algn_1E5746598;
  *(void *)id v106 = v5;
  *(void *)&v106[8] = v5 + 14;
  char v105 = 11;
  strcpy((char *)v104, "f:o:t:r:im:");
  unint64_t v6 = (void **)operator new(0x38uLL);
  const char *v6 = &unk_1EE39B4C8;
  v6[1] = v102;
  void v6[2] = &v99;
  void v6[3] = v97;
  v6[4] = v94;
  v6[5] = v91;
  v6[6] = &v90;
  std::string::size_type v114 = v6;
  E5DB::ParseOptions(a3, (uint64_t)v104, (const option **)v106, (uint64_t)&__p);
  if (v114 == &__p)
  {
    (*((void (**)(void **))__p + 4))(&__p);
    if ((v105 & 0x80000000) == 0) {
      goto LABEL_8;
    }
  }
  else
  {
    if (v114) {
      (*((void (**)(void))*v114 + 5))();
    }
    if ((v105 & 0x80000000) == 0)
    {
LABEL_8:
      if (!v90) {
        goto LABEL_23;
      }
      goto LABEL_22;
    }
  }
  operator delete(v104[0]);
  if (!v90) {
    goto LABEL_23;
  }
LABEL_22:
  if (!v93)
  {
    uint64_t v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v71, "-m is required when -i is set");
    __cxa_throw(v71, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_23:
  if (*(void *)v106)
  {
    *(void *)&v106[8] = *(void *)v106;
    operator delete(*(void **)v106);
  }
  uint64_t v11 = *(void ***)a2;
  uint64_t v12 = MEMORY[0x1E4FBA468] + 64;
  v116[0] = MEMORY[0x1E4FBA468] + 64;
  uint64_t v13 = MEMORY[0x1E4FBA400];
  unint64_t v14 = *(void **)(MEMORY[0x1E4FBA400] + 16);
  std::string __p = *(void **)(MEMORY[0x1E4FBA400] + 8);
  *(void **)((char *)&__p + *((void *)__p - E5RT::Status::~Status((E5RT::Status *)(this + 3)) = v14;
  uint64_t v15 = (std::ios_base *)((char *)&__p + *((void *)__p - 3));
  std::ios_base::init(v15, &v112);
  size_t v16 = (void *)(MEMORY[0x1E4FBA468] + 24);
  v15[1].__vftable = 0;
  v15[1].__fmtflags_ = -1;
  std::string __p = v16;
  v116[0] = v12;
  unint64_t v17 = (E5Common::E5PlatformManager *)MEMORY[0x192FF1030](&v112);
  if (v101)
  {
    uint64_t v11 = &__p;
    unint64_t v17 = (E5Common::E5PlatformManager *)std::ofstream::open();
    if ((v115[*((void *)__p - 3)] & 5) != 0)
    {
      uint64_t v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v74, "Unable to open output file.");
      __cxa_throw(v74, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  uint64_t v18 = E5Common::E5PlatformManager::Instance(v17);
  uint64_t v19 = a2 + 16;
  E5RT::GetPlatformsInCompositeBundle(a2 + 16, (uint64_t)v104);
  CurrentPlatforunint64_t m = E5RT::GetCurrentPlatform(v20);
  int v89 = 0;
  *(void *)id v106 = CurrentPlatform;
  *(_DWORD *)&v106[8] = 0;
  uint64_t v21 = (char *)operator new(0x10uLL);
  uint64_t v76 = v11;
  uint64_t v86 = v21 + 16;
  uint64_t v87 = v21 + 16;
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v106;
  uint64_t v85 = v21;
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v106);
  *(_OWORD *)&v84.__r_.__value_.__l.__data_ = *(_OWORD *)v21;
  uint64_t v22 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)v18 + 24))(v18, &v84);
  uint64_t v23 = (const void **)v22;
  uint64_t v24 = v104[0];
  size_t v25 = v104[1];
  if (v104[0] != v104[1])
  {
    char v26 = *(unsigned char *)(v22 + 23);
    if (v26 >= 0) {
      uint64_t v27 = *(unsigned __int8 *)(v22 + 23);
    }
    else {
      uint64_t v27 = *(void *)(v22 + 8);
    }
    if (v26 >= 0) {
      unsigned __int8 v28 = (unsigned __int8 *)v22;
    }
    else {
      unsigned __int8 v28 = *(unsigned __int8 **)v22;
    }
    do
    {
      uint64_t v29 = *((unsigned __int8 *)v24 + 23);
      if ((v29 & 0x80u) == 0) {
        uint64_t v30 = *((unsigned __int8 *)v24 + 23);
      }
      else {
        uint64_t v30 = v24[1];
      }
      if (v30 == v27)
      {
        if ((v29 & 0x80) != 0)
        {
          if (!memcmp((const void *)*v24, v28, v24[1])) {
            goto LABEL_45;
          }
        }
        else
        {
          if (!*((unsigned char *)v24 + 23)) {
            goto LABEL_45;
          }
          uint64_t v31 = 0;
          while (*((unsigned __int8 *)v24 + v31) == v28[v31])
          {
            if (v29 == ++v31) {
              goto LABEL_45;
            }
          }
        }
      }
      v24 += 3;
    }
    while (v24 != v25);
    uint64_t v24 = v25;
  }
LABEL_45:
  if (v24 == v25)
  {
    uint64_t v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" is not found in E5 bundle.", v23, v106);
    std::runtime_error::runtime_error(v72, (const std::string *)v106);
    __cxa_throw(v72, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v84);
  memset(v106, 0, sizeof(v106));
  int v107 = 1065353216;
  uint64_t v109 = 0;
  uint64_t v110 = 0;
  uint64_t v108 = 0;
  int v32 = v96;
  if (v96)
  {
    memset(&v84, 0, sizeof(v84));
    unint64_t v33 = v95;
    if ((v95 & 0x80u) == 0) {
      uint64_t v34 = (std::string *)v94;
    }
    else {
      uint64_t v34 = (std::string *)v94[0];
    }
    if ((v95 & 0x80u) != 0) {
      unint64_t v33 = (unint64_t)v94[1];
    }
    std::string::append[abi:ne180100]<char const*,0>(&v84, v34, (std::string *)((char *)v34 + v33));
    E5DB::RegressionTestConfigParser::Parse((E5DB::RegressionTestConfigParser *)v106, (std::__fs::filesystem::path *)&v84);
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v84.__r_.__value_.__l.__data_);
    }
  }
  else if (!v93)
  {
    v84.__r_.__value_.__r.__words[0] = 0;
    LODWORD(v84.__r_.__value_.__r.__words[1]) = 0;
    uint64_t v35 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)v18 + 24))(v18, &v84);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v84);
    std::string::size_type v36 = v104[0];
    int8x8_t v37 = v104[1];
    if (v104[0] != v104[1])
    {
      char v38 = *(unsigned char *)(v35 + 23);
      if (v38 >= 0) {
        uint64_t v39 = *(unsigned __int8 *)(v35 + 23);
      }
      else {
        uint64_t v39 = *(void *)(v35 + 8);
      }
      if (v38 >= 0) {
        uint64_t v40 = (unsigned __int8 *)v35;
      }
      else {
        uint64_t v40 = *(unsigned __int8 **)v35;
      }
      do
      {
        uint64_t v41 = *((unsigned __int8 *)v36 + 23);
        if ((v41 & 0x80u) == 0) {
          uint64_t v42 = *((unsigned __int8 *)v36 + 23);
        }
        else {
          uint64_t v42 = v36[1];
        }
        if (v42 == v39)
        {
          if ((v41 & 0x80) != 0)
          {
            if (!memcmp((const void *)*v36, v40, v36[1])) {
              goto LABEL_73;
            }
          }
          else
          {
            if (!*((unsigned char *)v36 + 23)) {
              goto LABEL_73;
            }
            uint64_t v43 = 0;
            while (*((unsigned __int8 *)v36 + v43) == v40[v43])
            {
              if (v41 == ++v43) {
                goto LABEL_73;
              }
            }
          }
        }
        v36 += 3;
      }
      while (v36 != v37);
      std::string::size_type v36 = v37;
    }
LABEL_73:
    if (v36 == v37)
    {
      uint64_t v75 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" is not found in E5 bundle.", (const void **)v35, &v84);
      std::runtime_error::runtime_error(v75, &v84);
      __cxa_throw(v75, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  int v44 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionary", v76, &v112);
  if (v103 < 0)
  {
    if (v102[1] != (void *)1 || *(unsigned char *)v102[0] != 42) {
      goto LABEL_91;
    }
  }
  else if (v103 != 1 || LOBYTE(v102[0]) != 42)
  {
LABEL_91:
    std::locale v81 = 0;
    uint64_t v82 = 0;
    unsigned __int8 v83 = 0;
    uint64_t v53 = v85;
    uint64_t v54 = v86 - (unsigned char *)v85;
    if (v86 != v85)
    {
      if (v54 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      std::locale v81 = operator new(v86 - (unsigned char *)v85);
      unsigned __int8 v83 = (char *)v81 + 16 * (v54 >> 4);
      size_t v55 = v54 & 0xFFFFFFFFFFFFFFF0;
      memcpy(v81, v53, v55);
      uint64_t v82 = (char *)v81 + v55;
    }
    sub_192470AB0((uint64_t)v102, v19, (long long **)&v81, v32 == 0, (E5DB::RegressionTestConfigParser *)v106, (uint64_t)v91, v90, v44);
    uint64_t v56 = (char *)v81;
    if (v81)
    {
      uint64_t v57 = v82;
      uint64_t v58 = v81;
      if (v82 != v81)
      {
        do
          E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v57 - 16));
        while (v57 != v56);
        uint64_t v58 = v81;
      }
      uint64_t v82 = v56;
      operator delete(v58);
    }
    goto LABEL_99;
  }
  for (uint64_t i = *(void **)(E5RT::ProgramLibrary::GetExportedFunctions(*(E5RT::ProgramLibrary **)(a2 + 40)) + 16);
        i;
        uint64_t i = (void *)*i)
  {
    int64_t v78 = 0;
    uint64_t v79 = 0;
    std::string::size_type v80 = 0;
    char v46 = v85;
    uint64_t v47 = v86 - (unsigned char *)v85;
    if (v86 != v85)
    {
      if (v47 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      int v48 = (char *)operator new(v86 - (unsigned char *)v85);
      int64_t v78 = v48;
      uint64_t v79 = v48;
      std::string::size_type v80 = &v48[16 * (v47 >> 4)];
      size_t v49 = v47 & 0xFFFFFFFFFFFFFFF0;
      memcpy(v48, v46, v49);
      uint64_t v79 = &v48[v49];
    }
    sub_192470AB0((uint64_t)(i + 2), v19, (long long **)&v78, v32 == 0, (E5DB::RegressionTestConfigParser *)v106, (uint64_t)v91, v90, v44);
    unint64_t v50 = (char *)v78;
    if (v78)
    {
      unint64_t v51 = v79;
      uint64_t v52 = v78;
      if (v79 != v78)
      {
        do
          E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v51 - 16));
        while (v51 != v50);
        uint64_t v52 = v78;
      }
      uint64_t v79 = v50;
      operator delete(v52);
    }
  }
LABEL_99:
  if (v98 < 0)
  {
    uint64_t v59 = v77;
    if (v97[1] != (void *)4 || *(_DWORD *)v97[0] != 1852797802)
    {
LABEL_136:
      uint64_t v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v66, "Unsupported output format type.");
      __cxa_throw(v66, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    uint64_t v59 = v77;
    if (v98 != 4 || LODWORD(v97[0]) != 1852797802) {
      goto LABEL_136;
    }
  }
  if (![MEMORY[0x1E4F28D90] isValidJSONObject:v44])
  {
    uint64_t v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v73, "Unable to serialize results to JSON: unexpected invalid object");
    __cxa_throw(v73, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  id v60 = [MEMORY[0x1E4F28D90] dataWithJSONObject:v44 options:3 error:0];
  [v60 bytes];
  [v60 length];
  std::ostream::write();

  E5DB::RegressionTestConfigParser::~RegressionTestConfigParser((E5DB::RegressionTestConfigParser *)v106);
  uint64_t v61 = (char *)v85;
  if (v85)
  {
    uint64_t v62 = v86;
    if (v86 != v85)
    {
      do
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v62 - 16));
      while (v62 != v61);
      uint64_t v61 = (char *)v85;
    }
    operator delete(v61);
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&CurrentPlatform);
  uint64_t v63 = (void **)v104[0];
  if (v104[0])
  {
    uint64_t v64 = (void **)v104[1];
    uint64_t v65 = v104[0];
    if (v104[1] != v104[0])
    {
      do
      {
        if (*((char *)v64 - 1) < 0) {
          operator delete(*(v64 - 3));
        }
        v64 -= 3;
      }
      while (v64 != v63);
      uint64_t v65 = v104[0];
    }
    v104[1] = v63;
    operator delete(v65);
  }
  std::string __p = *(void **)v13;
  *(void **)((char *)&__p + *((void *)__p - E5RT::Status::~Status((E5RT::Status *)(this + 3)) = *(void **)(v13 + 24);
  MEMORY[0x192FF1040](v59);
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](v116);
  if (v93 && v92 < 0) {
    operator delete(v91[0]);
  }
  if (v96 && (char)v95 < 0) {
    operator delete(v94[0]);
  }
  if (v98 < 0) {
    operator delete(v97[0]);
  }
  if (v101 && v100 < 0) {
    operator delete(v99);
  }
  if (v103 < 0) {
    operator delete(v102[0]);
  }
}

void sub_192470770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((v73 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v73)
  {
LABEL_6:
    E5DB::RegressionTestConfigParser::~RegressionTestConfigParser((E5DB::RegressionTestConfigParser *)&a65);
    std::vector<E5Common::PlatformIdentifier>::~vector[abi:ne180100](&a23);
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&a26);
    std::vector<std::string>::~vector[abi:ne180100](&a62);
    std::ofstream::~ofstream(&a72);
    if (a35 && a34 < 0) {
      operator delete(a29);
    }
    if (a42 && a41 < 0) {
      operator delete(a36);
    }
    if (a48 < 0) {
      operator delete(a43);
    }
    if (a55 && a54 < 0) {
      operator delete(a49);
    }
    if (a61 < 0)
    {
      operator delete(a56);
      _Unwind_Resume(a1);
    }
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v72);
  goto LABEL_6;
}

void sub_192470AB0(uint64_t a1, uint64_t a2, long long **a3, char a4, E5DB::RegressionTestConfigParser *a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  id v35 = a8;
  uint64_t v36 = (uint64_t)a5;
  if ((a4 & 1) != 0 || E5DB::RegressionTestConfigParser::GetFrameCount(a5))
  {
    *(_OWORD *)uint64_t v47 = 0u;
    *(_OWORD *)std::string __p = 0u;
    int v49 = 1065353216;
    *(_OWORD *)int v44 = 0u;
    *(_OWORD *)uint64_t v45 = 0u;
    int v46 = 1065353216;
    if ((a4 & 1) == 0)
    {
      if (a3[1] != *a3)
      {
        long long v43 = **a3;
        sub_192474A28((uint64_t)&v55, (uint64_t)a5, 0, a2, &v43, a1);
      }
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    }
    v41.__r_.__value_.__s.__data_[0] = 0;
    char v42 = 0;
    if (*(unsigned char *)(a6 + 24))
    {
      if (*(char *)(a6 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
      }
      else {
        std::string v41 = *(std::string *)a6;
      }
      char v42 = 1;
    }
    if (*a3 == a3[1])
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Found no platform ids in the input.");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    std::vector<E5Common::PlatformIdentifier>::vector(&v53, (uint64_t)a3);
    if (v42)
    {
      memset(&v56, 0, sizeof(v56));
      uint64_t v11 = (long long *)v53.__r_.__value_.__r.__words[0];
      if (v53.__r_.__value_.__r.__words[0] == v53.__r_.__value_.__l.__size_)
      {
LABEL_19:
        if (v42) {
          sub_192474C68((E5RT::E5Compiler *)v50);
        }
        E5DB::MakeCandidateBoundPorts((uint64_t)&v56, (uint64_t)&__str);
        uint64_t v12 = (E5RT::IOPort *)v56.__r_.__value_.__r.__words[0];
        if (v58 != *(void **)(v56.__r_.__value_.__r.__words[0] + 24))
        {
          uint64_t v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v34, "Failed in getting all the necessary candidate ports for reference inputs.");
          __cxa_throw(v34, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        uint64_t v13 = (void *)__str.__r_.__value_.__r.__words[2];
        if (!__str.__r_.__value_.__r.__words[2]) {
          goto LABEL_32;
        }
        do
        {
          unint64_t v14 = (E5DB *)v13[5];
          uint64_t v15 = (std::__shared_weak_count *)v13[6];
          v55.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
          v55.__r_.__value_.__l.__size_ = (std::string::size_type)v15;
          if (v15) {
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (!v14)
          {
            int v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v32, "Found null pointer to a reference input.");
            __cxa_throw(v32, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          E5DB::InitializePortRandomlyForPsnr(v14, v12);
          if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
        uint64_t v12 = (E5RT::IOPort *)v56.__r_.__value_.__r.__words[0];
        if (v56.__r_.__value_.__r.__words[0])
        {
LABEL_32:
          std::vector<std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)&v56, v12);
          operator delete(v56.__r_.__value_.__l.__data_);
        }
        std::string::size_type v16 = v53.__r_.__value_.__r.__words[0];
        if (v53.__r_.__value_.__r.__words[0])
        {
          std::string::size_type size = v53.__r_.__value_.__l.__size_;
          uint64_t v18 = (void *)v53.__r_.__value_.__r.__words[0];
          if (v53.__r_.__value_.__l.__size_ != v53.__r_.__value_.__r.__words[0])
          {
            do
              E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(size - 16));
            while (size != v16);
            uint64_t v18 = (void *)v53.__r_.__value_.__r.__words[0];
          }
          v53.__r_.__value_.__l.__size_ = v16;
          operator delete(v18);
        }
        if (__p[1])
        {
          uint64_t v19 = (void **)__p[0];
          if (__p[0])
          {
            do
            {
              while (1)
              {
                uint64_t v20 = (void **)*v19;
                uint64_t v21 = (std::__shared_weak_count *)v19[6];
                if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                  std::__shared_weak_count::__release_weak(v21);
                }
                if (*((char *)v19 + 39) < 0) {
                  break;
                }
                operator delete(v19);
                uint64_t v19 = v20;
                if (!v20) {
                  goto LABEL_47;
                }
              }
              operator delete(v19[2]);
              operator delete(v19);
              uint64_t v19 = v20;
            }
            while (v20);
          }
LABEL_47:
          __p[0] = 0;
          uint64_t v22 = (char *)v47[1];
          if (v47[1])
          {
            uint64_t v23 = 0;
            do
              *((void *)v47[0] + (void)v23++) = 0;
            while (v22 != v23);
          }
          __p[1] = 0;
        }
        uint64_t v24 = (void *)__str.__r_.__value_.__r.__words[0];
        __str.__r_.__value_.__r.__words[0] = 0;
        size_t v25 = v47[0];
        v47[0] = v24;
        if (v25) {
          operator delete(v25);
        }
        uint64_t v27 = (void **)__str.__r_.__value_.__r.__words[2];
        std::string::size_type v26 = __str.__r_.__value_.__l.__size_;
        __str.__r_.__value_.__l.__size_ = 0;
        __p[1] = v58;
        int v49 = v59;
        v47[1] = (void *)v26;
        __p[0] = (void *)__str.__r_.__value_.__r.__words[2];
        if (v58)
        {
          std::string::size_type v28 = *(void *)(__str.__r_.__value_.__r.__words[2] + 8);
          if ((v26 & (v26 - 1)) != 0)
          {
            if (v28 >= v26) {
              v28 %= v26;
            }
          }
          else
          {
            v28 &= v26 - 1;
          }
          *((void *)v47[0] + v28) = __p;
          __str.__r_.__value_.__r.__words[2] = 0;
          uint64_t v58 = 0;
        }
        else if (__str.__r_.__value_.__r.__words[2])
        {
          do
          {
            while (1)
            {
              uint64_t v29 = (void **)*v27;
              uint64_t v30 = (std::__shared_weak_count *)v27[6];
              if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                std::__shared_weak_count::__release_weak(v30);
              }
              if (*((char *)v27 + 39) < 0) {
                break;
              }
              operator delete(v27);
              uint64_t v27 = v29;
              if (!v29) {
                goto LABEL_68;
              }
            }
            operator delete(v27[2]);
            operator delete(v27);
            uint64_t v27 = v29;
          }
          while (v29);
        }
LABEL_68:
        uint64_t v31 = (void *)__str.__r_.__value_.__r.__words[0];
        __str.__r_.__value_.__r.__words[0] = 0;
        if (v31) {
          operator delete(v31);
        }
        if (v42 && SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v41.__r_.__value_.__l.__data_);
        }
        if (a3[1] != *a3)
        {
          long long v40 = **a3;
          sub_192474A28((uint64_t)&v55, v36, 0, a2, &v40, a1);
        }
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
    }
    else
    {
      v55.__r_.__value_.__r.__words[0] = 0;
      LODWORD(v55.__r_.__value_.__r.__words[1]) = 0;
      std::vector<E5Common::PlatformIdentifier>::insert((E5RT::AsyncEventImpl **)&v53, (uint64_t)v53.__r_.__value_.__l.__data_, (__n128 *)&v55);
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v55);
      memset(&v56, 0, sizeof(v56));
      uint64_t v11 = (long long *)v53.__r_.__value_.__r.__words[0];
      if (v53.__r_.__value_.__r.__words[0] == v53.__r_.__value_.__l.__size_) {
        goto LABEL_19;
      }
    }
    long long v54 = *v11;
    *(_OWORD *)unint64_t v51 = v54;
    LOBYTE(v52) = 1;
    E5RT::GetE5PathFromCompositeBundle(a2, (long long *)v51, &v55);
    if ((_BYTE)v52) {
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v51);
    }
    strcpy(v50, "Precompiled Compute op");
    v50[23] = 22;
    E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp((uint64_t)v50, (E5RT::SharedResourceManager *)&v55, a1, 1);
  }
}

void sub_192473A04(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](&v3);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](&v4);

  _Unwind_Resume(a1);
}

void sub_192473A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v53 - 224);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&a53);
  __cxa_end_catch();
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&v56);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&v57);

  _Unwind_Resume(a1);
}

void sub_192473AA4(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1924743B8);
}

void sub_192473AB4()
{
}

void sub_192473ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a65)
  {
    if (a64 < 0) {
      operator delete(__p);
    }
  }
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&v67);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&v68);

  _Unwind_Resume(a1);
}

void sub_192474244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50)
{
  if (*(char *)(v51 - 121) < 0)
  {
    operator delete(*(void **)(v51 - 144));
    if (*(char *)(v51 - 201) < 0)
    {
LABEL_5:
      operator delete(*(void **)(v51 - 224));
      uint64_t v52 = (char *)STACK[0x2D0];
      if (!STACK[0x2D0])
      {
LABEL_12:
        long long v54 = (void *)STACK[0x2C0];
        STACK[0x2C0] = 0;
        if (v54) {
          operator delete(v54);
        }
        if (v50 && !atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
        std::string v55 = (std::__shared_weak_count *)STACK[0x308];
        if (STACK[0x308] && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }

        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x240]);
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x250]);

        std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a40);
        std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a45);
        std::vector<E5Common::PlatformIdentifier>::~vector[abi:ne180100](&a50);
        JUMPOUT(0x1924743A0);
      }
      while (1)
      {
        uint64_t v53 = *(char **)v52;
        if (v52[63] < 0)
        {
          operator delete(*((void **)v52 + 5));
          if ((v52[39] & 0x80000000) == 0) {
            goto LABEL_8;
          }
LABEL_11:
          operator delete(*((void **)v52 + 2));
          operator delete(v52);
          uint64_t v52 = v53;
          if (!v53) {
            goto LABEL_12;
          }
        }
        else
        {
          if (v52[39] < 0) {
            goto LABEL_11;
          }
LABEL_8:
          operator delete(v52);
          uint64_t v52 = v53;
          if (!v53) {
            goto LABEL_12;
          }
        }
      }
    }
  }
  else if (*(char *)(v51 - 201) < 0)
  {
    goto LABEL_5;
  }
  JUMPOUT(0x192474238);
}

void **std::vector<E5Common::PlatformIdentifier>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v3 - 16));
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t E5DB::PsnrCheckCommand::Execute(uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = operator new(0x20uLL);
  void *v6 = &unk_1EE39B5C8;
  v6[1] = a1;
  void v6[2] = a2;
  void v6[3] = a3;
  std::string::size_type v16 = v6;
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 16))(__p, a1);
  int v7 = E5DB::SafeExecute((uint64_t)v15);
  if ((char)v14 < 0)
  {
    operator delete(__p[0]);
    unint64_t v8 = v16;
    if (v16 != v15)
    {
LABEL_3:
      if (v8) {
        (*(void (**)(void *))(*v8 + 40))(v8);
      }
      if (v7) {
        goto LABEL_6;
      }
      return 0;
    }
  }
  else
  {
    unint64_t v8 = v16;
    if (v16 != v15) {
      goto LABEL_3;
    }
  }
  (*(void (**)(void *))(v15[0] + 32))(v15);
  if (!v7) {
    return 0;
  }
LABEL_6:
  uint64_t v9 = *a2;
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 32))(__p, a1);
  if ((v14 & 0x80u) == 0) {
    size_t v10 = __p;
  }
  else {
    size_t v10 = (void **)__p[0];
  }
  if ((v14 & 0x80u) == 0) {
    uint64_t v11 = v14;
  }
  else {
    uint64_t v11 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
  if ((char)v14 < 0) {
    operator delete(__p[0]);
  }
  return 0x100000000;
}

void sub_1924745E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_192474610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::function<void ()(void)>::~function(&a15);
    _Unwind_Resume(a1);
  }
  std::function<void ()(void)>::~function(&a15);
  _Unwind_Resume(a1);
}

void *std::function<void ()(int)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void sub_1924746DC()
{
}

__n128 sub_1924746F0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_1EE39B4C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_19247474C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE39B4C8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

size_t sub_19247478C(size_t result, _DWORD *a2)
{
  switch(*a2)
  {
    case 'f':
      goto LABEL_26;
    case 'i':
      **(unsigned char **)(result + 48) = 1;
      return result;
    case 'm':
      uint64_t v2 = *(unsigned char **)(result + 40);
      long long v3 = (const char *)*MEMORY[0x1E4F149E8];
      if (!v2[24]) {
        goto LABEL_13;
      }
      goto LABEL_9;
    case 'o':
      uint64_t v2 = *(unsigned char **)(result + 16);
      long long v3 = (const char *)*MEMORY[0x1E4F149E8];
      if (v2[24]) {
        goto LABEL_9;
      }
      goto LABEL_13;
    case 'r':
      uint64_t v2 = *(unsigned char **)(result + 32);
      long long v3 = (const char *)*MEMORY[0x1E4F149E8];
      if (v2[24])
      {
LABEL_9:
LABEL_26:
        JUMPOUT(0x192FF0F50);
      }
LABEL_13:
      __n128 result = strlen(v3);
      if (result > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v4 = result;
      if (result >= 0x17)
      {
        uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((result | 7) != 0x17) {
          uint64_t v6 = result | 7;
        }
        uint64_t v7 = v6 + 1;
        unint64_t v5 = operator new(v6 + 1);
        *((void *)v2 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v4;
        *((void *)v2 + 2) = v7 | 0x8000000000000000;
        *(void *)uint64_t v2 = v5;
      }
      else
      {
        v2[23] = result;
        unint64_t v5 = v2;
        if (!result) {
          goto LABEL_24;
        }
      }
      __n128 result = (size_t)memmove(v5, v3, v4);
LABEL_24:
      *((unsigned char *)v5 + v4) = 0;
      v2[24] = 1;
      return result;
    case 't':
      goto LABEL_26;
    default:
      return result;
  }
}

uint64_t sub_1924749AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5DB12_GLOBAL__N_114ParseArgumentsERKNSt3__16vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1"
                     "_9allocatorIcEEEENS6_IS8_EEEERS8_RNS1_8optionalIS8_EESD_SG_SG_RbE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5DB12_GLOBAL__N_114ParseArgumentsERKNSt3__16vectorINS1_12basic_stringIcNS1_11char_tr"
                                "aitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEERS8_RNS1_8optionalIS8_EESD_SG_SG_RbE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5DB12_GLOBAL__N_114ParseArgumentsERKNSt3__16vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEERS8_RNS1_8optionalIS8_EESD_SG_SG_RbE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5DB12_GLOBAL__N_114ParseArgumentsERKNSt3__16vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEERS8_RNS1_8optionalIS8_EESD_SG_SG_RbE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192474A1C()
{
  return &unk_1EE39B528;
}

void sub_192474A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t a6)
{
  long long v9 = *a5;
  char v10 = 1;
  E5RT::GetE5PathFromCompositeBundle(a4, &v9, &v11);
  if (v10) {
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v9);
  }
  strcpy(__p, "Precompiled Compute op");
  char v8 = 22;
  E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp((uint64_t)__p, (E5RT::SharedResourceManager *)&v11, a6, 1);
}

void sub_192474BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a15) {
    sub_1922E4010();
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_192474C68(E5RT::E5Compiler *a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  Compiler = (E5RT::E5CompilerOptions *)E5RT::E5Compiler::GetCompiler(a1);
  E5RT::E5CompilerOptions::Create(Compiler);
}

void sub_192474EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a12)
  {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_192474F44(int a1, E5RT::ProgramLibrary *this, uint64_t a3)
{
  ExportedFunctions = (void *)E5RT::ProgramLibrary::GetExportedFunctions(this);
  unint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(ExportedFunctions, a3);
  if (v5)
  {
    uint64_t v6 = v5[6];
    v10[0] = v5[5];
    v10[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    E5RT::PrecompiledComputeOpCreateOptions::Create(v10);
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::operator+<char>();
  char v8 = std::string::append(&v11, " is not generated. Is function name changed during compile?");
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::runtime_error::runtime_error(exception, &v12);
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_192475118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0)
  {
    operator delete(a12);
    if ((v24 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

void sub_1924751D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1924751EC(uint64_t a1, void *a2, uint64_t a3)
{
  sub_192475D34(*(E5RT::ExecutionStreamOperationInternal ***)a3, a2);
  uint64_t v4 = *(void *)(a3 + 8);
  v5[0] = *(void *)a3;
  v5[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_192475DE0((E5RT::ExecutionStream *)v5);
}

void sub_1924752AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1924752C0(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5)
{
  long long v5 = *a4;
  sub_192476368((uint64_t)&v6, a2, a3, &v5, a5);
}

void sub_1924753D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_1924753F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)va);
  _Unwind_Resume(a1);
}

void sub_192475404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__deallocate_node(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      while (1)
      {
        unint64_t v3 = (void **)*v2;
        uint64_t v4 = (std::__shared_weak_count *)v2[6];
        if (v4)
        {
          if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
        if (*((char *)v2 + 39) < 0) {
          break;
        }
        operator delete(v2);
        uint64_t v2 = v3;
        if (!v3) {
          return;
        }
      }
      operator delete(v2[2]);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

E5RT::AsyncEventImpl *std::vector<E5Common::PlatformIdentifier>::insert(E5RT::AsyncEventImpl **a1, uint64_t a2, __n128 *a3)
{
  long long v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (void)*a1;
  uint64_t v8 = v7 >> 4;
  long long v9 = (E5RT::AsyncEventImpl *)((char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF0));
  unint64_t v10 = (unint64_t)a1[2];
  if (v6 >= v10)
  {
    unint64_t v16 = ((uint64_t)(v6 - (void)v5) >> 4) + 1;
    if (v16 >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = v10 - (void)v5;
    if (v17 >> 3 > v16) {
      unint64_t v16 = v17 >> 3;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    uint64_t v39 = a1 + 2;
    if (v18)
    {
      if (v18 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v19 = (E5RT::AsyncEventImpl *)operator new(16 * v18);
    }
    else
    {
      uint64_t v19 = 0;
    }
    id v35 = v19;
    uint64_t v36 = (E5RT::AsyncEventImpl *)((char *)v19 + 16 * v8);
    int8x8_t v37 = v36;
    char v38 = (E5RT::AsyncEventImpl *)((char *)v19 + 16 * v18);
    std::__split_buffer<E5Common::PlatformIdentifier>::push_back(&v35, a3);
    uint64_t v20 = v36;
    uint64_t v21 = *a1;
    uint64_t v22 = v36;
    if (*a1 != v9)
    {
      uint64_t v23 = v9;
      int v24 = v36;
      do
      {
        uint64_t v22 = (E5RT::AsyncEventImpl *)((char *)v24 - 16);
        *((_OWORD *)v24 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = *((_OWORD *)v23 - 1);
        uint64_t v23 = (E5RT::AsyncEventImpl *)((char *)v23 - 16);
        int v24 = (E5RT::AsyncEventImpl *)((char *)v24 - 16);
      }
      while (v23 != v21);
    }
    uint64_t v36 = v22;
    size_t v25 = a1[1];
    std::string::size_type v26 = v37;
    if (v25 != v9)
    {
      do
      {
        long long v27 = *(_OWORD *)v9;
        long long v9 = (E5RT::AsyncEventImpl *)((char *)v9 + 16);
        *(_OWORD *)std::string::size_type v26 = v27;
        std::string::size_type v26 = (E5RT::AsyncEventImpl *)((char *)v26 + 16);
      }
      while (v9 != v25);
      uint64_t v22 = v36;
      long long v9 = a1[1];
    }
    std::string::size_type v28 = *a1;
    *a1 = v22;
    a1[1] = v26;
    uint64_t v29 = a1[2];
    a1[2] = v38;
    int8x8_t v37 = v9;
    char v38 = v29;
    id v35 = v28;
    uint64_t v36 = v28;
    if (v9 != v28)
    {
      do
      {
        int8x8_t v37 = (E5RT::AsyncEventImpl *)((char *)v9 - 16);
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)((char *)v9 - 16));
        long long v9 = v37;
      }
      while (v37 != v28);
      long long v9 = v35;
    }
    if (v9) {
      operator delete(v9);
    }
    return v20;
  }
  else
  {
    if (v9 != (E5RT::AsyncEventImpl *)v6)
    {
      std::string v11 = (char *)v9 + 16;
      unint64_t v12 = v6 - 16;
      if (v6 < 0x10)
      {
        a1[1] = (E5RT::AsyncEventImpl *)v6;
        if ((char *)v6 == v11)
        {
LABEL_34:
          unint64_t v33 = a3->n128_u64[0];
          *((_DWORD *)v9 + 2) = a3->n128_u32[2];
          *(void *)long long v9 = v33;
          return v9;
        }
      }
      else
      {
        uint64_t v13 = (long long *)(v6 - 16);
        unsigned __int8 v14 = a1[1];
        do
        {
          long long v15 = *v13++;
          *(_OWORD *)unsigned __int8 v14 = v15;
          unsigned __int8 v14 = (E5RT::AsyncEventImpl *)((char *)v14 + 16);
        }
        while ((unint64_t)v13 < v6);
        a1[1] = v14;
        if ((char *)v6 == v11) {
          goto LABEL_34;
        }
      }
      uint64_t v30 = 16 * ((uint64_t)(v6 - (void)v11) >> 4);
      uint64_t v31 = (uint64_t)v5 + 16 * v8 - 16;
      do
      {
        uint64_t v32 = *(void *)(v31 + v30);
        *(_DWORD *)(v12 + 8) = *(_DWORD *)(v31 + v30 + 8);
        *(void *)unint64_t v12 = v32;
        v12 -= 16;
        v30 -= 16;
      }
      while (v30);
      goto LABEL_34;
    }
    *(__n128 *)long long v9 = *a3;
    a1[1] = (E5RT::AsyncEventImpl *)((char *)v9 + 16);
  }
  return v9;
}

void sub_19247570C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<E5Common::PlatformIdentifier>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>>::~vector[abi:ne180100](void **a1)
{
  if (*a1)
  {
    std::vector<std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1);
    operator delete(*a1);
  }
  return a1;
}

__n128 std::__split_buffer<E5Common::PlatformIdentifier>::push_back(E5RT::AsyncEventImpl **a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  if (v4 != a1[3]) {
    goto LABEL_23;
  }
  long long v5 = *a1;
  unint64_t v6 = a1[1];
  if (v6 <= *a1)
  {
    if (v4 == v5) {
      unint64_t v14 = 1;
    }
    else {
      unint64_t v14 = (v4 - v5) >> 3;
    }
    if (v14 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    long long v15 = (E5RT::AsyncEventImpl *)operator new(16 * v14);
    unint64_t v16 = (char *)v15 + 16 * (v14 >> 2);
    uint64_t v17 = (char *)v15 + 16 * v14;
    uint64_t v18 = v4 - v6;
    if (v4 == v6)
    {
      *a1 = v15;
      a1[1] = (E5RT::AsyncEventImpl *)v16;
      a1[2] = (E5RT::AsyncEventImpl *)v16;
      a1[3] = (E5RT::AsyncEventImpl *)v17;
      if (!v5) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v20 = v18 >> 4;
      uint64_t v21 = &v16[v18 & 0xFFFFFFFFFFFFFFF0];
      uint64_t v22 = 16 * v20;
      do
      {
        *(_OWORD *)&v16[v19] = *(_OWORD *)((char *)v6 + v19);
        v19 += 16;
      }
      while (v22 != v19);
      *a1 = v15;
      a1[1] = (E5RT::AsyncEventImpl *)v16;
      a1[2] = (E5RT::AsyncEventImpl *)v21;
      a1[3] = (E5RT::AsyncEventImpl *)v17;
      while (v4 != v6)
      {
        uint64_t v4 = (E5RT::AsyncEventImpl *)((char *)v4 - 16);
        E5RT::AsyncEventImpl::~AsyncEventImpl(v4);
      }
      if (!v5) {
        goto LABEL_20;
      }
    }
    operator delete(v5);
LABEL_20:
    uint64_t v4 = a1[2];
    goto LABEL_23;
  }
  uint64_t v7 = (v6 - *a1) >> 4;
  if (v7 >= -1) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = v7 + 2;
  }
  uint64_t v9 = v8 >> 1;
  uint64_t v10 = -(v8 >> 1);
  if (v6 == v4)
  {
    uint64_t v13 = (E5RT::AsyncEventImpl *)((char *)v6 - 16 * v9);
  }
  else
  {
    do
    {
      std::string v11 = (_DWORD *)((char *)v6 + 16 * v10);
      uint64_t v12 = *(void *)v6;
      v11[2] = *((_DWORD *)v6 + 2);
      *(void *)std::string v11 = v12;
      unint64_t v6 = (E5RT::AsyncEventImpl *)((char *)v6 + 16);
    }
    while (v6 != v4);
    uint64_t v4 = a1[1];
    uint64_t v13 = (E5RT::AsyncEventImpl *)((char *)v6 + 16 * v10);
  }
  a1[1] = (E5RT::AsyncEventImpl *)((char *)v4 + 16 * v10);
  a1[2] = v13;
  uint64_t v4 = v13;
LABEL_23:
  __n128 result = *a2;
  *(__n128 *)uint64_t v4 = *a2;
  a1[2] = (E5RT::AsyncEventImpl *)((char *)a1[2] + 16);
  return result;
}

uint64_t std::__split_buffer<E5Common::PlatformIdentifier>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(i - 16));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>>::__push_back_slow_path<std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>> const&>(int64x2_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x333333333333333) {
    unint64_t v6 = 0x666666666666666;
  }
  else {
    unint64_t v6 = v4;
  }
  std::string::size_type v26 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x666666666666666) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(40 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  std::string __p = v7;
  v24.i64[0] = (uint64_t)&v7[40 * v3];
  size_t v25 = &v7[40 * v6];
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map(v24.i64[0], a2);
  uint64_t v8 = v24.i64[0];
  uint64_t v9 = v24.i64[0] + 40;
  v24.i64[1] = v24.i64[0] + 40;
  uint64_t v11 = a1->i64[0];
  unint64_t v10 = a1->u64[1];
  if (v10 == a1->i64[0])
  {
    int64x2_t v20 = vdupq_n_s64(v10);
  }
  else
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t v14 = v8 + v12;
      uint64_t v15 = v10 + v12;
      uint64_t v16 = *(void *)(v10 + v12 - 40);
      *(void *)(v15 - 40) = 0;
      *(void *)(v14 - 40) = v16;
      *(void *)(v14 - 32) = *(void *)(v10 + v12 - 32);
      *(void *)(v15 - 32) = 0;
      uint64_t v17 = *(void *)(v10 + v12 - 24);
      *(void *)(v8 + v12 - 24) = v17;
      uint64_t v18 = *(void *)(v10 + v12 - 16);
      *(void *)(v14 - 16) = v18;
      *(_DWORD *)(v14 - 8) = *(_DWORD *)(v10 + v12 - 8);
      if (v18)
      {
        unint64_t v13 = *(void *)(v17 + 8);
        unint64_t v19 = *(void *)(v14 - 32);
        if ((v19 & (v19 - 1)) != 0)
        {
          if (v13 >= v19) {
            v13 %= v19;
          }
        }
        else
        {
          v13 &= v19 - 1;
        }
        *(void *)(v16 + 8 * v13) = v8 + v12 - 24;
        *(void *)(v10 + v12 - 24) = 0;
        *(void *)(v10 + v12 - 16) = 0;
      }
      v12 -= 40;
    }
    while (v10 + v12 != v11);
    int64x2_t v20 = *a1;
    uint64_t v9 = v24.i64[1];
    v8 += v12;
  }
  a1->i64[0] = v8;
  a1->i64[1] = v9;
  int64x2_t v24 = v20;
  uint64_t v21 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v25;
  size_t v25 = v21;
  std::string __p = (void *)v20.i64[0];
  std::__split_buffer<std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>>::__destruct_at_end[abi:ne180100]((uint64_t)&__p, v20.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v9;
}

void sub_192475AF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    long long v5 = (void **)(i - 40);
    *(void *)(a1 + 16) = i - 40;
    unint64_t v6 = *(void ***)(i - 24);
    if (v6)
    {
      do
      {
        while (1)
        {
          uint64_t v7 = (void **)*v6;
          uint64_t v8 = (std::__shared_weak_count *)v6[6];
          if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
          if (*((char *)v6 + 39) < 0) {
            break;
          }
          operator delete(v6);
          unint64_t v6 = v7;
          if (!v7) {
            goto LABEL_12;
          }
        }
        operator delete(v6[2]);
        operator delete(v6);
        unint64_t v6 = v7;
      }
      while (v7);
    }
LABEL_12:
    uint64_t v9 = *v5;
    *long long v5 = 0;
    if (v9) {
      operator delete(v9);
    }
  }
}

void std::vector<std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, void *a2)
{
  unint64_t v4 = *(void **)(a1 + 8);
  while (v4 != a2)
  {
    long long v5 = (void **)*(v4 - 3);
    if (v5)
    {
      do
      {
        while (1)
        {
          unint64_t v6 = (void **)*v5;
          uint64_t v7 = (std::__shared_weak_count *)v5[6];
          if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          if (*((char *)v5 + 39) < 0) {
            break;
          }
          operator delete(v5);
          long long v5 = v6;
          if (!v6) {
            goto LABEL_12;
          }
        }
        operator delete(v5[2]);
        operator delete(v5);
        long long v5 = v6;
      }
      while (v6);
    }
LABEL_12:
    uint64_t v9 = (void *)*(v4 - 5);
    v4 -= 5;
    uint64_t v8 = v9;
    *unint64_t v4 = 0;
    if (v9) {
      operator delete(v8);
    }
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t sub_192475D34(E5RT::ExecutionStreamOperationInternal **a1, void *a2)
{
  E5DB::ReshapeIfNeeded(a1, (uint64_t)a2);
  E5DB::PrepareEsOpInputAndInOutPorts(a1, a2, 0);
  uint64_t result = E5RT::ExecutionStreamOperation::GetOutputPorts(a1);
  uint64_t v5 = *(void *)(result + 16);
  if (v5)
  {
    unint64_t v6 = *(E5RT::IOPort **)(v5 + 40);
    if (v6) {
      E5RT::AllocateAndBindMemory(v6, 0);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Found null pointer to an output port.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_192475DCC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192475DE0(E5RT::ExecutionStream *a1)
{
}

void sub_192475EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  uint64_t v13 = a12;
  a12 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *> *>>(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_14;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  uint64_t v8 = (void **)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      std::string::operator=((std::string *)(v8 + 2), (const std::string *)(a2 + 2));
      unint64_t v10 = (void *)a2[5];
      uint64_t v9 = (atomic_ullong *)a2[6];
      if (v9) {
        atomic_fetch_add_explicit(v9 + 1, 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = (std::__shared_weak_count *)v8[6];
      v8[5] = v10;
      v8[6] = v9;
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      uint64_t v12 = (void **)*v8;
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__node_insert_multi(a1, (uint64_t)v8);
      a2 = (uint64_t *)*a2;
      uint64_t v8 = v12;
      if (!v12) {
        goto LABEL_14;
      }
    }
    do
    {
      while (1)
      {
        uint64_t v13 = (void **)*v8;
        uint64_t v14 = (std::__shared_weak_count *)v8[6];
        if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        if (*((char *)v8 + 39) < 0) {
          break;
        }
        operator delete(v8);
        uint64_t v8 = v13;
        if (!v13) {
          return;
        }
      }
      operator delete(v8[2]);
      operator delete(v8);
      uint64_t v8 = v13;
    }
    while (v13);
  }
  else
  {
LABEL_14:
    while (a2 != a3)
    {
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__insert_multi[abi:ne180100]<std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>(a1, (uint64_t)(a2 + 2));
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_1924760A8(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1924760C4(_Unwind_Exception *a1)
{
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__node_insert_multi(void *a1, uint64_t a2)
{
  unint64_t v4 = (unsigned char *)(a2 + 16);
  unint64_t v5 = *(unsigned __int8 *)(a2 + 39);
  unint64_t v6 = *(void *)(a2 + 24);
  if ((v5 & 0x80u) == 0) {
    uint64_t v7 = (uint64_t *)(a2 + 16);
  }
  else {
    uint64_t v7 = *(uint64_t **)(a2 + 16);
  }
  if ((v5 & 0x80u) == 0) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = v6;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v16, v7, v8);
  *(void *)(a2 + 8) = v9;
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__node_insert_multi_prepare((uint64_t)a1, v9, v4);
  int8x8_t v11 = (int8x8_t)a1[1];
  unint64_t v12 = *(void *)(a2 + 8);
  uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    if (v12 >= *(void *)&v11) {
      v12 %= *(void *)&v11;
    }
  }
  else
  {
    v12 &= *(void *)&v11 - 1;
  }
  if (!inserted)
  {
    *(void *)a2 = a1[2];
    a1[2] = a2;
    *(void *)(*a1 + 8 * v12) = a1 + 2;
    if (!*(void *)a2) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(*(void *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v11) {
        v14 %= *(void *)&v11;
      }
    }
    else
    {
      v14 &= *(void *)&v11 - 1;
    }
LABEL_24:
    *(void *)(*a1 + 8 * v14) = a2;
    goto LABEL_25;
  }
  *(void *)a2 = *inserted;
  uint64_t *inserted = a2;
  if (*(void *)a2)
  {
    unint64_t v14 = *(void *)(*(void *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v11) {
        v14 %= *(void *)&v11;
      }
    }
    else
    {
      v14 &= *(void *)&v11 - 1;
    }
    if (v14 != v12) {
      goto LABEL_24;
    }
  }
LABEL_25:
  ++a1[3];
  return a2;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__insert_multi[abi:ne180100]<std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>((uint64_t)a1, a2, (uint64_t)v4);
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__node_insert_multi(a1, v4[0]);
}

void sub_192476270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p)
{
  int8x8_t v11 = __p;
  std::string __p = 0;
  if (v11) {
    sub_192477510((uint64_t)&__p, v11);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  unint64_t v6 = (char *)operator new(0x38uLL);
  uint64_t v7 = v6;
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  unint64_t v8 = (uint64_t *)(v6 + 16);
  *(void *)unint64_t v6 = 0;
  *((void *)v6 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v6 + 16), *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
    *((void *)v6 + 4) = *(void *)(a2 + 16);
  }
  uint64_t v9 = *(void *)(a2 + 32);
  *((void *)v7 + 5) = *(void *)(a2 + 24);
  *((void *)v7 + 6) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a3 + 16) = 1;
  int v10 = v7[39];
  if (v10 >= 0) {
    int8x8_t v11 = v8;
  }
  else {
    int8x8_t v11 = (uint64_t *)*((void *)v7 + 2);
  }
  if (v10 >= 0) {
    unint64_t v12 = v7[39];
  }
  else {
    unint64_t v12 = *((void *)v7 + 3);
  }
  unint64_t result = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v14, v11, v12);
  *((void *)v7 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = result;
  return result;
}

void sub_192476350(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_192476368(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5)
{
  long long v8 = *a4;
  char v9 = 1;
  E5RT::GetE5PathFromCompositeBundle(a3, &v8, &v10);
  if (v9) {
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v8);
  }
  strcpy(__p, "Precompiled Compute op");
  char v7 = 22;
  E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp((uint64_t)__p, (E5RT::SharedResourceManager *)&v10, a5, 1);
}

void sub_1924764B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a15) {
    sub_1922E4010();
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a24 < 0)
  {
    operator delete(a19);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_19247652C(void **a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  long long v2 = *(_OWORD *)(*a1[1] + 16 * **a1);
  *(_OWORD *)char v42 = v2;
  unint64_t v3 = (std::__shared_weak_count *)*((void *)&v2 + 1);
  if (*((void *)&v2 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v2 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v4 = (E5RT::ExecutionStreamOperationInternal *)v2;
  unsigned int v5 = (*(uint64_t (**)(void))(*(void *)v2 + 32))(v2);
  if ((*(unsigned int (**)(E5RT::ExecutionStreamOperationInternal *))(*(void *)v4 + 32))(v4) - 6 <= 0xFFFFFFFC)
  {
    *(_OWORD *)uint64_t v39 = 0u;
    *(_OWORD *)long long v40 = 0u;
    int v41 = 1065353216;
    *(_OWORD *)uint64_t v36 = 0u;
    *(_OWORD *)std::string __p = 0u;
    int v38 = 1065353216;
    for (uint64_t i = *(void **)(E5RT::ExecutionStreamOperationInternal::GetOutputPorts(v4) + 16); i; uint64_t i = (void *)*i)
    {
      char v7 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a1[2], (uint64_t)(i + 2));
      if (v7)
      {
        uint64_t v8 = (uint64_t)(v7 + 5);
        char v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(a1[4], (uint64_t)(v7 + 5));
        if (!v9)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          std::runtime_error::runtime_error(exception, &v35);
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        v35.__r_.__value_.__r.__words[0] = v8;
        std::string v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v39, v8, (uint64_t)&std::piecewise_construct, (long long **)&v35);
        uint64_t v12 = i[5];
        uint64_t v11 = i[6];
        if (v11) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
        }
        uint8x8_t v13 = (std::__shared_weak_count *)v10[6];
        v10[5] = v12;
        v10[6] = v11;
        if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        v35.__r_.__value_.__r.__words[0] = v8;
        char v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v36, v8, (uint64_t)&std::piecewise_construct, (long long **)&v35);
        uint64_t v16 = v9[5];
        uint64_t v15 = v9[6];
        if (v15) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v17 = (std::__shared_weak_count *)v14[6];
        v14[5] = v16;
        v14[6] = v15;
        if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
    E5DB::ComputePsnr((uint64_t)v36, v39, (uint64_t *)&v35);
    uint64_t v18 = (void *)*a1[3];
    v43[0] = @"op type";
    if (v5 <= 0xE) {
      unint64_t v19 = EnumNamesOpCode(void)::names[v5];
    }
    else {
      unint64_t v19 = "";
    }
    int64x2_t v20 = [NSString stringWithUTF8String:v19];
    v44[0] = v20;
    v43[1] = @"op name";
    uint64_t v21 = NSString;
    uint64_t OpName = E5RT::ExecutionStreamOperationInternal::GetOpName(v42[0]);
    if (*(char *)(OpName + 23) >= 0) {
      uint64_t v23 = OpName;
    }
    else {
      uint64_t v23 = *(void *)OpName;
    }
    int64x2_t v24 = [v21 stringWithUTF8String:v23];
    v44[1] = v24;
    long long v45 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
    void v43[2] = @"average";
    void v43[3] = @"all outputs";
    size_t v25 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v44 forKeys:v43 count:4];
    [v18 addObject:v25];

    std::string::size_type v26 = (void **)__p[0];
    if (__p[0])
    {
      do
      {
        while (1)
        {
          long long v27 = (void **)*v26;
          std::string::size_type v28 = (std::__shared_weak_count *)v26[6];
          if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
          if (*((char *)v26 + 39) < 0) {
            break;
          }
          operator delete(v26);
          std::string::size_type v26 = v27;
          if (!v27) {
            goto LABEL_33;
          }
        }
        operator delete(v26[2]);
        operator delete(v26);
        std::string::size_type v26 = v27;
      }
      while (v27);
    }
LABEL_33:
    uint64_t v29 = v36[0];
    v36[0] = 0;
    if (v29) {
      operator delete(v29);
    }
    uint64_t v30 = (void **)v40[0];
    if (v40[0])
    {
      do
      {
        while (1)
        {
          uint64_t v31 = (void **)*v30;
          uint64_t v32 = (std::__shared_weak_count *)v30[6];
          if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
          if (*((char *)v30 + 39) < 0) {
            break;
          }
          operator delete(v30);
          uint64_t v30 = v31;
          if (!v31) {
            goto LABEL_43;
          }
        }
        operator delete(v30[2]);
        operator delete(v30);
        uint64_t v30 = v31;
      }
      while (v31);
    }
LABEL_43:
    unint64_t v33 = v39[0];
    v39[0] = 0;
    if (v33) {
      operator delete(v33);
    }
    unint64_t v3 = (std::__shared_weak_count *)v42[1];
  }
  ++**a1;
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_192476A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, void *a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a16);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_192476B20(void *a1, void *a2, uint64_t *a3, uint64_t *a4, void *a5)
{
  v42[3] = *MEMORY[0x1E4F143B8];
  id v9 = a2;
  id v10 = a5;
  uint64_t v11 = v10;
  if (v10)
  {
    v41[0] = @"average";
    v41[1] = @"all outputs";
    uint64_t v12 = a1[1];
    v42[0] = *a1;
    v42[1] = v12;
    v41[2] = @"segments";
    void v42[2] = v10;
    uint8x8_t v13 = v41;
    char v14 = v42;
    uint64_t v15 = 3;
  }
  else
  {
    v39[0] = @"average";
    v39[1] = @"all outputs";
    uint64_t v16 = a1[1];
    v40[0] = *a1;
    v40[1] = v16;
    uint8x8_t v13 = v39;
    char v14 = v40;
    uint64_t v15 = 2;
  }
  unint64_t v33 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v14 forKeys:v13 count:v15];
  if (*((char *)a3 + 23) >= 0) {
    uint64_t v17 = a3;
  }
  else {
    uint64_t v17 = (uint64_t *)*a3;
  }
  uint64_t v18 = [NSString stringWithUTF8String:v17];
  unint64_t v19 = [v9 objectForKey:v18];

  if (v19
    && (*((char *)a4 + 23) >= 0 ? (int64x2_t v20 = a4) : (int64x2_t v20 = (uint64_t *)*a4),
        [NSString stringWithUTF8String:v20],
        uint64_t v21 = objc_claimAutoreleasedReturnValue(),
        [v19 objectForKey:v21],
        uint64_t v22 = objc_claimAutoreleasedReturnValue(),
        v21,
        v22))
  {
    uint64_t v23 = [MEMORY[0x1E4F1CA48] arrayWithArray:v22];
    [v23 addObject:v33];
    if (*((char *)a4 + 23) >= 0) {
      int64x2_t v24 = a4;
    }
    else {
      int64x2_t v24 = (uint64_t *)*a4;
    }
    size_t v25 = [NSString stringWithUTF8String:v24];
    int8x8_t v37 = v25;
    int v38 = v23;
    std::string::size_type v26 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v38 forKeys:&v37 count:1];

    if (*((char *)a3 + 23) >= 0) {
      long long v27 = a3;
    }
    else {
      long long v27 = (uint64_t *)*a3;
    }
    std::string::size_type v28 = [NSString stringWithUTF8String:v27];
    [v9 setObject:v26 forKey:v28];
  }
  else
  {
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v29 = a4;
    }
    else {
      uint64_t v29 = (uint64_t *)*a4;
    }
    uint64_t v30 = [NSString stringWithUTF8String:v29];
    uint64_t v34 = v33;
    std::string v35 = v30;
    uint64_t v31 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v34 count:1];
    uint64_t v36 = v31;
    uint64_t v22 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v36 forKeys:&v35 count:1];

    if (*((char *)a3 + 23) >= 0) {
      uint64_t v32 = a3;
    }
    else {
      uint64_t v32 = (uint64_t *)*a3;
    }
    uint64_t v23 = [NSString stringWithUTF8String:v32];
    [v9 setObject:v22 forKey:v23];
  }
}

void sub_192476DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<MIL::IRFunction  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_pointer<MIL::IRFunction  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DBED12) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DBED12 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DBED12)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DBED12 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void sub_192476F84()
{
}

__n128 sub_192476F98(uint64_t a1)
{
  long long v2 = (char *)operator new(0x30uLL);
  *(void *)long long v2 = &unk_1EE39B548;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_192476FF4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE39B548;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_192477034(uint64_t a1)
{
}

uint64_t sub_19247703C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5DB12_GLOBAL__N_130ComputeOutputsAndIntermediatesERKNSt3__113unordered_mapINS1_12basic_stringIc"
                     "NS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_10shared_ptrIN4E5RT6IOPortEEENS1_4hashIS8_EENS1_8equal"
                     "_toIS8_EENS6_INS1_4pairIKS8_SC_EEEEEESN_RSI_SO_N8E5Common18PlatformIdentifierESO_P19NSMutableDictionaryE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5DB12_GLOBAL__N_130ComputeOutputsAndIntermediatesERKNSt3__113unordered_mapINS1_12bas"
                                "ic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_10shared_ptrIN4E5RT6IOPortEEENS1"
                                "_4hashIS8_EENS1_8equal_toIS8_EENS6_INS1_4pairIKS8_SC_EEEEEESN_RSI_SO_N8E5Common18Platfor"
                                "mIdentifierESO_P19NSMutableDictionaryE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5DB12_GLOBAL__N_130ComputeOutputsAndIntermediatesERKNSt3__113unordered_mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_10shared_ptrIN4E5RT6IOPortEEENS1_4hashIS8_EENS1_8equal_toIS8_EENS6_INS1_4pairIKS8_SC_EEEEEESN_RSI_SO_N8E5Common18PlatformIdentifierESO_P19NSMutableDictionaryE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5DB12_GLOBAL__N_130ComputeOutputsAndIntermediatesERKNSt3__113unordered_mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_10shared_ptrIN4E5RT6IOPortEEENS1_4hashIS8_EENS1_8equal_toIS8_EENS6_INS1_4pairIKS8_SC_EEEEEESN_RSI_SO_N8E5Common18PlatformIdentifierESO_P19NSMutableDictionaryE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_1924770AC()
{
  return &unk_1EE39B5A8;
}

void E5DB::RegressionTestConfigParser::~RegressionTestConfigParser(E5DB::RegressionTestConfigParser *this)
{
  unint64_t v3 = (void **)((char *)this + 40);
  long long v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    std::vector<std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)this + 40, v2);
    operator delete(*v3);
  }
  unint64_t v4 = (void **)*((void *)this + 2);
  if (v4)
  {
    do
    {
      while (1)
      {
        unsigned int v5 = (void **)*v4;
        unint64_t v6 = (std::__shared_weak_count *)v4[6];
        if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        if (*((char *)v4 + 39) < 0) {
          break;
        }
        operator delete(v4);
        unint64_t v4 = v5;
        if (!v5) {
          goto LABEL_11;
        }
      }
      operator delete(v4[2]);
      operator delete(v4);
      unint64_t v4 = v5;
    }
    while (v5);
  }
LABEL_11:
  char v7 = *(void **)this;
  *(void *)this = 0;
  if (v7) {
    operator delete(v7);
  }
}

void *std::vector<E5Common::PlatformIdentifier>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    if (v5 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = (char *)operator new(v3 - *(void *)a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[16 * (v5 >> 4)];
    size_t v7 = v5 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v6, v4, v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_192477228(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_192477598((uint64_t)(v1 + 1));
  }
  _Unwind_Resume(exception_object);
}

void sub_19247724C()
{
}

__n128 sub_192477260(uint64_t a1)
{
  long long v2 = (char *)operator new(0x20uLL);
  *(void *)long long v2 = &unk_1EE39B5C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1924772B4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE39B5C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1924772EC(uint64_t a1)
{
}

uint64_t sub_1924772FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5DB16PsnrCheckCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_11char_"
                     "traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5DB16PsnrCheckCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIc"
                                "NS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5DB16PsnrCheckCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5DB16PsnrCheckCommand7ExecuteERNS_10DebugStateERKNSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19247736C()
{
  return &unk_1EE39B628;
}

uint64_t OUTLINED_FUNCTION_18(uint64_t a1)
{
  return *(void *)a1;
}

void sub_192477390(uint64_t a1)
{
  uint64_t v3 = OUTLINED_FUNCTION_18(a1);
  if (!v6)
  {
    size_t v7 = v4;
    do
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v3 - 16));
    while (v3 != v1);
    uint64_t v5 = *v7;
  }
  void *v2 = v1;
  operator delete(v5);
}

uint64_t sub_1924773E0(uint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    OUTLINED_FUNCTION_0();
    uint64_t result = (*(uint64_t (**)(void))(v9 + 8))();
  }
  *(void *)a4 = a2;
  *(_DWORD *)(a4 + 8) = a3;
  return result;
}

uint64_t sub_192477448()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>::unordered_map(char *__p)
{
  do
  {
    long long v2 = *(char **)__p;
    uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 6);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    if (__p[39] < 0) {
      operator delete(*((void **)__p + 2));
    }
    operator delete(__p);
    std::string __p = v2;
  }
  while (v2);
}

void sub_192477510(uint64_t a1, char *__p)
{
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)__p + 6);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    if (__p[39] < 0) {
      operator delete(*((void **)__p + 2));
    }
  }
  operator delete(__p);
}

void sub_192477598(uint64_t a1)
{
  uint64_t v3 = OUTLINED_FUNCTION_18(a1);
  if (!v6)
  {
    size_t v7 = v4;
    do
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v3 - 16));
    while (v3 != v1);
    uint64_t v5 = *v7;
  }
  void *v2 = v1;

  operator delete(v5);
}

double _ZN4E5DB18ComputePsnrSurfaceIDF16_EEdRKN4E5RT6IOPortES4_(E5RT::IOPort *a1, E5RT::IOPort *a2)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  int v49 = (E5RT::MemoryObject *)0xB0000000ALL;
  *(_OWORD *)uint64_t v46 = 0u;
  *(_OWORD *)std::string __p = 0u;
  int v48 = 1065353216;
  std::__hash_table<E5RT::SurfaceFormat,std::hash<E5RT::SurfaceFormat>,std::equal_to<E5RT::SurfaceFormat>,std::allocator<E5RT::SurfaceFormat>>::__emplace_unique_key_args<E5RT::SurfaceFormat,E5RT::SurfaceFormat const&>((uint64_t)v46, (unsigned int *)&v49, &v49);
  std::__hash_table<E5RT::SurfaceFormat,std::hash<E5RT::SurfaceFormat>,std::equal_to<E5RT::SurfaceFormat>,std::allocator<E5RT::SurfaceFormat>>::__emplace_unique_key_args<E5RT::SurfaceFormat,E5RT::SurfaceFormat const&>((uint64_t)v46, (unsigned int *)&v49 + 1, (_DWORD *)&v49 + 1);
  E5RT::IOPort::GetMemoryObject(a1, &v49);
  unint64_t v4 = E5RT::MemoryObject::Surface(v49);
  uint64_t v5 = (__IOSurface *)E5RT::SurfaceObject::GetHandle<__IOSurface *>((uint64_t)v4);
  char v6 = (std::__shared_weak_count *)v50;
  if (v50 && !atomic_fetch_add((atomic_ullong *volatile)(v50 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  BaseAddress = (E5RT::MemoryObject *)IOSurfaceGetBaseAddress(v5);
  size_t Width = IOSurfaceGetWidth(v5);
  size_t Height = IOSurfaceGetHeight(v5);
  PixelFormat = (E5RT *)IOSurfaceGetPixelFormat(v5);
  unsigned int v11 = E5RT::CVPB4ccToSurfaceFormat(PixelFormat);
  if (!v46[1]) {
    goto LABEL_63;
  }
  unsigned int v12 = v11;
  uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v46[1]);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    unint64_t v14 = v11;
    if (v46[1] <= (void *)v11) {
      unint64_t v14 = v11 % (unint64_t)v46[1];
    }
  }
  else
  {
    unint64_t v14 = (LODWORD(v46[1]) - 1) & v11;
  }
  uint64_t v15 = (uint64_t **)*((void *)v46[0] + v14);
  if (!v15 || (uint64_t v16 = *v15) == 0)
  {
LABEL_63:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Port surface format not supported yet.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v13.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v18 = v16[1];
      if (v18 == v11)
      {
        if (*((_DWORD *)v16 + 4) == v11) {
          goto LABEL_24;
        }
      }
      else if ((v18 & ((uint64_t)v46[1] - 1)) != v14)
      {
        goto LABEL_63;
      }
      uint64_t v16 = (uint64_t *)*v16;
      if (!v16) {
        goto LABEL_63;
      }
    }
  }
  while (1)
  {
    unint64_t v17 = v16[1];
    if (v17 == v11) {
      break;
    }
    if ((void *)v17 >= v46[1]) {
      v17 %= (unint64_t)v46[1];
    }
    if (v17 != v14) {
      goto LABEL_63;
    }
LABEL_14:
    uint64_t v16 = (uint64_t *)*v16;
    if (!v16) {
      goto LABEL_63;
    }
  }
  if (*((_DWORD *)v16 + 4) != v11) {
    goto LABEL_14;
  }
LABEL_24:
  E5RT::IOPort::GetMemoryObject(a2, &v49);
  unint64_t v19 = E5RT::MemoryObject::Surface(v49);
  int64x2_t v20 = (__IOSurface *)E5RT::SurfaceObject::GetHandle<__IOSurface *>((uint64_t)v19);
  uint64_t v21 = (std::__shared_weak_count *)v50;
  if (v50 && !atomic_fetch_add((atomic_ullong *volatile)(v50 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = IOSurfaceGetBaseAddress(v20);
  size_t v23 = IOSurfaceGetWidth(v20);
  size_t v24 = IOSurfaceGetHeight(v20);
  size_t v25 = (E5RT *)IOSurfaceGetPixelFormat(v20);
  unsigned int v26 = E5RT::CVPB4ccToSurfaceFormat(v25);
  if (!v46[1]) {
    goto LABEL_64;
  }
  uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v46[1]);
  v27.i16[0] = vaddlv_u8(v27);
  if (v27.u32[0] > 1uLL)
  {
    unint64_t v28 = v26;
    if (v46[1] <= (void *)v26) {
      unint64_t v28 = v26 % (unint64_t)v46[1];
    }
  }
  else
  {
    unint64_t v28 = (LODWORD(v46[1]) - 1) & v26;
  }
  uint64_t v29 = (uint64_t **)*((void *)v46[0] + v28);
  if (!v29 || (uint64_t v30 = *v29) == 0)
  {
LABEL_64:
    long long v43 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v43, "NoisyPort surface format not supported yet.");
    goto LABEL_65;
  }
  if (v27.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v32 = v30[1];
      if (v32 == v26)
      {
        if (*((_DWORD *)v30 + 4) == v26) {
          goto LABEL_47;
        }
      }
      else if ((v32 & ((uint64_t)v46[1] - 1)) != v28)
      {
        goto LABEL_64;
      }
      uint64_t v30 = (uint64_t *)*v30;
      if (!v30) {
        goto LABEL_64;
      }
    }
  }
  while (2)
  {
    unint64_t v31 = v30[1];
    if (v31 != v26)
    {
      if ((void *)v31 >= v46[1]) {
        v31 %= (unint64_t)v46[1];
      }
      if (v31 != v28) {
        goto LABEL_64;
      }
      goto LABEL_37;
    }
    if (*((_DWORD *)v30 + 4) != v26)
    {
LABEL_37:
      uint64_t v30 = (uint64_t *)*v30;
      if (!v30) {
        goto LABEL_64;
      }
      continue;
    }
    break;
  }
LABEL_47:
  if (v12 != v26)
  {
    long long v43 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v43, "Port and NoisyPort surface formats are different.");
LABEL_65:
    __cxa_throw(v43, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v12 == 10)
  {
    uint64_t v33 = 1;
  }
  else
  {
    if (v12 != 11)
    {
      int v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v44, "Port surface format not supported yet.");
      __cxa_throw(v44, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v33 = 4;
  }
  if (Height * Width * v33) {
    uint64_t v34 = BaseAddress;
  }
  else {
    uint64_t v34 = 0;
  }
  int v49 = v34;
  size_t v50 = Height * Width * v33;
  size_t v35 = v24 * v23 * v33;
  if (v35) {
    uint64_t v36 = v22;
  }
  else {
    uint64_t v36 = 0;
  }
  v45[0] = v36;
  v45[1] = v35;
  double v37 = _ZN4E5DB11ComputePsnrIDF16_DF16_EEdRKN4E5RT4SpanIKT_Lm18446744073709551615EEERKNS2_IKT0_Lm18446744073709551615EEE(&v49, v45);
  int v38 = __p[0];
  if (__p[0])
  {
    do
    {
      uint64_t v39 = (void *)*v38;
      operator delete(v38);
      int v38 = v39;
    }
    while (v39);
  }
  long long v40 = v46[0];
  v46[0] = 0;
  if (v40) {
    operator delete(v40);
  }
  return v37;
}

void sub_192477AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192477AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  __cxa_free_exception(v16);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_192477C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192477C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

long double _ZN4E5DB11ComputePsnrIDF16_DF16_EEdRKN4E5RT4SpanIKT_Lm18446744073709551615EEERKNS2_IKT0_Lm18446744073709551615EEE(void *a1, void *a2)
{
  unint64_t v2 = a1[1];
  if (!v2)
  {
    uint64_t v18 = "Data buffer ";
    goto LABEL_11;
  }
  uint64_t v4 = a2[1];
  if (!v4)
  {
    uint64_t v18 = "NoisyData buffer ";
LABEL_11:
    std::string::basic_string[abi:ne180100]<0>(&v34, v18);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("is empty.", (const void **)&v34.__r_.__value_.__l.__data_, &v33);
    std::runtime_error::runtime_error(exception, &v33);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v2 != v4)
  {
    uint64_t v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v31, a1[1]);
    uint64_t v22 = std::string::insert(&v31, 0, "Found spans with unequal sizes data.Size(), noisyData.Size() = ");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    size_t v24 = std::string::append(&v32, ", ");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v30, a2[1]);
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v26 = &v30;
    }
    else {
      unsigned int v26 = (std::string *)v30.__r_.__value_.__r.__words[0];
    }
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v30.__r_.__value_.__l.__size_;
    }
    unint64_t v28 = std::string::append(&v33, (const std::string::value_type *)v26, size);
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v21, &v34);
    __cxa_throw(v21, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v5 = 0;
  float v6 = 0.0;
  double v7 = 0.0;
  do
  {
    short float v8 = *(short float *)(*a1 + 2 * v5);
    _H3 = v8 - *(short float *)(*a2 + 2 * v5);
    __asm { FCVT            S3, H3 }
    double v7 = v7 + (float)(_S3 * _S3);
    _H2 = fabsl(v8);
    __asm { FCVT            S2, H2 }
    if (v6 < _S2) {
      float v6 = _S2;
    }
    ++v5;
  }
  while (v2 != v5);
  return log10((v6 + 0.00001) / (sqrt(v7 / (double)v2) + 1.0e-10)) * 20.0;
}

void sub_192477E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v35 - 41) < 0)
  {
    operator delete(*(void **)(v35 - 64));
    if (a14 < 0)
    {
LABEL_5:
      operator delete(__p);
      if (a33 < 0)
      {
LABEL_8:
        operator delete(a28);
        if (a26 < 0)
        {
LABEL_11:
          operator delete(a21);
          if ((a20 & 0x80000000) == 0) {
            goto LABEL_12;
          }
          goto LABEL_15;
        }
LABEL_14:
        if ((a20 & 0x80000000) == 0)
        {
LABEL_12:
          if (!v34) {
LABEL_17:
          }
            _Unwind_Resume(a1);
LABEL_16:
          __cxa_free_exception(v33);
          _Unwind_Resume(a1);
        }
LABEL_15:
        operator delete(a15);
        if ((v34 & 1) == 0) {
          goto LABEL_17;
        }
        goto LABEL_16;
      }
LABEL_10:
      if (a26 < 0) {
        goto LABEL_11;
      }
      goto LABEL_14;
    }
  }
  else if (a14 < 0)
  {
    goto LABEL_5;
  }
  if (a33 < 0) {
    goto LABEL_8;
  }
  goto LABEL_10;
}

long double E5DB::ComputePsnr<float,float>(void *a1, void *a2)
{
  unint64_t v2 = a1[1];
  if (!v2)
  {
    unsigned int v11 = "Data buffer ";
    goto LABEL_11;
  }
  uint64_t v4 = a2[1];
  if (!v4)
  {
    unsigned int v11 = "NoisyData buffer ";
LABEL_11:
    std::string::basic_string[abi:ne180100]<0>(&v27, v11);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("is empty.", (const void **)&v27.__r_.__value_.__l.__data_, &v26);
    std::runtime_error::runtime_error(exception, &v26);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v2 != v4)
  {
    unint64_t v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v24, a1[1]);
    uint64_t v15 = std::string::insert(&v24, 0, "Found spans with unequal sizes data.Size(), noisyData.Size() = ");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    unint64_t v17 = std::string::append(&v25, ", ");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v23, a2[1]);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v19 = &v23;
    }
    else {
      unint64_t v19 = (std::string *)v23.__r_.__value_.__r.__words[0];
    }
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v23.__r_.__value_.__l.__size_;
    }
    uint64_t v21 = std::string::append(&v26, (const std::string::value_type *)v19, size);
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v14, &v27);
    __cxa_throw(v14, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v5 = 0;
  float v6 = 0.0;
  double v7 = 0.0;
  do
  {
    float v8 = *(float *)(*a1 + 4 * v5);
    double v7 = v7 + (float)((float)(v8 - *(float *)(*a2 + 4 * v5)) * (float)(v8 - *(float *)(*a2 + 4 * v5)));
    float v9 = fabsf(v8);
    if (v9 > v6) {
      float v6 = v9;
    }
    ++v5;
  }
  while (v2 != v5);
  return log10((v6 + 0.00001) / (sqrt(v7 / (double)v2) + 1.0e-10)) * 20.0;
}

void sub_1924781D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v35 - 41) < 0)
  {
    operator delete(*(void **)(v35 - 64));
    if (a14 < 0)
    {
LABEL_5:
      operator delete(__p);
      if (a33 < 0)
      {
LABEL_8:
        operator delete(a28);
        if (a26 < 0)
        {
LABEL_11:
          operator delete(a21);
          if ((a20 & 0x80000000) == 0) {
            goto LABEL_12;
          }
          goto LABEL_15;
        }
LABEL_14:
        if ((a20 & 0x80000000) == 0)
        {
LABEL_12:
          if (!v34) {
LABEL_17:
          }
            _Unwind_Resume(a1);
LABEL_16:
          __cxa_free_exception(v33);
          _Unwind_Resume(a1);
        }
LABEL_15:
        operator delete(a15);
        if ((v34 & 1) == 0) {
          goto LABEL_17;
        }
        goto LABEL_16;
      }
LABEL_10:
      if (a26 < 0) {
        goto LABEL_11;
      }
      goto LABEL_14;
    }
  }
  else if (a14 < 0)
  {
    goto LABEL_5;
  }
  if (a33 < 0) {
    goto LABEL_8;
  }
  goto LABEL_10;
}

double E5DB::ComputePsnr(E5DB *this, const E5RT::IOPort *a2, const E5RT::IOPort *a3)
{
  E5RT::IOPort::GetPortDescriptor(this, &v28);
  uint64_t v5 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v28);
  E5RT::TensorDescriptor::GetTensorDataType(v5, (E5RT::TensorDataType *)v30);
  float v6 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  E5RT::IOPort::GetPortDescriptor(a2, &v26);
  double v7 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v26);
  E5RT::TensorDescriptor::GetTensorDataType(v7, (E5RT::TensorDataType *)&v28);
  float v8 = v27;
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (!E5RT::TensorDataType::IsType<float>((uint64_t)v30) || !E5RT::TensorDataType::IsType<float>((uint64_t)&v28))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Found non-float tensors, which is not supported.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  E5RT::IOPort::GetMemoryObject(this, &v24);
  float v9 = (E5RT::BufferObject *)E5RT::MemoryObject::Buffer(v24);
  uint64_t DataSpan = E5RT::BufferObject::GetDataSpan(v9);
  if (v11 >= 4) {
    unsigned int v12 = (E5RT::OperandDescriptor *)DataSpan;
  }
  else {
    unsigned int v12 = 0;
  }
  std::string v26 = v12;
  std::string v27 = (std::__shared_weak_count *)(v11 >> 2);
  uint8x8_t v13 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  E5RT::IOPort::GetMemoryObject(a2, &v22);
  unint64_t v14 = (E5RT::BufferObject *)E5RT::MemoryObject::Buffer(v22);
  uint64_t v15 = E5RT::BufferObject::GetDataSpan(v14);
  if (v16 >= 4) {
    unint64_t v17 = (E5RT::MemoryObject *)v15;
  }
  else {
    unint64_t v17 = 0;
  }
  std::string v24 = v17;
  std::string v25 = (std::__shared_weak_count *)(v16 >> 2);
  long long v18 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  double v19 = E5DB::ComputePsnr<float,float>(&v26, &v24);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&v28);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v30);
  return v19;
}

void sub_192478564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)va);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)va1);
  _Unwind_Resume(a1);
}

uint64_t E5DB::ComputePsnr@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3) {
    BOOL v4 = v3 == a2[3];
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Found empty ports or with unequal sizes.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v39 = [MEMORY[0x1E4F1CA60] dictionary];
  double v7 = *(uint64_t **)(a1 + 16);
  if (v7)
  {
    double v8 = 0.0;
    while (1)
    {
      float v9 = v7 + 2;
      uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(a2, (uint64_t)(v7 + 2));
      if (!v10) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      unint64_t v11 = (E5RT::IOPort *)v7[5];
      if (!v11 || !v10[5])
      {
        int v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v34, "Found a null pointers to ports.");
        __cxa_throw(v34, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      E5RT::IOPort::GetPortDescriptor(v11, &v44);
      unsigned int v12 = E5RT::OperandDescriptor::TryAsTensorDescriptor(v44);
      uint8x8_t v13 = v45;
      if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)v10[5], &v44);
      unint64_t v14 = E5RT::OperandDescriptor::TryAsTensorDescriptor(v44);
      uint64_t v15 = v45;
      if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
      E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)v7[5], &v44);
      unint64_t v16 = (E5RT::SurfaceDescriptor *)E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v44);
      unint64_t v17 = v45;
      if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)v10[5], &v44);
      long long v18 = (E5RT::SurfaceDescriptor *)E5RT::OperandDescriptor::TryAsSurfaceDescriptor(v44);
      double v19 = v45;
      if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
        if (!v12) {
          goto LABEL_39;
        }
      }
      else if (!v12)
      {
        goto LABEL_39;
      }
      if (v14)
      {
        E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)v7[5], &v42);
        int64x2_t v20 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v42);
        E5RT::TensorDescriptor::GetTensorDataType(v20, (E5RT::TensorDataType *)&v44);
        uint64_t v21 = v43;
        if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
        E5RT::IOPort::GetPortDescriptor((E5RT::IOPort *)v10[5], &v40);
        long long v22 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v40);
        E5RT::TensorDescriptor::GetTensorDataType(v22, (E5RT::TensorDataType *)&v42);
        std::string v23 = v41;
        if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        if (!E5RT::TensorDataType::IsType<float>((uint64_t)&v44) || !E5RT::TensorDataType::IsType<float>((uint64_t)&v42))
        {
          if (!E5RT::TensorDataType::IsType<float>((uint64_t)&v44) || E5RT::TensorDataType::IsType<float>((uint64_t)&v42))
          {
            if (!E5RT::TensorDataType::IsType<float>((uint64_t)&v44)
              && E5RT::TensorDataType::IsType<float>((uint64_t)&v42))
            {
              E5DB::MakeFloatPort((E5DB *)v7[5], v27);
            }
            E5DB::MakeFloatPort((E5DB *)v7[5], v27);
          }
          E5DB::MakeFloatPort((E5DB *)v10[5], v26);
        }
        double v25 = E5DB::ComputePsnr((E5DB *)v7[5], (const E5RT::IOPort *)v10[5], v24);
        E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&v42);
        E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&v44);
        goto LABEL_46;
      }
LABEL_39:
      if (!v16 || !v18)
      {
        uint64_t v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v36, "Port and NoisyPort are not the same type.");
        __cxa_throw(v36, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int SurfaceFormat = E5RT::SurfaceDescriptor::GetSurfaceFormat(v16);
      if (SurfaceFormat != E5RT::SurfaceDescriptor::GetSurfaceFormat(v18))
      {
        uint64_t v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v35, "Port and NoisyPort surface format are not the same.");
        goto LABEL_62;
      }
      if ((SurfaceFormat & 0xFFFFFFFE) != 0xA)
      {
        uint64_t v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v35, "PixelFormat not supported yet.");
LABEL_62:
        __cxa_throw(v35, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      double v25 = _ZN4E5DB18ComputePsnrSurfaceIDF16_EEdRKN4E5RT6IOPortES4_((E5RT::IOPort *)v7[5], (E5RT::IOPort *)v10[5]);
LABEL_46:
      if (fabs(v25) == INFINITY)
      {
        long long v29 = [MEMORY[0x1E4F1CA98] null];
        if (*((char *)v7 + 39) < 0) {
          float v9 = (void *)*v9;
        }
        std::string v30 = [NSString stringWithUTF8String:v9];
        [v39 setObject:v29 forKeyedSubscript:v30];

        double v7 = (uint64_t *)*v7;
        if (!v7) {
          goto LABEL_56;
        }
      }
      else
      {
        std::string v31 = [NSNumber numberWithDouble:v25];
        if (*((char *)v7 + 39) < 0) {
          float v9 = (void *)*v9;
        }
        std::string v32 = [NSString stringWithUTF8String:v9];
        [v39 setObject:v31 forKeyedSubscript:v32];

        double v8 = v8 + v25 * (float)(1.0 / (float)v3);
        double v7 = (uint64_t *)*v7;
        if (!v7) {
          goto LABEL_56;
        }
      }
    }
  }
  double v8 = 0.0;
LABEL_56:
  uint64_t result = [NSNumber numberWithDouble:v8];
  *a3 = result;
  a3[1] = (uint64_t)v39;
  return result;
}

void sub_192478CDC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192478CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_192478D04(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)va1);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)va2);

  _Unwind_Resume(a1);
}

void sub_192478F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<E5RT::SurfaceFormat,std::hash<E5RT::SurfaceFormat>,std::equal_to<E5RT::SurfaceFormat>,std::allocator<E5RT::SurfaceFormat>>::__emplace_unique_key_args<E5RT::SurfaceFormat,E5RT::SurfaceFormat const&>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint64_t v10 = (uint64_t *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  unint64_t v14 = operator new(0x18uLL);
  *unint64_t v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    unint64_t v6 = v3;
  }
  else
  {
    BOOL v17 = 1;
    if (v7 >= 3) {
      BOOL v17 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_36;
    }
    if (prime < v7)
    {
      unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        unint64_t v21 = std::__next_prime(v21);
      }
      else
      {
        uint64_t v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          unint64_t v21 = v23;
        }
      }
      if (prime <= v21) {
        size_t prime = v21;
      }
      if (prime < v7) {
LABEL_36:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        v6 %= v7;
      }
    }
    else
    {
      unint64_t v6 = (v7 - 1) & v6;
    }
  }
  uint64_t v24 = *(void *)a1;
  double v25 = *(void **)(*(void *)a1 + 8 * v6);
  if (v25)
  {
    *unint64_t v14 = *v25;
LABEL_59:
    *double v25 = v14;
    goto LABEL_60;
  }
  *unint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v24 + 8 * v6) = a1 + 16;
  if (*v14)
  {
    unint64_t v26 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7) {
        v26 %= v7;
      }
    }
    else
    {
      v26 &= v7 - 1;
    }
    double v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_192479238(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void E5DB::RegressionTestConfigParser::Parse(E5DB::RegressionTestConfigParser *this, std::__fs::filesystem::path *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  std::string v31 = (int64x2_t *)((char *)this + 40);
  std::vector<std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)this + 40, *((void **)this + 5));
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>>>::clear(this);
  std::string v33 = a2;
  E5DB::RegressionTestConfigParser::GetTestDataFilePath(a2, &v46);
  unint64_t j = E5DB::GetJSONFromFile(&v46, v4);
  HIBYTE(v4E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = 6;
  strcpy((char *)__p, "frames");
  int v34 = j;
  unint64_t v6 = E5DB::GetValueFromDictionary(j, (uint64_t *)__p);
  if (SHIBYTE(v41) < 0) {
    operator delete(__p[0]);
  }
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id v7 = v6;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v42 objects:v47 count:16];
  if (v8)
  {
    uint64_t v32 = *(void *)v43;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v43 != v32) {
          objc_enumerationMutation(v7);
        }
        uint64_t v10 = *(NSDictionary **)(*((void *)&v42 + 1) + 8 * i);
        std::__fs::filesystem::path::__string_view v11 = std::__fs::filesystem::path::__parent_path(v33);
        if (v11.__size_ >= 0x7FFFFFFFFFFFFFF8) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v11.__size_ >= 0x17)
        {
          std::basic_string_view<_CharT, _Traits>::size_type v13 = (v11.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v11.__size_ | 7) != 0x17) {
            std::basic_string_view<_CharT, _Traits>::size_type v13 = v11.__size_ | 7;
          }
          std::basic_string_view<_CharT, _Traits>::size_type v14 = v13 + 1;
          p_dst = (long long *)operator new(v13 + 1);
          *((void *)&__dst + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v11.__size_;
          *(void *)&long long v38 = v14 | 0x8000000000000000;
          *(void *)&long long __dst = p_dst;
LABEL_16:
          memmove(p_dst, v11.__data_, v11.__size_);
          goto LABEL_17;
        }
        BYTE7(v38) = v11.__size_;
        p_dst = &__dst;
        if (v11.__size_) {
          goto LABEL_16;
        }
LABEL_17:
        *((unsigned char *)p_dst + v11.__size_) = 0;
        *(_OWORD *)&v35.__r_.__value_.__l.__data_ = __dst;
        v35.__r_.__value_.__r.__words[2] = v38;
        E5DB::RegressionTestConfigParser::GetFrameData((const std::__fs::filesystem::path *)&v35, v10, (uint64_t)__p);
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v35.__r_.__value_.__l.__data_);
        }
        long long __dst = 0u;
        long long v38 = 0u;
        int v39 = 1065353216;
        float v15 = v41;
        for (j = v34; v15; float v15 = *(char **)v15)
        {
          while (1)
          {
            if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>>>::find<std::string>(this, (uint64_t)(v15 + 16)))
            {
              uint8x8_t v22 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(*((E5RT::OperandDescriptor **)v15
                                                                                        + 5));
              int TensorShape = E5RT::TensorDescriptor::GetTensorShape(v22);
              uint64_t v24 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(*((E5RT::OperandDescriptor **)v15
                                                                                        + 5));
              E5RT::TensorDescriptor::GetTensorDataType(v24, (E5RT::TensorDataType *)&v35);
              E5RT::TensorDescriptor::CreateTensorDesc(TensorShape, (E5RT::TensorDataType::Impl **)&v35);
            }
            if (v15[39] < 0) {
              std::string::__init_copy_ctor_external(&v35, *((const std::string::value_type **)v15 + 2), *((void *)v15 + 3));
            }
            else {
              std::string v35 = *(std::string *)(v15 + 16);
            }
            long long v36 = *(_OWORD *)(v15 + 56);
            *((void *)v15 + 7) = 0;
            *((void *)v15 + 8) = 0;
            std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::MemoryObject>>>((uint64_t)&__dst, (uint64_t)&v35, (uint64_t)&v35);
            double v25 = (std::__shared_weak_count *)*((void *)&v36 + 1);
            if (*((void *)&v36 + 1)
              && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v36 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
            if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
              break;
            }
            float v15 = *(char **)v15;
            if (!v15) {
              goto LABEL_20;
            }
          }
          operator delete(v35.__r_.__value_.__l.__data_);
        }
LABEL_20:
        unint64_t v16 = *((void *)this + 6);
        if (v16 >= *((void *)this + 7))
        {
          *((void *)this + 6) = std::vector<std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>>::__push_back_slow_path<std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>>(v31, (uint64_t *)&__dst);
          unint64_t v26 = (void **)v38;
          if ((void)v38) {
            goto LABEL_45;
          }
        }
        else
        {
          unint64_t v17 = __dst;
          *(void *)&long long __dst = 0;
          *(_OWORD *)unint64_t v16 = __PAIR128__(*((unint64_t *)&__dst + 1), v17);
          *((void *)&__dst + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = 0;
          uint64_t v18 = v38;
          *(void *)(v16 + 16) = v38;
          uint64_t v19 = *((void *)&v38 + 1);
          *(void *)(v16 + 24) = *((void *)&v38 + 1);
          *(_DWORD *)(v16 + 32) = v39;
          if (v19)
          {
            unint64_t v20 = *(void *)(v18 + 8);
            unint64_t v21 = *(void *)(v16 + 8);
            if ((v21 & (v21 - 1)) != 0)
            {
              if (v20 >= v21) {
                v20 %= v21;
              }
            }
            else
            {
              v20 &= v21 - 1;
            }
            *(void *)(v17 + 8 * v20) = v16 + 16;
            long long v38 = 0uLL;
          }
          *((void *)this + 6) = v16 + 40;
          unint64_t v26 = (void **)v38;
          if ((void)v38)
          {
            do
            {
              while (1)
              {
LABEL_45:
                std::string v27 = (void **)*v26;
                unint64_t v28 = (std::__shared_weak_count *)v26[6];
                if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                  std::__shared_weak_count::__release_weak(v28);
                }
                if (*((char *)v26 + 39) < 0) {
                  break;
                }
                operator delete(v26);
                unint64_t v26 = v27;
                if (!v27) {
                  goto LABEL_49;
                }
              }
              operator delete(v26[2]);
              operator delete(v26);
              unint64_t v26 = v27;
            }
            while (v27);
          }
        }
LABEL_49:
        long long v29 = (void *)__dst;
        *(void *)&long long __dst = 0;
        if (v29) {
          operator delete(v29);
        }
        std::__hash_table<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>>::__deallocate_node((int)__p, v41);
        std::string v30 = __p[0];
        __p[0] = 0;
        if (v30) {
          operator delete(v30);
        }
      }
      uint64_t v8 = [v7 countByEnumeratingWithState:&v42 objects:v47 count:16];
    }
    while (v8);
  }

  if (SHIBYTE(v46.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_192479848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a51 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

E5DB::RegressionTestConfigParser *E5DB::RegressionTestConfigParser::RegressionTestConfigParser(E5DB::RegressionTestConfigParser *this, std::__fs::filesystem::path *a2)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  E5DB::RegressionTestConfigParser::Parse(this, a2);
  return this;
}

void sub_1924799D8(_Unwind_Exception *a1)
{
  if (*v2)
  {
    std::vector<std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    operator delete(*v2);
  }
  sub_19247CAEC(v1);
  _Unwind_Resume(a1);
}

void E5DB::RegressionTestConfigParser::GetTestDataFilePath(std::__fs::filesystem::path *a1@<X1>, std::__fs::filesystem::path *a2@<X8>)
{
  std::__fs::filesystem::__status(a1, 0);
  if (__p.__pn_.__r_.__value_.__s.__data_[0] == 255 || __p.__pn_.__r_.__value_.__s.__data_[0] == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::__fs::filesystem::path::extension[abi:ne180100](a1, (uint64_t)&__dst);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&pn, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    }
    else {
      std::string pn = __dst;
    }
    uint64_t v24 = std::string::insert(&pn, 0, "Test configuration file does not exist:");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    __p.__pn_.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &__p.__pn_);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  id v7 = E5DB::GetJSONFromFile(a1, v5);
  *((unsigned char *)&__p.__pn_.__r_.__value_.__s + 23) = 5;
  strcpy((char *)&__p, "tests");
  uint64_t v8 = E5DB::GetValueFromDictionary(v7, (uint64_t *)&__p);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  }
  if ([v8 count] != 1)
  {
    uint64_t v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v23, "Test config can have only one network's config.");
    __cxa_throw(v23, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v9 = [v8 objectAtIndex:0];
  *((unsigned char *)&__p.__pn_.__r_.__value_.__s + 23) = 16;
  strcpy((char *)&__p, "data_frames_file");
  uint64_t v10 = E5DB::GetValueFromDictionary(v9, (uint64_t *)&__p);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  }

  std::__fs::filesystem::path::__string_view v11 = std::__fs::filesystem::path::__parent_path(a1);
  if (v11.__size_ > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v11.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v13 = (v11.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v13 = v11.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v14 = v13 + 1;
    p_std::string p = (std::__fs::filesystem::path *)operator new(v13 + 1);
    __p.__pn_.__r_.__value_.__l.__size_ = v11.__size_;
    __p.__pn_.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
    __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_17;
  }
  *((unsigned char *)&__p.__pn_.__r_.__value_.__s + 23) = v11.__size_;
  p_std::string p = &__p;
  if (v11.__size_) {
LABEL_17:
  }
    memmove(p_p, v11.__data_, v11.__size_);
  p_p->__pn_.__r_.__value_.__s.__data_[v11.__size_] = 0;
  std::string pn = __p.__pn_;
  id v15 = v10;
  unint64_t v16 = (const char *)[v15 UTF8String];
  size_t v17 = strlen(v16);
  if (v17 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v18 = v17;
  if (v17 >= 0x17)
  {
    uint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v20 = v17 | 7;
    }
    uint64_t v21 = v20 + 1;
    p_dst = (std::string *)operator new(v20 + 1);
    __dst.__r_.__value_.__l.__size_ = v18;
    __dst.__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_25;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v17;
  p_dst = &__dst;
  if (v17) {
LABEL_25:
  }
    memmove(p_dst, v16, v18);
  p_dst->__r_.__value_.__s.__data_[v18] = 0;
  std::__fs::filesystem::path __p = (std::__fs::filesystem::path)__dst;
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)&pn, a2);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
LABEL_30:
    operator delete(pn.__r_.__value_.__l.__data_);
    goto LABEL_28;
  }
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_30;
  }
LABEL_28:
}

void sub_192479D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v28);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v28);
  _Unwind_Resume(a1);
}

void sub_192479E80()
{
}

void E5DB::RegressionTestConfigParser::GetFrameData(const std::__fs::filesystem::path *a1@<X1>, NSDictionary *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  char v15 = 6;
  strcpy((char *)__p, "inputs");
  uint64_t v8 = a2;
  BOOL v4 = E5DB::GetValueFromDictionary(v8, (uint64_t *)__p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  memset(v16, 0, sizeof(v16));
  obunint64_t j = v4;
  if ([obj countByEnumeratingWithState:v16 objects:v18 count:16])
  {
    objc_msgSend(obj, "valueForKey:", **((id **)&v16[0] + 1), v8);
    uint64_t v5 = (E5DB::RegressionTestConfigParser *)objc_claimAutoreleasedReturnValue();
    E5DB::RegressionTestConfigParser::GetTensorData(v5, a1, (NSDictionary *)v5);
  }

  char v15 = 7;
  strcpy((char *)__p, "outputs");
  unint64_t v6 = E5DB::GetValueFromDictionary(v8, (uint64_t *)__p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  memset(v13, 0, sizeof(v13));
  id v9 = v6;
  if ([v9 countByEnumeratingWithState:v13 objects:v17 count:16])
  {
    id v7 = [v9 valueForKey:**((id **)&v13[0] + 1)];
    E5DB::RegressionTestConfigParser::GetTensorData(v7, a1, (NSDictionary *)v7);
  }
}

void sub_19247A5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  std::unordered_map<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>::~unordered_map[abi:ne180100](a14);
  _Unwind_Resume(a1);
}

unint64_t E5DB::RegressionTestConfigParser::GetFrameCount(E5DB::RegressionTestConfigParser *this)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 3);
}

void E5DB::RegressionTestConfigParser::GetInputDescriptor(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>>>::find<std::string>(a1, a2))
  {
    unint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>>>::find<std::string>(a1, a2);
    if (!v6) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    uint64_t v7 = v6[6];
    *a3 = v6[5];
    a3[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    return;
  }
  int v8 = *(char *)(a2 + 23);
  if (v8 >= 0) {
    size_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v9 = *(void *)(a2 + 8);
  }
  unint64_t v10 = v9 + 12;
  if (v9 + 12 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v10 >= 0x17)
  {
    uint64_t v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v12 = v10 | 7;
    }
    uint64_t v13 = v12 + 1;
    p_dst = (void **)operator new(v12 + 1);
    size_t v18 = v9 + 12;
    unint64_t v19 = v13 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_15;
  }
  size_t v18 = 0;
  unint64_t v19 = 0;
  std::string __dst = 0;
  p_dst = (void **)&__dst;
  HIBYTE(v19) = v9 + 12;
  if (v9)
  {
LABEL_15:
    if (v8 >= 0) {
      std::basic_string_view<_CharT, _Traits>::size_type v14 = (const void *)a2;
    }
    else {
      std::basic_string_view<_CharT, _Traits>::size_type v14 = *(const void **)a2;
    }
    memmove(p_dst, v14, v9);
  }
  strcpy((char *)p_dst + v9, "_classic_cpu");
  char v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>>>::find<std::string>(a1, (uint64_t)&__dst);
  if (!v15) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v16 = v15[6];
  *a3 = v15[5];
  a3[1] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(__dst);
  }
}

void sub_19247A894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void E5DB::RegressionTestConfigParser::GetData(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 40);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 48) - v5) >> 3) <= a3) {
    goto LABEL_28;
  }
  size_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::find<std::string>((void *)(v5 + 40 * a3), a2);
  uint64_t v10 = *(void *)(a1 + 40);
  unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 48) - v10) >> 3);
  if (v9)
  {
    if (v11 > a3)
    {
      uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::find<std::string>((void *)(v10 + 40 * a3), a2);
      if (!v12) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v13 = v12[6];
      *a4 = v12[5];
      a4[1] = v13;
      if (v13) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      }
      return;
    }
LABEL_28:
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v11 <= a3) {
    goto LABEL_28;
  }
  int v14 = *(char *)(a2 + 23);
  if (v14 >= 0) {
    size_t v15 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v15 = *(void *)(a2 + 8);
  }
  unint64_t v16 = v15 + 12;
  if (v15 + 12 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v17 = (void *)(v10 + 40 * a3);
  if (v16 >= 0x17)
  {
    uint64_t v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v19 = v16 | 7;
    }
    uint64_t v20 = v19 + 1;
    p_dst = (void **)operator new(v19 + 1);
    size_t v25 = v15 + 12;
    unint64_t v26 = v20 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_18;
  }
  size_t v25 = 0;
  unint64_t v26 = 0;
  std::string __dst = 0;
  p_dst = (void **)&__dst;
  HIBYTE(v26) = v15 + 12;
  if (v15)
  {
LABEL_18:
    if (v14 >= 0) {
      uint64_t v21 = (const void *)a2;
    }
    else {
      uint64_t v21 = *(const void **)a2;
    }
    memmove(p_dst, v21, v15);
  }
  strcpy((char *)p_dst + v15, "_classic_cpu");
  uint8x8_t v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::find<std::string>(v17, (uint64_t)&__dst);
  if (!v22) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v23 = v22[6];
  *a4 = v22[5];
  a4[1] = v23;
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v26) < 0) {
    operator delete(__dst);
  }
}

void sub_19247AA98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19247AAB4(uint64_t a1, uint64_t a2, char **a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v10 = *a3;
  size_t v9 = a3[1];
  uint64_t v53 = (v9 - *a3) >> 3;
  int64_t v11 = v9 - *a3;
  if (v9 == *a3)
  {
    uint64_t v13 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    if (v11 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = (int32x4_t *)operator new(v9 - v10);
    uint64_t v13 = (int32x4_t *)((char *)v12 + 8 * v53);
    memcpy(v12, v10, v9 - v10);
  }
  uint64_t v14 = 8 * (v53 - 3);
  v12->i64[(unint64_t)v14 / 8] = vcvtps_u32_f32((float)*(unint64_t *)&v10[v14] / (float)a6);
  v13[-1].i64[1] *= a6;
  if (v12 == v13)
  {
    int v16 = 1;
    goto LABEL_13;
  }
  unint64_t v15 = (char *)v13 - (char *)v12 - 8;
  if (v15 < 0x38)
  {
    int v16 = 1;
    size_t v17 = v12;
    do
    {
LABEL_12:
      __int32 v28 = v17->i32[0];
      size_t v17 = (int32x4_t *)((char *)v17 + 8);
      v16 *= v28;
    }
    while (v17 != v13);
    goto LABEL_13;
  }
  uint64_t v18 = (v15 >> 3) + 1;
  size_t v17 = (int32x4_t *)((char *)v12 + 8 * (v18 & 0x3FFFFFFFFFFFFFF8));
  uint64_t v19 = v12 + 2;
  v20.i64[0] = 0x100000001;
  v20.i64[1] = 0x100000001;
  uint64_t v21 = v18 & 0x3FFFFFFFFFFFFFF8;
  v22.i64[0] = 0x100000001;
  v22.i64[1] = 0x100000001;
  do
  {
    int32x4_t v24 = v19[-2];
    int32x4_t v23 = v19[-1];
    int32x4_t v26 = *v19;
    int32x4_t v25 = v19[1];
    v19 += 4;
    int32x4_t v20 = vmulq_s32(v20, vuzp1q_s32(v24, v23));
    int32x4_t v22 = vmulq_s32(v22, vuzp1q_s32(v26, v25));
    v21 -= 8;
  }
  while (v21);
  int8x16_t v27 = (int8x16_t)vmulq_s32(v22, v20);
  *(int32x2_t *)v27.i8 = vmul_s32(*(int32x2_t *)v27.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL));
  int v16 = v27.i32[0] * v27.i32[1];
  if (v18 != (v18 & 0x3FFFFFFFFFFFFFF8)) {
    goto LABEL_12;
  }
LABEL_13:
  unint64_t v59 = v16;
  if (v16 > a5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Interleaved dst shape is larger than the buf size.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v9 == v10)
  {
    std::string v31 = 0;
    long long v29 = 0;
    std::string v30 = 0;
    uint64_t v57 = 0;
    unint64_t v58 = a4;
    if (!a4) {
      goto LABEL_36;
    }
    goto LABEL_19;
  }
  if (v11 < 0) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  long long v29 = (char *)operator new(v9 - v10);
  bzero(v29, v9 - v10);
  std::string v30 = (char *)operator new(v9 - v10);
  std::string v31 = &v29[v11];
  bzero(v30, v11);
  uint64_t v57 = &v30[v11];
  unint64_t v58 = a4;
  if (a4)
  {
LABEL_19:
    unint64_t v32 = 0;
    uint64_t v33 = (char *)v13 - (char *)v12;
    uint64_t v54 = v53 - 1;
    do
    {
      uint64_t v34 = v54;
      unint64_t v35 = v32;
      if (v11 >= 1)
      {
        do
        {
          *(void *)&v29[8 * v34] = v35 % *(void *)&v10[8 * v34];
          v35 /= *(void *)&v10[8 * v34];
          uint64_t v36 = v34-- + 1;
        }
        while (v36 > 1);
      }
      if (v31 != v29) {
        memmove(v30, v29, v31 - v29);
      }
      *(void *)&v30[v14] = *(void *)&v29[v14] / a6;
      *((void *)v57 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = *(void *)&v29[v14] % a6 + *((void *)v31 - 1) * a6;
      if (v33 < 1)
      {
        unint64_t v37 = 0;
        if (v11 >= 1) {
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v37 = 0;
        uint64_t v38 = ((unint64_t)v33 >> 3) - 1;
        uint64_t v39 = 1;
        do
        {
          v37 += *(void *)&v30[8 * v38] * v39;
          v39 *= v12->i64[v38];
          unint64_t v40 = v38-- + 1;
        }
        while (v40 > 1);
        if (v11 >= 1)
        {
LABEL_28:
          unint64_t v41 = 0;
          uint64_t v42 = ((unint64_t)v11 >> 3) - 1;
          uint64_t v43 = 1;
          do
          {
            v41 += *(void *)&v29[8 * v42] * v43;
            v43 *= *(void *)&v10[8 * v42];
            unint64_t v44 = v42-- + 1;
          }
          while (v44 > 1);
          unint64_t v45 = v58;
          if (v37 >= v59)
          {
LABEL_45:
            uint64_t v51 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v51, "srcOffset or dstOffset is out of range.");
            v51->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
            __cxa_throw(v51, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
          }
          goto LABEL_34;
        }
      }
      unint64_t v41 = 0;
      unint64_t v45 = v58;
      if (v37 >= v59) {
        goto LABEL_45;
      }
LABEL_34:
      if (v41 >= v45) {
        goto LABEL_45;
      }
      _S0 = *(_DWORD *)(a1 + 4 * v41);
      __asm { FCVT            H0, S0 }
      *(_WORD *)(a2 + 2 * v37) = _S0;
      ++v32;
    }
    while (v32 != v45);
  }
LABEL_36:
  if (v30) {
    operator delete(v30);
  }
  if (v29) {
    operator delete(v29);
  }
  if (v12)
  {
    operator delete(v12);
  }
}

void sub_19247AF1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (v23) {
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

void E5DB::RegressionTestConfigParser::GetMemoryObject(E5DB::RegressionTestConfigParser *this, const std::__fs::filesystem::path *a2, unint64_t a3, char a4)
{
  if ((a4 & 3) == 0) {
    operator new();
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::invalid_argument::invalid_argument[abi:ne180100](exception, "Size must be a multiple of sizeof(float).");
  __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
}

void sub_19247B170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  MEMORY[0x192FF16B0](v14, 0x10F1C40C2655342);
  _Unwind_Resume(a1);
}

void sub_19247B1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    sub_1922EC2D8(a9);
  }
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  _Unwind_Resume(a1);
}

void E5DB::RegressionTestConfigParser::GetTensorData(E5DB::RegressionTestConfigParser *this, const std::__fs::filesystem::path *a2, NSDictionary *a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = a3;
  HIBYTE(v38) = 5;
  strcpy((char *)&__p, "shape");
  BOOL v4 = E5DB::GetValueFromDictionary(v3, (uint64_t *)&__p);
  if (SHIBYTE(v38) < 0) {
    operator delete(__p);
  }
  HIBYTE(v38) = 4;
  strcpy((char *)&__p, "file");
  E5DB::GetValueFromDictionary(v3, (uint64_t *)&__p);
  objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v38) < 0) {
    operator delete(__p);
  }
  HIBYTE(v38) = 6;
  strcpy((char *)&__p, "offset");
  E5DB::GetValueFromDictionary(v3, (uint64_t *)&__p);
  objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v38) < 0) {
    operator delete(__p);
  }
  HIBYTE(v38) = 4;
  strcpy((char *)&__p, "size");
  E5DB::GetValueFromDictionary(v3, (uint64_t *)&__p);
  objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v38) < 0) {
    operator delete(__p);
  }
  std::__fs::filesystem::path __p = 0;
  unint64_t v37 = 0;
  uint64_t v38 = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  obunint64_t j = v4;
  uint64_t v5 = [obj countByEnumeratingWithState:&v32 objects:v39 count:16];
  if (!v5)
  {
LABEL_37:

    E5RT::TensorDataType::TensorDataType(&v31);
  }
  uint64_t v30 = *(void *)v33;
LABEL_11:
  uint64_t v6 = 0;
  while (1)
  {
    if (*(void *)v33 != v30) {
      objc_enumerationMutation(obj);
    }
    id v7 = *(id *)(*((void *)&v32 + 1) + 8 * v6);
    uint64_t v8 = [v7 unsignedIntegerValue];
    uint64_t v9 = v8;
    uint64_t v10 = v37;
    if (v37 >= v38) {
      break;
    }
    *(void *)unint64_t v37 = v8;
    uint64_t v11 = (uint64_t)(v10 + 8);
LABEL_35:
    unint64_t v37 = (char *)v11;

    if (++v6 == v5)
    {
      uint64_t v5 = [obj countByEnumeratingWithState:&v32 objects:v39 count:16];
      if (!v5) {
        goto LABEL_37;
      }
      goto LABEL_11;
    }
  }
  uint64_t v12 = (char *)__p;
  int64_t v13 = v37 - (unsigned char *)__p;
  uint64_t v14 = (v37 - (unsigned char *)__p) >> 3;
  unint64_t v15 = v14 + 1;
  if ((unint64_t)(v14 + 1) >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v16 = v38 - (unsigned char *)__p;
  if ((v38 - (unsigned char *)__p) >> 2 > v15) {
    unint64_t v15 = v16 >> 2;
  }
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v17 = v15;
  }
  if (v17)
  {
    if (v17 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v18 = (char *)operator new(8 * v17);
    uint64_t v19 = (uint64_t *)&v18[8 * v14];
    *uint64_t v19 = v9;
    uint64_t v11 = (uint64_t)(v19 + 1);
    if (v10 == v12) {
      goto LABEL_33;
    }
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v19 = (uint64_t *)(8 * v14);
    *(void *)(8 * v14) = v9;
    uint64_t v11 = 8 * v14 + 8;
    if (v10 == v12)
    {
LABEL_33:
      std::__fs::filesystem::path __p = v19;
      unint64_t v37 = (char *)v11;
      uint64_t v38 = &v18[8 * v17];
      if (v12) {
        operator delete(v12);
      }
      goto LABEL_35;
    }
  }
  unint64_t v20 = v10 - 8 - v12;
  if (v20 < 0x58) {
    goto LABEL_42;
  }
  if ((unint64_t)(v10 - &v18[v13]) < 0x20) {
    goto LABEL_42;
  }
  uint64_t v21 = (v20 >> 3) + 1;
  uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
  int32x4_t v23 = &v10[-v22];
  uint64_t v19 = (uint64_t *)((char *)v19 - v22);
  int32x4_t v24 = &v18[8 * v14 - 16];
  int32x4_t v25 = v10 - 16;
  uint64_t v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v27 = *(_OWORD *)v25;
    *((_OWORD *)v24 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = *((_OWORD *)v25 - 1);
    *(_OWORD *)int32x4_t v24 = v27;
    v24 -= 32;
    v25 -= 32;
    v26 -= 4;
  }
  while (v26);
  uint64_t v10 = v23;
  if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_42:
    do
    {
      uint64_t v28 = *((void *)v10 - 1);
      v10 -= 8;
      *--uint64_t v19 = v28;
    }
    while (v10 != v12);
  }
  goto LABEL_33;
}

void sub_19247B704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (a31 < 0) {
    operator delete(__p);
  }
  uint64_t v48 = a32;
  a32 = 0;
  if (v48) {
    (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
  }
  if (a42)
  {
    a43 = (uint64_t)a42;
    operator delete(a42);
  }

  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>>>::clear(void *a1)
{
  if (a1[3])
  {
    unint64_t v2 = (void **)a1[2];
    if (v2)
    {
      do
      {
        while (1)
        {
          unint64_t v3 = (void **)*v2;
          BOOL v4 = (std::__shared_weak_count *)v2[6];
          if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
          if (*((char *)v2 + 39) < 0) {
            break;
          }
          operator delete(v2);
          unint64_t v2 = v3;
          if (!v3) {
            goto LABEL_10;
          }
        }
        operator delete(v2[2]);
        operator delete(v2);
        unint64_t v2 = v3;
      }
      while (v3);
    }
LABEL_10:
    a1[2] = 0;
    uint64_t v5 = a1[1];
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
        *(void *)(*a1 + 8 * i) = 0;
    }
    a1[3] = 0;
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>>>::find<std::string>(void *a1, uint64_t a2)
{
  unint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    int64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        unint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          int64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        int64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

{
  unsigned char *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  unint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    int64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        unint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          int64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        int64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::OperandDescriptor>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    int64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      char v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          unint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            char v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          char v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  char v25 = (char *)operator new(0x38uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *(void *)char v25 = 0;
  *((void *)v25 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v10;
  uint64_t v26 = (std::string *)(v25 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v25 + 4) = *(void *)(a3 + 16);
  }
  *(_OWORD *)(v25 + 40) = *(_OWORD *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        long long v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        uint64_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        long long v29 = *(void **)(*(void *)a1 + 8 * v10);
        uint64_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      long long v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      uint64_t v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *uint64_t v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  long long v29 = *(void **)(*(void *)a1 + 8 * v3);
  uint64_t v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  *uint64_t v30 = *v29;
  *long long v29 = v42[0];
LABEL_92:
  char v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_19247BFD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19247BFE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::MemoryObject>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    int64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      char v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          unint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            char v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          char v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  char v25 = (char *)operator new(0x38uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *(void *)char v25 = 0;
  *((void *)v25 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v10;
  uint64_t v26 = (std::string *)(v25 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v25 + 4) = *(void *)(a3 + 16);
  }
  *(_OWORD *)(v25 + 40) = *(_OWORD *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        long long v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        uint64_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        long long v29 = *(void **)(*(void *)a1 + 8 * v10);
        uint64_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      long long v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      uint64_t v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *uint64_t v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  long long v29 = *(void **)(*(void *)a1 + 8 * v3);
  uint64_t v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  *uint64_t v30 = *v29;
  *long long v29 = v42[0];
LABEL_92:
  char v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_19247C448(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19247C45C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *std::vector<std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>>::__push_back_slow_path<std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>>(int64x2_t *a1, uint64_t *a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x333333333333333) {
    unint64_t v6 = 0x666666666666666;
  }
  else {
    unint64_t v6 = v4;
  }
  long long v34 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x666666666666666) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v7 = (char *)operator new(40 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v8 = &v7[40 * v3];
  unint64_t v9 = &v7[40 * v6];
  unint64_t v33 = v9;
  uint64_t v10 = *a2;
  unint64_t v11 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  *(void *)unint64_t v8 = v10;
  *((void *)v8 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v11;
  uint64_t v12 = a2[2];
  *((void *)v8 + 2) = v12;
  uint64_t v13 = a2[3];
  *((void *)v8 + 3) = v13;
  *((_DWORD *)v8 + 8) = *((_DWORD *)a2 + 8);
  if (v13)
  {
    unint64_t v14 = *(void *)(v12 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      BOOL v16 = v14 >= v11;
      unint64_t v15 = v14 % v11;
      if (!v16) {
        unint64_t v15 = v14;
      }
    }
    else
    {
      unint64_t v15 = v14 & (v11 - 1);
    }
    *(void *)(v10 + 8 * v15) = v8 + 16;
    a2[2] = 0;
    a2[3] = 0;
  }
  unint64_t v17 = v8 + 40;
  v32.i64[1] = (uint64_t)(v8 + 40);
  uint64_t v19 = a1->i64[0];
  unint64_t v18 = a1->u64[1];
  if (v18 == a1->i64[0])
  {
    int64x2_t v28 = vdupq_n_s64(v18);
  }
  else
  {
    uint64_t v20 = 0;
    do
    {
      uint64_t v22 = &v8[v20];
      uint64_t v23 = v18 + v20;
      uint64_t v24 = *(void *)(v18 + v20 - 40);
      *(void *)(v23 - 40) = 0;
      *((void *)v22 - 5) = v24;
      *((void *)v22 - 4) = *(void *)(v18 + v20 - 32);
      *(void *)(v23 - 32) = 0;
      uint64_t v25 = *(void *)(v18 + v20 - 24);
      *(void *)&v8[v20 - 24] = v25;
      uint64_t v26 = *(void *)(v18 + v20 - 16);
      *((void *)v22 - 2) = v26;
      *((_DWORD *)v22 - 2) = *(_DWORD *)(v18 + v20 - 8);
      if (v26)
      {
        unint64_t v21 = *(void *)(v25 + 8);
        unint64_t v27 = *((void *)v22 - 4);
        if ((v27 & (v27 - 1)) != 0)
        {
          if (v21 >= v27) {
            v21 %= v27;
          }
        }
        else
        {
          v21 &= v27 - 1;
        }
        *(void *)(v24 + 8 * v2E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = &v8[v20 - 24];
        *(void *)(v18 + v20 - 24) = 0;
        *(void *)(v18 + v20 - 16) = 0;
      }
      v20 -= 40;
    }
    while (v18 + v20 != v19);
    int64x2_t v28 = *a1;
    v8 += v20;
    unint64_t v17 = (char *)v32.i64[1];
    unint64_t v9 = v33;
  }
  a1->i64[0] = (uint64_t)v8;
  a1->i64[1] = (uint64_t)v17;
  int64x2_t v32 = v28;
  long long v29 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v9;
  unint64_t v33 = v29;
  std::__fs::filesystem::path __p = (void *)v28.i64[0];
  std::__split_buffer<std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>>::__destruct_at_end[abi:ne180100]((uint64_t)&__p, v28.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v17;
}

void sub_19247CAEC(uint64_t a1)
{
  unint64_t v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = *(char **)v2;
      unint64_t v4 = (std::__shared_weak_count *)*((void *)v2 + 6);
      if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5)
  {
    operator delete(v5);
  }
}

void E5DB::RunCommand::GetName(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 23) = 3;
  *(_DWORD *)a1 = 7239026;
}

double E5DB::RunCommand::GetDescription@<D0>(uint64_t a1@<X8>)
{
  unint64_t v3 = (char *)operator new(0x30uLL);
  *(void *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_192DA88C0;
  strcpy(v3, "Run the loaded E5 bundle on current platform.");
  return *(double *)"urrent platform.";
}

void *E5DB::RunCommand::RunCommand(void *this)
{
  *this = &unk_1EE324438;
  return this;
}

void E5DB::RunCommand::~RunCommand(E5DB::RunCommand *this)
{
}

uint64_t E5DB::RunCommand::GetHelp(E5DB::RunCommand *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v102);
  (*(void (**)(void **__return_ptr, E5DB::RunCommand *))(*(void *)this + 24))(__p, this);
  if ((v101 & 0x80u) == 0) {
    unint64_t v2 = __p;
  }
  else {
    unint64_t v2 = (void **)__p[0];
  }
  if ((v101 & 0x80u) == 0) {
    uint64_t v3 = v101;
  }
  else {
    uint64_t v3 = (uint64_t)__p[1];
  }
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)v2, v3);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v106, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v106);
  std::ostream::put();
  std::ostream::flush();
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v6 = std::locale::use_facet(&v106, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v106);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v101 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"run [options]", 13);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
  unint64_t v8 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"Options:", 8);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
  uint64_t v10 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"-f | --function [function]     : Run function in E5. Use * for all functions. Default = main", 92);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  uint64_t v12 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"-i | --input_data [file path]  : Config file for regression test vectors. Same format as", 88);
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
  unint64_t v14 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  unint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 file used for psnr check.", 58);
  std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
  BOOL v16 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  unint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 If omitted, then random inputs are used.", 73);
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  unint64_t v18 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"--input_index [index]          : Index to vector in the file specified by input_data above.", 91);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
  uint64_t v20 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  unint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 This option requires input file to be specified.", 81);
  std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
  uint64_t v22 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"-r | --repeat   [repetitions]  : Number of repetitions (per stream). Default = 1", 80);
  std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24)));
  uint64_t v24 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"-c | --cadence  [cadence]      : Cadence value to run inference. Default = 0", 76);
  std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
  uint64_t v26 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  unint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 If cadence is specified, then the test will run", 80);
  std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(void *)(*v27 - 24)));
  int64x2_t v28 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  long long v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 [repetitions] evaluations over [repetitions/cadence] secs", 90);
  std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
  uint64_t v30 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  BOOL v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 Cadence is not compatible with -t, -b, -s, or -a modes", 87);
  std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(void *)(*v31 - 24)));
  int64x2_t v32 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  unint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"-s | --execution_streams [S]   : Run on [S] concurrent streams for higher throughput", 84);
  std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(void *)(*v33 - 24)));
  long long v34 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  int8x8_t v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"-b | --batch_size [B]          : Submit [B] inferences in a batch on each stream", 80);
  std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(void *)(*v35 - 24)));
  unint64_t v36 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint8x8_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 Once a batch has finished the next one can start", 81);
  std::ios_base::getloc((const std::ios_base *)((char *)v37 + *(void *)(*v37 - 24)));
  uint64_t v38 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  unint64_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"-t | --time_to_run_seconds [T] : Target time the benchmark will attempt to run for in seconds", 93);
  std::ios_base::getloc((const std::ios_base *)((char *)v39 + *(void *)(*v39 - 24)));
  unint64_t v40 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v40->__vftable[2].~facet_0)(v40, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  unint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 Workload will stop after [T] seconds", 69);
  std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(void *)(*v41 - 24)));
  uint64_t v42 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  char v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 Will wait to finish operations already in progress (submitted)", 95);
  std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(void *)(*v43 - 24)));
  unint64_t v44 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  unint64_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 Option is not compatible with a fixed number of repetitions (-r)", 97);
  std::ios_base::getloc((const std::ios_base *)((char *)v45 + *(void *)(*v45 - 24)));
  std::__fs::filesystem::path v46 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v46->__vftable[2].~facet_0)(v46, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"-a | --asynchronous            : Run operations with the asynchronous API", 73);
  std::ios_base::getloc((const std::ios_base *)((char *)v47 + *(void *)(*v47 - 24)));
  uint64_t v48 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v48->__vftable[2].~facet_0)(v48, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  int v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"-w | --prewire                 : Enable buffer pre-wiring", 57);
  std::ios_base::getloc((const std::ios_base *)((char *)v49 + *(void *)(*v49 - 24)));
  size_t v50 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v50->__vftable[2].~facet_0)(v50, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"-o | --output   [output path]  : Output perfdata file path", 58);
  std::ios_base::getloc((const std::ios_base *)((char *)v51 + *(void *)(*v51 - 24)));
  uint64_t v52 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"--input_shapes_file            : Config file (json) for new input shapes and strides to reshpe", 94);
  std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(void *)(*v53 - 24)));
  uint64_t v54 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  std::string v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 the model with new shapes and strides in this format:", 86);
  std::ios_base::getloc((const std::ios_base *)((char *)v55 + *(void *)(*v55 - 24)));
  uint64_t v56 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 {\"[function_name\"]: {\"[input_name]\": {\"shape\": [10, 10], \"stride\": [200, 2]}}", 110);
  std::ios_base::getloc((const std::ios_base *)((char *)v57 + *(void *)(*v57 - 24)));
  unint64_t v58 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v58->__vftable[2].~facet_0)(v58, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  unint64_t v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 where stride is optional. If not provided, the shape would be packed.", 102);
  std::ios_base::getloc((const std::ios_base *)((char *)v59 + *(void *)(*v59 - 24)));
  uint64_t v60 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v60->__vftable[2].~facet_0)(v60, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"--adapter_file                 : Config file (json) for adapters in this format:", 80);
  std::ios_base::getloc((const std::ios_base *)((char *)v61 + *(void *)(*v61 - 24)));
  uint64_t v62 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v62->__vftable[2].~facet_0)(v62, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 DynamicCallables:", 50);
  std::ios_base::getloc((const std::ios_base *)((char *)v63 + *(void *)(*v63 - 24)));
  uint64_t v64 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v64->__vftable[2].~facet_0)(v64, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 {\"[function_name\": {\"type\": \"DynamicCallables\", \"adapter\": {\"callable\": \"MIL path relative to this config file.\"}}", 147);
  std::ios_base::getloc((const std::ios_base *)((char *)v65 + *(void *)(*v65 - 24)));
  uint64_t v66 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v66->__vftable[2].~facet_0)(v66, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 MutableMILWeightPaths:", 55);
  std::ios_base::getloc((const std::ios_base *)((char *)v67 + *(void *)(*v67 - 24)));
  uint64_t v68 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v68->__vftable[2].~facet_0)(v68, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 \"[function_name\": {\"type\": \"MutableMILWeightPaths\", \"adapter\": {\"weight\": \"Weight path relative to this config file.\"}}}", 153);
  std::ios_base::getloc((const std::ios_base *)((char *)v69 + *(void *)(*v69 - 24)));
  uint64_t v70 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"--write_rusage                 : Write proc_pid_rusage output to stdout", 71);
  std::ios_base::getloc((const std::ios_base *)((char *)v71 + *(void *)(*v71 - 24)));
  uint64_t v72 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v72->__vftable[2].~facet_0)(v72, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  int v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"--io_port_trace_dir [path]     : Output E5 IOPort descriptors and data to the given output directory", 100);
  std::ios_base::getloc((const std::ios_base *)((char *)v73 + *(void *)(*v73 - 24)));
  uint64_t v74 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v74->__vftable[2].~facet_0)(v74, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"--segment_io_trace_dir [path]  : Output E5 IOPort descriptors and data for each segment in the E5 program", 105);
  std::ios_base::getloc((const std::ios_base *)((char *)v75 + *(void *)(*v75 - 24)));
  uint64_t v76 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v76->__vftable[2].~facet_0)(v76, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 to the given output directory", 62);
  std::ios_base::getloc((const std::ios_base *)((char *)v77 + *(void *)(*v77 - 24)));
  int64_t v78 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v78->__vftable[2].~facet_0)(v78, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"-e | --e5_trace_format         : Indicate that the input file provided is in E5 IOPort trace format", 99);
  std::ios_base::getloc((const std::ios_base *)((char *)v79 + *(void *)(*v79 - 24)));
  std::string::size_type v80 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v80->__vftable[2].~facet_0)(v80, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  std::locale v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"--buffer_type [IO type]        : Buffer type used for I\\O. Default = IOSurface. Available types:", 96);
  std::ios_base::getloc((const std::ios_base *)((char *)v81 + *(void *)(*v81 - 24)));
  uint64_t v82 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v82->__vftable[2].~facet_0)(v82, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  unsigned __int8 v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 IOSurface (Darwin OS only), HeapAllocated (Darwin OS and Exclave OS), ", 103);
  std::ios_base::getloc((const std::ios_base *)((char *)v83 + *(void *)(*v83 - 24)));
  std::string v84 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v84->__vftable[2].~facet_0)(v84, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 EXSurface (Exclave OS with full ANE residence), and ", 85);
  std::ios_base::getloc((const std::ios_base *)((char *)v85 + *(void *)(*v85 - 24)));
  uint64_t v86 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v86->__vftable[2].~facet_0)(v86, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 MTLBuffer (Darwin OS with full GPU residence).", 79);
  std::ios_base::getloc((const std::ios_base *)((char *)v87 + *(void *)(*v87 - 24)));
  unsigned __int8 v88 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v88->__vftable[2].~facet_0)(v88, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  int v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"--enable_all_telemetry         : Enable telmetry from e5rt. Enables os_signposts per inference", 94);
  std::ios_base::getloc((const std::ios_base *)((char *)v89 + *(void *)(*v89 - 24)));
  unsigned __int8 v90 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v90->__vftable[2].~facet_0)(v90, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"                                 with additional performance information", 72);
  std::ios_base::getloc((const std::ios_base *)((char *)v91 + *(void *)(*v91 - 24)));
  char v92 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v92->__vftable[2].~facet_0)(v92, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  char v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"--skip_warmup_runs             : Skip warmup runs as part of benchmarking.", 74);
  std::ios_base::getloc((const std::ios_base *)((char *)v93 + *(void *)(*v93 - 24)));
  std::string v94 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v94->__vftable[2].~facet_0)(v94, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  std::ios_base::getloc((const std::ios_base *)((char *)v103 + *(void *)(v103[0] - 24)));
  unsigned __int8 v95 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v95->__vftable[2].~facet_0)(v95, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  unsigned __int8 v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"Must have loaded an E5 bundle before attempting to run it.", 58);
  std::ios_base::getloc((const std::ios_base *)((char *)v96 + *(void *)(*v96 - 24)));
  uint64_t v97 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v97->__vftable[2].~facet_0)(v97, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  v102[0] = *MEMORY[0x1E4FBA408];
  uint64_t v98 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v102 + *(void *)(v102[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v103[0] = v98;
  v103[1] = MEMORY[0x1E4FBA470] + 16;
  if (v104 < 0) {
    operator delete((void *)v103[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x192FF15B0](&v105);
}

void sub_19247E8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t E5DB::RunCommand::GetHelpCSV(E5DB::RunCommand *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  unint64_t v2 = (char *)operator new(0x2A0uLL);
  memcpy(v2, &off_1E5746740, 0x2A0uLL);
  (*(void (**)(void **__return_ptr, E5DB::RunCommand *))(*(void *)this + 16))(__p, this);
  if ((v13 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v13 & 0x80u) == 0) {
    uint64_t v4 = v13;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"=[", 2);
  if ((char)v13 < 0) {
    operator delete(__p[0]);
  }
  for (uint64_t i = 0; i != 672; i += 32)
  {
    uint64_t v7 = *(void *)&v2[i];
    if (v7)
    {
      size_t v8 = strlen(*(const char **)&v2[i]);
      unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v7, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)",", 1);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::stringbuf::str();
  operator delete(v2);
  v14[0] = *MEMORY[0x1E4FBA408];
  uint64_t v10 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v15[0] = v10;
  v15[1] = MEMORY[0x1E4FBA470] + 16;
  if (v16 < 0) {
    operator delete((void *)v15[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x192FF15B0](&v17);
}

void sub_19247EC6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  operator delete(v15);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t E5DB::RunCommand::Execute(uint64_t a1, uint64_t a2, char **a3)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2 + 40))
  {
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 4;
    strcpy((char *)&__p, "main");
    uint64_t v51 = 1;
    char v52 = 0;
    double v53 = 0.0;
    unsigned __int8 v54 = 0;
    int64x2_t v55 = vdupq_n_s64(1uLL);
    char v56 = 1;
    uint64_t v57 = 0x4008000000000000;
    unsigned __int8 v58 = 0;
    __int16 v64 = 0;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    unint64_t v59 = 0;
    char v62 = 0;
    memset(&v65, 0, sizeof(v65));
    __int16 v66 = 0;
    __int16 v67 = 1;
    char v68 = 0;
    char v69 = 0;
    char v70 = 0;
    char v71 = 0;
    char v72 = 0;
    char v73 = 0;
    memset(&v74, 0, sizeof(v74));
    strcpy(v76, "\t");
    strcpy(v75, "IOSurface");
    v76[2] = 0;
    unint64_t v6 = operator new(0x2A0uLL);
    std::string::size_type v7 = (std::string::size_type)v6 + 672;
    v79.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    v79.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)v6 + 672;
    memcpy(v6, &off_1E5746740, 0x2A0uLL);
    v79.__pn_.__r_.__value_.__l.__size_ = v7;
    uint64_t v77 = (char *)operator new(0x20uLL);
    long long v78 = xmmword_192DAB880;
    strcpy(v77, "f:r:c:o:t:b:s:i:y:v:d:p:wakegz");
    *(void *)std::string::size_type v80 = &unk_1EE39B648;
    *(void *)&v80[8] = &__p;
    *(void *)&v80[24] = v80;
    E5DB::ParseOptions(a3, (uint64_t)&v77, (const option **)&v79, (uint64_t)v80);
    if (*(unsigned char **)&v80[24] == v80)
    {
      (*(void (**)(unsigned char *))(*(void *)v80 + 32))(v80);
      if ((SHIBYTE(v78) & 0x80000000) == 0) {
        goto LABEL_6;
      }
    }
    else
    {
      if (*(void *)&v80[24]) {
        (*(void (**)(void))(**(void **)&v80[24] + 40))(*(void *)&v80[24]);
      }
      if ((SHIBYTE(v78) & 0x80000000) == 0)
      {
LABEL_6:
        size_t v8 = (void *)v79.__pn_.__r_.__value_.__r.__words[0];
        if (!v79.__pn_.__r_.__value_.__r.__words[0]) {
          goto LABEL_8;
        }
        goto LABEL_7;
      }
    }
    operator delete(v77);
    size_t v8 = (void *)v79.__pn_.__r_.__value_.__r.__words[0];
    if (!v79.__pn_.__r_.__value_.__r.__words[0])
    {
LABEL_8:
      uint64_t v9 = HIBYTE(v61);
      if (v61 < 0) {
        uint64_t v9 = v60;
      }
      HIBYTE(v66) = v9 != 0;
      uint64_t v10 = v64;
      if ((v64 & 0x80u) != 0) {
        uint64_t v10 = v63;
      }
      int v11 = v10 == 0;
      LOBYTE(v67) = v11;
      if (!v9)
      {
LABEL_46:
        if (v69 && v11)
        {
          uint64_t v25 = "Error: Input file not specified when using Input vector index (--input_index) \n";
LABEL_54:
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)v25, 79);
          goto LABEL_55;
        }
        uint64_t v26 = v64;
        if ((v64 & 0x80u) != 0) {
          uint64_t v26 = v63;
        }
        if (!v26 && HIBYTE(v64))
        {
          uint64_t v25 = "Error: Input file not specified when using E5 trace format (--e5_trace_format)\n";
          goto LABEL_54;
        }
        if (HIBYTE(v66))
        {
          uint64_t v28 = pdwriter_open();
          if (!v28)
          {
            long long v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)" Perf data file at ", 19);
            if (v61 >= 0) {
              words = &v59;
            }
            else {
              words = v59->__r_.__value_.__r.__words;
            }
            if (v61 >= 0) {
              uint64_t v31 = HIBYTE(v61);
            }
            else {
              uint64_t v31 = v60;
            }
            int64x2_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)words, v31);
            unint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" could not be created.", 22);
            std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(void *)(*v33 - 24)));
            long long v34 = std::locale::use_facet((const std::locale *)v80, MEMORY[0x1E4FBA258]);
            ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
            std::locale::~locale((std::locale *)v80);
            std::ostream::put();
            std::ostream::flush();
            goto LABEL_55;
          }
        }
        else
        {
          uint64_t v28 = 0;
        }
        if (v53 <= 0.0)
        {
          if (!v52 || !v58) {
            goto LABEL_80;
          }
          unint64_t v36 = "Error: Requesting a number of repetitions (-r) is not compatible with requesting a fixed runtime (-t). P"
                "lease use only one of them. \n";
          uint64_t v37 = 133;
        }
        else
        {
          if (!(v54 | v58))
          {
            unint64_t v36 = "Error: Cadence (-c) is not compatible with -t, -a, -s or -b modes\n";
            uint64_t v37 = 66;
            if (!v56 || v55.i64[1] != 1) {
              goto LABEL_87;
            }
LABEL_80:
            std::string::size_type size = HIBYTE(v65.__r_.__value_.__r.__words[2]);
            if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type size = v65.__r_.__value_.__l.__size_;
            }
            if (size)
            {
              uint64_t v81 = 1065353216;
              uint64_t v82 = 0;
              memset(v80, 0, sizeof(v80));
              uint64_t v83 = 0;
              uint64_t v84 = 0;
              unint64_t v39 = (std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v79.__pn_, &v65);
              unint64_t v41 = E5DB::GetJSONFromFile(v39, v40);
              if (SHIBYTE(v79.__pn_.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v79.__pn_.__r_.__value_.__l.__data_);
              }
              E5DB::RegressionTestConfigParser::~RegressionTestConfigParser((E5DB::RegressionTestConfigParser *)v80);
            }
            else
            {
              unint64_t v41 = 0;
            }
            std::string::size_type v42 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
            if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v42 = v74.__r_.__value_.__l.__size_;
            }
            if (v42)
            {
              uint64_t v81 = 1065353216;
              uint64_t v82 = 0;
              memset(v80, 0, sizeof(v80));
              uint64_t v83 = 0;
              uint64_t v84 = 0;
              char v43 = (std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v79.__pn_, &v74);
              unint64_t v45 = E5DB::GetJSONFromFile(v43, v44);
              if (SHIBYTE(v79.__pn_.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v79.__pn_.__r_.__value_.__l.__data_);
              }
              E5DB::RegressionTestConfigParser::~RegressionTestConfigParser((E5DB::RegressionTestConfigParser *)v80);
            }
            else
            {
              unint64_t v45 = 0;
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              if (__p.__r_.__value_.__l.__size_ != 1) {
                goto LABEL_107;
              }
              p_std::string p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            else
            {
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 1) {
                goto LABEL_107;
              }
              p_std::string p = &__p;
            }
            if (p_p->__r_.__value_.__s.__data_[0] == 42)
            {
              uint64_t v47 = *(uint64_t **)(E5RT::ProgramLibrary::GetExportedFunctions(*(E5RT::ProgramLibrary **)(a2 + 40)) + 16);
              if (v47)
              {
                char v48 = 0;
                do
                {
                  std::string::operator=(&__p, (const std::string *)(v47 + 2));
                  (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 16))(v80, a1);
                  char v49 = sub_19247F764((void **)a2, (uint64_t)&__p, v28, (uint64_t)v80, v41, v45, (uint64_t)&v74);
                  if ((v80[23] & 0x80000000) != 0) {
                    operator delete(*(void **)v80);
                  }
                  v48 |= v49;
                  uint64_t v47 = (uint64_t *)*v47;
                }
                while (v47);
              }
              else
              {
                char v48 = 0;
              }
LABEL_110:
              if (v28) {
                pdwriter_close();
              }

              uint64_t v23 = v48 & 1;
              goto LABEL_56;
            }
LABEL_107:
            (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 16))(v80, a1);
            char v48 = sub_19247F764((void **)a2, (uint64_t)&__p, v28, (uint64_t)v80, v41, v45, (uint64_t)&v74);
            if ((v80[23] & 0x80000000) != 0) {
              operator delete(*(void **)v80);
            }
            goto LABEL_110;
          }
          unint64_t v36 = "Error: Cadence (-c) is not compatible with -t, -a, -s or -b modes\n";
          uint64_t v37 = 66;
        }
LABEL_87:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)v36, v37);
        uint64_t v23 = 0;
        goto LABEL_56;
      }
      memset(&v79, 0, sizeof(v79));
      if (v61 >= 0) {
        uint64_t v12 = (std::string *)&v59;
      }
      else {
        uint64_t v12 = v59;
      }
      std::string::append[abi:ne180100]<char const*,0>(&v79.__pn_, v12, (std::string *)((char *)v12 + v9));
      std::__fs::filesystem::path::__string_view v13 = std::__fs::filesystem::path::__filename(&v79);
      if (v13.__size_)
      {
        std::string::size_type v14 = (std::string::size_type)&v79;
        if ((v79.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v14 = v79.__pn_.__r_.__value_.__r.__words[0];
        }
        std::string::erase(&v79.__pn_, (std::string::size_type)&v13.__data_[-v14], 0xFFFFFFFFFFFFFFFFLL);
      }
      if ((SHIBYTE(v79.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        *(std::__fs::filesystem::path *)std::string::size_type v80 = v79;
        uint64_t v15 = HIBYTE(v79.__pn_.__r_.__value_.__r.__words[2]);
        char v16 = HIBYTE(v79.__pn_.__r_.__value_.__r.__words[2]);
        if ((v79.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v15 = *(void *)&v80[8];
        }
        if (!v15) {
          goto LABEL_24;
        }
LABEL_43:
        LODWORD(v79.__pn_.__r_.__value_.__l.__data_) = 0;
        v79.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)std::system_category();
        std::__fs::filesystem::__create_directories((const std::__fs::filesystem::path *)v80, (std::error_code *)&v79);
        BOOL v17 = LODWORD(v79.__pn_.__r_.__value_.__l.__data_) == 0;
        if ((v80[23] & 0x80) != 0)
        {
LABEL_25:
          operator delete(*(void **)v80);
          if (!v17) {
            goto LABEL_55;
          }
LABEL_45:
          int v11 = v67;
          goto LABEL_46;
        }
LABEL_44:
        if (!v17)
        {
LABEL_55:
          uint64_t v23 = 1;
LABEL_56:
          sub_19247FF38((uint64_t)&__p);
          return v23 << 32;
        }
        goto LABEL_45;
      }
      std::string::__init_copy_ctor_external((std::string *)v80, v79.__pn_.__r_.__value_.__l.__data_, v79.__pn_.__r_.__value_.__l.__size_);
      if (SHIBYTE(v79.__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v79.__pn_.__r_.__value_.__l.__data_);
        uint64_t v35 = v80[23];
        char v16 = v80[23];
        if (v80[23] < 0) {
          uint64_t v35 = *(void *)&v80[8];
        }
        if (v35) {
          goto LABEL_43;
        }
      }
      else
      {
        uint64_t v24 = v80[23];
        char v16 = v80[23];
        if (v80[23] < 0) {
          uint64_t v24 = *(void *)&v80[8];
        }
        if (v24) {
          goto LABEL_43;
        }
      }
LABEL_24:
      BOOL v17 = 1;
      if (v16 < 0) {
        goto LABEL_25;
      }
      goto LABEL_44;
    }
LABEL_7:
    v79.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v8;
    operator delete(v8);
    goto LABEL_8;
  }
  unint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a2 + 8), (uint64_t)"E5 bundle not loaded. Cannot execute run command.", 49);
  std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
  uint64_t v19 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
  std::locale::~locale((std::locale *)&__p);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v20 = *(void **)a2;
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 32))(&__p, a1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v21 = &__p;
  }
  else {
    unint64_t v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v22 = __p.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v23 = 1;
  return v23 << 32;
}

void sub_19247F584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_19247FF38((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_19247F764(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7)
{
  uint64_t v123 = *MEMORY[0x1E4F143B8];
  uint64_t v118 = a3;
  id v117 = a5;
  id v116 = a6;
  int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)"Running ", 8);
  int v12 = *((char *)a1 + 39);
  if (v12 >= 0) {
    uint64_t v13 = (uint64_t)(a1 + 2);
  }
  else {
    uint64_t v13 = (uint64_t)a1[2];
  }
  if (v12 >= 0) {
    uint64_t v14 = *((unsigned __int8 *)a1 + 39);
  }
  else {
    uint64_t v14 = (uint64_t)a1[3];
  }
  uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
  char v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" function = ", 12);
  int v17 = *(char *)(a2 + 23);
  if (v17 >= 0) {
    uint64_t v18 = a2;
  }
  else {
    uint64_t v18 = *(void *)a2;
  }
  if (v17 >= 0) {
    uint64_t v19 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v19 = *(void *)(a2 + 8);
  }
  uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" for ", 5);
  if (*(unsigned char *)(a2 + 88))
  {
    unint64_t v21 = (void *)std::ostream::operator<<();
    std::string::size_type v22 = " seconds";
    uint64_t v23 = 8;
  }
  else if (*(unsigned char *)(a2 + 48))
  {
    uint64_t v24 = (void *)std::ostream::operator<<();
    unint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" repetitions", 12);
    std::string::size_type v22 = " per stream";
    uint64_t v23 = 11;
  }
  else
  {
    unint64_t v21 = (void *)std::ostream::operator<<();
    std::string::size_type v22 = " repetitions";
    uint64_t v23 = 12;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
  if (*(double *)(a2 + 40) > 0.0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)" at cadence = ", 14);
    std::ostream::operator<<();
  }
  if (*(unsigned char *)(a2 + 177))
  {
    uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)" Output at = ", 13);
    int v26 = *(char *)(a2 + 119);
    if (v26 >= 0) {
      uint64_t v27 = a2 + 96;
    }
    else {
      uint64_t v27 = *(void *)(a2 + 96);
    }
    if (v26 >= 0) {
      uint64_t v28 = *(unsigned __int8 *)(a2 + 119);
    }
    else {
      uint64_t v28 = *(void *)(a2 + 104);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)*a1 + *(void *)(**a1 - 24)));
  long long v29 = std::locale::use_facet(&v122, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
  std::locale::~locale(&v122);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v114 = 0;
  uint64_t v115 = 0;
  uint64_t v113 = 0;
  memset(v112, 0, sizeof(v112));
  uint64_t v30 = *(void *)(a2 + 24);
  uint64_t v110 = 0;
  uint64_t v111 = v30;
  uint64_t v109 = 0;
  int v108 = 0;
  uint64_t v31 = a2 + 288;
  int v32 = *(unsigned __int8 *)(a2 + 311);
  if ((v32 & 0x80) != 0)
  {
    uint64_t v34 = *(void *)(a2 + 296);
    if (v34 != 9)
    {
      if (v34 != 13) {
        goto LABEL_57;
      }
      if (**(void **)v31 != 0x6F6C6C4170616548 || *(void *)(*(void *)v31 + 5) != 0x64657461636F6C6CLL) {
        goto LABEL_57;
      }
LABEL_44:
      int v36 = 1;
LABEL_75:
      int v108 = v36;
      uint64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)"Set I/O buffer of type: ", 24);
      int v52 = *(char *)(a2 + 311);
      if (v52 >= 0) {
        uint64_t v53 = a2 + 288;
      }
      else {
        uint64_t v53 = *(void *)(a2 + 288);
      }
      if (v52 >= 0) {
        uint64_t v54 = *(unsigned __int8 *)(a2 + 311);
      }
      else {
        uint64_t v54 = *(void *)(a2 + 296);
      }
      int64x2_t v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, v53, v54);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"\n", 1);
      goto LABEL_82;
    }
    uint64_t v39 = *(void *)v31;
    if (**(void **)v31 != 0x6361667275534F49 || *(unsigned char *)(*(void *)v31 + 8) != 101)
    {
      if (*(void *)v39 != 0x65666675424C544DLL || *(unsigned char *)(v39 + 8) != 114) {
        goto LABEL_53;
      }
      goto LABEL_73;
    }
  }
  else
  {
    if (v32 != 9)
    {
      if (v32 != 13
        || (*(void *)v31 == 0x6F6C6C4170616548 ? (BOOL v33 = *(void *)(a2 + 293) == 0x64657461636F6C6CLL) : (BOOL v33 = 0),
            !v33))
      {
LABEL_57:
        char v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1[1], (uint64_t)"Error: Unrecognized buffer type: ", 33);
        int v44 = *(char *)(a2 + 311);
        if (v44 >= 0) {
          uint64_t v45 = a2 + 288;
        }
        else {
          uint64_t v45 = *(void *)(a2 + 288);
        }
        if (v44 >= 0) {
          uint64_t v46 = *(unsigned __int8 *)(a2 + 311);
        }
        else {
          uint64_t v46 = *(void *)(a2 + 296);
        }
        uint64_t v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, v45, v46);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)". Please check the help message for all acceptable buffer types.\n", 65);
        uint64_t v48 = 1;
        goto LABEL_89;
      }
      goto LABEL_44;
    }
    if (*(void *)v31 != 0x6361667275534F49 || *(unsigned char *)(a2 + 296) != 101)
    {
      BOOL v38 = *(void *)v31 == 0x65666675424C544DLL && *(unsigned char *)(a2 + 296) == 114;
      uint64_t v39 = a2 + 288;
      if (!v38)
      {
LABEL_53:
        uint64_t v40 = *(void *)v39;
        int v41 = *(unsigned __int8 *)(v39 + 8);
        if (v40 != 0x6361667275535845 || v41 != 101) {
          goto LABEL_57;
        }
        int v36 = 3;
        goto LABEL_75;
      }
LABEL_73:
      int v36 = 2;
      goto LABEL_75;
    }
  }
LABEL_82:
  v107[0] = a1;
  v107[1] = a2;
  v107[2] = &v116;
  v107[3] = a7;
  v107[4] = &v117;
  v107[5] = &v108;
  uint64_t v97 = &v122;
  uint64_t v98 = v112;
  uint64_t v99 = a1;
  uint64_t v100 = a2;
  unsigned __int8 v101 = v107;
  uint64_t v102 = &v115;
  char v103 = &v111;
  char v104 = &v114;
  uint64_t v105 = &v110;
  std::locale v106 = &v118;
  uint64_t v87 = a2;
  unsigned __int8 v88 = &v122;
  int v89 = v112;
  unsigned __int8 v90 = a1;
  uint64_t v91 = v107;
  char v92 = &v115;
  char v93 = &v114;
  std::string v94 = &v110;
  unsigned __int8 v95 = &v109;
  unsigned __int8 v96 = &v118;
  uint64_t v77 = a2;
  long long v78 = &v122;
  std::__fs::filesystem::path v79 = v112;
  std::string::size_type v80 = a1;
  uint64_t v81 = v107;
  uint64_t v82 = &v115;
  uint64_t v83 = &v114;
  uint64_t v84 = &v110;
  uint64_t v85 = &v109;
  uint64_t v86 = &v118;
  std::string::size_type v121 = 0;
  char v56 = operator new(0x38uLL);
  *char v56 = &unk_1EE39B6C8;
  v56[1] = a2;
  v56[2] = &v97;
  v56[3] = &v87;
  v56[4] = &v77;
  v56[5] = &v111;
  v56[6] = &v109;
  std::string::size_type v121 = v56;
  uint64_t v48 = E5DB::SafeExecute((uint64_t)v120);
  if (v121 == v120)
  {
    (*(void (**)(void *))(v120[0] + 32))(v120);
    if (v48) {
      goto LABEL_89;
    }
LABEL_88:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)"Executed ", 9);
    __int16 v64 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)" repetitions in ", 16);
    std::string v65 = (void *)std::ostream::operator<<();
    __int16 v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)" ms. ", 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Median runtime: ", 16);
    __int16 v67 = (void *)std::ostream::operator<<();
    char v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)" ms. ", 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"ExecuteStream peak memory: ", 27);
    char v69 = (void *)std::ostream::operator<<();
    char v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)" KB. ", 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"ExecuteStream peak neural memory: ", 34);
    char v71 = (void *)std::ostream::operator<<();
    char v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)" KB. ", 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"Throughput: ", 12);
    char v73 = (void *)std::ostream::operator<<();
    std::string v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" inf/sec.", 9);
    std::ios_base::getloc((const std::ios_base *)((char *)v74 + *(void *)(*v74 - 24)));
    uint64_t v75 = std::locale::use_facet(&v119, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v75->__vftable[2].~facet_0)(v75, 10);
    std::locale::~locale(&v119);
    std::ostream::put();
    std::ostream::flush();
    goto LABEL_89;
  }
  if (v121) {
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, std::locale *, _OWORD *, void **, void *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t, std::locale *, _OWORD *, void **, void *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, std::locale *, _OWORD *))(*v121 + 40))(v121, v57, v58, v59, v60, v61, v62, v63, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87,
  }
      v88,
      v89,
      v90,
      v91,
      v92,
      v93,
      v94,
      v95,
      v96,
      v97,
      v98);
  if ((v48 & 1) == 0) {
    goto LABEL_88;
  }
LABEL_89:

  return v48;
}

void sub_19247FEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,void *a59,uint64_t a60,std::locale a61)
{
  _Unwind_Resume(a1);
}

uint64_t sub_19247FF38(uint64_t a1)
{
  if (*(char *)(a1 + 311) < 0)
  {
    operator delete(*(void **)(a1 + 288));
    if ((*(char *)(a1 + 287) & 0x80000000) == 0)
    {
LABEL_3:
      if (!*(unsigned char *)(a1 + 256)) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 287) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 264));
  if (!*(unsigned char *)(a1 + 256)) {
    goto LABEL_8;
  }
LABEL_7:
  if (*(char *)(a1 + 255) < 0)
  {
    operator delete(*(void **)(a1 + 232));
    if (!*(unsigned char *)(a1 + 224)) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
LABEL_8:
  if (!*(unsigned char *)(a1 + 224)) {
    goto LABEL_12;
  }
LABEL_9:
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
LABEL_12:
  if (*(char *)(a1 + 175) < 0)
  {
    operator delete(*(void **)(a1 + 152));
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
    {
LABEL_14:
      if ((*(char *)(a1 + 119) & 0x80000000) == 0) {
        goto LABEL_15;
      }
LABEL_19:
      operator delete(*(void **)(a1 + 96));
      if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
        return a1;
      }
      goto LABEL_20;
    }
  }
  else if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 119) < 0) {
    goto LABEL_19;
  }
LABEL_15:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
    return a1;
  }
LABEL_20:
  operator delete(*(void **)a1);
  return a1;
}

void sub_192480038()
{
}

void *sub_19248004C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE39B648;
  result[1] = v3;
  return result;
}

uint64_t sub_192480094(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE39B648;
  a2[1] = v2;
  return result;
}

void sub_1924800C0(uint64_t a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 'a':
      *(unsigned char *)(*(void *)(a1 + 8) + 72) = 0;
      return;
    case 'b':
      uint64_t v3 = (const void *)*MEMORY[0x1E4F149E8];
      size_t v4 = strlen((const char *)*MEMORY[0x1E4F149E8]);
      if (v4 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_96;
      }
      std::string::size_type v5 = v4;
      if (v4 >= 0x17)
      {
        uint64_t v35 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v4 | 7) != 0x17) {
          uint64_t v35 = v4 | 7;
        }
        uint64_t v36 = v35 + 1;
        p_dst = (std::string *)operator new(v35 + 1);
        __dst.__r_.__value_.__l.__size_ = v5;
        __dst.__r_.__value_.__r.__words[2] = v36 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v4;
        p_dst = &__dst;
        if (!v4) {
          goto LABEL_47;
        }
      }
      memmove(p_dst, v3, v5);
LABEL_47:
      p_dst->__r_.__value_.__s.__data_[v5] = 0;
      *(void *)(*(void *)(a1 + 8) + 64) = std::stoi(&__dst, 0, 10);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_85;
      }
      return;
    case 'c':
      std::string::size_type v7 = (const void *)*MEMORY[0x1E4F149E8];
      size_t v8 = strlen((const char *)*MEMORY[0x1E4F149E8]);
      if (v8 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_96;
      }
      std::string::size_type v9 = v8;
      if (v8 >= 0x17)
      {
        uint64_t v37 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v8 | 7) != 0x17) {
          uint64_t v37 = v8 | 7;
        }
        uint64_t v38 = v37 + 1;
        uint64_t v10 = (std::string *)operator new(v37 + 1);
        __dst.__r_.__value_.__l.__size_ = v9;
        __dst.__r_.__value_.__r.__words[2] = v38 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v8;
        uint64_t v10 = &__dst;
        if (!v8) {
          goto LABEL_53;
        }
      }
      memmove(v10, v7, v9);
LABEL_53:
      v10->__r_.__value_.__s.__data_[v9] = 0;
      *(double *)(*(void *)(a1 + 8) + 40) = std::stod(&__dst, 0);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_85;
      }
      return;
    case 'd':
    case 'f':
    case 'i':
    case 'o':
    case 'u':
    case 'y':
      goto LABEL_39;
    case 'e':
      *(unsigned char *)(*(void *)(a1 + 8) + 144) = 1;
      return;
    case 'g':
      *(unsigned char *)(*(void *)(a1 + 8) + 312) = 1;
      return;
    case 'k':
      *(unsigned char *)(*(void *)(a1 + 8) + 179) = 1;
      return;
    case 'p':
      uint64_t v11 = *(void *)(a1 + 8);
      int v12 = (void *)(v11 + 200);
      uint64_t v13 = (const void *)*MEMORY[0x1E4F149E8];
      if (*(unsigned char *)(v11 + 224)) {
        goto LABEL_39;
      }
      size_t v14 = strlen((const char *)*MEMORY[0x1E4F149E8]);
      if (v14 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_97;
      }
      size_t v15 = v14;
      if (v14 >= 0x17)
      {
        uint64_t v53 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v14 | 7) != 0x17) {
          uint64_t v53 = v14 | 7;
        }
        uint64_t v54 = v53 + 1;
        int v12 = operator new(v53 + 1);
        *(void *)(v11 + 208) = v15;
        *(void *)(v11 + 216) = v54 | 0x8000000000000000;
        *(void *)(v11 + 200) = v12;
      }
      else
      {
        *(unsigned char *)(v11 + 223) = v14;
        if (!v14) {
          goto LABEL_90;
        }
      }
      memmove(v12, v13, v15);
LABEL_90:
      *((unsigned char *)v12 + v15) = 0;
      *(unsigned char *)(v11 + 224) = 1;
      return;
    case 'r':
      char v16 = (const void *)*MEMORY[0x1E4F149E8];
      size_t v17 = strlen((const char *)*MEMORY[0x1E4F149E8]);
      if (v17 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_96;
      }
      std::string::size_type v18 = v17;
      if (v17 >= 0x17)
      {
        uint64_t v39 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v17 | 7) != 0x17) {
          uint64_t v39 = v17 | 7;
        }
        uint64_t v40 = v39 + 1;
        uint64_t v19 = (std::string *)operator new(v39 + 1);
        __dst.__r_.__value_.__l.__size_ = v18;
        __dst.__r_.__value_.__r.__words[2] = v40 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v17;
        uint64_t v19 = &__dst;
        if (!v17) {
          goto LABEL_59;
        }
      }
      memmove(v19, v16, v18);
LABEL_59:
      v19->__r_.__value_.__s.__data_[v18] = 0;
      int v41 = std::stoi(&__dst, 0, 10);
      uint64_t v42 = *(void *)(a1 + 8);
      *(void *)(v42 + 24) = v41;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        uint64_t v42 = *(void *)(a1 + 8);
      }
      *(unsigned char *)(v42 + 32) = 1;
      return;
    case 's':
      *(unsigned char *)(*(void *)(a1 + 8) + 48) = 1;
      uint64_t v20 = (const void *)*MEMORY[0x1E4F149E8];
      if (!*(unsigned char *)*MEMORY[0x1E4F149E8]) {
        return;
      }
      size_t v21 = strlen((const char *)*MEMORY[0x1E4F149E8]);
      if (v21 > 0x7FFFFFFFFFFFFFF7) {
LABEL_96:
      }
        std::string::__throw_length_error[abi:ne180100]();
      std::string::size_type v22 = v21;
      if (v21 >= 0x17)
      {
        uint64_t v51 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v21 | 7) != 0x17) {
          uint64_t v51 = v21 | 7;
        }
        uint64_t v52 = v51 + 1;
        uint64_t v23 = (std::string *)operator new(v51 + 1);
        __dst.__r_.__value_.__l.__size_ = v22;
        __dst.__r_.__value_.__r.__words[2] = v52 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v21;
        uint64_t v23 = &__dst;
        if (!v21) {
          goto LABEL_84;
        }
      }
      memmove(v23, v20, v22);
LABEL_84:
      v23->__r_.__value_.__s.__data_[v22] = 0;
      *(void *)(*(void *)(a1 + 8) + 56) = std::stoi(&__dst, 0, 10);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_85;
      }
      return;
    case 't':
      *(unsigned char *)(*(void *)(a1 + 8) + 88) = 1;
      uint64_t v24 = (const void *)*MEMORY[0x1E4F149E8];
      size_t v25 = strlen((const char *)*MEMORY[0x1E4F149E8]);
      if (v25 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_96;
      }
      std::string::size_type v26 = v25;
      if (v25 >= 0x17)
      {
        uint64_t v43 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v25 | 7) != 0x17) {
          uint64_t v43 = v25 | 7;
        }
        uint64_t v44 = v43 + 1;
        uint64_t v27 = (std::string *)operator new(v43 + 1);
        __dst.__r_.__value_.__l.__size_ = v26;
        __dst.__r_.__value_.__r.__words[2] = v44 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v25;
        uint64_t v27 = &__dst;
        if (!v25) {
          goto LABEL_66;
        }
      }
      memmove(v27, v24, v26);
LABEL_66:
      v27->__r_.__value_.__s.__data_[v26] = 0;
      *(double *)(*(void *)(a1 + 8) + 80) = (double)std::stoi(&__dst, 0, 10);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_85;
      }
      return;
    case 'v':
      uint64_t v28 = (const void *)*MEMORY[0x1E4F149E8];
      size_t v29 = strlen((const char *)*MEMORY[0x1E4F149E8]);
      if (v29 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_96;
      }
      std::string::size_type v30 = v29;
      if (v29 >= 0x17)
      {
        uint64_t v45 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v29 | 7) != 0x17) {
          uint64_t v45 = v29 | 7;
        }
        uint64_t v46 = v45 + 1;
        uint64_t v31 = (std::string *)operator new(v45 + 1);
        __dst.__r_.__value_.__l.__size_ = v30;
        __dst.__r_.__value_.__r.__words[2] = v46 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v29;
        uint64_t v31 = &__dst;
        if (!v29) {
          goto LABEL_72;
        }
      }
      memmove(v31, v28, v30);
LABEL_72:
      v31->__r_.__value_.__s.__data_[v30] = 0;
      int v47 = std::stoi(&__dst, 0, 10);
      uint64_t v48 = *(void *)(a1 + 8);
      if (!*(unsigned char *)(v48 + 192)) {
        *(unsigned char *)(v48 + 192) = 1;
      }
      *(void *)(v48 + 184) = v47;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
LABEL_85:
      }
        operator delete(__dst.__r_.__value_.__l.__data_);
      return;
    case 'w':
      *(unsigned char *)(*(void *)(a1 + 8) + 176) = 1;
      return;
    case 'x':
      uint64_t v32 = *(void *)(a1 + 8);
      BOOL v33 = (void *)(v32 + 232);
      uint64_t v34 = (const void *)*MEMORY[0x1E4F149E8];
      if (*(unsigned char *)(v32 + 256))
      {
LABEL_39:
        JUMPOUT(0x192FF0F50);
      }
      size_t v49 = strlen((const char *)*MEMORY[0x1E4F149E8]);
      if (v49 > 0x7FFFFFFFFFFFFFF7) {
LABEL_97:
      }
        std::string::__throw_length_error[abi:ne180100]();
      size_t v50 = v49;
      if (v49 >= 0x17)
      {
        uint64_t v55 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v49 | 7) != 0x17) {
          uint64_t v55 = v49 | 7;
        }
        uint64_t v56 = v55 + 1;
        BOOL v33 = operator new(v55 + 1);
        *(void *)(v32 + 240) = v50;
        *(void *)(v32 + 248) = v56 | 0x8000000000000000;
        *(void *)(v32 + 232) = v33;
      }
      else
      {
        *(unsigned char *)(v32 + 255) = v49;
        if (!v49) {
          goto LABEL_95;
        }
      }
      memmove(v33, v34, v50);
LABEL_95:
      *((unsigned char *)v33 + v50) = 0;
      *(unsigned char *)(v32 + 256) = 1;
      return;
    case 'z':
      *(unsigned char *)(*(void *)(a1 + 8) + 313) = 1;
      return;
    default:
      return;
  }
}

void sub_192480854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1924808EC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5DB12_GLOBAL__N_114ParseArgumentsERKNSt3__16vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1"
                     "_9allocatorIcEEEENS6_IS8_EEEERNS0_14RunCommandArgsEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5DB12_GLOBAL__N_114ParseArgumentsERKNSt3__16vectorINS1_12basic_stringIcNS1_11char_tr"
                                "aitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEERNS0_14RunCommandArgsEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5DB12_GLOBAL__N_114ParseArgumentsERKNSt3__16vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEERNS0_14RunCommandArgsEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5DB12_GLOBAL__N_114ParseArgumentsERKNSt3__16vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEERNS0_14RunCommandArgsEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19248095C()
{
  return &unk_1EE39B6A8;
}

void sub_19248096C()
{
}

__n128 sub_192480980(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_1EE39B6C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_1924809DC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE39B6C8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_192480A1C(uint64_t a1)
{
  return sub_192480AA0(a1 + 8);
}

uint64_t sub_192480A24(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4E5DB12_GLOBAL__N_111RunFunctionERNS_10DebugStateERKNS0_14RunCommandArgsEP8pdwriterRKNSt3__112bas"
                     "ic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEP12NSDictionarySI_SG_E3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4E5DB12_GLOBAL__N_111RunFunctionERNS_10DebugStateERKNS0_14RunCommandArgsEP8pdwriterRKN"
                                "St3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEP12NSDictionarySI_SG_E3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4E5DB12_GLOBAL__N_111RunFunctionERNS_10DebugStateERKNS0_14RunCommandArgsEP8pdwriterRKNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEP12NSDictionarySI_SG_E3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4E5DB12_GLOBAL__N_111RunFunctionERNS_10DebugStateERKNS0_14RunCommandArgsEP8pdwriterRKNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEP12NSDictionarySI_SG_E3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_192480A94()
{
  return &unk_1EE39B7A8;
}

uint64_t sub_192480AA0(uint64_t result)
{
  if (*(double *)(*(void *)result + 40) > 0.0)
  {
    uint64_t v1 = *(void *)(result + 8);
    getpid();
    proc_reset_footprint_interval();
    pid_t v2 = getpid();
    proc_pid_rusage(v2, 6, *(rusage_info_t **)v1);
    *(double *)(*(void *)(v1 + 8) + 40) = (double)*(unint64_t *)(*(void *)v1 + 72);
    unint64_t v3 = *(void ***)(v1 + 16);
    uint64_t v4 = *(void *)(v1 + 24);
    std::string __p = operator new(0x28uLL);
    long long v30 = xmmword_192DB3C40;
    strcpy((char *)__p, "RunStreamAtCadence::PreAllocation");
    sub_192483B18(*v3, *(unsigned char *)(v4 + 179), (uint64_t)&__p);
    if (SHIBYTE(v30) < 0) {
      operator delete(__p);
    }
    sub_192483D64((uint64_t)v35, *(uint64_t **)(v1 + 32));
  }
  if (*(unsigned char *)(*(void *)result + 72))
  {
    std::string::size_type v5 = *(rusage_info_t ***)(result + 16);
    unint64_t v6 = *v5;
    rusage_info_t v7 = (*v5)[7];
    uint64_t v33 = 0;
    if (v7 && v6[8] && v6[3])
    {
      if (!*((unsigned char *)v6 + 88) || !*((unsigned char *)v6 + 313))
      {
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        unint64_t v38 = 0;
        memset(v35, 0, sizeof(v35));
        memset(&v34[3], 0, 24);
        getpid();
        proc_reset_footprint_interval();
        pid_t v8 = getpid();
        proc_pid_rusage(v8, 6, v5[1]);
        std::string::size_type v9 = v5;
        *((double *)v5[2] + 5) = (double)(unint64_t)v5[1][9];
        uint64_t v10 = v5[3];
        uint64_t v28 = v9;
        uint64_t v11 = *v9;
        std::string __p = operator new(0x30uLL);
        long long v30 = xmmword_192DAC000;
        strcpy((char *)__p, "RunStreamAtThroughputSync::PreAllocation");
        sub_192483B18(*v10, *((unsigned char *)v11 + 179), (uint64_t)&__p);
        if (SHIBYTE(v30) < 0) {
          operator delete(__p);
        }
        sub_192483D64((uint64_t)v34, (uint64_t *)v28[4]);
      }
      goto LABEL_38;
    }
  }
  else
  {
    int v12 = *(uint64_t **)(result + 24);
    uint64_t v13 = *v12;
    uint64_t v14 = *(void *)(*v12 + 56);
    *(void *)&long long v32 = 0;
    if (v14 && *(void *)(v13 + 64) && *(void *)(v13 + 24))
    {
      if (!*(unsigned char *)(v13 + 313) || !*(unsigned char *)(v13 + 88))
      {
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        uint64_t v15 = v14;
        unint64_t v38 = 0;
        while (1)
        {
          std::string __p = 0;
          long long v30 = 0uLL;
          unint64_t v16 = *(void *)(*v12 + 24);
          if (v16)
          {
            if (v16 >> 60) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            std::string __p = operator new(16 * v16);
            *(void *)&long long v30 = __p;
            *((void *)&v30 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = (char *)__p + 16 * v16;
          }
          size_t v17 = v37;
          if ((unint64_t)v37 >= v38)
          {
            std::string::size_type v22 = std::vector<std::vector<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::__push_back_slow_path<std::vector<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>> const&>(&v36, (uint64_t)&__p);
          }
          else
          {
            *(void *)uint64_t v37 = 0;
            *((void *)v17 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = 0;
            *((void *)v17 + 2) = 0;
            std::string::size_type v18 = __p;
            uint64_t v19 = v30 - (void)__p;
            if ((void *)v30 != __p)
            {
              if (v19 < 0) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v20 = (char *)operator new(v30 - (void)__p);
              *(void *)size_t v17 = v20;
              *((void *)v17 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v20;
              *((void *)v17 + 2) = &v20[16 * (v19 >> 4)];
              size_t v21 = v19 & 0xFFFFFFFFFFFFFFF0;
              memcpy(v20, v18, v21);
              *((void *)v17 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = &v20[v21];
            }
            std::string::size_type v22 = v17 + 24;
          }
          uint64_t v37 = v22;
          if (__p)
          {
            *(void *)&long long v30 = __p;
            operator delete(__p);
          }
          if (!--v15)
          {
            getpid();
            proc_reset_footprint_interval();
            pid_t v23 = getpid();
            proc_pid_rusage(v23, 6, (rusage_info_t *)v12[1]);
            *(double *)(v12[2] + 40) = (double)*(unint64_t *)(v12[1] + 72);
            uint64_t v24 = (void **)v12[3];
            uint64_t v25 = *v12;
            std::string __p = operator new(0x30uLL);
            long long v30 = xmmword_192DA90F0;
            strcpy((char *)__p, "RunStreamAtThroughputAsync::PreAllocation");
            std::string::size_type v26 = (E5RT::ExecutionStream *)sub_192483B18(*v24, *(unsigned char *)(v25 + 179), (uint64_t)&__p);
            if (SHIBYTE(v30) < 0) {
              operator delete(__p);
            }
            std::string __p = (void *)v12[4];
            *(void *)&long long v30 = *v12;
            *((void *)&v30 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = &v36;
            uint64_t v31 = &v32;
            E5RT::ExecutionStream::CreateExecutionStream(v26);
          }
        }
      }
LABEL_38:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Cannot run for a duration if we skip warmup runs.");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  **(void **)(result + 32) = **(void **)(result + 40);
  return result;
}

void sub_19248326C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192483280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,std::__shared_weak_count *a23,uint64_t a24,std::locale a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if ((v50 & 1) == 0)
  {
    nitro::ndarray_container::visit<nitro::ndarray_container,nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,(void *)0>((uint64_t)a14);
    exception_object = *(_Unwind_Exception **)(v51 - 192);
  }
  if (a23 && !atomic_fetch_add(&a23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a23->__on_zero_shared)(a23);
    std::__shared_weak_count::__release_weak(a23);
  }
  if (a14 && !atomic_fetch_add(&a14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
    std::__shared_weak_count::__release_weak(a14);
  }
  uint64_t v53 = *(void *)(v51 - 168);
  if (v53)
  {
    uint64_t v54 = *(void *)(v51 - 160);
    uint64_t v55 = *(void **)(v51 - 168);
    if (v54 != v53)
    {
      uint64_t v56 = *(void *)(v51 - 160);
      do
      {
        uint64_t v58 = *(void **)(v56 - 24);
        v56 -= 24;
        uint64_t v57 = v58;
        if (v58)
        {
          *(void *)(v54 - 16) = v57;
          operator delete(v57);
        }
        uint64_t v54 = v56;
      }
      while (v56 != v53);
      uint64_t v55 = *(void **)(v51 - 168);
    }
    *(void *)(v51 - 160) = v53;
    operator delete(v55);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_192483B18(void *result, char a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(result, (uint64_t)"[ProcPidRusage]", 15);
    int v5 = *(char *)(a3 + 23);
    if (v5 >= 0) {
      uint64_t v6 = a3;
    }
    else {
      uint64_t v6 = *(void *)a3;
    }
    if (v5 >= 0) {
      uint64_t v7 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v7 = *(void *)(a3 + 8);
    }
    pid_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
    std::string::size_type v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ri_interval_max_phys_footprint:", 31);
    uint64_t v10 = (void *)std::ostream::operator<<();
    uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"KB, ", 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"ri_interval_max_neural_footprint:", 33);
    int v12 = (void *)std::ostream::operator<<();
    uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"KB, ", 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"ri_lifetime_max_phys_footprint:", 31);
    uint64_t v14 = (void *)std::ostream::operator<<();
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"KB, ", 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"ri_lifetime_max_neural_footprint:", 33);
    unint64_t v16 = (void *)std::ostream::operator<<();
    size_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"KB, ", 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"ri_phys_footprint:", 18);
    std::string::size_type v18 = (void *)std::ostream::operator<<();
    uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"KB, ", 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"ri_resident_size:", 17);
    uint64_t v20 = (void *)std::ostream::operator<<();
    size_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"KB, ", 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"ri_wired_size:", 14);
    std::string::size_type v22 = (void *)std::ostream::operator<<();
    pid_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"KB, ", 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"ri_neural_footprint:", 20);
    uint64_t v24 = (void *)std::ostream::operator<<();
    uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"KB", 2);
    std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
    std::string::size_type v26 = std::locale::use_facet(&v27, MEMORY[0x1E4FBA258]);
    ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
    std::locale::~locale(&v27);
    std::ostream::put();
    return (void *)std::ostream::flush();
  }
  return result;
}

void sub_192483D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_192483D64(uint64_t a1, uint64_t *a2)
{
  uint64_t ExportedFunctions = E5RT::ProgramLibrary::GetExportedFunctions(*(E5RT::ProgramLibrary **)(*a2 + 40));
  uint64_t v4 = (void *)std::unordered_map<std::string,std::shared_ptr<E5RT::ProgramFunction>>::unordered_map((uint64_t)v17, ExportedFunctions);
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(v4, a2[1]))
  {
    int v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(v17, a2[1]);
    if (v5)
    {
      uint64_t v7 = v5[5];
      uint64_t v6 = v5[6];
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      v16[0] = v7;
      v16[1] = v6;
      void v16[3] = 0;
      _OWORD v16[4] = 0;
      E5RT::PrecompiledComputeOpCreateOptions::Create(v16);
    }
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  exception = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(__p, "operator()");
  std::operator+<char>();
  std::string::size_type v9 = std::string::append(&v15, "\" not found.");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v12[0] = (void *)v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v11 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  E5RT::Status::Status(&v14, 1, v11);
  E5RT::E5RTError::E5RTError(exception, __p, &v14);
}

void sub_19248594C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  __cxa_free_exception(v17);

  if (SLOBYTE(STACK[0x2D7]) < 0) {
    operator delete((void *)STACK[0x2C0]);
  }
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v19 - 224);
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)va);

  uint64_t v21 = *(void *)(v19 - 160);
  *(void *)(v19 - 160) = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v19 - 152);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v19 - 136);
  _Unwind_Resume(a1);
}

uint64_t sub_192485DD0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, char a8)
{
  if (result)
  {
    pdwriter_new_group();
    pdwriter_new_value();
    pdwriter_record_variable_str();
    pdwriter_new_value();
    pdwriter_record_variable_str();
    pdwriter_new_value();
    pdwriter_record_variable_str();
    pdwriter_new_value();
    pdwriter_record_variable_str();
    pdwriter_new_value();
    pdwriter_record_variable_str();
    pdwriter_new_value();
    pdwriter_record_variable_str();
    pdwriter_new_value();
    pdwriter_record_variable_str();
    if ((a8 & 1) == 0)
    {
      pdwriter_new_value();
      pdwriter_record_variable_str();
    }
    pdwriter_new_value();
    pdwriter_record_variable_str();
    pdwriter_new_stats();
    pdwriter_record_variable_str();
    pdwriter_new_stats();
    pdwriter_record_variable_str();
    pdwriter_record_mean();
    if (a3) {
      pdwriter_record_median();
    }
    pdwriter_new_stats();
    __n128 result = pdwriter_record_variable_str();
    if (a5)
    {
      pdwriter_new_value();
      return pdwriter_record_variable_str();
    }
  }
  return result;
}

uint64_t std::unordered_map<std::string,std::shared_ptr<E5RT::ProgramFunction>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::ProgramFunction>> const&>(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_1924862E8(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1924862FC(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::ProgramFunction>> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x8_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v43, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      std::string v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          int8x8_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            std::string v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          std::string v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  uint64_t v25 = operator new(0x38uLL);
  v43[0] = v25;
  v43[1] = a1 + 16;
  char v44 = 0;
  *uint64_t v25 = 0;
  v25[1] = v10;
  std::string::size_type v26 = (std::string *)(v25 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v25[4] = *(void *)(a3 + 16);
  }
  uint64_t v27 = *(void *)(a3 + 32);
  v25[5] = *(void *)(a3 + 24);
  v25[6] = v27;
  if (v27) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
  }
  char v44 = 1;
  float v28 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v29 = *(float *)(a1 + 32);
  if (!v11 || (float)(v29 * (float)v11) < v28)
  {
    BOOL v32 = 1;
    if (v11 >= 3) {
      BOOL v32 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v33 = v32 | (2 * v11);
    unint64_t v34 = vcvtps_u32_f32(v28 / v29);
    if (v33 <= v34) {
      size_t prime = v34;
    }
    else {
      size_t prime = v33;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v36 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v36) {
      goto LABEL_70;
    }
    if (prime < *(void *)&v36)
    {
      unint64_t v37 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v36 < 3uLL || (uint8x8_t v38 = (uint8x8_t)vcnt_s8(v36), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        unint64_t v37 = std::__next_prime(v37);
      }
      else
      {
        uint64_t v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2) {
          unint64_t v37 = v39;
        }
      }
      if (prime <= v37) {
        size_t prime = v37;
      }
      if (prime < *(void *)&v36) {
LABEL_70:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v40 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        long long v30 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        uint64_t v31 = (void *)v43[0];
        if (v30) {
          goto LABEL_59;
        }
      }
      else
      {
        unint64_t v3 = v10;
        long long v30 = *(void **)(*(void *)a1 + 8 * v10);
        uint64_t v31 = (void *)v43[0];
        if (v30) {
          goto LABEL_59;
        }
      }
    }
    else
    {
      unint64_t v3 = v40 & v10;
      long long v30 = *(void **)(*(void *)a1 + 8 * (v40 & v10));
      uint64_t v31 = (void *)v43[0];
      if (v30) {
        goto LABEL_59;
      }
    }
LABEL_83:
    *uint64_t v31 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v43[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v43[0])
    {
      unint64_t v41 = *(void *)(*(void *)v43[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v41 >= v11) {
          v41 %= v11;
        }
      }
      else
      {
        v41 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v4E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v43[0];
    }
    goto LABEL_94;
  }
  long long v30 = *(void **)(*(void *)a1 + 8 * v3);
  uint64_t v31 = (void *)v43[0];
  if (!v30) {
    goto LABEL_83;
  }
LABEL_59:
  *uint64_t v31 = *v30;
  *long long v30 = v43[0];
LABEL_94:
  std::string v14 = (uint64_t *)v43[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_192486768(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19248677C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::vector<std::thread>::reserve(uint64_t a1, unint64_t a2)
{
  pid_t v2 = *(std::thread **)a1;
  if (a2 <= (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) {
    return;
  }
  if (a2 >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = 8 * a2;
  BOOL v6 = (char *)operator new(8 * a2);
  unint64_t v7 = &v6[v5];
  uint64_t v8 = v4 - (char *)v2;
  unint64_t v9 = (unint64_t)&v6[(v4 - (char *)v2) & 0xFFFFFFFFFFFFFFF8];
  if (v4 != (char *)v2)
  {
    unint64_t v10 = v8 - 8;
    if ((unint64_t)(v8 - 8) >= 0x78)
    {
      BOOL v12 = &v6[(v8 & 0xFFFFFFFFFFFFFFF8) - (v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v4
         || (unint64_t)&v4[-(v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v9;
      unint64_t v11 = &v6[(v4 - (char *)v2) & 0xFFFFFFFFFFFFFFF8];
      if (v12)
      {
        uint64_t v13 = v8 >> 3;
        uint64_t v14 = (v10 >> 3) + 1;
        uint64_t v15 = 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v16 = &v4[-v15];
        unint64_t v11 = (char *)(v9 - v15);
        unint64_t v17 = &v6[8 * v13 - 16];
        uint64_t v18 = v4 - 16;
        uint64_t v19 = v14 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v20 = *(_OWORD *)v18;
          *((_OWORD *)v17 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = *((_OWORD *)v18 - 1);
          *(_OWORD *)unint64_t v17 = v20;
          *((_OWORD *)v18 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = 0uLL;
          *(_OWORD *)uint64_t v18 = 0uLL;
          v17 -= 32;
          v18 -= 32;
          v19 -= 4;
        }
        while (v19);
        uint64_t v4 = v16;
        if (v14 == (v14 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_16:
          uint64_t v22 = *(std::thread **)a1;
          pid_t v2 = *(std::thread **)(a1 + 8);
          *(void *)a1 = v11;
          *(void *)(a1 + 8) = v9;
          *(void *)(a1 + 16) = v7;
          if (v2 != v22)
          {
            do
              std::thread::~thread(--v2);
            while (v2 != v22);
            pid_t v2 = v22;
          }
          goto LABEL_19;
        }
      }
    }
    else
    {
      unint64_t v11 = &v6[(v4 - (char *)v2) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      uint64_t v21 = *((void *)v4 - 1);
      v4 -= 8;
      *((void *)v11 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v21;
      v11 -= 8;
      *(void *)uint64_t v4 = 0;
    }
    while (v4 != (char *)v2);
    goto LABEL_16;
  }
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v7;
LABEL_19:
  if (v2)
  {
    operator delete(v2);
  }
}

void sub_192486910(E5RT::ExecuteOptions *a1)
{
}

void sub_192487018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v48 - 128);
  _Unwind_Resume(a1);
}

char *std::vector<std::vector<double>>::__push_back_slow_path<std::vector<double> const&>(char **a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v3 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v9 = (char *)operator new(24 * v8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  unint64_t v10 = &v9[24 * v5];
  unint64_t v11 = &v9[24 * v8];
  *((void *)v10 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = 0;
  BOOL v12 = (char **)(v10 + 8);
  *((void *)v10 + 2) = 0;
  *(void *)unint64_t v10 = 0;
  uint64_t v13 = *(const void **)a2;
  int64_t v14 = *(void *)(a2 + 8) - *(void *)a2;
  if (v14)
  {
    if (v14 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (char *)operator new(v14);
    *(void *)unint64_t v10 = v15;
    *BOOL v12 = v15;
    uint64_t v16 = &v15[8 * (v14 >> 3)];
    *((void *)v10 + 2) = v16;
    memcpy(v15, v13, v14);
    *BOOL v12 = v16;
  }
  unint64_t v17 = v10 + 24;
  uint64_t v25 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v11;
  }
  else
  {
    do
    {
      uint64_t v18 = v10;
      *((void *)v10 - 2) = 0;
      *((void *)v10 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = 0;
      long long v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v19;
      v10 -= 24;
      *((void *)v18 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = *((void *)v3 + 2);
      *(void *)unint64_t v3 = 0;
      *((void *)v3 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = 0;
      *((void *)v3 + 2) = 0;
    }
    while (v3 != v4);
    long long v20 = *a1;
    unint64_t v3 = a1[1];
    unint64_t v17 = v25;
    *a1 = v10;
    a1[1] = v25;
    a1[2] = v11;
    if (v3 != v20)
    {
      uint64_t v21 = v3;
      do
      {
        uint64_t v23 = (void *)*((void *)v21 - 3);
        v21 -= 24;
        uint64_t v22 = v23;
        if (v23)
        {
          *((void *)v3 - 2) = v22;
          operator delete(v22);
        }
        unint64_t v3 = v21;
      }
      while (v21 != v20);
      unint64_t v3 = v20;
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v17;
}

void sub_192487354(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unint64_t v5 = *v2;
  if (*v2)
  {
    *unint64_t v3 = v5;
    operator delete(v5);
  }
  std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::vector<double>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = v2 - 24;
        uint64_t v4 = *(void **)(v2 - 24);
        *(void *)(a1 + 16) = v2 - 24;
        if (!v4) {
          break;
        }
        *(void *)(v2 - 16) = v4;
        operator delete(v4);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 24;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1924873E8()
{
}

void sub_192487518(const void **a1)
{
  uint64_t v2 = std::__thread_local_data();
  uint64_t v3 = *a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  sub_192486910((E5RT::ExecuteOptions *)(a1 + 1));
}

void sub_1924875A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1924875B8((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_1924875B8(uint64_t **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *v2;
    uint64_t *v2 = 0;
    if (v3)
    {
      uint64_t v4 = MEMORY[0x192FF1220]();
      MEMORY[0x192FF16B0](v4, 0x20C4093837F09);
    }
    MEMORY[0x192FF16B0](v2, 0x1060C40A001609FLL);
  }
  return a1;
}

char *std::vector<std::vector<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>>>::__push_back_slow_path<std::vector<std::pair<std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>,std::chrono::time_point<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>>> const&>(char **a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v9 = (char *)operator new(24 * v8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  unint64_t v10 = &v9[24 * v5];
  unint64_t v11 = &v9[24 * v8];
  *((void *)v10 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = 0;
  BOOL v12 = v10 + 8;
  *((void *)v10 + 2) = 0;
  *(void *)unint64_t v10 = 0;
  uint64_t v13 = *(const void **)a2;
  int64_t v14 = *(void *)(a2 + 8) - *(void *)a2;
  if (v14)
  {
    if (v14 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (char *)operator new(v14);
    *(void *)unint64_t v10 = v15;
    *BOOL v12 = v15;
    *((void *)v10 + 2) = &v15[16 * (v14 >> 4)];
    size_t v16 = v14 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v15, v13, v16);
    *BOOL v12 = &v15[v16];
  }
  unint64_t v17 = v10 + 24;
  uint64_t v25 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v11;
  }
  else
  {
    do
    {
      uint64_t v18 = v10;
      *((void *)v10 - 2) = 0;
      *((void *)v10 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = 0;
      long long v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v19;
      v10 -= 24;
      *((void *)v18 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = *((void *)v3 + 2);
      *(void *)uint64_t v3 = 0;
      *((void *)v3 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = 0;
      *((void *)v3 + 2) = 0;
    }
    while (v3 != v4);
    long long v20 = *a1;
    uint64_t v3 = a1[1];
    unint64_t v17 = v25;
    *a1 = v10;
    a1[1] = v25;
    a1[2] = v11;
    if (v3 != v20)
    {
      uint64_t v21 = v3;
      do
      {
        uint64_t v23 = (void *)*((void *)v21 - 3);
        v21 -= 24;
        uint64_t v22 = v23;
        if (v23)
        {
          *((void *)v3 - 2) = v22;
          operator delete(v22);
        }
        uint64_t v3 = v21;
      }
      while (v21 != v20);
      uint64_t v3 = v20;
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v17;
}

void sub_19248781C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unint64_t v5 = *v2;
  if (*v2)
  {
    *uint64_t v3 = v5;
    operator delete(v5);
  }
  std::__split_buffer<std::vector<double>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192487840()
{
}

void sub_192487968(const void **a1)
{
  uint64_t v2 = std::__thread_local_data();
  uint64_t v3 = *a1;
  *a1 = 0;
  uint64_t v4 = (E5RT::ExecutionStream *)pthread_setspecific(v2->__key_, v3);
  E5RT::ExecutionStream::CreateExecutionStream(v4);
}

void sub_192487FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  unint64_t v37 = a23;
  if (a23 && !atomic_fetch_add(&a23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  uint8x8_t v38 = a25;
  if (a25 && !atomic_fetch_add(&a25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  uint64_t v39 = a26;
  a26 = 0;
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
  }
  sub_192488194(&a16);
  _Unwind_Resume(a1);
}

uint64_t **sub_192488194(uint64_t **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *v2;
    uint64_t *v2 = 0;
    if (v3)
    {
      uint64_t v4 = MEMORY[0x192FF1220]();
      MEMORY[0x192FF16B0](v4, 0x20C4093837F09);
    }
    MEMORY[0x192FF16B0](v2, 0x1060C40EEB2933FLL);
  }
  return a1;
}

void sub_192488204()
{
}

__n128 sub_192488218(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_1EE39B738;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 sub_19248827C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE39B738;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1924882C4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5 = *a3;
  uint64_t v6 = *a4;
  *a4 = 0;
  *(std::chrono::steady_clock::time_point *)(*(void *)(**(void **)(a1 + 16) + 24 * *(void *)(a1 + 24))
                                           + 16 * v5
                                           - 8) = std::chrono::steady_clock::now();
  unint64_t v7 = *(std::mutex **)(a1 + 56);
  std::mutex::lock(v7);
  atomic_fetch_add_explicit(*(atomic_ullong *volatile *)(a1 + 8), 1uLL, memory_order_relaxed);
  unint64_t v8 = atomic_load(*(unint64_t **)(a1 + 48));
  unint64_t v9 = atomic_load(*(unint64_t **)(a1 + 8));
  std::mutex::unlock(v7);
  if (v8 == v9) {
    E5RT::AsyncEvent::Signal(**(E5RT::AsyncEvent ***)(a1 + 40));
  }
  if (v6)
  {
    unint64_t v10 = *(void (**)(uint64_t))(*(void *)v6 + 8);
    v10(v6);
  }
}

void sub_1924883B4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_192488528();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1924883CC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZZN4E5DB12_GLOBAL__N_111RunFunctionERNS_10DebugStateERKNS0_14RunCommandArgsEP8pdwriterRKNSt3__112b"
                     "asic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEP12NSDictionarySI_SG_ENK3$_1clEvENKUlmE_clEmE"
                     "UlyyNS8_10unique_ptrIN4E5RT9E5RTErrorENS8_14default_deleteISN_EEEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZZN4E5DB12_GLOBAL__N_111RunFunctionERNS_10DebugStateERKNS0_14RunCommandArgsEP8pdwriterR"
                                "KNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEP12NSDictionarySI_SG_EN"
                                "K3$_1clEvENKUlmE_clEmEUlyyNS8_10unique_ptrIN4E5RT9E5RTErrorENS8_14default_deleteISN_EEEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZZN4E5DB12_GLOBAL__N_111RunFunctionERNS_10DebugStateERKNS0_14RunCommandArgsEP8pdwriterRKNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEP12NSDictionarySI_SG_ENK3$_1clEvENKUlmE_clEmEUlyyNS8_10unique_ptrIN4E5RT9E5RTErrorENS8_14default_deleteISN_EEEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZZN4E5DB12_GLOBAL__N_111RunFunctionERNS_10DebugStateERKNS0_14RunCommandArgsEP8pdwriterRKNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEP12NSDictionarySI_SG_ENK3$_1clEvENKUlmE_clEmEUlyyNS8_10unique_ptrIN4E5RT9E5RTErrorENS8_14default_deleteISN_EEEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_19248843C()
{
  return &unk_1EE39B798;
}

void nitro::ndarray_container::visit<nitro::ndarray_container,nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,(void *)0>(uint64_t a1)
{
  OUTLINED_FUNCTION_3(a1);
  if (!v2)
  {
    OUTLINED_FUNCTION_9();
    (*(void (**)(void))(v3 + 16))();
    std::__shared_weak_count::__release_weak(v1);
  }
  OUTLINED_FUNCTION_5();
}

void sub_1924884C4()
{
  MEMORY[0x192FF1220]();
  sub_192488458();

  JUMPOUT(0x192FF16B0);
}

uint64_t sub_1924884F0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
}

uint64_t sub_192488528()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t E5DB::SafeExecute(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t))(*(void *)v1 + 48))(v1);
  return 0;
}

void sub_19248872C(_Unwind_Exception *a1)
{
}

float Espresso::AOT::DTrees::concatAneFp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::concatAneIp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::concatAneJp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::concatAneKp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::concatAneGp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::concatAneHp()
{
  return 50.0;
}

float Espresso::AOT::DTrees::concatCpuFp()
{
  return 5.0;
}

float Espresso::AOT::DTrees::concatCpuIp()
{
  return 5.0;
}

float Espresso::AOT::DTrees::concatCpuJp()
{
  return 5.0;
}

float Espresso::AOT::DTrees::concatCpuKp()
{
  return 5.0;
}

float Espresso::AOT::DTrees::concatCpuGp()
{
  return 5.0;
}

float Espresso::AOT::DTrees::concatCpuHp()
{
  return 5.0;
}

float Espresso::AOT::DTrees::concatGpuFp()
{
  return 10.0;
}

float Espresso::AOT::DTrees::concatGpuIp()
{
  return 10.0;
}

float Espresso::AOT::DTrees::concatGpuJp()
{
  return 10.0;
}

float Espresso::AOT::DTrees::concatGpuKp()
{
  return 10.0;
}

float Espresso::AOT::DTrees::concatGpuGp()
{
  return 10.0;
}

float Espresso::AOT::DTrees::concatGpuHp()
{
  return 10.0;
}

float Espresso::AOT::DTrees::concatAneCp()
{
  return 45.0;
}

float Espresso::AOT::DTrees::concatAneDp()
{
  return 45.0;
}

float Espresso::AOT::DTrees::concatAneEp()
{
  return 45.0;
}

float Espresso::AOT::DTrees::concatCpuCp()
{
  return 3.0;
}

float Espresso::AOT::DTrees::concatCpuDp()
{
  return 3.0;
}

float Espresso::AOT::DTrees::concatCpuEp()
{
  return 3.0;
}

float Espresso::AOT::DTrees::concatGpuCp()
{
  return 5.0;
}

float Espresso::AOT::DTrees::concatGpuDp()
{
  return 5.0;
}

float Espresso::AOT::DTrees::concatGpuEp()
{
  return 5.0;
}

double *Espresso::AOT::ConstCostEstimator::ConstCostEstimator(Espresso::AOT::ConstCostEstimator *this, double a2, double a3)
{
  __n128 result = (double *)Espresso::AOT::AbstractCostEstimator::AbstractCostEstimator(this);
  *(void *)__n128 result = &unk_1EE36B2F0;
  result[1] = a2;
  result[2] = a3;
  return result;
}

{
  double *result;

  __n128 result = (double *)Espresso::AOT::AbstractCostEstimator::AbstractCostEstimator(this);
  *(void *)__n128 result = &unk_1EE36B2F0;
  result[1] = a2;
  result[2] = a3;
  return result;
}

void Espresso::AOT::ConstCostEstimator::EstimateCost(uint64_t a1, uint64_t a2)
{
}

void sub_192488984(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x1081C40FC6463CFLL);
  _Unwind_Resume(a1);
}

void Espresso::AOT::ConstCostEstimator::EstimateCost()
{
}

void sub_1924889FC(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x1081C40FC6463CFLL);
  _Unwind_Resume(a1);
}

void Espresso::AOT::ConstCostEstimator::LaunchCost(Espresso::AOT::ConstCostEstimator *this)
{
}

void sub_192488A74(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x1081C40FC6463CFLL);
  _Unwind_Resume(a1);
}

void Espresso::AOT::ConstCostEstimator::EndCost(Espresso::AOT::ConstCostEstimator *this)
{
}

void sub_192488AEC(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x1081C40FC6463CFLL);
  _Unwind_Resume(a1);
}

void Espresso::AOT::ConstCostEstimator::~ConstCostEstimator(Espresso::AOT::ConstCostEstimator *this)
{
  Espresso::AOT::AbstractCostEstimator::~AbstractCostEstimator(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t Espresso::AOT::AOTCompilerOptions::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 32));
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(a2 + 56));
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *> *>>((void *)(a1 + 88), *(char **)(a2 + 104), 0);
  }
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  return a1;
}

uint64_t Espresso::AOT::AOTCompilerOptions::operator=(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  uint64_t v5 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*v5);
  }
  long long v6 = a2[2];
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(_OWORD *)uint64_t v5 = v6;
  *((unsigned char *)a2 + 55) = 0;
  *((unsigned char *)a2 + 32) = 0;
  unint64_t v7 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*v7);
  }
  long long v8 = *(long long *)((char *)a2 + 56);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  *(_OWORD *)unint64_t v7 = v8;
  *((unsigned char *)a2 + 79) = 0;
  *((unsigned char *)a2 + 56) = 0;
  *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::__move_assign(a1 + 88, (uint64_t *)a2 + 11);
  *(void *)(a1 + 128) = *((void *)a2 + 16);
  return a1;
}

uint64_t Espresso::AOT::AOTCompilerOptions::GetVerbosityLevel(Espresso::AOT::AOTCompilerOptions *this)
{
  return *((unsigned __int8 *)this + 80);
}

uint64_t Espresso::AOT::AOTCompilerOptions::SetVerbosityLevel(uint64_t this, char a2)
{
  *(unsigned char *)(this + 80) = a2;
  return this;
}

uint64_t Espresso::AOT::AOTCompilerOptions::IncrementVerbosityLevel(uint64_t this)
{
  return this;
}

uint64_t Espresso::AOT::AOTCompilerOptions::GetShowVersion(Espresso::AOT::AOTCompilerOptions *this)
{
  return *((unsigned __int8 *)this + 81);
}

uint64_t Espresso::AOT::AOTCompilerOptions::SetShowVersion(uint64_t this, char a2)
{
  *(unsigned char *)(this + 8E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = a2;
  return this;
}

uint64_t Espresso::AOT::AOTCompilerOptions::GetQueryE5Platforms(Espresso::AOT::AOTCompilerOptions *this)
{
  return *((unsigned __int8 *)this + 82);
}

uint64_t Espresso::AOT::AOTCompilerOptions::SetQueryE5Platforms(uint64_t this, char a2)
{
  *(unsigned char *)(this + 82) = a2;
  return this;
}

uint64_t Espresso::AOT::AOTCompilerOptions::GetQueryE5PlatformFamilies(Espresso::AOT::AOTCompilerOptions *this)
{
  return *((unsigned __int8 *)this + 83);
}

uint64_t Espresso::AOT::AOTCompilerOptions::SetQueryE5PlatformFamilies(uint64_t this, char a2)
{
  *(unsigned char *)(this + 83) = a2;
  return this;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbifNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSI_1EJbifSD_EEEOSS_EEEDcSK_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  long long v4 = *(_DWORD **)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 24);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    __n128 result = ((uint64_t (*)(char *, _DWORD *))off_1EE39B7B8[v5])(&v6, v4);
  }
  v4[6] = -1;
  *long long v4 = *a3;
  v4[6] = 1;
  return result;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbifNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSI_1EJbifSD_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, _DWORD *a2, float *a3)
{
  long long v4 = *(_DWORD **)a1;
  uint64_t v5 = *(unsigned int *)(*(void *)a1 + 24);
  if (v5 != -1)
  {
    if (v5 == 2)
    {
      float result = *a3;
      *a2 = *(_DWORD *)a3;
      return result;
    }
    ((void (*)(char *, _DWORD *))off_1EE39B7B8[v5])(&v7, v4);
  }
  float result = *a3;
  *long long v4 = *(_DWORD *)a3;
  v4[6] = 2;
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  long long v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void **)*v2;
      uint64_t v4 = *((unsigned int *)v2 + 16);
      if (v4 != -1) {
        ((void (*)(char *, void **))off_1EE39B7B8[v4])(&v7, v2 + 5);
      }
      *((_DWORD *)v2 + 16) = -1;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__deallocate_node(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      uint64_t v4 = *((unsigned int *)v2 + 16);
      if (v4 != -1) {
        ((void (*)(char *, void **))off_1EE39B7B8[v4])(&v5, v2 + 5);
      }
      *((_DWORD *)v2 + 16) = -1;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *> *>>(void *a1, char *a2, char *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_11;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  long long v8 = (char *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      std::string::operator=((std::string *)(v8 + 16), (const std::string *)(a2 + 16));
      if (v8 != a2)
      {
        *((_DWORD *)v8 + 18) = *((_DWORD *)a2 + 18);
        std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,void *> *>>((void *)v8 + 5, *((long long **)a2 + 7), 0);
      }
      unint64_t v9 = *(char **)v8;
      std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::__node_insert_multi(a1, (uint64_t)v8);
      a2 = *(char **)a2;
      long long v8 = v9;
      if (!v9) {
        goto LABEL_11;
      }
    }
    do
    {
      unint64_t v10 = *(char **)v8;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,0>((uint64_t)(v8 + 16));
      operator delete(v8);
      long long v8 = v10;
    }
    while (v10);
  }
  else
  {
LABEL_11:
    while (a2 != a3)
    {
      std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::__construct_node<std::pair<std::string const,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>> const&>((uint64_t)a1, (uint64_t)(a2 + 16), (uint64_t)v11);
      std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::__node_insert_multi(a1, v11[0]);
      a2 = *(char **)a2;
    }
  }
}

void sub_192489240(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_19248925C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, char a12)
{
  if (__p)
  {
    if (a12) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,0>((uint64_t)__p + 16);
    }
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::__node_insert_multi(void *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned char *)(a2 + 16);
  unint64_t v5 = *(unsigned __int8 *)(a2 + 39);
  unint64_t v6 = *(void *)(a2 + 24);
  if ((v5 & 0x80u) == 0) {
    char v7 = (uint64_t *)(a2 + 16);
  }
  else {
    char v7 = *(uint64_t **)(a2 + 16);
  }
  if ((v5 & 0x80u) == 0) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = v6;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v16, v7, v8);
  *(void *)(a2 + 8) = v9;
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__node_insert_multi_prepare((uint64_t)a1, v9, v4);
  int8x8_t v11 = (int8x8_t)a1[1];
  unint64_t v12 = *(void *)(a2 + 8);
  uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    if (v12 >= *(void *)&v11) {
      v12 %= *(void *)&v11;
    }
  }
  else
  {
    v12 &= *(void *)&v11 - 1;
  }
  if (!inserted)
  {
    *(void *)a2 = a1[2];
    a1[2] = a2;
    *(void *)(*a1 + 8 * v12) = a1 + 2;
    if (!*(void *)a2) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(*(void *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v11) {
        v14 %= *(void *)&v11;
      }
    }
    else
    {
      v14 &= *(void *)&v11 - 1;
    }
LABEL_24:
    *(void *)(*a1 + 8 * v14) = a2;
    goto LABEL_25;
  }
  *(void *)a2 = *inserted;
  uint64_t *inserted = a2;
  if (*(void *)a2)
  {
    unint64_t v14 = *(void *)(*(void *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v11) {
        v14 %= *(void *)&v11;
      }
    }
    else
    {
      v14 &= *(void *)&v11 - 1;
    }
    if (v14 != v12) {
      goto LABEL_24;
    }
  }
LABEL_25:
  ++a1[3];
  return a2;
}

void std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,void *> *>>(void *a1, long long *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_14;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  unint64_t v8 = (char *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (!v8)
  {
LABEL_14:
    while (a2 != (long long *)a3)
    {
      std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__emplace_multi<std::pair<std::string const,std::variant<BOOL,int,float,std::string>> const&>(a1, a2 + 1);
      a2 = *(long long **)a2;
    }
    return;
  }
  while (a2 != (long long *)a3)
  {
    std::string::operator=((std::string *)(v8 + 16), (const std::string *)(a2 + 1));
    uint64_t v9 = *((unsigned int *)v8 + 16);
    uint64_t v10 = *((unsigned int *)a2 + 16);
    if (v9 == -1)
    {
      if (v10 != -1)
      {
LABEL_10:
        uint64_t v15 = v8 + 40;
        ((void (*)(char **))off_1EE39B7F8[v10])(&v15);
      }
    }
    else
    {
      if (v10 != -1) {
        goto LABEL_10;
      }
      ((void (*)(char *, char *))off_1EE39B7B8[v9])(&v16, v8 + 40);
      *((_DWORD *)v8 + 16) = -1;
    }
    int8x8_t v11 = *(char **)v8;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__node_insert_multi(a1, (uint64_t)v8);
    a2 = *(long long **)a2;
    unint64_t v8 = v11;
    if (!v11) {
      goto LABEL_14;
    }
  }
  do
  {
    unint64_t v12 = *(char **)v8;
    uint64_t v13 = *((unsigned int *)v8 + 16);
    if (v13 != -1) {
      ((void (*)(char *, char *))off_1EE39B7B8[v13])(&v14, v8 + 40);
    }
    *((_DWORD *)v8 + 16) = -1;
    if (v8[39] < 0) {
      operator delete(*((void **)v8 + 2));
    }
    operator delete(v8);
    unint64_t v8 = v12;
  }
  while (v12);
}

void sub_192489574(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_192489590(_Unwind_Exception *a1)
{
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__node_insert_multi(void *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned char *)(a2 + 16);
  unint64_t v5 = *(unsigned __int8 *)(a2 + 39);
  unint64_t v6 = *(void *)(a2 + 24);
  if ((v5 & 0x80u) == 0) {
    char v7 = (uint64_t *)(a2 + 16);
  }
  else {
    char v7 = *(uint64_t **)(a2 + 16);
  }
  if ((v5 & 0x80u) == 0) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = v6;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v16, v7, v8);
  *(void *)(a2 + 8) = v9;
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__node_insert_multi_prepare((uint64_t)a1, v9, v4);
  int8x8_t v11 = (int8x8_t)a1[1];
  unint64_t v12 = *(void *)(a2 + 8);
  uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    if (v12 >= *(void *)&v11) {
      v12 %= *(void *)&v11;
    }
  }
  else
  {
    v12 &= *(void *)&v11 - 1;
  }
  if (!inserted)
  {
    *(void *)a2 = a1[2];
    a1[2] = a2;
    *(void *)(*a1 + 8 * v12) = a1 + 2;
    if (!*(void *)a2) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(*(void *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v11) {
        v14 %= *(void *)&v11;
      }
    }
    else
    {
      v14 &= *(void *)&v11 - 1;
    }
LABEL_24:
    *(void *)(*a1 + 8 * v14) = a2;
    goto LABEL_25;
  }
  *(void *)a2 = *inserted;
  uint64_t *inserted = a2;
  if (*(void *)a2)
  {
    unint64_t v14 = *(void *)(*(void *)a2 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v11) {
        v14 %= *(void *)&v11;
      }
    }
    else
    {
      v14 &= *(void *)&v11 - 1;
    }
    if (v14 != v12) {
      goto LABEL_24;
    }
  }
LABEL_25:
  ++a1[3];
  return a2;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbifNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSI_1EJbifSD_EEERKSU_EEEDcSM_DpT0_(uint64_t result, unsigned char *a2, unsigned char *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 24);
  if (v5 != -1)
  {
    if (!v5)
    {
      *a2 = *a3;
      return result;
    }
    float result = ((uint64_t (*)(char *, uint64_t))off_1EE39B7B8[v5])(&v6, v4);
  }
  *(unsigned char *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 24) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbifNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSI_1EJbifSD_EEERKSU_EEEDcSM_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v4 = *(_DWORD **)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 24);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    float result = ((uint64_t (*)(char *, _DWORD *))off_1EE39B7B8[v5])(&v6, v4);
  }
  v4[6] = -1;
  *uint64_t v4 = *a3;
  v4[6] = 1;
  return result;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbifNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSI_1EJbifSD_EEERKSU_EEEDcSM_DpT0_(uint64_t a1, _DWORD *a2, float *a3)
{
  uint64_t v4 = *(_DWORD **)a1;
  uint64_t v5 = *(unsigned int *)(*(void *)a1 + 24);
  if (v5 != -1)
  {
    if (v5 == 2)
    {
      float result = *a3;
      *a2 = *(_DWORD *)a3;
      return result;
    }
    ((void (*)(char *, _DWORD *))off_1EE39B7B8[v5])(&v7, v4);
  }
  float result = *a3;
  *uint64_t v4 = *(_DWORD *)a3;
  v4[6] = 2;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbifNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSI_1EJbifSD_EEERKSU_EEEDcSM_DpT0_(__n128 **a1, std::string *this, std::string *__str)
{
  uint64_t v3 = *a1;
  unsigned __int32 v4 = (*a1)[1].n128_u32[2];
  if (v4 != 3)
  {
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v6, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
      unsigned __int32 v4 = v3[1].n128_u32[2];
      if (v4 == -1)
      {
LABEL_10:
        __n128 result = *(__n128 *)&v6.__r_.__value_.__l.__data_;
        v3[1].n128_u64[0] = v6.__r_.__value_.__r.__words[2];
        *uint64_t v3 = result;
        v3[1].n128_u32[2] = 3;
        return result;
      }
    }
    else
    {
      std::string v6 = *__str;
      if (v4 == -1) {
        goto LABEL_10;
      }
    }
    ((void (*)(char *, __n128 *))off_1EE39B7B8[v4])(&v7, v3);
    goto LABEL_10;
  }

  std::string::operator=(this, __str);
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, unsigned char *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v12 = 1;
    if (v6 >= 3) {
      BOOL v12 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v13 = v12 | (2 * v6);
    unint64_t v14 = vcvtps_u32_f32(v7 / v8);
    if (v13 <= v14) {
      size_t prime = v14;
    }
    else {
      size_t prime = v13;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v6 = *(void *)(a1 + 8);
    }
    if (prime > v6) {
      goto LABEL_15;
    }
    if (prime < v6)
    {
      size_t v16 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v6 >= 3)
      {
        uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
        v17.i16[0] = vaddlv_u8(v17);
        if (v17.u32[0] <= 1uLL)
        {
          uint64_t v18 = 1 << -(char)__clz(v16 - 1);
          if (v16 >= 2) {
            size_t v16 = v18;
          }
          if (prime <= v16) {
            size_t prime = v16;
          }
          if (prime >= v6) {
            goto LABEL_28;
          }
LABEL_15:
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__do_rehash<false>(a1, prime);
          goto LABEL_28;
        }
      }
      size_t v19 = std::__next_prime(v16);
      if (prime <= v19) {
        size_t prime = v19;
      }
      if (prime < v6) {
        goto LABEL_15;
      }
    }
LABEL_28:
    unint64_t v6 = *(void *)(a1 + 8);
    uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v20.i16[0] = vaddlv_u8(v20);
    unint64_t v10 = v20.u32[0];
    if (v20.u32[0] <= 1uLL) {
      goto LABEL_4;
    }
    goto LABEL_29;
  }
  uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] <= 1uLL)
  {
LABEL_4:
    uint64_t v11 = (v6 - 1) & a2;
    goto LABEL_31;
  }
LABEL_29:
  uint64_t v11 = a2;
  if (v6 <= a2) {
    uint64_t v11 = a2 % v6;
  }
LABEL_31:
  uint64_t v21 = *(uint64_t **)(*(void *)a1 + 8 * v11);
  if (!v21) {
    return 0;
  }
  char v22 = a3[23];
  if (v22 >= 0) {
    uint64_t v23 = a3[23];
  }
  else {
    uint64_t v23 = *((void *)a3 + 1);
  }
  if (v22 < 0) {
    a3 = *(unsigned char **)a3;
  }
  if (v10 >= 2)
  {
    int v43 = 0;
    do
    {
      float v28 = v21;
      uint64_t v21 = (uint64_t *)*v21;
      if (!v21) {
        break;
      }
      unint64_t v46 = v21[1];
      unint64_t v47 = v46;
      if (v46 >= v6) {
        unint64_t v47 = v46 % v6;
      }
      if (v47 != v11) {
        break;
      }
      if (v46 == a2
        && ((uint64_t v48 = *((unsigned __int8 *)v21 + 39), (v48 & 0x80u) == 0)
          ? (uint64_t v49 = *((unsigned __int8 *)v21 + 39))
          : (uint64_t v49 = v21[3]),
            v49 == v23))
      {
        char v50 = (const void **)(v21 + 2);
        if ((v48 & 0x80) != 0)
        {
          BOOL v44 = memcmp(*v50, a3, v21[3]) == 0;
        }
        else if (*((unsigned char *)v21 + 39))
        {
          uint64_t v51 = v48 - 1;
          uint64_t v52 = a3;
          do
          {
            int v54 = *(unsigned __int8 *)v50;
            char v50 = (const void **)((char *)v50 + 1);
            int v53 = v54;
            int v56 = *v52++;
            int v55 = v56;
            BOOL v39 = v51-- != 0;
            char v57 = v39;
            BOOL v41 = v53 == v55;
            BOOL v44 = v53 == v55;
          }
          while (v41 && (v57 & 1) != 0);
        }
        else
        {
          BOOL v44 = 1;
        }
      }
      else
      {
        BOOL v44 = 0;
      }
      int v45 = v43 & !v44;
      v43 |= v44;
    }
    while (v45 != 1);
  }
  else
  {
    int v24 = 0;
    unint64_t v25 = v6 - 1;
    do
    {
      float v28 = v21;
      uint64_t v21 = (uint64_t *)*v21;
      if (!v21) {
        break;
      }
      uint64_t v29 = v21[1];
      if ((v29 & v25) != v11) {
        break;
      }
      if (v29 == a2
        && ((uint64_t v30 = *((unsigned __int8 *)v21 + 39), (v30 & 0x80u) == 0)
          ? (uint64_t v31 = *((unsigned __int8 *)v21 + 39))
          : (uint64_t v31 = v21[3]),
            v31 == v23))
      {
        BOOL v32 = (const void **)(v21 + 2);
        if ((v30 & 0x80) != 0)
        {
          BOOL v26 = memcmp(*v32, a3, v21[3]) == 0;
        }
        else if (*((unsigned char *)v21 + 39))
        {
          uint64_t v33 = v30 - 1;
          unint64_t v34 = a3;
          do
          {
            int v36 = *(unsigned __int8 *)v32;
            BOOL v32 = (const void **)((char *)v32 + 1);
            int v35 = v36;
            int v38 = *v34++;
            int v37 = v38;
            BOOL v39 = v33-- != 0;
            char v40 = v39;
            BOOL v41 = v35 == v37;
            BOOL v26 = v35 == v37;
          }
          while (v41 && (v40 & 1) != 0);
        }
        else
        {
          BOOL v26 = 1;
        }
      }
      else
      {
        BOOL v26 = 0;
      }
      char v27 = v24 & !v26;
      v24 |= v26;
    }
    while ((v27 & 1) == 0);
  }
  return v28;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__emplace_multi<std::pair<std::string const,std::variant<BOOL,int,float,std::string>> const&>(void *a1, long long *a2)
{
  unsigned __int32 v4 = (char *)operator new(0x48uLL);
  *(void *)unsigned __int32 v4 = 0;
  *((void *)v4 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = 0;
  uint64_t v5 = std::pair<std::string const,std::variant<BOOL,int,float,std::string>>::pair[abi:ne180100]((std::string *)(v4 + 16), a2);
  int v6 = v4[39];
  if (v6 >= 0) {
    float v7 = (uint64_t *)v5;
  }
  else {
    float v7 = (uint64_t *)*((void *)v4 + 2);
  }
  if (v6 >= 0) {
    unint64_t v8 = v4[39];
  }
  else {
    unint64_t v8 = *((void *)v4 + 3);
  }
  *((void *)v4 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v10, v7, v8);
  return std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__node_insert_multi(a1, (uint64_t)v4);
}

void sub_192489D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_192489D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(unsigned int *)(v2 + 64);
      if (v3 != -1) {
        ((void (*)(char *, uint64_t))off_1EE39B7B8[v3])(&v5, v2 + 40);
      }
      *(_DWORD *)(v2 + 64) = -1;
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJbifNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJbifSD_EEERKSV_EEEDcSN_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJbifNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJbifSD_EEERKSV_EEEDcSN_DpT0_(uint64_t a1, _DWORD *a2, float *a3)
{
  float result = *a3;
  *a2 = *(_DWORD *)a3;
  return result;
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::__construct_node<std::pair<std::string const,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  int v6 = (char *)operator new(0x50uLL);
  float v7 = v6;
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  unint64_t v8 = (uint64_t *)(v6 + 16);
  *(void *)int v6 = 0;
  *((void *)v6 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v6 + 16), *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
    *((void *)v6 + 4) = *(void *)(a2 + 16);
  }
  std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>::unordered_map((uint64_t)(v7 + 40), a2 + 24);
  *(unsigned char *)(a3 + 16) = 1;
  int v9 = v7[39];
  if (v9 >= 0) {
    char v10 = v8;
  }
  else {
    char v10 = (uint64_t *)*((void *)v7 + 2);
  }
  if (v9 >= 0) {
    unint64_t v11 = v7[39];
  }
  else {
    unint64_t v11 = *((void *)v7 + 3);
  }
  unint64_t result = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v13, v10, v11);
  *((void *)v7 + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = result;
  return result;
}

void sub_192489EC8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_192489EE0(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 39) < 0) {
    operator delete(*v3);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    unsigned __int32 v4 = *(void **)(a1 + 16);
    if (v4)
    {
      do
      {
        uint64_t v5 = (void *)*v4;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,0>((uint64_t)(v4 + 2));
        operator delete(v4);
        unsigned __int32 v4 = v5;
      }
      while (v5);
    }
    *(void *)(a1 + 16) = 0;
    uint64_t v6 = *(void *)(a1 + 8);
    if (v6)
    {
      for (uint64_t i = 0; i != v6; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v8 = *a2;
  *a2 = 0;
  int v9 = *(void **)a1;
  *(void *)a1 = v8;
  if (v9) {
    operator delete(v9);
  }
  uint64_t v12 = a2[2];
  unint64_t v11 = a2 + 2;
  uint64_t v10 = v12;
  uint64_t v13 = *(v11 - 1);
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 8) = v13;
  *(v11 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = 0;
  uint64_t v14 = v11[1];
  *(void *)(a1 + 24) = v14;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v11 + 4);
  if (v14)
  {
    unint64_t v15 = *(void *)(v10 + 8);
    unint64_t v16 = *(void *)(a1 + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v15 >= v16) {
        v15 %= v16;
      }
    }
    else
    {
      v15 &= v16 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v15) = a1 + 16;
    void *v11 = 0;
    v11[1] = 0;
  }
}

uint64_t Espresso::AOT::MILCompilerForE5::ExtractOptions@<X0>(Espresso::AOT::MILCompilerForE5 *this@<X0>, Espresso::AOT::CompilerOptionsForE5 *a2@<X8>)
{
  return Espresso::AOT::CompilerOptionsForE5::CompilerOptionsForE5(a2, this);
}

void std::make_unique[abi:ne180100]<Espresso::AOT::Classic::ClassicAOTCompilerBackend,Espresso::AOT::AOTCompilerOptions &,std::unordered_map<std::string,std::string> &>()
{
}

void sub_19248A0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  MEMORY[0x192FF16B0](v14, 0x10F3C402E6D0B92);
  _Unwind_Resume(a1);
}

void Espresso::AOT::AbstractMILCompiler::~AbstractMILCompiler(Espresso::AOT::AbstractMILCompiler *this)
{
  *(void *)this = &unk_1EE36B370;
  uint64_t v2 = *((void *)this + 29);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 30);
    unsigned __int32 v4 = (void *)*((void *)this + 29);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      unsigned __int32 v4 = (void *)*((void *)this + 29);
    }
    *((void *)this + 30) = v2;
    operator delete(v4);
  }
  if (*((char *)this + 231) < 0)
  {
    operator delete(*((void **)this + 26));
    if ((*((char *)this + 207) & 0x80000000) == 0)
    {
LABEL_11:
      uint64_t v5 = this;
      goto LABEL_13;
    }
  }
  else if ((*((char *)this + 207) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(*((void **)this + 23));
  uint64_t v5 = this;

LABEL_13:
  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(v5);
}

double Espresso::AOT::MILCompilerForE5::GetComputeUnitsForPlatform(E5Common::PlatformIdentifier)const::$_0::operator()(std::string *a1, unsigned int *a2, unsigned int *a3)
{
  memset(&__p, 0, sizeof(__p));
  if (a2 != a3)
  {
    unsigned __int32 v4 = a2;
    while (1)
    {
      ComputeUnitName = E5RT::GetComputeUnitName(*v4);
      std::string::size_type v7 = v6;
      if (v6 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      uint64_t v8 = ComputeUnitName;
      if (v6 >= 0x17) {
        break;
      }
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v6;
      p_dst = &__dst;
      if (v6) {
        goto LABEL_15;
      }
LABEL_16:
      p_dst->__r_.__value_.__s.__data_[v7] = 0;
      int v12 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = __p.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        unint64_t v14 = size + 2;
        if (size + 2 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v14 > 0x16)
        {
          uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v14 | 7) != 0x17) {
            uint64_t v16 = v14 | 7;
          }
          uint64_t v17 = v16 + 1;
          unint64_t v15 = operator new(v16 + 1);
          v27.__r_.__value_.__l.__size_ = size + 2;
          v27.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
          v27.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
        }
        else
        {
          memset(&v27, 0, sizeof(v27));
          unint64_t v15 = &v27;
          *((unsigned char *)&v27.__r_.__value_.__s + 23) = size + 2;
        }
        if (v12 >= 0) {
          p_std::string p = &__p;
        }
        else {
          p_std::string p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v15, p_p, size);
        strcpy((char *)v15 + size, ", ");
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v19 = &__dst;
        }
        else {
          size_t v19 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v20 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v20 = __dst.__r_.__value_.__l.__size_;
        }
        uint64_t v21 = std::string::append(&v27, (const std::string::value_type *)v19, v20);
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v26.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v27.__r_.__value_.__l.__data_);
        }
        goto LABEL_38;
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v26, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
LABEL_38:
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        goto LABEL_5;
      }
      std::string v26 = __dst;
LABEL_5:
      if (v12 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v26;
      if (++v4 == a3) {
        goto LABEL_40;
      }
    }
    uint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v10 = v6 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_15:
    memmove(p_dst, v8, v7);
    goto LABEL_16;
  }
LABEL_40:
  double result = *(double *)&__p.__r_.__value_.__l.__data_;
  *a1 = __p;
  return result;
}

void sub_19248A47C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
  {
    operator delete(__p);
    if ((a16 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a11);
  _Unwind_Resume(exception_object);
}

uint64_t std::for_each[abi:ne180100]<std::__wrap_iter<E5RT::ComputeUnitType *>,Espresso::AOT::MILCompilerForE5::ExtractBackends(E5Common::PlatformIdentifier)::$_0>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    for (uint64_t i = a1; i != a2; ++i)
    {
      ComputeUnitName = E5RT::GetComputeUnitName(*i);
      if (v8 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      int v9 = ComputeUnitName;
      size_t v10 = v8;
      if (v8 >= 0x17)
      {
        uint64_t v13 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v8 | 7) != 0x17) {
          uint64_t v13 = v8 | 7;
        }
        uint64_t v14 = v13 + 1;
        p_dst = (long long *)operator new(v13 + 1);
        *((void *)&__dst + E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v10;
        unint64_t v19 = v14 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v19) = v8;
        p_dst = &__dst;
        if (!v8)
        {
          LOBYTE(__dst) = 0;
          unint64_t v12 = *(void *)(a3 + 8);
          if (v12 >= *(void *)(a3 + 16)) {
            goto LABEL_14;
          }
          goto LABEL_3;
        }
      }
      memmove(p_dst, v9, v10);
      *((unsigned char *)p_dst + v10) = 0;
      unint64_t v12 = *(void *)(a3 + 8);
      if (v12 >= *(void *)(a3 + 16))
      {
LABEL_14:
        unint64_t v15 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a3, (uint64_t)&__dst);
        int v16 = SHIBYTE(v19);
        *(void *)(a3 + 8) = v15;
        if (v16 < 0) {
          operator delete((void *)__dst);
        }
        continue;
      }
LABEL_3:
      long long v6 = __dst;
      *(void *)(v12 + 16) = v19;
      *(_OWORD *)unint64_t v12 = v6;
      *(void *)(a3 + 8) = v12 + 24;
    }
  }
  return a3;
}

void sub_19248A64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

Espresso::AOT::MILSegmenterOptions **std::unique_ptr<Espresso::AOT::MILSegmenterOptions>::~unique_ptr[abi:ne180100](Espresso::AOT::MILSegmenterOptions **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    Espresso::AOT::MILSegmenterOptions::~MILSegmenterOptions(v2);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

void Espresso::AOT::E5RTGroupMatcher::~E5RTGroupMatcher(Espresso::AOT::E5RTGroupMatcher *this)
{
  *(void *)this = &unk_1EE36B0F8;
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    uint64_t v2 = (void *)*((void *)this + 1);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*((void **)this + 4));
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
LABEL_3:
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
LABEL_4:

  Espresso::AOT::AbstractGroupMatcher::~AbstractGroupMatcher(this);
}

void Espresso::AOT::MILCompilerForE5::GetE5BackendToE5RTLoweringOptions(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, Espresso::AOT::AOTCompilerOptions *a4@<X8>)
{
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions(a4, (const Espresso::AOT::AOTCompilerOptions *)(a1 + 608));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v16 = *(std::string *)a2;
  }
  Espresso::AOT::AOTCompilerOptions::SetOutput((uint64_t)a4, (__n128 *)&v16);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  char v15 = 2;
  strcpy(v14, "\te5");
  strcpy((char *)__p, "platforms");
  uint64_t v8 = E5Common::E5PlatformManager::Instance(v7);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 24))(v8, a3);
  if (*(char *)(v9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)v9, *(void *)(v9 + 8));
  }
  else
  {
    long long v10 = *(_OWORD *)v9;
    v11.__r_.__value_.__r.__words[2] = *(void *)(v9 + 16);
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v10;
  }
  int v12 = 3;
  Espresso::AOT::AOTCompilerOptions::SetOption((uint64_t)a4, (long long *)&v14[1], (long long *)__p, (uint64_t)&v11);
  if (v12 != -1) {
    ((void (*)(char *, std::string *))off_1EE39B838[v12])(&v17, &v11);
  }
  int v12 = -1;
  if ((v14[0] & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0) {
      return;
    }
LABEL_15:
    operator delete(*(void **)&v14[1]);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0) {
    goto LABEL_15;
  }
}

void sub_19248A8C0(_Unwind_Exception *a1)
{
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions(v1);
  _Unwind_Resume(a1);
}

void sub_19248A8D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::variant<BOOL,int,float,std::string>::~variant[abi:ne180100]((uint64_t)&a9);
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions(v24);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForE5::MakeE5BackendToE5RTLowering(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v8 = 0x2B23828000000000;
  long long v9 = 0u;
  long long v10 = 0u;
  kdebug_trace();
  long long v6 = *a3;
  Espresso::AOT::MILCompilerForE5::GetE5BackendToE5RTLoweringOptions(a1, a2, (uint64_t)&v6, (Espresso::AOT::AOTCompilerOptions *)v7);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v6);
  operator new();
}

void sub_19248AA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)(v30 - 184));
  MEMORY[0x192FF16B0](v29, 0x10F3C40F482E0DDLL);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a12);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a29);
  _Unwind_Resume(a1);
}

void sub_19248AA84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void Espresso::AOT::MILCompilerForE5::MakeMemOptimizer()
{
}

void sub_19248ABC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  MEMORY[0x192FF16B0](v2, 0xE1C405CB88AE7);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_19248ABF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForE5::MakeMILE5Builder()
{
}

void sub_19248AD48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  MEMORY[0x192FF16B0](v2, 0x10E1C40B4AB9854);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_19248AD7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForE5::MakeFlexibleShapeTransformer(Espresso::AOT::MILCompilerForE5 *this)
{
}

void sub_19248ADD0(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0xC400A2AC0F1);
  _Unwind_Resume(a1);
}

uint64_t *std::tuple<std::unique_ptr<MIL::IRProgram>,std::vector<std::string>,std::vector<std::string>>::~tuple(uint64_t *a1)
{
  uint64_t v2 = a1[4];
  if (v2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = (void *)a1[4];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[4];
    }
    a1[5] = v2;
    operator delete(v4);
  }
  uint64_t v5 = a1[1];
  if (v5)
  {
    uint64_t v6 = a1[2];
    uint64_t v7 = (void *)a1[1];
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while (v6 != v5);
      uint64_t v7 = (void *)a1[1];
    }
    a1[2] = v5;
    operator delete(v7);
  }
  uint64_t v8 = *a1;
  *a1 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return a1;
}

uint64_t *std::pair<std::unique_ptr<MIL::IRProgram>,std::vector<std::string>>::~pair(uint64_t *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = a1[2];
    uint64_t v4 = (void *)a1[1];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }
  uint64_t v5 = *a1;
  *a1 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

void Espresso::AOT::MILCompilerForE5::GetOutputPaths(Espresso::AOT::MILCompilerForE5 *this@<X0>, void *a2@<X8>)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t OutputBundlePath = Espresso::AOT::CompilerOptionsForE5::GetOutputBundlePath((Espresso::AOT::MILCompilerForE5 *)((char *)this + 264));
  if (*(char *)(OutputBundlePath + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)OutputBundlePath, *(void *)(OutputBundlePath + 8));
  }
  else
  {
    long long v4 = *(_OWORD *)OutputBundlePath;
    __p.__r_.__value_.__r.__words[2] = *(void *)(OutputBundlePath + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v4;
  }
  std::vector<std::string>::vector[abi:ne180100](a2, (uint64_t)&__p, 1uLL);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_19248B028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::shared_ptr<MIL::IRValue const>>::vector[abi:ne180100](void *a1, void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = 2 * a3;
    uint64_t v6 = operator new(16 * a3);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    uint64_t v7 = &a2[v5];
    do
    {
      uint64_t v8 = a2[1];
      void *v6 = *a2;
      v6[1] = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      v6 += 2;
      a2 += 2;
    }
    while (a2 != v7);
    a1[1] = v6;
  }
  return a1;
}

void sub_19248B0E8(_Unwind_Exception *exception_object)
{
  if (*(void *)v1) {
    std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::vector((void **)(v1 + 8), *(char **)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

MIL::IRListValue **std::unique_ptr<MIL::IRListValue const>::~unique_ptr[abi:ne180100](MIL::IRListValue **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    MIL::IRListValue::~IRListValue(v2);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

void std::__shared_ptr_pointer<MIL::IRListValue const *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

MIL::IRListValue *std::__shared_ptr_pointer<MIL::IRListValue const *>::__on_zero_shared(uint64_t a1)
{
  double result = *(MIL::IRListValue **)(a1 + 24);
  if (result)
  {
    MIL::IRListValue::~IRListValue(result);
    JUMPOUT(0x192FF16B0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRListValue const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000192DBF7CCLL) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000192DBF7CCLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000192DBF7CCLL)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DBF7CCLL & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

const void **anonymous namespace'::CheckForDataDependentShape(BOOL,std::shared_ptr<MIL::IRProgram> const&,std::vector<std::string> const&)::$_0::operator()(void *a1, MIL::IRValueType *a2)
{
  if (E5Common::Utils::IsTensor((uint64_t)a2))
  {
    uint64_t v5 = MIL::IRValueType::AsTensorType(a2);
    double result = (const void **)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 96))(v5);
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    uint64_t v8 = *result;
    uint64_t v7 = result[1];
    int64_t v9 = v7 - (unsigned char *)*result;
    if (v7 == *result) {
      return result;
    }
    if (v9 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_12;
  }
  if (E5Common::Utils::IsTensorBuffer(a2, v4))
  {
    std::string v11 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a2);
    int v12 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v11);
    double result = (const void **)MIL::IRTensorBufferValueType::GetShape(v12);
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    uint64_t v8 = *result;
    uint64_t v7 = result[1];
    int64_t v9 = v7 - (unsigned char *)*result;
    if (v7 == *result) {
      return result;
    }
    if (v9 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_12;
  }
  if (!E5Common::Utils::IsPixelBuffer(a2, v10))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "MILCompilerForE5 - CheckForDataDependentShape(): Unsupported type for getShape.");
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t v13 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a2);
  uint64_t v14 = (MIL::IRPixelBufferValueType *)MIL::IRMemoryLayoutValueType::AsPixelBufferType(v13);
  double result = (const void **)MIL::IRPixelBufferValueType::GetShape(v14);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  uint64_t v8 = *result;
  uint64_t v7 = result[1];
  int64_t v9 = v7 - (unsigned char *)*result;
  if (v7 != *result)
  {
    if (v9 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
LABEL_12:
    char v15 = (char *)operator new(v7 - (unsigned char *)*result);
    *a1 = v15;
    a1[1] = v15;
    std::string v16 = &v15[8 * (v9 >> 3)];
    a1[2] = v16;
    double result = (const void **)memcpy(v15, v8, v9);
    a1[1] = v16;
  }
  return result;
}

void sub_19248B3D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19248B3EC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,Espresso::AOT::BackendIdentifier *>(unsigned int *a1, unsigned int *a2)
{
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      unsigned int v9 = *(a2 - 1);
      unsigned int v10 = *a1;
      if (v9 >= *a1) {
        return 1;
      }
      *a1 = v9;
      *(a2 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v10;
      return 1;
    case 3:
      unsigned int v11 = *a1;
      unsigned int v12 = a1[1];
      unsigned int v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12) {
          return 1;
        }
        a1[1] = v13;
        *(a2 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v12;
        unsigned int v30 = *a1;
        unsigned int v29 = a1[1];
        if (v29 >= *a1) {
          return 1;
        }
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        unsigned int v35 = *(a2 - 1);
        if (v35 >= v11) {
          return 1;
        }
        a1[1] = v35;
        *(a2 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v11;
        return 1;
      }
    case 4:
      uint64_t v14 = a1 + 1;
      unsigned int v15 = a1[1];
      std::string v16 = a1 + 2;
      unsigned int v17 = a1[2];
      unsigned int v18 = *a1;
      if (v15 < *a1)
      {
        unint64_t v19 = a1;
        std::string::size_type v20 = a1 + 2;
        unsigned int v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          unint64_t v19 = a1 + 1;
          std::string::size_type v20 = a1 + 2;
          unsigned int v21 = v18;
          if (v17 >= v18) {
            goto LABEL_38;
          }
        }
LABEL_35:
        *unint64_t v19 = v17;
        unsigned int *v20 = v18;
        unsigned int v15 = v21;
LABEL_36:
        unsigned int v31 = *(a2 - 1);
        if (v31 >= v15) {
          return 1;
        }
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *uint64_t v14 = v17;
        *std::string v16 = v15;
        unint64_t v19 = a1;
        std::string::size_type v20 = a1 + 1;
        unsigned int v21 = v15;
        if (v17 >= v18) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
LABEL_38:
      unsigned int v15 = v17;
      unsigned int v31 = *(a2 - 1);
      if (v31 >= v15) {
        return 1;
      }
LABEL_39:
      *std::string v16 = v31;
      *(a2 - E5RT::E5ProgramImpl::~E5ProgramImpl(this - 1) = v15;
      unsigned int v32 = *v16;
      unsigned int v33 = *v14;
      if (v32 >= v33) {
        return 1;
      }
      a1[1] = v32;
      a1[2] = v33;
      unsigned int v34 = *a1;
      if (v32 >= *a1) {
        return 1;
      }
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,Espresso::AOT::BackendIdentifier *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      long long v4 = a1 + 2;
      unsigned int v3 = a1[2];
      unsigned int v5 = a1[1];
      unsigned int v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5) {
          goto LABEL_20;
        }
        a1[1] = v3;
        *long long v4 = v5;
        uint64_t v7 = a1;
        uint64_t v8 = a1 + 1;
      }
      else
      {
        uint64_t v7 = a1;
        uint64_t v8 = a1 + 2;
        if (v3 < v5) {
          goto LABEL_19;
        }
        *a1 = v5;
        a1[1] = v6;
        uint64_t v7 = a1 + 1;
        uint64_t v8 = a1 + 2;
      }
      if (v3 >= v6) {
        goto LABEL_20;
      }
LABEL_19:
      unsigned int *v7 = v3;
      *uint64_t v8 = v6;
LABEL_20:
      long long v22 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v23 = 0;
      for (uint64_t i = 12; ; i += 4)
      {
        unsigned int v25 = *v22;
        unsigned int v26 = *v4;
        if (*v22 < v26) {
          break;
        }
LABEL_23:
        long long v4 = v22++;
        if (v22 == a2) {
          return 1;
        }
      }
      uint64_t v27 = i;
      do
      {
        *(unsigned int *)((char *)a1 + v27) = v26;
        uint64_t v28 = v27 - 4;
        if (v27 == 4)
        {
          *a1 = v25;
          if (++v23 != 8) {
            goto LABEL_23;
          }
          return v22 + 1 == a2;
        }
        unsigned int v26 = *(unsigned int *)((char *)a1 + v27 - 8);
        v27 -= 4;
      }
      while (v25 < v26);
      *(unsigned int *)((char *)a1 + v28) = v25;
      if (++v23 != 8) {
        goto LABEL_23;
      }
      return v22 + 1 == a2;
  }
}

unsigned int *std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,Espresso::AOT::BackendIdentifier *>(unsigned int *result, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  unsigned int v5 = *a2;
  unsigned int v6 = *result;
  unsigned int v7 = *a3;
  if (*a2 >= *result)
  {
    if (v7 >= v5)
    {
      unsigned int v5 = *a3;
      unsigned int v9 = *a4;
      if (*a4 >= v7) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
    *a2 = v7;
    *a3 = v5;
    unsigned int v8 = *result;
    if (*a2 < *result)
    {
      *double result = *a2;
      *a2 = v8;
      unsigned int v5 = *a3;
      unsigned int v9 = *a4;
      if (*a4 >= *a3) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (v7 >= v5)
    {
      *double result = v5;
      *a2 = v6;
      unsigned int v5 = *a3;
      if (*a3 >= v6) {
        goto LABEL_11;
      }
      *a2 = v5;
    }
    else
    {
      *double result = v7;
    }
    *a3 = v6;
    unsigned int v5 = v6;
  }
LABEL_11:
  unsigned int v9 = *a4;
  if (*a4 >= v5) {
    goto LABEL_17;
  }
LABEL_14:
  *a3 = v9;
  *a4 = v5;
  unsigned int v10 = *a2;
  if (*a3 < *a2)
  {
    *a2 = *a3;
    *a3 = v10;
    unsigned int v11 = *result;
    if (*a2 < *result)
    {
      *double result = *a2;
      *a2 = v11;
    }
  }
LABEL_17:
  unsigned int v12 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v12;
    unsigned int v13 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v13;
      unsigned int v14 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v14;
        unsigned int v15 = *result;
        if (*a2 < *result)
        {
          *double result = *a2;
          *a2 = v15;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,Espresso::AOT::BackendIdentifier *,Espresso::AOT::BackendIdentifier *>(char *a1, char *a2, char *a3)
{
  if (a1 == a2) {
    return a3;
  }
  uint64_t v3 = a2 - a1;
  uint64_t v4 = (a2 - a1) >> 2;
  if (a2 - a1 >= 5 && (unint64_t)v3 >= 8)
  {
    int64_t v35 = (unint64_t)(v4 - 2) >> 1;
    int v36 = a1 + 4;
    int64_t v37 = v35;
    do
    {
      if (v35 >= v37)
      {
        uint64_t v38 = (2 * v37) | 1;
        BOOL v39 = (char *)&v36[2 * v37];
        if (2 * v37 + 2 >= v4)
        {
          unsigned int v40 = *(_DWORD *)v39;
          uint64_t v42 = &a1[4 * v37];
          unsigned int v43 = *(_DWORD *)v42;
          if (*(_DWORD *)v39 >= *(_DWORD *)v42) {
            goto LABEL_78;
          }
        }
        else
        {
          unsigned int v40 = *((_DWORD *)v39 + 1);
          BOOL v41 = *(_DWORD *)v39 >= v40;
          if (*(_DWORD *)v39 > v40) {
            unsigned int v40 = *(_DWORD *)v39;
          }
          if (!v41)
          {
            v39 += 4;
            uint64_t v38 = 2 * v37 + 2;
          }
          uint64_t v42 = &a1[4 * v37];
          unsigned int v43 = *(_DWORD *)v42;
          if (v40 >= *(_DWORD *)v42)
          {
LABEL_78:
            while (1)
            {
              *(_DWORD *)uint64_t v42 = v40;
              uint64_t v42 = v39;
              if (v35 < v38) {
                break;
              }
              uint64_t v45 = (2 * v38) | 1;
              BOOL v39 = (char *)&v36[2 * v38];
              uint64_t v38 = 2 * v38 + 2;
              if (v38 < v4)
              {
                unsigned int v40 = *(_DWORD *)v39;
                unsigned int v44 = *((_DWORD *)v39 + 1);
                if (*(_DWORD *)v39 <= v44) {
                  unsigned int v40 = *((_DWORD *)v39 + 1);
                }
                if (*(_DWORD *)v39 >= v44) {
                  uint64_t v38 = v45;
                }
                else {
                  v39 += 4;
                }
                if (v40 < v43) {
                  break;
                }
              }
              else
              {
                unsigned int v40 = *(_DWORD *)v39;
                uint64_t v38 = v45;
                if (*(_DWORD *)v39 < v43) {
                  break;
                }
              }
            }
            *(_DWORD *)uint64_t v42 = v43;
          }
        }
      }
      BOOL v20 = v37-- <= 0;
    }
    while (!v20);
  }
  unsigned int v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 8)
    {
      unsigned int v6 = *(_DWORD *)a1;
      unsigned int v7 = a2;
      do
      {
        unsigned int v8 = *(_DWORD *)v7;
        if (*(_DWORD *)v7 < v6)
        {
          *(_DWORD *)unsigned int v7 = v6;
          *(_DWORD *)a1 = v8;
          unsigned int v6 = v8;
        }
        v7 += 4;
      }
      while (v7 != a3);
LABEL_37:
      unsigned int v5 = a3;
      goto LABEL_38;
    }
    unsigned int v9 = a2;
    while (1)
    {
      unsigned int v10 = *(_DWORD *)v9;
      if (*(_DWORD *)v9 < *(_DWORD *)a1)
      {
        *(_DWORD *)unsigned int v9 = *(_DWORD *)a1;
        *(_DWORD *)a1 = v10;
        unsigned int v11 = *((_DWORD *)a1 + 1);
        if (v3 == 8)
        {
          unsigned int v12 = a1 + 4;
          uint64_t v13 = 1;
          if (v11 >= v10) {
            goto LABEL_26;
          }
        }
        else
        {
          unsigned int v14 = *((_DWORD *)a1 + 2);
          BOOL v15 = v11 >= v14;
          if (v11 <= v14) {
            unsigned int v11 = *((_DWORD *)a1 + 2);
          }
          if (v15) {
            unsigned int v12 = a1 + 4;
          }
          else {
            unsigned int v12 = a1 + 8;
          }
          if (v15) {
            uint64_t v13 = 1;
          }
          else {
            uint64_t v13 = 2;
          }
          if (v11 >= v10)
          {
LABEL_26:
            std::string v16 = a1;
            while (1)
            {
              *(_DWORD *)std::string v16 = v11;
              std::string v16 = v12;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v13) {
                break;
              }
              uint64_t v18 = (2 * v13) | 1;
              unsigned int v12 = &a1[8 * v13 + 4];
              uint64_t v13 = 2 * v13 + 2;
              if (v13 < v4)
              {
                unsigned int v11 = *(_DWORD *)v12;
                unsigned int v17 = *((_DWORD *)v12 + 1);
                if (*(_DWORD *)v12 <= v17) {
                  unsigned int v11 = *((_DWORD *)v12 + 1);
                }
                if (*(_DWORD *)v12 >= v17) {
                  uint64_t v13 = v18;
                }
                else {
                  v12 += 4;
                }
                if (v11 < v10) {
                  break;
                }
              }
              else
              {
                unsigned int v11 = *(_DWORD *)v12;
                uint64_t v13 = v18;
                if (*(_DWORD *)v12 < v10) {
                  break;
                }
              }
            }
            *(_DWORD *)std::string v16 = v10;
          }
        }
      }
      v9 += 4;
      if (v9 == a3) {
        goto LABEL_37;
      }
    }
  }
LABEL_38:
  if (v3 >= 5)
  {
    uint64_t v19 = (unint64_t)v3 >> 2;
    do
    {
      uint64_t v21 = 0;
      unsigned int v22 = *(_DWORD *)a1;
      int64_t v23 = (unint64_t)(v19 - 2) >> 1;
      int v24 = a1;
      do
      {
        while (1)
        {
          uint64_t v27 = &v24[4 * v21 + 4];
          uint64_t v28 = (2 * v21) | 1;
          uint64_t v21 = 2 * v21 + 2;
          if (v21 < v19) {
            break;
          }
          uint64_t v21 = v28;
          *(_DWORD *)int v24 = *(_DWORD *)v27;
          int v24 = v27;
          if (v28 > v23) {
            goto LABEL_51;
          }
        }
        int v25 = *(_DWORD *)v27;
        unsigned int v26 = *((_DWORD *)v27 + 1);
        if (*(_DWORD *)v27 <= v26) {
          int v25 = *((_DWORD *)v27 + 1);
        }
        if (*(_DWORD *)v27 >= v26) {
          uint64_t v21 = v28;
        }
        else {
          v27 += 4;
        }
        *(_DWORD *)int v24 = v25;
        int v24 = v27;
      }
      while (v21 <= v23);
LABEL_51:
      a2 -= 4;
      if (v27 == a2)
      {
        *(_DWORD *)uint64_t v27 = v22;
      }
      else
      {
        *(_DWORD *)uint64_t v27 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v22;
        uint64_t v29 = v27 - a1 + 4;
        if (v29 >= 5)
        {
          unint64_t v30 = (((unint64_t)v29 >> 2) - 2) >> 1;
          unsigned int v31 = &a1[4 * v30];
          int v32 = *(_DWORD *)v31;
          unsigned int v33 = *(_DWORD *)v27;
          if (*(_DWORD *)v31 < *(_DWORD *)v27)
          {
            do
            {
              *(_DWORD *)uint64_t v27 = v32;
              uint64_t v27 = v31;
              if (!v30) {
                break;
              }
              unint64_t v30 = (v30 - 1) >> 1;
              unsigned int v31 = &a1[4 * v30];
              int v32 = *(_DWORD *)v31;
            }
            while (*(_DWORD *)v31 < v33);
            *(_DWORD *)uint64_t v27 = v33;
          }
        }
      }
      BOOL v20 = v19-- <= 2;
    }
    while (!v20);
  }
  return v5;
}